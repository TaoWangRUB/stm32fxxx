
F405Uart.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003848  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000074  080039d8  080039d8  000049d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003a4c  08003a4c  00005068  2**0
                  CONTENTS
  4 .ARM          00000008  08003a4c  08003a4c  00004a4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003a54  08003a54  00005068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003a54  08003a54  00004a54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003a58  08003a58  00004a58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08003a5c  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00005068  2**0
                  CONTENTS
 10 .bss          000001dc  20000068  20000068  00005068  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000244  20000244  00005068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00005068  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000977b  00000000  00000000  00005098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001aeb  00000000  00000000  0000e813  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000890  00000000  00000000  00010300  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000678  00000000  00000000  00010b90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001fd7f  00000000  00000000  00011208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a2a1  00000000  00000000  00030f87  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bf991  00000000  00000000  0003b228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  000fabb9  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002920  00000000  00000000  000fabfc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005c  00000000  00000000  000fd51c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000068 	.word	0x20000068
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080039c0 	.word	0x080039c0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000006c 	.word	0x2000006c
 80001cc:	080039c0 	.word	0x080039c0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000280:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000284:	f000 b96a 	b.w	800055c <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	460c      	mov	r4, r1
 80002a8:	2b00      	cmp	r3, #0
 80002aa:	d14e      	bne.n	800034a <__udivmoddi4+0xaa>
 80002ac:	4694      	mov	ip, r2
 80002ae:	458c      	cmp	ip, r1
 80002b0:	4686      	mov	lr, r0
 80002b2:	fab2 f282 	clz	r2, r2
 80002b6:	d962      	bls.n	800037e <__udivmoddi4+0xde>
 80002b8:	b14a      	cbz	r2, 80002ce <__udivmoddi4+0x2e>
 80002ba:	f1c2 0320 	rsb	r3, r2, #32
 80002be:	4091      	lsls	r1, r2
 80002c0:	fa20 f303 	lsr.w	r3, r0, r3
 80002c4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002c8:	4319      	orrs	r1, r3
 80002ca:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ce:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002d2:	fa1f f68c 	uxth.w	r6, ip
 80002d6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002da:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002de:	fb07 1114 	mls	r1, r7, r4, r1
 80002e2:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80002e6:	fb04 f106 	mul.w	r1, r4, r6
 80002ea:	4299      	cmp	r1, r3
 80002ec:	d90a      	bls.n	8000304 <__udivmoddi4+0x64>
 80002ee:	eb1c 0303 	adds.w	r3, ip, r3
 80002f2:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 80002f6:	f080 8112 	bcs.w	800051e <__udivmoddi4+0x27e>
 80002fa:	4299      	cmp	r1, r3
 80002fc:	f240 810f 	bls.w	800051e <__udivmoddi4+0x27e>
 8000300:	3c02      	subs	r4, #2
 8000302:	4463      	add	r3, ip
 8000304:	1a59      	subs	r1, r3, r1
 8000306:	fa1f f38e 	uxth.w	r3, lr
 800030a:	fbb1 f0f7 	udiv	r0, r1, r7
 800030e:	fb07 1110 	mls	r1, r7, r0, r1
 8000312:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000316:	fb00 f606 	mul.w	r6, r0, r6
 800031a:	429e      	cmp	r6, r3
 800031c:	d90a      	bls.n	8000334 <__udivmoddi4+0x94>
 800031e:	eb1c 0303 	adds.w	r3, ip, r3
 8000322:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000326:	f080 80fc 	bcs.w	8000522 <__udivmoddi4+0x282>
 800032a:	429e      	cmp	r6, r3
 800032c:	f240 80f9 	bls.w	8000522 <__udivmoddi4+0x282>
 8000330:	4463      	add	r3, ip
 8000332:	3802      	subs	r0, #2
 8000334:	1b9b      	subs	r3, r3, r6
 8000336:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800033a:	2100      	movs	r1, #0
 800033c:	b11d      	cbz	r5, 8000346 <__udivmoddi4+0xa6>
 800033e:	40d3      	lsrs	r3, r2
 8000340:	2200      	movs	r2, #0
 8000342:	e9c5 3200 	strd	r3, r2, [r5]
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	428b      	cmp	r3, r1
 800034c:	d905      	bls.n	800035a <__udivmoddi4+0xba>
 800034e:	b10d      	cbz	r5, 8000354 <__udivmoddi4+0xb4>
 8000350:	e9c5 0100 	strd	r0, r1, [r5]
 8000354:	2100      	movs	r1, #0
 8000356:	4608      	mov	r0, r1
 8000358:	e7f5      	b.n	8000346 <__udivmoddi4+0xa6>
 800035a:	fab3 f183 	clz	r1, r3
 800035e:	2900      	cmp	r1, #0
 8000360:	d146      	bne.n	80003f0 <__udivmoddi4+0x150>
 8000362:	42a3      	cmp	r3, r4
 8000364:	d302      	bcc.n	800036c <__udivmoddi4+0xcc>
 8000366:	4290      	cmp	r0, r2
 8000368:	f0c0 80f0 	bcc.w	800054c <__udivmoddi4+0x2ac>
 800036c:	1a86      	subs	r6, r0, r2
 800036e:	eb64 0303 	sbc.w	r3, r4, r3
 8000372:	2001      	movs	r0, #1
 8000374:	2d00      	cmp	r5, #0
 8000376:	d0e6      	beq.n	8000346 <__udivmoddi4+0xa6>
 8000378:	e9c5 6300 	strd	r6, r3, [r5]
 800037c:	e7e3      	b.n	8000346 <__udivmoddi4+0xa6>
 800037e:	2a00      	cmp	r2, #0
 8000380:	f040 8090 	bne.w	80004a4 <__udivmoddi4+0x204>
 8000384:	eba1 040c 	sub.w	r4, r1, ip
 8000388:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800038c:	fa1f f78c 	uxth.w	r7, ip
 8000390:	2101      	movs	r1, #1
 8000392:	fbb4 f6f8 	udiv	r6, r4, r8
 8000396:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800039a:	fb08 4416 	mls	r4, r8, r6, r4
 800039e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003a2:	fb07 f006 	mul.w	r0, r7, r6
 80003a6:	4298      	cmp	r0, r3
 80003a8:	d908      	bls.n	80003bc <__udivmoddi4+0x11c>
 80003aa:	eb1c 0303 	adds.w	r3, ip, r3
 80003ae:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80003b2:	d202      	bcs.n	80003ba <__udivmoddi4+0x11a>
 80003b4:	4298      	cmp	r0, r3
 80003b6:	f200 80cd 	bhi.w	8000554 <__udivmoddi4+0x2b4>
 80003ba:	4626      	mov	r6, r4
 80003bc:	1a1c      	subs	r4, r3, r0
 80003be:	fa1f f38e 	uxth.w	r3, lr
 80003c2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003c6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ce:	fb00 f707 	mul.w	r7, r0, r7
 80003d2:	429f      	cmp	r7, r3
 80003d4:	d908      	bls.n	80003e8 <__udivmoddi4+0x148>
 80003d6:	eb1c 0303 	adds.w	r3, ip, r3
 80003da:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80003de:	d202      	bcs.n	80003e6 <__udivmoddi4+0x146>
 80003e0:	429f      	cmp	r7, r3
 80003e2:	f200 80b0 	bhi.w	8000546 <__udivmoddi4+0x2a6>
 80003e6:	4620      	mov	r0, r4
 80003e8:	1bdb      	subs	r3, r3, r7
 80003ea:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80003ee:	e7a5      	b.n	800033c <__udivmoddi4+0x9c>
 80003f0:	f1c1 0620 	rsb	r6, r1, #32
 80003f4:	408b      	lsls	r3, r1
 80003f6:	fa22 f706 	lsr.w	r7, r2, r6
 80003fa:	431f      	orrs	r7, r3
 80003fc:	fa20 fc06 	lsr.w	ip, r0, r6
 8000400:	fa04 f301 	lsl.w	r3, r4, r1
 8000404:	ea43 030c 	orr.w	r3, r3, ip
 8000408:	40f4      	lsrs	r4, r6
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	0c38      	lsrs	r0, r7, #16
 8000410:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000414:	fbb4 fef0 	udiv	lr, r4, r0
 8000418:	fa1f fc87 	uxth.w	ip, r7
 800041c:	fb00 441e 	mls	r4, r0, lr, r4
 8000420:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000424:	fb0e f90c 	mul.w	r9, lr, ip
 8000428:	45a1      	cmp	r9, r4
 800042a:	fa02 f201 	lsl.w	r2, r2, r1
 800042e:	d90a      	bls.n	8000446 <__udivmoddi4+0x1a6>
 8000430:	193c      	adds	r4, r7, r4
 8000432:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000436:	f080 8084 	bcs.w	8000542 <__udivmoddi4+0x2a2>
 800043a:	45a1      	cmp	r9, r4
 800043c:	f240 8081 	bls.w	8000542 <__udivmoddi4+0x2a2>
 8000440:	f1ae 0e02 	sub.w	lr, lr, #2
 8000444:	443c      	add	r4, r7
 8000446:	eba4 0409 	sub.w	r4, r4, r9
 800044a:	fa1f f983 	uxth.w	r9, r3
 800044e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000452:	fb00 4413 	mls	r4, r0, r3, r4
 8000456:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800045a:	fb03 fc0c 	mul.w	ip, r3, ip
 800045e:	45a4      	cmp	ip, r4
 8000460:	d907      	bls.n	8000472 <__udivmoddi4+0x1d2>
 8000462:	193c      	adds	r4, r7, r4
 8000464:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000468:	d267      	bcs.n	800053a <__udivmoddi4+0x29a>
 800046a:	45a4      	cmp	ip, r4
 800046c:	d965      	bls.n	800053a <__udivmoddi4+0x29a>
 800046e:	3b02      	subs	r3, #2
 8000470:	443c      	add	r4, r7
 8000472:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000476:	fba0 9302 	umull	r9, r3, r0, r2
 800047a:	eba4 040c 	sub.w	r4, r4, ip
 800047e:	429c      	cmp	r4, r3
 8000480:	46ce      	mov	lr, r9
 8000482:	469c      	mov	ip, r3
 8000484:	d351      	bcc.n	800052a <__udivmoddi4+0x28a>
 8000486:	d04e      	beq.n	8000526 <__udivmoddi4+0x286>
 8000488:	b155      	cbz	r5, 80004a0 <__udivmoddi4+0x200>
 800048a:	ebb8 030e 	subs.w	r3, r8, lr
 800048e:	eb64 040c 	sbc.w	r4, r4, ip
 8000492:	fa04 f606 	lsl.w	r6, r4, r6
 8000496:	40cb      	lsrs	r3, r1
 8000498:	431e      	orrs	r6, r3
 800049a:	40cc      	lsrs	r4, r1
 800049c:	e9c5 6400 	strd	r6, r4, [r5]
 80004a0:	2100      	movs	r1, #0
 80004a2:	e750      	b.n	8000346 <__udivmoddi4+0xa6>
 80004a4:	f1c2 0320 	rsb	r3, r2, #32
 80004a8:	fa20 f103 	lsr.w	r1, r0, r3
 80004ac:	fa0c fc02 	lsl.w	ip, ip, r2
 80004b0:	fa24 f303 	lsr.w	r3, r4, r3
 80004b4:	4094      	lsls	r4, r2
 80004b6:	430c      	orrs	r4, r1
 80004b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004bc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004c0:	fa1f f78c 	uxth.w	r7, ip
 80004c4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004c8:	fb08 3110 	mls	r1, r8, r0, r3
 80004cc:	0c23      	lsrs	r3, r4, #16
 80004ce:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004d2:	fb00 f107 	mul.w	r1, r0, r7
 80004d6:	4299      	cmp	r1, r3
 80004d8:	d908      	bls.n	80004ec <__udivmoddi4+0x24c>
 80004da:	eb1c 0303 	adds.w	r3, ip, r3
 80004de:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80004e2:	d22c      	bcs.n	800053e <__udivmoddi4+0x29e>
 80004e4:	4299      	cmp	r1, r3
 80004e6:	d92a      	bls.n	800053e <__udivmoddi4+0x29e>
 80004e8:	3802      	subs	r0, #2
 80004ea:	4463      	add	r3, ip
 80004ec:	1a5b      	subs	r3, r3, r1
 80004ee:	b2a4      	uxth	r4, r4
 80004f0:	fbb3 f1f8 	udiv	r1, r3, r8
 80004f4:	fb08 3311 	mls	r3, r8, r1, r3
 80004f8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80004fc:	fb01 f307 	mul.w	r3, r1, r7
 8000500:	42a3      	cmp	r3, r4
 8000502:	d908      	bls.n	8000516 <__udivmoddi4+0x276>
 8000504:	eb1c 0404 	adds.w	r4, ip, r4
 8000508:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800050c:	d213      	bcs.n	8000536 <__udivmoddi4+0x296>
 800050e:	42a3      	cmp	r3, r4
 8000510:	d911      	bls.n	8000536 <__udivmoddi4+0x296>
 8000512:	3902      	subs	r1, #2
 8000514:	4464      	add	r4, ip
 8000516:	1ae4      	subs	r4, r4, r3
 8000518:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800051c:	e739      	b.n	8000392 <__udivmoddi4+0xf2>
 800051e:	4604      	mov	r4, r0
 8000520:	e6f0      	b.n	8000304 <__udivmoddi4+0x64>
 8000522:	4608      	mov	r0, r1
 8000524:	e706      	b.n	8000334 <__udivmoddi4+0x94>
 8000526:	45c8      	cmp	r8, r9
 8000528:	d2ae      	bcs.n	8000488 <__udivmoddi4+0x1e8>
 800052a:	ebb9 0e02 	subs.w	lr, r9, r2
 800052e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000532:	3801      	subs	r0, #1
 8000534:	e7a8      	b.n	8000488 <__udivmoddi4+0x1e8>
 8000536:	4631      	mov	r1, r6
 8000538:	e7ed      	b.n	8000516 <__udivmoddi4+0x276>
 800053a:	4603      	mov	r3, r0
 800053c:	e799      	b.n	8000472 <__udivmoddi4+0x1d2>
 800053e:	4630      	mov	r0, r6
 8000540:	e7d4      	b.n	80004ec <__udivmoddi4+0x24c>
 8000542:	46d6      	mov	lr, sl
 8000544:	e77f      	b.n	8000446 <__udivmoddi4+0x1a6>
 8000546:	4463      	add	r3, ip
 8000548:	3802      	subs	r0, #2
 800054a:	e74d      	b.n	80003e8 <__udivmoddi4+0x148>
 800054c:	4606      	mov	r6, r0
 800054e:	4623      	mov	r3, r4
 8000550:	4608      	mov	r0, r1
 8000552:	e70f      	b.n	8000374 <__udivmoddi4+0xd4>
 8000554:	3e02      	subs	r6, #2
 8000556:	4463      	add	r3, ip
 8000558:	e730      	b.n	80003bc <__udivmoddi4+0x11c>
 800055a:	bf00      	nop

0800055c <__aeabi_idiv0>:
 800055c:	4770      	bx	lr
 800055e:	bf00      	nop

08000560 <board_button_getstate>:
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
  HAL_GPIO_Init(KEY_GPIO_Port, &GPIO_InitStruct);
}

uint8_t board_button_getstate(void)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	af00      	add	r7, sp, #0
  return HAL_GPIO_ReadPin(KEY_GPIO_Port,KEY_Pin)==GPIO_PIN_SET?1:0;
 8000564:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000568:	4805      	ldr	r0, [pc, #20]	@ (8000580 <board_button_getstate+0x20>)
 800056a:	f000 fe5b 	bl	8001224 <HAL_GPIO_ReadPin>
 800056e:	4603      	mov	r3, r0
 8000570:	2b01      	cmp	r3, #1
 8000572:	bf0c      	ite	eq
 8000574:	2301      	moveq	r3, #1
 8000576:	2300      	movne	r3, #0
 8000578:	b2db      	uxtb	r3, r3
}
 800057a:	4618      	mov	r0, r3
 800057c:	bd80      	pop	{r7, pc}
 800057e:	bf00      	nop
 8000580:	40020800 	.word	0x40020800

08000584 <board_led_toggle>:
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
}

void board_led_toggle(void)
{
 8000584:	b580      	push	{r7, lr}
 8000586:	af00      	add	r7, sp, #0
    HAL_GPIO_TogglePin(LED_GPIO_Port,LED_Pin);
 8000588:	2104      	movs	r1, #4
 800058a:	4802      	ldr	r0, [pc, #8]	@ (8000594 <board_led_toggle+0x10>)
 800058c:	f000 fe7b 	bl	8001286 <HAL_GPIO_TogglePin>
}
 8000590:	bf00      	nop
 8000592:	bd80      	pop	{r7, pc}
 8000594:	40020400 	.word	0x40020400

08000598 <board_led_set>:

void board_led_set(uint8_t set)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b082      	sub	sp, #8
 800059c:	af00      	add	r7, sp, #0
 800059e:	4603      	mov	r3, r0
 80005a0:	71fb      	strb	r3, [r7, #7]
    if (set)
 80005a2:	79fb      	ldrb	r3, [r7, #7]
 80005a4:	2b00      	cmp	r3, #0
 80005a6:	d005      	beq.n	80005b4 <board_led_set+0x1c>
        HAL_GPIO_WritePin(LED_GPIO_Port,LED_Pin,GPIO_PIN_SET);
 80005a8:	2201      	movs	r2, #1
 80005aa:	2104      	movs	r1, #4
 80005ac:	4806      	ldr	r0, [pc, #24]	@ (80005c8 <board_led_set+0x30>)
 80005ae:	f000 fe51 	bl	8001254 <HAL_GPIO_WritePin>
    else
        HAL_GPIO_WritePin(LED_GPIO_Port,LED_Pin,GPIO_PIN_RESET);
}
 80005b2:	e004      	b.n	80005be <board_led_set+0x26>
        HAL_GPIO_WritePin(LED_GPIO_Port,LED_Pin,GPIO_PIN_RESET);
 80005b4:	2200      	movs	r2, #0
 80005b6:	2104      	movs	r1, #4
 80005b8:	4803      	ldr	r0, [pc, #12]	@ (80005c8 <board_led_set+0x30>)
 80005ba:	f000 fe4b 	bl	8001254 <HAL_GPIO_WritePin>
}
 80005be:	bf00      	nop
 80005c0:	3708      	adds	r7, #8
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	bf00      	nop
 80005c8:	40020400 	.word	0x40020400

080005cc <__io_putchar>:
  int __io_putchar(int ch)
#else
  // For other compilers, implement fputc for printf redirection
  int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
{
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b082      	sub	sp, #8
 80005d0:	af00      	add	r7, sp, #0
 80005d2:	6078      	str	r0, [r7, #4]
    // Transmit the character over UART1
    HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80005d4:	1d39      	adds	r1, r7, #4
 80005d6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80005da:	2201      	movs	r2, #1
 80005dc:	4803      	ldr	r0, [pc, #12]	@ (80005ec <__io_putchar+0x20>)
 80005de:	f001 ff03 	bl	80023e8 <HAL_UART_Transmit>
    return ch;
 80005e2:	687b      	ldr	r3, [r7, #4]
}
 80005e4:	4618      	mov	r0, r3
 80005e6:	3708      	adds	r7, #8
 80005e8:	46bd      	mov	sp, r7
 80005ea:	bd80      	pop	{r7, pc}
 80005ec:	200000a4 	.word	0x200000a4

080005f0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f0:	b5b0      	push	{r4, r5, r7, lr}
 80005f2:	b094      	sub	sp, #80	@ 0x50
 80005f4:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f6:	f000 fb21 	bl	8000c3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005fa:	f000 f865 	bl	80006c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005fe:	f000 f947 	bl	8000890 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 8000602:	f000 f91b 	bl	800083c <MX_USART1_UART_Init>
  MX_RTC_Init();
 8000606:	f000 f8bf 	bl	8000788 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

  uint32_t tick,tick_now;
  tick = HAL_GetTick() + 200;
 800060a:	f000 fb7d 	bl	8000d08 <HAL_GetTick>
 800060e:	4603      	mov	r3, r0
 8000610:	33c8      	adds	r3, #200	@ 0xc8
 8000612:	63fb      	str	r3, [r7, #60]	@ 0x3c
  tick_now = HAL_GetTick();
 8000614:	f000 fb78 	bl	8000d08 <HAL_GetTick>
 8000618:	63b8      	str	r0, [r7, #56]	@ 0x38
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  tick_now = HAL_GetTick();
 800061a:	f000 fb75 	bl	8000d08 <HAL_GetTick>
 800061e:	63b8      	str	r0, [r7, #56]	@ 0x38
	  if(board_button_getstate())
 8000620:	f7ff ff9e 	bl	8000560 <board_button_getstate>
 8000624:	4603      	mov	r3, r0
 8000626:	2b00      	cmp	r3, #0
 8000628:	d009      	beq.n	800063e <main+0x4e>
	  {
		  if(tick_now >= tick)
 800062a:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800062c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800062e:	429a      	cmp	r2, r3
 8000630:	d3f3      	bcc.n	800061a <main+0x2a>
		  {
			  tick = tick_now + 200;
 8000632:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000634:	33c8      	adds	r3, #200	@ 0xc8
 8000636:	63fb      	str	r3, [r7, #60]	@ 0x3c
			  board_led_toggle();
 8000638:	f7ff ffa4 	bl	8000584 <board_led_toggle>
 800063c:	e7ed      	b.n	800061a <main+0x2a>
		  }
	  }
	  else
	  {
		  if(tick_now >= tick)
 800063e:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000640:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8000642:	429a      	cmp	r2, r3
 8000644:	d3e9      	bcc.n	800061a <main+0x2a>
		  {
			  tick = tick_now + 50;
 8000646:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000648:	3332      	adds	r3, #50	@ 0x32
 800064a:	63fb      	str	r3, [r7, #60]	@ 0x3c
			  RTC_TimeTypeDef stimestructureget;
			  uint8_t text[30];
			  static uint8_t Seconds_o;

			  /* Get the RTC current Time */
			  HAL_RTC_GetTime(&hrtc, &stimestructureget, RTC_FORMAT_BIN);
 800064c:	f107 0320 	add.w	r3, r7, #32
 8000650:	2200      	movs	r2, #0
 8000652:	4619      	mov	r1, r3
 8000654:	4819      	ldr	r0, [pc, #100]	@ (80006bc <main+0xcc>)
 8000656:	f001 fc88 	bl	8001f6a <HAL_RTC_GetTime>
			  /* Get the RTC current Date */
			  HAL_RTC_GetDate(&hrtc, &sdatestructureget, RTC_FORMAT_BIN);
 800065a:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 800065e:	2200      	movs	r2, #0
 8000660:	4619      	mov	r1, r3
 8000662:	4816      	ldr	r0, [pc, #88]	@ (80006bc <main+0xcc>)
 8000664:	f001 fd63 	bl	800212e <HAL_RTC_GetDate>

			  if(Seconds_o != stimestructureget.Seconds)
 8000668:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 800066c:	4b14      	ldr	r3, [pc, #80]	@ (80006c0 <main+0xd0>)
 800066e:	781b      	ldrb	r3, [r3, #0]
 8000670:	429a      	cmp	r2, r3
 8000672:	d01f      	beq.n	80006b4 <main+0xc4>
			  {
				  Seconds_o = stimestructureget.Seconds;
 8000674:	f897 2022 	ldrb.w	r2, [r7, #34]	@ 0x22
 8000678:	4b11      	ldr	r3, [pc, #68]	@ (80006c0 <main+0xd0>)
 800067a:	701a      	strb	r2, [r3, #0]

					printf("Y20%02d.M%02d.D%02d %02d:%02d:%02d\r\n",
					sdatestructureget.Year,
 800067c:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
					printf("Y20%02d.M%02d.D%02d %02d:%02d:%02d\r\n",
 8000680:	4618      	mov	r0, r3
					sdatestructureget.Month,
 8000682:	f897 3035 	ldrb.w	r3, [r7, #53]	@ 0x35
					printf("Y20%02d.M%02d.D%02d %02d:%02d:%02d\r\n",
 8000686:	461c      	mov	r4, r3
					sdatestructureget.Date,
 8000688:	f897 3036 	ldrb.w	r3, [r7, #54]	@ 0x36
					printf("Y20%02d.M%02d.D%02d %02d:%02d:%02d\r\n",
 800068c:	461d      	mov	r5, r3
					stimestructureget.Hours,
 800068e:	f897 3020 	ldrb.w	r3, [r7, #32]
					stimestructureget.Minutes,
 8000692:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
					stimestructureget.Seconds);
 8000696:	f897 1022 	ldrb.w	r1, [r7, #34]	@ 0x22
					printf("Y20%02d.M%02d.D%02d %02d:%02d:%02d\r\n",
 800069a:	9102      	str	r1, [sp, #8]
 800069c:	9201      	str	r2, [sp, #4]
 800069e:	9300      	str	r3, [sp, #0]
 80006a0:	462b      	mov	r3, r5
 80006a2:	4622      	mov	r2, r4
 80006a4:	4601      	mov	r1, r0
 80006a6:	4807      	ldr	r0, [pc, #28]	@ (80006c4 <main+0xd4>)
 80006a8:	f002 fb1c 	bl	8002ce4 <iprintf>

				  board_led_set(1);
 80006ac:	2001      	movs	r0, #1
 80006ae:	f7ff ff73 	bl	8000598 <board_led_set>
 80006b2:	e7b2      	b.n	800061a <main+0x2a>
			  }
			  else
			  {
				  board_led_set(0);
 80006b4:	2000      	movs	r0, #0
 80006b6:	f7ff ff6f 	bl	8000598 <board_led_set>
	  tick_now = HAL_GetTick();
 80006ba:	e7ae      	b.n	800061a <main+0x2a>
 80006bc:	20000084 	.word	0x20000084
 80006c0:	200000ec 	.word	0x200000ec
 80006c4:	080039d8 	.word	0x080039d8

080006c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	b094      	sub	sp, #80	@ 0x50
 80006cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ce:	f107 0320 	add.w	r3, r7, #32
 80006d2:	2230      	movs	r2, #48	@ 0x30
 80006d4:	2100      	movs	r1, #0
 80006d6:	4618      	mov	r0, r3
 80006d8:	f002 fb59 	bl	8002d8e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006dc:	f107 030c 	add.w	r3, r7, #12
 80006e0:	2200      	movs	r2, #0
 80006e2:	601a      	str	r2, [r3, #0]
 80006e4:	605a      	str	r2, [r3, #4]
 80006e6:	609a      	str	r2, [r3, #8]
 80006e8:	60da      	str	r2, [r3, #12]
 80006ea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006ec:	2300      	movs	r3, #0
 80006ee:	60bb      	str	r3, [r7, #8]
 80006f0:	4b23      	ldr	r3, [pc, #140]	@ (8000780 <SystemClock_Config+0xb8>)
 80006f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006f4:	4a22      	ldr	r2, [pc, #136]	@ (8000780 <SystemClock_Config+0xb8>)
 80006f6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006fa:	6413      	str	r3, [r2, #64]	@ 0x40
 80006fc:	4b20      	ldr	r3, [pc, #128]	@ (8000780 <SystemClock_Config+0xb8>)
 80006fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000700:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000704:	60bb      	str	r3, [r7, #8]
 8000706:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000708:	2300      	movs	r3, #0
 800070a:	607b      	str	r3, [r7, #4]
 800070c:	4b1d      	ldr	r3, [pc, #116]	@ (8000784 <SystemClock_Config+0xbc>)
 800070e:	681b      	ldr	r3, [r3, #0]
 8000710:	4a1c      	ldr	r2, [pc, #112]	@ (8000784 <SystemClock_Config+0xbc>)
 8000712:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000716:	6013      	str	r3, [r2, #0]
 8000718:	4b1a      	ldr	r3, [pc, #104]	@ (8000784 <SystemClock_Config+0xbc>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000720:	607b      	str	r3, [r7, #4]
 8000722:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 8000724:	230a      	movs	r3, #10
 8000726:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000728:	2301      	movs	r3, #1
 800072a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800072c:	2310      	movs	r3, #16
 800072e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8000730:	2301      	movs	r3, #1
 8000732:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8000734:	2300      	movs	r3, #0
 8000736:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000738:	f107 0320 	add.w	r3, r7, #32
 800073c:	4618      	mov	r0, r3
 800073e:	f000 fdbd 	bl	80012bc <HAL_RCC_OscConfig>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d001      	beq.n	800074c <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000748:	f000 f8ca 	bl	80008e0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800074c:	230f      	movs	r3, #15
 800074e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000750:	2300      	movs	r3, #0
 8000752:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000754:	2300      	movs	r3, #0
 8000756:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000758:	2300      	movs	r3, #0
 800075a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800075c:	2300      	movs	r3, #0
 800075e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000760:	f107 030c 	add.w	r3, r7, #12
 8000764:	2100      	movs	r1, #0
 8000766:	4618      	mov	r0, r3
 8000768:	f001 f820 	bl	80017ac <HAL_RCC_ClockConfig>
 800076c:	4603      	mov	r3, r0
 800076e:	2b00      	cmp	r3, #0
 8000770:	d001      	beq.n	8000776 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000772:	f000 f8b5 	bl	80008e0 <Error_Handler>
  }
}
 8000776:	bf00      	nop
 8000778:	3750      	adds	r7, #80	@ 0x50
 800077a:	46bd      	mov	sp, r7
 800077c:	bd80      	pop	{r7, pc}
 800077e:	bf00      	nop
 8000780:	40023800 	.word	0x40023800
 8000784:	40007000 	.word	0x40007000

08000788 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8000788:	b580      	push	{r7, lr}
 800078a:	b086      	sub	sp, #24
 800078c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800078e:	1d3b      	adds	r3, r7, #4
 8000790:	2200      	movs	r2, #0
 8000792:	601a      	str	r2, [r3, #0]
 8000794:	605a      	str	r2, [r3, #4]
 8000796:	609a      	str	r2, [r3, #8]
 8000798:	60da      	str	r2, [r3, #12]
 800079a:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800079c:	2300      	movs	r3, #0
 800079e:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80007a0:	4b24      	ldr	r3, [pc, #144]	@ (8000834 <MX_RTC_Init+0xac>)
 80007a2:	4a25      	ldr	r2, [pc, #148]	@ (8000838 <MX_RTC_Init+0xb0>)
 80007a4:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80007a6:	4b23      	ldr	r3, [pc, #140]	@ (8000834 <MX_RTC_Init+0xac>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80007ac:	4b21      	ldr	r3, [pc, #132]	@ (8000834 <MX_RTC_Init+0xac>)
 80007ae:	227f      	movs	r2, #127	@ 0x7f
 80007b0:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80007b2:	4b20      	ldr	r3, [pc, #128]	@ (8000834 <MX_RTC_Init+0xac>)
 80007b4:	22ff      	movs	r2, #255	@ 0xff
 80007b6:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80007b8:	4b1e      	ldr	r3, [pc, #120]	@ (8000834 <MX_RTC_Init+0xac>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80007be:	4b1d      	ldr	r3, [pc, #116]	@ (8000834 <MX_RTC_Init+0xac>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80007c4:	4b1b      	ldr	r3, [pc, #108]	@ (8000834 <MX_RTC_Init+0xac>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80007ca:	481a      	ldr	r0, [pc, #104]	@ (8000834 <MX_RTC_Init+0xac>)
 80007cc:	f001 fab0 	bl	8001d30 <HAL_RTC_Init>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <MX_RTC_Init+0x52>
  {
    Error_Handler();
 80007d6:	f000 f883 	bl	80008e0 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 80007da:	2300      	movs	r3, #0
 80007dc:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 80007de:	2300      	movs	r3, #0
 80007e0:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 80007e2:	2300      	movs	r3, #0
 80007e4:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 80007e6:	2300      	movs	r3, #0
 80007e8:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 80007ea:	2300      	movs	r3, #0
 80007ec:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 80007ee:	1d3b      	adds	r3, r7, #4
 80007f0:	2201      	movs	r2, #1
 80007f2:	4619      	mov	r1, r3
 80007f4:	480f      	ldr	r0, [pc, #60]	@ (8000834 <MX_RTC_Init+0xac>)
 80007f6:	f001 fb1e 	bl	8001e36 <HAL_RTC_SetTime>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8000800:	f000 f86e 	bl	80008e0 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8000804:	2301      	movs	r3, #1
 8000806:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_JANUARY;
 8000808:	2301      	movs	r3, #1
 800080a:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x1;
 800080c:	2301      	movs	r3, #1
 800080e:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x0;
 8000810:	2300      	movs	r3, #0
 8000812:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8000814:	463b      	mov	r3, r7
 8000816:	2201      	movs	r2, #1
 8000818:	4619      	mov	r1, r3
 800081a:	4806      	ldr	r0, [pc, #24]	@ (8000834 <MX_RTC_Init+0xac>)
 800081c:	f001 fc03 	bl	8002026 <HAL_RTC_SetDate>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d001      	beq.n	800082a <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8000826:	f000 f85b 	bl	80008e0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800082a:	bf00      	nop
 800082c:	3718      	adds	r7, #24
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	20000084 	.word	0x20000084
 8000838:	40002800 	.word	0x40002800

0800083c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000840:	4b11      	ldr	r3, [pc, #68]	@ (8000888 <MX_USART1_UART_Init+0x4c>)
 8000842:	4a12      	ldr	r2, [pc, #72]	@ (800088c <MX_USART1_UART_Init+0x50>)
 8000844:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000846:	4b10      	ldr	r3, [pc, #64]	@ (8000888 <MX_USART1_UART_Init+0x4c>)
 8000848:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800084c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800084e:	4b0e      	ldr	r3, [pc, #56]	@ (8000888 <MX_USART1_UART_Init+0x4c>)
 8000850:	2200      	movs	r2, #0
 8000852:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000854:	4b0c      	ldr	r3, [pc, #48]	@ (8000888 <MX_USART1_UART_Init+0x4c>)
 8000856:	2200      	movs	r2, #0
 8000858:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800085a:	4b0b      	ldr	r3, [pc, #44]	@ (8000888 <MX_USART1_UART_Init+0x4c>)
 800085c:	2200      	movs	r2, #0
 800085e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000860:	4b09      	ldr	r3, [pc, #36]	@ (8000888 <MX_USART1_UART_Init+0x4c>)
 8000862:	220c      	movs	r2, #12
 8000864:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000866:	4b08      	ldr	r3, [pc, #32]	@ (8000888 <MX_USART1_UART_Init+0x4c>)
 8000868:	2200      	movs	r2, #0
 800086a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800086c:	4b06      	ldr	r3, [pc, #24]	@ (8000888 <MX_USART1_UART_Init+0x4c>)
 800086e:	2200      	movs	r2, #0
 8000870:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000872:	4805      	ldr	r0, [pc, #20]	@ (8000888 <MX_USART1_UART_Init+0x4c>)
 8000874:	f001 fd68 	bl	8002348 <HAL_UART_Init>
 8000878:	4603      	mov	r3, r0
 800087a:	2b00      	cmp	r3, #0
 800087c:	d001      	beq.n	8000882 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800087e:	f000 f82f 	bl	80008e0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000882:	bf00      	nop
 8000884:	bd80      	pop	{r7, pc}
 8000886:	bf00      	nop
 8000888:	200000a4 	.word	0x200000a4
 800088c:	40011000 	.word	0x40011000

08000890 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000890:	b480      	push	{r7}
 8000892:	b083      	sub	sp, #12
 8000894:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000896:	2300      	movs	r3, #0
 8000898:	607b      	str	r3, [r7, #4]
 800089a:	4b10      	ldr	r3, [pc, #64]	@ (80008dc <MX_GPIO_Init+0x4c>)
 800089c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800089e:	4a0f      	ldr	r2, [pc, #60]	@ (80008dc <MX_GPIO_Init+0x4c>)
 80008a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80008a4:	6313      	str	r3, [r2, #48]	@ 0x30
 80008a6:	4b0d      	ldr	r3, [pc, #52]	@ (80008dc <MX_GPIO_Init+0x4c>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80008ae:	607b      	str	r3, [r7, #4]
 80008b0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008b2:	2300      	movs	r3, #0
 80008b4:	603b      	str	r3, [r7, #0]
 80008b6:	4b09      	ldr	r3, [pc, #36]	@ (80008dc <MX_GPIO_Init+0x4c>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008ba:	4a08      	ldr	r2, [pc, #32]	@ (80008dc <MX_GPIO_Init+0x4c>)
 80008bc:	f043 0301 	orr.w	r3, r3, #1
 80008c0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008c2:	4b06      	ldr	r3, [pc, #24]	@ (80008dc <MX_GPIO_Init+0x4c>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008c6:	f003 0301 	and.w	r3, r3, #1
 80008ca:	603b      	str	r3, [r7, #0]
 80008cc:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80008ce:	bf00      	nop
 80008d0:	370c      	adds	r7, #12
 80008d2:	46bd      	mov	sp, r7
 80008d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d8:	4770      	bx	lr
 80008da:	bf00      	nop
 80008dc:	40023800 	.word	0x40023800

080008e0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80008e0:	b480      	push	{r7}
 80008e2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80008e4:	b672      	cpsid	i
}
 80008e6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80008e8:	bf00      	nop
 80008ea:	e7fd      	b.n	80008e8 <Error_Handler+0x8>

080008ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80008ec:	b480      	push	{r7}
 80008ee:	b083      	sub	sp, #12
 80008f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80008f2:	2300      	movs	r3, #0
 80008f4:	607b      	str	r3, [r7, #4]
 80008f6:	4b10      	ldr	r3, [pc, #64]	@ (8000938 <HAL_MspInit+0x4c>)
 80008f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80008fa:	4a0f      	ldr	r2, [pc, #60]	@ (8000938 <HAL_MspInit+0x4c>)
 80008fc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000900:	6453      	str	r3, [r2, #68]	@ 0x44
 8000902:	4b0d      	ldr	r3, [pc, #52]	@ (8000938 <HAL_MspInit+0x4c>)
 8000904:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000906:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800090a:	607b      	str	r3, [r7, #4]
 800090c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800090e:	2300      	movs	r3, #0
 8000910:	603b      	str	r3, [r7, #0]
 8000912:	4b09      	ldr	r3, [pc, #36]	@ (8000938 <HAL_MspInit+0x4c>)
 8000914:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000916:	4a08      	ldr	r2, [pc, #32]	@ (8000938 <HAL_MspInit+0x4c>)
 8000918:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800091c:	6413      	str	r3, [r2, #64]	@ 0x40
 800091e:	4b06      	ldr	r3, [pc, #24]	@ (8000938 <HAL_MspInit+0x4c>)
 8000920:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000922:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000926:	603b      	str	r3, [r7, #0]
 8000928:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800092a:	bf00      	nop
 800092c:	370c      	adds	r7, #12
 800092e:	46bd      	mov	sp, r7
 8000930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000934:	4770      	bx	lr
 8000936:	bf00      	nop
 8000938:	40023800 	.word	0x40023800

0800093c <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 800093c:	b580      	push	{r7, lr}
 800093e:	b086      	sub	sp, #24
 8000940:	af00      	add	r7, sp, #0
 8000942:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000944:	f107 0308 	add.w	r3, r7, #8
 8000948:	2200      	movs	r2, #0
 800094a:	601a      	str	r2, [r3, #0]
 800094c:	605a      	str	r2, [r3, #4]
 800094e:	609a      	str	r2, [r3, #8]
 8000950:	60da      	str	r2, [r3, #12]
  if(hrtc->Instance==RTC)
 8000952:	687b      	ldr	r3, [r7, #4]
 8000954:	681b      	ldr	r3, [r3, #0]
 8000956:	4a0c      	ldr	r2, [pc, #48]	@ (8000988 <HAL_RTC_MspInit+0x4c>)
 8000958:	4293      	cmp	r3, r2
 800095a:	d111      	bne.n	8000980 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800095c:	2302      	movs	r3, #2
 800095e:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8000960:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000964:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000966:	f107 0308 	add.w	r3, r7, #8
 800096a:	4618      	mov	r0, r3
 800096c:	f001 f8fe 	bl	8001b6c <HAL_RCCEx_PeriphCLKConfig>
 8000970:	4603      	mov	r3, r0
 8000972:	2b00      	cmp	r3, #0
 8000974:	d001      	beq.n	800097a <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8000976:	f7ff ffb3 	bl	80008e0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 800097a:	4b04      	ldr	r3, [pc, #16]	@ (800098c <HAL_RTC_MspInit+0x50>)
 800097c:	2201      	movs	r2, #1
 800097e:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_MspInit 1 */

  }

}
 8000980:	bf00      	nop
 8000982:	3718      	adds	r7, #24
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}
 8000988:	40002800 	.word	0x40002800
 800098c:	42470e3c 	.word	0x42470e3c

08000990 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000990:	b580      	push	{r7, lr}
 8000992:	b08a      	sub	sp, #40	@ 0x28
 8000994:	af00      	add	r7, sp, #0
 8000996:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000998:	f107 0314 	add.w	r3, r7, #20
 800099c:	2200      	movs	r2, #0
 800099e:	601a      	str	r2, [r3, #0]
 80009a0:	605a      	str	r2, [r3, #4]
 80009a2:	609a      	str	r2, [r3, #8]
 80009a4:	60da      	str	r2, [r3, #12]
 80009a6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80009a8:	687b      	ldr	r3, [r7, #4]
 80009aa:	681b      	ldr	r3, [r3, #0]
 80009ac:	4a19      	ldr	r2, [pc, #100]	@ (8000a14 <HAL_UART_MspInit+0x84>)
 80009ae:	4293      	cmp	r3, r2
 80009b0:	d12c      	bne.n	8000a0c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80009b2:	2300      	movs	r3, #0
 80009b4:	613b      	str	r3, [r7, #16]
 80009b6:	4b18      	ldr	r3, [pc, #96]	@ (8000a18 <HAL_UART_MspInit+0x88>)
 80009b8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009ba:	4a17      	ldr	r2, [pc, #92]	@ (8000a18 <HAL_UART_MspInit+0x88>)
 80009bc:	f043 0310 	orr.w	r3, r3, #16
 80009c0:	6453      	str	r3, [r2, #68]	@ 0x44
 80009c2:	4b15      	ldr	r3, [pc, #84]	@ (8000a18 <HAL_UART_MspInit+0x88>)
 80009c4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80009c6:	f003 0310 	and.w	r3, r3, #16
 80009ca:	613b      	str	r3, [r7, #16]
 80009cc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ce:	2300      	movs	r3, #0
 80009d0:	60fb      	str	r3, [r7, #12]
 80009d2:	4b11      	ldr	r3, [pc, #68]	@ (8000a18 <HAL_UART_MspInit+0x88>)
 80009d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009d6:	4a10      	ldr	r2, [pc, #64]	@ (8000a18 <HAL_UART_MspInit+0x88>)
 80009d8:	f043 0301 	orr.w	r3, r3, #1
 80009dc:	6313      	str	r3, [r2, #48]	@ 0x30
 80009de:	4b0e      	ldr	r3, [pc, #56]	@ (8000a18 <HAL_UART_MspInit+0x88>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80009e2:	f003 0301 	and.w	r3, r3, #1
 80009e6:	60fb      	str	r3, [r7, #12]
 80009e8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80009ea:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80009ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f0:	2302      	movs	r3, #2
 80009f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009f4:	2300      	movs	r3, #0
 80009f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009f8:	2303      	movs	r3, #3
 80009fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80009fc:	2307      	movs	r3, #7
 80009fe:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a00:	f107 0314 	add.w	r3, r7, #20
 8000a04:	4619      	mov	r1, r3
 8000a06:	4805      	ldr	r0, [pc, #20]	@ (8000a1c <HAL_UART_MspInit+0x8c>)
 8000a08:	f000 fa70 	bl	8000eec <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8000a0c:	bf00      	nop
 8000a0e:	3728      	adds	r7, #40	@ 0x28
 8000a10:	46bd      	mov	sp, r7
 8000a12:	bd80      	pop	{r7, pc}
 8000a14:	40011000 	.word	0x40011000
 8000a18:	40023800 	.word	0x40023800
 8000a1c:	40020000 	.word	0x40020000

08000a20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000a24:	bf00      	nop
 8000a26:	e7fd      	b.n	8000a24 <NMI_Handler+0x4>

08000a28 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000a2c:	bf00      	nop
 8000a2e:	e7fd      	b.n	8000a2c <HardFault_Handler+0x4>

08000a30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a30:	b480      	push	{r7}
 8000a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000a34:	bf00      	nop
 8000a36:	e7fd      	b.n	8000a34 <MemManage_Handler+0x4>

08000a38 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000a3c:	bf00      	nop
 8000a3e:	e7fd      	b.n	8000a3c <BusFault_Handler+0x4>

08000a40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000a44:	bf00      	nop
 8000a46:	e7fd      	b.n	8000a44 <UsageFault_Handler+0x4>

08000a48 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a48:	b480      	push	{r7}
 8000a4a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000a4c:	bf00      	nop
 8000a4e:	46bd      	mov	sp, r7
 8000a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a54:	4770      	bx	lr

08000a56 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a56:	b480      	push	{r7}
 8000a58:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000a5a:	bf00      	nop
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a62:	4770      	bx	lr

08000a64 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a64:	b480      	push	{r7}
 8000a66:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000a68:	bf00      	nop
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a70:	4770      	bx	lr

08000a72 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a72:	b580      	push	{r7, lr}
 8000a74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000a76:	f000 f933 	bl	8000ce0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000a7a:	bf00      	nop
 8000a7c:	bd80      	pop	{r7, pc}

08000a7e <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000a7e:	b580      	push	{r7, lr}
 8000a80:	b086      	sub	sp, #24
 8000a82:	af00      	add	r7, sp, #0
 8000a84:	60f8      	str	r0, [r7, #12]
 8000a86:	60b9      	str	r1, [r7, #8]
 8000a88:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a8a:	2300      	movs	r3, #0
 8000a8c:	617b      	str	r3, [r7, #20]
 8000a8e:	e00a      	b.n	8000aa6 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000a90:	f3af 8000 	nop.w
 8000a94:	4601      	mov	r1, r0
 8000a96:	68bb      	ldr	r3, [r7, #8]
 8000a98:	1c5a      	adds	r2, r3, #1
 8000a9a:	60ba      	str	r2, [r7, #8]
 8000a9c:	b2ca      	uxtb	r2, r1
 8000a9e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000aa0:	697b      	ldr	r3, [r7, #20]
 8000aa2:	3301      	adds	r3, #1
 8000aa4:	617b      	str	r3, [r7, #20]
 8000aa6:	697a      	ldr	r2, [r7, #20]
 8000aa8:	687b      	ldr	r3, [r7, #4]
 8000aaa:	429a      	cmp	r2, r3
 8000aac:	dbf0      	blt.n	8000a90 <_read+0x12>
  }

  return len;
 8000aae:	687b      	ldr	r3, [r7, #4]
}
 8000ab0:	4618      	mov	r0, r3
 8000ab2:	3718      	adds	r7, #24
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}

08000ab8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b086      	sub	sp, #24
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	60f8      	str	r0, [r7, #12]
 8000ac0:	60b9      	str	r1, [r7, #8]
 8000ac2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ac4:	2300      	movs	r3, #0
 8000ac6:	617b      	str	r3, [r7, #20]
 8000ac8:	e009      	b.n	8000ade <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000aca:	68bb      	ldr	r3, [r7, #8]
 8000acc:	1c5a      	adds	r2, r3, #1
 8000ace:	60ba      	str	r2, [r7, #8]
 8000ad0:	781b      	ldrb	r3, [r3, #0]
 8000ad2:	4618      	mov	r0, r3
 8000ad4:	f7ff fd7a 	bl	80005cc <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ad8:	697b      	ldr	r3, [r7, #20]
 8000ada:	3301      	adds	r3, #1
 8000adc:	617b      	str	r3, [r7, #20]
 8000ade:	697a      	ldr	r2, [r7, #20]
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	429a      	cmp	r2, r3
 8000ae4:	dbf1      	blt.n	8000aca <_write+0x12>
  }
  return len;
 8000ae6:	687b      	ldr	r3, [r7, #4]
}
 8000ae8:	4618      	mov	r0, r3
 8000aea:	3718      	adds	r7, #24
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}

08000af0 <_close>:

int _close(int file)
{
 8000af0:	b480      	push	{r7}
 8000af2:	b083      	sub	sp, #12
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000af8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8000afc:	4618      	mov	r0, r3
 8000afe:	370c      	adds	r7, #12
 8000b00:	46bd      	mov	sp, r7
 8000b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b06:	4770      	bx	lr

08000b08 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000b08:	b480      	push	{r7}
 8000b0a:	b083      	sub	sp, #12
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	6078      	str	r0, [r7, #4]
 8000b10:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000b12:	683b      	ldr	r3, [r7, #0]
 8000b14:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000b18:	605a      	str	r2, [r3, #4]
  return 0;
 8000b1a:	2300      	movs	r3, #0
}
 8000b1c:	4618      	mov	r0, r3
 8000b1e:	370c      	adds	r7, #12
 8000b20:	46bd      	mov	sp, r7
 8000b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b26:	4770      	bx	lr

08000b28 <_isatty>:

int _isatty(int file)
{
 8000b28:	b480      	push	{r7}
 8000b2a:	b083      	sub	sp, #12
 8000b2c:	af00      	add	r7, sp, #0
 8000b2e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000b30:	2301      	movs	r3, #1
}
 8000b32:	4618      	mov	r0, r3
 8000b34:	370c      	adds	r7, #12
 8000b36:	46bd      	mov	sp, r7
 8000b38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b3c:	4770      	bx	lr

08000b3e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000b3e:	b480      	push	{r7}
 8000b40:	b085      	sub	sp, #20
 8000b42:	af00      	add	r7, sp, #0
 8000b44:	60f8      	str	r0, [r7, #12]
 8000b46:	60b9      	str	r1, [r7, #8]
 8000b48:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000b4a:	2300      	movs	r3, #0
}
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	3714      	adds	r7, #20
 8000b50:	46bd      	mov	sp, r7
 8000b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b56:	4770      	bx	lr

08000b58 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b086      	sub	sp, #24
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000b60:	4a14      	ldr	r2, [pc, #80]	@ (8000bb4 <_sbrk+0x5c>)
 8000b62:	4b15      	ldr	r3, [pc, #84]	@ (8000bb8 <_sbrk+0x60>)
 8000b64:	1ad3      	subs	r3, r2, r3
 8000b66:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000b68:	697b      	ldr	r3, [r7, #20]
 8000b6a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000b6c:	4b13      	ldr	r3, [pc, #76]	@ (8000bbc <_sbrk+0x64>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	2b00      	cmp	r3, #0
 8000b72:	d102      	bne.n	8000b7a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000b74:	4b11      	ldr	r3, [pc, #68]	@ (8000bbc <_sbrk+0x64>)
 8000b76:	4a12      	ldr	r2, [pc, #72]	@ (8000bc0 <_sbrk+0x68>)
 8000b78:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000b7a:	4b10      	ldr	r3, [pc, #64]	@ (8000bbc <_sbrk+0x64>)
 8000b7c:	681a      	ldr	r2, [r3, #0]
 8000b7e:	687b      	ldr	r3, [r7, #4]
 8000b80:	4413      	add	r3, r2
 8000b82:	693a      	ldr	r2, [r7, #16]
 8000b84:	429a      	cmp	r2, r3
 8000b86:	d207      	bcs.n	8000b98 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000b88:	f002 f950 	bl	8002e2c <__errno>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	220c      	movs	r2, #12
 8000b90:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000b92:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000b96:	e009      	b.n	8000bac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b98:	4b08      	ldr	r3, [pc, #32]	@ (8000bbc <_sbrk+0x64>)
 8000b9a:	681b      	ldr	r3, [r3, #0]
 8000b9c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b9e:	4b07      	ldr	r3, [pc, #28]	@ (8000bbc <_sbrk+0x64>)
 8000ba0:	681a      	ldr	r2, [r3, #0]
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	4413      	add	r3, r2
 8000ba6:	4a05      	ldr	r2, [pc, #20]	@ (8000bbc <_sbrk+0x64>)
 8000ba8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000baa:	68fb      	ldr	r3, [r7, #12]
}
 8000bac:	4618      	mov	r0, r3
 8000bae:	3718      	adds	r7, #24
 8000bb0:	46bd      	mov	sp, r7
 8000bb2:	bd80      	pop	{r7, pc}
 8000bb4:	20020000 	.word	0x20020000
 8000bb8:	00000400 	.word	0x00000400
 8000bbc:	200000f0 	.word	0x200000f0
 8000bc0:	20000248 	.word	0x20000248

08000bc4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bc4:	b480      	push	{r7}
 8000bc6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bc8:	4b06      	ldr	r3, [pc, #24]	@ (8000be4 <SystemInit+0x20>)
 8000bca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000bce:	4a05      	ldr	r2, [pc, #20]	@ (8000be4 <SystemInit+0x20>)
 8000bd0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000bd4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bd8:	bf00      	nop
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be0:	4770      	bx	lr
 8000be2:	bf00      	nop
 8000be4:	e000ed00 	.word	0xe000ed00

08000be8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000be8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000c20 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8000bec:	f7ff ffea 	bl	8000bc4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000bf0:	480c      	ldr	r0, [pc, #48]	@ (8000c24 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000bf2:	490d      	ldr	r1, [pc, #52]	@ (8000c28 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000bf4:	4a0d      	ldr	r2, [pc, #52]	@ (8000c2c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000bf6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bf8:	e002      	b.n	8000c00 <LoopCopyDataInit>

08000bfa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bfa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bfc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bfe:	3304      	adds	r3, #4

08000c00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c04:	d3f9      	bcc.n	8000bfa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c06:	4a0a      	ldr	r2, [pc, #40]	@ (8000c30 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000c08:	4c0a      	ldr	r4, [pc, #40]	@ (8000c34 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000c0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c0c:	e001      	b.n	8000c12 <LoopFillZerobss>

08000c0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c10:	3204      	adds	r2, #4

08000c12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c14:	d3fb      	bcc.n	8000c0e <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8000c16:	f002 f90f 	bl	8002e38 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c1a:	f7ff fce9 	bl	80005f0 <main>
  bx  lr    
 8000c1e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000c20:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000c24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c28:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000c2c:	08003a5c 	.word	0x08003a5c
  ldr r2, =_sbss
 8000c30:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000c34:	20000244 	.word	0x20000244

08000c38 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c38:	e7fe      	b.n	8000c38 <ADC_IRQHandler>
	...

08000c3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c3c:	b580      	push	{r7, lr}
 8000c3e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c40:	4b0e      	ldr	r3, [pc, #56]	@ (8000c7c <HAL_Init+0x40>)
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	4a0d      	ldr	r2, [pc, #52]	@ (8000c7c <HAL_Init+0x40>)
 8000c46:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000c4a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c4c:	4b0b      	ldr	r3, [pc, #44]	@ (8000c7c <HAL_Init+0x40>)
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	4a0a      	ldr	r2, [pc, #40]	@ (8000c7c <HAL_Init+0x40>)
 8000c52:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000c56:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c58:	4b08      	ldr	r3, [pc, #32]	@ (8000c7c <HAL_Init+0x40>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
 8000c5c:	4a07      	ldr	r2, [pc, #28]	@ (8000c7c <HAL_Init+0x40>)
 8000c5e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000c62:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c64:	2003      	movs	r0, #3
 8000c66:	f000 f90d 	bl	8000e84 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c6a:	200f      	movs	r0, #15
 8000c6c:	f000 f808 	bl	8000c80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c70:	f7ff fe3c 	bl	80008ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c74:	2300      	movs	r3, #0
}
 8000c76:	4618      	mov	r0, r3
 8000c78:	bd80      	pop	{r7, pc}
 8000c7a:	bf00      	nop
 8000c7c:	40023c00 	.word	0x40023c00

08000c80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b082      	sub	sp, #8
 8000c84:	af00      	add	r7, sp, #0
 8000c86:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c88:	4b12      	ldr	r3, [pc, #72]	@ (8000cd4 <HAL_InitTick+0x54>)
 8000c8a:	681a      	ldr	r2, [r3, #0]
 8000c8c:	4b12      	ldr	r3, [pc, #72]	@ (8000cd8 <HAL_InitTick+0x58>)
 8000c8e:	781b      	ldrb	r3, [r3, #0]
 8000c90:	4619      	mov	r1, r3
 8000c92:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c96:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	f000 f917 	bl	8000ed2 <HAL_SYSTICK_Config>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d001      	beq.n	8000cae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000caa:	2301      	movs	r3, #1
 8000cac:	e00e      	b.n	8000ccc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	2b0f      	cmp	r3, #15
 8000cb2:	d80a      	bhi.n	8000cca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	6879      	ldr	r1, [r7, #4]
 8000cb8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000cbc:	f000 f8ed 	bl	8000e9a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cc0:	4a06      	ldr	r2, [pc, #24]	@ (8000cdc <HAL_InitTick+0x5c>)
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	e000      	b.n	8000ccc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cca:	2301      	movs	r3, #1
}
 8000ccc:	4618      	mov	r0, r3
 8000cce:	3708      	adds	r7, #8
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	20000000 	.word	0x20000000
 8000cd8:	20000008 	.word	0x20000008
 8000cdc:	20000004 	.word	0x20000004

08000ce0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ce0:	b480      	push	{r7}
 8000ce2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ce4:	4b06      	ldr	r3, [pc, #24]	@ (8000d00 <HAL_IncTick+0x20>)
 8000ce6:	781b      	ldrb	r3, [r3, #0]
 8000ce8:	461a      	mov	r2, r3
 8000cea:	4b06      	ldr	r3, [pc, #24]	@ (8000d04 <HAL_IncTick+0x24>)
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	4413      	add	r3, r2
 8000cf0:	4a04      	ldr	r2, [pc, #16]	@ (8000d04 <HAL_IncTick+0x24>)
 8000cf2:	6013      	str	r3, [r2, #0]
}
 8000cf4:	bf00      	nop
 8000cf6:	46bd      	mov	sp, r7
 8000cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cfc:	4770      	bx	lr
 8000cfe:	bf00      	nop
 8000d00:	20000008 	.word	0x20000008
 8000d04:	200000f4 	.word	0x200000f4

08000d08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d08:	b480      	push	{r7}
 8000d0a:	af00      	add	r7, sp, #0
  return uwTick;
 8000d0c:	4b03      	ldr	r3, [pc, #12]	@ (8000d1c <HAL_GetTick+0x14>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
}
 8000d10:	4618      	mov	r0, r3
 8000d12:	46bd      	mov	sp, r7
 8000d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d18:	4770      	bx	lr
 8000d1a:	bf00      	nop
 8000d1c:	200000f4 	.word	0x200000f4

08000d20 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d20:	b480      	push	{r7}
 8000d22:	b085      	sub	sp, #20
 8000d24:	af00      	add	r7, sp, #0
 8000d26:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000d28:	687b      	ldr	r3, [r7, #4]
 8000d2a:	f003 0307 	and.w	r3, r3, #7
 8000d2e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000d30:	4b0c      	ldr	r3, [pc, #48]	@ (8000d64 <__NVIC_SetPriorityGrouping+0x44>)
 8000d32:	68db      	ldr	r3, [r3, #12]
 8000d34:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000d36:	68ba      	ldr	r2, [r7, #8]
 8000d38:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000d3c:	4013      	ands	r3, r2
 8000d3e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000d44:	68bb      	ldr	r3, [r7, #8]
 8000d46:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000d48:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d4c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d50:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d52:	4a04      	ldr	r2, [pc, #16]	@ (8000d64 <__NVIC_SetPriorityGrouping+0x44>)
 8000d54:	68bb      	ldr	r3, [r7, #8]
 8000d56:	60d3      	str	r3, [r2, #12]
}
 8000d58:	bf00      	nop
 8000d5a:	3714      	adds	r7, #20
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d62:	4770      	bx	lr
 8000d64:	e000ed00 	.word	0xe000ed00

08000d68 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d6c:	4b04      	ldr	r3, [pc, #16]	@ (8000d80 <__NVIC_GetPriorityGrouping+0x18>)
 8000d6e:	68db      	ldr	r3, [r3, #12]
 8000d70:	0a1b      	lsrs	r3, r3, #8
 8000d72:	f003 0307 	and.w	r3, r3, #7
}
 8000d76:	4618      	mov	r0, r3
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d7e:	4770      	bx	lr
 8000d80:	e000ed00 	.word	0xe000ed00

08000d84 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d84:	b480      	push	{r7}
 8000d86:	b083      	sub	sp, #12
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	6039      	str	r1, [r7, #0]
 8000d8e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d90:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	db0a      	blt.n	8000dae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d98:	683b      	ldr	r3, [r7, #0]
 8000d9a:	b2da      	uxtb	r2, r3
 8000d9c:	490c      	ldr	r1, [pc, #48]	@ (8000dd0 <__NVIC_SetPriority+0x4c>)
 8000d9e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000da2:	0112      	lsls	r2, r2, #4
 8000da4:	b2d2      	uxtb	r2, r2
 8000da6:	440b      	add	r3, r1
 8000da8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000dac:	e00a      	b.n	8000dc4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000dae:	683b      	ldr	r3, [r7, #0]
 8000db0:	b2da      	uxtb	r2, r3
 8000db2:	4908      	ldr	r1, [pc, #32]	@ (8000dd4 <__NVIC_SetPriority+0x50>)
 8000db4:	79fb      	ldrb	r3, [r7, #7]
 8000db6:	f003 030f 	and.w	r3, r3, #15
 8000dba:	3b04      	subs	r3, #4
 8000dbc:	0112      	lsls	r2, r2, #4
 8000dbe:	b2d2      	uxtb	r2, r2
 8000dc0:	440b      	add	r3, r1
 8000dc2:	761a      	strb	r2, [r3, #24]
}
 8000dc4:	bf00      	nop
 8000dc6:	370c      	adds	r7, #12
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dce:	4770      	bx	lr
 8000dd0:	e000e100 	.word	0xe000e100
 8000dd4:	e000ed00 	.word	0xe000ed00

08000dd8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dd8:	b480      	push	{r7}
 8000dda:	b089      	sub	sp, #36	@ 0x24
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	60f8      	str	r0, [r7, #12]
 8000de0:	60b9      	str	r1, [r7, #8]
 8000de2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	f003 0307 	and.w	r3, r3, #7
 8000dea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dec:	69fb      	ldr	r3, [r7, #28]
 8000dee:	f1c3 0307 	rsb	r3, r3, #7
 8000df2:	2b04      	cmp	r3, #4
 8000df4:	bf28      	it	cs
 8000df6:	2304      	movcs	r3, #4
 8000df8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dfa:	69fb      	ldr	r3, [r7, #28]
 8000dfc:	3304      	adds	r3, #4
 8000dfe:	2b06      	cmp	r3, #6
 8000e00:	d902      	bls.n	8000e08 <NVIC_EncodePriority+0x30>
 8000e02:	69fb      	ldr	r3, [r7, #28]
 8000e04:	3b03      	subs	r3, #3
 8000e06:	e000      	b.n	8000e0a <NVIC_EncodePriority+0x32>
 8000e08:	2300      	movs	r3, #0
 8000e0a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e0c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000e10:	69bb      	ldr	r3, [r7, #24]
 8000e12:	fa02 f303 	lsl.w	r3, r2, r3
 8000e16:	43da      	mvns	r2, r3
 8000e18:	68bb      	ldr	r3, [r7, #8]
 8000e1a:	401a      	ands	r2, r3
 8000e1c:	697b      	ldr	r3, [r7, #20]
 8000e1e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e20:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000e24:	697b      	ldr	r3, [r7, #20]
 8000e26:	fa01 f303 	lsl.w	r3, r1, r3
 8000e2a:	43d9      	mvns	r1, r3
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e30:	4313      	orrs	r3, r2
         );
}
 8000e32:	4618      	mov	r0, r3
 8000e34:	3724      	adds	r7, #36	@ 0x24
 8000e36:	46bd      	mov	sp, r7
 8000e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e3c:	4770      	bx	lr
	...

08000e40 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b082      	sub	sp, #8
 8000e44:	af00      	add	r7, sp, #0
 8000e46:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	3b01      	subs	r3, #1
 8000e4c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000e50:	d301      	bcc.n	8000e56 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e52:	2301      	movs	r3, #1
 8000e54:	e00f      	b.n	8000e76 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e56:	4a0a      	ldr	r2, [pc, #40]	@ (8000e80 <SysTick_Config+0x40>)
 8000e58:	687b      	ldr	r3, [r7, #4]
 8000e5a:	3b01      	subs	r3, #1
 8000e5c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e5e:	210f      	movs	r1, #15
 8000e60:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000e64:	f7ff ff8e 	bl	8000d84 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e68:	4b05      	ldr	r3, [pc, #20]	@ (8000e80 <SysTick_Config+0x40>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e6e:	4b04      	ldr	r3, [pc, #16]	@ (8000e80 <SysTick_Config+0x40>)
 8000e70:	2207      	movs	r2, #7
 8000e72:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e74:	2300      	movs	r3, #0
}
 8000e76:	4618      	mov	r0, r3
 8000e78:	3708      	adds	r7, #8
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	e000e010 	.word	0xe000e010

08000e84 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b082      	sub	sp, #8
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e8c:	6878      	ldr	r0, [r7, #4]
 8000e8e:	f7ff ff47 	bl	8000d20 <__NVIC_SetPriorityGrouping>
}
 8000e92:	bf00      	nop
 8000e94:	3708      	adds	r7, #8
 8000e96:	46bd      	mov	sp, r7
 8000e98:	bd80      	pop	{r7, pc}

08000e9a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e9a:	b580      	push	{r7, lr}
 8000e9c:	b086      	sub	sp, #24
 8000e9e:	af00      	add	r7, sp, #0
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	60b9      	str	r1, [r7, #8]
 8000ea4:	607a      	str	r2, [r7, #4]
 8000ea6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000eac:	f7ff ff5c 	bl	8000d68 <__NVIC_GetPriorityGrouping>
 8000eb0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000eb2:	687a      	ldr	r2, [r7, #4]
 8000eb4:	68b9      	ldr	r1, [r7, #8]
 8000eb6:	6978      	ldr	r0, [r7, #20]
 8000eb8:	f7ff ff8e 	bl	8000dd8 <NVIC_EncodePriority>
 8000ebc:	4602      	mov	r2, r0
 8000ebe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ec2:	4611      	mov	r1, r2
 8000ec4:	4618      	mov	r0, r3
 8000ec6:	f7ff ff5d 	bl	8000d84 <__NVIC_SetPriority>
}
 8000eca:	bf00      	nop
 8000ecc:	3718      	adds	r7, #24
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}

08000ed2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ed2:	b580      	push	{r7, lr}
 8000ed4:	b082      	sub	sp, #8
 8000ed6:	af00      	add	r7, sp, #0
 8000ed8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000eda:	6878      	ldr	r0, [r7, #4]
 8000edc:	f7ff ffb0 	bl	8000e40 <SysTick_Config>
 8000ee0:	4603      	mov	r3, r0
}
 8000ee2:	4618      	mov	r0, r3
 8000ee4:	3708      	adds	r7, #8
 8000ee6:	46bd      	mov	sp, r7
 8000ee8:	bd80      	pop	{r7, pc}
	...

08000eec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000eec:	b480      	push	{r7}
 8000eee:	b089      	sub	sp, #36	@ 0x24
 8000ef0:	af00      	add	r7, sp, #0
 8000ef2:	6078      	str	r0, [r7, #4]
 8000ef4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000efa:	2300      	movs	r3, #0
 8000efc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000efe:	2300      	movs	r3, #0
 8000f00:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000f02:	2300      	movs	r3, #0
 8000f04:	61fb      	str	r3, [r7, #28]
 8000f06:	e16b      	b.n	80011e0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000f08:	2201      	movs	r2, #1
 8000f0a:	69fb      	ldr	r3, [r7, #28]
 8000f0c:	fa02 f303 	lsl.w	r3, r2, r3
 8000f10:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	697a      	ldr	r2, [r7, #20]
 8000f18:	4013      	ands	r3, r2
 8000f1a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000f1c:	693a      	ldr	r2, [r7, #16]
 8000f1e:	697b      	ldr	r3, [r7, #20]
 8000f20:	429a      	cmp	r2, r3
 8000f22:	f040 815a 	bne.w	80011da <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f26:	683b      	ldr	r3, [r7, #0]
 8000f28:	685b      	ldr	r3, [r3, #4]
 8000f2a:	f003 0303 	and.w	r3, r3, #3
 8000f2e:	2b01      	cmp	r3, #1
 8000f30:	d005      	beq.n	8000f3e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000f32:	683b      	ldr	r3, [r7, #0]
 8000f34:	685b      	ldr	r3, [r3, #4]
 8000f36:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000f3a:	2b02      	cmp	r3, #2
 8000f3c:	d130      	bne.n	8000fa0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	689b      	ldr	r3, [r3, #8]
 8000f42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000f44:	69fb      	ldr	r3, [r7, #28]
 8000f46:	005b      	lsls	r3, r3, #1
 8000f48:	2203      	movs	r2, #3
 8000f4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4e:	43db      	mvns	r3, r3
 8000f50:	69ba      	ldr	r2, [r7, #24]
 8000f52:	4013      	ands	r3, r2
 8000f54:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	68da      	ldr	r2, [r3, #12]
 8000f5a:	69fb      	ldr	r3, [r7, #28]
 8000f5c:	005b      	lsls	r3, r3, #1
 8000f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8000f62:	69ba      	ldr	r2, [r7, #24]
 8000f64:	4313      	orrs	r3, r2
 8000f66:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	69ba      	ldr	r2, [r7, #24]
 8000f6c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	685b      	ldr	r3, [r3, #4]
 8000f72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000f74:	2201      	movs	r2, #1
 8000f76:	69fb      	ldr	r3, [r7, #28]
 8000f78:	fa02 f303 	lsl.w	r3, r2, r3
 8000f7c:	43db      	mvns	r3, r3
 8000f7e:	69ba      	ldr	r2, [r7, #24]
 8000f80:	4013      	ands	r3, r2
 8000f82:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000f84:	683b      	ldr	r3, [r7, #0]
 8000f86:	685b      	ldr	r3, [r3, #4]
 8000f88:	091b      	lsrs	r3, r3, #4
 8000f8a:	f003 0201 	and.w	r2, r3, #1
 8000f8e:	69fb      	ldr	r3, [r7, #28]
 8000f90:	fa02 f303 	lsl.w	r3, r2, r3
 8000f94:	69ba      	ldr	r2, [r7, #24]
 8000f96:	4313      	orrs	r3, r2
 8000f98:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	69ba      	ldr	r2, [r7, #24]
 8000f9e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000fa0:	683b      	ldr	r3, [r7, #0]
 8000fa2:	685b      	ldr	r3, [r3, #4]
 8000fa4:	f003 0303 	and.w	r3, r3, #3
 8000fa8:	2b03      	cmp	r3, #3
 8000faa:	d017      	beq.n	8000fdc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	68db      	ldr	r3, [r3, #12]
 8000fb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000fb2:	69fb      	ldr	r3, [r7, #28]
 8000fb4:	005b      	lsls	r3, r3, #1
 8000fb6:	2203      	movs	r2, #3
 8000fb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000fbc:	43db      	mvns	r3, r3
 8000fbe:	69ba      	ldr	r2, [r7, #24]
 8000fc0:	4013      	ands	r3, r2
 8000fc2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000fc4:	683b      	ldr	r3, [r7, #0]
 8000fc6:	689a      	ldr	r2, [r3, #8]
 8000fc8:	69fb      	ldr	r3, [r7, #28]
 8000fca:	005b      	lsls	r3, r3, #1
 8000fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd0:	69ba      	ldr	r2, [r7, #24]
 8000fd2:	4313      	orrs	r3, r2
 8000fd4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	69ba      	ldr	r2, [r7, #24]
 8000fda:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000fdc:	683b      	ldr	r3, [r7, #0]
 8000fde:	685b      	ldr	r3, [r3, #4]
 8000fe0:	f003 0303 	and.w	r3, r3, #3
 8000fe4:	2b02      	cmp	r3, #2
 8000fe6:	d123      	bne.n	8001030 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000fe8:	69fb      	ldr	r3, [r7, #28]
 8000fea:	08da      	lsrs	r2, r3, #3
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	3208      	adds	r2, #8
 8000ff0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000ff4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000ff6:	69fb      	ldr	r3, [r7, #28]
 8000ff8:	f003 0307 	and.w	r3, r3, #7
 8000ffc:	009b      	lsls	r3, r3, #2
 8000ffe:	220f      	movs	r2, #15
 8001000:	fa02 f303 	lsl.w	r3, r2, r3
 8001004:	43db      	mvns	r3, r3
 8001006:	69ba      	ldr	r2, [r7, #24]
 8001008:	4013      	ands	r3, r2
 800100a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	691a      	ldr	r2, [r3, #16]
 8001010:	69fb      	ldr	r3, [r7, #28]
 8001012:	f003 0307 	and.w	r3, r3, #7
 8001016:	009b      	lsls	r3, r3, #2
 8001018:	fa02 f303 	lsl.w	r3, r2, r3
 800101c:	69ba      	ldr	r2, [r7, #24]
 800101e:	4313      	orrs	r3, r2
 8001020:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001022:	69fb      	ldr	r3, [r7, #28]
 8001024:	08da      	lsrs	r2, r3, #3
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	3208      	adds	r2, #8
 800102a:	69b9      	ldr	r1, [r7, #24]
 800102c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001036:	69fb      	ldr	r3, [r7, #28]
 8001038:	005b      	lsls	r3, r3, #1
 800103a:	2203      	movs	r2, #3
 800103c:	fa02 f303 	lsl.w	r3, r2, r3
 8001040:	43db      	mvns	r3, r3
 8001042:	69ba      	ldr	r2, [r7, #24]
 8001044:	4013      	ands	r3, r2
 8001046:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	685b      	ldr	r3, [r3, #4]
 800104c:	f003 0203 	and.w	r2, r3, #3
 8001050:	69fb      	ldr	r3, [r7, #28]
 8001052:	005b      	lsls	r3, r3, #1
 8001054:	fa02 f303 	lsl.w	r3, r2, r3
 8001058:	69ba      	ldr	r2, [r7, #24]
 800105a:	4313      	orrs	r3, r2
 800105c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	69ba      	ldr	r2, [r7, #24]
 8001062:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001064:	683b      	ldr	r3, [r7, #0]
 8001066:	685b      	ldr	r3, [r3, #4]
 8001068:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800106c:	2b00      	cmp	r3, #0
 800106e:	f000 80b4 	beq.w	80011da <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001072:	2300      	movs	r3, #0
 8001074:	60fb      	str	r3, [r7, #12]
 8001076:	4b60      	ldr	r3, [pc, #384]	@ (80011f8 <HAL_GPIO_Init+0x30c>)
 8001078:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800107a:	4a5f      	ldr	r2, [pc, #380]	@ (80011f8 <HAL_GPIO_Init+0x30c>)
 800107c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001080:	6453      	str	r3, [r2, #68]	@ 0x44
 8001082:	4b5d      	ldr	r3, [pc, #372]	@ (80011f8 <HAL_GPIO_Init+0x30c>)
 8001084:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001086:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800108a:	60fb      	str	r3, [r7, #12]
 800108c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800108e:	4a5b      	ldr	r2, [pc, #364]	@ (80011fc <HAL_GPIO_Init+0x310>)
 8001090:	69fb      	ldr	r3, [r7, #28]
 8001092:	089b      	lsrs	r3, r3, #2
 8001094:	3302      	adds	r3, #2
 8001096:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800109a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800109c:	69fb      	ldr	r3, [r7, #28]
 800109e:	f003 0303 	and.w	r3, r3, #3
 80010a2:	009b      	lsls	r3, r3, #2
 80010a4:	220f      	movs	r2, #15
 80010a6:	fa02 f303 	lsl.w	r3, r2, r3
 80010aa:	43db      	mvns	r3, r3
 80010ac:	69ba      	ldr	r2, [r7, #24]
 80010ae:	4013      	ands	r3, r2
 80010b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	4a52      	ldr	r2, [pc, #328]	@ (8001200 <HAL_GPIO_Init+0x314>)
 80010b6:	4293      	cmp	r3, r2
 80010b8:	d02b      	beq.n	8001112 <HAL_GPIO_Init+0x226>
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	4a51      	ldr	r2, [pc, #324]	@ (8001204 <HAL_GPIO_Init+0x318>)
 80010be:	4293      	cmp	r3, r2
 80010c0:	d025      	beq.n	800110e <HAL_GPIO_Init+0x222>
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	4a50      	ldr	r2, [pc, #320]	@ (8001208 <HAL_GPIO_Init+0x31c>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d01f      	beq.n	800110a <HAL_GPIO_Init+0x21e>
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	4a4f      	ldr	r2, [pc, #316]	@ (800120c <HAL_GPIO_Init+0x320>)
 80010ce:	4293      	cmp	r3, r2
 80010d0:	d019      	beq.n	8001106 <HAL_GPIO_Init+0x21a>
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	4a4e      	ldr	r2, [pc, #312]	@ (8001210 <HAL_GPIO_Init+0x324>)
 80010d6:	4293      	cmp	r3, r2
 80010d8:	d013      	beq.n	8001102 <HAL_GPIO_Init+0x216>
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	4a4d      	ldr	r2, [pc, #308]	@ (8001214 <HAL_GPIO_Init+0x328>)
 80010de:	4293      	cmp	r3, r2
 80010e0:	d00d      	beq.n	80010fe <HAL_GPIO_Init+0x212>
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	4a4c      	ldr	r2, [pc, #304]	@ (8001218 <HAL_GPIO_Init+0x32c>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d007      	beq.n	80010fa <HAL_GPIO_Init+0x20e>
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	4a4b      	ldr	r2, [pc, #300]	@ (800121c <HAL_GPIO_Init+0x330>)
 80010ee:	4293      	cmp	r3, r2
 80010f0:	d101      	bne.n	80010f6 <HAL_GPIO_Init+0x20a>
 80010f2:	2307      	movs	r3, #7
 80010f4:	e00e      	b.n	8001114 <HAL_GPIO_Init+0x228>
 80010f6:	2308      	movs	r3, #8
 80010f8:	e00c      	b.n	8001114 <HAL_GPIO_Init+0x228>
 80010fa:	2306      	movs	r3, #6
 80010fc:	e00a      	b.n	8001114 <HAL_GPIO_Init+0x228>
 80010fe:	2305      	movs	r3, #5
 8001100:	e008      	b.n	8001114 <HAL_GPIO_Init+0x228>
 8001102:	2304      	movs	r3, #4
 8001104:	e006      	b.n	8001114 <HAL_GPIO_Init+0x228>
 8001106:	2303      	movs	r3, #3
 8001108:	e004      	b.n	8001114 <HAL_GPIO_Init+0x228>
 800110a:	2302      	movs	r3, #2
 800110c:	e002      	b.n	8001114 <HAL_GPIO_Init+0x228>
 800110e:	2301      	movs	r3, #1
 8001110:	e000      	b.n	8001114 <HAL_GPIO_Init+0x228>
 8001112:	2300      	movs	r3, #0
 8001114:	69fa      	ldr	r2, [r7, #28]
 8001116:	f002 0203 	and.w	r2, r2, #3
 800111a:	0092      	lsls	r2, r2, #2
 800111c:	4093      	lsls	r3, r2
 800111e:	69ba      	ldr	r2, [r7, #24]
 8001120:	4313      	orrs	r3, r2
 8001122:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001124:	4935      	ldr	r1, [pc, #212]	@ (80011fc <HAL_GPIO_Init+0x310>)
 8001126:	69fb      	ldr	r3, [r7, #28]
 8001128:	089b      	lsrs	r3, r3, #2
 800112a:	3302      	adds	r3, #2
 800112c:	69ba      	ldr	r2, [r7, #24]
 800112e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001132:	4b3b      	ldr	r3, [pc, #236]	@ (8001220 <HAL_GPIO_Init+0x334>)
 8001134:	689b      	ldr	r3, [r3, #8]
 8001136:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001138:	693b      	ldr	r3, [r7, #16]
 800113a:	43db      	mvns	r3, r3
 800113c:	69ba      	ldr	r2, [r7, #24]
 800113e:	4013      	ands	r3, r2
 8001140:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	685b      	ldr	r3, [r3, #4]
 8001146:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800114a:	2b00      	cmp	r3, #0
 800114c:	d003      	beq.n	8001156 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800114e:	69ba      	ldr	r2, [r7, #24]
 8001150:	693b      	ldr	r3, [r7, #16]
 8001152:	4313      	orrs	r3, r2
 8001154:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001156:	4a32      	ldr	r2, [pc, #200]	@ (8001220 <HAL_GPIO_Init+0x334>)
 8001158:	69bb      	ldr	r3, [r7, #24]
 800115a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800115c:	4b30      	ldr	r3, [pc, #192]	@ (8001220 <HAL_GPIO_Init+0x334>)
 800115e:	68db      	ldr	r3, [r3, #12]
 8001160:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001162:	693b      	ldr	r3, [r7, #16]
 8001164:	43db      	mvns	r3, r3
 8001166:	69ba      	ldr	r2, [r7, #24]
 8001168:	4013      	ands	r3, r2
 800116a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800116c:	683b      	ldr	r3, [r7, #0]
 800116e:	685b      	ldr	r3, [r3, #4]
 8001170:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001174:	2b00      	cmp	r3, #0
 8001176:	d003      	beq.n	8001180 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001178:	69ba      	ldr	r2, [r7, #24]
 800117a:	693b      	ldr	r3, [r7, #16]
 800117c:	4313      	orrs	r3, r2
 800117e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001180:	4a27      	ldr	r2, [pc, #156]	@ (8001220 <HAL_GPIO_Init+0x334>)
 8001182:	69bb      	ldr	r3, [r7, #24]
 8001184:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001186:	4b26      	ldr	r3, [pc, #152]	@ (8001220 <HAL_GPIO_Init+0x334>)
 8001188:	685b      	ldr	r3, [r3, #4]
 800118a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800118c:	693b      	ldr	r3, [r7, #16]
 800118e:	43db      	mvns	r3, r3
 8001190:	69ba      	ldr	r2, [r7, #24]
 8001192:	4013      	ands	r3, r2
 8001194:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d003      	beq.n	80011aa <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80011a2:	69ba      	ldr	r2, [r7, #24]
 80011a4:	693b      	ldr	r3, [r7, #16]
 80011a6:	4313      	orrs	r3, r2
 80011a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80011aa:	4a1d      	ldr	r2, [pc, #116]	@ (8001220 <HAL_GPIO_Init+0x334>)
 80011ac:	69bb      	ldr	r3, [r7, #24]
 80011ae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80011b0:	4b1b      	ldr	r3, [pc, #108]	@ (8001220 <HAL_GPIO_Init+0x334>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80011b6:	693b      	ldr	r3, [r7, #16]
 80011b8:	43db      	mvns	r3, r3
 80011ba:	69ba      	ldr	r2, [r7, #24]
 80011bc:	4013      	ands	r3, r2
 80011be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	685b      	ldr	r3, [r3, #4]
 80011c4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	d003      	beq.n	80011d4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80011cc:	69ba      	ldr	r2, [r7, #24]
 80011ce:	693b      	ldr	r3, [r7, #16]
 80011d0:	4313      	orrs	r3, r2
 80011d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80011d4:	4a12      	ldr	r2, [pc, #72]	@ (8001220 <HAL_GPIO_Init+0x334>)
 80011d6:	69bb      	ldr	r3, [r7, #24]
 80011d8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80011da:	69fb      	ldr	r3, [r7, #28]
 80011dc:	3301      	adds	r3, #1
 80011de:	61fb      	str	r3, [r7, #28]
 80011e0:	69fb      	ldr	r3, [r7, #28]
 80011e2:	2b0f      	cmp	r3, #15
 80011e4:	f67f ae90 	bls.w	8000f08 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80011e8:	bf00      	nop
 80011ea:	bf00      	nop
 80011ec:	3724      	adds	r7, #36	@ 0x24
 80011ee:	46bd      	mov	sp, r7
 80011f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f4:	4770      	bx	lr
 80011f6:	bf00      	nop
 80011f8:	40023800 	.word	0x40023800
 80011fc:	40013800 	.word	0x40013800
 8001200:	40020000 	.word	0x40020000
 8001204:	40020400 	.word	0x40020400
 8001208:	40020800 	.word	0x40020800
 800120c:	40020c00 	.word	0x40020c00
 8001210:	40021000 	.word	0x40021000
 8001214:	40021400 	.word	0x40021400
 8001218:	40021800 	.word	0x40021800
 800121c:	40021c00 	.word	0x40021c00
 8001220:	40013c00 	.word	0x40013c00

08001224 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001224:	b480      	push	{r7}
 8001226:	b085      	sub	sp, #20
 8001228:	af00      	add	r7, sp, #0
 800122a:	6078      	str	r0, [r7, #4]
 800122c:	460b      	mov	r3, r1
 800122e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	691a      	ldr	r2, [r3, #16]
 8001234:	887b      	ldrh	r3, [r7, #2]
 8001236:	4013      	ands	r3, r2
 8001238:	2b00      	cmp	r3, #0
 800123a:	d002      	beq.n	8001242 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800123c:	2301      	movs	r3, #1
 800123e:	73fb      	strb	r3, [r7, #15]
 8001240:	e001      	b.n	8001246 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001242:	2300      	movs	r3, #0
 8001244:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001246:	7bfb      	ldrb	r3, [r7, #15]
}
 8001248:	4618      	mov	r0, r3
 800124a:	3714      	adds	r7, #20
 800124c:	46bd      	mov	sp, r7
 800124e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001252:	4770      	bx	lr

08001254 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001254:	b480      	push	{r7}
 8001256:	b083      	sub	sp, #12
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
 800125c:	460b      	mov	r3, r1
 800125e:	807b      	strh	r3, [r7, #2]
 8001260:	4613      	mov	r3, r2
 8001262:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001264:	787b      	ldrb	r3, [r7, #1]
 8001266:	2b00      	cmp	r3, #0
 8001268:	d003      	beq.n	8001272 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800126a:	887a      	ldrh	r2, [r7, #2]
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001270:	e003      	b.n	800127a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001272:	887b      	ldrh	r3, [r7, #2]
 8001274:	041a      	lsls	r2, r3, #16
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	619a      	str	r2, [r3, #24]
}
 800127a:	bf00      	nop
 800127c:	370c      	adds	r7, #12
 800127e:	46bd      	mov	sp, r7
 8001280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001284:	4770      	bx	lr

08001286 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001286:	b480      	push	{r7}
 8001288:	b085      	sub	sp, #20
 800128a:	af00      	add	r7, sp, #0
 800128c:	6078      	str	r0, [r7, #4]
 800128e:	460b      	mov	r3, r1
 8001290:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	695b      	ldr	r3, [r3, #20]
 8001296:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001298:	887a      	ldrh	r2, [r7, #2]
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	4013      	ands	r3, r2
 800129e:	041a      	lsls	r2, r3, #16
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	43d9      	mvns	r1, r3
 80012a4:	887b      	ldrh	r3, [r7, #2]
 80012a6:	400b      	ands	r3, r1
 80012a8:	431a      	orrs	r2, r3
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	619a      	str	r2, [r3, #24]
}
 80012ae:	bf00      	nop
 80012b0:	3714      	adds	r7, #20
 80012b2:	46bd      	mov	sp, r7
 80012b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b8:	4770      	bx	lr
	...

080012bc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b086      	sub	sp, #24
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d101      	bne.n	80012ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012ca:	2301      	movs	r3, #1
 80012cc:	e267      	b.n	800179e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f003 0301 	and.w	r3, r3, #1
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d075      	beq.n	80013c6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80012da:	4b88      	ldr	r3, [pc, #544]	@ (80014fc <HAL_RCC_OscConfig+0x240>)
 80012dc:	689b      	ldr	r3, [r3, #8]
 80012de:	f003 030c 	and.w	r3, r3, #12
 80012e2:	2b04      	cmp	r3, #4
 80012e4:	d00c      	beq.n	8001300 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012e6:	4b85      	ldr	r3, [pc, #532]	@ (80014fc <HAL_RCC_OscConfig+0x240>)
 80012e8:	689b      	ldr	r3, [r3, #8]
 80012ea:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80012ee:	2b08      	cmp	r3, #8
 80012f0:	d112      	bne.n	8001318 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012f2:	4b82      	ldr	r3, [pc, #520]	@ (80014fc <HAL_RCC_OscConfig+0x240>)
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80012fa:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80012fe:	d10b      	bne.n	8001318 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001300:	4b7e      	ldr	r3, [pc, #504]	@ (80014fc <HAL_RCC_OscConfig+0x240>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001308:	2b00      	cmp	r3, #0
 800130a:	d05b      	beq.n	80013c4 <HAL_RCC_OscConfig+0x108>
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d157      	bne.n	80013c4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001314:	2301      	movs	r3, #1
 8001316:	e242      	b.n	800179e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001320:	d106      	bne.n	8001330 <HAL_RCC_OscConfig+0x74>
 8001322:	4b76      	ldr	r3, [pc, #472]	@ (80014fc <HAL_RCC_OscConfig+0x240>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4a75      	ldr	r2, [pc, #468]	@ (80014fc <HAL_RCC_OscConfig+0x240>)
 8001328:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800132c:	6013      	str	r3, [r2, #0]
 800132e:	e01d      	b.n	800136c <HAL_RCC_OscConfig+0xb0>
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001338:	d10c      	bne.n	8001354 <HAL_RCC_OscConfig+0x98>
 800133a:	4b70      	ldr	r3, [pc, #448]	@ (80014fc <HAL_RCC_OscConfig+0x240>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	4a6f      	ldr	r2, [pc, #444]	@ (80014fc <HAL_RCC_OscConfig+0x240>)
 8001340:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001344:	6013      	str	r3, [r2, #0]
 8001346:	4b6d      	ldr	r3, [pc, #436]	@ (80014fc <HAL_RCC_OscConfig+0x240>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4a6c      	ldr	r2, [pc, #432]	@ (80014fc <HAL_RCC_OscConfig+0x240>)
 800134c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001350:	6013      	str	r3, [r2, #0]
 8001352:	e00b      	b.n	800136c <HAL_RCC_OscConfig+0xb0>
 8001354:	4b69      	ldr	r3, [pc, #420]	@ (80014fc <HAL_RCC_OscConfig+0x240>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4a68      	ldr	r2, [pc, #416]	@ (80014fc <HAL_RCC_OscConfig+0x240>)
 800135a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800135e:	6013      	str	r3, [r2, #0]
 8001360:	4b66      	ldr	r3, [pc, #408]	@ (80014fc <HAL_RCC_OscConfig+0x240>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a65      	ldr	r2, [pc, #404]	@ (80014fc <HAL_RCC_OscConfig+0x240>)
 8001366:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800136a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	2b00      	cmp	r3, #0
 8001372:	d013      	beq.n	800139c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001374:	f7ff fcc8 	bl	8000d08 <HAL_GetTick>
 8001378:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800137a:	e008      	b.n	800138e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800137c:	f7ff fcc4 	bl	8000d08 <HAL_GetTick>
 8001380:	4602      	mov	r2, r0
 8001382:	693b      	ldr	r3, [r7, #16]
 8001384:	1ad3      	subs	r3, r2, r3
 8001386:	2b64      	cmp	r3, #100	@ 0x64
 8001388:	d901      	bls.n	800138e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800138a:	2303      	movs	r3, #3
 800138c:	e207      	b.n	800179e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800138e:	4b5b      	ldr	r3, [pc, #364]	@ (80014fc <HAL_RCC_OscConfig+0x240>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001396:	2b00      	cmp	r3, #0
 8001398:	d0f0      	beq.n	800137c <HAL_RCC_OscConfig+0xc0>
 800139a:	e014      	b.n	80013c6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800139c:	f7ff fcb4 	bl	8000d08 <HAL_GetTick>
 80013a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013a2:	e008      	b.n	80013b6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80013a4:	f7ff fcb0 	bl	8000d08 <HAL_GetTick>
 80013a8:	4602      	mov	r2, r0
 80013aa:	693b      	ldr	r3, [r7, #16]
 80013ac:	1ad3      	subs	r3, r2, r3
 80013ae:	2b64      	cmp	r3, #100	@ 0x64
 80013b0:	d901      	bls.n	80013b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80013b2:	2303      	movs	r3, #3
 80013b4:	e1f3      	b.n	800179e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013b6:	4b51      	ldr	r3, [pc, #324]	@ (80014fc <HAL_RCC_OscConfig+0x240>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d1f0      	bne.n	80013a4 <HAL_RCC_OscConfig+0xe8>
 80013c2:	e000      	b.n	80013c6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f003 0302 	and.w	r3, r3, #2
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d063      	beq.n	800149a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80013d2:	4b4a      	ldr	r3, [pc, #296]	@ (80014fc <HAL_RCC_OscConfig+0x240>)
 80013d4:	689b      	ldr	r3, [r3, #8]
 80013d6:	f003 030c 	and.w	r3, r3, #12
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d00b      	beq.n	80013f6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013de:	4b47      	ldr	r3, [pc, #284]	@ (80014fc <HAL_RCC_OscConfig+0x240>)
 80013e0:	689b      	ldr	r3, [r3, #8]
 80013e2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80013e6:	2b08      	cmp	r3, #8
 80013e8:	d11c      	bne.n	8001424 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013ea:	4b44      	ldr	r3, [pc, #272]	@ (80014fc <HAL_RCC_OscConfig+0x240>)
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d116      	bne.n	8001424 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013f6:	4b41      	ldr	r3, [pc, #260]	@ (80014fc <HAL_RCC_OscConfig+0x240>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f003 0302 	and.w	r3, r3, #2
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d005      	beq.n	800140e <HAL_RCC_OscConfig+0x152>
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	68db      	ldr	r3, [r3, #12]
 8001406:	2b01      	cmp	r3, #1
 8001408:	d001      	beq.n	800140e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800140a:	2301      	movs	r3, #1
 800140c:	e1c7      	b.n	800179e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800140e:	4b3b      	ldr	r3, [pc, #236]	@ (80014fc <HAL_RCC_OscConfig+0x240>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	691b      	ldr	r3, [r3, #16]
 800141a:	00db      	lsls	r3, r3, #3
 800141c:	4937      	ldr	r1, [pc, #220]	@ (80014fc <HAL_RCC_OscConfig+0x240>)
 800141e:	4313      	orrs	r3, r2
 8001420:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001422:	e03a      	b.n	800149a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	68db      	ldr	r3, [r3, #12]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d020      	beq.n	800146e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800142c:	4b34      	ldr	r3, [pc, #208]	@ (8001500 <HAL_RCC_OscConfig+0x244>)
 800142e:	2201      	movs	r2, #1
 8001430:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001432:	f7ff fc69 	bl	8000d08 <HAL_GetTick>
 8001436:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001438:	e008      	b.n	800144c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800143a:	f7ff fc65 	bl	8000d08 <HAL_GetTick>
 800143e:	4602      	mov	r2, r0
 8001440:	693b      	ldr	r3, [r7, #16]
 8001442:	1ad3      	subs	r3, r2, r3
 8001444:	2b02      	cmp	r3, #2
 8001446:	d901      	bls.n	800144c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001448:	2303      	movs	r3, #3
 800144a:	e1a8      	b.n	800179e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800144c:	4b2b      	ldr	r3, [pc, #172]	@ (80014fc <HAL_RCC_OscConfig+0x240>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f003 0302 	and.w	r3, r3, #2
 8001454:	2b00      	cmp	r3, #0
 8001456:	d0f0      	beq.n	800143a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001458:	4b28      	ldr	r3, [pc, #160]	@ (80014fc <HAL_RCC_OscConfig+0x240>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	691b      	ldr	r3, [r3, #16]
 8001464:	00db      	lsls	r3, r3, #3
 8001466:	4925      	ldr	r1, [pc, #148]	@ (80014fc <HAL_RCC_OscConfig+0x240>)
 8001468:	4313      	orrs	r3, r2
 800146a:	600b      	str	r3, [r1, #0]
 800146c:	e015      	b.n	800149a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800146e:	4b24      	ldr	r3, [pc, #144]	@ (8001500 <HAL_RCC_OscConfig+0x244>)
 8001470:	2200      	movs	r2, #0
 8001472:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001474:	f7ff fc48 	bl	8000d08 <HAL_GetTick>
 8001478:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800147a:	e008      	b.n	800148e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800147c:	f7ff fc44 	bl	8000d08 <HAL_GetTick>
 8001480:	4602      	mov	r2, r0
 8001482:	693b      	ldr	r3, [r7, #16]
 8001484:	1ad3      	subs	r3, r2, r3
 8001486:	2b02      	cmp	r3, #2
 8001488:	d901      	bls.n	800148e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800148a:	2303      	movs	r3, #3
 800148c:	e187      	b.n	800179e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800148e:	4b1b      	ldr	r3, [pc, #108]	@ (80014fc <HAL_RCC_OscConfig+0x240>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f003 0302 	and.w	r3, r3, #2
 8001496:	2b00      	cmp	r3, #0
 8001498:	d1f0      	bne.n	800147c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f003 0308 	and.w	r3, r3, #8
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d036      	beq.n	8001514 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	695b      	ldr	r3, [r3, #20]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d016      	beq.n	80014dc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014ae:	4b15      	ldr	r3, [pc, #84]	@ (8001504 <HAL_RCC_OscConfig+0x248>)
 80014b0:	2201      	movs	r2, #1
 80014b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014b4:	f7ff fc28 	bl	8000d08 <HAL_GetTick>
 80014b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014ba:	e008      	b.n	80014ce <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014bc:	f7ff fc24 	bl	8000d08 <HAL_GetTick>
 80014c0:	4602      	mov	r2, r0
 80014c2:	693b      	ldr	r3, [r7, #16]
 80014c4:	1ad3      	subs	r3, r2, r3
 80014c6:	2b02      	cmp	r3, #2
 80014c8:	d901      	bls.n	80014ce <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80014ca:	2303      	movs	r3, #3
 80014cc:	e167      	b.n	800179e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014ce:	4b0b      	ldr	r3, [pc, #44]	@ (80014fc <HAL_RCC_OscConfig+0x240>)
 80014d0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80014d2:	f003 0302 	and.w	r3, r3, #2
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d0f0      	beq.n	80014bc <HAL_RCC_OscConfig+0x200>
 80014da:	e01b      	b.n	8001514 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014dc:	4b09      	ldr	r3, [pc, #36]	@ (8001504 <HAL_RCC_OscConfig+0x248>)
 80014de:	2200      	movs	r2, #0
 80014e0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014e2:	f7ff fc11 	bl	8000d08 <HAL_GetTick>
 80014e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014e8:	e00e      	b.n	8001508 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80014ea:	f7ff fc0d 	bl	8000d08 <HAL_GetTick>
 80014ee:	4602      	mov	r2, r0
 80014f0:	693b      	ldr	r3, [r7, #16]
 80014f2:	1ad3      	subs	r3, r2, r3
 80014f4:	2b02      	cmp	r3, #2
 80014f6:	d907      	bls.n	8001508 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80014f8:	2303      	movs	r3, #3
 80014fa:	e150      	b.n	800179e <HAL_RCC_OscConfig+0x4e2>
 80014fc:	40023800 	.word	0x40023800
 8001500:	42470000 	.word	0x42470000
 8001504:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001508:	4b88      	ldr	r3, [pc, #544]	@ (800172c <HAL_RCC_OscConfig+0x470>)
 800150a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800150c:	f003 0302 	and.w	r3, r3, #2
 8001510:	2b00      	cmp	r3, #0
 8001512:	d1ea      	bne.n	80014ea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f003 0304 	and.w	r3, r3, #4
 800151c:	2b00      	cmp	r3, #0
 800151e:	f000 8097 	beq.w	8001650 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001522:	2300      	movs	r3, #0
 8001524:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001526:	4b81      	ldr	r3, [pc, #516]	@ (800172c <HAL_RCC_OscConfig+0x470>)
 8001528:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800152a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800152e:	2b00      	cmp	r3, #0
 8001530:	d10f      	bne.n	8001552 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001532:	2300      	movs	r3, #0
 8001534:	60bb      	str	r3, [r7, #8]
 8001536:	4b7d      	ldr	r3, [pc, #500]	@ (800172c <HAL_RCC_OscConfig+0x470>)
 8001538:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800153a:	4a7c      	ldr	r2, [pc, #496]	@ (800172c <HAL_RCC_OscConfig+0x470>)
 800153c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001540:	6413      	str	r3, [r2, #64]	@ 0x40
 8001542:	4b7a      	ldr	r3, [pc, #488]	@ (800172c <HAL_RCC_OscConfig+0x470>)
 8001544:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001546:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800154a:	60bb      	str	r3, [r7, #8]
 800154c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800154e:	2301      	movs	r3, #1
 8001550:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001552:	4b77      	ldr	r3, [pc, #476]	@ (8001730 <HAL_RCC_OscConfig+0x474>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800155a:	2b00      	cmp	r3, #0
 800155c:	d118      	bne.n	8001590 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800155e:	4b74      	ldr	r3, [pc, #464]	@ (8001730 <HAL_RCC_OscConfig+0x474>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4a73      	ldr	r2, [pc, #460]	@ (8001730 <HAL_RCC_OscConfig+0x474>)
 8001564:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001568:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800156a:	f7ff fbcd 	bl	8000d08 <HAL_GetTick>
 800156e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001570:	e008      	b.n	8001584 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001572:	f7ff fbc9 	bl	8000d08 <HAL_GetTick>
 8001576:	4602      	mov	r2, r0
 8001578:	693b      	ldr	r3, [r7, #16]
 800157a:	1ad3      	subs	r3, r2, r3
 800157c:	2b02      	cmp	r3, #2
 800157e:	d901      	bls.n	8001584 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001580:	2303      	movs	r3, #3
 8001582:	e10c      	b.n	800179e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001584:	4b6a      	ldr	r3, [pc, #424]	@ (8001730 <HAL_RCC_OscConfig+0x474>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800158c:	2b00      	cmp	r3, #0
 800158e:	d0f0      	beq.n	8001572 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	689b      	ldr	r3, [r3, #8]
 8001594:	2b01      	cmp	r3, #1
 8001596:	d106      	bne.n	80015a6 <HAL_RCC_OscConfig+0x2ea>
 8001598:	4b64      	ldr	r3, [pc, #400]	@ (800172c <HAL_RCC_OscConfig+0x470>)
 800159a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800159c:	4a63      	ldr	r2, [pc, #396]	@ (800172c <HAL_RCC_OscConfig+0x470>)
 800159e:	f043 0301 	orr.w	r3, r3, #1
 80015a2:	6713      	str	r3, [r2, #112]	@ 0x70
 80015a4:	e01c      	b.n	80015e0 <HAL_RCC_OscConfig+0x324>
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	689b      	ldr	r3, [r3, #8]
 80015aa:	2b05      	cmp	r3, #5
 80015ac:	d10c      	bne.n	80015c8 <HAL_RCC_OscConfig+0x30c>
 80015ae:	4b5f      	ldr	r3, [pc, #380]	@ (800172c <HAL_RCC_OscConfig+0x470>)
 80015b0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015b2:	4a5e      	ldr	r2, [pc, #376]	@ (800172c <HAL_RCC_OscConfig+0x470>)
 80015b4:	f043 0304 	orr.w	r3, r3, #4
 80015b8:	6713      	str	r3, [r2, #112]	@ 0x70
 80015ba:	4b5c      	ldr	r3, [pc, #368]	@ (800172c <HAL_RCC_OscConfig+0x470>)
 80015bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015be:	4a5b      	ldr	r2, [pc, #364]	@ (800172c <HAL_RCC_OscConfig+0x470>)
 80015c0:	f043 0301 	orr.w	r3, r3, #1
 80015c4:	6713      	str	r3, [r2, #112]	@ 0x70
 80015c6:	e00b      	b.n	80015e0 <HAL_RCC_OscConfig+0x324>
 80015c8:	4b58      	ldr	r3, [pc, #352]	@ (800172c <HAL_RCC_OscConfig+0x470>)
 80015ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015cc:	4a57      	ldr	r2, [pc, #348]	@ (800172c <HAL_RCC_OscConfig+0x470>)
 80015ce:	f023 0301 	bic.w	r3, r3, #1
 80015d2:	6713      	str	r3, [r2, #112]	@ 0x70
 80015d4:	4b55      	ldr	r3, [pc, #340]	@ (800172c <HAL_RCC_OscConfig+0x470>)
 80015d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80015d8:	4a54      	ldr	r2, [pc, #336]	@ (800172c <HAL_RCC_OscConfig+0x470>)
 80015da:	f023 0304 	bic.w	r3, r3, #4
 80015de:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	689b      	ldr	r3, [r3, #8]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d015      	beq.n	8001614 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015e8:	f7ff fb8e 	bl	8000d08 <HAL_GetTick>
 80015ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015ee:	e00a      	b.n	8001606 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80015f0:	f7ff fb8a 	bl	8000d08 <HAL_GetTick>
 80015f4:	4602      	mov	r2, r0
 80015f6:	693b      	ldr	r3, [r7, #16]
 80015f8:	1ad3      	subs	r3, r2, r3
 80015fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80015fe:	4293      	cmp	r3, r2
 8001600:	d901      	bls.n	8001606 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001602:	2303      	movs	r3, #3
 8001604:	e0cb      	b.n	800179e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001606:	4b49      	ldr	r3, [pc, #292]	@ (800172c <HAL_RCC_OscConfig+0x470>)
 8001608:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800160a:	f003 0302 	and.w	r3, r3, #2
 800160e:	2b00      	cmp	r3, #0
 8001610:	d0ee      	beq.n	80015f0 <HAL_RCC_OscConfig+0x334>
 8001612:	e014      	b.n	800163e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001614:	f7ff fb78 	bl	8000d08 <HAL_GetTick>
 8001618:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800161a:	e00a      	b.n	8001632 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800161c:	f7ff fb74 	bl	8000d08 <HAL_GetTick>
 8001620:	4602      	mov	r2, r0
 8001622:	693b      	ldr	r3, [r7, #16]
 8001624:	1ad3      	subs	r3, r2, r3
 8001626:	f241 3288 	movw	r2, #5000	@ 0x1388
 800162a:	4293      	cmp	r3, r2
 800162c:	d901      	bls.n	8001632 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800162e:	2303      	movs	r3, #3
 8001630:	e0b5      	b.n	800179e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001632:	4b3e      	ldr	r3, [pc, #248]	@ (800172c <HAL_RCC_OscConfig+0x470>)
 8001634:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001636:	f003 0302 	and.w	r3, r3, #2
 800163a:	2b00      	cmp	r3, #0
 800163c:	d1ee      	bne.n	800161c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800163e:	7dfb      	ldrb	r3, [r7, #23]
 8001640:	2b01      	cmp	r3, #1
 8001642:	d105      	bne.n	8001650 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001644:	4b39      	ldr	r3, [pc, #228]	@ (800172c <HAL_RCC_OscConfig+0x470>)
 8001646:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001648:	4a38      	ldr	r2, [pc, #224]	@ (800172c <HAL_RCC_OscConfig+0x470>)
 800164a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800164e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	699b      	ldr	r3, [r3, #24]
 8001654:	2b00      	cmp	r3, #0
 8001656:	f000 80a1 	beq.w	800179c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800165a:	4b34      	ldr	r3, [pc, #208]	@ (800172c <HAL_RCC_OscConfig+0x470>)
 800165c:	689b      	ldr	r3, [r3, #8]
 800165e:	f003 030c 	and.w	r3, r3, #12
 8001662:	2b08      	cmp	r3, #8
 8001664:	d05c      	beq.n	8001720 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	699b      	ldr	r3, [r3, #24]
 800166a:	2b02      	cmp	r3, #2
 800166c:	d141      	bne.n	80016f2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800166e:	4b31      	ldr	r3, [pc, #196]	@ (8001734 <HAL_RCC_OscConfig+0x478>)
 8001670:	2200      	movs	r2, #0
 8001672:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001674:	f7ff fb48 	bl	8000d08 <HAL_GetTick>
 8001678:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800167a:	e008      	b.n	800168e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800167c:	f7ff fb44 	bl	8000d08 <HAL_GetTick>
 8001680:	4602      	mov	r2, r0
 8001682:	693b      	ldr	r3, [r7, #16]
 8001684:	1ad3      	subs	r3, r2, r3
 8001686:	2b02      	cmp	r3, #2
 8001688:	d901      	bls.n	800168e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800168a:	2303      	movs	r3, #3
 800168c:	e087      	b.n	800179e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800168e:	4b27      	ldr	r3, [pc, #156]	@ (800172c <HAL_RCC_OscConfig+0x470>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001696:	2b00      	cmp	r3, #0
 8001698:	d1f0      	bne.n	800167c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	69da      	ldr	r2, [r3, #28]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6a1b      	ldr	r3, [r3, #32]
 80016a2:	431a      	orrs	r2, r3
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80016a8:	019b      	lsls	r3, r3, #6
 80016aa:	431a      	orrs	r2, r3
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80016b0:	085b      	lsrs	r3, r3, #1
 80016b2:	3b01      	subs	r3, #1
 80016b4:	041b      	lsls	r3, r3, #16
 80016b6:	431a      	orrs	r2, r3
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80016bc:	061b      	lsls	r3, r3, #24
 80016be:	491b      	ldr	r1, [pc, #108]	@ (800172c <HAL_RCC_OscConfig+0x470>)
 80016c0:	4313      	orrs	r3, r2
 80016c2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016c4:	4b1b      	ldr	r3, [pc, #108]	@ (8001734 <HAL_RCC_OscConfig+0x478>)
 80016c6:	2201      	movs	r2, #1
 80016c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016ca:	f7ff fb1d 	bl	8000d08 <HAL_GetTick>
 80016ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016d0:	e008      	b.n	80016e4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80016d2:	f7ff fb19 	bl	8000d08 <HAL_GetTick>
 80016d6:	4602      	mov	r2, r0
 80016d8:	693b      	ldr	r3, [r7, #16]
 80016da:	1ad3      	subs	r3, r2, r3
 80016dc:	2b02      	cmp	r3, #2
 80016de:	d901      	bls.n	80016e4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80016e0:	2303      	movs	r3, #3
 80016e2:	e05c      	b.n	800179e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016e4:	4b11      	ldr	r3, [pc, #68]	@ (800172c <HAL_RCC_OscConfig+0x470>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d0f0      	beq.n	80016d2 <HAL_RCC_OscConfig+0x416>
 80016f0:	e054      	b.n	800179c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016f2:	4b10      	ldr	r3, [pc, #64]	@ (8001734 <HAL_RCC_OscConfig+0x478>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016f8:	f7ff fb06 	bl	8000d08 <HAL_GetTick>
 80016fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016fe:	e008      	b.n	8001712 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001700:	f7ff fb02 	bl	8000d08 <HAL_GetTick>
 8001704:	4602      	mov	r2, r0
 8001706:	693b      	ldr	r3, [r7, #16]
 8001708:	1ad3      	subs	r3, r2, r3
 800170a:	2b02      	cmp	r3, #2
 800170c:	d901      	bls.n	8001712 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800170e:	2303      	movs	r3, #3
 8001710:	e045      	b.n	800179e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001712:	4b06      	ldr	r3, [pc, #24]	@ (800172c <HAL_RCC_OscConfig+0x470>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800171a:	2b00      	cmp	r3, #0
 800171c:	d1f0      	bne.n	8001700 <HAL_RCC_OscConfig+0x444>
 800171e:	e03d      	b.n	800179c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	699b      	ldr	r3, [r3, #24]
 8001724:	2b01      	cmp	r3, #1
 8001726:	d107      	bne.n	8001738 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001728:	2301      	movs	r3, #1
 800172a:	e038      	b.n	800179e <HAL_RCC_OscConfig+0x4e2>
 800172c:	40023800 	.word	0x40023800
 8001730:	40007000 	.word	0x40007000
 8001734:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001738:	4b1b      	ldr	r3, [pc, #108]	@ (80017a8 <HAL_RCC_OscConfig+0x4ec>)
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	699b      	ldr	r3, [r3, #24]
 8001742:	2b01      	cmp	r3, #1
 8001744:	d028      	beq.n	8001798 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001750:	429a      	cmp	r2, r3
 8001752:	d121      	bne.n	8001798 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800175e:	429a      	cmp	r2, r3
 8001760:	d11a      	bne.n	8001798 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001762:	68fa      	ldr	r2, [r7, #12]
 8001764:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001768:	4013      	ands	r3, r2
 800176a:	687a      	ldr	r2, [r7, #4]
 800176c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800176e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001770:	4293      	cmp	r3, r2
 8001772:	d111      	bne.n	8001798 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800177e:	085b      	lsrs	r3, r3, #1
 8001780:	3b01      	subs	r3, #1
 8001782:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001784:	429a      	cmp	r2, r3
 8001786:	d107      	bne.n	8001798 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001792:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001794:	429a      	cmp	r2, r3
 8001796:	d001      	beq.n	800179c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001798:	2301      	movs	r3, #1
 800179a:	e000      	b.n	800179e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800179c:	2300      	movs	r3, #0
}
 800179e:	4618      	mov	r0, r3
 80017a0:	3718      	adds	r7, #24
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	40023800 	.word	0x40023800

080017ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b084      	sub	sp, #16
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
 80017b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d101      	bne.n	80017c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017bc:	2301      	movs	r3, #1
 80017be:	e0cc      	b.n	800195a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80017c0:	4b68      	ldr	r3, [pc, #416]	@ (8001964 <HAL_RCC_ClockConfig+0x1b8>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f003 0307 	and.w	r3, r3, #7
 80017c8:	683a      	ldr	r2, [r7, #0]
 80017ca:	429a      	cmp	r2, r3
 80017cc:	d90c      	bls.n	80017e8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017ce:	4b65      	ldr	r3, [pc, #404]	@ (8001964 <HAL_RCC_ClockConfig+0x1b8>)
 80017d0:	683a      	ldr	r2, [r7, #0]
 80017d2:	b2d2      	uxtb	r2, r2
 80017d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80017d6:	4b63      	ldr	r3, [pc, #396]	@ (8001964 <HAL_RCC_ClockConfig+0x1b8>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f003 0307 	and.w	r3, r3, #7
 80017de:	683a      	ldr	r2, [r7, #0]
 80017e0:	429a      	cmp	r2, r3
 80017e2:	d001      	beq.n	80017e8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80017e4:	2301      	movs	r3, #1
 80017e6:	e0b8      	b.n	800195a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f003 0302 	and.w	r3, r3, #2
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d020      	beq.n	8001836 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f003 0304 	and.w	r3, r3, #4
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d005      	beq.n	800180c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001800:	4b59      	ldr	r3, [pc, #356]	@ (8001968 <HAL_RCC_ClockConfig+0x1bc>)
 8001802:	689b      	ldr	r3, [r3, #8]
 8001804:	4a58      	ldr	r2, [pc, #352]	@ (8001968 <HAL_RCC_ClockConfig+0x1bc>)
 8001806:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800180a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f003 0308 	and.w	r3, r3, #8
 8001814:	2b00      	cmp	r3, #0
 8001816:	d005      	beq.n	8001824 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001818:	4b53      	ldr	r3, [pc, #332]	@ (8001968 <HAL_RCC_ClockConfig+0x1bc>)
 800181a:	689b      	ldr	r3, [r3, #8]
 800181c:	4a52      	ldr	r2, [pc, #328]	@ (8001968 <HAL_RCC_ClockConfig+0x1bc>)
 800181e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001822:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001824:	4b50      	ldr	r3, [pc, #320]	@ (8001968 <HAL_RCC_ClockConfig+0x1bc>)
 8001826:	689b      	ldr	r3, [r3, #8]
 8001828:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	689b      	ldr	r3, [r3, #8]
 8001830:	494d      	ldr	r1, [pc, #308]	@ (8001968 <HAL_RCC_ClockConfig+0x1bc>)
 8001832:	4313      	orrs	r3, r2
 8001834:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f003 0301 	and.w	r3, r3, #1
 800183e:	2b00      	cmp	r3, #0
 8001840:	d044      	beq.n	80018cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	2b01      	cmp	r3, #1
 8001848:	d107      	bne.n	800185a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800184a:	4b47      	ldr	r3, [pc, #284]	@ (8001968 <HAL_RCC_ClockConfig+0x1bc>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001852:	2b00      	cmp	r3, #0
 8001854:	d119      	bne.n	800188a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001856:	2301      	movs	r3, #1
 8001858:	e07f      	b.n	800195a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	2b02      	cmp	r3, #2
 8001860:	d003      	beq.n	800186a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001866:	2b03      	cmp	r3, #3
 8001868:	d107      	bne.n	800187a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800186a:	4b3f      	ldr	r3, [pc, #252]	@ (8001968 <HAL_RCC_ClockConfig+0x1bc>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001872:	2b00      	cmp	r3, #0
 8001874:	d109      	bne.n	800188a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001876:	2301      	movs	r3, #1
 8001878:	e06f      	b.n	800195a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800187a:	4b3b      	ldr	r3, [pc, #236]	@ (8001968 <HAL_RCC_ClockConfig+0x1bc>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f003 0302 	and.w	r3, r3, #2
 8001882:	2b00      	cmp	r3, #0
 8001884:	d101      	bne.n	800188a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001886:	2301      	movs	r3, #1
 8001888:	e067      	b.n	800195a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800188a:	4b37      	ldr	r3, [pc, #220]	@ (8001968 <HAL_RCC_ClockConfig+0x1bc>)
 800188c:	689b      	ldr	r3, [r3, #8]
 800188e:	f023 0203 	bic.w	r2, r3, #3
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	4934      	ldr	r1, [pc, #208]	@ (8001968 <HAL_RCC_ClockConfig+0x1bc>)
 8001898:	4313      	orrs	r3, r2
 800189a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800189c:	f7ff fa34 	bl	8000d08 <HAL_GetTick>
 80018a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018a2:	e00a      	b.n	80018ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018a4:	f7ff fa30 	bl	8000d08 <HAL_GetTick>
 80018a8:	4602      	mov	r2, r0
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	1ad3      	subs	r3, r2, r3
 80018ae:	f241 3288 	movw	r2, #5000	@ 0x1388
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d901      	bls.n	80018ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80018b6:	2303      	movs	r3, #3
 80018b8:	e04f      	b.n	800195a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018ba:	4b2b      	ldr	r3, [pc, #172]	@ (8001968 <HAL_RCC_ClockConfig+0x1bc>)
 80018bc:	689b      	ldr	r3, [r3, #8]
 80018be:	f003 020c 	and.w	r2, r3, #12
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	009b      	lsls	r3, r3, #2
 80018c8:	429a      	cmp	r2, r3
 80018ca:	d1eb      	bne.n	80018a4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80018cc:	4b25      	ldr	r3, [pc, #148]	@ (8001964 <HAL_RCC_ClockConfig+0x1b8>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f003 0307 	and.w	r3, r3, #7
 80018d4:	683a      	ldr	r2, [r7, #0]
 80018d6:	429a      	cmp	r2, r3
 80018d8:	d20c      	bcs.n	80018f4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018da:	4b22      	ldr	r3, [pc, #136]	@ (8001964 <HAL_RCC_ClockConfig+0x1b8>)
 80018dc:	683a      	ldr	r2, [r7, #0]
 80018de:	b2d2      	uxtb	r2, r2
 80018e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80018e2:	4b20      	ldr	r3, [pc, #128]	@ (8001964 <HAL_RCC_ClockConfig+0x1b8>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f003 0307 	and.w	r3, r3, #7
 80018ea:	683a      	ldr	r2, [r7, #0]
 80018ec:	429a      	cmp	r2, r3
 80018ee:	d001      	beq.n	80018f4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80018f0:	2301      	movs	r3, #1
 80018f2:	e032      	b.n	800195a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f003 0304 	and.w	r3, r3, #4
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d008      	beq.n	8001912 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001900:	4b19      	ldr	r3, [pc, #100]	@ (8001968 <HAL_RCC_ClockConfig+0x1bc>)
 8001902:	689b      	ldr	r3, [r3, #8]
 8001904:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	68db      	ldr	r3, [r3, #12]
 800190c:	4916      	ldr	r1, [pc, #88]	@ (8001968 <HAL_RCC_ClockConfig+0x1bc>)
 800190e:	4313      	orrs	r3, r2
 8001910:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f003 0308 	and.w	r3, r3, #8
 800191a:	2b00      	cmp	r3, #0
 800191c:	d009      	beq.n	8001932 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800191e:	4b12      	ldr	r3, [pc, #72]	@ (8001968 <HAL_RCC_ClockConfig+0x1bc>)
 8001920:	689b      	ldr	r3, [r3, #8]
 8001922:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	691b      	ldr	r3, [r3, #16]
 800192a:	00db      	lsls	r3, r3, #3
 800192c:	490e      	ldr	r1, [pc, #56]	@ (8001968 <HAL_RCC_ClockConfig+0x1bc>)
 800192e:	4313      	orrs	r3, r2
 8001930:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001932:	f000 f821 	bl	8001978 <HAL_RCC_GetSysClockFreq>
 8001936:	4602      	mov	r2, r0
 8001938:	4b0b      	ldr	r3, [pc, #44]	@ (8001968 <HAL_RCC_ClockConfig+0x1bc>)
 800193a:	689b      	ldr	r3, [r3, #8]
 800193c:	091b      	lsrs	r3, r3, #4
 800193e:	f003 030f 	and.w	r3, r3, #15
 8001942:	490a      	ldr	r1, [pc, #40]	@ (800196c <HAL_RCC_ClockConfig+0x1c0>)
 8001944:	5ccb      	ldrb	r3, [r1, r3]
 8001946:	fa22 f303 	lsr.w	r3, r2, r3
 800194a:	4a09      	ldr	r2, [pc, #36]	@ (8001970 <HAL_RCC_ClockConfig+0x1c4>)
 800194c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800194e:	4b09      	ldr	r3, [pc, #36]	@ (8001974 <HAL_RCC_ClockConfig+0x1c8>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4618      	mov	r0, r3
 8001954:	f7ff f994 	bl	8000c80 <HAL_InitTick>

  return HAL_OK;
 8001958:	2300      	movs	r3, #0
}
 800195a:	4618      	mov	r0, r3
 800195c:	3710      	adds	r7, #16
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	40023c00 	.word	0x40023c00
 8001968:	40023800 	.word	0x40023800
 800196c:	08003a00 	.word	0x08003a00
 8001970:	20000000 	.word	0x20000000
 8001974:	20000004 	.word	0x20000004

08001978 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001978:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800197c:	b090      	sub	sp, #64	@ 0x40
 800197e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001980:	2300      	movs	r3, #0
 8001982:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t pllvco = 0U;
 8001984:	2300      	movs	r3, #0
 8001986:	63fb      	str	r3, [r7, #60]	@ 0x3c
  uint32_t pllp = 0U;
 8001988:	2300      	movs	r3, #0
 800198a:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 800198c:	2300      	movs	r3, #0
 800198e:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001990:	4b59      	ldr	r3, [pc, #356]	@ (8001af8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001992:	689b      	ldr	r3, [r3, #8]
 8001994:	f003 030c 	and.w	r3, r3, #12
 8001998:	2b08      	cmp	r3, #8
 800199a:	d00d      	beq.n	80019b8 <HAL_RCC_GetSysClockFreq+0x40>
 800199c:	2b08      	cmp	r3, #8
 800199e:	f200 80a1 	bhi.w	8001ae4 <HAL_RCC_GetSysClockFreq+0x16c>
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d002      	beq.n	80019ac <HAL_RCC_GetSysClockFreq+0x34>
 80019a6:	2b04      	cmp	r3, #4
 80019a8:	d003      	beq.n	80019b2 <HAL_RCC_GetSysClockFreq+0x3a>
 80019aa:	e09b      	b.n	8001ae4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80019ac:	4b53      	ldr	r3, [pc, #332]	@ (8001afc <HAL_RCC_GetSysClockFreq+0x184>)
 80019ae:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80019b0:	e09b      	b.n	8001aea <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80019b2:	4b53      	ldr	r3, [pc, #332]	@ (8001b00 <HAL_RCC_GetSysClockFreq+0x188>)
 80019b4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80019b6:	e098      	b.n	8001aea <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80019b8:	4b4f      	ldr	r3, [pc, #316]	@ (8001af8 <HAL_RCC_GetSysClockFreq+0x180>)
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80019c0:	637b      	str	r3, [r7, #52]	@ 0x34
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80019c2:	4b4d      	ldr	r3, [pc, #308]	@ (8001af8 <HAL_RCC_GetSysClockFreq+0x180>)
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d028      	beq.n	8001a20 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019ce:	4b4a      	ldr	r3, [pc, #296]	@ (8001af8 <HAL_RCC_GetSysClockFreq+0x180>)
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	099b      	lsrs	r3, r3, #6
 80019d4:	2200      	movs	r2, #0
 80019d6:	623b      	str	r3, [r7, #32]
 80019d8:	627a      	str	r2, [r7, #36]	@ 0x24
 80019da:	6a3b      	ldr	r3, [r7, #32]
 80019dc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80019e0:	2100      	movs	r1, #0
 80019e2:	4b47      	ldr	r3, [pc, #284]	@ (8001b00 <HAL_RCC_GetSysClockFreq+0x188>)
 80019e4:	fb03 f201 	mul.w	r2, r3, r1
 80019e8:	2300      	movs	r3, #0
 80019ea:	fb00 f303 	mul.w	r3, r0, r3
 80019ee:	4413      	add	r3, r2
 80019f0:	4a43      	ldr	r2, [pc, #268]	@ (8001b00 <HAL_RCC_GetSysClockFreq+0x188>)
 80019f2:	fba0 1202 	umull	r1, r2, r0, r2
 80019f6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80019f8:	460a      	mov	r2, r1
 80019fa:	62ba      	str	r2, [r7, #40]	@ 0x28
 80019fc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80019fe:	4413      	add	r3, r2
 8001a00:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001a02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001a04:	2200      	movs	r2, #0
 8001a06:	61bb      	str	r3, [r7, #24]
 8001a08:	61fa      	str	r2, [r7, #28]
 8001a0a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001a0e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8001a12:	f7fe fc2d 	bl	8000270 <__aeabi_uldivmod>
 8001a16:	4602      	mov	r2, r0
 8001a18:	460b      	mov	r3, r1
 8001a1a:	4613      	mov	r3, r2
 8001a1c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001a1e:	e053      	b.n	8001ac8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a20:	4b35      	ldr	r3, [pc, #212]	@ (8001af8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	099b      	lsrs	r3, r3, #6
 8001a26:	2200      	movs	r2, #0
 8001a28:	613b      	str	r3, [r7, #16]
 8001a2a:	617a      	str	r2, [r7, #20]
 8001a2c:	693b      	ldr	r3, [r7, #16]
 8001a2e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001a32:	f04f 0b00 	mov.w	fp, #0
 8001a36:	4652      	mov	r2, sl
 8001a38:	465b      	mov	r3, fp
 8001a3a:	f04f 0000 	mov.w	r0, #0
 8001a3e:	f04f 0100 	mov.w	r1, #0
 8001a42:	0159      	lsls	r1, r3, #5
 8001a44:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a48:	0150      	lsls	r0, r2, #5
 8001a4a:	4602      	mov	r2, r0
 8001a4c:	460b      	mov	r3, r1
 8001a4e:	ebb2 080a 	subs.w	r8, r2, sl
 8001a52:	eb63 090b 	sbc.w	r9, r3, fp
 8001a56:	f04f 0200 	mov.w	r2, #0
 8001a5a:	f04f 0300 	mov.w	r3, #0
 8001a5e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001a62:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001a66:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001a6a:	ebb2 0408 	subs.w	r4, r2, r8
 8001a6e:	eb63 0509 	sbc.w	r5, r3, r9
 8001a72:	f04f 0200 	mov.w	r2, #0
 8001a76:	f04f 0300 	mov.w	r3, #0
 8001a7a:	00eb      	lsls	r3, r5, #3
 8001a7c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001a80:	00e2      	lsls	r2, r4, #3
 8001a82:	4614      	mov	r4, r2
 8001a84:	461d      	mov	r5, r3
 8001a86:	eb14 030a 	adds.w	r3, r4, sl
 8001a8a:	603b      	str	r3, [r7, #0]
 8001a8c:	eb45 030b 	adc.w	r3, r5, fp
 8001a90:	607b      	str	r3, [r7, #4]
 8001a92:	f04f 0200 	mov.w	r2, #0
 8001a96:	f04f 0300 	mov.w	r3, #0
 8001a9a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001a9e:	4629      	mov	r1, r5
 8001aa0:	028b      	lsls	r3, r1, #10
 8001aa2:	4621      	mov	r1, r4
 8001aa4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001aa8:	4621      	mov	r1, r4
 8001aaa:	028a      	lsls	r2, r1, #10
 8001aac:	4610      	mov	r0, r2
 8001aae:	4619      	mov	r1, r3
 8001ab0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	60bb      	str	r3, [r7, #8]
 8001ab6:	60fa      	str	r2, [r7, #12]
 8001ab8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001abc:	f7fe fbd8 	bl	8000270 <__aeabi_uldivmod>
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	460b      	mov	r3, r1
 8001ac4:	4613      	mov	r3, r2
 8001ac6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001ac8:	4b0b      	ldr	r3, [pc, #44]	@ (8001af8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	0c1b      	lsrs	r3, r3, #16
 8001ace:	f003 0303 	and.w	r3, r3, #3
 8001ad2:	3301      	adds	r3, #1
 8001ad4:	005b      	lsls	r3, r3, #1
 8001ad6:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco / pllp;
 8001ad8:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8001ada:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001adc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ae0:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001ae2:	e002      	b.n	8001aea <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001ae4:	4b05      	ldr	r3, [pc, #20]	@ (8001afc <HAL_RCC_GetSysClockFreq+0x184>)
 8001ae6:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8001ae8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001aea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	3740      	adds	r7, #64	@ 0x40
 8001af0:	46bd      	mov	sp, r7
 8001af2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001af6:	bf00      	nop
 8001af8:	40023800 	.word	0x40023800
 8001afc:	00f42400 	.word	0x00f42400
 8001b00:	017d7840 	.word	0x017d7840

08001b04 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b04:	b480      	push	{r7}
 8001b06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b08:	4b03      	ldr	r3, [pc, #12]	@ (8001b18 <HAL_RCC_GetHCLKFreq+0x14>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b14:	4770      	bx	lr
 8001b16:	bf00      	nop
 8001b18:	20000000 	.word	0x20000000

08001b1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001b20:	f7ff fff0 	bl	8001b04 <HAL_RCC_GetHCLKFreq>
 8001b24:	4602      	mov	r2, r0
 8001b26:	4b05      	ldr	r3, [pc, #20]	@ (8001b3c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b28:	689b      	ldr	r3, [r3, #8]
 8001b2a:	0a9b      	lsrs	r3, r3, #10
 8001b2c:	f003 0307 	and.w	r3, r3, #7
 8001b30:	4903      	ldr	r1, [pc, #12]	@ (8001b40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b32:	5ccb      	ldrb	r3, [r1, r3]
 8001b34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	40023800 	.word	0x40023800
 8001b40:	08003a10 	.word	0x08003a10

08001b44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001b48:	f7ff ffdc 	bl	8001b04 <HAL_RCC_GetHCLKFreq>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	4b05      	ldr	r3, [pc, #20]	@ (8001b64 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b50:	689b      	ldr	r3, [r3, #8]
 8001b52:	0b5b      	lsrs	r3, r3, #13
 8001b54:	f003 0307 	and.w	r3, r3, #7
 8001b58:	4903      	ldr	r1, [pc, #12]	@ (8001b68 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b5a:	5ccb      	ldrb	r3, [r1, r3]
 8001b5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	40023800 	.word	0x40023800
 8001b68:	08003a10 	.word	0x08003a10

08001b6c <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b086      	sub	sp, #24
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001b74:	2300      	movs	r3, #0
 8001b76:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8001b78:	2300      	movs	r3, #0
 8001b7a:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	681b      	ldr	r3, [r3, #0]
 8001b80:	f003 0301 	and.w	r3, r3, #1
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d105      	bne.n	8001b94 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d035      	beq.n	8001c00 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8001b94:	4b62      	ldr	r3, [pc, #392]	@ (8001d20 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001b9a:	f7ff f8b5 	bl	8000d08 <HAL_GetTick>
 8001b9e:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001ba0:	e008      	b.n	8001bb4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001ba2:	f7ff f8b1 	bl	8000d08 <HAL_GetTick>
 8001ba6:	4602      	mov	r2, r0
 8001ba8:	697b      	ldr	r3, [r7, #20]
 8001baa:	1ad3      	subs	r3, r2, r3
 8001bac:	2b02      	cmp	r3, #2
 8001bae:	d901      	bls.n	8001bb4 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001bb0:	2303      	movs	r3, #3
 8001bb2:	e0b0      	b.n	8001d16 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8001bb4:	4b5b      	ldr	r3, [pc, #364]	@ (8001d24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	d1f0      	bne.n	8001ba2 <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	685b      	ldr	r3, [r3, #4]
 8001bc4:	019a      	lsls	r2, r3, #6
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	689b      	ldr	r3, [r3, #8]
 8001bca:	071b      	lsls	r3, r3, #28
 8001bcc:	4955      	ldr	r1, [pc, #340]	@ (8001d24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001bce:	4313      	orrs	r3, r2
 8001bd0:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8001bd4:	4b52      	ldr	r3, [pc, #328]	@ (8001d20 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8001bd6:	2201      	movs	r2, #1
 8001bd8:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8001bda:	f7ff f895 	bl	8000d08 <HAL_GetTick>
 8001bde:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001be0:	e008      	b.n	8001bf4 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8001be2:	f7ff f891 	bl	8000d08 <HAL_GetTick>
 8001be6:	4602      	mov	r2, r0
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	1ad3      	subs	r3, r2, r3
 8001bec:	2b02      	cmp	r3, #2
 8001bee:	d901      	bls.n	8001bf4 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8001bf0:	2303      	movs	r3, #3
 8001bf2:	e090      	b.n	8001d16 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8001bf4:	4b4b      	ldr	r3, [pc, #300]	@ (8001d24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d0f0      	beq.n	8001be2 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f003 0302 	and.w	r3, r3, #2
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	f000 8083 	beq.w	8001d14 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8001c0e:	2300      	movs	r3, #0
 8001c10:	60fb      	str	r3, [r7, #12]
 8001c12:	4b44      	ldr	r3, [pc, #272]	@ (8001d24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001c14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c16:	4a43      	ldr	r2, [pc, #268]	@ (8001d24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001c18:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001c1c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c1e:	4b41      	ldr	r3, [pc, #260]	@ (8001d24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001c20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c22:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c26:	60fb      	str	r3, [r7, #12]
 8001c28:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8001c2a:	4b3f      	ldr	r3, [pc, #252]	@ (8001d28 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4a3e      	ldr	r2, [pc, #248]	@ (8001d28 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001c30:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c34:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8001c36:	f7ff f867 	bl	8000d08 <HAL_GetTick>
 8001c3a:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8001c3c:	e008      	b.n	8001c50 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001c3e:	f7ff f863 	bl	8000d08 <HAL_GetTick>
 8001c42:	4602      	mov	r2, r0
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	1ad3      	subs	r3, r2, r3
 8001c48:	2b02      	cmp	r3, #2
 8001c4a:	d901      	bls.n	8001c50 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8001c4c:	2303      	movs	r3, #3
 8001c4e:	e062      	b.n	8001d16 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8001c50:	4b35      	ldr	r3, [pc, #212]	@ (8001d28 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	d0f0      	beq.n	8001c3e <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8001c5c:	4b31      	ldr	r3, [pc, #196]	@ (8001d24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001c5e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c60:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001c64:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8001c66:	693b      	ldr	r3, [r7, #16]
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d02f      	beq.n	8001ccc <HAL_RCCEx_PeriphCLKConfig+0x160>
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	68db      	ldr	r3, [r3, #12]
 8001c70:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001c74:	693a      	ldr	r2, [r7, #16]
 8001c76:	429a      	cmp	r2, r3
 8001c78:	d028      	beq.n	8001ccc <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8001c7a:	4b2a      	ldr	r3, [pc, #168]	@ (8001d24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001c7c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c7e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001c82:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8001c84:	4b29      	ldr	r3, [pc, #164]	@ (8001d2c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001c86:	2201      	movs	r2, #1
 8001c88:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8001c8a:	4b28      	ldr	r3, [pc, #160]	@ (8001d2c <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8001c8c:	2200      	movs	r2, #0
 8001c8e:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8001c90:	4a24      	ldr	r2, [pc, #144]	@ (8001d24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001c92:	693b      	ldr	r3, [r7, #16]
 8001c94:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8001c96:	4b23      	ldr	r3, [pc, #140]	@ (8001d24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001c98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001c9a:	f003 0301 	and.w	r3, r3, #1
 8001c9e:	2b01      	cmp	r3, #1
 8001ca0:	d114      	bne.n	8001ccc <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8001ca2:	f7ff f831 	bl	8000d08 <HAL_GetTick>
 8001ca6:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001ca8:	e00a      	b.n	8001cc0 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001caa:	f7ff f82d 	bl	8000d08 <HAL_GetTick>
 8001cae:	4602      	mov	r2, r0
 8001cb0:	697b      	ldr	r3, [r7, #20]
 8001cb2:	1ad3      	subs	r3, r2, r3
 8001cb4:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001cb8:	4293      	cmp	r3, r2
 8001cba:	d901      	bls.n	8001cc0 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8001cbc:	2303      	movs	r3, #3
 8001cbe:	e02a      	b.n	8001d16 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001cc0:	4b18      	ldr	r3, [pc, #96]	@ (8001d24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001cc2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001cc4:	f003 0302 	and.w	r3, r3, #2
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d0ee      	beq.n	8001caa <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8001ccc:	687b      	ldr	r3, [r7, #4]
 8001cce:	68db      	ldr	r3, [r3, #12]
 8001cd0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001cd4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8001cd8:	d10d      	bne.n	8001cf6 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8001cda:	4b12      	ldr	r3, [pc, #72]	@ (8001d24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001cdc:	689b      	ldr	r3, [r3, #8]
 8001cde:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	68db      	ldr	r3, [r3, #12]
 8001ce6:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8001cea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8001cee:	490d      	ldr	r1, [pc, #52]	@ (8001d24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001cf0:	4313      	orrs	r3, r2
 8001cf2:	608b      	str	r3, [r1, #8]
 8001cf4:	e005      	b.n	8001d02 <HAL_RCCEx_PeriphCLKConfig+0x196>
 8001cf6:	4b0b      	ldr	r3, [pc, #44]	@ (8001d24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001cf8:	689b      	ldr	r3, [r3, #8]
 8001cfa:	4a0a      	ldr	r2, [pc, #40]	@ (8001d24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001cfc:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8001d00:	6093      	str	r3, [r2, #8]
 8001d02:	4b08      	ldr	r3, [pc, #32]	@ (8001d24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001d04:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	68db      	ldr	r3, [r3, #12]
 8001d0a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001d0e:	4905      	ldr	r1, [pc, #20]	@ (8001d24 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8001d10:	4313      	orrs	r3, r2
 8001d12:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8001d14:	2300      	movs	r3, #0
}
 8001d16:	4618      	mov	r0, r3
 8001d18:	3718      	adds	r7, #24
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	42470068 	.word	0x42470068
 8001d24:	40023800 	.word	0x40023800
 8001d28:	40007000 	.word	0x40007000
 8001d2c:	42470e40 	.word	0x42470e40

08001d30 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b084      	sub	sp, #16
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001d38:	2301      	movs	r3, #1
 8001d3a:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d101      	bne.n	8001d46 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8001d42:	2301      	movs	r3, #1
 8001d44:	e073      	b.n	8001e2e <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	7f5b      	ldrb	r3, [r3, #29]
 8001d4a:	b2db      	uxtb	r3, r3
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d105      	bne.n	8001d5c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2200      	movs	r2, #0
 8001d54:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8001d56:	6878      	ldr	r0, [r7, #4]
 8001d58:	f7fe fdf0 	bl	800093c <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	2202      	movs	r2, #2
 8001d60:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	68db      	ldr	r3, [r3, #12]
 8001d68:	f003 0310 	and.w	r3, r3, #16
 8001d6c:	2b10      	cmp	r3, #16
 8001d6e:	d055      	beq.n	8001e1c <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	22ca      	movs	r2, #202	@ 0xca
 8001d76:	625a      	str	r2, [r3, #36]	@ 0x24
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	2253      	movs	r2, #83	@ 0x53
 8001d7e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8001d80:	6878      	ldr	r0, [r7, #4]
 8001d82:	f000 fa49 	bl	8002218 <RTC_EnterInitMode>
 8001d86:	4603      	mov	r3, r0
 8001d88:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8001d8a:	7bfb      	ldrb	r3, [r7, #15]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d12c      	bne.n	8001dea <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	689b      	ldr	r3, [r3, #8]
 8001d96:	687a      	ldr	r2, [r7, #4]
 8001d98:	6812      	ldr	r2, [r2, #0]
 8001d9a:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8001d9e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8001da2:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	6899      	ldr	r1, [r3, #8]
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	685a      	ldr	r2, [r3, #4]
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	691b      	ldr	r3, [r3, #16]
 8001db2:	431a      	orrs	r2, r3
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	695b      	ldr	r3, [r3, #20]
 8001db8:	431a      	orrs	r2, r3
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	430a      	orrs	r2, r1
 8001dc0:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	687a      	ldr	r2, [r7, #4]
 8001dc8:	68d2      	ldr	r2, [r2, #12]
 8001dca:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	6919      	ldr	r1, [r3, #16]
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	689b      	ldr	r3, [r3, #8]
 8001dd6:	041a      	lsls	r2, r3, #16
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	430a      	orrs	r2, r1
 8001dde:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8001de0:	6878      	ldr	r0, [r7, #4]
 8001de2:	f000 fa50 	bl	8002286 <RTC_ExitInitMode>
 8001de6:	4603      	mov	r3, r0
 8001de8:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8001dea:	7bfb      	ldrb	r3, [r7, #15]
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d110      	bne.n	8001e12 <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001dfe:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	699a      	ldr	r2, [r3, #24]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	430a      	orrs	r2, r1
 8001e10:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	22ff      	movs	r2, #255	@ 0xff
 8001e18:	625a      	str	r2, [r3, #36]	@ 0x24
 8001e1a:	e001      	b.n	8001e20 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8001e1c:	2300      	movs	r3, #0
 8001e1e:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8001e20:	7bfb      	ldrb	r3, [r7, #15]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d102      	bne.n	8001e2c <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2201      	movs	r2, #1
 8001e2a:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8001e2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	3710      	adds	r7, #16
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}

08001e36 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8001e36:	b590      	push	{r4, r7, lr}
 8001e38:	b087      	sub	sp, #28
 8001e3a:	af00      	add	r7, sp, #0
 8001e3c:	60f8      	str	r0, [r7, #12]
 8001e3e:	60b9      	str	r1, [r7, #8]
 8001e40:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8001e42:	2300      	movs	r3, #0
 8001e44:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8001e46:	68fb      	ldr	r3, [r7, #12]
 8001e48:	7f1b      	ldrb	r3, [r3, #28]
 8001e4a:	2b01      	cmp	r3, #1
 8001e4c:	d101      	bne.n	8001e52 <HAL_RTC_SetTime+0x1c>
 8001e4e:	2302      	movs	r3, #2
 8001e50:	e087      	b.n	8001f62 <HAL_RTC_SetTime+0x12c>
 8001e52:	68fb      	ldr	r3, [r7, #12]
 8001e54:	2201      	movs	r2, #1
 8001e56:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8001e58:	68fb      	ldr	r3, [r7, #12]
 8001e5a:	2202      	movs	r2, #2
 8001e5c:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d126      	bne.n	8001eb2 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8001e64:	68fb      	ldr	r3, [r7, #12]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	689b      	ldr	r3, [r3, #8]
 8001e6a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	d102      	bne.n	8001e78 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8001e72:	68bb      	ldr	r3, [r7, #8]
 8001e74:	2200      	movs	r2, #0
 8001e76:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8001e78:	68bb      	ldr	r3, [r7, #8]
 8001e7a:	781b      	ldrb	r3, [r3, #0]
 8001e7c:	4618      	mov	r0, r3
 8001e7e:	f000 fa27 	bl	80022d0 <RTC_ByteToBcd2>
 8001e82:	4603      	mov	r3, r0
 8001e84:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8001e86:	68bb      	ldr	r3, [r7, #8]
 8001e88:	785b      	ldrb	r3, [r3, #1]
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f000 fa20 	bl	80022d0 <RTC_ByteToBcd2>
 8001e90:	4603      	mov	r3, r0
 8001e92:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8001e94:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8001e96:	68bb      	ldr	r3, [r7, #8]
 8001e98:	789b      	ldrb	r3, [r3, #2]
 8001e9a:	4618      	mov	r0, r3
 8001e9c:	f000 fa18 	bl	80022d0 <RTC_ByteToBcd2>
 8001ea0:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8001ea2:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8001ea6:	68bb      	ldr	r3, [r7, #8]
 8001ea8:	78db      	ldrb	r3, [r3, #3]
 8001eaa:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8001eac:	4313      	orrs	r3, r2
 8001eae:	617b      	str	r3, [r7, #20]
 8001eb0:	e018      	b.n	8001ee4 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8001eb2:	68fb      	ldr	r3, [r7, #12]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	689b      	ldr	r3, [r3, #8]
 8001eb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ebc:	2b00      	cmp	r3, #0
 8001ebe:	d102      	bne.n	8001ec6 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8001ec0:	68bb      	ldr	r3, [r7, #8]
 8001ec2:	2200      	movs	r2, #0
 8001ec4:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8001ec6:	68bb      	ldr	r3, [r7, #8]
 8001ec8:	781b      	ldrb	r3, [r3, #0]
 8001eca:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8001ecc:	68bb      	ldr	r3, [r7, #8]
 8001ece:	785b      	ldrb	r3, [r3, #1]
 8001ed0:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8001ed2:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8001ed4:	68ba      	ldr	r2, [r7, #8]
 8001ed6:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8001ed8:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8001eda:	68bb      	ldr	r3, [r7, #8]
 8001edc:	78db      	ldrb	r3, [r3, #3]
 8001ede:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8001ee0:	4313      	orrs	r3, r2
 8001ee2:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	22ca      	movs	r2, #202	@ 0xca
 8001eea:	625a      	str	r2, [r3, #36]	@ 0x24
 8001eec:	68fb      	ldr	r3, [r7, #12]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	2253      	movs	r2, #83	@ 0x53
 8001ef2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8001ef4:	68f8      	ldr	r0, [r7, #12]
 8001ef6:	f000 f98f 	bl	8002218 <RTC_EnterInitMode>
 8001efa:	4603      	mov	r3, r0
 8001efc:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8001efe:	7cfb      	ldrb	r3, [r7, #19]
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d120      	bne.n	8001f46 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	681a      	ldr	r2, [r3, #0]
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8001f0e:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8001f12:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8001f14:	68fb      	ldr	r3, [r7, #12]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	689a      	ldr	r2, [r3, #8]
 8001f1a:	68fb      	ldr	r3, [r7, #12]
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8001f22:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8001f24:	68fb      	ldr	r3, [r7, #12]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	6899      	ldr	r1, [r3, #8]
 8001f2a:	68bb      	ldr	r3, [r7, #8]
 8001f2c:	68da      	ldr	r2, [r3, #12]
 8001f2e:	68bb      	ldr	r3, [r7, #8]
 8001f30:	691b      	ldr	r3, [r3, #16]
 8001f32:	431a      	orrs	r2, r3
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	430a      	orrs	r2, r1
 8001f3a:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8001f3c:	68f8      	ldr	r0, [r7, #12]
 8001f3e:	f000 f9a2 	bl	8002286 <RTC_ExitInitMode>
 8001f42:	4603      	mov	r3, r0
 8001f44:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8001f46:	7cfb      	ldrb	r3, [r7, #19]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d102      	bne.n	8001f52 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	2201      	movs	r2, #1
 8001f50:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	22ff      	movs	r2, #255	@ 0xff
 8001f58:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8001f5a:	68fb      	ldr	r3, [r7, #12]
 8001f5c:	2200      	movs	r2, #0
 8001f5e:	771a      	strb	r2, [r3, #28]

  return status;
 8001f60:	7cfb      	ldrb	r3, [r7, #19]
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	371c      	adds	r7, #28
 8001f66:	46bd      	mov	sp, r7
 8001f68:	bd90      	pop	{r4, r7, pc}

08001f6a <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8001f6a:	b580      	push	{r7, lr}
 8001f6c:	b086      	sub	sp, #24
 8001f6e:	af00      	add	r7, sp, #0
 8001f70:	60f8      	str	r0, [r7, #12]
 8001f72:	60b9      	str	r1, [r7, #8]
 8001f74:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8001f76:	2300      	movs	r3, #0
 8001f78:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8001f7a:	68fb      	ldr	r3, [r7, #12]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001f80:	68bb      	ldr	r3, [r7, #8]
 8001f82:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8001f84:	68fb      	ldr	r3, [r7, #12]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	691b      	ldr	r3, [r3, #16]
 8001f8a:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8001f8e:	68bb      	ldr	r3, [r7, #8]
 8001f90:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8001f9c:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8001fa0:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8001fa2:	697b      	ldr	r3, [r7, #20]
 8001fa4:	0c1b      	lsrs	r3, r3, #16
 8001fa6:	b2db      	uxtb	r3, r3
 8001fa8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001fac:	b2da      	uxtb	r2, r3
 8001fae:	68bb      	ldr	r3, [r7, #8]
 8001fb0:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8001fb2:	697b      	ldr	r3, [r7, #20]
 8001fb4:	0a1b      	lsrs	r3, r3, #8
 8001fb6:	b2db      	uxtb	r3, r3
 8001fb8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001fbc:	b2da      	uxtb	r2, r3
 8001fbe:	68bb      	ldr	r3, [r7, #8]
 8001fc0:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8001fc2:	697b      	ldr	r3, [r7, #20]
 8001fc4:	b2db      	uxtb	r3, r3
 8001fc6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001fca:	b2da      	uxtb	r2, r3
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8001fd0:	697b      	ldr	r3, [r7, #20]
 8001fd2:	0d9b      	lsrs	r3, r3, #22
 8001fd4:	b2db      	uxtb	r3, r3
 8001fd6:	f003 0301 	and.w	r3, r3, #1
 8001fda:	b2da      	uxtb	r2, r3
 8001fdc:	68bb      	ldr	r3, [r7, #8]
 8001fde:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d11a      	bne.n	800201c <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8001fe6:	68bb      	ldr	r3, [r7, #8]
 8001fe8:	781b      	ldrb	r3, [r3, #0]
 8001fea:	4618      	mov	r0, r3
 8001fec:	f000 f98e 	bl	800230c <RTC_Bcd2ToByte>
 8001ff0:	4603      	mov	r3, r0
 8001ff2:	461a      	mov	r2, r3
 8001ff4:	68bb      	ldr	r3, [r7, #8]
 8001ff6:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8001ff8:	68bb      	ldr	r3, [r7, #8]
 8001ffa:	785b      	ldrb	r3, [r3, #1]
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	f000 f985 	bl	800230c <RTC_Bcd2ToByte>
 8002002:	4603      	mov	r3, r0
 8002004:	461a      	mov	r2, r3
 8002006:	68bb      	ldr	r3, [r7, #8]
 8002008:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800200a:	68bb      	ldr	r3, [r7, #8]
 800200c:	789b      	ldrb	r3, [r3, #2]
 800200e:	4618      	mov	r0, r3
 8002010:	f000 f97c 	bl	800230c <RTC_Bcd2ToByte>
 8002014:	4603      	mov	r3, r0
 8002016:	461a      	mov	r2, r3
 8002018:	68bb      	ldr	r3, [r7, #8]
 800201a:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 800201c:	2300      	movs	r3, #0
}
 800201e:	4618      	mov	r0, r3
 8002020:	3718      	adds	r7, #24
 8002022:	46bd      	mov	sp, r7
 8002024:	bd80      	pop	{r7, pc}

08002026 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8002026:	b590      	push	{r4, r7, lr}
 8002028:	b087      	sub	sp, #28
 800202a:	af00      	add	r7, sp, #0
 800202c:	60f8      	str	r0, [r7, #12]
 800202e:	60b9      	str	r1, [r7, #8]
 8002030:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8002032:	2300      	movs	r3, #0
 8002034:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	7f1b      	ldrb	r3, [r3, #28]
 800203a:	2b01      	cmp	r3, #1
 800203c:	d101      	bne.n	8002042 <HAL_RTC_SetDate+0x1c>
 800203e:	2302      	movs	r3, #2
 8002040:	e071      	b.n	8002126 <HAL_RTC_SetDate+0x100>
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	2201      	movs	r2, #1
 8002046:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	2202      	movs	r2, #2
 800204c:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	2b00      	cmp	r3, #0
 8002052:	d10e      	bne.n	8002072 <HAL_RTC_SetDate+0x4c>
 8002054:	68bb      	ldr	r3, [r7, #8]
 8002056:	785b      	ldrb	r3, [r3, #1]
 8002058:	f003 0310 	and.w	r3, r3, #16
 800205c:	2b00      	cmp	r3, #0
 800205e:	d008      	beq.n	8002072 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8002060:	68bb      	ldr	r3, [r7, #8]
 8002062:	785b      	ldrb	r3, [r3, #1]
 8002064:	f023 0310 	bic.w	r3, r3, #16
 8002068:	b2db      	uxtb	r3, r3
 800206a:	330a      	adds	r3, #10
 800206c:	b2da      	uxtb	r2, r3
 800206e:	68bb      	ldr	r3, [r7, #8]
 8002070:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	2b00      	cmp	r3, #0
 8002076:	d11c      	bne.n	80020b2 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002078:	68bb      	ldr	r3, [r7, #8]
 800207a:	78db      	ldrb	r3, [r3, #3]
 800207c:	4618      	mov	r0, r3
 800207e:	f000 f927 	bl	80022d0 <RTC_ByteToBcd2>
 8002082:	4603      	mov	r3, r0
 8002084:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8002086:	68bb      	ldr	r3, [r7, #8]
 8002088:	785b      	ldrb	r3, [r3, #1]
 800208a:	4618      	mov	r0, r3
 800208c:	f000 f920 	bl	80022d0 <RTC_ByteToBcd2>
 8002090:	4603      	mov	r3, r0
 8002092:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8002094:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8002096:	68bb      	ldr	r3, [r7, #8]
 8002098:	789b      	ldrb	r3, [r3, #2]
 800209a:	4618      	mov	r0, r3
 800209c:	f000 f918 	bl	80022d0 <RTC_ByteToBcd2>
 80020a0:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80020a2:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 80020a6:	68bb      	ldr	r3, [r7, #8]
 80020a8:	781b      	ldrb	r3, [r3, #0]
 80020aa:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80020ac:	4313      	orrs	r3, r2
 80020ae:	617b      	str	r3, [r7, #20]
 80020b0:	e00e      	b.n	80020d0 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80020b2:	68bb      	ldr	r3, [r7, #8]
 80020b4:	78db      	ldrb	r3, [r3, #3]
 80020b6:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80020b8:	68bb      	ldr	r3, [r7, #8]
 80020ba:	785b      	ldrb	r3, [r3, #1]
 80020bc:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80020be:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 80020c0:	68ba      	ldr	r2, [r7, #8]
 80020c2:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80020c4:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80020c6:	68bb      	ldr	r3, [r7, #8]
 80020c8:	781b      	ldrb	r3, [r3, #0]
 80020ca:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80020cc:	4313      	orrs	r3, r2
 80020ce:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80020d0:	68fb      	ldr	r3, [r7, #12]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	22ca      	movs	r2, #202	@ 0xca
 80020d6:	625a      	str	r2, [r3, #36]	@ 0x24
 80020d8:	68fb      	ldr	r3, [r7, #12]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	2253      	movs	r2, #83	@ 0x53
 80020de:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80020e0:	68f8      	ldr	r0, [r7, #12]
 80020e2:	f000 f899 	bl	8002218 <RTC_EnterInitMode>
 80020e6:	4603      	mov	r3, r0
 80020e8:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80020ea:	7cfb      	ldrb	r3, [r7, #19]
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d10c      	bne.n	800210a <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80020f0:	68fb      	ldr	r3, [r7, #12]
 80020f2:	681a      	ldr	r2, [r3, #0]
 80020f4:	697b      	ldr	r3, [r7, #20]
 80020f6:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80020fa:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80020fe:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8002100:	68f8      	ldr	r0, [r7, #12]
 8002102:	f000 f8c0 	bl	8002286 <RTC_ExitInitMode>
 8002106:	4603      	mov	r3, r0
 8002108:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800210a:	7cfb      	ldrb	r3, [r7, #19]
 800210c:	2b00      	cmp	r3, #0
 800210e:	d102      	bne.n	8002116 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	2201      	movs	r2, #1
 8002114:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	22ff      	movs	r2, #255	@ 0xff
 800211c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800211e:	68fb      	ldr	r3, [r7, #12]
 8002120:	2200      	movs	r2, #0
 8002122:	771a      	strb	r2, [r3, #28]

  return status;
 8002124:	7cfb      	ldrb	r3, [r7, #19]
}
 8002126:	4618      	mov	r0, r3
 8002128:	371c      	adds	r7, #28
 800212a:	46bd      	mov	sp, r7
 800212c:	bd90      	pop	{r4, r7, pc}

0800212e <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800212e:	b580      	push	{r7, lr}
 8002130:	b086      	sub	sp, #24
 8002132:	af00      	add	r7, sp, #0
 8002134:	60f8      	str	r0, [r7, #12]
 8002136:	60b9      	str	r1, [r7, #8]
 8002138:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800213a:	2300      	movs	r3, #0
 800213c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	685b      	ldr	r3, [r3, #4]
 8002144:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8002148:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800214c:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 800214e:	697b      	ldr	r3, [r7, #20]
 8002150:	0c1b      	lsrs	r3, r3, #16
 8002152:	b2da      	uxtb	r2, r3
 8002154:	68bb      	ldr	r3, [r7, #8]
 8002156:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8002158:	697b      	ldr	r3, [r7, #20]
 800215a:	0a1b      	lsrs	r3, r3, #8
 800215c:	b2db      	uxtb	r3, r3
 800215e:	f003 031f 	and.w	r3, r3, #31
 8002162:	b2da      	uxtb	r2, r3
 8002164:	68bb      	ldr	r3, [r7, #8]
 8002166:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8002168:	697b      	ldr	r3, [r7, #20]
 800216a:	b2db      	uxtb	r3, r3
 800216c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002170:	b2da      	uxtb	r2, r3
 8002172:	68bb      	ldr	r3, [r7, #8]
 8002174:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8002176:	697b      	ldr	r3, [r7, #20]
 8002178:	0b5b      	lsrs	r3, r3, #13
 800217a:	b2db      	uxtb	r3, r3
 800217c:	f003 0307 	and.w	r3, r3, #7
 8002180:	b2da      	uxtb	r2, r3
 8002182:	68bb      	ldr	r3, [r7, #8]
 8002184:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2b00      	cmp	r3, #0
 800218a:	d11a      	bne.n	80021c2 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	78db      	ldrb	r3, [r3, #3]
 8002190:	4618      	mov	r0, r3
 8002192:	f000 f8bb 	bl	800230c <RTC_Bcd2ToByte>
 8002196:	4603      	mov	r3, r0
 8002198:	461a      	mov	r2, r3
 800219a:	68bb      	ldr	r3, [r7, #8]
 800219c:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800219e:	68bb      	ldr	r3, [r7, #8]
 80021a0:	785b      	ldrb	r3, [r3, #1]
 80021a2:	4618      	mov	r0, r3
 80021a4:	f000 f8b2 	bl	800230c <RTC_Bcd2ToByte>
 80021a8:	4603      	mov	r3, r0
 80021aa:	461a      	mov	r2, r3
 80021ac:	68bb      	ldr	r3, [r7, #8]
 80021ae:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80021b0:	68bb      	ldr	r3, [r7, #8]
 80021b2:	789b      	ldrb	r3, [r3, #2]
 80021b4:	4618      	mov	r0, r3
 80021b6:	f000 f8a9 	bl	800230c <RTC_Bcd2ToByte>
 80021ba:	4603      	mov	r3, r0
 80021bc:	461a      	mov	r2, r3
 80021be:	68bb      	ldr	r3, [r7, #8]
 80021c0:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80021c2:	2300      	movs	r3, #0
}
 80021c4:	4618      	mov	r0, r3
 80021c6:	3718      	adds	r7, #24
 80021c8:	46bd      	mov	sp, r7
 80021ca:	bd80      	pop	{r7, pc}

080021cc <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	b084      	sub	sp, #16
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80021d4:	2300      	movs	r3, #0
 80021d6:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4a0d      	ldr	r2, [pc, #52]	@ (8002214 <HAL_RTC_WaitForSynchro+0x48>)
 80021de:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80021e0:	f7fe fd92 	bl	8000d08 <HAL_GetTick>
 80021e4:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80021e6:	e009      	b.n	80021fc <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80021e8:	f7fe fd8e 	bl	8000d08 <HAL_GetTick>
 80021ec:	4602      	mov	r2, r0
 80021ee:	68fb      	ldr	r3, [r7, #12]
 80021f0:	1ad3      	subs	r3, r2, r3
 80021f2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80021f6:	d901      	bls.n	80021fc <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 80021f8:	2303      	movs	r3, #3
 80021fa:	e007      	b.n	800220c <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	68db      	ldr	r3, [r3, #12]
 8002202:	f003 0320 	and.w	r3, r3, #32
 8002206:	2b00      	cmp	r3, #0
 8002208:	d0ee      	beq.n	80021e8 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 800220a:	2300      	movs	r3, #0
}
 800220c:	4618      	mov	r0, r3
 800220e:	3710      	adds	r7, #16
 8002210:	46bd      	mov	sp, r7
 8002212:	bd80      	pop	{r7, pc}
 8002214:	00017f5f 	.word	0x00017f5f

08002218 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8002218:	b580      	push	{r7, lr}
 800221a:	b084      	sub	sp, #16
 800221c:	af00      	add	r7, sp, #0
 800221e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002220:	2300      	movs	r3, #0
 8002222:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8002224:	2300      	movs	r3, #0
 8002226:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	68db      	ldr	r3, [r3, #12]
 800222e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002232:	2b00      	cmp	r3, #0
 8002234:	d122      	bne.n	800227c <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	68da      	ldr	r2, [r3, #12]
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002244:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002246:	f7fe fd5f 	bl	8000d08 <HAL_GetTick>
 800224a:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800224c:	e00c      	b.n	8002268 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800224e:	f7fe fd5b 	bl	8000d08 <HAL_GetTick>
 8002252:	4602      	mov	r2, r0
 8002254:	68bb      	ldr	r3, [r7, #8]
 8002256:	1ad3      	subs	r3, r2, r3
 8002258:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800225c:	d904      	bls.n	8002268 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2204      	movs	r2, #4
 8002262:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8002264:	2301      	movs	r3, #1
 8002266:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	68db      	ldr	r3, [r3, #12]
 800226e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002272:	2b00      	cmp	r3, #0
 8002274:	d102      	bne.n	800227c <RTC_EnterInitMode+0x64>
 8002276:	7bfb      	ldrb	r3, [r7, #15]
 8002278:	2b01      	cmp	r3, #1
 800227a:	d1e8      	bne.n	800224e <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 800227c:	7bfb      	ldrb	r3, [r7, #15]
}
 800227e:	4618      	mov	r0, r3
 8002280:	3710      	adds	r7, #16
 8002282:	46bd      	mov	sp, r7
 8002284:	bd80      	pop	{r7, pc}

08002286 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8002286:	b580      	push	{r7, lr}
 8002288:	b084      	sub	sp, #16
 800228a:	af00      	add	r7, sp, #0
 800228c:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800228e:	2300      	movs	r3, #0
 8002290:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	68da      	ldr	r2, [r3, #12]
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80022a0:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	689b      	ldr	r3, [r3, #8]
 80022a8:	f003 0320 	and.w	r3, r3, #32
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d10a      	bne.n	80022c6 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80022b0:	6878      	ldr	r0, [r7, #4]
 80022b2:	f7ff ff8b 	bl	80021cc <HAL_RTC_WaitForSynchro>
 80022b6:	4603      	mov	r3, r0
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d004      	beq.n	80022c6 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	2204      	movs	r2, #4
 80022c0:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 80022c2:	2301      	movs	r3, #1
 80022c4:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 80022c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80022c8:	4618      	mov	r0, r3
 80022ca:	3710      	adds	r7, #16
 80022cc:	46bd      	mov	sp, r7
 80022ce:	bd80      	pop	{r7, pc}

080022d0 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 80022d0:	b480      	push	{r7}
 80022d2:	b085      	sub	sp, #20
 80022d4:	af00      	add	r7, sp, #0
 80022d6:	4603      	mov	r3, r0
 80022d8:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80022da:	2300      	movs	r3, #0
 80022dc:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 80022de:	e005      	b.n	80022ec <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	3301      	adds	r3, #1
 80022e4:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 80022e6:	79fb      	ldrb	r3, [r7, #7]
 80022e8:	3b0a      	subs	r3, #10
 80022ea:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 80022ec:	79fb      	ldrb	r3, [r7, #7]
 80022ee:	2b09      	cmp	r3, #9
 80022f0:	d8f6      	bhi.n	80022e0 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 80022f2:	68fb      	ldr	r3, [r7, #12]
 80022f4:	b2db      	uxtb	r3, r3
 80022f6:	011b      	lsls	r3, r3, #4
 80022f8:	b2da      	uxtb	r2, r3
 80022fa:	79fb      	ldrb	r3, [r7, #7]
 80022fc:	4313      	orrs	r3, r2
 80022fe:	b2db      	uxtb	r3, r3
}
 8002300:	4618      	mov	r0, r3
 8002302:	3714      	adds	r7, #20
 8002304:	46bd      	mov	sp, r7
 8002306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800230a:	4770      	bx	lr

0800230c <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 800230c:	b480      	push	{r7}
 800230e:	b085      	sub	sp, #20
 8002310:	af00      	add	r7, sp, #0
 8002312:	4603      	mov	r3, r0
 8002314:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 8002316:	2300      	movs	r3, #0
 8002318:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 800231a:	79fb      	ldrb	r3, [r7, #7]
 800231c:	091b      	lsrs	r3, r3, #4
 800231e:	b2db      	uxtb	r3, r3
 8002320:	461a      	mov	r2, r3
 8002322:	4613      	mov	r3, r2
 8002324:	009b      	lsls	r3, r3, #2
 8002326:	4413      	add	r3, r2
 8002328:	005b      	lsls	r3, r3, #1
 800232a:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	b2da      	uxtb	r2, r3
 8002330:	79fb      	ldrb	r3, [r7, #7]
 8002332:	f003 030f 	and.w	r3, r3, #15
 8002336:	b2db      	uxtb	r3, r3
 8002338:	4413      	add	r3, r2
 800233a:	b2db      	uxtb	r3, r3
}
 800233c:	4618      	mov	r0, r3
 800233e:	3714      	adds	r7, #20
 8002340:	46bd      	mov	sp, r7
 8002342:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002346:	4770      	bx	lr

08002348 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b082      	sub	sp, #8
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	2b00      	cmp	r3, #0
 8002354:	d101      	bne.n	800235a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002356:	2301      	movs	r3, #1
 8002358:	e042      	b.n	80023e0 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002360:	b2db      	uxtb	r3, r3
 8002362:	2b00      	cmp	r3, #0
 8002364:	d106      	bne.n	8002374 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	2200      	movs	r2, #0
 800236a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800236e:	6878      	ldr	r0, [r7, #4]
 8002370:	f7fe fb0e 	bl	8000990 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	2224      	movs	r2, #36	@ 0x24
 8002378:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	68da      	ldr	r2, [r3, #12]
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800238a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800238c:	6878      	ldr	r0, [r7, #4]
 800238e:	f000 f973 	bl	8002678 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	691a      	ldr	r2, [r3, #16]
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80023a0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	695a      	ldr	r2, [r3, #20]
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80023b0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	68da      	ldr	r2, [r3, #12]
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80023c0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	2200      	movs	r2, #0
 80023c6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	2220      	movs	r2, #32
 80023cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	2220      	movs	r2, #32
 80023d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	2200      	movs	r2, #0
 80023dc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80023de:	2300      	movs	r3, #0
}
 80023e0:	4618      	mov	r0, r3
 80023e2:	3708      	adds	r7, #8
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd80      	pop	{r7, pc}

080023e8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b08a      	sub	sp, #40	@ 0x28
 80023ec:	af02      	add	r7, sp, #8
 80023ee:	60f8      	str	r0, [r7, #12]
 80023f0:	60b9      	str	r1, [r7, #8]
 80023f2:	603b      	str	r3, [r7, #0]
 80023f4:	4613      	mov	r3, r2
 80023f6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80023f8:	2300      	movs	r3, #0
 80023fa:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002402:	b2db      	uxtb	r3, r3
 8002404:	2b20      	cmp	r3, #32
 8002406:	d175      	bne.n	80024f4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002408:	68bb      	ldr	r3, [r7, #8]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d002      	beq.n	8002414 <HAL_UART_Transmit+0x2c>
 800240e:	88fb      	ldrh	r3, [r7, #6]
 8002410:	2b00      	cmp	r3, #0
 8002412:	d101      	bne.n	8002418 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002414:	2301      	movs	r3, #1
 8002416:	e06e      	b.n	80024f6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002418:	68fb      	ldr	r3, [r7, #12]
 800241a:	2200      	movs	r2, #0
 800241c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800241e:	68fb      	ldr	r3, [r7, #12]
 8002420:	2221      	movs	r2, #33	@ 0x21
 8002422:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002426:	f7fe fc6f 	bl	8000d08 <HAL_GetTick>
 800242a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800242c:	68fb      	ldr	r3, [r7, #12]
 800242e:	88fa      	ldrh	r2, [r7, #6]
 8002430:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002432:	68fb      	ldr	r3, [r7, #12]
 8002434:	88fa      	ldrh	r2, [r7, #6]
 8002436:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	689b      	ldr	r3, [r3, #8]
 800243c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002440:	d108      	bne.n	8002454 <HAL_UART_Transmit+0x6c>
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	691b      	ldr	r3, [r3, #16]
 8002446:	2b00      	cmp	r3, #0
 8002448:	d104      	bne.n	8002454 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800244a:	2300      	movs	r3, #0
 800244c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800244e:	68bb      	ldr	r3, [r7, #8]
 8002450:	61bb      	str	r3, [r7, #24]
 8002452:	e003      	b.n	800245c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002454:	68bb      	ldr	r3, [r7, #8]
 8002456:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002458:	2300      	movs	r3, #0
 800245a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800245c:	e02e      	b.n	80024bc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800245e:	683b      	ldr	r3, [r7, #0]
 8002460:	9300      	str	r3, [sp, #0]
 8002462:	697b      	ldr	r3, [r7, #20]
 8002464:	2200      	movs	r2, #0
 8002466:	2180      	movs	r1, #128	@ 0x80
 8002468:	68f8      	ldr	r0, [r7, #12]
 800246a:	f000 f848 	bl	80024fe <UART_WaitOnFlagUntilTimeout>
 800246e:	4603      	mov	r3, r0
 8002470:	2b00      	cmp	r3, #0
 8002472:	d005      	beq.n	8002480 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	2220      	movs	r2, #32
 8002478:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800247c:	2303      	movs	r3, #3
 800247e:	e03a      	b.n	80024f6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002480:	69fb      	ldr	r3, [r7, #28]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d10b      	bne.n	800249e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002486:	69bb      	ldr	r3, [r7, #24]
 8002488:	881b      	ldrh	r3, [r3, #0]
 800248a:	461a      	mov	r2, r3
 800248c:	68fb      	ldr	r3, [r7, #12]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002494:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002496:	69bb      	ldr	r3, [r7, #24]
 8002498:	3302      	adds	r3, #2
 800249a:	61bb      	str	r3, [r7, #24]
 800249c:	e007      	b.n	80024ae <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800249e:	69fb      	ldr	r3, [r7, #28]
 80024a0:	781a      	ldrb	r2, [r3, #0]
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80024a8:	69fb      	ldr	r3, [r7, #28]
 80024aa:	3301      	adds	r3, #1
 80024ac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80024b2:	b29b      	uxth	r3, r3
 80024b4:	3b01      	subs	r3, #1
 80024b6:	b29a      	uxth	r2, r3
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80024bc:	68fb      	ldr	r3, [r7, #12]
 80024be:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80024c0:	b29b      	uxth	r3, r3
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d1cb      	bne.n	800245e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	9300      	str	r3, [sp, #0]
 80024ca:	697b      	ldr	r3, [r7, #20]
 80024cc:	2200      	movs	r2, #0
 80024ce:	2140      	movs	r1, #64	@ 0x40
 80024d0:	68f8      	ldr	r0, [r7, #12]
 80024d2:	f000 f814 	bl	80024fe <UART_WaitOnFlagUntilTimeout>
 80024d6:	4603      	mov	r3, r0
 80024d8:	2b00      	cmp	r3, #0
 80024da:	d005      	beq.n	80024e8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	2220      	movs	r2, #32
 80024e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80024e4:	2303      	movs	r3, #3
 80024e6:	e006      	b.n	80024f6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	2220      	movs	r2, #32
 80024ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80024f0:	2300      	movs	r3, #0
 80024f2:	e000      	b.n	80024f6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80024f4:	2302      	movs	r3, #2
  }
}
 80024f6:	4618      	mov	r0, r3
 80024f8:	3720      	adds	r7, #32
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}

080024fe <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80024fe:	b580      	push	{r7, lr}
 8002500:	b086      	sub	sp, #24
 8002502:	af00      	add	r7, sp, #0
 8002504:	60f8      	str	r0, [r7, #12]
 8002506:	60b9      	str	r1, [r7, #8]
 8002508:	603b      	str	r3, [r7, #0]
 800250a:	4613      	mov	r3, r2
 800250c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800250e:	e03b      	b.n	8002588 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002510:	6a3b      	ldr	r3, [r7, #32]
 8002512:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002516:	d037      	beq.n	8002588 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002518:	f7fe fbf6 	bl	8000d08 <HAL_GetTick>
 800251c:	4602      	mov	r2, r0
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	1ad3      	subs	r3, r2, r3
 8002522:	6a3a      	ldr	r2, [r7, #32]
 8002524:	429a      	cmp	r2, r3
 8002526:	d302      	bcc.n	800252e <UART_WaitOnFlagUntilTimeout+0x30>
 8002528:	6a3b      	ldr	r3, [r7, #32]
 800252a:	2b00      	cmp	r3, #0
 800252c:	d101      	bne.n	8002532 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800252e:	2303      	movs	r3, #3
 8002530:	e03a      	b.n	80025a8 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	68db      	ldr	r3, [r3, #12]
 8002538:	f003 0304 	and.w	r3, r3, #4
 800253c:	2b00      	cmp	r3, #0
 800253e:	d023      	beq.n	8002588 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002540:	68bb      	ldr	r3, [r7, #8]
 8002542:	2b80      	cmp	r3, #128	@ 0x80
 8002544:	d020      	beq.n	8002588 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002546:	68bb      	ldr	r3, [r7, #8]
 8002548:	2b40      	cmp	r3, #64	@ 0x40
 800254a:	d01d      	beq.n	8002588 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	f003 0308 	and.w	r3, r3, #8
 8002556:	2b08      	cmp	r3, #8
 8002558:	d116      	bne.n	8002588 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 800255a:	2300      	movs	r3, #0
 800255c:	617b      	str	r3, [r7, #20]
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	617b      	str	r3, [r7, #20]
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	685b      	ldr	r3, [r3, #4]
 800256c:	617b      	str	r3, [r7, #20]
 800256e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002570:	68f8      	ldr	r0, [r7, #12]
 8002572:	f000 f81d 	bl	80025b0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	2208      	movs	r2, #8
 800257a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800257c:	68fb      	ldr	r3, [r7, #12]
 800257e:	2200      	movs	r2, #0
 8002580:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002584:	2301      	movs	r3, #1
 8002586:	e00f      	b.n	80025a8 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	681a      	ldr	r2, [r3, #0]
 800258e:	68bb      	ldr	r3, [r7, #8]
 8002590:	4013      	ands	r3, r2
 8002592:	68ba      	ldr	r2, [r7, #8]
 8002594:	429a      	cmp	r2, r3
 8002596:	bf0c      	ite	eq
 8002598:	2301      	moveq	r3, #1
 800259a:	2300      	movne	r3, #0
 800259c:	b2db      	uxtb	r3, r3
 800259e:	461a      	mov	r2, r3
 80025a0:	79fb      	ldrb	r3, [r7, #7]
 80025a2:	429a      	cmp	r2, r3
 80025a4:	d0b4      	beq.n	8002510 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80025a6:	2300      	movs	r3, #0
}
 80025a8:	4618      	mov	r0, r3
 80025aa:	3718      	adds	r7, #24
 80025ac:	46bd      	mov	sp, r7
 80025ae:	bd80      	pop	{r7, pc}

080025b0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80025b0:	b480      	push	{r7}
 80025b2:	b095      	sub	sp, #84	@ 0x54
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	330c      	adds	r3, #12
 80025be:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80025c2:	e853 3f00 	ldrex	r3, [r3]
 80025c6:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80025c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80025ca:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80025ce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	330c      	adds	r3, #12
 80025d6:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80025d8:	643a      	str	r2, [r7, #64]	@ 0x40
 80025da:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025dc:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80025de:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80025e0:	e841 2300 	strex	r3, r2, [r1]
 80025e4:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80025e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d1e5      	bne.n	80025b8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	3314      	adds	r3, #20
 80025f2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80025f4:	6a3b      	ldr	r3, [r7, #32]
 80025f6:	e853 3f00 	ldrex	r3, [r3]
 80025fa:	61fb      	str	r3, [r7, #28]
   return(result);
 80025fc:	69fb      	ldr	r3, [r7, #28]
 80025fe:	f023 0301 	bic.w	r3, r3, #1
 8002602:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	3314      	adds	r3, #20
 800260a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800260c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800260e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002610:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002612:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002614:	e841 2300 	strex	r3, r2, [r1]
 8002618:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800261a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800261c:	2b00      	cmp	r3, #0
 800261e:	d1e5      	bne.n	80025ec <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002624:	2b01      	cmp	r3, #1
 8002626:	d119      	bne.n	800265c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	330c      	adds	r3, #12
 800262e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002630:	68fb      	ldr	r3, [r7, #12]
 8002632:	e853 3f00 	ldrex	r3, [r3]
 8002636:	60bb      	str	r3, [r7, #8]
   return(result);
 8002638:	68bb      	ldr	r3, [r7, #8]
 800263a:	f023 0310 	bic.w	r3, r3, #16
 800263e:	647b      	str	r3, [r7, #68]	@ 0x44
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	330c      	adds	r3, #12
 8002646:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002648:	61ba      	str	r2, [r7, #24]
 800264a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800264c:	6979      	ldr	r1, [r7, #20]
 800264e:	69ba      	ldr	r2, [r7, #24]
 8002650:	e841 2300 	strex	r3, r2, [r1]
 8002654:	613b      	str	r3, [r7, #16]
   return(result);
 8002656:	693b      	ldr	r3, [r7, #16]
 8002658:	2b00      	cmp	r3, #0
 800265a:	d1e5      	bne.n	8002628 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	2220      	movs	r2, #32
 8002660:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2200      	movs	r2, #0
 8002668:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800266a:	bf00      	nop
 800266c:	3754      	adds	r7, #84	@ 0x54
 800266e:	46bd      	mov	sp, r7
 8002670:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002674:	4770      	bx	lr
	...

08002678 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002678:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800267c:	b0c0      	sub	sp, #256	@ 0x100
 800267e:	af00      	add	r7, sp, #0
 8002680:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002684:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	691b      	ldr	r3, [r3, #16]
 800268c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002690:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002694:	68d9      	ldr	r1, [r3, #12]
 8002696:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800269a:	681a      	ldr	r2, [r3, #0]
 800269c:	ea40 0301 	orr.w	r3, r0, r1
 80026a0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80026a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026a6:	689a      	ldr	r2, [r3, #8]
 80026a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026ac:	691b      	ldr	r3, [r3, #16]
 80026ae:	431a      	orrs	r2, r3
 80026b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026b4:	695b      	ldr	r3, [r3, #20]
 80026b6:	431a      	orrs	r2, r3
 80026b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026bc:	69db      	ldr	r3, [r3, #28]
 80026be:	4313      	orrs	r3, r2
 80026c0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80026c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026c8:	681b      	ldr	r3, [r3, #0]
 80026ca:	68db      	ldr	r3, [r3, #12]
 80026cc:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80026d0:	f021 010c 	bic.w	r1, r1, #12
 80026d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026d8:	681a      	ldr	r2, [r3, #0]
 80026da:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80026de:	430b      	orrs	r3, r1
 80026e0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80026e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	695b      	ldr	r3, [r3, #20]
 80026ea:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80026ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026f2:	6999      	ldr	r1, [r3, #24]
 80026f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80026f8:	681a      	ldr	r2, [r3, #0]
 80026fa:	ea40 0301 	orr.w	r3, r0, r1
 80026fe:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8002700:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002704:	681a      	ldr	r2, [r3, #0]
 8002706:	4b8f      	ldr	r3, [pc, #572]	@ (8002944 <UART_SetConfig+0x2cc>)
 8002708:	429a      	cmp	r2, r3
 800270a:	d005      	beq.n	8002718 <UART_SetConfig+0xa0>
 800270c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002710:	681a      	ldr	r2, [r3, #0]
 8002712:	4b8d      	ldr	r3, [pc, #564]	@ (8002948 <UART_SetConfig+0x2d0>)
 8002714:	429a      	cmp	r2, r3
 8002716:	d104      	bne.n	8002722 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002718:	f7ff fa14 	bl	8001b44 <HAL_RCC_GetPCLK2Freq>
 800271c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8002720:	e003      	b.n	800272a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8002722:	f7ff f9fb 	bl	8001b1c <HAL_RCC_GetPCLK1Freq>
 8002726:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800272a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800272e:	69db      	ldr	r3, [r3, #28]
 8002730:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002734:	f040 810c 	bne.w	8002950 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8002738:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800273c:	2200      	movs	r2, #0
 800273e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002742:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8002746:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800274a:	4622      	mov	r2, r4
 800274c:	462b      	mov	r3, r5
 800274e:	1891      	adds	r1, r2, r2
 8002750:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002752:	415b      	adcs	r3, r3
 8002754:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002756:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800275a:	4621      	mov	r1, r4
 800275c:	eb12 0801 	adds.w	r8, r2, r1
 8002760:	4629      	mov	r1, r5
 8002762:	eb43 0901 	adc.w	r9, r3, r1
 8002766:	f04f 0200 	mov.w	r2, #0
 800276a:	f04f 0300 	mov.w	r3, #0
 800276e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002772:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002776:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800277a:	4690      	mov	r8, r2
 800277c:	4699      	mov	r9, r3
 800277e:	4623      	mov	r3, r4
 8002780:	eb18 0303 	adds.w	r3, r8, r3
 8002784:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8002788:	462b      	mov	r3, r5
 800278a:	eb49 0303 	adc.w	r3, r9, r3
 800278e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002792:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002796:	685b      	ldr	r3, [r3, #4]
 8002798:	2200      	movs	r2, #0
 800279a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800279e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80027a2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80027a6:	460b      	mov	r3, r1
 80027a8:	18db      	adds	r3, r3, r3
 80027aa:	653b      	str	r3, [r7, #80]	@ 0x50
 80027ac:	4613      	mov	r3, r2
 80027ae:	eb42 0303 	adc.w	r3, r2, r3
 80027b2:	657b      	str	r3, [r7, #84]	@ 0x54
 80027b4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80027b8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80027bc:	f7fd fd58 	bl	8000270 <__aeabi_uldivmod>
 80027c0:	4602      	mov	r2, r0
 80027c2:	460b      	mov	r3, r1
 80027c4:	4b61      	ldr	r3, [pc, #388]	@ (800294c <UART_SetConfig+0x2d4>)
 80027c6:	fba3 2302 	umull	r2, r3, r3, r2
 80027ca:	095b      	lsrs	r3, r3, #5
 80027cc:	011c      	lsls	r4, r3, #4
 80027ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80027d2:	2200      	movs	r2, #0
 80027d4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80027d8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80027dc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80027e0:	4642      	mov	r2, r8
 80027e2:	464b      	mov	r3, r9
 80027e4:	1891      	adds	r1, r2, r2
 80027e6:	64b9      	str	r1, [r7, #72]	@ 0x48
 80027e8:	415b      	adcs	r3, r3
 80027ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80027ec:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80027f0:	4641      	mov	r1, r8
 80027f2:	eb12 0a01 	adds.w	sl, r2, r1
 80027f6:	4649      	mov	r1, r9
 80027f8:	eb43 0b01 	adc.w	fp, r3, r1
 80027fc:	f04f 0200 	mov.w	r2, #0
 8002800:	f04f 0300 	mov.w	r3, #0
 8002804:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002808:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800280c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002810:	4692      	mov	sl, r2
 8002812:	469b      	mov	fp, r3
 8002814:	4643      	mov	r3, r8
 8002816:	eb1a 0303 	adds.w	r3, sl, r3
 800281a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800281e:	464b      	mov	r3, r9
 8002820:	eb4b 0303 	adc.w	r3, fp, r3
 8002824:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002828:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800282c:	685b      	ldr	r3, [r3, #4]
 800282e:	2200      	movs	r2, #0
 8002830:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002834:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002838:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800283c:	460b      	mov	r3, r1
 800283e:	18db      	adds	r3, r3, r3
 8002840:	643b      	str	r3, [r7, #64]	@ 0x40
 8002842:	4613      	mov	r3, r2
 8002844:	eb42 0303 	adc.w	r3, r2, r3
 8002848:	647b      	str	r3, [r7, #68]	@ 0x44
 800284a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800284e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002852:	f7fd fd0d 	bl	8000270 <__aeabi_uldivmod>
 8002856:	4602      	mov	r2, r0
 8002858:	460b      	mov	r3, r1
 800285a:	4611      	mov	r1, r2
 800285c:	4b3b      	ldr	r3, [pc, #236]	@ (800294c <UART_SetConfig+0x2d4>)
 800285e:	fba3 2301 	umull	r2, r3, r3, r1
 8002862:	095b      	lsrs	r3, r3, #5
 8002864:	2264      	movs	r2, #100	@ 0x64
 8002866:	fb02 f303 	mul.w	r3, r2, r3
 800286a:	1acb      	subs	r3, r1, r3
 800286c:	00db      	lsls	r3, r3, #3
 800286e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002872:	4b36      	ldr	r3, [pc, #216]	@ (800294c <UART_SetConfig+0x2d4>)
 8002874:	fba3 2302 	umull	r2, r3, r3, r2
 8002878:	095b      	lsrs	r3, r3, #5
 800287a:	005b      	lsls	r3, r3, #1
 800287c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002880:	441c      	add	r4, r3
 8002882:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002886:	2200      	movs	r2, #0
 8002888:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800288c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002890:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002894:	4642      	mov	r2, r8
 8002896:	464b      	mov	r3, r9
 8002898:	1891      	adds	r1, r2, r2
 800289a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800289c:	415b      	adcs	r3, r3
 800289e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80028a0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80028a4:	4641      	mov	r1, r8
 80028a6:	1851      	adds	r1, r2, r1
 80028a8:	6339      	str	r1, [r7, #48]	@ 0x30
 80028aa:	4649      	mov	r1, r9
 80028ac:	414b      	adcs	r3, r1
 80028ae:	637b      	str	r3, [r7, #52]	@ 0x34
 80028b0:	f04f 0200 	mov.w	r2, #0
 80028b4:	f04f 0300 	mov.w	r3, #0
 80028b8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80028bc:	4659      	mov	r1, fp
 80028be:	00cb      	lsls	r3, r1, #3
 80028c0:	4651      	mov	r1, sl
 80028c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80028c6:	4651      	mov	r1, sl
 80028c8:	00ca      	lsls	r2, r1, #3
 80028ca:	4610      	mov	r0, r2
 80028cc:	4619      	mov	r1, r3
 80028ce:	4603      	mov	r3, r0
 80028d0:	4642      	mov	r2, r8
 80028d2:	189b      	adds	r3, r3, r2
 80028d4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80028d8:	464b      	mov	r3, r9
 80028da:	460a      	mov	r2, r1
 80028dc:	eb42 0303 	adc.w	r3, r2, r3
 80028e0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80028e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028e8:	685b      	ldr	r3, [r3, #4]
 80028ea:	2200      	movs	r2, #0
 80028ec:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80028f0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80028f4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80028f8:	460b      	mov	r3, r1
 80028fa:	18db      	adds	r3, r3, r3
 80028fc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80028fe:	4613      	mov	r3, r2
 8002900:	eb42 0303 	adc.w	r3, r2, r3
 8002904:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002906:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800290a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800290e:	f7fd fcaf 	bl	8000270 <__aeabi_uldivmod>
 8002912:	4602      	mov	r2, r0
 8002914:	460b      	mov	r3, r1
 8002916:	4b0d      	ldr	r3, [pc, #52]	@ (800294c <UART_SetConfig+0x2d4>)
 8002918:	fba3 1302 	umull	r1, r3, r3, r2
 800291c:	095b      	lsrs	r3, r3, #5
 800291e:	2164      	movs	r1, #100	@ 0x64
 8002920:	fb01 f303 	mul.w	r3, r1, r3
 8002924:	1ad3      	subs	r3, r2, r3
 8002926:	00db      	lsls	r3, r3, #3
 8002928:	3332      	adds	r3, #50	@ 0x32
 800292a:	4a08      	ldr	r2, [pc, #32]	@ (800294c <UART_SetConfig+0x2d4>)
 800292c:	fba2 2303 	umull	r2, r3, r2, r3
 8002930:	095b      	lsrs	r3, r3, #5
 8002932:	f003 0207 	and.w	r2, r3, #7
 8002936:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	4422      	add	r2, r4
 800293e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002940:	e106      	b.n	8002b50 <UART_SetConfig+0x4d8>
 8002942:	bf00      	nop
 8002944:	40011000 	.word	0x40011000
 8002948:	40011400 	.word	0x40011400
 800294c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002950:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002954:	2200      	movs	r2, #0
 8002956:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800295a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800295e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002962:	4642      	mov	r2, r8
 8002964:	464b      	mov	r3, r9
 8002966:	1891      	adds	r1, r2, r2
 8002968:	6239      	str	r1, [r7, #32]
 800296a:	415b      	adcs	r3, r3
 800296c:	627b      	str	r3, [r7, #36]	@ 0x24
 800296e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002972:	4641      	mov	r1, r8
 8002974:	1854      	adds	r4, r2, r1
 8002976:	4649      	mov	r1, r9
 8002978:	eb43 0501 	adc.w	r5, r3, r1
 800297c:	f04f 0200 	mov.w	r2, #0
 8002980:	f04f 0300 	mov.w	r3, #0
 8002984:	00eb      	lsls	r3, r5, #3
 8002986:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800298a:	00e2      	lsls	r2, r4, #3
 800298c:	4614      	mov	r4, r2
 800298e:	461d      	mov	r5, r3
 8002990:	4643      	mov	r3, r8
 8002992:	18e3      	adds	r3, r4, r3
 8002994:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002998:	464b      	mov	r3, r9
 800299a:	eb45 0303 	adc.w	r3, r5, r3
 800299e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80029a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80029a6:	685b      	ldr	r3, [r3, #4]
 80029a8:	2200      	movs	r2, #0
 80029aa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80029ae:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80029b2:	f04f 0200 	mov.w	r2, #0
 80029b6:	f04f 0300 	mov.w	r3, #0
 80029ba:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80029be:	4629      	mov	r1, r5
 80029c0:	008b      	lsls	r3, r1, #2
 80029c2:	4621      	mov	r1, r4
 80029c4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80029c8:	4621      	mov	r1, r4
 80029ca:	008a      	lsls	r2, r1, #2
 80029cc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80029d0:	f7fd fc4e 	bl	8000270 <__aeabi_uldivmod>
 80029d4:	4602      	mov	r2, r0
 80029d6:	460b      	mov	r3, r1
 80029d8:	4b60      	ldr	r3, [pc, #384]	@ (8002b5c <UART_SetConfig+0x4e4>)
 80029da:	fba3 2302 	umull	r2, r3, r3, r2
 80029de:	095b      	lsrs	r3, r3, #5
 80029e0:	011c      	lsls	r4, r3, #4
 80029e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80029e6:	2200      	movs	r2, #0
 80029e8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80029ec:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80029f0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80029f4:	4642      	mov	r2, r8
 80029f6:	464b      	mov	r3, r9
 80029f8:	1891      	adds	r1, r2, r2
 80029fa:	61b9      	str	r1, [r7, #24]
 80029fc:	415b      	adcs	r3, r3
 80029fe:	61fb      	str	r3, [r7, #28]
 8002a00:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a04:	4641      	mov	r1, r8
 8002a06:	1851      	adds	r1, r2, r1
 8002a08:	6139      	str	r1, [r7, #16]
 8002a0a:	4649      	mov	r1, r9
 8002a0c:	414b      	adcs	r3, r1
 8002a0e:	617b      	str	r3, [r7, #20]
 8002a10:	f04f 0200 	mov.w	r2, #0
 8002a14:	f04f 0300 	mov.w	r3, #0
 8002a18:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002a1c:	4659      	mov	r1, fp
 8002a1e:	00cb      	lsls	r3, r1, #3
 8002a20:	4651      	mov	r1, sl
 8002a22:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002a26:	4651      	mov	r1, sl
 8002a28:	00ca      	lsls	r2, r1, #3
 8002a2a:	4610      	mov	r0, r2
 8002a2c:	4619      	mov	r1, r3
 8002a2e:	4603      	mov	r3, r0
 8002a30:	4642      	mov	r2, r8
 8002a32:	189b      	adds	r3, r3, r2
 8002a34:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002a38:	464b      	mov	r3, r9
 8002a3a:	460a      	mov	r2, r1
 8002a3c:	eb42 0303 	adc.w	r3, r2, r3
 8002a40:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002a44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a48:	685b      	ldr	r3, [r3, #4]
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002a4e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002a50:	f04f 0200 	mov.w	r2, #0
 8002a54:	f04f 0300 	mov.w	r3, #0
 8002a58:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002a5c:	4649      	mov	r1, r9
 8002a5e:	008b      	lsls	r3, r1, #2
 8002a60:	4641      	mov	r1, r8
 8002a62:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002a66:	4641      	mov	r1, r8
 8002a68:	008a      	lsls	r2, r1, #2
 8002a6a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002a6e:	f7fd fbff 	bl	8000270 <__aeabi_uldivmod>
 8002a72:	4602      	mov	r2, r0
 8002a74:	460b      	mov	r3, r1
 8002a76:	4611      	mov	r1, r2
 8002a78:	4b38      	ldr	r3, [pc, #224]	@ (8002b5c <UART_SetConfig+0x4e4>)
 8002a7a:	fba3 2301 	umull	r2, r3, r3, r1
 8002a7e:	095b      	lsrs	r3, r3, #5
 8002a80:	2264      	movs	r2, #100	@ 0x64
 8002a82:	fb02 f303 	mul.w	r3, r2, r3
 8002a86:	1acb      	subs	r3, r1, r3
 8002a88:	011b      	lsls	r3, r3, #4
 8002a8a:	3332      	adds	r3, #50	@ 0x32
 8002a8c:	4a33      	ldr	r2, [pc, #204]	@ (8002b5c <UART_SetConfig+0x4e4>)
 8002a8e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a92:	095b      	lsrs	r3, r3, #5
 8002a94:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002a98:	441c      	add	r4, r3
 8002a9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	673b      	str	r3, [r7, #112]	@ 0x70
 8002aa2:	677a      	str	r2, [r7, #116]	@ 0x74
 8002aa4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002aa8:	4642      	mov	r2, r8
 8002aaa:	464b      	mov	r3, r9
 8002aac:	1891      	adds	r1, r2, r2
 8002aae:	60b9      	str	r1, [r7, #8]
 8002ab0:	415b      	adcs	r3, r3
 8002ab2:	60fb      	str	r3, [r7, #12]
 8002ab4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002ab8:	4641      	mov	r1, r8
 8002aba:	1851      	adds	r1, r2, r1
 8002abc:	6039      	str	r1, [r7, #0]
 8002abe:	4649      	mov	r1, r9
 8002ac0:	414b      	adcs	r3, r1
 8002ac2:	607b      	str	r3, [r7, #4]
 8002ac4:	f04f 0200 	mov.w	r2, #0
 8002ac8:	f04f 0300 	mov.w	r3, #0
 8002acc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002ad0:	4659      	mov	r1, fp
 8002ad2:	00cb      	lsls	r3, r1, #3
 8002ad4:	4651      	mov	r1, sl
 8002ad6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002ada:	4651      	mov	r1, sl
 8002adc:	00ca      	lsls	r2, r1, #3
 8002ade:	4610      	mov	r0, r2
 8002ae0:	4619      	mov	r1, r3
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	4642      	mov	r2, r8
 8002ae6:	189b      	adds	r3, r3, r2
 8002ae8:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002aea:	464b      	mov	r3, r9
 8002aec:	460a      	mov	r2, r1
 8002aee:	eb42 0303 	adc.w	r3, r2, r3
 8002af2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002af4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002af8:	685b      	ldr	r3, [r3, #4]
 8002afa:	2200      	movs	r2, #0
 8002afc:	663b      	str	r3, [r7, #96]	@ 0x60
 8002afe:	667a      	str	r2, [r7, #100]	@ 0x64
 8002b00:	f04f 0200 	mov.w	r2, #0
 8002b04:	f04f 0300 	mov.w	r3, #0
 8002b08:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002b0c:	4649      	mov	r1, r9
 8002b0e:	008b      	lsls	r3, r1, #2
 8002b10:	4641      	mov	r1, r8
 8002b12:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002b16:	4641      	mov	r1, r8
 8002b18:	008a      	lsls	r2, r1, #2
 8002b1a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002b1e:	f7fd fba7 	bl	8000270 <__aeabi_uldivmod>
 8002b22:	4602      	mov	r2, r0
 8002b24:	460b      	mov	r3, r1
 8002b26:	4b0d      	ldr	r3, [pc, #52]	@ (8002b5c <UART_SetConfig+0x4e4>)
 8002b28:	fba3 1302 	umull	r1, r3, r3, r2
 8002b2c:	095b      	lsrs	r3, r3, #5
 8002b2e:	2164      	movs	r1, #100	@ 0x64
 8002b30:	fb01 f303 	mul.w	r3, r1, r3
 8002b34:	1ad3      	subs	r3, r2, r3
 8002b36:	011b      	lsls	r3, r3, #4
 8002b38:	3332      	adds	r3, #50	@ 0x32
 8002b3a:	4a08      	ldr	r2, [pc, #32]	@ (8002b5c <UART_SetConfig+0x4e4>)
 8002b3c:	fba2 2303 	umull	r2, r3, r2, r3
 8002b40:	095b      	lsrs	r3, r3, #5
 8002b42:	f003 020f 	and.w	r2, r3, #15
 8002b46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4422      	add	r2, r4
 8002b4e:	609a      	str	r2, [r3, #8]
}
 8002b50:	bf00      	nop
 8002b52:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002b56:	46bd      	mov	sp, r7
 8002b58:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002b5c:	51eb851f 	.word	0x51eb851f

08002b60 <std>:
 8002b60:	2300      	movs	r3, #0
 8002b62:	b510      	push	{r4, lr}
 8002b64:	4604      	mov	r4, r0
 8002b66:	e9c0 3300 	strd	r3, r3, [r0]
 8002b6a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002b6e:	6083      	str	r3, [r0, #8]
 8002b70:	8181      	strh	r1, [r0, #12]
 8002b72:	6643      	str	r3, [r0, #100]	@ 0x64
 8002b74:	81c2      	strh	r2, [r0, #14]
 8002b76:	6183      	str	r3, [r0, #24]
 8002b78:	4619      	mov	r1, r3
 8002b7a:	2208      	movs	r2, #8
 8002b7c:	305c      	adds	r0, #92	@ 0x5c
 8002b7e:	f000 f906 	bl	8002d8e <memset>
 8002b82:	4b0d      	ldr	r3, [pc, #52]	@ (8002bb8 <std+0x58>)
 8002b84:	6263      	str	r3, [r4, #36]	@ 0x24
 8002b86:	4b0d      	ldr	r3, [pc, #52]	@ (8002bbc <std+0x5c>)
 8002b88:	62a3      	str	r3, [r4, #40]	@ 0x28
 8002b8a:	4b0d      	ldr	r3, [pc, #52]	@ (8002bc0 <std+0x60>)
 8002b8c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002b8e:	4b0d      	ldr	r3, [pc, #52]	@ (8002bc4 <std+0x64>)
 8002b90:	6323      	str	r3, [r4, #48]	@ 0x30
 8002b92:	4b0d      	ldr	r3, [pc, #52]	@ (8002bc8 <std+0x68>)
 8002b94:	6224      	str	r4, [r4, #32]
 8002b96:	429c      	cmp	r4, r3
 8002b98:	d006      	beq.n	8002ba8 <std+0x48>
 8002b9a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8002b9e:	4294      	cmp	r4, r2
 8002ba0:	d002      	beq.n	8002ba8 <std+0x48>
 8002ba2:	33d0      	adds	r3, #208	@ 0xd0
 8002ba4:	429c      	cmp	r4, r3
 8002ba6:	d105      	bne.n	8002bb4 <std+0x54>
 8002ba8:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8002bac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002bb0:	f000 b966 	b.w	8002e80 <__retarget_lock_init_recursive>
 8002bb4:	bd10      	pop	{r4, pc}
 8002bb6:	bf00      	nop
 8002bb8:	08002d09 	.word	0x08002d09
 8002bbc:	08002d2b 	.word	0x08002d2b
 8002bc0:	08002d63 	.word	0x08002d63
 8002bc4:	08002d87 	.word	0x08002d87
 8002bc8:	200000f8 	.word	0x200000f8

08002bcc <stdio_exit_handler>:
 8002bcc:	4a02      	ldr	r2, [pc, #8]	@ (8002bd8 <stdio_exit_handler+0xc>)
 8002bce:	4903      	ldr	r1, [pc, #12]	@ (8002bdc <stdio_exit_handler+0x10>)
 8002bd0:	4803      	ldr	r0, [pc, #12]	@ (8002be0 <stdio_exit_handler+0x14>)
 8002bd2:	f000 b869 	b.w	8002ca8 <_fwalk_sglue>
 8002bd6:	bf00      	nop
 8002bd8:	2000000c 	.word	0x2000000c
 8002bdc:	08003721 	.word	0x08003721
 8002be0:	2000001c 	.word	0x2000001c

08002be4 <cleanup_stdio>:
 8002be4:	6841      	ldr	r1, [r0, #4]
 8002be6:	4b0c      	ldr	r3, [pc, #48]	@ (8002c18 <cleanup_stdio+0x34>)
 8002be8:	4299      	cmp	r1, r3
 8002bea:	b510      	push	{r4, lr}
 8002bec:	4604      	mov	r4, r0
 8002bee:	d001      	beq.n	8002bf4 <cleanup_stdio+0x10>
 8002bf0:	f000 fd96 	bl	8003720 <_fflush_r>
 8002bf4:	68a1      	ldr	r1, [r4, #8]
 8002bf6:	4b09      	ldr	r3, [pc, #36]	@ (8002c1c <cleanup_stdio+0x38>)
 8002bf8:	4299      	cmp	r1, r3
 8002bfa:	d002      	beq.n	8002c02 <cleanup_stdio+0x1e>
 8002bfc:	4620      	mov	r0, r4
 8002bfe:	f000 fd8f 	bl	8003720 <_fflush_r>
 8002c02:	68e1      	ldr	r1, [r4, #12]
 8002c04:	4b06      	ldr	r3, [pc, #24]	@ (8002c20 <cleanup_stdio+0x3c>)
 8002c06:	4299      	cmp	r1, r3
 8002c08:	d004      	beq.n	8002c14 <cleanup_stdio+0x30>
 8002c0a:	4620      	mov	r0, r4
 8002c0c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002c10:	f000 bd86 	b.w	8003720 <_fflush_r>
 8002c14:	bd10      	pop	{r4, pc}
 8002c16:	bf00      	nop
 8002c18:	200000f8 	.word	0x200000f8
 8002c1c:	20000160 	.word	0x20000160
 8002c20:	200001c8 	.word	0x200001c8

08002c24 <global_stdio_init.part.0>:
 8002c24:	b510      	push	{r4, lr}
 8002c26:	4b0b      	ldr	r3, [pc, #44]	@ (8002c54 <global_stdio_init.part.0+0x30>)
 8002c28:	4c0b      	ldr	r4, [pc, #44]	@ (8002c58 <global_stdio_init.part.0+0x34>)
 8002c2a:	4a0c      	ldr	r2, [pc, #48]	@ (8002c5c <global_stdio_init.part.0+0x38>)
 8002c2c:	601a      	str	r2, [r3, #0]
 8002c2e:	4620      	mov	r0, r4
 8002c30:	2200      	movs	r2, #0
 8002c32:	2104      	movs	r1, #4
 8002c34:	f7ff ff94 	bl	8002b60 <std>
 8002c38:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8002c3c:	2201      	movs	r2, #1
 8002c3e:	2109      	movs	r1, #9
 8002c40:	f7ff ff8e 	bl	8002b60 <std>
 8002c44:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8002c48:	2202      	movs	r2, #2
 8002c4a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002c4e:	2112      	movs	r1, #18
 8002c50:	f7ff bf86 	b.w	8002b60 <std>
 8002c54:	20000230 	.word	0x20000230
 8002c58:	200000f8 	.word	0x200000f8
 8002c5c:	08002bcd 	.word	0x08002bcd

08002c60 <__sfp_lock_acquire>:
 8002c60:	4801      	ldr	r0, [pc, #4]	@ (8002c68 <__sfp_lock_acquire+0x8>)
 8002c62:	f000 b90e 	b.w	8002e82 <__retarget_lock_acquire_recursive>
 8002c66:	bf00      	nop
 8002c68:	20000239 	.word	0x20000239

08002c6c <__sfp_lock_release>:
 8002c6c:	4801      	ldr	r0, [pc, #4]	@ (8002c74 <__sfp_lock_release+0x8>)
 8002c6e:	f000 b909 	b.w	8002e84 <__retarget_lock_release_recursive>
 8002c72:	bf00      	nop
 8002c74:	20000239 	.word	0x20000239

08002c78 <__sinit>:
 8002c78:	b510      	push	{r4, lr}
 8002c7a:	4604      	mov	r4, r0
 8002c7c:	f7ff fff0 	bl	8002c60 <__sfp_lock_acquire>
 8002c80:	6a23      	ldr	r3, [r4, #32]
 8002c82:	b11b      	cbz	r3, 8002c8c <__sinit+0x14>
 8002c84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002c88:	f7ff bff0 	b.w	8002c6c <__sfp_lock_release>
 8002c8c:	4b04      	ldr	r3, [pc, #16]	@ (8002ca0 <__sinit+0x28>)
 8002c8e:	6223      	str	r3, [r4, #32]
 8002c90:	4b04      	ldr	r3, [pc, #16]	@ (8002ca4 <__sinit+0x2c>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d1f5      	bne.n	8002c84 <__sinit+0xc>
 8002c98:	f7ff ffc4 	bl	8002c24 <global_stdio_init.part.0>
 8002c9c:	e7f2      	b.n	8002c84 <__sinit+0xc>
 8002c9e:	bf00      	nop
 8002ca0:	08002be5 	.word	0x08002be5
 8002ca4:	20000230 	.word	0x20000230

08002ca8 <_fwalk_sglue>:
 8002ca8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002cac:	4607      	mov	r7, r0
 8002cae:	4688      	mov	r8, r1
 8002cb0:	4614      	mov	r4, r2
 8002cb2:	2600      	movs	r6, #0
 8002cb4:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002cb8:	f1b9 0901 	subs.w	r9, r9, #1
 8002cbc:	d505      	bpl.n	8002cca <_fwalk_sglue+0x22>
 8002cbe:	6824      	ldr	r4, [r4, #0]
 8002cc0:	2c00      	cmp	r4, #0
 8002cc2:	d1f7      	bne.n	8002cb4 <_fwalk_sglue+0xc>
 8002cc4:	4630      	mov	r0, r6
 8002cc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002cca:	89ab      	ldrh	r3, [r5, #12]
 8002ccc:	2b01      	cmp	r3, #1
 8002cce:	d907      	bls.n	8002ce0 <_fwalk_sglue+0x38>
 8002cd0:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002cd4:	3301      	adds	r3, #1
 8002cd6:	d003      	beq.n	8002ce0 <_fwalk_sglue+0x38>
 8002cd8:	4629      	mov	r1, r5
 8002cda:	4638      	mov	r0, r7
 8002cdc:	47c0      	blx	r8
 8002cde:	4306      	orrs	r6, r0
 8002ce0:	3568      	adds	r5, #104	@ 0x68
 8002ce2:	e7e9      	b.n	8002cb8 <_fwalk_sglue+0x10>

08002ce4 <iprintf>:
 8002ce4:	b40f      	push	{r0, r1, r2, r3}
 8002ce6:	b507      	push	{r0, r1, r2, lr}
 8002ce8:	4906      	ldr	r1, [pc, #24]	@ (8002d04 <iprintf+0x20>)
 8002cea:	ab04      	add	r3, sp, #16
 8002cec:	6808      	ldr	r0, [r1, #0]
 8002cee:	f853 2b04 	ldr.w	r2, [r3], #4
 8002cf2:	6881      	ldr	r1, [r0, #8]
 8002cf4:	9301      	str	r3, [sp, #4]
 8002cf6:	f000 f9e9 	bl	80030cc <_vfiprintf_r>
 8002cfa:	b003      	add	sp, #12
 8002cfc:	f85d eb04 	ldr.w	lr, [sp], #4
 8002d00:	b004      	add	sp, #16
 8002d02:	4770      	bx	lr
 8002d04:	20000018 	.word	0x20000018

08002d08 <__sread>:
 8002d08:	b510      	push	{r4, lr}
 8002d0a:	460c      	mov	r4, r1
 8002d0c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002d10:	f000 f868 	bl	8002de4 <_read_r>
 8002d14:	2800      	cmp	r0, #0
 8002d16:	bfab      	itete	ge
 8002d18:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8002d1a:	89a3      	ldrhlt	r3, [r4, #12]
 8002d1c:	181b      	addge	r3, r3, r0
 8002d1e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8002d22:	bfac      	ite	ge
 8002d24:	6563      	strge	r3, [r4, #84]	@ 0x54
 8002d26:	81a3      	strhlt	r3, [r4, #12]
 8002d28:	bd10      	pop	{r4, pc}

08002d2a <__swrite>:
 8002d2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002d2e:	461f      	mov	r7, r3
 8002d30:	898b      	ldrh	r3, [r1, #12]
 8002d32:	05db      	lsls	r3, r3, #23
 8002d34:	4605      	mov	r5, r0
 8002d36:	460c      	mov	r4, r1
 8002d38:	4616      	mov	r6, r2
 8002d3a:	d505      	bpl.n	8002d48 <__swrite+0x1e>
 8002d3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002d40:	2302      	movs	r3, #2
 8002d42:	2200      	movs	r2, #0
 8002d44:	f000 f83c 	bl	8002dc0 <_lseek_r>
 8002d48:	89a3      	ldrh	r3, [r4, #12]
 8002d4a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002d4e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002d52:	81a3      	strh	r3, [r4, #12]
 8002d54:	4632      	mov	r2, r6
 8002d56:	463b      	mov	r3, r7
 8002d58:	4628      	mov	r0, r5
 8002d5a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002d5e:	f000 b853 	b.w	8002e08 <_write_r>

08002d62 <__sseek>:
 8002d62:	b510      	push	{r4, lr}
 8002d64:	460c      	mov	r4, r1
 8002d66:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002d6a:	f000 f829 	bl	8002dc0 <_lseek_r>
 8002d6e:	1c43      	adds	r3, r0, #1
 8002d70:	89a3      	ldrh	r3, [r4, #12]
 8002d72:	bf15      	itete	ne
 8002d74:	6560      	strne	r0, [r4, #84]	@ 0x54
 8002d76:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8002d7a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8002d7e:	81a3      	strheq	r3, [r4, #12]
 8002d80:	bf18      	it	ne
 8002d82:	81a3      	strhne	r3, [r4, #12]
 8002d84:	bd10      	pop	{r4, pc}

08002d86 <__sclose>:
 8002d86:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002d8a:	f000 b809 	b.w	8002da0 <_close_r>

08002d8e <memset>:
 8002d8e:	4402      	add	r2, r0
 8002d90:	4603      	mov	r3, r0
 8002d92:	4293      	cmp	r3, r2
 8002d94:	d100      	bne.n	8002d98 <memset+0xa>
 8002d96:	4770      	bx	lr
 8002d98:	f803 1b01 	strb.w	r1, [r3], #1
 8002d9c:	e7f9      	b.n	8002d92 <memset+0x4>
	...

08002da0 <_close_r>:
 8002da0:	b538      	push	{r3, r4, r5, lr}
 8002da2:	4d06      	ldr	r5, [pc, #24]	@ (8002dbc <_close_r+0x1c>)
 8002da4:	2300      	movs	r3, #0
 8002da6:	4604      	mov	r4, r0
 8002da8:	4608      	mov	r0, r1
 8002daa:	602b      	str	r3, [r5, #0]
 8002dac:	f7fd fea0 	bl	8000af0 <_close>
 8002db0:	1c43      	adds	r3, r0, #1
 8002db2:	d102      	bne.n	8002dba <_close_r+0x1a>
 8002db4:	682b      	ldr	r3, [r5, #0]
 8002db6:	b103      	cbz	r3, 8002dba <_close_r+0x1a>
 8002db8:	6023      	str	r3, [r4, #0]
 8002dba:	bd38      	pop	{r3, r4, r5, pc}
 8002dbc:	20000234 	.word	0x20000234

08002dc0 <_lseek_r>:
 8002dc0:	b538      	push	{r3, r4, r5, lr}
 8002dc2:	4d07      	ldr	r5, [pc, #28]	@ (8002de0 <_lseek_r+0x20>)
 8002dc4:	4604      	mov	r4, r0
 8002dc6:	4608      	mov	r0, r1
 8002dc8:	4611      	mov	r1, r2
 8002dca:	2200      	movs	r2, #0
 8002dcc:	602a      	str	r2, [r5, #0]
 8002dce:	461a      	mov	r2, r3
 8002dd0:	f7fd feb5 	bl	8000b3e <_lseek>
 8002dd4:	1c43      	adds	r3, r0, #1
 8002dd6:	d102      	bne.n	8002dde <_lseek_r+0x1e>
 8002dd8:	682b      	ldr	r3, [r5, #0]
 8002dda:	b103      	cbz	r3, 8002dde <_lseek_r+0x1e>
 8002ddc:	6023      	str	r3, [r4, #0]
 8002dde:	bd38      	pop	{r3, r4, r5, pc}
 8002de0:	20000234 	.word	0x20000234

08002de4 <_read_r>:
 8002de4:	b538      	push	{r3, r4, r5, lr}
 8002de6:	4d07      	ldr	r5, [pc, #28]	@ (8002e04 <_read_r+0x20>)
 8002de8:	4604      	mov	r4, r0
 8002dea:	4608      	mov	r0, r1
 8002dec:	4611      	mov	r1, r2
 8002dee:	2200      	movs	r2, #0
 8002df0:	602a      	str	r2, [r5, #0]
 8002df2:	461a      	mov	r2, r3
 8002df4:	f7fd fe43 	bl	8000a7e <_read>
 8002df8:	1c43      	adds	r3, r0, #1
 8002dfa:	d102      	bne.n	8002e02 <_read_r+0x1e>
 8002dfc:	682b      	ldr	r3, [r5, #0]
 8002dfe:	b103      	cbz	r3, 8002e02 <_read_r+0x1e>
 8002e00:	6023      	str	r3, [r4, #0]
 8002e02:	bd38      	pop	{r3, r4, r5, pc}
 8002e04:	20000234 	.word	0x20000234

08002e08 <_write_r>:
 8002e08:	b538      	push	{r3, r4, r5, lr}
 8002e0a:	4d07      	ldr	r5, [pc, #28]	@ (8002e28 <_write_r+0x20>)
 8002e0c:	4604      	mov	r4, r0
 8002e0e:	4608      	mov	r0, r1
 8002e10:	4611      	mov	r1, r2
 8002e12:	2200      	movs	r2, #0
 8002e14:	602a      	str	r2, [r5, #0]
 8002e16:	461a      	mov	r2, r3
 8002e18:	f7fd fe4e 	bl	8000ab8 <_write>
 8002e1c:	1c43      	adds	r3, r0, #1
 8002e1e:	d102      	bne.n	8002e26 <_write_r+0x1e>
 8002e20:	682b      	ldr	r3, [r5, #0]
 8002e22:	b103      	cbz	r3, 8002e26 <_write_r+0x1e>
 8002e24:	6023      	str	r3, [r4, #0]
 8002e26:	bd38      	pop	{r3, r4, r5, pc}
 8002e28:	20000234 	.word	0x20000234

08002e2c <__errno>:
 8002e2c:	4b01      	ldr	r3, [pc, #4]	@ (8002e34 <__errno+0x8>)
 8002e2e:	6818      	ldr	r0, [r3, #0]
 8002e30:	4770      	bx	lr
 8002e32:	bf00      	nop
 8002e34:	20000018 	.word	0x20000018

08002e38 <__libc_init_array>:
 8002e38:	b570      	push	{r4, r5, r6, lr}
 8002e3a:	4d0d      	ldr	r5, [pc, #52]	@ (8002e70 <__libc_init_array+0x38>)
 8002e3c:	4c0d      	ldr	r4, [pc, #52]	@ (8002e74 <__libc_init_array+0x3c>)
 8002e3e:	1b64      	subs	r4, r4, r5
 8002e40:	10a4      	asrs	r4, r4, #2
 8002e42:	2600      	movs	r6, #0
 8002e44:	42a6      	cmp	r6, r4
 8002e46:	d109      	bne.n	8002e5c <__libc_init_array+0x24>
 8002e48:	4d0b      	ldr	r5, [pc, #44]	@ (8002e78 <__libc_init_array+0x40>)
 8002e4a:	4c0c      	ldr	r4, [pc, #48]	@ (8002e7c <__libc_init_array+0x44>)
 8002e4c:	f000 fdb8 	bl	80039c0 <_init>
 8002e50:	1b64      	subs	r4, r4, r5
 8002e52:	10a4      	asrs	r4, r4, #2
 8002e54:	2600      	movs	r6, #0
 8002e56:	42a6      	cmp	r6, r4
 8002e58:	d105      	bne.n	8002e66 <__libc_init_array+0x2e>
 8002e5a:	bd70      	pop	{r4, r5, r6, pc}
 8002e5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e60:	4798      	blx	r3
 8002e62:	3601      	adds	r6, #1
 8002e64:	e7ee      	b.n	8002e44 <__libc_init_array+0xc>
 8002e66:	f855 3b04 	ldr.w	r3, [r5], #4
 8002e6a:	4798      	blx	r3
 8002e6c:	3601      	adds	r6, #1
 8002e6e:	e7f2      	b.n	8002e56 <__libc_init_array+0x1e>
 8002e70:	08003a54 	.word	0x08003a54
 8002e74:	08003a54 	.word	0x08003a54
 8002e78:	08003a54 	.word	0x08003a54
 8002e7c:	08003a58 	.word	0x08003a58

08002e80 <__retarget_lock_init_recursive>:
 8002e80:	4770      	bx	lr

08002e82 <__retarget_lock_acquire_recursive>:
 8002e82:	4770      	bx	lr

08002e84 <__retarget_lock_release_recursive>:
 8002e84:	4770      	bx	lr
	...

08002e88 <_free_r>:
 8002e88:	b538      	push	{r3, r4, r5, lr}
 8002e8a:	4605      	mov	r5, r0
 8002e8c:	2900      	cmp	r1, #0
 8002e8e:	d041      	beq.n	8002f14 <_free_r+0x8c>
 8002e90:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002e94:	1f0c      	subs	r4, r1, #4
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	bfb8      	it	lt
 8002e9a:	18e4      	addlt	r4, r4, r3
 8002e9c:	f000 f8e0 	bl	8003060 <__malloc_lock>
 8002ea0:	4a1d      	ldr	r2, [pc, #116]	@ (8002f18 <_free_r+0x90>)
 8002ea2:	6813      	ldr	r3, [r2, #0]
 8002ea4:	b933      	cbnz	r3, 8002eb4 <_free_r+0x2c>
 8002ea6:	6063      	str	r3, [r4, #4]
 8002ea8:	6014      	str	r4, [r2, #0]
 8002eaa:	4628      	mov	r0, r5
 8002eac:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002eb0:	f000 b8dc 	b.w	800306c <__malloc_unlock>
 8002eb4:	42a3      	cmp	r3, r4
 8002eb6:	d908      	bls.n	8002eca <_free_r+0x42>
 8002eb8:	6820      	ldr	r0, [r4, #0]
 8002eba:	1821      	adds	r1, r4, r0
 8002ebc:	428b      	cmp	r3, r1
 8002ebe:	bf01      	itttt	eq
 8002ec0:	6819      	ldreq	r1, [r3, #0]
 8002ec2:	685b      	ldreq	r3, [r3, #4]
 8002ec4:	1809      	addeq	r1, r1, r0
 8002ec6:	6021      	streq	r1, [r4, #0]
 8002ec8:	e7ed      	b.n	8002ea6 <_free_r+0x1e>
 8002eca:	461a      	mov	r2, r3
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	b10b      	cbz	r3, 8002ed4 <_free_r+0x4c>
 8002ed0:	42a3      	cmp	r3, r4
 8002ed2:	d9fa      	bls.n	8002eca <_free_r+0x42>
 8002ed4:	6811      	ldr	r1, [r2, #0]
 8002ed6:	1850      	adds	r0, r2, r1
 8002ed8:	42a0      	cmp	r0, r4
 8002eda:	d10b      	bne.n	8002ef4 <_free_r+0x6c>
 8002edc:	6820      	ldr	r0, [r4, #0]
 8002ede:	4401      	add	r1, r0
 8002ee0:	1850      	adds	r0, r2, r1
 8002ee2:	4283      	cmp	r3, r0
 8002ee4:	6011      	str	r1, [r2, #0]
 8002ee6:	d1e0      	bne.n	8002eaa <_free_r+0x22>
 8002ee8:	6818      	ldr	r0, [r3, #0]
 8002eea:	685b      	ldr	r3, [r3, #4]
 8002eec:	6053      	str	r3, [r2, #4]
 8002eee:	4408      	add	r0, r1
 8002ef0:	6010      	str	r0, [r2, #0]
 8002ef2:	e7da      	b.n	8002eaa <_free_r+0x22>
 8002ef4:	d902      	bls.n	8002efc <_free_r+0x74>
 8002ef6:	230c      	movs	r3, #12
 8002ef8:	602b      	str	r3, [r5, #0]
 8002efa:	e7d6      	b.n	8002eaa <_free_r+0x22>
 8002efc:	6820      	ldr	r0, [r4, #0]
 8002efe:	1821      	adds	r1, r4, r0
 8002f00:	428b      	cmp	r3, r1
 8002f02:	bf04      	itt	eq
 8002f04:	6819      	ldreq	r1, [r3, #0]
 8002f06:	685b      	ldreq	r3, [r3, #4]
 8002f08:	6063      	str	r3, [r4, #4]
 8002f0a:	bf04      	itt	eq
 8002f0c:	1809      	addeq	r1, r1, r0
 8002f0e:	6021      	streq	r1, [r4, #0]
 8002f10:	6054      	str	r4, [r2, #4]
 8002f12:	e7ca      	b.n	8002eaa <_free_r+0x22>
 8002f14:	bd38      	pop	{r3, r4, r5, pc}
 8002f16:	bf00      	nop
 8002f18:	20000240 	.word	0x20000240

08002f1c <sbrk_aligned>:
 8002f1c:	b570      	push	{r4, r5, r6, lr}
 8002f1e:	4e0f      	ldr	r6, [pc, #60]	@ (8002f5c <sbrk_aligned+0x40>)
 8002f20:	460c      	mov	r4, r1
 8002f22:	6831      	ldr	r1, [r6, #0]
 8002f24:	4605      	mov	r5, r0
 8002f26:	b911      	cbnz	r1, 8002f2e <sbrk_aligned+0x12>
 8002f28:	f000 fcb6 	bl	8003898 <_sbrk_r>
 8002f2c:	6030      	str	r0, [r6, #0]
 8002f2e:	4621      	mov	r1, r4
 8002f30:	4628      	mov	r0, r5
 8002f32:	f000 fcb1 	bl	8003898 <_sbrk_r>
 8002f36:	1c43      	adds	r3, r0, #1
 8002f38:	d103      	bne.n	8002f42 <sbrk_aligned+0x26>
 8002f3a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8002f3e:	4620      	mov	r0, r4
 8002f40:	bd70      	pop	{r4, r5, r6, pc}
 8002f42:	1cc4      	adds	r4, r0, #3
 8002f44:	f024 0403 	bic.w	r4, r4, #3
 8002f48:	42a0      	cmp	r0, r4
 8002f4a:	d0f8      	beq.n	8002f3e <sbrk_aligned+0x22>
 8002f4c:	1a21      	subs	r1, r4, r0
 8002f4e:	4628      	mov	r0, r5
 8002f50:	f000 fca2 	bl	8003898 <_sbrk_r>
 8002f54:	3001      	adds	r0, #1
 8002f56:	d1f2      	bne.n	8002f3e <sbrk_aligned+0x22>
 8002f58:	e7ef      	b.n	8002f3a <sbrk_aligned+0x1e>
 8002f5a:	bf00      	nop
 8002f5c:	2000023c 	.word	0x2000023c

08002f60 <_malloc_r>:
 8002f60:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002f64:	1ccd      	adds	r5, r1, #3
 8002f66:	f025 0503 	bic.w	r5, r5, #3
 8002f6a:	3508      	adds	r5, #8
 8002f6c:	2d0c      	cmp	r5, #12
 8002f6e:	bf38      	it	cc
 8002f70:	250c      	movcc	r5, #12
 8002f72:	2d00      	cmp	r5, #0
 8002f74:	4606      	mov	r6, r0
 8002f76:	db01      	blt.n	8002f7c <_malloc_r+0x1c>
 8002f78:	42a9      	cmp	r1, r5
 8002f7a:	d904      	bls.n	8002f86 <_malloc_r+0x26>
 8002f7c:	230c      	movs	r3, #12
 8002f7e:	6033      	str	r3, [r6, #0]
 8002f80:	2000      	movs	r0, #0
 8002f82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002f86:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800305c <_malloc_r+0xfc>
 8002f8a:	f000 f869 	bl	8003060 <__malloc_lock>
 8002f8e:	f8d8 3000 	ldr.w	r3, [r8]
 8002f92:	461c      	mov	r4, r3
 8002f94:	bb44      	cbnz	r4, 8002fe8 <_malloc_r+0x88>
 8002f96:	4629      	mov	r1, r5
 8002f98:	4630      	mov	r0, r6
 8002f9a:	f7ff ffbf 	bl	8002f1c <sbrk_aligned>
 8002f9e:	1c43      	adds	r3, r0, #1
 8002fa0:	4604      	mov	r4, r0
 8002fa2:	d158      	bne.n	8003056 <_malloc_r+0xf6>
 8002fa4:	f8d8 4000 	ldr.w	r4, [r8]
 8002fa8:	4627      	mov	r7, r4
 8002faa:	2f00      	cmp	r7, #0
 8002fac:	d143      	bne.n	8003036 <_malloc_r+0xd6>
 8002fae:	2c00      	cmp	r4, #0
 8002fb0:	d04b      	beq.n	800304a <_malloc_r+0xea>
 8002fb2:	6823      	ldr	r3, [r4, #0]
 8002fb4:	4639      	mov	r1, r7
 8002fb6:	4630      	mov	r0, r6
 8002fb8:	eb04 0903 	add.w	r9, r4, r3
 8002fbc:	f000 fc6c 	bl	8003898 <_sbrk_r>
 8002fc0:	4581      	cmp	r9, r0
 8002fc2:	d142      	bne.n	800304a <_malloc_r+0xea>
 8002fc4:	6821      	ldr	r1, [r4, #0]
 8002fc6:	1a6d      	subs	r5, r5, r1
 8002fc8:	4629      	mov	r1, r5
 8002fca:	4630      	mov	r0, r6
 8002fcc:	f7ff ffa6 	bl	8002f1c <sbrk_aligned>
 8002fd0:	3001      	adds	r0, #1
 8002fd2:	d03a      	beq.n	800304a <_malloc_r+0xea>
 8002fd4:	6823      	ldr	r3, [r4, #0]
 8002fd6:	442b      	add	r3, r5
 8002fd8:	6023      	str	r3, [r4, #0]
 8002fda:	f8d8 3000 	ldr.w	r3, [r8]
 8002fde:	685a      	ldr	r2, [r3, #4]
 8002fe0:	bb62      	cbnz	r2, 800303c <_malloc_r+0xdc>
 8002fe2:	f8c8 7000 	str.w	r7, [r8]
 8002fe6:	e00f      	b.n	8003008 <_malloc_r+0xa8>
 8002fe8:	6822      	ldr	r2, [r4, #0]
 8002fea:	1b52      	subs	r2, r2, r5
 8002fec:	d420      	bmi.n	8003030 <_malloc_r+0xd0>
 8002fee:	2a0b      	cmp	r2, #11
 8002ff0:	d917      	bls.n	8003022 <_malloc_r+0xc2>
 8002ff2:	1961      	adds	r1, r4, r5
 8002ff4:	42a3      	cmp	r3, r4
 8002ff6:	6025      	str	r5, [r4, #0]
 8002ff8:	bf18      	it	ne
 8002ffa:	6059      	strne	r1, [r3, #4]
 8002ffc:	6863      	ldr	r3, [r4, #4]
 8002ffe:	bf08      	it	eq
 8003000:	f8c8 1000 	streq.w	r1, [r8]
 8003004:	5162      	str	r2, [r4, r5]
 8003006:	604b      	str	r3, [r1, #4]
 8003008:	4630      	mov	r0, r6
 800300a:	f000 f82f 	bl	800306c <__malloc_unlock>
 800300e:	f104 000b 	add.w	r0, r4, #11
 8003012:	1d23      	adds	r3, r4, #4
 8003014:	f020 0007 	bic.w	r0, r0, #7
 8003018:	1ac2      	subs	r2, r0, r3
 800301a:	bf1c      	itt	ne
 800301c:	1a1b      	subne	r3, r3, r0
 800301e:	50a3      	strne	r3, [r4, r2]
 8003020:	e7af      	b.n	8002f82 <_malloc_r+0x22>
 8003022:	6862      	ldr	r2, [r4, #4]
 8003024:	42a3      	cmp	r3, r4
 8003026:	bf0c      	ite	eq
 8003028:	f8c8 2000 	streq.w	r2, [r8]
 800302c:	605a      	strne	r2, [r3, #4]
 800302e:	e7eb      	b.n	8003008 <_malloc_r+0xa8>
 8003030:	4623      	mov	r3, r4
 8003032:	6864      	ldr	r4, [r4, #4]
 8003034:	e7ae      	b.n	8002f94 <_malloc_r+0x34>
 8003036:	463c      	mov	r4, r7
 8003038:	687f      	ldr	r7, [r7, #4]
 800303a:	e7b6      	b.n	8002faa <_malloc_r+0x4a>
 800303c:	461a      	mov	r2, r3
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	42a3      	cmp	r3, r4
 8003042:	d1fb      	bne.n	800303c <_malloc_r+0xdc>
 8003044:	2300      	movs	r3, #0
 8003046:	6053      	str	r3, [r2, #4]
 8003048:	e7de      	b.n	8003008 <_malloc_r+0xa8>
 800304a:	230c      	movs	r3, #12
 800304c:	6033      	str	r3, [r6, #0]
 800304e:	4630      	mov	r0, r6
 8003050:	f000 f80c 	bl	800306c <__malloc_unlock>
 8003054:	e794      	b.n	8002f80 <_malloc_r+0x20>
 8003056:	6005      	str	r5, [r0, #0]
 8003058:	e7d6      	b.n	8003008 <_malloc_r+0xa8>
 800305a:	bf00      	nop
 800305c:	20000240 	.word	0x20000240

08003060 <__malloc_lock>:
 8003060:	4801      	ldr	r0, [pc, #4]	@ (8003068 <__malloc_lock+0x8>)
 8003062:	f7ff bf0e 	b.w	8002e82 <__retarget_lock_acquire_recursive>
 8003066:	bf00      	nop
 8003068:	20000238 	.word	0x20000238

0800306c <__malloc_unlock>:
 800306c:	4801      	ldr	r0, [pc, #4]	@ (8003074 <__malloc_unlock+0x8>)
 800306e:	f7ff bf09 	b.w	8002e84 <__retarget_lock_release_recursive>
 8003072:	bf00      	nop
 8003074:	20000238 	.word	0x20000238

08003078 <__sfputc_r>:
 8003078:	6893      	ldr	r3, [r2, #8]
 800307a:	3b01      	subs	r3, #1
 800307c:	2b00      	cmp	r3, #0
 800307e:	b410      	push	{r4}
 8003080:	6093      	str	r3, [r2, #8]
 8003082:	da08      	bge.n	8003096 <__sfputc_r+0x1e>
 8003084:	6994      	ldr	r4, [r2, #24]
 8003086:	42a3      	cmp	r3, r4
 8003088:	db01      	blt.n	800308e <__sfputc_r+0x16>
 800308a:	290a      	cmp	r1, #10
 800308c:	d103      	bne.n	8003096 <__sfputc_r+0x1e>
 800308e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003092:	f000 bb6d 	b.w	8003770 <__swbuf_r>
 8003096:	6813      	ldr	r3, [r2, #0]
 8003098:	1c58      	adds	r0, r3, #1
 800309a:	6010      	str	r0, [r2, #0]
 800309c:	7019      	strb	r1, [r3, #0]
 800309e:	4608      	mov	r0, r1
 80030a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 80030a4:	4770      	bx	lr

080030a6 <__sfputs_r>:
 80030a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80030a8:	4606      	mov	r6, r0
 80030aa:	460f      	mov	r7, r1
 80030ac:	4614      	mov	r4, r2
 80030ae:	18d5      	adds	r5, r2, r3
 80030b0:	42ac      	cmp	r4, r5
 80030b2:	d101      	bne.n	80030b8 <__sfputs_r+0x12>
 80030b4:	2000      	movs	r0, #0
 80030b6:	e007      	b.n	80030c8 <__sfputs_r+0x22>
 80030b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80030bc:	463a      	mov	r2, r7
 80030be:	4630      	mov	r0, r6
 80030c0:	f7ff ffda 	bl	8003078 <__sfputc_r>
 80030c4:	1c43      	adds	r3, r0, #1
 80030c6:	d1f3      	bne.n	80030b0 <__sfputs_r+0xa>
 80030c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080030cc <_vfiprintf_r>:
 80030cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80030d0:	460d      	mov	r5, r1
 80030d2:	b09d      	sub	sp, #116	@ 0x74
 80030d4:	4614      	mov	r4, r2
 80030d6:	4698      	mov	r8, r3
 80030d8:	4606      	mov	r6, r0
 80030da:	b118      	cbz	r0, 80030e4 <_vfiprintf_r+0x18>
 80030dc:	6a03      	ldr	r3, [r0, #32]
 80030de:	b90b      	cbnz	r3, 80030e4 <_vfiprintf_r+0x18>
 80030e0:	f7ff fdca 	bl	8002c78 <__sinit>
 80030e4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80030e6:	07d9      	lsls	r1, r3, #31
 80030e8:	d405      	bmi.n	80030f6 <_vfiprintf_r+0x2a>
 80030ea:	89ab      	ldrh	r3, [r5, #12]
 80030ec:	059a      	lsls	r2, r3, #22
 80030ee:	d402      	bmi.n	80030f6 <_vfiprintf_r+0x2a>
 80030f0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80030f2:	f7ff fec6 	bl	8002e82 <__retarget_lock_acquire_recursive>
 80030f6:	89ab      	ldrh	r3, [r5, #12]
 80030f8:	071b      	lsls	r3, r3, #28
 80030fa:	d501      	bpl.n	8003100 <_vfiprintf_r+0x34>
 80030fc:	692b      	ldr	r3, [r5, #16]
 80030fe:	b99b      	cbnz	r3, 8003128 <_vfiprintf_r+0x5c>
 8003100:	4629      	mov	r1, r5
 8003102:	4630      	mov	r0, r6
 8003104:	f000 fb72 	bl	80037ec <__swsetup_r>
 8003108:	b170      	cbz	r0, 8003128 <_vfiprintf_r+0x5c>
 800310a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800310c:	07dc      	lsls	r4, r3, #31
 800310e:	d504      	bpl.n	800311a <_vfiprintf_r+0x4e>
 8003110:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003114:	b01d      	add	sp, #116	@ 0x74
 8003116:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800311a:	89ab      	ldrh	r3, [r5, #12]
 800311c:	0598      	lsls	r0, r3, #22
 800311e:	d4f7      	bmi.n	8003110 <_vfiprintf_r+0x44>
 8003120:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8003122:	f7ff feaf 	bl	8002e84 <__retarget_lock_release_recursive>
 8003126:	e7f3      	b.n	8003110 <_vfiprintf_r+0x44>
 8003128:	2300      	movs	r3, #0
 800312a:	9309      	str	r3, [sp, #36]	@ 0x24
 800312c:	2320      	movs	r3, #32
 800312e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003132:	f8cd 800c 	str.w	r8, [sp, #12]
 8003136:	2330      	movs	r3, #48	@ 0x30
 8003138:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80032e8 <_vfiprintf_r+0x21c>
 800313c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003140:	f04f 0901 	mov.w	r9, #1
 8003144:	4623      	mov	r3, r4
 8003146:	469a      	mov	sl, r3
 8003148:	f813 2b01 	ldrb.w	r2, [r3], #1
 800314c:	b10a      	cbz	r2, 8003152 <_vfiprintf_r+0x86>
 800314e:	2a25      	cmp	r2, #37	@ 0x25
 8003150:	d1f9      	bne.n	8003146 <_vfiprintf_r+0x7a>
 8003152:	ebba 0b04 	subs.w	fp, sl, r4
 8003156:	d00b      	beq.n	8003170 <_vfiprintf_r+0xa4>
 8003158:	465b      	mov	r3, fp
 800315a:	4622      	mov	r2, r4
 800315c:	4629      	mov	r1, r5
 800315e:	4630      	mov	r0, r6
 8003160:	f7ff ffa1 	bl	80030a6 <__sfputs_r>
 8003164:	3001      	adds	r0, #1
 8003166:	f000 80a7 	beq.w	80032b8 <_vfiprintf_r+0x1ec>
 800316a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800316c:	445a      	add	r2, fp
 800316e:	9209      	str	r2, [sp, #36]	@ 0x24
 8003170:	f89a 3000 	ldrb.w	r3, [sl]
 8003174:	2b00      	cmp	r3, #0
 8003176:	f000 809f 	beq.w	80032b8 <_vfiprintf_r+0x1ec>
 800317a:	2300      	movs	r3, #0
 800317c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003180:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003184:	f10a 0a01 	add.w	sl, sl, #1
 8003188:	9304      	str	r3, [sp, #16]
 800318a:	9307      	str	r3, [sp, #28]
 800318c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003190:	931a      	str	r3, [sp, #104]	@ 0x68
 8003192:	4654      	mov	r4, sl
 8003194:	2205      	movs	r2, #5
 8003196:	f814 1b01 	ldrb.w	r1, [r4], #1
 800319a:	4853      	ldr	r0, [pc, #332]	@ (80032e8 <_vfiprintf_r+0x21c>)
 800319c:	f7fd f818 	bl	80001d0 <memchr>
 80031a0:	9a04      	ldr	r2, [sp, #16]
 80031a2:	b9d8      	cbnz	r0, 80031dc <_vfiprintf_r+0x110>
 80031a4:	06d1      	lsls	r1, r2, #27
 80031a6:	bf44      	itt	mi
 80031a8:	2320      	movmi	r3, #32
 80031aa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80031ae:	0713      	lsls	r3, r2, #28
 80031b0:	bf44      	itt	mi
 80031b2:	232b      	movmi	r3, #43	@ 0x2b
 80031b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80031b8:	f89a 3000 	ldrb.w	r3, [sl]
 80031bc:	2b2a      	cmp	r3, #42	@ 0x2a
 80031be:	d015      	beq.n	80031ec <_vfiprintf_r+0x120>
 80031c0:	9a07      	ldr	r2, [sp, #28]
 80031c2:	4654      	mov	r4, sl
 80031c4:	2000      	movs	r0, #0
 80031c6:	f04f 0c0a 	mov.w	ip, #10
 80031ca:	4621      	mov	r1, r4
 80031cc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80031d0:	3b30      	subs	r3, #48	@ 0x30
 80031d2:	2b09      	cmp	r3, #9
 80031d4:	d94b      	bls.n	800326e <_vfiprintf_r+0x1a2>
 80031d6:	b1b0      	cbz	r0, 8003206 <_vfiprintf_r+0x13a>
 80031d8:	9207      	str	r2, [sp, #28]
 80031da:	e014      	b.n	8003206 <_vfiprintf_r+0x13a>
 80031dc:	eba0 0308 	sub.w	r3, r0, r8
 80031e0:	fa09 f303 	lsl.w	r3, r9, r3
 80031e4:	4313      	orrs	r3, r2
 80031e6:	9304      	str	r3, [sp, #16]
 80031e8:	46a2      	mov	sl, r4
 80031ea:	e7d2      	b.n	8003192 <_vfiprintf_r+0xc6>
 80031ec:	9b03      	ldr	r3, [sp, #12]
 80031ee:	1d19      	adds	r1, r3, #4
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	9103      	str	r1, [sp, #12]
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	bfbb      	ittet	lt
 80031f8:	425b      	neglt	r3, r3
 80031fa:	f042 0202 	orrlt.w	r2, r2, #2
 80031fe:	9307      	strge	r3, [sp, #28]
 8003200:	9307      	strlt	r3, [sp, #28]
 8003202:	bfb8      	it	lt
 8003204:	9204      	strlt	r2, [sp, #16]
 8003206:	7823      	ldrb	r3, [r4, #0]
 8003208:	2b2e      	cmp	r3, #46	@ 0x2e
 800320a:	d10a      	bne.n	8003222 <_vfiprintf_r+0x156>
 800320c:	7863      	ldrb	r3, [r4, #1]
 800320e:	2b2a      	cmp	r3, #42	@ 0x2a
 8003210:	d132      	bne.n	8003278 <_vfiprintf_r+0x1ac>
 8003212:	9b03      	ldr	r3, [sp, #12]
 8003214:	1d1a      	adds	r2, r3, #4
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	9203      	str	r2, [sp, #12]
 800321a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800321e:	3402      	adds	r4, #2
 8003220:	9305      	str	r3, [sp, #20]
 8003222:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80032f8 <_vfiprintf_r+0x22c>
 8003226:	7821      	ldrb	r1, [r4, #0]
 8003228:	2203      	movs	r2, #3
 800322a:	4650      	mov	r0, sl
 800322c:	f7fc ffd0 	bl	80001d0 <memchr>
 8003230:	b138      	cbz	r0, 8003242 <_vfiprintf_r+0x176>
 8003232:	9b04      	ldr	r3, [sp, #16]
 8003234:	eba0 000a 	sub.w	r0, r0, sl
 8003238:	2240      	movs	r2, #64	@ 0x40
 800323a:	4082      	lsls	r2, r0
 800323c:	4313      	orrs	r3, r2
 800323e:	3401      	adds	r4, #1
 8003240:	9304      	str	r3, [sp, #16]
 8003242:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003246:	4829      	ldr	r0, [pc, #164]	@ (80032ec <_vfiprintf_r+0x220>)
 8003248:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800324c:	2206      	movs	r2, #6
 800324e:	f7fc ffbf 	bl	80001d0 <memchr>
 8003252:	2800      	cmp	r0, #0
 8003254:	d03f      	beq.n	80032d6 <_vfiprintf_r+0x20a>
 8003256:	4b26      	ldr	r3, [pc, #152]	@ (80032f0 <_vfiprintf_r+0x224>)
 8003258:	bb1b      	cbnz	r3, 80032a2 <_vfiprintf_r+0x1d6>
 800325a:	9b03      	ldr	r3, [sp, #12]
 800325c:	3307      	adds	r3, #7
 800325e:	f023 0307 	bic.w	r3, r3, #7
 8003262:	3308      	adds	r3, #8
 8003264:	9303      	str	r3, [sp, #12]
 8003266:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003268:	443b      	add	r3, r7
 800326a:	9309      	str	r3, [sp, #36]	@ 0x24
 800326c:	e76a      	b.n	8003144 <_vfiprintf_r+0x78>
 800326e:	fb0c 3202 	mla	r2, ip, r2, r3
 8003272:	460c      	mov	r4, r1
 8003274:	2001      	movs	r0, #1
 8003276:	e7a8      	b.n	80031ca <_vfiprintf_r+0xfe>
 8003278:	2300      	movs	r3, #0
 800327a:	3401      	adds	r4, #1
 800327c:	9305      	str	r3, [sp, #20]
 800327e:	4619      	mov	r1, r3
 8003280:	f04f 0c0a 	mov.w	ip, #10
 8003284:	4620      	mov	r0, r4
 8003286:	f810 2b01 	ldrb.w	r2, [r0], #1
 800328a:	3a30      	subs	r2, #48	@ 0x30
 800328c:	2a09      	cmp	r2, #9
 800328e:	d903      	bls.n	8003298 <_vfiprintf_r+0x1cc>
 8003290:	2b00      	cmp	r3, #0
 8003292:	d0c6      	beq.n	8003222 <_vfiprintf_r+0x156>
 8003294:	9105      	str	r1, [sp, #20]
 8003296:	e7c4      	b.n	8003222 <_vfiprintf_r+0x156>
 8003298:	fb0c 2101 	mla	r1, ip, r1, r2
 800329c:	4604      	mov	r4, r0
 800329e:	2301      	movs	r3, #1
 80032a0:	e7f0      	b.n	8003284 <_vfiprintf_r+0x1b8>
 80032a2:	ab03      	add	r3, sp, #12
 80032a4:	9300      	str	r3, [sp, #0]
 80032a6:	462a      	mov	r2, r5
 80032a8:	4b12      	ldr	r3, [pc, #72]	@ (80032f4 <_vfiprintf_r+0x228>)
 80032aa:	a904      	add	r1, sp, #16
 80032ac:	4630      	mov	r0, r6
 80032ae:	f3af 8000 	nop.w
 80032b2:	4607      	mov	r7, r0
 80032b4:	1c78      	adds	r0, r7, #1
 80032b6:	d1d6      	bne.n	8003266 <_vfiprintf_r+0x19a>
 80032b8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80032ba:	07d9      	lsls	r1, r3, #31
 80032bc:	d405      	bmi.n	80032ca <_vfiprintf_r+0x1fe>
 80032be:	89ab      	ldrh	r3, [r5, #12]
 80032c0:	059a      	lsls	r2, r3, #22
 80032c2:	d402      	bmi.n	80032ca <_vfiprintf_r+0x1fe>
 80032c4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80032c6:	f7ff fddd 	bl	8002e84 <__retarget_lock_release_recursive>
 80032ca:	89ab      	ldrh	r3, [r5, #12]
 80032cc:	065b      	lsls	r3, r3, #25
 80032ce:	f53f af1f 	bmi.w	8003110 <_vfiprintf_r+0x44>
 80032d2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80032d4:	e71e      	b.n	8003114 <_vfiprintf_r+0x48>
 80032d6:	ab03      	add	r3, sp, #12
 80032d8:	9300      	str	r3, [sp, #0]
 80032da:	462a      	mov	r2, r5
 80032dc:	4b05      	ldr	r3, [pc, #20]	@ (80032f4 <_vfiprintf_r+0x228>)
 80032de:	a904      	add	r1, sp, #16
 80032e0:	4630      	mov	r0, r6
 80032e2:	f000 f879 	bl	80033d8 <_printf_i>
 80032e6:	e7e4      	b.n	80032b2 <_vfiprintf_r+0x1e6>
 80032e8:	08003a18 	.word	0x08003a18
 80032ec:	08003a22 	.word	0x08003a22
 80032f0:	00000000 	.word	0x00000000
 80032f4:	080030a7 	.word	0x080030a7
 80032f8:	08003a1e 	.word	0x08003a1e

080032fc <_printf_common>:
 80032fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003300:	4616      	mov	r6, r2
 8003302:	4698      	mov	r8, r3
 8003304:	688a      	ldr	r2, [r1, #8]
 8003306:	690b      	ldr	r3, [r1, #16]
 8003308:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800330c:	4293      	cmp	r3, r2
 800330e:	bfb8      	it	lt
 8003310:	4613      	movlt	r3, r2
 8003312:	6033      	str	r3, [r6, #0]
 8003314:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003318:	4607      	mov	r7, r0
 800331a:	460c      	mov	r4, r1
 800331c:	b10a      	cbz	r2, 8003322 <_printf_common+0x26>
 800331e:	3301      	adds	r3, #1
 8003320:	6033      	str	r3, [r6, #0]
 8003322:	6823      	ldr	r3, [r4, #0]
 8003324:	0699      	lsls	r1, r3, #26
 8003326:	bf42      	ittt	mi
 8003328:	6833      	ldrmi	r3, [r6, #0]
 800332a:	3302      	addmi	r3, #2
 800332c:	6033      	strmi	r3, [r6, #0]
 800332e:	6825      	ldr	r5, [r4, #0]
 8003330:	f015 0506 	ands.w	r5, r5, #6
 8003334:	d106      	bne.n	8003344 <_printf_common+0x48>
 8003336:	f104 0a19 	add.w	sl, r4, #25
 800333a:	68e3      	ldr	r3, [r4, #12]
 800333c:	6832      	ldr	r2, [r6, #0]
 800333e:	1a9b      	subs	r3, r3, r2
 8003340:	42ab      	cmp	r3, r5
 8003342:	dc26      	bgt.n	8003392 <_printf_common+0x96>
 8003344:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003348:	6822      	ldr	r2, [r4, #0]
 800334a:	3b00      	subs	r3, #0
 800334c:	bf18      	it	ne
 800334e:	2301      	movne	r3, #1
 8003350:	0692      	lsls	r2, r2, #26
 8003352:	d42b      	bmi.n	80033ac <_printf_common+0xb0>
 8003354:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003358:	4641      	mov	r1, r8
 800335a:	4638      	mov	r0, r7
 800335c:	47c8      	blx	r9
 800335e:	3001      	adds	r0, #1
 8003360:	d01e      	beq.n	80033a0 <_printf_common+0xa4>
 8003362:	6823      	ldr	r3, [r4, #0]
 8003364:	6922      	ldr	r2, [r4, #16]
 8003366:	f003 0306 	and.w	r3, r3, #6
 800336a:	2b04      	cmp	r3, #4
 800336c:	bf02      	ittt	eq
 800336e:	68e5      	ldreq	r5, [r4, #12]
 8003370:	6833      	ldreq	r3, [r6, #0]
 8003372:	1aed      	subeq	r5, r5, r3
 8003374:	68a3      	ldr	r3, [r4, #8]
 8003376:	bf0c      	ite	eq
 8003378:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800337c:	2500      	movne	r5, #0
 800337e:	4293      	cmp	r3, r2
 8003380:	bfc4      	itt	gt
 8003382:	1a9b      	subgt	r3, r3, r2
 8003384:	18ed      	addgt	r5, r5, r3
 8003386:	2600      	movs	r6, #0
 8003388:	341a      	adds	r4, #26
 800338a:	42b5      	cmp	r5, r6
 800338c:	d11a      	bne.n	80033c4 <_printf_common+0xc8>
 800338e:	2000      	movs	r0, #0
 8003390:	e008      	b.n	80033a4 <_printf_common+0xa8>
 8003392:	2301      	movs	r3, #1
 8003394:	4652      	mov	r2, sl
 8003396:	4641      	mov	r1, r8
 8003398:	4638      	mov	r0, r7
 800339a:	47c8      	blx	r9
 800339c:	3001      	adds	r0, #1
 800339e:	d103      	bne.n	80033a8 <_printf_common+0xac>
 80033a0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80033a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80033a8:	3501      	adds	r5, #1
 80033aa:	e7c6      	b.n	800333a <_printf_common+0x3e>
 80033ac:	18e1      	adds	r1, r4, r3
 80033ae:	1c5a      	adds	r2, r3, #1
 80033b0:	2030      	movs	r0, #48	@ 0x30
 80033b2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80033b6:	4422      	add	r2, r4
 80033b8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80033bc:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80033c0:	3302      	adds	r3, #2
 80033c2:	e7c7      	b.n	8003354 <_printf_common+0x58>
 80033c4:	2301      	movs	r3, #1
 80033c6:	4622      	mov	r2, r4
 80033c8:	4641      	mov	r1, r8
 80033ca:	4638      	mov	r0, r7
 80033cc:	47c8      	blx	r9
 80033ce:	3001      	adds	r0, #1
 80033d0:	d0e6      	beq.n	80033a0 <_printf_common+0xa4>
 80033d2:	3601      	adds	r6, #1
 80033d4:	e7d9      	b.n	800338a <_printf_common+0x8e>
	...

080033d8 <_printf_i>:
 80033d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80033dc:	7e0f      	ldrb	r7, [r1, #24]
 80033de:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80033e0:	2f78      	cmp	r7, #120	@ 0x78
 80033e2:	4691      	mov	r9, r2
 80033e4:	4680      	mov	r8, r0
 80033e6:	460c      	mov	r4, r1
 80033e8:	469a      	mov	sl, r3
 80033ea:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80033ee:	d807      	bhi.n	8003400 <_printf_i+0x28>
 80033f0:	2f62      	cmp	r7, #98	@ 0x62
 80033f2:	d80a      	bhi.n	800340a <_printf_i+0x32>
 80033f4:	2f00      	cmp	r7, #0
 80033f6:	f000 80d2 	beq.w	800359e <_printf_i+0x1c6>
 80033fa:	2f58      	cmp	r7, #88	@ 0x58
 80033fc:	f000 80b9 	beq.w	8003572 <_printf_i+0x19a>
 8003400:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003404:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003408:	e03a      	b.n	8003480 <_printf_i+0xa8>
 800340a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800340e:	2b15      	cmp	r3, #21
 8003410:	d8f6      	bhi.n	8003400 <_printf_i+0x28>
 8003412:	a101      	add	r1, pc, #4	@ (adr r1, 8003418 <_printf_i+0x40>)
 8003414:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003418:	08003471 	.word	0x08003471
 800341c:	08003485 	.word	0x08003485
 8003420:	08003401 	.word	0x08003401
 8003424:	08003401 	.word	0x08003401
 8003428:	08003401 	.word	0x08003401
 800342c:	08003401 	.word	0x08003401
 8003430:	08003485 	.word	0x08003485
 8003434:	08003401 	.word	0x08003401
 8003438:	08003401 	.word	0x08003401
 800343c:	08003401 	.word	0x08003401
 8003440:	08003401 	.word	0x08003401
 8003444:	08003585 	.word	0x08003585
 8003448:	080034af 	.word	0x080034af
 800344c:	0800353f 	.word	0x0800353f
 8003450:	08003401 	.word	0x08003401
 8003454:	08003401 	.word	0x08003401
 8003458:	080035a7 	.word	0x080035a7
 800345c:	08003401 	.word	0x08003401
 8003460:	080034af 	.word	0x080034af
 8003464:	08003401 	.word	0x08003401
 8003468:	08003401 	.word	0x08003401
 800346c:	08003547 	.word	0x08003547
 8003470:	6833      	ldr	r3, [r6, #0]
 8003472:	1d1a      	adds	r2, r3, #4
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	6032      	str	r2, [r6, #0]
 8003478:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800347c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003480:	2301      	movs	r3, #1
 8003482:	e09d      	b.n	80035c0 <_printf_i+0x1e8>
 8003484:	6833      	ldr	r3, [r6, #0]
 8003486:	6820      	ldr	r0, [r4, #0]
 8003488:	1d19      	adds	r1, r3, #4
 800348a:	6031      	str	r1, [r6, #0]
 800348c:	0606      	lsls	r6, r0, #24
 800348e:	d501      	bpl.n	8003494 <_printf_i+0xbc>
 8003490:	681d      	ldr	r5, [r3, #0]
 8003492:	e003      	b.n	800349c <_printf_i+0xc4>
 8003494:	0645      	lsls	r5, r0, #25
 8003496:	d5fb      	bpl.n	8003490 <_printf_i+0xb8>
 8003498:	f9b3 5000 	ldrsh.w	r5, [r3]
 800349c:	2d00      	cmp	r5, #0
 800349e:	da03      	bge.n	80034a8 <_printf_i+0xd0>
 80034a0:	232d      	movs	r3, #45	@ 0x2d
 80034a2:	426d      	negs	r5, r5
 80034a4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80034a8:	4859      	ldr	r0, [pc, #356]	@ (8003610 <_printf_i+0x238>)
 80034aa:	230a      	movs	r3, #10
 80034ac:	e011      	b.n	80034d2 <_printf_i+0xfa>
 80034ae:	6821      	ldr	r1, [r4, #0]
 80034b0:	6833      	ldr	r3, [r6, #0]
 80034b2:	0608      	lsls	r0, r1, #24
 80034b4:	f853 5b04 	ldr.w	r5, [r3], #4
 80034b8:	d402      	bmi.n	80034c0 <_printf_i+0xe8>
 80034ba:	0649      	lsls	r1, r1, #25
 80034bc:	bf48      	it	mi
 80034be:	b2ad      	uxthmi	r5, r5
 80034c0:	2f6f      	cmp	r7, #111	@ 0x6f
 80034c2:	4853      	ldr	r0, [pc, #332]	@ (8003610 <_printf_i+0x238>)
 80034c4:	6033      	str	r3, [r6, #0]
 80034c6:	bf14      	ite	ne
 80034c8:	230a      	movne	r3, #10
 80034ca:	2308      	moveq	r3, #8
 80034cc:	2100      	movs	r1, #0
 80034ce:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80034d2:	6866      	ldr	r6, [r4, #4]
 80034d4:	60a6      	str	r6, [r4, #8]
 80034d6:	2e00      	cmp	r6, #0
 80034d8:	bfa2      	ittt	ge
 80034da:	6821      	ldrge	r1, [r4, #0]
 80034dc:	f021 0104 	bicge.w	r1, r1, #4
 80034e0:	6021      	strge	r1, [r4, #0]
 80034e2:	b90d      	cbnz	r5, 80034e8 <_printf_i+0x110>
 80034e4:	2e00      	cmp	r6, #0
 80034e6:	d04b      	beq.n	8003580 <_printf_i+0x1a8>
 80034e8:	4616      	mov	r6, r2
 80034ea:	fbb5 f1f3 	udiv	r1, r5, r3
 80034ee:	fb03 5711 	mls	r7, r3, r1, r5
 80034f2:	5dc7      	ldrb	r7, [r0, r7]
 80034f4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80034f8:	462f      	mov	r7, r5
 80034fa:	42bb      	cmp	r3, r7
 80034fc:	460d      	mov	r5, r1
 80034fe:	d9f4      	bls.n	80034ea <_printf_i+0x112>
 8003500:	2b08      	cmp	r3, #8
 8003502:	d10b      	bne.n	800351c <_printf_i+0x144>
 8003504:	6823      	ldr	r3, [r4, #0]
 8003506:	07df      	lsls	r7, r3, #31
 8003508:	d508      	bpl.n	800351c <_printf_i+0x144>
 800350a:	6923      	ldr	r3, [r4, #16]
 800350c:	6861      	ldr	r1, [r4, #4]
 800350e:	4299      	cmp	r1, r3
 8003510:	bfde      	ittt	le
 8003512:	2330      	movle	r3, #48	@ 0x30
 8003514:	f806 3c01 	strble.w	r3, [r6, #-1]
 8003518:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800351c:	1b92      	subs	r2, r2, r6
 800351e:	6122      	str	r2, [r4, #16]
 8003520:	f8cd a000 	str.w	sl, [sp]
 8003524:	464b      	mov	r3, r9
 8003526:	aa03      	add	r2, sp, #12
 8003528:	4621      	mov	r1, r4
 800352a:	4640      	mov	r0, r8
 800352c:	f7ff fee6 	bl	80032fc <_printf_common>
 8003530:	3001      	adds	r0, #1
 8003532:	d14a      	bne.n	80035ca <_printf_i+0x1f2>
 8003534:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003538:	b004      	add	sp, #16
 800353a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800353e:	6823      	ldr	r3, [r4, #0]
 8003540:	f043 0320 	orr.w	r3, r3, #32
 8003544:	6023      	str	r3, [r4, #0]
 8003546:	4833      	ldr	r0, [pc, #204]	@ (8003614 <_printf_i+0x23c>)
 8003548:	2778      	movs	r7, #120	@ 0x78
 800354a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800354e:	6823      	ldr	r3, [r4, #0]
 8003550:	6831      	ldr	r1, [r6, #0]
 8003552:	061f      	lsls	r7, r3, #24
 8003554:	f851 5b04 	ldr.w	r5, [r1], #4
 8003558:	d402      	bmi.n	8003560 <_printf_i+0x188>
 800355a:	065f      	lsls	r7, r3, #25
 800355c:	bf48      	it	mi
 800355e:	b2ad      	uxthmi	r5, r5
 8003560:	6031      	str	r1, [r6, #0]
 8003562:	07d9      	lsls	r1, r3, #31
 8003564:	bf44      	itt	mi
 8003566:	f043 0320 	orrmi.w	r3, r3, #32
 800356a:	6023      	strmi	r3, [r4, #0]
 800356c:	b11d      	cbz	r5, 8003576 <_printf_i+0x19e>
 800356e:	2310      	movs	r3, #16
 8003570:	e7ac      	b.n	80034cc <_printf_i+0xf4>
 8003572:	4827      	ldr	r0, [pc, #156]	@ (8003610 <_printf_i+0x238>)
 8003574:	e7e9      	b.n	800354a <_printf_i+0x172>
 8003576:	6823      	ldr	r3, [r4, #0]
 8003578:	f023 0320 	bic.w	r3, r3, #32
 800357c:	6023      	str	r3, [r4, #0]
 800357e:	e7f6      	b.n	800356e <_printf_i+0x196>
 8003580:	4616      	mov	r6, r2
 8003582:	e7bd      	b.n	8003500 <_printf_i+0x128>
 8003584:	6833      	ldr	r3, [r6, #0]
 8003586:	6825      	ldr	r5, [r4, #0]
 8003588:	6961      	ldr	r1, [r4, #20]
 800358a:	1d18      	adds	r0, r3, #4
 800358c:	6030      	str	r0, [r6, #0]
 800358e:	062e      	lsls	r6, r5, #24
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	d501      	bpl.n	8003598 <_printf_i+0x1c0>
 8003594:	6019      	str	r1, [r3, #0]
 8003596:	e002      	b.n	800359e <_printf_i+0x1c6>
 8003598:	0668      	lsls	r0, r5, #25
 800359a:	d5fb      	bpl.n	8003594 <_printf_i+0x1bc>
 800359c:	8019      	strh	r1, [r3, #0]
 800359e:	2300      	movs	r3, #0
 80035a0:	6123      	str	r3, [r4, #16]
 80035a2:	4616      	mov	r6, r2
 80035a4:	e7bc      	b.n	8003520 <_printf_i+0x148>
 80035a6:	6833      	ldr	r3, [r6, #0]
 80035a8:	1d1a      	adds	r2, r3, #4
 80035aa:	6032      	str	r2, [r6, #0]
 80035ac:	681e      	ldr	r6, [r3, #0]
 80035ae:	6862      	ldr	r2, [r4, #4]
 80035b0:	2100      	movs	r1, #0
 80035b2:	4630      	mov	r0, r6
 80035b4:	f7fc fe0c 	bl	80001d0 <memchr>
 80035b8:	b108      	cbz	r0, 80035be <_printf_i+0x1e6>
 80035ba:	1b80      	subs	r0, r0, r6
 80035bc:	6060      	str	r0, [r4, #4]
 80035be:	6863      	ldr	r3, [r4, #4]
 80035c0:	6123      	str	r3, [r4, #16]
 80035c2:	2300      	movs	r3, #0
 80035c4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80035c8:	e7aa      	b.n	8003520 <_printf_i+0x148>
 80035ca:	6923      	ldr	r3, [r4, #16]
 80035cc:	4632      	mov	r2, r6
 80035ce:	4649      	mov	r1, r9
 80035d0:	4640      	mov	r0, r8
 80035d2:	47d0      	blx	sl
 80035d4:	3001      	adds	r0, #1
 80035d6:	d0ad      	beq.n	8003534 <_printf_i+0x15c>
 80035d8:	6823      	ldr	r3, [r4, #0]
 80035da:	079b      	lsls	r3, r3, #30
 80035dc:	d413      	bmi.n	8003606 <_printf_i+0x22e>
 80035de:	68e0      	ldr	r0, [r4, #12]
 80035e0:	9b03      	ldr	r3, [sp, #12]
 80035e2:	4298      	cmp	r0, r3
 80035e4:	bfb8      	it	lt
 80035e6:	4618      	movlt	r0, r3
 80035e8:	e7a6      	b.n	8003538 <_printf_i+0x160>
 80035ea:	2301      	movs	r3, #1
 80035ec:	4632      	mov	r2, r6
 80035ee:	4649      	mov	r1, r9
 80035f0:	4640      	mov	r0, r8
 80035f2:	47d0      	blx	sl
 80035f4:	3001      	adds	r0, #1
 80035f6:	d09d      	beq.n	8003534 <_printf_i+0x15c>
 80035f8:	3501      	adds	r5, #1
 80035fa:	68e3      	ldr	r3, [r4, #12]
 80035fc:	9903      	ldr	r1, [sp, #12]
 80035fe:	1a5b      	subs	r3, r3, r1
 8003600:	42ab      	cmp	r3, r5
 8003602:	dcf2      	bgt.n	80035ea <_printf_i+0x212>
 8003604:	e7eb      	b.n	80035de <_printf_i+0x206>
 8003606:	2500      	movs	r5, #0
 8003608:	f104 0619 	add.w	r6, r4, #25
 800360c:	e7f5      	b.n	80035fa <_printf_i+0x222>
 800360e:	bf00      	nop
 8003610:	08003a29 	.word	0x08003a29
 8003614:	08003a3a 	.word	0x08003a3a

08003618 <__sflush_r>:
 8003618:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800361c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003620:	0716      	lsls	r6, r2, #28
 8003622:	4605      	mov	r5, r0
 8003624:	460c      	mov	r4, r1
 8003626:	d454      	bmi.n	80036d2 <__sflush_r+0xba>
 8003628:	684b      	ldr	r3, [r1, #4]
 800362a:	2b00      	cmp	r3, #0
 800362c:	dc02      	bgt.n	8003634 <__sflush_r+0x1c>
 800362e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8003630:	2b00      	cmp	r3, #0
 8003632:	dd48      	ble.n	80036c6 <__sflush_r+0xae>
 8003634:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003636:	2e00      	cmp	r6, #0
 8003638:	d045      	beq.n	80036c6 <__sflush_r+0xae>
 800363a:	2300      	movs	r3, #0
 800363c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8003640:	682f      	ldr	r7, [r5, #0]
 8003642:	6a21      	ldr	r1, [r4, #32]
 8003644:	602b      	str	r3, [r5, #0]
 8003646:	d030      	beq.n	80036aa <__sflush_r+0x92>
 8003648:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800364a:	89a3      	ldrh	r3, [r4, #12]
 800364c:	0759      	lsls	r1, r3, #29
 800364e:	d505      	bpl.n	800365c <__sflush_r+0x44>
 8003650:	6863      	ldr	r3, [r4, #4]
 8003652:	1ad2      	subs	r2, r2, r3
 8003654:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8003656:	b10b      	cbz	r3, 800365c <__sflush_r+0x44>
 8003658:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800365a:	1ad2      	subs	r2, r2, r3
 800365c:	2300      	movs	r3, #0
 800365e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003660:	6a21      	ldr	r1, [r4, #32]
 8003662:	4628      	mov	r0, r5
 8003664:	47b0      	blx	r6
 8003666:	1c43      	adds	r3, r0, #1
 8003668:	89a3      	ldrh	r3, [r4, #12]
 800366a:	d106      	bne.n	800367a <__sflush_r+0x62>
 800366c:	6829      	ldr	r1, [r5, #0]
 800366e:	291d      	cmp	r1, #29
 8003670:	d82b      	bhi.n	80036ca <__sflush_r+0xb2>
 8003672:	4a2a      	ldr	r2, [pc, #168]	@ (800371c <__sflush_r+0x104>)
 8003674:	410a      	asrs	r2, r1
 8003676:	07d6      	lsls	r6, r2, #31
 8003678:	d427      	bmi.n	80036ca <__sflush_r+0xb2>
 800367a:	2200      	movs	r2, #0
 800367c:	6062      	str	r2, [r4, #4]
 800367e:	04d9      	lsls	r1, r3, #19
 8003680:	6922      	ldr	r2, [r4, #16]
 8003682:	6022      	str	r2, [r4, #0]
 8003684:	d504      	bpl.n	8003690 <__sflush_r+0x78>
 8003686:	1c42      	adds	r2, r0, #1
 8003688:	d101      	bne.n	800368e <__sflush_r+0x76>
 800368a:	682b      	ldr	r3, [r5, #0]
 800368c:	b903      	cbnz	r3, 8003690 <__sflush_r+0x78>
 800368e:	6560      	str	r0, [r4, #84]	@ 0x54
 8003690:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003692:	602f      	str	r7, [r5, #0]
 8003694:	b1b9      	cbz	r1, 80036c6 <__sflush_r+0xae>
 8003696:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800369a:	4299      	cmp	r1, r3
 800369c:	d002      	beq.n	80036a4 <__sflush_r+0x8c>
 800369e:	4628      	mov	r0, r5
 80036a0:	f7ff fbf2 	bl	8002e88 <_free_r>
 80036a4:	2300      	movs	r3, #0
 80036a6:	6363      	str	r3, [r4, #52]	@ 0x34
 80036a8:	e00d      	b.n	80036c6 <__sflush_r+0xae>
 80036aa:	2301      	movs	r3, #1
 80036ac:	4628      	mov	r0, r5
 80036ae:	47b0      	blx	r6
 80036b0:	4602      	mov	r2, r0
 80036b2:	1c50      	adds	r0, r2, #1
 80036b4:	d1c9      	bne.n	800364a <__sflush_r+0x32>
 80036b6:	682b      	ldr	r3, [r5, #0]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d0c6      	beq.n	800364a <__sflush_r+0x32>
 80036bc:	2b1d      	cmp	r3, #29
 80036be:	d001      	beq.n	80036c4 <__sflush_r+0xac>
 80036c0:	2b16      	cmp	r3, #22
 80036c2:	d11e      	bne.n	8003702 <__sflush_r+0xea>
 80036c4:	602f      	str	r7, [r5, #0]
 80036c6:	2000      	movs	r0, #0
 80036c8:	e022      	b.n	8003710 <__sflush_r+0xf8>
 80036ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80036ce:	b21b      	sxth	r3, r3
 80036d0:	e01b      	b.n	800370a <__sflush_r+0xf2>
 80036d2:	690f      	ldr	r7, [r1, #16]
 80036d4:	2f00      	cmp	r7, #0
 80036d6:	d0f6      	beq.n	80036c6 <__sflush_r+0xae>
 80036d8:	0793      	lsls	r3, r2, #30
 80036da:	680e      	ldr	r6, [r1, #0]
 80036dc:	bf08      	it	eq
 80036de:	694b      	ldreq	r3, [r1, #20]
 80036e0:	600f      	str	r7, [r1, #0]
 80036e2:	bf18      	it	ne
 80036e4:	2300      	movne	r3, #0
 80036e6:	eba6 0807 	sub.w	r8, r6, r7
 80036ea:	608b      	str	r3, [r1, #8]
 80036ec:	f1b8 0f00 	cmp.w	r8, #0
 80036f0:	dde9      	ble.n	80036c6 <__sflush_r+0xae>
 80036f2:	6a21      	ldr	r1, [r4, #32]
 80036f4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80036f6:	4643      	mov	r3, r8
 80036f8:	463a      	mov	r2, r7
 80036fa:	4628      	mov	r0, r5
 80036fc:	47b0      	blx	r6
 80036fe:	2800      	cmp	r0, #0
 8003700:	dc08      	bgt.n	8003714 <__sflush_r+0xfc>
 8003702:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003706:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800370a:	81a3      	strh	r3, [r4, #12]
 800370c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8003710:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8003714:	4407      	add	r7, r0
 8003716:	eba8 0800 	sub.w	r8, r8, r0
 800371a:	e7e7      	b.n	80036ec <__sflush_r+0xd4>
 800371c:	dfbffffe 	.word	0xdfbffffe

08003720 <_fflush_r>:
 8003720:	b538      	push	{r3, r4, r5, lr}
 8003722:	690b      	ldr	r3, [r1, #16]
 8003724:	4605      	mov	r5, r0
 8003726:	460c      	mov	r4, r1
 8003728:	b913      	cbnz	r3, 8003730 <_fflush_r+0x10>
 800372a:	2500      	movs	r5, #0
 800372c:	4628      	mov	r0, r5
 800372e:	bd38      	pop	{r3, r4, r5, pc}
 8003730:	b118      	cbz	r0, 800373a <_fflush_r+0x1a>
 8003732:	6a03      	ldr	r3, [r0, #32]
 8003734:	b90b      	cbnz	r3, 800373a <_fflush_r+0x1a>
 8003736:	f7ff fa9f 	bl	8002c78 <__sinit>
 800373a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800373e:	2b00      	cmp	r3, #0
 8003740:	d0f3      	beq.n	800372a <_fflush_r+0xa>
 8003742:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003744:	07d0      	lsls	r0, r2, #31
 8003746:	d404      	bmi.n	8003752 <_fflush_r+0x32>
 8003748:	0599      	lsls	r1, r3, #22
 800374a:	d402      	bmi.n	8003752 <_fflush_r+0x32>
 800374c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800374e:	f7ff fb98 	bl	8002e82 <__retarget_lock_acquire_recursive>
 8003752:	4628      	mov	r0, r5
 8003754:	4621      	mov	r1, r4
 8003756:	f7ff ff5f 	bl	8003618 <__sflush_r>
 800375a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800375c:	07da      	lsls	r2, r3, #31
 800375e:	4605      	mov	r5, r0
 8003760:	d4e4      	bmi.n	800372c <_fflush_r+0xc>
 8003762:	89a3      	ldrh	r3, [r4, #12]
 8003764:	059b      	lsls	r3, r3, #22
 8003766:	d4e1      	bmi.n	800372c <_fflush_r+0xc>
 8003768:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800376a:	f7ff fb8b 	bl	8002e84 <__retarget_lock_release_recursive>
 800376e:	e7dd      	b.n	800372c <_fflush_r+0xc>

08003770 <__swbuf_r>:
 8003770:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003772:	460e      	mov	r6, r1
 8003774:	4614      	mov	r4, r2
 8003776:	4605      	mov	r5, r0
 8003778:	b118      	cbz	r0, 8003782 <__swbuf_r+0x12>
 800377a:	6a03      	ldr	r3, [r0, #32]
 800377c:	b90b      	cbnz	r3, 8003782 <__swbuf_r+0x12>
 800377e:	f7ff fa7b 	bl	8002c78 <__sinit>
 8003782:	69a3      	ldr	r3, [r4, #24]
 8003784:	60a3      	str	r3, [r4, #8]
 8003786:	89a3      	ldrh	r3, [r4, #12]
 8003788:	071a      	lsls	r2, r3, #28
 800378a:	d501      	bpl.n	8003790 <__swbuf_r+0x20>
 800378c:	6923      	ldr	r3, [r4, #16]
 800378e:	b943      	cbnz	r3, 80037a2 <__swbuf_r+0x32>
 8003790:	4621      	mov	r1, r4
 8003792:	4628      	mov	r0, r5
 8003794:	f000 f82a 	bl	80037ec <__swsetup_r>
 8003798:	b118      	cbz	r0, 80037a2 <__swbuf_r+0x32>
 800379a:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800379e:	4638      	mov	r0, r7
 80037a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80037a2:	6823      	ldr	r3, [r4, #0]
 80037a4:	6922      	ldr	r2, [r4, #16]
 80037a6:	1a98      	subs	r0, r3, r2
 80037a8:	6963      	ldr	r3, [r4, #20]
 80037aa:	b2f6      	uxtb	r6, r6
 80037ac:	4283      	cmp	r3, r0
 80037ae:	4637      	mov	r7, r6
 80037b0:	dc05      	bgt.n	80037be <__swbuf_r+0x4e>
 80037b2:	4621      	mov	r1, r4
 80037b4:	4628      	mov	r0, r5
 80037b6:	f7ff ffb3 	bl	8003720 <_fflush_r>
 80037ba:	2800      	cmp	r0, #0
 80037bc:	d1ed      	bne.n	800379a <__swbuf_r+0x2a>
 80037be:	68a3      	ldr	r3, [r4, #8]
 80037c0:	3b01      	subs	r3, #1
 80037c2:	60a3      	str	r3, [r4, #8]
 80037c4:	6823      	ldr	r3, [r4, #0]
 80037c6:	1c5a      	adds	r2, r3, #1
 80037c8:	6022      	str	r2, [r4, #0]
 80037ca:	701e      	strb	r6, [r3, #0]
 80037cc:	6962      	ldr	r2, [r4, #20]
 80037ce:	1c43      	adds	r3, r0, #1
 80037d0:	429a      	cmp	r2, r3
 80037d2:	d004      	beq.n	80037de <__swbuf_r+0x6e>
 80037d4:	89a3      	ldrh	r3, [r4, #12]
 80037d6:	07db      	lsls	r3, r3, #31
 80037d8:	d5e1      	bpl.n	800379e <__swbuf_r+0x2e>
 80037da:	2e0a      	cmp	r6, #10
 80037dc:	d1df      	bne.n	800379e <__swbuf_r+0x2e>
 80037de:	4621      	mov	r1, r4
 80037e0:	4628      	mov	r0, r5
 80037e2:	f7ff ff9d 	bl	8003720 <_fflush_r>
 80037e6:	2800      	cmp	r0, #0
 80037e8:	d0d9      	beq.n	800379e <__swbuf_r+0x2e>
 80037ea:	e7d6      	b.n	800379a <__swbuf_r+0x2a>

080037ec <__swsetup_r>:
 80037ec:	b538      	push	{r3, r4, r5, lr}
 80037ee:	4b29      	ldr	r3, [pc, #164]	@ (8003894 <__swsetup_r+0xa8>)
 80037f0:	4605      	mov	r5, r0
 80037f2:	6818      	ldr	r0, [r3, #0]
 80037f4:	460c      	mov	r4, r1
 80037f6:	b118      	cbz	r0, 8003800 <__swsetup_r+0x14>
 80037f8:	6a03      	ldr	r3, [r0, #32]
 80037fa:	b90b      	cbnz	r3, 8003800 <__swsetup_r+0x14>
 80037fc:	f7ff fa3c 	bl	8002c78 <__sinit>
 8003800:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003804:	0719      	lsls	r1, r3, #28
 8003806:	d422      	bmi.n	800384e <__swsetup_r+0x62>
 8003808:	06da      	lsls	r2, r3, #27
 800380a:	d407      	bmi.n	800381c <__swsetup_r+0x30>
 800380c:	2209      	movs	r2, #9
 800380e:	602a      	str	r2, [r5, #0]
 8003810:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003814:	81a3      	strh	r3, [r4, #12]
 8003816:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800381a:	e033      	b.n	8003884 <__swsetup_r+0x98>
 800381c:	0758      	lsls	r0, r3, #29
 800381e:	d512      	bpl.n	8003846 <__swsetup_r+0x5a>
 8003820:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003822:	b141      	cbz	r1, 8003836 <__swsetup_r+0x4a>
 8003824:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8003828:	4299      	cmp	r1, r3
 800382a:	d002      	beq.n	8003832 <__swsetup_r+0x46>
 800382c:	4628      	mov	r0, r5
 800382e:	f7ff fb2b 	bl	8002e88 <_free_r>
 8003832:	2300      	movs	r3, #0
 8003834:	6363      	str	r3, [r4, #52]	@ 0x34
 8003836:	89a3      	ldrh	r3, [r4, #12]
 8003838:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800383c:	81a3      	strh	r3, [r4, #12]
 800383e:	2300      	movs	r3, #0
 8003840:	6063      	str	r3, [r4, #4]
 8003842:	6923      	ldr	r3, [r4, #16]
 8003844:	6023      	str	r3, [r4, #0]
 8003846:	89a3      	ldrh	r3, [r4, #12]
 8003848:	f043 0308 	orr.w	r3, r3, #8
 800384c:	81a3      	strh	r3, [r4, #12]
 800384e:	6923      	ldr	r3, [r4, #16]
 8003850:	b94b      	cbnz	r3, 8003866 <__swsetup_r+0x7a>
 8003852:	89a3      	ldrh	r3, [r4, #12]
 8003854:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8003858:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800385c:	d003      	beq.n	8003866 <__swsetup_r+0x7a>
 800385e:	4621      	mov	r1, r4
 8003860:	4628      	mov	r0, r5
 8003862:	f000 f84f 	bl	8003904 <__smakebuf_r>
 8003866:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800386a:	f013 0201 	ands.w	r2, r3, #1
 800386e:	d00a      	beq.n	8003886 <__swsetup_r+0x9a>
 8003870:	2200      	movs	r2, #0
 8003872:	60a2      	str	r2, [r4, #8]
 8003874:	6962      	ldr	r2, [r4, #20]
 8003876:	4252      	negs	r2, r2
 8003878:	61a2      	str	r2, [r4, #24]
 800387a:	6922      	ldr	r2, [r4, #16]
 800387c:	b942      	cbnz	r2, 8003890 <__swsetup_r+0xa4>
 800387e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8003882:	d1c5      	bne.n	8003810 <__swsetup_r+0x24>
 8003884:	bd38      	pop	{r3, r4, r5, pc}
 8003886:	0799      	lsls	r1, r3, #30
 8003888:	bf58      	it	pl
 800388a:	6962      	ldrpl	r2, [r4, #20]
 800388c:	60a2      	str	r2, [r4, #8]
 800388e:	e7f4      	b.n	800387a <__swsetup_r+0x8e>
 8003890:	2000      	movs	r0, #0
 8003892:	e7f7      	b.n	8003884 <__swsetup_r+0x98>
 8003894:	20000018 	.word	0x20000018

08003898 <_sbrk_r>:
 8003898:	b538      	push	{r3, r4, r5, lr}
 800389a:	4d06      	ldr	r5, [pc, #24]	@ (80038b4 <_sbrk_r+0x1c>)
 800389c:	2300      	movs	r3, #0
 800389e:	4604      	mov	r4, r0
 80038a0:	4608      	mov	r0, r1
 80038a2:	602b      	str	r3, [r5, #0]
 80038a4:	f7fd f958 	bl	8000b58 <_sbrk>
 80038a8:	1c43      	adds	r3, r0, #1
 80038aa:	d102      	bne.n	80038b2 <_sbrk_r+0x1a>
 80038ac:	682b      	ldr	r3, [r5, #0]
 80038ae:	b103      	cbz	r3, 80038b2 <_sbrk_r+0x1a>
 80038b0:	6023      	str	r3, [r4, #0]
 80038b2:	bd38      	pop	{r3, r4, r5, pc}
 80038b4:	20000234 	.word	0x20000234

080038b8 <__swhatbuf_r>:
 80038b8:	b570      	push	{r4, r5, r6, lr}
 80038ba:	460c      	mov	r4, r1
 80038bc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80038c0:	2900      	cmp	r1, #0
 80038c2:	b096      	sub	sp, #88	@ 0x58
 80038c4:	4615      	mov	r5, r2
 80038c6:	461e      	mov	r6, r3
 80038c8:	da0d      	bge.n	80038e6 <__swhatbuf_r+0x2e>
 80038ca:	89a3      	ldrh	r3, [r4, #12]
 80038cc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80038d0:	f04f 0100 	mov.w	r1, #0
 80038d4:	bf14      	ite	ne
 80038d6:	2340      	movne	r3, #64	@ 0x40
 80038d8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80038dc:	2000      	movs	r0, #0
 80038de:	6031      	str	r1, [r6, #0]
 80038e0:	602b      	str	r3, [r5, #0]
 80038e2:	b016      	add	sp, #88	@ 0x58
 80038e4:	bd70      	pop	{r4, r5, r6, pc}
 80038e6:	466a      	mov	r2, sp
 80038e8:	f000 f848 	bl	800397c <_fstat_r>
 80038ec:	2800      	cmp	r0, #0
 80038ee:	dbec      	blt.n	80038ca <__swhatbuf_r+0x12>
 80038f0:	9901      	ldr	r1, [sp, #4]
 80038f2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80038f6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80038fa:	4259      	negs	r1, r3
 80038fc:	4159      	adcs	r1, r3
 80038fe:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003902:	e7eb      	b.n	80038dc <__swhatbuf_r+0x24>

08003904 <__smakebuf_r>:
 8003904:	898b      	ldrh	r3, [r1, #12]
 8003906:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003908:	079d      	lsls	r5, r3, #30
 800390a:	4606      	mov	r6, r0
 800390c:	460c      	mov	r4, r1
 800390e:	d507      	bpl.n	8003920 <__smakebuf_r+0x1c>
 8003910:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8003914:	6023      	str	r3, [r4, #0]
 8003916:	6123      	str	r3, [r4, #16]
 8003918:	2301      	movs	r3, #1
 800391a:	6163      	str	r3, [r4, #20]
 800391c:	b003      	add	sp, #12
 800391e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003920:	ab01      	add	r3, sp, #4
 8003922:	466a      	mov	r2, sp
 8003924:	f7ff ffc8 	bl	80038b8 <__swhatbuf_r>
 8003928:	9f00      	ldr	r7, [sp, #0]
 800392a:	4605      	mov	r5, r0
 800392c:	4639      	mov	r1, r7
 800392e:	4630      	mov	r0, r6
 8003930:	f7ff fb16 	bl	8002f60 <_malloc_r>
 8003934:	b948      	cbnz	r0, 800394a <__smakebuf_r+0x46>
 8003936:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800393a:	059a      	lsls	r2, r3, #22
 800393c:	d4ee      	bmi.n	800391c <__smakebuf_r+0x18>
 800393e:	f023 0303 	bic.w	r3, r3, #3
 8003942:	f043 0302 	orr.w	r3, r3, #2
 8003946:	81a3      	strh	r3, [r4, #12]
 8003948:	e7e2      	b.n	8003910 <__smakebuf_r+0xc>
 800394a:	89a3      	ldrh	r3, [r4, #12]
 800394c:	6020      	str	r0, [r4, #0]
 800394e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003952:	81a3      	strh	r3, [r4, #12]
 8003954:	9b01      	ldr	r3, [sp, #4]
 8003956:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800395a:	b15b      	cbz	r3, 8003974 <__smakebuf_r+0x70>
 800395c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003960:	4630      	mov	r0, r6
 8003962:	f000 f81d 	bl	80039a0 <_isatty_r>
 8003966:	b128      	cbz	r0, 8003974 <__smakebuf_r+0x70>
 8003968:	89a3      	ldrh	r3, [r4, #12]
 800396a:	f023 0303 	bic.w	r3, r3, #3
 800396e:	f043 0301 	orr.w	r3, r3, #1
 8003972:	81a3      	strh	r3, [r4, #12]
 8003974:	89a3      	ldrh	r3, [r4, #12]
 8003976:	431d      	orrs	r5, r3
 8003978:	81a5      	strh	r5, [r4, #12]
 800397a:	e7cf      	b.n	800391c <__smakebuf_r+0x18>

0800397c <_fstat_r>:
 800397c:	b538      	push	{r3, r4, r5, lr}
 800397e:	4d07      	ldr	r5, [pc, #28]	@ (800399c <_fstat_r+0x20>)
 8003980:	2300      	movs	r3, #0
 8003982:	4604      	mov	r4, r0
 8003984:	4608      	mov	r0, r1
 8003986:	4611      	mov	r1, r2
 8003988:	602b      	str	r3, [r5, #0]
 800398a:	f7fd f8bd 	bl	8000b08 <_fstat>
 800398e:	1c43      	adds	r3, r0, #1
 8003990:	d102      	bne.n	8003998 <_fstat_r+0x1c>
 8003992:	682b      	ldr	r3, [r5, #0]
 8003994:	b103      	cbz	r3, 8003998 <_fstat_r+0x1c>
 8003996:	6023      	str	r3, [r4, #0]
 8003998:	bd38      	pop	{r3, r4, r5, pc}
 800399a:	bf00      	nop
 800399c:	20000234 	.word	0x20000234

080039a0 <_isatty_r>:
 80039a0:	b538      	push	{r3, r4, r5, lr}
 80039a2:	4d06      	ldr	r5, [pc, #24]	@ (80039bc <_isatty_r+0x1c>)
 80039a4:	2300      	movs	r3, #0
 80039a6:	4604      	mov	r4, r0
 80039a8:	4608      	mov	r0, r1
 80039aa:	602b      	str	r3, [r5, #0]
 80039ac:	f7fd f8bc 	bl	8000b28 <_isatty>
 80039b0:	1c43      	adds	r3, r0, #1
 80039b2:	d102      	bne.n	80039ba <_isatty_r+0x1a>
 80039b4:	682b      	ldr	r3, [r5, #0]
 80039b6:	b103      	cbz	r3, 80039ba <_isatty_r+0x1a>
 80039b8:	6023      	str	r3, [r4, #0]
 80039ba:	bd38      	pop	{r3, r4, r5, pc}
 80039bc:	20000234 	.word	0x20000234

080039c0 <_init>:
 80039c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039c2:	bf00      	nop
 80039c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039c6:	bc08      	pop	{r3}
 80039c8:	469e      	mov	lr, r3
 80039ca:	4770      	bx	lr

080039cc <_fini>:
 80039cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80039ce:	bf00      	nop
 80039d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80039d2:	bc08      	pop	{r3}
 80039d4:	469e      	mov	lr, r3
 80039d6:	4770      	bx	lr
