
F405.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ffcc  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e88  08010160  08010160  00011160  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08010fe8  08010fe8  00012288  2**0
                  CONTENTS
  4 .ARM          00000008  08010fe8  08010fe8  00011fe8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08010ff0  08010ff0  00012288  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08010ff0  08010ff0  00011ff0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08010ff4  08010ff4  00011ff4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000288  20000000  08010ff8  00012000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00012288  2**0
                  CONTENTS
 10 .bss          00005014  20000288  20000288  00012288  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  2000529c  2000529c  00012288  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00012288  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002464c  00000000  00000000  000122b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000055b8  00000000  00000000  00036904  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001da0  00000000  00000000  0003bec0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000016ea  00000000  00000000  0003dc60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026fbf  00000000  00000000  0003f34a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000264f1  00000000  00000000  00066309  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d8912  00000000  00000000  0008c7fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0016510c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00008e80  00000000  00000000  00165150  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000058  00000000  00000000  0016dfd0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000288 	.word	0x20000288
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08010144 	.word	0x08010144

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000028c 	.word	0x2000028c
 80001cc:	08010144 	.word	0x08010144

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_ldivmod>:
 8000ba8:	b97b      	cbnz	r3, 8000bca <__aeabi_ldivmod+0x22>
 8000baa:	b972      	cbnz	r2, 8000bca <__aeabi_ldivmod+0x22>
 8000bac:	2900      	cmp	r1, #0
 8000bae:	bfbe      	ittt	lt
 8000bb0:	2000      	movlt	r0, #0
 8000bb2:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000bb6:	e006      	blt.n	8000bc6 <__aeabi_ldivmod+0x1e>
 8000bb8:	bf08      	it	eq
 8000bba:	2800      	cmpeq	r0, #0
 8000bbc:	bf1c      	itt	ne
 8000bbe:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000bc2:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000bc6:	f000 b9b5 	b.w	8000f34 <__aeabi_idiv0>
 8000bca:	f1ad 0c08 	sub.w	ip, sp, #8
 8000bce:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bd2:	2900      	cmp	r1, #0
 8000bd4:	db09      	blt.n	8000bea <__aeabi_ldivmod+0x42>
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	db1a      	blt.n	8000c10 <__aeabi_ldivmod+0x68>
 8000bda:	f000 f84d 	bl	8000c78 <__udivmoddi4>
 8000bde:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000be2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000be6:	b004      	add	sp, #16
 8000be8:	4770      	bx	lr
 8000bea:	4240      	negs	r0, r0
 8000bec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000bf0:	2b00      	cmp	r3, #0
 8000bf2:	db1b      	blt.n	8000c2c <__aeabi_ldivmod+0x84>
 8000bf4:	f000 f840 	bl	8000c78 <__udivmoddi4>
 8000bf8:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bfc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c00:	b004      	add	sp, #16
 8000c02:	4240      	negs	r0, r0
 8000c04:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c08:	4252      	negs	r2, r2
 8000c0a:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c0e:	4770      	bx	lr
 8000c10:	4252      	negs	r2, r2
 8000c12:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c16:	f000 f82f 	bl	8000c78 <__udivmoddi4>
 8000c1a:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c1e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c22:	b004      	add	sp, #16
 8000c24:	4240      	negs	r0, r0
 8000c26:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c2a:	4770      	bx	lr
 8000c2c:	4252      	negs	r2, r2
 8000c2e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c32:	f000 f821 	bl	8000c78 <__udivmoddi4>
 8000c36:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c3a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c3e:	b004      	add	sp, #16
 8000c40:	4252      	negs	r2, r2
 8000c42:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000c46:	4770      	bx	lr

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c5c:	f000 b96a 	b.w	8000f34 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	460c      	mov	r4, r1
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d14e      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c84:	4694      	mov	ip, r2
 8000c86:	458c      	cmp	ip, r1
 8000c88:	4686      	mov	lr, r0
 8000c8a:	fab2 f282 	clz	r2, r2
 8000c8e:	d962      	bls.n	8000d56 <__udivmoddi4+0xde>
 8000c90:	b14a      	cbz	r2, 8000ca6 <__udivmoddi4+0x2e>
 8000c92:	f1c2 0320 	rsb	r3, r2, #32
 8000c96:	4091      	lsls	r1, r2
 8000c98:	fa20 f303 	lsr.w	r3, r0, r3
 8000c9c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca0:	4319      	orrs	r1, r3
 8000ca2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ca6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000caa:	fa1f f68c 	uxth.w	r6, ip
 8000cae:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cb2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cb6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cba:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cbe:	fb04 f106 	mul.w	r1, r4, r6
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000cce:	f080 8112 	bcs.w	8000ef6 <__udivmoddi4+0x27e>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 810f 	bls.w	8000ef6 <__udivmoddi4+0x27e>
 8000cd8:	3c02      	subs	r4, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a59      	subs	r1, r3, r1
 8000cde:	fa1f f38e 	uxth.w	r3, lr
 8000ce2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ce6:	fb07 1110 	mls	r1, r7, r0, r1
 8000cea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cee:	fb00 f606 	mul.w	r6, r0, r6
 8000cf2:	429e      	cmp	r6, r3
 8000cf4:	d90a      	bls.n	8000d0c <__udivmoddi4+0x94>
 8000cf6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cfa:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000cfe:	f080 80fc 	bcs.w	8000efa <__udivmoddi4+0x282>
 8000d02:	429e      	cmp	r6, r3
 8000d04:	f240 80f9 	bls.w	8000efa <__udivmoddi4+0x282>
 8000d08:	4463      	add	r3, ip
 8000d0a:	3802      	subs	r0, #2
 8000d0c:	1b9b      	subs	r3, r3, r6
 8000d0e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d12:	2100      	movs	r1, #0
 8000d14:	b11d      	cbz	r5, 8000d1e <__udivmoddi4+0xa6>
 8000d16:	40d3      	lsrs	r3, r2
 8000d18:	2200      	movs	r2, #0
 8000d1a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d905      	bls.n	8000d32 <__udivmoddi4+0xba>
 8000d26:	b10d      	cbz	r5, 8000d2c <__udivmoddi4+0xb4>
 8000d28:	e9c5 0100 	strd	r0, r1, [r5]
 8000d2c:	2100      	movs	r1, #0
 8000d2e:	4608      	mov	r0, r1
 8000d30:	e7f5      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000d32:	fab3 f183 	clz	r1, r3
 8000d36:	2900      	cmp	r1, #0
 8000d38:	d146      	bne.n	8000dc8 <__udivmoddi4+0x150>
 8000d3a:	42a3      	cmp	r3, r4
 8000d3c:	d302      	bcc.n	8000d44 <__udivmoddi4+0xcc>
 8000d3e:	4290      	cmp	r0, r2
 8000d40:	f0c0 80f0 	bcc.w	8000f24 <__udivmoddi4+0x2ac>
 8000d44:	1a86      	subs	r6, r0, r2
 8000d46:	eb64 0303 	sbc.w	r3, r4, r3
 8000d4a:	2001      	movs	r0, #1
 8000d4c:	2d00      	cmp	r5, #0
 8000d4e:	d0e6      	beq.n	8000d1e <__udivmoddi4+0xa6>
 8000d50:	e9c5 6300 	strd	r6, r3, [r5]
 8000d54:	e7e3      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000d56:	2a00      	cmp	r2, #0
 8000d58:	f040 8090 	bne.w	8000e7c <__udivmoddi4+0x204>
 8000d5c:	eba1 040c 	sub.w	r4, r1, ip
 8000d60:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d64:	fa1f f78c 	uxth.w	r7, ip
 8000d68:	2101      	movs	r1, #1
 8000d6a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d6e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d72:	fb08 4416 	mls	r4, r8, r6, r4
 8000d76:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d7a:	fb07 f006 	mul.w	r0, r7, r6
 8000d7e:	4298      	cmp	r0, r3
 8000d80:	d908      	bls.n	8000d94 <__udivmoddi4+0x11c>
 8000d82:	eb1c 0303 	adds.w	r3, ip, r3
 8000d86:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000d8a:	d202      	bcs.n	8000d92 <__udivmoddi4+0x11a>
 8000d8c:	4298      	cmp	r0, r3
 8000d8e:	f200 80cd 	bhi.w	8000f2c <__udivmoddi4+0x2b4>
 8000d92:	4626      	mov	r6, r4
 8000d94:	1a1c      	subs	r4, r3, r0
 8000d96:	fa1f f38e 	uxth.w	r3, lr
 8000d9a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000d9e:	fb08 4410 	mls	r4, r8, r0, r4
 8000da2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000da6:	fb00 f707 	mul.w	r7, r0, r7
 8000daa:	429f      	cmp	r7, r3
 8000dac:	d908      	bls.n	8000dc0 <__udivmoddi4+0x148>
 8000dae:	eb1c 0303 	adds.w	r3, ip, r3
 8000db2:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000db6:	d202      	bcs.n	8000dbe <__udivmoddi4+0x146>
 8000db8:	429f      	cmp	r7, r3
 8000dba:	f200 80b0 	bhi.w	8000f1e <__udivmoddi4+0x2a6>
 8000dbe:	4620      	mov	r0, r4
 8000dc0:	1bdb      	subs	r3, r3, r7
 8000dc2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dc6:	e7a5      	b.n	8000d14 <__udivmoddi4+0x9c>
 8000dc8:	f1c1 0620 	rsb	r6, r1, #32
 8000dcc:	408b      	lsls	r3, r1
 8000dce:	fa22 f706 	lsr.w	r7, r2, r6
 8000dd2:	431f      	orrs	r7, r3
 8000dd4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000dd8:	fa04 f301 	lsl.w	r3, r4, r1
 8000ddc:	ea43 030c 	orr.w	r3, r3, ip
 8000de0:	40f4      	lsrs	r4, r6
 8000de2:	fa00 f801 	lsl.w	r8, r0, r1
 8000de6:	0c38      	lsrs	r0, r7, #16
 8000de8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dec:	fbb4 fef0 	udiv	lr, r4, r0
 8000df0:	fa1f fc87 	uxth.w	ip, r7
 8000df4:	fb00 441e 	mls	r4, r0, lr, r4
 8000df8:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000dfc:	fb0e f90c 	mul.w	r9, lr, ip
 8000e00:	45a1      	cmp	r9, r4
 8000e02:	fa02 f201 	lsl.w	r2, r2, r1
 8000e06:	d90a      	bls.n	8000e1e <__udivmoddi4+0x1a6>
 8000e08:	193c      	adds	r4, r7, r4
 8000e0a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000e0e:	f080 8084 	bcs.w	8000f1a <__udivmoddi4+0x2a2>
 8000e12:	45a1      	cmp	r9, r4
 8000e14:	f240 8081 	bls.w	8000f1a <__udivmoddi4+0x2a2>
 8000e18:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e1c:	443c      	add	r4, r7
 8000e1e:	eba4 0409 	sub.w	r4, r4, r9
 8000e22:	fa1f f983 	uxth.w	r9, r3
 8000e26:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e2a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e2e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e32:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e36:	45a4      	cmp	ip, r4
 8000e38:	d907      	bls.n	8000e4a <__udivmoddi4+0x1d2>
 8000e3a:	193c      	adds	r4, r7, r4
 8000e3c:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000e40:	d267      	bcs.n	8000f12 <__udivmoddi4+0x29a>
 8000e42:	45a4      	cmp	ip, r4
 8000e44:	d965      	bls.n	8000f12 <__udivmoddi4+0x29a>
 8000e46:	3b02      	subs	r3, #2
 8000e48:	443c      	add	r4, r7
 8000e4a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e4e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e52:	eba4 040c 	sub.w	r4, r4, ip
 8000e56:	429c      	cmp	r4, r3
 8000e58:	46ce      	mov	lr, r9
 8000e5a:	469c      	mov	ip, r3
 8000e5c:	d351      	bcc.n	8000f02 <__udivmoddi4+0x28a>
 8000e5e:	d04e      	beq.n	8000efe <__udivmoddi4+0x286>
 8000e60:	b155      	cbz	r5, 8000e78 <__udivmoddi4+0x200>
 8000e62:	ebb8 030e 	subs.w	r3, r8, lr
 8000e66:	eb64 040c 	sbc.w	r4, r4, ip
 8000e6a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e6e:	40cb      	lsrs	r3, r1
 8000e70:	431e      	orrs	r6, r3
 8000e72:	40cc      	lsrs	r4, r1
 8000e74:	e9c5 6400 	strd	r6, r4, [r5]
 8000e78:	2100      	movs	r1, #0
 8000e7a:	e750      	b.n	8000d1e <__udivmoddi4+0xa6>
 8000e7c:	f1c2 0320 	rsb	r3, r2, #32
 8000e80:	fa20 f103 	lsr.w	r1, r0, r3
 8000e84:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e88:	fa24 f303 	lsr.w	r3, r4, r3
 8000e8c:	4094      	lsls	r4, r2
 8000e8e:	430c      	orrs	r4, r1
 8000e90:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e94:	fa00 fe02 	lsl.w	lr, r0, r2
 8000e98:	fa1f f78c 	uxth.w	r7, ip
 8000e9c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ea0:	fb08 3110 	mls	r1, r8, r0, r3
 8000ea4:	0c23      	lsrs	r3, r4, #16
 8000ea6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eaa:	fb00 f107 	mul.w	r1, r0, r7
 8000eae:	4299      	cmp	r1, r3
 8000eb0:	d908      	bls.n	8000ec4 <__udivmoddi4+0x24c>
 8000eb2:	eb1c 0303 	adds.w	r3, ip, r3
 8000eb6:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000eba:	d22c      	bcs.n	8000f16 <__udivmoddi4+0x29e>
 8000ebc:	4299      	cmp	r1, r3
 8000ebe:	d92a      	bls.n	8000f16 <__udivmoddi4+0x29e>
 8000ec0:	3802      	subs	r0, #2
 8000ec2:	4463      	add	r3, ip
 8000ec4:	1a5b      	subs	r3, r3, r1
 8000ec6:	b2a4      	uxth	r4, r4
 8000ec8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000ecc:	fb08 3311 	mls	r3, r8, r1, r3
 8000ed0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ed4:	fb01 f307 	mul.w	r3, r1, r7
 8000ed8:	42a3      	cmp	r3, r4
 8000eda:	d908      	bls.n	8000eee <__udivmoddi4+0x276>
 8000edc:	eb1c 0404 	adds.w	r4, ip, r4
 8000ee0:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000ee4:	d213      	bcs.n	8000f0e <__udivmoddi4+0x296>
 8000ee6:	42a3      	cmp	r3, r4
 8000ee8:	d911      	bls.n	8000f0e <__udivmoddi4+0x296>
 8000eea:	3902      	subs	r1, #2
 8000eec:	4464      	add	r4, ip
 8000eee:	1ae4      	subs	r4, r4, r3
 8000ef0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000ef4:	e739      	b.n	8000d6a <__udivmoddi4+0xf2>
 8000ef6:	4604      	mov	r4, r0
 8000ef8:	e6f0      	b.n	8000cdc <__udivmoddi4+0x64>
 8000efa:	4608      	mov	r0, r1
 8000efc:	e706      	b.n	8000d0c <__udivmoddi4+0x94>
 8000efe:	45c8      	cmp	r8, r9
 8000f00:	d2ae      	bcs.n	8000e60 <__udivmoddi4+0x1e8>
 8000f02:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f06:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f0a:	3801      	subs	r0, #1
 8000f0c:	e7a8      	b.n	8000e60 <__udivmoddi4+0x1e8>
 8000f0e:	4631      	mov	r1, r6
 8000f10:	e7ed      	b.n	8000eee <__udivmoddi4+0x276>
 8000f12:	4603      	mov	r3, r0
 8000f14:	e799      	b.n	8000e4a <__udivmoddi4+0x1d2>
 8000f16:	4630      	mov	r0, r6
 8000f18:	e7d4      	b.n	8000ec4 <__udivmoddi4+0x24c>
 8000f1a:	46d6      	mov	lr, sl
 8000f1c:	e77f      	b.n	8000e1e <__udivmoddi4+0x1a6>
 8000f1e:	4463      	add	r3, ip
 8000f20:	3802      	subs	r0, #2
 8000f22:	e74d      	b.n	8000dc0 <__udivmoddi4+0x148>
 8000f24:	4606      	mov	r6, r0
 8000f26:	4623      	mov	r3, r4
 8000f28:	4608      	mov	r0, r1
 8000f2a:	e70f      	b.n	8000d4c <__udivmoddi4+0xd4>
 8000f2c:	3e02      	subs	r6, #2
 8000f2e:	4463      	add	r3, ip
 8000f30:	e730      	b.n	8000d94 <__udivmoddi4+0x11c>
 8000f32:	bf00      	nop

08000f34 <__aeabi_idiv0>:
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop

08000f38 <BMP280_ReadRegister>:

#include "bmp280.h"
#include "i2c.h"

// Helper functions
static HAL_StatusTypeDef BMP280_ReadRegister(uint8_t reg, uint8_t *data, uint16_t length) {
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b086      	sub	sp, #24
 8000f3c:	af04      	add	r7, sp, #16
 8000f3e:	4603      	mov	r3, r0
 8000f40:	6039      	str	r1, [r7, #0]
 8000f42:	71fb      	strb	r3, [r7, #7]
 8000f44:	4613      	mov	r3, r2
 8000f46:	80bb      	strh	r3, [r7, #4]
    return HAL_I2C_Mem_Read(&hi2c1, BMP280_I2C_ADDR, reg, I2C_MEMADD_SIZE_8BIT, data, length, HAL_MAX_DELAY);
 8000f48:	79fb      	ldrb	r3, [r7, #7]
 8000f4a:	b29a      	uxth	r2, r3
 8000f4c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000f50:	9302      	str	r3, [sp, #8]
 8000f52:	88bb      	ldrh	r3, [r7, #4]
 8000f54:	9301      	str	r3, [sp, #4]
 8000f56:	683b      	ldr	r3, [r7, #0]
 8000f58:	9300      	str	r3, [sp, #0]
 8000f5a:	2301      	movs	r3, #1
 8000f5c:	21ee      	movs	r1, #238	@ 0xee
 8000f5e:	4804      	ldr	r0, [pc, #16]	@ (8000f70 <BMP280_ReadRegister+0x38>)
 8000f60:	f003 febc 	bl	8004cdc <HAL_I2C_Mem_Read>
 8000f64:	4603      	mov	r3, r0
}
 8000f66:	4618      	mov	r0, r3
 8000f68:	3708      	adds	r7, #8
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	20000518 	.word	0x20000518

08000f74 <BMP280_WriteRegister>:

static HAL_StatusTypeDef BMP280_WriteRegister(uint8_t reg, uint8_t value) {
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b086      	sub	sp, #24
 8000f78:	af04      	add	r7, sp, #16
 8000f7a:	4603      	mov	r3, r0
 8000f7c:	460a      	mov	r2, r1
 8000f7e:	71fb      	strb	r3, [r7, #7]
 8000f80:	4613      	mov	r3, r2
 8000f82:	71bb      	strb	r3, [r7, #6]
    return HAL_I2C_Mem_Write(&hi2c1, BMP280_I2C_ADDR, reg, I2C_MEMADD_SIZE_8BIT, &value, 1, HAL_MAX_DELAY);
 8000f84:	79fb      	ldrb	r3, [r7, #7]
 8000f86:	b29a      	uxth	r2, r3
 8000f88:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000f8c:	9302      	str	r3, [sp, #8]
 8000f8e:	2301      	movs	r3, #1
 8000f90:	9301      	str	r3, [sp, #4]
 8000f92:	1dbb      	adds	r3, r7, #6
 8000f94:	9300      	str	r3, [sp, #0]
 8000f96:	2301      	movs	r3, #1
 8000f98:	21ee      	movs	r1, #238	@ 0xee
 8000f9a:	4804      	ldr	r0, [pc, #16]	@ (8000fac <BMP280_WriteRegister+0x38>)
 8000f9c:	f003 fda4 	bl	8004ae8 <HAL_I2C_Mem_Write>
 8000fa0:	4603      	mov	r3, r0
}
 8000fa2:	4618      	mov	r0, r3
 8000fa4:	3708      	adds	r7, #8
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	bd80      	pop	{r7, pc}
 8000faa:	bf00      	nop
 8000fac:	20000518 	.word	0x20000518

08000fb0 <BMP280_Init>:

// BMP280 Initialization
uint8_t BMP280_Init(BMP280_t *bmp) {
 8000fb0:	b580      	push	{r7, lr}
 8000fb2:	b08a      	sub	sp, #40	@ 0x28
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6078      	str	r0, [r7, #4]
    uint8_t id;
    uint8_t config[2];

    // Read the BMP280 ID
    if (BMP280_ReadRegister(BMP280_REG_ID, &id, 1) != HAL_OK) {
 8000fb8:	f107 0327 	add.w	r3, r7, #39	@ 0x27
 8000fbc:	2201      	movs	r2, #1
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	20d0      	movs	r0, #208	@ 0xd0
 8000fc2:	f7ff ffb9 	bl	8000f38 <BMP280_ReadRegister>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d001      	beq.n	8000fd0 <BMP280_Init+0x20>
        return HAL_ERROR;
 8000fcc:	2301      	movs	r3, #1
 8000fce:	e0aa      	b.n	8001126 <BMP280_Init+0x176>
    }
    if (id != 0x58) {
 8000fd0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8000fd4:	2b58      	cmp	r3, #88	@ 0x58
 8000fd6:	d001      	beq.n	8000fdc <BMP280_Init+0x2c>
        return HAL_ERROR; // BMP280 ID mismatch
 8000fd8:	2301      	movs	r3, #1
 8000fda:	e0a4      	b.n	8001126 <BMP280_Init+0x176>
    }

    // Reset the sensor
    if (BMP280_WriteRegister(BMP280_REG_RESET, 0xB6) != HAL_OK) {
 8000fdc:	21b6      	movs	r1, #182	@ 0xb6
 8000fde:	20e0      	movs	r0, #224	@ 0xe0
 8000fe0:	f7ff ffc8 	bl	8000f74 <BMP280_WriteRegister>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d001      	beq.n	8000fee <BMP280_Init+0x3e>
        return HAL_ERROR;
 8000fea:	2301      	movs	r3, #1
 8000fec:	e09b      	b.n	8001126 <BMP280_Init+0x176>
    }
    HAL_Delay(100);
 8000fee:	2064      	movs	r0, #100	@ 0x64
 8000ff0:	f002 fd86 	bl	8003b00 <HAL_Delay>

    // Read calibration data
    uint8_t calib[BMP280_CALIB_LENGTH];
    if (BMP280_ReadRegister(BMP280_CALIB_START, calib, BMP280_CALIB_LENGTH) != HAL_OK) {
 8000ff4:	f107 030c 	add.w	r3, r7, #12
 8000ff8:	2218      	movs	r2, #24
 8000ffa:	4619      	mov	r1, r3
 8000ffc:	2088      	movs	r0, #136	@ 0x88
 8000ffe:	f7ff ff9b 	bl	8000f38 <BMP280_ReadRegister>
 8001002:	4603      	mov	r3, r0
 8001004:	2b00      	cmp	r3, #0
 8001006:	d001      	beq.n	800100c <BMP280_Init+0x5c>
        return HAL_ERROR;
 8001008:	2301      	movs	r3, #1
 800100a:	e08c      	b.n	8001126 <BMP280_Init+0x176>
    }

    // Parse calibration data
    bmp->calib.dig_T1 = (uint16_t)(calib[1] << 8 | calib[0]);
 800100c:	7b7b      	ldrb	r3, [r7, #13]
 800100e:	021b      	lsls	r3, r3, #8
 8001010:	b21a      	sxth	r2, r3
 8001012:	7b3b      	ldrb	r3, [r7, #12]
 8001014:	b21b      	sxth	r3, r3
 8001016:	4313      	orrs	r3, r2
 8001018:	b21b      	sxth	r3, r3
 800101a:	b29a      	uxth	r2, r3
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	801a      	strh	r2, [r3, #0]
    bmp->calib.dig_T2 = (int16_t)(calib[3] << 8 | calib[2]);
 8001020:	7bfb      	ldrb	r3, [r7, #15]
 8001022:	021b      	lsls	r3, r3, #8
 8001024:	b21a      	sxth	r2, r3
 8001026:	7bbb      	ldrb	r3, [r7, #14]
 8001028:	b21b      	sxth	r3, r3
 800102a:	4313      	orrs	r3, r2
 800102c:	b21a      	sxth	r2, r3
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	805a      	strh	r2, [r3, #2]
    bmp->calib.dig_T3 = (int16_t)(calib[5] << 8 | calib[4]);
 8001032:	7c7b      	ldrb	r3, [r7, #17]
 8001034:	021b      	lsls	r3, r3, #8
 8001036:	b21a      	sxth	r2, r3
 8001038:	7c3b      	ldrb	r3, [r7, #16]
 800103a:	b21b      	sxth	r3, r3
 800103c:	4313      	orrs	r3, r2
 800103e:	b21a      	sxth	r2, r3
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	809a      	strh	r2, [r3, #4]

    bmp->calib.dig_P1 = (uint16_t)(calib[7] << 8 | calib[6]);
 8001044:	7cfb      	ldrb	r3, [r7, #19]
 8001046:	021b      	lsls	r3, r3, #8
 8001048:	b21a      	sxth	r2, r3
 800104a:	7cbb      	ldrb	r3, [r7, #18]
 800104c:	b21b      	sxth	r3, r3
 800104e:	4313      	orrs	r3, r2
 8001050:	b21b      	sxth	r3, r3
 8001052:	b29a      	uxth	r2, r3
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	80da      	strh	r2, [r3, #6]
    bmp->calib.dig_P2 = (int16_t)(calib[9] << 8 | calib[8]);
 8001058:	7d7b      	ldrb	r3, [r7, #21]
 800105a:	021b      	lsls	r3, r3, #8
 800105c:	b21a      	sxth	r2, r3
 800105e:	7d3b      	ldrb	r3, [r7, #20]
 8001060:	b21b      	sxth	r3, r3
 8001062:	4313      	orrs	r3, r2
 8001064:	b21a      	sxth	r2, r3
 8001066:	687b      	ldr	r3, [r7, #4]
 8001068:	811a      	strh	r2, [r3, #8]
    bmp->calib.dig_P3 = (int16_t)(calib[11] << 8 | calib[10]);
 800106a:	7dfb      	ldrb	r3, [r7, #23]
 800106c:	021b      	lsls	r3, r3, #8
 800106e:	b21a      	sxth	r2, r3
 8001070:	7dbb      	ldrb	r3, [r7, #22]
 8001072:	b21b      	sxth	r3, r3
 8001074:	4313      	orrs	r3, r2
 8001076:	b21a      	sxth	r2, r3
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	815a      	strh	r2, [r3, #10]
    bmp->calib.dig_P4 = (int16_t)(calib[13] << 8 | calib[12]);
 800107c:	7e7b      	ldrb	r3, [r7, #25]
 800107e:	021b      	lsls	r3, r3, #8
 8001080:	b21a      	sxth	r2, r3
 8001082:	7e3b      	ldrb	r3, [r7, #24]
 8001084:	b21b      	sxth	r3, r3
 8001086:	4313      	orrs	r3, r2
 8001088:	b21a      	sxth	r2, r3
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	819a      	strh	r2, [r3, #12]
    bmp->calib.dig_P5 = (int16_t)(calib[15] << 8 | calib[14]);
 800108e:	7efb      	ldrb	r3, [r7, #27]
 8001090:	021b      	lsls	r3, r3, #8
 8001092:	b21a      	sxth	r2, r3
 8001094:	7ebb      	ldrb	r3, [r7, #26]
 8001096:	b21b      	sxth	r3, r3
 8001098:	4313      	orrs	r3, r2
 800109a:	b21a      	sxth	r2, r3
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	81da      	strh	r2, [r3, #14]
    bmp->calib.dig_P6 = (int16_t)(calib[17] << 8 | calib[16]);
 80010a0:	7f7b      	ldrb	r3, [r7, #29]
 80010a2:	021b      	lsls	r3, r3, #8
 80010a4:	b21a      	sxth	r2, r3
 80010a6:	7f3b      	ldrb	r3, [r7, #28]
 80010a8:	b21b      	sxth	r3, r3
 80010aa:	4313      	orrs	r3, r2
 80010ac:	b21a      	sxth	r2, r3
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	821a      	strh	r2, [r3, #16]
    bmp->calib.dig_P7 = (int16_t)(calib[19] << 8 | calib[18]);
 80010b2:	7ffb      	ldrb	r3, [r7, #31]
 80010b4:	021b      	lsls	r3, r3, #8
 80010b6:	b21a      	sxth	r2, r3
 80010b8:	7fbb      	ldrb	r3, [r7, #30]
 80010ba:	b21b      	sxth	r3, r3
 80010bc:	4313      	orrs	r3, r2
 80010be:	b21a      	sxth	r2, r3
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	825a      	strh	r2, [r3, #18]
    bmp->calib.dig_P8 = (int16_t)(calib[21] << 8 | calib[20]);
 80010c4:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 80010c8:	021b      	lsls	r3, r3, #8
 80010ca:	b21a      	sxth	r2, r3
 80010cc:	f897 3020 	ldrb.w	r3, [r7, #32]
 80010d0:	b21b      	sxth	r3, r3
 80010d2:	4313      	orrs	r3, r2
 80010d4:	b21a      	sxth	r2, r3
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	829a      	strh	r2, [r3, #20]
    bmp->calib.dig_P9 = (int16_t)(calib[23] << 8 | calib[22]);
 80010da:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80010de:	021b      	lsls	r3, r3, #8
 80010e0:	b21a      	sxth	r2, r3
 80010e2:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80010e6:	b21b      	sxth	r3, r3
 80010e8:	4313      	orrs	r3, r2
 80010ea:	b21a      	sxth	r2, r3
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	82da      	strh	r2, [r3, #22]

    // Set oversampling and power mode
    config[0] = BMP280_OSRS_T | BMP280_OSRS_P | BMP280_MODE_NORMAL;
 80010f0:	2327      	movs	r3, #39	@ 0x27
 80010f2:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    config[1] = 0xA0; // Standby time 1000ms, filter off
 80010f6:	23a0      	movs	r3, #160	@ 0xa0
 80010f8:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
    if (BMP280_WriteRegister(BMP280_REG_CTRL_MEAS, config[0]) != HAL_OK ||
 80010fc:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8001100:	4619      	mov	r1, r3
 8001102:	20f4      	movs	r0, #244	@ 0xf4
 8001104:	f7ff ff36 	bl	8000f74 <BMP280_WriteRegister>
 8001108:	4603      	mov	r3, r0
 800110a:	2b00      	cmp	r3, #0
 800110c:	d108      	bne.n	8001120 <BMP280_Init+0x170>
        BMP280_WriteRegister(BMP280_REG_CONFIG, config[1]) != HAL_OK) {
 800110e:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8001112:	4619      	mov	r1, r3
 8001114:	20f5      	movs	r0, #245	@ 0xf5
 8001116:	f7ff ff2d 	bl	8000f74 <BMP280_WriteRegister>
 800111a:	4603      	mov	r3, r0
    if (BMP280_WriteRegister(BMP280_REG_CTRL_MEAS, config[0]) != HAL_OK ||
 800111c:	2b00      	cmp	r3, #0
 800111e:	d001      	beq.n	8001124 <BMP280_Init+0x174>
        return HAL_ERROR;
 8001120:	2301      	movs	r3, #1
 8001122:	e000      	b.n	8001126 <BMP280_Init+0x176>
    }

    return HAL_OK;
 8001124:	2300      	movs	r3, #0
}
 8001126:	4618      	mov	r0, r3
 8001128:	3728      	adds	r7, #40	@ 0x28
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}

0800112e <BMP280_CompensateTemperature>:

// BMP280 Temperature Compensation
static int32_t BMP280_CompensateTemperature(BMP280_t *bmp, int32_t adc_T) {
 800112e:	b480      	push	{r7}
 8001130:	b085      	sub	sp, #20
 8001132:	af00      	add	r7, sp, #0
 8001134:	6078      	str	r0, [r7, #4]
 8001136:	6039      	str	r1, [r7, #0]
    int32_t var1, var2;
    var1 = (((adc_T >> 3) - ((int32_t)bmp->calib.dig_T1 << 1)) * ((int32_t)bmp->calib.dig_T2)) >> 11;
 8001138:	683b      	ldr	r3, [r7, #0]
 800113a:	10da      	asrs	r2, r3, #3
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	881b      	ldrh	r3, [r3, #0]
 8001140:	005b      	lsls	r3, r3, #1
 8001142:	1ad3      	subs	r3, r2, r3
 8001144:	687a      	ldr	r2, [r7, #4]
 8001146:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 800114a:	fb02 f303 	mul.w	r3, r2, r3
 800114e:	12db      	asrs	r3, r3, #11
 8001150:	60fb      	str	r3, [r7, #12]
    var2 = (((((adc_T >> 4) - ((int32_t)bmp->calib.dig_T1)) * ((adc_T >> 4) - ((int32_t)bmp->calib.dig_T1))) >> 12) * ((int32_t)bmp->calib.dig_T3)) >> 14;
 8001152:	683b      	ldr	r3, [r7, #0]
 8001154:	111b      	asrs	r3, r3, #4
 8001156:	687a      	ldr	r2, [r7, #4]
 8001158:	8812      	ldrh	r2, [r2, #0]
 800115a:	1a9b      	subs	r3, r3, r2
 800115c:	683a      	ldr	r2, [r7, #0]
 800115e:	1112      	asrs	r2, r2, #4
 8001160:	6879      	ldr	r1, [r7, #4]
 8001162:	8809      	ldrh	r1, [r1, #0]
 8001164:	1a52      	subs	r2, r2, r1
 8001166:	fb02 f303 	mul.w	r3, r2, r3
 800116a:	131b      	asrs	r3, r3, #12
 800116c:	687a      	ldr	r2, [r7, #4]
 800116e:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8001172:	fb02 f303 	mul.w	r3, r2, r3
 8001176:	139b      	asrs	r3, r3, #14
 8001178:	60bb      	str	r3, [r7, #8]
    bmp->t_fine = var1 + var2;
 800117a:	68fa      	ldr	r2, [r7, #12]
 800117c:	68bb      	ldr	r3, [r7, #8]
 800117e:	441a      	add	r2, r3
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	619a      	str	r2, [r3, #24]
    return (bmp->t_fine * 5 + 128) >> 8;
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	699a      	ldr	r2, [r3, #24]
 8001188:	4613      	mov	r3, r2
 800118a:	009b      	lsls	r3, r3, #2
 800118c:	4413      	add	r3, r2
 800118e:	3380      	adds	r3, #128	@ 0x80
 8001190:	121b      	asrs	r3, r3, #8
}
 8001192:	4618      	mov	r0, r3
 8001194:	3714      	adds	r7, #20
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr

0800119e <BMP280_CompensatePressure>:

// BMP280 Pressure Compensation
static uint32_t BMP280_CompensatePressure(BMP280_t *bmp, int32_t adc_P) {
 800119e:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80011a2:	b0ca      	sub	sp, #296	@ 0x128
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
 80011aa:	f8c7 1108 	str.w	r1, [r7, #264]	@ 0x108
    int64_t var1, var2, p;
    var1 = ((int64_t)bmp->t_fine) - 128000;
 80011ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80011b2:	699b      	ldr	r3, [r3, #24]
 80011b4:	17da      	asrs	r2, r3, #31
 80011b6:	461c      	mov	r4, r3
 80011b8:	4615      	mov	r5, r2
 80011ba:	f5b4 3afa 	subs.w	sl, r4, #128000	@ 0x1f400
 80011be:	f145 3bff 	adc.w	fp, r5, #4294967295	@ 0xffffffff
 80011c2:	e9c7 ab48 	strd	sl, fp, [r7, #288]	@ 0x120
    var2 = var1 * var1 * (int64_t)bmp->calib.dig_P6;
 80011c6:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 80011ca:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80011ce:	fb03 f102 	mul.w	r1, r3, r2
 80011d2:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 80011d6:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80011da:	fb02 f303 	mul.w	r3, r2, r3
 80011de:	18ca      	adds	r2, r1, r3
 80011e0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80011e4:	fba3 8903 	umull	r8, r9, r3, r3
 80011e8:	eb02 0309 	add.w	r3, r2, r9
 80011ec:	4699      	mov	r9, r3
 80011ee:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80011f2:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 80011f6:	b21b      	sxth	r3, r3
 80011f8:	17da      	asrs	r2, r3, #31
 80011fa:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80011fe:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8001202:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 8001206:	4603      	mov	r3, r0
 8001208:	fb03 f209 	mul.w	r2, r3, r9
 800120c:	460b      	mov	r3, r1
 800120e:	fb08 f303 	mul.w	r3, r8, r3
 8001212:	4413      	add	r3, r2
 8001214:	4602      	mov	r2, r0
 8001216:	fba8 1202 	umull	r1, r2, r8, r2
 800121a:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800121e:	460a      	mov	r2, r1
 8001220:	f8c7 20c0 	str.w	r2, [r7, #192]	@ 0xc0
 8001224:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8001228:	4413      	add	r3, r2
 800122a:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 800122e:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	@ 0xc0
 8001232:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
 8001236:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
    var2 = var2 + ((var1 * (int64_t)bmp->calib.dig_P5) << 17);
 800123a:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800123e:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8001242:	b21b      	sxth	r3, r3
 8001244:	17da      	asrs	r2, r3, #31
 8001246:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800124a:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 800124e:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001252:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	@ 0xb0
 8001256:	462a      	mov	r2, r5
 8001258:	fb02 f203 	mul.w	r2, r2, r3
 800125c:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8001260:	4621      	mov	r1, r4
 8001262:	fb01 f303 	mul.w	r3, r1, r3
 8001266:	441a      	add	r2, r3
 8001268:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800126c:	4621      	mov	r1, r4
 800126e:	fba3 1301 	umull	r1, r3, r3, r1
 8001272:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8001276:	460b      	mov	r3, r1
 8001278:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800127c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8001280:	18d3      	adds	r3, r2, r3
 8001282:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8001286:	f04f 0000 	mov.w	r0, #0
 800128a:	f04f 0100 	mov.w	r1, #0
 800128e:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 8001292:	462b      	mov	r3, r5
 8001294:	0459      	lsls	r1, r3, #17
 8001296:	4623      	mov	r3, r4
 8001298:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 800129c:	4623      	mov	r3, r4
 800129e:	0458      	lsls	r0, r3, #17
 80012a0:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 80012a4:	1814      	adds	r4, r2, r0
 80012a6:	643c      	str	r4, [r7, #64]	@ 0x40
 80012a8:	414b      	adcs	r3, r1
 80012aa:	647b      	str	r3, [r7, #68]	@ 0x44
 80012ac:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 80012b0:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
    var2 = var2 + (((int64_t)bmp->calib.dig_P4) << 35);
 80012b4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80012b8:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 80012bc:	b21b      	sxth	r3, r3
 80012be:	17da      	asrs	r2, r3, #31
 80012c0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80012c4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80012c8:	f04f 0000 	mov.w	r0, #0
 80012cc:	f04f 0100 	mov.w	r1, #0
 80012d0:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80012d4:	00d9      	lsls	r1, r3, #3
 80012d6:	2000      	movs	r0, #0
 80012d8:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 80012dc:	1814      	adds	r4, r2, r0
 80012de:	63bc      	str	r4, [r7, #56]	@ 0x38
 80012e0:	414b      	adcs	r3, r1
 80012e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80012e4:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 80012e8:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
    var1 = ((var1 * var1 * (int64_t)bmp->calib.dig_P3) >> 8) + ((var1 * (int64_t)bmp->calib.dig_P2) << 12);
 80012ec:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 80012f0:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80012f4:	fb03 f102 	mul.w	r1, r3, r2
 80012f8:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 80012fc:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001300:	fb02 f303 	mul.w	r3, r2, r3
 8001304:	18ca      	adds	r2, r1, r3
 8001306:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800130a:	fba3 1303 	umull	r1, r3, r3, r3
 800130e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8001312:	460b      	mov	r3, r1
 8001314:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 8001318:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800131c:	18d3      	adds	r3, r2, r3
 800131e:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 8001322:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001326:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 800132a:	b21b      	sxth	r3, r3
 800132c:	17da      	asrs	r2, r3, #31
 800132e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8001332:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8001336:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	@ 0xf8
 800133a:	462b      	mov	r3, r5
 800133c:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8001340:	4642      	mov	r2, r8
 8001342:	fb02 f203 	mul.w	r2, r2, r3
 8001346:	464b      	mov	r3, r9
 8001348:	4621      	mov	r1, r4
 800134a:	fb01 f303 	mul.w	r3, r1, r3
 800134e:	4413      	add	r3, r2
 8001350:	4622      	mov	r2, r4
 8001352:	4641      	mov	r1, r8
 8001354:	fba2 1201 	umull	r1, r2, r2, r1
 8001358:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 800135c:	460a      	mov	r2, r1
 800135e:	f8c7 20f0 	str.w	r2, [r7, #240]	@ 0xf0
 8001362:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 8001366:	4413      	add	r3, r2
 8001368:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800136c:	f04f 0000 	mov.w	r0, #0
 8001370:	f04f 0100 	mov.w	r1, #0
 8001374:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	@ 0xf0
 8001378:	4623      	mov	r3, r4
 800137a:	0a18      	lsrs	r0, r3, #8
 800137c:	462b      	mov	r3, r5
 800137e:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001382:	462b      	mov	r3, r5
 8001384:	1219      	asrs	r1, r3, #8
 8001386:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800138a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800138e:	b21b      	sxth	r3, r3
 8001390:	17da      	asrs	r2, r3, #31
 8001392:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001396:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 800139a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800139e:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	@ 0x98
 80013a2:	464a      	mov	r2, r9
 80013a4:	fb02 f203 	mul.w	r2, r2, r3
 80013a8:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 80013ac:	4644      	mov	r4, r8
 80013ae:	fb04 f303 	mul.w	r3, r4, r3
 80013b2:	441a      	add	r2, r3
 80013b4:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80013b8:	4644      	mov	r4, r8
 80013ba:	fba3 4304 	umull	r4, r3, r3, r4
 80013be:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80013c2:	4623      	mov	r3, r4
 80013c4:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80013c8:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 80013cc:	18d3      	adds	r3, r2, r3
 80013ce:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 80013d2:	f04f 0200 	mov.w	r2, #0
 80013d6:	f04f 0300 	mov.w	r3, #0
 80013da:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	@ 0xe8
 80013de:	464c      	mov	r4, r9
 80013e0:	0323      	lsls	r3, r4, #12
 80013e2:	4644      	mov	r4, r8
 80013e4:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 80013e8:	4644      	mov	r4, r8
 80013ea:	0322      	lsls	r2, r4, #12
 80013ec:	1884      	adds	r4, r0, r2
 80013ee:	633c      	str	r4, [r7, #48]	@ 0x30
 80013f0:	eb41 0303 	adc.w	r3, r1, r3
 80013f4:	637b      	str	r3, [r7, #52]	@ 0x34
 80013f6:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 80013fa:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
    var1 = (((((int64_t)1) << 47) + var1)) * ((int64_t)bmp->calib.dig_P1) >> 33;
 80013fe:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001402:	f503 4100 	add.w	r1, r3, #32768	@ 0x8000
 8001406:	f8c7 1094 	str.w	r1, [r7, #148]	@ 0x94
 800140a:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 800140e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001412:	88db      	ldrh	r3, [r3, #6]
 8001414:	b29b      	uxth	r3, r3
 8001416:	2200      	movs	r2, #0
 8001418:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800141c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8001420:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8001424:	462b      	mov	r3, r5
 8001426:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800142a:	4642      	mov	r2, r8
 800142c:	fb02 f203 	mul.w	r2, r2, r3
 8001430:	464b      	mov	r3, r9
 8001432:	4621      	mov	r1, r4
 8001434:	fb01 f303 	mul.w	r3, r1, r3
 8001438:	4413      	add	r3, r2
 800143a:	4622      	mov	r2, r4
 800143c:	4641      	mov	r1, r8
 800143e:	fba2 1201 	umull	r1, r2, r2, r1
 8001442:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 8001446:	460a      	mov	r2, r1
 8001448:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 800144c:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8001450:	4413      	add	r3, r2
 8001452:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8001456:	f04f 0200 	mov.w	r2, #0
 800145a:	f04f 0300 	mov.w	r3, #0
 800145e:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 8001462:	4629      	mov	r1, r5
 8001464:	104a      	asrs	r2, r1, #1
 8001466:	4629      	mov	r1, r5
 8001468:	17cb      	asrs	r3, r1, #31
 800146a:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
    if (var1 == 0) return 0; // avoid division by zero
 800146e:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001472:	4313      	orrs	r3, r2
 8001474:	d101      	bne.n	800147a <BMP280_CompensatePressure+0x2dc>
 8001476:	2300      	movs	r3, #0
 8001478:	e148      	b.n	800170c <BMP280_CompensatePressure+0x56e>
    p = 1048576 - adc_P;
 800147a:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800147e:	f5c3 1380 	rsb	r3, r3, #1048576	@ 0x100000
 8001482:	17da      	asrs	r2, r3, #31
 8001484:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001486:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001488:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 800148c:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
    p = (((p << 31) - var2) * 3125) / var1;
 8001490:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001494:	105b      	asrs	r3, r3, #1
 8001496:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800149a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800149e:	07db      	lsls	r3, r3, #31
 80014a0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80014a4:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 80014a8:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 80014ac:	4621      	mov	r1, r4
 80014ae:	1a89      	subs	r1, r1, r2
 80014b0:	67b9      	str	r1, [r7, #120]	@ 0x78
 80014b2:	4629      	mov	r1, r5
 80014b4:	eb61 0303 	sbc.w	r3, r1, r3
 80014b8:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80014ba:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 80014be:	4622      	mov	r2, r4
 80014c0:	462b      	mov	r3, r5
 80014c2:	1891      	adds	r1, r2, r2
 80014c4:	6239      	str	r1, [r7, #32]
 80014c6:	415b      	adcs	r3, r3
 80014c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80014ca:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80014ce:	4621      	mov	r1, r4
 80014d0:	1851      	adds	r1, r2, r1
 80014d2:	61b9      	str	r1, [r7, #24]
 80014d4:	4629      	mov	r1, r5
 80014d6:	414b      	adcs	r3, r1
 80014d8:	61fb      	str	r3, [r7, #28]
 80014da:	f04f 0200 	mov.w	r2, #0
 80014de:	f04f 0300 	mov.w	r3, #0
 80014e2:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 80014e6:	4649      	mov	r1, r9
 80014e8:	018b      	lsls	r3, r1, #6
 80014ea:	4641      	mov	r1, r8
 80014ec:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80014f0:	4641      	mov	r1, r8
 80014f2:	018a      	lsls	r2, r1, #6
 80014f4:	4641      	mov	r1, r8
 80014f6:	1889      	adds	r1, r1, r2
 80014f8:	6139      	str	r1, [r7, #16]
 80014fa:	4649      	mov	r1, r9
 80014fc:	eb43 0101 	adc.w	r1, r3, r1
 8001500:	6179      	str	r1, [r7, #20]
 8001502:	f04f 0200 	mov.w	r2, #0
 8001506:	f04f 0300 	mov.w	r3, #0
 800150a:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 800150e:	4649      	mov	r1, r9
 8001510:	008b      	lsls	r3, r1, #2
 8001512:	4641      	mov	r1, r8
 8001514:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001518:	4641      	mov	r1, r8
 800151a:	008a      	lsls	r2, r1, #2
 800151c:	4610      	mov	r0, r2
 800151e:	4619      	mov	r1, r3
 8001520:	4603      	mov	r3, r0
 8001522:	4622      	mov	r2, r4
 8001524:	189b      	adds	r3, r3, r2
 8001526:	60bb      	str	r3, [r7, #8]
 8001528:	460b      	mov	r3, r1
 800152a:	462a      	mov	r2, r5
 800152c:	eb42 0303 	adc.w	r3, r2, r3
 8001530:	60fb      	str	r3, [r7, #12]
 8001532:	f04f 0200 	mov.w	r2, #0
 8001536:	f04f 0300 	mov.w	r3, #0
 800153a:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 800153e:	4649      	mov	r1, r9
 8001540:	008b      	lsls	r3, r1, #2
 8001542:	4641      	mov	r1, r8
 8001544:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8001548:	4641      	mov	r1, r8
 800154a:	008a      	lsls	r2, r1, #2
 800154c:	4610      	mov	r0, r2
 800154e:	4619      	mov	r1, r3
 8001550:	4603      	mov	r3, r0
 8001552:	4622      	mov	r2, r4
 8001554:	189b      	adds	r3, r3, r2
 8001556:	673b      	str	r3, [r7, #112]	@ 0x70
 8001558:	462b      	mov	r3, r5
 800155a:	460a      	mov	r2, r1
 800155c:	eb42 0303 	adc.w	r3, r2, r3
 8001560:	677b      	str	r3, [r7, #116]	@ 0x74
 8001562:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001566:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 800156a:	f7ff fb1d 	bl	8000ba8 <__aeabi_ldivmod>
 800156e:	4602      	mov	r2, r0
 8001570:	460b      	mov	r3, r1
 8001572:	e9c7 2344 	strd	r2, r3, [r7, #272]	@ 0x110
    var1 = (((int64_t)bmp->calib.dig_P9) * (p >> 13) * (p >> 13)) >> 25;
 8001576:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800157a:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800157e:	b21b      	sxth	r3, r3
 8001580:	17da      	asrs	r2, r3, #31
 8001582:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001584:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001586:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 800158a:	f04f 0000 	mov.w	r0, #0
 800158e:	f04f 0100 	mov.w	r1, #0
 8001592:	0b50      	lsrs	r0, r2, #13
 8001594:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001598:	1359      	asrs	r1, r3, #13
 800159a:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 800159e:	462b      	mov	r3, r5
 80015a0:	fb00 f203 	mul.w	r2, r0, r3
 80015a4:	4623      	mov	r3, r4
 80015a6:	fb03 f301 	mul.w	r3, r3, r1
 80015aa:	4413      	add	r3, r2
 80015ac:	4622      	mov	r2, r4
 80015ae:	fba2 1200 	umull	r1, r2, r2, r0
 80015b2:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80015b6:	460a      	mov	r2, r1
 80015b8:	f8c7 20d8 	str.w	r2, [r7, #216]	@ 0xd8
 80015bc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80015c0:	4413      	add	r3, r2
 80015c2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 80015c6:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 80015ca:	f04f 0000 	mov.w	r0, #0
 80015ce:	f04f 0100 	mov.w	r1, #0
 80015d2:	0b50      	lsrs	r0, r2, #13
 80015d4:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 80015d8:	1359      	asrs	r1, r3, #13
 80015da:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 80015de:	462b      	mov	r3, r5
 80015e0:	fb00 f203 	mul.w	r2, r0, r3
 80015e4:	4623      	mov	r3, r4
 80015e6:	fb03 f301 	mul.w	r3, r3, r1
 80015ea:	4413      	add	r3, r2
 80015ec:	4622      	mov	r2, r4
 80015ee:	fba2 1200 	umull	r1, r2, r2, r0
 80015f2:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80015f6:	460a      	mov	r2, r1
 80015f8:	f8c7 20d0 	str.w	r2, [r7, #208]	@ 0xd0
 80015fc:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8001600:	4413      	add	r3, r2
 8001602:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8001606:	f04f 0200 	mov.w	r2, #0
 800160a:	f04f 0300 	mov.w	r3, #0
 800160e:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 8001612:	4621      	mov	r1, r4
 8001614:	0e4a      	lsrs	r2, r1, #25
 8001616:	4629      	mov	r1, r5
 8001618:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 800161c:	4629      	mov	r1, r5
 800161e:	164b      	asrs	r3, r1, #25
 8001620:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
    var2 = (((int64_t)bmp->calib.dig_P8) * p) >> 19;
 8001624:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001628:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 800162c:	b21b      	sxth	r3, r3
 800162e:	17da      	asrs	r2, r3, #31
 8001630:	663b      	str	r3, [r7, #96]	@ 0x60
 8001632:	667a      	str	r2, [r7, #100]	@ 0x64
 8001634:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001638:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800163c:	462a      	mov	r2, r5
 800163e:	fb02 f203 	mul.w	r2, r2, r3
 8001642:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8001646:	4621      	mov	r1, r4
 8001648:	fb01 f303 	mul.w	r3, r1, r3
 800164c:	4413      	add	r3, r2
 800164e:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 8001652:	4621      	mov	r1, r4
 8001654:	fba2 1201 	umull	r1, r2, r2, r1
 8001658:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 800165c:	460a      	mov	r2, r1
 800165e:	f8c7 20c8 	str.w	r2, [r7, #200]	@ 0xc8
 8001662:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 8001666:	4413      	add	r3, r2
 8001668:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800166c:	f04f 0200 	mov.w	r2, #0
 8001670:	f04f 0300 	mov.w	r3, #0
 8001674:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	@ 0xc8
 8001678:	4621      	mov	r1, r4
 800167a:	0cca      	lsrs	r2, r1, #19
 800167c:	4629      	mov	r1, r5
 800167e:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8001682:	4629      	mov	r1, r5
 8001684:	14cb      	asrs	r3, r1, #19
 8001686:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
    p = ((p + var1 + var2) >> 8) + (((int64_t)bmp->calib.dig_P7) << 4);
 800168a:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	@ 0x110
 800168e:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001692:	1884      	adds	r4, r0, r2
 8001694:	65bc      	str	r4, [r7, #88]	@ 0x58
 8001696:	eb41 0303 	adc.w	r3, r1, r3
 800169a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800169c:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 80016a0:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 80016a4:	4621      	mov	r1, r4
 80016a6:	1889      	adds	r1, r1, r2
 80016a8:	6539      	str	r1, [r7, #80]	@ 0x50
 80016aa:	4629      	mov	r1, r5
 80016ac:	eb43 0101 	adc.w	r1, r3, r1
 80016b0:	6579      	str	r1, [r7, #84]	@ 0x54
 80016b2:	f04f 0000 	mov.w	r0, #0
 80016b6:	f04f 0100 	mov.w	r1, #0
 80016ba:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 80016be:	4623      	mov	r3, r4
 80016c0:	0a18      	lsrs	r0, r3, #8
 80016c2:	462b      	mov	r3, r5
 80016c4:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 80016c8:	462b      	mov	r3, r5
 80016ca:	1219      	asrs	r1, r3, #8
 80016cc:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80016d0:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80016d4:	b21b      	sxth	r3, r3
 80016d6:	17da      	asrs	r2, r3, #31
 80016d8:	64bb      	str	r3, [r7, #72]	@ 0x48
 80016da:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80016dc:	f04f 0200 	mov.w	r2, #0
 80016e0:	f04f 0300 	mov.w	r3, #0
 80016e4:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	@ 0x48
 80016e8:	464c      	mov	r4, r9
 80016ea:	0123      	lsls	r3, r4, #4
 80016ec:	4644      	mov	r4, r8
 80016ee:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 80016f2:	4644      	mov	r4, r8
 80016f4:	0122      	lsls	r2, r4, #4
 80016f6:	1884      	adds	r4, r0, r2
 80016f8:	603c      	str	r4, [r7, #0]
 80016fa:	eb41 0303 	adc.w	r3, r1, r3
 80016fe:	607b      	str	r3, [r7, #4]
 8001700:	e9d7 3400 	ldrd	r3, r4, [r7]
 8001704:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
    return (uint32_t)p;
 8001708:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
}
 800170c:	4618      	mov	r0, r3
 800170e:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 8001712:	46bd      	mov	sp, r7
 8001714:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08001718 <BMP280_Process_data>:
	}
	BMP280_Process_data(bmp);
	return HAL_OK;
}
// Read Temperature and Pressure
void BMP280_Process_data(BMP280_t *bmp) {
 8001718:	b580      	push	{r7, lr}
 800171a:	b086      	sub	sp, #24
 800171c:	af00      	add	r7, sp, #0
 800171e:	6078      	str	r0, [r7, #4]
	uint8_t *data = bmp->buff;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	331c      	adds	r3, #28
 8001724:	617b      	str	r3, [r7, #20]

	int32_t adc_T = ((int32_t)data[3] << 12) | ((int32_t)data[4] << 4) | (data[5] >> 4);
 8001726:	697b      	ldr	r3, [r7, #20]
 8001728:	3303      	adds	r3, #3
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	031a      	lsls	r2, r3, #12
 800172e:	697b      	ldr	r3, [r7, #20]
 8001730:	3304      	adds	r3, #4
 8001732:	781b      	ldrb	r3, [r3, #0]
 8001734:	011b      	lsls	r3, r3, #4
 8001736:	4313      	orrs	r3, r2
 8001738:	697a      	ldr	r2, [r7, #20]
 800173a:	3205      	adds	r2, #5
 800173c:	7812      	ldrb	r2, [r2, #0]
 800173e:	0912      	lsrs	r2, r2, #4
 8001740:	b2d2      	uxtb	r2, r2
 8001742:	4313      	orrs	r3, r2
 8001744:	613b      	str	r3, [r7, #16]
	int32_t adc_P = ((int32_t)data[0] << 12) | ((int32_t)data[1] << 4) | (data[2] >> 4);
 8001746:	697b      	ldr	r3, [r7, #20]
 8001748:	781b      	ldrb	r3, [r3, #0]
 800174a:	031a      	lsls	r2, r3, #12
 800174c:	697b      	ldr	r3, [r7, #20]
 800174e:	3301      	adds	r3, #1
 8001750:	781b      	ldrb	r3, [r3, #0]
 8001752:	011b      	lsls	r3, r3, #4
 8001754:	4313      	orrs	r3, r2
 8001756:	697a      	ldr	r2, [r7, #20]
 8001758:	3202      	adds	r2, #2
 800175a:	7812      	ldrb	r2, [r2, #0]
 800175c:	0912      	lsrs	r2, r2, #4
 800175e:	b2d2      	uxtb	r2, r2
 8001760:	4313      	orrs	r3, r2
 8001762:	60fb      	str	r3, [r7, #12]

	// Compensate temperature
	bmp->temp = BMP280_CompensateTemperature(bmp, adc_T) / 100.f;
 8001764:	6939      	ldr	r1, [r7, #16]
 8001766:	6878      	ldr	r0, [r7, #4]
 8001768:	f7ff fce1 	bl	800112e <BMP280_CompensateTemperature>
 800176c:	ee07 0a90 	vmov	s15, r0
 8001770:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001774:	eddf 6a0c 	vldr	s13, [pc, #48]	@ 80017a8 <BMP280_Process_data+0x90>
 8001778:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
	// Compensate pressure
	bmp->press = BMP280_CompensatePressure(bmp, adc_P) / 100.0f;
 8001782:	68f9      	ldr	r1, [r7, #12]
 8001784:	6878      	ldr	r0, [r7, #4]
 8001786:	f7ff fd0a 	bl	800119e <BMP280_CompensatePressure>
 800178a:	ee07 0a90 	vmov	s15, r0
 800178e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001792:	eddf 6a05 	vldr	s13, [pc, #20]	@ 80017a8 <BMP280_Process_data+0x90>
 8001796:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
	return;
 80017a0:	bf00      	nop
}
 80017a2:	3718      	adds	r7, #24
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	42c80000 	.word	0x42c80000

080017ac <BMP280_Read_DMA>:

	return HAL_OK;
}

void BMP280_Read_DMA(BMP280_t *bmp)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b084      	sub	sp, #16
 80017b0:	af02      	add	r7, sp, #8
 80017b2:	6078      	str	r0, [r7, #4]
	HAL_I2C_Mem_Read_DMA(&hi2c1, BMP280_I2C_ADDR, BMP280_REG_PRESS_MSB, I2C_MEMADD_SIZE_8BIT, bmp->buff, 6);
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	331c      	adds	r3, #28
 80017b8:	2206      	movs	r2, #6
 80017ba:	9201      	str	r2, [sp, #4]
 80017bc:	9300      	str	r3, [sp, #0]
 80017be:	2301      	movs	r3, #1
 80017c0:	22f7      	movs	r2, #247	@ 0xf7
 80017c2:	21ee      	movs	r1, #238	@ 0xee
 80017c4:	4803      	ldr	r0, [pc, #12]	@ (80017d4 <BMP280_Read_DMA+0x28>)
 80017c6:	f003 fcbb 	bl	8005140 <HAL_I2C_Mem_Read_DMA>
}
 80017ca:	bf00      	nop
 80017cc:	3708      	adds	r7, #8
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	20000518 	.word	0x20000518

080017d8 <ICM20948_WriteRegister>:
#include "i2c.h"

int16_t gyro_offset[3] ={0,0,0};

// Function to write to a register
HAL_StatusTypeDef ICM20948_WriteRegister(I2C_HandleTypeDef *hi2c, uint8_t reg, uint8_t data) {
 80017d8:	b580      	push	{r7, lr}
 80017da:	b086      	sub	sp, #24
 80017dc:	af04      	add	r7, sp, #16
 80017de:	6078      	str	r0, [r7, #4]
 80017e0:	460b      	mov	r3, r1
 80017e2:	70fb      	strb	r3, [r7, #3]
 80017e4:	4613      	mov	r3, r2
 80017e6:	70bb      	strb	r3, [r7, #2]
    return HAL_I2C_Mem_Write(hi2c, ICM20948_ADDR, reg, 1, &data, 1, HAL_MAX_DELAY);
 80017e8:	78fb      	ldrb	r3, [r7, #3]
 80017ea:	b29a      	uxth	r2, r3
 80017ec:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80017f0:	9302      	str	r3, [sp, #8]
 80017f2:	2301      	movs	r3, #1
 80017f4:	9301      	str	r3, [sp, #4]
 80017f6:	1cbb      	adds	r3, r7, #2
 80017f8:	9300      	str	r3, [sp, #0]
 80017fa:	2301      	movs	r3, #1
 80017fc:	21d0      	movs	r1, #208	@ 0xd0
 80017fe:	6878      	ldr	r0, [r7, #4]
 8001800:	f003 f972 	bl	8004ae8 <HAL_I2C_Mem_Write>
 8001804:	4603      	mov	r3, r0
}
 8001806:	4618      	mov	r0, r3
 8001808:	3708      	adds	r7, #8
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}

0800180e <ICM20948_ReadRegister>:

// Function to read from a register
HAL_StatusTypeDef ICM20948_ReadRegister(I2C_HandleTypeDef *hi2c, uint8_t reg, uint8_t *data) {
 800180e:	b580      	push	{r7, lr}
 8001810:	b088      	sub	sp, #32
 8001812:	af04      	add	r7, sp, #16
 8001814:	60f8      	str	r0, [r7, #12]
 8001816:	460b      	mov	r3, r1
 8001818:	607a      	str	r2, [r7, #4]
 800181a:	72fb      	strb	r3, [r7, #11]
    return HAL_I2C_Mem_Read(hi2c, ICM20948_ADDR, reg, 1, data, 1, HAL_MAX_DELAY);
 800181c:	7afb      	ldrb	r3, [r7, #11]
 800181e:	b29a      	uxth	r2, r3
 8001820:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001824:	9302      	str	r3, [sp, #8]
 8001826:	2301      	movs	r3, #1
 8001828:	9301      	str	r3, [sp, #4]
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	9300      	str	r3, [sp, #0]
 800182e:	2301      	movs	r3, #1
 8001830:	21d0      	movs	r1, #208	@ 0xd0
 8001832:	68f8      	ldr	r0, [r7, #12]
 8001834:	f003 fa52 	bl	8004cdc <HAL_I2C_Mem_Read>
 8001838:	4603      	mov	r3, r0
}
 800183a:	4618      	mov	r0, r3
 800183c:	3710      	adds	r7, #16
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}

08001842 <ICM20948_SwitchBank>:

// Function to switch bank
HAL_StatusTypeDef ICM20948_SwitchBank(I2C_HandleTypeDef *hi2c, uint8_t bank) {
 8001842:	b580      	push	{r7, lr}
 8001844:	b082      	sub	sp, #8
 8001846:	af00      	add	r7, sp, #0
 8001848:	6078      	str	r0, [r7, #4]
 800184a:	460b      	mov	r3, r1
 800184c:	70fb      	strb	r3, [r7, #3]
    return ICM20948_WriteRegister(hi2c, ICM20948_REG_BANK_SEL, bank);
 800184e:	78fb      	ldrb	r3, [r7, #3]
 8001850:	461a      	mov	r2, r3
 8001852:	217f      	movs	r1, #127	@ 0x7f
 8001854:	6878      	ldr	r0, [r7, #4]
 8001856:	f7ff ffbf 	bl	80017d8 <ICM20948_WriteRegister>
 800185a:	4603      	mov	r3, r0
}
 800185c:	4618      	mov	r0, r3
 800185e:	3708      	adds	r7, #8
 8001860:	46bd      	mov	sp, r7
 8001862:	bd80      	pop	{r7, pc}

08001864 <ICM20948_Init>:

// Initialization function
HAL_StatusTypeDef ICM20948_Init(void) {
 8001864:	b580      	push	{r7, lr}
 8001866:	b086      	sub	sp, #24
 8001868:	af00      	add	r7, sp, #0
    uint8_t data;

    // Reset ICM20948
    ICM20948_WriteRegister(&hi2c1, ICM20948_REG_BANK_SEL, ICM20948_USER_BANK_0);
 800186a:	2200      	movs	r2, #0
 800186c:	217f      	movs	r1, #127	@ 0x7f
 800186e:	4841      	ldr	r0, [pc, #260]	@ (8001974 <ICM20948_Init+0x110>)
 8001870:	f7ff ffb2 	bl	80017d8 <ICM20948_WriteRegister>
    ICM20948_WriteRegister(&hi2c1, ICM20948_PWR_MGMT_1, 0x80); // Reset device
 8001874:	2280      	movs	r2, #128	@ 0x80
 8001876:	2106      	movs	r1, #6
 8001878:	483e      	ldr	r0, [pc, #248]	@ (8001974 <ICM20948_Init+0x110>)
 800187a:	f7ff ffad 	bl	80017d8 <ICM20948_WriteRegister>
    HAL_Delay(10);
 800187e:	200a      	movs	r0, #10
 8001880:	f002 f93e 	bl	8003b00 <HAL_Delay>

    // Wake up ICM20948
    ICM20948_WriteRegister(&hi2c1, ICM20948_PWR_MGMT_1, 0x01); // Enable clock
 8001884:	2201      	movs	r2, #1
 8001886:	2106      	movs	r1, #6
 8001888:	483a      	ldr	r0, [pc, #232]	@ (8001974 <ICM20948_Init+0x110>)
 800188a:	f7ff ffa5 	bl	80017d8 <ICM20948_WriteRegister>
    //ICM20948_WriteRegister(&hi2c1, ICM20948_PWR_MGMT_2, 0x00); // Enable all
    //ICM20948_SwitchBank(&hi2c1, ICM20948_USER_BANK_2);
    ICM20948_WriteRegister(&hi2c1, ICM20948_REG_BANK_SEL, ICM20948_USER_BANK_2);
 800188e:	2220      	movs	r2, #32
 8001890:	217f      	movs	r1, #127	@ 0x7f
 8001892:	4838      	ldr	r0, [pc, #224]	@ (8001974 <ICM20948_Init+0x110>)
 8001894:	f7ff ffa0 	bl	80017d8 <ICM20948_WriteRegister>

    // Configure gyroscope
    ICM20948_WriteRegister(&hi2c1, ICM20948_GYRO_SMPLRT_DIV, 0x07);
 8001898:	2207      	movs	r2, #7
 800189a:	2100      	movs	r1, #0
 800189c:	4835      	ldr	r0, [pc, #212]	@ (8001974 <ICM20948_Init+0x110>)
 800189e:	f7ff ff9b 	bl	80017d8 <ICM20948_WriteRegister>
    ICM20948_WriteRegister(&hi2c1, ICM20948_GYRO_CONFIG,
 80018a2:	2235      	movs	r2, #53	@ 0x35
 80018a4:	2101      	movs	r1, #1
 80018a6:	4833      	ldr	r0, [pc, #204]	@ (8001974 <ICM20948_Init+0x110>)
 80018a8:	f7ff ff96 	bl	80017d8 <ICM20948_WriteRegister>
                      REG_VAL_BIT_GYRO_DLPCFG_6 | REG_VAL_BIT_GYRO_FS_1000DPS | REG_VAL_BIT_GYRO_DLPF);
    // Configure accelerometer
    ICM20948_WriteRegister(&hi2c1, ICM20948_ACCEL_SMPLRT_DIV,  0x07);
 80018ac:	2207      	movs	r2, #7
 80018ae:	2111      	movs	r1, #17
 80018b0:	4830      	ldr	r0, [pc, #192]	@ (8001974 <ICM20948_Init+0x110>)
 80018b2:	f7ff ff91 	bl	80017d8 <ICM20948_WriteRegister>
    ICM20948_WriteRegister(&hi2c1, ICM20948_ACCEL_CONFIG,
 80018b6:	2231      	movs	r2, #49	@ 0x31
 80018b8:	2114      	movs	r1, #20
 80018ba:	482e      	ldr	r0, [pc, #184]	@ (8001974 <ICM20948_Init+0x110>)
 80018bc:	f7ff ff8c 	bl	80017d8 <ICM20948_WriteRegister>
                      REG_VAL_BIT_ACCEL_DLPCFG_6 | REG_VAL_BIT_ACCEL_FS_2g | REG_VAL_BIT_ACCEL_DLPF);

    /* user bank 0 register */
    ICM20948_WriteRegister(&hi2c1, ICM20948_REG_BANK_SEL, ICM20948_USER_BANK_0);
 80018c0:	2200      	movs	r2, #0
 80018c2:	217f      	movs	r1, #127	@ 0x7f
 80018c4:	482b      	ldr	r0, [pc, #172]	@ (8001974 <ICM20948_Init+0x110>)
 80018c6:	f7ff ff87 	bl	80017d8 <ICM20948_WriteRegister>
    HAL_Delay(10);
 80018ca:	200a      	movs	r0, #10
 80018cc:	f002 f918 	bl	8003b00 <HAL_Delay>

    // Verify WHO_AM_I
    ICM20948_ReadRegister(&hi2c1, ICM20948_WHO_AM_I, &data);
 80018d0:	1dfb      	adds	r3, r7, #7
 80018d2:	461a      	mov	r2, r3
 80018d4:	2100      	movs	r1, #0
 80018d6:	4827      	ldr	r0, [pc, #156]	@ (8001974 <ICM20948_Init+0x110>)
 80018d8:	f7ff ff99 	bl	800180e <ICM20948_ReadRegister>
    if (data != 0xEA) {
 80018dc:	79fb      	ldrb	r3, [r7, #7]
 80018de:	2bea      	cmp	r3, #234	@ 0xea
 80018e0:	d001      	beq.n	80018e6 <ICM20948_Init+0x82>
        return HAL_ERROR; // Failed to detect ICM20948
 80018e2:	2301      	movs	r3, #1
 80018e4:	e041      	b.n	800196a <ICM20948_Init+0x106>
    }

    uint8_t i;
    int16_t s16Gx = 0, s16Gy = 0, s16Gz = 0;
 80018e6:	2300      	movs	r3, #0
 80018e8:	80bb      	strh	r3, [r7, #4]
 80018ea:	2300      	movs	r3, #0
 80018ec:	807b      	strh	r3, [r7, #2]
 80018ee:	2300      	movs	r3, #0
 80018f0:	803b      	strh	r3, [r7, #0]
    int32_t s32TempGx = 0, s32TempGy = 0, s32TempGz = 0;
 80018f2:	2300      	movs	r3, #0
 80018f4:	613b      	str	r3, [r7, #16]
 80018f6:	2300      	movs	r3, #0
 80018f8:	60fb      	str	r3, [r7, #12]
 80018fa:	2300      	movs	r3, #0
 80018fc:	60bb      	str	r3, [r7, #8]
	for(i = 0; i < 32; i ++)
 80018fe:	2300      	movs	r3, #0
 8001900:	75fb      	strb	r3, [r7, #23]
 8001902:	e01d      	b.n	8001940 <ICM20948_Init+0xdc>
	{
		icm20948GyroRead(&s16Gx, &s16Gy, &s16Gz);
 8001904:	463a      	mov	r2, r7
 8001906:	1cb9      	adds	r1, r7, #2
 8001908:	1d3b      	adds	r3, r7, #4
 800190a:	4618      	mov	r0, r3
 800190c:	f000 f9b2 	bl	8001c74 <icm20948GyroRead>
		s32TempGx += s16Gx;
 8001910:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 8001914:	461a      	mov	r2, r3
 8001916:	693b      	ldr	r3, [r7, #16]
 8001918:	4413      	add	r3, r2
 800191a:	613b      	str	r3, [r7, #16]
		s32TempGy += s16Gy;
 800191c:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8001920:	461a      	mov	r2, r3
 8001922:	68fb      	ldr	r3, [r7, #12]
 8001924:	4413      	add	r3, r2
 8001926:	60fb      	str	r3, [r7, #12]
		s32TempGz += s16Gz;
 8001928:	f9b7 3000 	ldrsh.w	r3, [r7]
 800192c:	461a      	mov	r2, r3
 800192e:	68bb      	ldr	r3, [r7, #8]
 8001930:	4413      	add	r3, r2
 8001932:	60bb      	str	r3, [r7, #8]
		HAL_Delay(10);
 8001934:	200a      	movs	r0, #10
 8001936:	f002 f8e3 	bl	8003b00 <HAL_Delay>
	for(i = 0; i < 32; i ++)
 800193a:	7dfb      	ldrb	r3, [r7, #23]
 800193c:	3301      	adds	r3, #1
 800193e:	75fb      	strb	r3, [r7, #23]
 8001940:	7dfb      	ldrb	r3, [r7, #23]
 8001942:	2b1f      	cmp	r3, #31
 8001944:	d9de      	bls.n	8001904 <ICM20948_Init+0xa0>
	}
	gyro_offset[0] = s32TempGx >> 5;
 8001946:	693b      	ldr	r3, [r7, #16]
 8001948:	115b      	asrs	r3, r3, #5
 800194a:	b21a      	sxth	r2, r3
 800194c:	4b0a      	ldr	r3, [pc, #40]	@ (8001978 <ICM20948_Init+0x114>)
 800194e:	801a      	strh	r2, [r3, #0]
	gyro_offset[1] = s32TempGy >> 5;
 8001950:	68fb      	ldr	r3, [r7, #12]
 8001952:	115b      	asrs	r3, r3, #5
 8001954:	b21a      	sxth	r2, r3
 8001956:	4b08      	ldr	r3, [pc, #32]	@ (8001978 <ICM20948_Init+0x114>)
 8001958:	805a      	strh	r2, [r3, #2]
	gyro_offset[2] = s32TempGz >> 5;
 800195a:	68bb      	ldr	r3, [r7, #8]
 800195c:	115b      	asrs	r3, r3, #5
 800195e:	b21a      	sxth	r2, r3
 8001960:	4b05      	ldr	r3, [pc, #20]	@ (8001978 <ICM20948_Init+0x114>)
 8001962:	809a      	strh	r2, [r3, #4]

    return Magnetometer_Init();
 8001964:	f000 f8b2 	bl	8001acc <Magnetometer_Init>
 8001968:	4603      	mov	r3, r0
}
 800196a:	4618      	mov	r0, r3
 800196c:	3718      	adds	r7, #24
 800196e:	46bd      	mov	sp, r7
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	20000518 	.word	0x20000518
 8001978:	200002a4 	.word	0x200002a4

0800197c <ICM20948_ReadDMA>:
	*ps16Z = s32OutBuf[2] - gstGyroOffset.s16Z;
	*/
	return;
}

void ICM20948_ReadDMA(ICM20948_t* imu_data) {
 800197c:	b580      	push	{r7, lr}
 800197e:	b084      	sub	sp, #16
 8001980:	af02      	add	r7, sp, #8
 8001982:	6078      	str	r0, [r7, #4]
    // Trigger DMA read for accel and gyro data (14 bytes total)
    HAL_I2C_Mem_Read_DMA(&hi2c1, ICM20948_ADDR, ICM20948_ACCEL_XOUT_H, 1, imu_data->acc_gyro_buff, 14);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	220e      	movs	r2, #14
 8001988:	9201      	str	r2, [sp, #4]
 800198a:	9300      	str	r3, [sp, #0]
 800198c:	2301      	movs	r3, #1
 800198e:	222d      	movs	r2, #45	@ 0x2d
 8001990:	21d0      	movs	r1, #208	@ 0xd0
 8001992:	4803      	ldr	r0, [pc, #12]	@ (80019a0 <ICM20948_ReadDMA+0x24>)
 8001994:	f003 fbd4 	bl	8005140 <HAL_I2C_Mem_Read_DMA>
}
 8001998:	bf00      	nop
 800199a:	3708      	adds	r7, #8
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}
 80019a0:	20000518 	.word	0x20000518

080019a4 <ICM20948_Process_Gyro_data>:
void ICM20948_Process_Gyro_data(ICM20948_t* imu_data)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b085      	sub	sp, #20
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
	uint8_t *buff = imu_data->acc_gyro_buff;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	60fb      	str	r3, [r7, #12]
	// Read Accelerometer Data
	imu_data->acce[0] = (int16_t)((buff[0] << 8) | buff[1]) / 16384.0f; // Convert raw data to g
 80019b0:	68fb      	ldr	r3, [r7, #12]
 80019b2:	781b      	ldrb	r3, [r3, #0]
 80019b4:	021b      	lsls	r3, r3, #8
 80019b6:	b21a      	sxth	r2, r3
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	3301      	adds	r3, #1
 80019bc:	781b      	ldrb	r3, [r3, #0]
 80019be:	b21b      	sxth	r3, r3
 80019c0:	4313      	orrs	r3, r2
 80019c2:	b21b      	sxth	r3, r3
 80019c4:	ee07 3a90 	vmov	s15, r3
 80019c8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019cc:	eddf 6a3d 	vldr	s13, [pc, #244]	@ 8001ac4 <ICM20948_Process_Gyro_data+0x120>
 80019d0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	edc3 7a05 	vstr	s15, [r3, #20]
	imu_data->acce[1] = (int16_t)((buff[2] << 8) | buff[3]) / 16384.0f;
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	3302      	adds	r3, #2
 80019de:	781b      	ldrb	r3, [r3, #0]
 80019e0:	021b      	lsls	r3, r3, #8
 80019e2:	b21a      	sxth	r2, r3
 80019e4:	68fb      	ldr	r3, [r7, #12]
 80019e6:	3303      	adds	r3, #3
 80019e8:	781b      	ldrb	r3, [r3, #0]
 80019ea:	b21b      	sxth	r3, r3
 80019ec:	4313      	orrs	r3, r2
 80019ee:	b21b      	sxth	r3, r3
 80019f0:	ee07 3a90 	vmov	s15, r3
 80019f4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019f8:	eddf 6a32 	vldr	s13, [pc, #200]	@ 8001ac4 <ICM20948_Process_Gyro_data+0x120>
 80019fc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	edc3 7a06 	vstr	s15, [r3, #24]
	imu_data->acce[2] = (int16_t)((buff[4] << 8) | buff[5]) / 16384.0f;
 8001a06:	68fb      	ldr	r3, [r7, #12]
 8001a08:	3304      	adds	r3, #4
 8001a0a:	781b      	ldrb	r3, [r3, #0]
 8001a0c:	021b      	lsls	r3, r3, #8
 8001a0e:	b21a      	sxth	r2, r3
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	3305      	adds	r3, #5
 8001a14:	781b      	ldrb	r3, [r3, #0]
 8001a16:	b21b      	sxth	r3, r3
 8001a18:	4313      	orrs	r3, r2
 8001a1a:	b21b      	sxth	r3, r3
 8001a1c:	ee07 3a90 	vmov	s15, r3
 8001a20:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a24:	eddf 6a27 	vldr	s13, [pc, #156]	@ 8001ac4 <ICM20948_Process_Gyro_data+0x120>
 8001a28:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	edc3 7a07 	vstr	s15, [r3, #28]

	// Read Gyroscope Data
	imu_data->gyro[0] = (int16_t)((buff[8] << 8) | buff[9]) / 131.0f; // Convert raw data to dps
 8001a32:	68fb      	ldr	r3, [r7, #12]
 8001a34:	3308      	adds	r3, #8
 8001a36:	781b      	ldrb	r3, [r3, #0]
 8001a38:	021b      	lsls	r3, r3, #8
 8001a3a:	b21a      	sxth	r2, r3
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	3309      	adds	r3, #9
 8001a40:	781b      	ldrb	r3, [r3, #0]
 8001a42:	b21b      	sxth	r3, r3
 8001a44:	4313      	orrs	r3, r2
 8001a46:	b21b      	sxth	r3, r3
 8001a48:	ee07 3a90 	vmov	s15, r3
 8001a4c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a50:	eddf 6a1d 	vldr	s13, [pc, #116]	@ 8001ac8 <ICM20948_Process_Gyro_data+0x124>
 8001a54:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a58:	687b      	ldr	r3, [r7, #4]
 8001a5a:	edc3 7a08 	vstr	s15, [r3, #32]
	imu_data->gyro[1] = (int16_t)((buff[10] << 8) | buff[11]) / 131.0f;
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	330a      	adds	r3, #10
 8001a62:	781b      	ldrb	r3, [r3, #0]
 8001a64:	021b      	lsls	r3, r3, #8
 8001a66:	b21a      	sxth	r2, r3
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	330b      	adds	r3, #11
 8001a6c:	781b      	ldrb	r3, [r3, #0]
 8001a6e:	b21b      	sxth	r3, r3
 8001a70:	4313      	orrs	r3, r2
 8001a72:	b21b      	sxth	r3, r3
 8001a74:	ee07 3a90 	vmov	s15, r3
 8001a78:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001a7c:	eddf 6a12 	vldr	s13, [pc, #72]	@ 8001ac8 <ICM20948_Process_Gyro_data+0x124>
 8001a80:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
	imu_data->gyro[2] = (int16_t)((buff[12] << 8) | buff[13]) / 131.0f;
 8001a8a:	68fb      	ldr	r3, [r7, #12]
 8001a8c:	330c      	adds	r3, #12
 8001a8e:	781b      	ldrb	r3, [r3, #0]
 8001a90:	021b      	lsls	r3, r3, #8
 8001a92:	b21a      	sxth	r2, r3
 8001a94:	68fb      	ldr	r3, [r7, #12]
 8001a96:	330d      	adds	r3, #13
 8001a98:	781b      	ldrb	r3, [r3, #0]
 8001a9a:	b21b      	sxth	r3, r3
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	b21b      	sxth	r3, r3
 8001aa0:	ee07 3a90 	vmov	s15, r3
 8001aa4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001aa8:	eddf 6a07 	vldr	s13, [pc, #28]	@ 8001ac8 <ICM20948_Process_Gyro_data+0x124>
 8001aac:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28

}
 8001ab6:	bf00      	nop
 8001ab8:	3714      	adds	r7, #20
 8001aba:	46bd      	mov	sp, r7
 8001abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac0:	4770      	bx	lr
 8001ac2:	bf00      	nop
 8001ac4:	46800000 	.word	0x46800000
 8001ac8:	43030000 	.word	0x43030000

08001acc <Magnetometer_Init>:

uint8_t Magnetometer_Init(void)
{
 8001acc:	b580      	push	{r7, lr}
 8001ace:	b086      	sub	sp, #24
 8001ad0:	af04      	add	r7, sp, #16
	uint8_t mag_data;

	// Switch to Bank 0
	ICM20948_SwitchBank(&hi2c1, ICM20948_USER_BANK_0);
 8001ad2:	2100      	movs	r1, #0
 8001ad4:	481f      	ldr	r0, [pc, #124]	@ (8001b54 <Magnetometer_Init+0x88>)
 8001ad6:	f7ff feb4 	bl	8001842 <ICM20948_SwitchBank>

	// Enable I2C bypass mode to directly access the magnetometer
	ICM20948_WriteRegister(&hi2c1, REG_ADD_INT_PIN_CFG, REG_VAL_BIT_I2C_BYPASS_EN);
 8001ada:	2202      	movs	r2, #2
 8001adc:	210f      	movs	r1, #15
 8001ade:	481d      	ldr	r0, [pc, #116]	@ (8001b54 <Magnetometer_Init+0x88>)
 8001ae0:	f7ff fe7a 	bl	80017d8 <ICM20948_WriteRegister>

	// Wait briefly to stabilize
	HAL_Delay(10);
 8001ae4:	200a      	movs	r0, #10
 8001ae6:	f002 f80b 	bl	8003b00 <HAL_Delay>

	// Check magnetometer WHO_AM_I register directly
	HAL_StatusTypeDef status = HAL_I2C_Mem_Read(&hi2c1, ICM20948_MAG_ADDR, AK09916_WIA2, 1, &mag_data, 1, HAL_MAX_DELAY);
 8001aea:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001aee:	9302      	str	r3, [sp, #8]
 8001af0:	2301      	movs	r3, #1
 8001af2:	9301      	str	r3, [sp, #4]
 8001af4:	1dbb      	adds	r3, r7, #6
 8001af6:	9300      	str	r3, [sp, #0]
 8001af8:	2301      	movs	r3, #1
 8001afa:	2201      	movs	r2, #1
 8001afc:	2118      	movs	r1, #24
 8001afe:	4815      	ldr	r0, [pc, #84]	@ (8001b54 <Magnetometer_Init+0x88>)
 8001b00:	f003 f8ec 	bl	8004cdc <HAL_I2C_Mem_Read>
 8001b04:	4603      	mov	r3, r0
 8001b06:	71fb      	strb	r3, [r7, #7]
	if (status != HAL_OK || mag_data != 0x09) {
 8001b08:	79fb      	ldrb	r3, [r7, #7]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	d102      	bne.n	8001b14 <Magnetometer_Init+0x48>
 8001b0e:	79bb      	ldrb	r3, [r7, #6]
 8001b10:	2b09      	cmp	r3, #9
 8001b12:	d001      	beq.n	8001b18 <Magnetometer_Init+0x4c>
		return HAL_ERROR; // Magnetometer not detected
 8001b14:	2301      	movs	r3, #1
 8001b16:	e019      	b.n	8001b4c <Magnetometer_Init+0x80>
	}

	// Configure the magnetometer to continuous measurement mode
	uint8_t mag_ctrl_data = AK09916_CNTL2_MODE_CONT;
 8001b18:	2308      	movs	r3, #8
 8001b1a:	717b      	strb	r3, [r7, #5]
	status = HAL_I2C_Mem_Write(&hi2c1, ICM20948_MAG_ADDR, AK09916_CNTL2, 1, &mag_ctrl_data, 1, HAL_MAX_DELAY);
 8001b1c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001b20:	9302      	str	r3, [sp, #8]
 8001b22:	2301      	movs	r3, #1
 8001b24:	9301      	str	r3, [sp, #4]
 8001b26:	1d7b      	adds	r3, r7, #5
 8001b28:	9300      	str	r3, [sp, #0]
 8001b2a:	2301      	movs	r3, #1
 8001b2c:	2231      	movs	r2, #49	@ 0x31
 8001b2e:	2118      	movs	r1, #24
 8001b30:	4808      	ldr	r0, [pc, #32]	@ (8001b54 <Magnetometer_Init+0x88>)
 8001b32:	f002 ffd9 	bl	8004ae8 <HAL_I2C_Mem_Write>
 8001b36:	4603      	mov	r3, r0
 8001b38:	71fb      	strb	r3, [r7, #7]
	if (status != HAL_OK) {
 8001b3a:	79fb      	ldrb	r3, [r7, #7]
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	d001      	beq.n	8001b44 <Magnetometer_Init+0x78>
		return HAL_ERROR; // Failed to configure magnetometer
 8001b40:	2301      	movs	r3, #1
 8001b42:	e003      	b.n	8001b4c <Magnetometer_Init+0x80>
	}

	// Wait for the magnetometer to stabilize
	HAL_Delay(10);
 8001b44:	200a      	movs	r0, #10
 8001b46:	f001 ffdb 	bl	8003b00 <HAL_Delay>

	return HAL_OK; // Magnetometer initialized successfully
 8001b4a:	2300      	movs	r3, #0
}
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	3708      	adds	r7, #8
 8001b50:	46bd      	mov	sp, r7
 8001b52:	bd80      	pop	{r7, pc}
 8001b54:	20000518 	.word	0x20000518

08001b58 <Magnetometer_ReadDMA>:

    return HAL_OK; // Success
}


void Magnetometer_ReadDMA(ICM20948_t* imu_data) {
 8001b58:	b580      	push	{r7, lr}
 8001b5a:	b084      	sub	sp, #16
 8001b5c:	af02      	add	r7, sp, #8
 8001b5e:	6078      	str	r0, [r7, #4]
    // Trigger DMA read for magnetic data
    HAL_I2C_Mem_Read_DMA(&hi2c1, ICM20948_MAG_ADDR, AK09916_HXL, 1, imu_data->magn_buff, 6);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	330e      	adds	r3, #14
 8001b64:	2206      	movs	r2, #6
 8001b66:	9201      	str	r2, [sp, #4]
 8001b68:	9300      	str	r3, [sp, #0]
 8001b6a:	2301      	movs	r3, #1
 8001b6c:	2211      	movs	r2, #17
 8001b6e:	2118      	movs	r1, #24
 8001b70:	4803      	ldr	r0, [pc, #12]	@ (8001b80 <Magnetometer_ReadDMA+0x28>)
 8001b72:	f003 fae5 	bl	8005140 <HAL_I2C_Mem_Read_DMA>
}
 8001b76:	bf00      	nop
 8001b78:	3708      	adds	r7, #8
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	bd80      	pop	{r7, pc}
 8001b7e:	bf00      	nop
 8001b80:	20000518 	.word	0x20000518

08001b84 <ICM20948_Process_Mage_data>:

void ICM20948_Process_Mage_data(ICM20948_t* imu_data)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b085      	sub	sp, #20
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
	uint8_t *buff = imu_data->magn_buff;
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	330e      	adds	r3, #14
 8001b90:	60fb      	str	r3, [r7, #12]
	float *mag = imu_data->mage;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	332c      	adds	r3, #44	@ 0x2c
 8001b96:	60bb      	str	r3, [r7, #8]
	// Read Magnetometer Data
	mag[0] = (int16_t)((buff[1] << 8) | buff[0]) * 0.15f; // Convert raw data to µT
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	3301      	adds	r3, #1
 8001b9c:	781b      	ldrb	r3, [r3, #0]
 8001b9e:	021b      	lsls	r3, r3, #8
 8001ba0:	b21a      	sxth	r2, r3
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	781b      	ldrb	r3, [r3, #0]
 8001ba6:	b21b      	sxth	r3, r3
 8001ba8:	4313      	orrs	r3, r2
 8001baa:	b21b      	sxth	r3, r3
 8001bac:	ee07 3a90 	vmov	s15, r3
 8001bb0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001bb4:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8001c2c <ICM20948_Process_Mage_data+0xa8>
 8001bb8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001bbc:	68bb      	ldr	r3, [r7, #8]
 8001bbe:	edc3 7a00 	vstr	s15, [r3]
	mag[1] = (int16_t)((buff[3] << 8) | buff[2]) * 0.15f;
 8001bc2:	68fb      	ldr	r3, [r7, #12]
 8001bc4:	3303      	adds	r3, #3
 8001bc6:	781b      	ldrb	r3, [r3, #0]
 8001bc8:	021b      	lsls	r3, r3, #8
 8001bca:	b21a      	sxth	r2, r3
 8001bcc:	68fb      	ldr	r3, [r7, #12]
 8001bce:	3302      	adds	r3, #2
 8001bd0:	781b      	ldrb	r3, [r3, #0]
 8001bd2:	b21b      	sxth	r3, r3
 8001bd4:	4313      	orrs	r3, r2
 8001bd6:	b21b      	sxth	r3, r3
 8001bd8:	ee07 3a90 	vmov	s15, r3
 8001bdc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001be0:	68bb      	ldr	r3, [r7, #8]
 8001be2:	3304      	adds	r3, #4
 8001be4:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8001c2c <ICM20948_Process_Mage_data+0xa8>
 8001be8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001bec:	edc3 7a00 	vstr	s15, [r3]
	mag[2] = (int16_t)((buff[5] << 8) | buff[4]) * 0.15f;
 8001bf0:	68fb      	ldr	r3, [r7, #12]
 8001bf2:	3305      	adds	r3, #5
 8001bf4:	781b      	ldrb	r3, [r3, #0]
 8001bf6:	021b      	lsls	r3, r3, #8
 8001bf8:	b21a      	sxth	r2, r3
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	3304      	adds	r3, #4
 8001bfe:	781b      	ldrb	r3, [r3, #0]
 8001c00:	b21b      	sxth	r3, r3
 8001c02:	4313      	orrs	r3, r2
 8001c04:	b21b      	sxth	r3, r3
 8001c06:	ee07 3a90 	vmov	s15, r3
 8001c0a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001c0e:	68bb      	ldr	r3, [r7, #8]
 8001c10:	3308      	adds	r3, #8
 8001c12:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8001c2c <ICM20948_Process_Mage_data+0xa8>
 8001c16:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c1a:	edc3 7a00 	vstr	s15, [r3]
}
 8001c1e:	bf00      	nop
 8001c20:	3714      	adds	r7, #20
 8001c22:	46bd      	mov	sp, r7
 8001c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c28:	4770      	bx	lr
 8001c2a:	bf00      	nop
 8001c2c:	3e19999a 	.word	0x3e19999a

08001c30 <I2C_ReadOneByte>:
 //Raspberry 3B+ platform's default I2C device file



uint8_t I2C_ReadOneByte(uint8_t DevAddr, uint8_t RegAddr)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b088      	sub	sp, #32
 8001c34:	af04      	add	r7, sp, #16
 8001c36:	4603      	mov	r3, r0
 8001c38:	460a      	mov	r2, r1
 8001c3a:	71fb      	strb	r3, [r7, #7]
 8001c3c:	4613      	mov	r3, r2
 8001c3e:	71bb      	strb	r3, [r7, #6]
  uint8_t u8Ret[1]={0};
 8001c40:	2300      	movs	r3, #0
 8001c42:	733b      	strb	r3, [r7, #12]
  HAL_I2C_Mem_Read(&hi2c1, DevAddr,RegAddr,I2C_MEMADD_SIZE_8BIT,u8Ret,1,1000);
 8001c44:	79fb      	ldrb	r3, [r7, #7]
 8001c46:	b299      	uxth	r1, r3
 8001c48:	79bb      	ldrb	r3, [r7, #6]
 8001c4a:	b29a      	uxth	r2, r3
 8001c4c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c50:	9302      	str	r3, [sp, #8]
 8001c52:	2301      	movs	r3, #1
 8001c54:	9301      	str	r3, [sp, #4]
 8001c56:	f107 030c 	add.w	r3, r7, #12
 8001c5a:	9300      	str	r3, [sp, #0]
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	4804      	ldr	r0, [pc, #16]	@ (8001c70 <I2C_ReadOneByte+0x40>)
 8001c60:	f003 f83c 	bl	8004cdc <HAL_I2C_Mem_Read>
  return u8Ret[0];
 8001c64:	7b3b      	ldrb	r3, [r7, #12]
}
 8001c66:	4618      	mov	r0, r3
 8001c68:	3710      	adds	r7, #16
 8001c6a:	46bd      	mov	sp, r7
 8001c6c:	bd80      	pop	{r7, pc}
 8001c6e:	bf00      	nop
 8001c70:	20000518 	.word	0x20000518

08001c74 <icm20948GyroRead>:
        bRet = true;
    }
    return bRet;
}
void icm20948GyroRead(int16_t* ps16X, int16_t* ps16Y, int16_t* ps16Z)
{
 8001c74:	b590      	push	{r4, r7, lr}
 8001c76:	b08d      	sub	sp, #52	@ 0x34
 8001c78:	af00      	add	r7, sp, #0
 8001c7a:	60f8      	str	r0, [r7, #12]
 8001c7c:	60b9      	str	r1, [r7, #8]
 8001c7e:	607a      	str	r2, [r7, #4]
   uint8_t u8Buf[6];
    int16_t s16Buf[3] = {0}; 
 8001c80:	f107 0320 	add.w	r3, r7, #32
 8001c84:	2200      	movs	r2, #0
 8001c86:	601a      	str	r2, [r3, #0]
 8001c88:	809a      	strh	r2, [r3, #4]
    uint8_t i;
    int32_t s32OutBuf[3] = {0};
 8001c8a:	f107 0314 	add.w	r3, r7, #20
 8001c8e:	2200      	movs	r2, #0
 8001c90:	601a      	str	r2, [r3, #0]
 8001c92:	605a      	str	r2, [r3, #4]
 8001c94:	609a      	str	r2, [r3, #8]
    static ICM20948_ST_AVG_DATA sstAvgBuf[3];
    static int16_t ss16c = 0;
    ss16c++;
 8001c96:	4b52      	ldr	r3, [pc, #328]	@ (8001de0 <icm20948GyroRead+0x16c>)
 8001c98:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001c9c:	b29b      	uxth	r3, r3
 8001c9e:	3301      	adds	r3, #1
 8001ca0:	b29b      	uxth	r3, r3
 8001ca2:	b21a      	sxth	r2, r3
 8001ca4:	4b4e      	ldr	r3, [pc, #312]	@ (8001de0 <icm20948GyroRead+0x16c>)
 8001ca6:	801a      	strh	r2, [r3, #0]

    u8Buf[0]=I2C_ReadOneByte(I2C_ADD_ICM20948,REG_ADD_GYRO_XOUT_L); 
 8001ca8:	2134      	movs	r1, #52	@ 0x34
 8001caa:	20d0      	movs	r0, #208	@ 0xd0
 8001cac:	f7ff ffc0 	bl	8001c30 <I2C_ReadOneByte>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    u8Buf[1]=I2C_ReadOneByte(I2C_ADD_ICM20948,REG_ADD_GYRO_XOUT_H);
 8001cb6:	2133      	movs	r1, #51	@ 0x33
 8001cb8:	20d0      	movs	r0, #208	@ 0xd0
 8001cba:	f7ff ffb9 	bl	8001c30 <I2C_ReadOneByte>
 8001cbe:	4603      	mov	r3, r0
 8001cc0:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
    s16Buf[0]=  (u8Buf[1]<<8)|u8Buf[0];
 8001cc4:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8001cc8:	021b      	lsls	r3, r3, #8
 8001cca:	b21a      	sxth	r2, r3
 8001ccc:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001cd0:	b21b      	sxth	r3, r3
 8001cd2:	4313      	orrs	r3, r2
 8001cd4:	b21b      	sxth	r3, r3
 8001cd6:	843b      	strh	r3, [r7, #32]

    u8Buf[0]=I2C_ReadOneByte(I2C_ADD_ICM20948,REG_ADD_GYRO_YOUT_L); 
 8001cd8:	2136      	movs	r1, #54	@ 0x36
 8001cda:	20d0      	movs	r0, #208	@ 0xd0
 8001cdc:	f7ff ffa8 	bl	8001c30 <I2C_ReadOneByte>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    u8Buf[1]=I2C_ReadOneByte(I2C_ADD_ICM20948,REG_ADD_GYRO_YOUT_H);
 8001ce6:	2135      	movs	r1, #53	@ 0x35
 8001ce8:	20d0      	movs	r0, #208	@ 0xd0
 8001cea:	f7ff ffa1 	bl	8001c30 <I2C_ReadOneByte>
 8001cee:	4603      	mov	r3, r0
 8001cf0:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
    s16Buf[1]=  (u8Buf[1]<<8)|u8Buf[0];
 8001cf4:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8001cf8:	021b      	lsls	r3, r3, #8
 8001cfa:	b21a      	sxth	r2, r3
 8001cfc:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001d00:	b21b      	sxth	r3, r3
 8001d02:	4313      	orrs	r3, r2
 8001d04:	b21b      	sxth	r3, r3
 8001d06:	847b      	strh	r3, [r7, #34]	@ 0x22

    u8Buf[0]=I2C_ReadOneByte(I2C_ADD_ICM20948,REG_ADD_GYRO_ZOUT_L); 
 8001d08:	2138      	movs	r1, #56	@ 0x38
 8001d0a:	20d0      	movs	r0, #208	@ 0xd0
 8001d0c:	f7ff ff90 	bl	8001c30 <I2C_ReadOneByte>
 8001d10:	4603      	mov	r3, r0
 8001d12:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    u8Buf[1]=I2C_ReadOneByte(I2C_ADD_ICM20948,REG_ADD_GYRO_ZOUT_H);
 8001d16:	2137      	movs	r1, #55	@ 0x37
 8001d18:	20d0      	movs	r0, #208	@ 0xd0
 8001d1a:	f7ff ff89 	bl	8001c30 <I2C_ReadOneByte>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
    s16Buf[2]=  (u8Buf[1]<<8)|u8Buf[0];
 8001d24:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8001d28:	021b      	lsls	r3, r3, #8
 8001d2a:	b21a      	sxth	r2, r3
 8001d2c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001d30:	b21b      	sxth	r3, r3
 8001d32:	4313      	orrs	r3, r2
 8001d34:	b21b      	sxth	r3, r3
 8001d36:	84bb      	strh	r3, [r7, #36]	@ 0x24

    for(i = 0; i < 3; i ++) 
 8001d38:	2300      	movs	r3, #0
 8001d3a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8001d3e:	e025      	b.n	8001d8c <icm20948GyroRead+0x118>
    {
        icm20948CalAvgValue(&sstAvgBuf[i].u8Index, sstAvgBuf[i].s16AvgBuffer, s16Buf[i], s32OutBuf + i);
 8001d40:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8001d44:	4613      	mov	r3, r2
 8001d46:	00db      	lsls	r3, r3, #3
 8001d48:	4413      	add	r3, r2
 8001d4a:	005b      	lsls	r3, r3, #1
 8001d4c:	4a25      	ldr	r2, [pc, #148]	@ (8001de4 <icm20948GyroRead+0x170>)
 8001d4e:	1898      	adds	r0, r3, r2
 8001d50:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 8001d54:	4613      	mov	r3, r2
 8001d56:	00db      	lsls	r3, r3, #3
 8001d58:	4413      	add	r3, r2
 8001d5a:	005b      	lsls	r3, r3, #1
 8001d5c:	4a21      	ldr	r2, [pc, #132]	@ (8001de4 <icm20948GyroRead+0x170>)
 8001d5e:	4413      	add	r3, r2
 8001d60:	1c99      	adds	r1, r3, #2
 8001d62:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001d66:	005b      	lsls	r3, r3, #1
 8001d68:	3330      	adds	r3, #48	@ 0x30
 8001d6a:	443b      	add	r3, r7
 8001d6c:	f933 4c10 	ldrsh.w	r4, [r3, #-16]
 8001d70:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001d74:	009b      	lsls	r3, r3, #2
 8001d76:	f107 0214 	add.w	r2, r7, #20
 8001d7a:	4413      	add	r3, r2
 8001d7c:	4622      	mov	r2, r4
 8001d7e:	f000 f835 	bl	8001dec <icm20948CalAvgValue>
    for(i = 0; i < 3; i ++) 
 8001d82:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001d86:	3301      	adds	r3, #1
 8001d88:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8001d8c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001d90:	2b02      	cmp	r3, #2
 8001d92:	d9d5      	bls.n	8001d40 <icm20948GyroRead+0xcc>
    }
    *ps16X = s32OutBuf[0] - gstGyroOffset.s16X;
 8001d94:	697b      	ldr	r3, [r7, #20]
 8001d96:	b29a      	uxth	r2, r3
 8001d98:	4b13      	ldr	r3, [pc, #76]	@ (8001de8 <icm20948GyroRead+0x174>)
 8001d9a:	f9b3 3000 	ldrsh.w	r3, [r3]
 8001d9e:	b29b      	uxth	r3, r3
 8001da0:	1ad3      	subs	r3, r2, r3
 8001da2:	b29b      	uxth	r3, r3
 8001da4:	b21a      	sxth	r2, r3
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	801a      	strh	r2, [r3, #0]
    *ps16Y = s32OutBuf[1] - gstGyroOffset.s16Y;
 8001daa:	69bb      	ldr	r3, [r7, #24]
 8001dac:	b29a      	uxth	r2, r3
 8001dae:	4b0e      	ldr	r3, [pc, #56]	@ (8001de8 <icm20948GyroRead+0x174>)
 8001db0:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001db4:	b29b      	uxth	r3, r3
 8001db6:	1ad3      	subs	r3, r2, r3
 8001db8:	b29b      	uxth	r3, r3
 8001dba:	b21a      	sxth	r2, r3
 8001dbc:	68bb      	ldr	r3, [r7, #8]
 8001dbe:	801a      	strh	r2, [r3, #0]
    *ps16Z = s32OutBuf[2] - gstGyroOffset.s16Z;
 8001dc0:	69fb      	ldr	r3, [r7, #28]
 8001dc2:	b29a      	uxth	r2, r3
 8001dc4:	4b08      	ldr	r3, [pc, #32]	@ (8001de8 <icm20948GyroRead+0x174>)
 8001dc6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001dca:	b29b      	uxth	r3, r3
 8001dcc:	1ad3      	subs	r3, r2, r3
 8001dce:	b29b      	uxth	r3, r3
 8001dd0:	b21a      	sxth	r2, r3
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	801a      	strh	r2, [r3, #0]
    
    return;
 8001dd6:	bf00      	nop
}
 8001dd8:	3734      	adds	r7, #52	@ 0x34
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd90      	pop	{r4, r7, pc}
 8001dde:	bf00      	nop
 8001de0:	200002b2 	.word	0x200002b2
 8001de4:	200002b4 	.word	0x200002b4
 8001de8:	200002ac 	.word	0x200002ac

08001dec <icm20948CalAvgValue>:
    
    return;
}

void icm20948CalAvgValue(uint8_t *pIndex, int16_t *pAvgBuffer, int16_t InVal, int32_t *pOutVal)
{ 
 8001dec:	b480      	push	{r7}
 8001dee:	b087      	sub	sp, #28
 8001df0:	af00      	add	r7, sp, #0
 8001df2:	60f8      	str	r0, [r7, #12]
 8001df4:	60b9      	str	r1, [r7, #8]
 8001df6:	603b      	str	r3, [r7, #0]
 8001df8:	4613      	mov	r3, r2
 8001dfa:	80fb      	strh	r3, [r7, #6]
  uint8_t i;
  
  *(pAvgBuffer + ((*pIndex) ++)) = InVal;
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	781b      	ldrb	r3, [r3, #0]
 8001e00:	1c5a      	adds	r2, r3, #1
 8001e02:	b2d1      	uxtb	r1, r2
 8001e04:	68fa      	ldr	r2, [r7, #12]
 8001e06:	7011      	strb	r1, [r2, #0]
 8001e08:	005b      	lsls	r3, r3, #1
 8001e0a:	68ba      	ldr	r2, [r7, #8]
 8001e0c:	4413      	add	r3, r2
 8001e0e:	88fa      	ldrh	r2, [r7, #6]
 8001e10:	801a      	strh	r2, [r3, #0]
    *pIndex &= 0x07;
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	781b      	ldrb	r3, [r3, #0]
 8001e16:	f003 0307 	and.w	r3, r3, #7
 8001e1a:	b2da      	uxtb	r2, r3
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	701a      	strb	r2, [r3, #0]
    
    *pOutVal = 0;
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	2200      	movs	r2, #0
 8001e24:	601a      	str	r2, [r3, #0]
  for(i = 0; i < 8; i ++) 
 8001e26:	2300      	movs	r3, #0
 8001e28:	75fb      	strb	r3, [r7, #23]
 8001e2a:	e00d      	b.n	8001e48 <icm20948CalAvgValue+0x5c>
    {
      *pOutVal += *(pAvgBuffer + i);
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	7dfa      	ldrb	r2, [r7, #23]
 8001e32:	0052      	lsls	r2, r2, #1
 8001e34:	68b9      	ldr	r1, [r7, #8]
 8001e36:	440a      	add	r2, r1
 8001e38:	f9b2 2000 	ldrsh.w	r2, [r2]
 8001e3c:	441a      	add	r2, r3
 8001e3e:	683b      	ldr	r3, [r7, #0]
 8001e40:	601a      	str	r2, [r3, #0]
  for(i = 0; i < 8; i ++) 
 8001e42:	7dfb      	ldrb	r3, [r7, #23]
 8001e44:	3301      	adds	r3, #1
 8001e46:	75fb      	strb	r3, [r7, #23]
 8001e48:	7dfb      	ldrb	r3, [r7, #23]
 8001e4a:	2b07      	cmp	r3, #7
 8001e4c:	d9ee      	bls.n	8001e2c <icm20948CalAvgValue+0x40>
    }
    *pOutVal >>= 3;
 8001e4e:	683b      	ldr	r3, [r7, #0]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	10da      	asrs	r2, r3, #3
 8001e54:	683b      	ldr	r3, [r7, #0]
 8001e56:	601a      	str	r2, [r3, #0]
}
 8001e58:	bf00      	nop
 8001e5a:	371c      	adds	r7, #28
 8001e5c:	46bd      	mov	sp, r7
 8001e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e62:	4770      	bx	lr

08001e64 <MPU6050_Init>:
    .Q_bias = 0.003f,
    .R_measure = 0.03f,
};

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	b088      	sub	sp, #32
 8001e68:	af04      	add	r7, sp, #16
 8001e6a:	6078      	str	r0, [r7, #4]
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_StatusTypeDef ret = HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 8001e6c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e70:	9302      	str	r3, [sp, #8]
 8001e72:	2301      	movs	r3, #1
 8001e74:	9301      	str	r3, [sp, #4]
 8001e76:	f107 030e 	add.w	r3, r7, #14
 8001e7a:	9300      	str	r3, [sp, #0]
 8001e7c:	2301      	movs	r3, #1
 8001e7e:	2275      	movs	r2, #117	@ 0x75
 8001e80:	21d2      	movs	r1, #210	@ 0xd2
 8001e82:	6878      	ldr	r0, [r7, #4]
 8001e84:	f002 ff2a 	bl	8004cdc <HAL_I2C_Mem_Read>
 8001e88:	4603      	mov	r3, r0
 8001e8a:	73fb      	strb	r3, [r7, #15]
    /*if (ret == HAL_OK) {
        printf("MPU6050 WHO_AM_I: 0x%02X\r\n", check);  // Should print 0x68
    } else {
        printf("I2C Read Error: %d\r\n", ret);
    }*/
    if (check == 104) // 0x68 will be returned by the sensor if everything goes well
 8001e8c:	7bbb      	ldrb	r3, [r7, #14]
 8001e8e:	2b68      	cmp	r3, #104	@ 0x68
 8001e90:	d141      	bne.n	8001f16 <MPU6050_Init+0xb2>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 8001e92:	2300      	movs	r3, #0
 8001e94:	737b      	strb	r3, [r7, #13]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 8001e96:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e9a:	9302      	str	r3, [sp, #8]
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	9301      	str	r3, [sp, #4]
 8001ea0:	f107 030d 	add.w	r3, r7, #13
 8001ea4:	9300      	str	r3, [sp, #0]
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	226b      	movs	r2, #107	@ 0x6b
 8001eaa:	21d2      	movs	r1, #210	@ 0xd2
 8001eac:	6878      	ldr	r0, [r7, #4]
 8001eae:	f002 fe1b 	bl	8004ae8 <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 8001eb2:	2307      	movs	r3, #7
 8001eb4:	737b      	strb	r3, [r7, #13]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 8001eb6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001eba:	9302      	str	r3, [sp, #8]
 8001ebc:	2301      	movs	r3, #1
 8001ebe:	9301      	str	r3, [sp, #4]
 8001ec0:	f107 030d 	add.w	r3, r7, #13
 8001ec4:	9300      	str	r3, [sp, #0]
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	2219      	movs	r2, #25
 8001eca:	21d2      	movs	r1, #210	@ 0xd2
 8001ecc:	6878      	ldr	r0, [r7, #4]
 8001ece:	f002 fe0b 	bl	8004ae8 <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x00;
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	737b      	strb	r3, [r7, #13]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8001ed6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001eda:	9302      	str	r3, [sp, #8]
 8001edc:	2301      	movs	r3, #1
 8001ede:	9301      	str	r3, [sp, #4]
 8001ee0:	f107 030d 	add.w	r3, r7, #13
 8001ee4:	9300      	str	r3, [sp, #0]
 8001ee6:	2301      	movs	r3, #1
 8001ee8:	221c      	movs	r2, #28
 8001eea:	21d2      	movs	r1, #210	@ 0xd2
 8001eec:	6878      	ldr	r0, [r7, #4]
 8001eee:	f002 fdfb 	bl	8004ae8 <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x00;
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	737b      	strb	r3, [r7, #13]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 8001ef6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001efa:	9302      	str	r3, [sp, #8]
 8001efc:	2301      	movs	r3, #1
 8001efe:	9301      	str	r3, [sp, #4]
 8001f00:	f107 030d 	add.w	r3, r7, #13
 8001f04:	9300      	str	r3, [sp, #0]
 8001f06:	2301      	movs	r3, #1
 8001f08:	221b      	movs	r2, #27
 8001f0a:	21d2      	movs	r1, #210	@ 0xd2
 8001f0c:	6878      	ldr	r0, [r7, #4]
 8001f0e:	f002 fdeb 	bl	8004ae8 <HAL_I2C_Mem_Write>
        return 0;
 8001f12:	2300      	movs	r3, #0
 8001f14:	e000      	b.n	8001f18 <MPU6050_Init+0xb4>
    }
    return 1;
 8001f16:	2301      	movs	r3, #1
}
 8001f18:	4618      	mov	r0, r3
 8001f1a:	3710      	adds	r7, #16
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}

08001f20 <MPU6050_Read_DMA>:
    MPU6050_Process_Data(DataStruct);

}

void MPU6050_Read_DMA(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b086      	sub	sp, #24
 8001f24:	af02      	add	r7, sp, #8
 8001f26:	6078      	str	r0, [r7, #4]
 8001f28:	6039      	str	r1, [r7, #0]
	DataStruct->is_reading = 1u;
 8001f2a:	683b      	ldr	r3, [r7, #0]
 8001f2c:	2201      	movs	r2, #1
 8001f2e:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68
	HAL_StatusTypeDef ret = HAL_I2C_Mem_Read_DMA(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, I2C_MEMADD_SIZE_8BIT, DataStruct->mpu6050_raw, 14);
 8001f32:	683b      	ldr	r3, [r7, #0]
 8001f34:	220e      	movs	r2, #14
 8001f36:	9201      	str	r2, [sp, #4]
 8001f38:	9300      	str	r3, [sp, #0]
 8001f3a:	2301      	movs	r3, #1
 8001f3c:	223b      	movs	r2, #59	@ 0x3b
 8001f3e:	21d2      	movs	r1, #210	@ 0xd2
 8001f40:	6878      	ldr	r0, [r7, #4]
 8001f42:	f003 f8fd 	bl	8005140 <HAL_I2C_Mem_Read_DMA>
 8001f46:	4603      	mov	r3, r0
 8001f48:	73fb      	strb	r3, [r7, #15]
	//printf("DMA read state %d \r\n", (int)ret);
}
 8001f4a:	bf00      	nop
 8001f4c:	3710      	adds	r7, #16
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bd80      	pop	{r7, pc}
 8001f52:	0000      	movs	r0, r0
 8001f54:	0000      	movs	r0, r0
	...

08001f58 <MPU6050_Process_Data>:

void MPU6050_Process_Data(MPU6050_t *DataStruct)
{
 8001f58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001f5c:	b08c      	sub	sp, #48	@ 0x30
 8001f5e:	af00      	add	r7, sp, #0
 8001f60:	6078      	str	r0, [r7, #4]
	uint8_t *raw = DataStruct->mpu6050_raw;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	627b      	str	r3, [r7, #36]	@ 0x24
	DataStruct->Accel_X_RAW = (int16_t)(raw[0] << 8 | raw[1]);
 8001f66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f68:	781b      	ldrb	r3, [r3, #0]
 8001f6a:	021b      	lsls	r3, r3, #8
 8001f6c:	b21a      	sxth	r2, r3
 8001f6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f70:	3301      	adds	r3, #1
 8001f72:	781b      	ldrb	r3, [r3, #0]
 8001f74:	b21b      	sxth	r3, r3
 8001f76:	4313      	orrs	r3, r2
 8001f78:	b21a      	sxth	r2, r3
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	81da      	strh	r2, [r3, #14]
	DataStruct->Accel_Y_RAW = (int16_t)(raw[2] << 8 | raw[3]);
 8001f7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f80:	3302      	adds	r3, #2
 8001f82:	781b      	ldrb	r3, [r3, #0]
 8001f84:	021b      	lsls	r3, r3, #8
 8001f86:	b21a      	sxth	r2, r3
 8001f88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f8a:	3303      	adds	r3, #3
 8001f8c:	781b      	ldrb	r3, [r3, #0]
 8001f8e:	b21b      	sxth	r3, r3
 8001f90:	4313      	orrs	r3, r2
 8001f92:	b21a      	sxth	r2, r3
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	821a      	strh	r2, [r3, #16]
	DataStruct->Accel_Z_RAW = (int16_t)(raw[4] << 8 | raw[5]);
 8001f98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f9a:	3304      	adds	r3, #4
 8001f9c:	781b      	ldrb	r3, [r3, #0]
 8001f9e:	021b      	lsls	r3, r3, #8
 8001fa0:	b21a      	sxth	r2, r3
 8001fa2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fa4:	3305      	adds	r3, #5
 8001fa6:	781b      	ldrb	r3, [r3, #0]
 8001fa8:	b21b      	sxth	r3, r3
 8001faa:	4313      	orrs	r3, r2
 8001fac:	b21a      	sxth	r2, r3
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	825a      	strh	r2, [r3, #18]
	int16_t temp = (int16_t)(raw[6] << 8 | raw[7]);
 8001fb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fb4:	3306      	adds	r3, #6
 8001fb6:	781b      	ldrb	r3, [r3, #0]
 8001fb8:	021b      	lsls	r3, r3, #8
 8001fba:	b21a      	sxth	r2, r3
 8001fbc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fbe:	3307      	adds	r3, #7
 8001fc0:	781b      	ldrb	r3, [r3, #0]
 8001fc2:	b21b      	sxth	r3, r3
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	847b      	strh	r3, [r7, #34]	@ 0x22
	DataStruct->Gyro_X_RAW = (int16_t)(raw[8] << 8 | raw[9]);
 8001fc8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fca:	3308      	adds	r3, #8
 8001fcc:	781b      	ldrb	r3, [r3, #0]
 8001fce:	021b      	lsls	r3, r3, #8
 8001fd0:	b21a      	sxth	r2, r3
 8001fd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fd4:	3309      	adds	r3, #9
 8001fd6:	781b      	ldrb	r3, [r3, #0]
 8001fd8:	b21b      	sxth	r3, r3
 8001fda:	4313      	orrs	r3, r2
 8001fdc:	b21a      	sxth	r2, r3
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	861a      	strh	r2, [r3, #48]	@ 0x30
	DataStruct->Gyro_Y_RAW = (int16_t)(raw[10] << 8 | raw[11]);
 8001fe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fe4:	330a      	adds	r3, #10
 8001fe6:	781b      	ldrb	r3, [r3, #0]
 8001fe8:	021b      	lsls	r3, r3, #8
 8001fea:	b21a      	sxth	r2, r3
 8001fec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fee:	330b      	adds	r3, #11
 8001ff0:	781b      	ldrb	r3, [r3, #0]
 8001ff2:	b21b      	sxth	r3, r3
 8001ff4:	4313      	orrs	r3, r2
 8001ff6:	b21a      	sxth	r2, r3
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	865a      	strh	r2, [r3, #50]	@ 0x32
	DataStruct->Gyro_Z_RAW = (int16_t)(raw[12] << 8 | raw[13]);
 8001ffc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ffe:	330c      	adds	r3, #12
 8002000:	781b      	ldrb	r3, [r3, #0]
 8002002:	021b      	lsls	r3, r3, #8
 8002004:	b21a      	sxth	r2, r3
 8002006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002008:	330d      	adds	r3, #13
 800200a:	781b      	ldrb	r3, [r3, #0]
 800200c:	b21b      	sxth	r3, r3
 800200e:	4313      	orrs	r3, r2
 8002010:	b21a      	sxth	r2, r3
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	869a      	strh	r2, [r3, #52]	@ 0x34

	DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800201c:	4618      	mov	r0, r3
 800201e:	f7fe fa81 	bl	8000524 <__aeabi_i2d>
 8002022:	f04f 0200 	mov.w	r2, #0
 8002026:	4bbe      	ldr	r3, [pc, #760]	@ (8002320 <MPU6050_Process_Data+0x3c8>)
 8002028:	f7fe fc10 	bl	800084c <__aeabi_ddiv>
 800202c:	4602      	mov	r2, r0
 800202e:	460b      	mov	r3, r1
 8002030:	6879      	ldr	r1, [r7, #4]
 8002032:	e9c1 2306 	strd	r2, r3, [r1, #24]
	DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 800203c:	4618      	mov	r0, r3
 800203e:	f7fe fa71 	bl	8000524 <__aeabi_i2d>
 8002042:	f04f 0200 	mov.w	r2, #0
 8002046:	4bb6      	ldr	r3, [pc, #728]	@ (8002320 <MPU6050_Process_Data+0x3c8>)
 8002048:	f7fe fc00 	bl	800084c <__aeabi_ddiv>
 800204c:	4602      	mov	r2, r0
 800204e:	460b      	mov	r3, r1
 8002050:	6879      	ldr	r1, [r7, #4]
 8002052:	e9c1 2308 	strd	r2, r3, [r1, #32]
	DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800205c:	4618      	mov	r0, r3
 800205e:	f7fe fa61 	bl	8000524 <__aeabi_i2d>
 8002062:	f04f 0200 	mov.w	r2, #0
 8002066:	4bae      	ldr	r3, [pc, #696]	@ (8002320 <MPU6050_Process_Data+0x3c8>)
 8002068:	f7fe fbf0 	bl	800084c <__aeabi_ddiv>
 800206c:	4602      	mov	r2, r0
 800206e:	460b      	mov	r3, r1
 8002070:	6879      	ldr	r1, [r7, #4]
 8002072:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
	DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
 8002076:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	@ 0x22
 800207a:	ee07 3a90 	vmov	s15, r3
 800207e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002082:	eddf 6aa8 	vldr	s13, [pc, #672]	@ 8002324 <MPU6050_Process_Data+0x3cc>
 8002086:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800208a:	ed9f 7aa7 	vldr	s14, [pc, #668]	@ 8002328 <MPU6050_Process_Data+0x3d0>
 800208e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	edc3 7a14 	vstr	s15, [r3, #80]	@ 0x50
	DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	@ 0x30
 800209e:	4618      	mov	r0, r3
 80020a0:	f7fe fa40 	bl	8000524 <__aeabi_i2d>
 80020a4:	a39a      	add	r3, pc, #616	@ (adr r3, 8002310 <MPU6050_Process_Data+0x3b8>)
 80020a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020aa:	f7fe fbcf 	bl	800084c <__aeabi_ddiv>
 80020ae:	4602      	mov	r2, r0
 80020b0:	460b      	mov	r3, r1
 80020b2:	6879      	ldr	r1, [r7, #4]
 80020b4:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
	DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	f9b3 3032 	ldrsh.w	r3, [r3, #50]	@ 0x32
 80020be:	4618      	mov	r0, r3
 80020c0:	f7fe fa30 	bl	8000524 <__aeabi_i2d>
 80020c4:	a392      	add	r3, pc, #584	@ (adr r3, 8002310 <MPU6050_Process_Data+0x3b8>)
 80020c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020ca:	f7fe fbbf 	bl	800084c <__aeabi_ddiv>
 80020ce:	4602      	mov	r2, r0
 80020d0:	460b      	mov	r3, r1
 80020d2:	6879      	ldr	r1, [r7, #4]
 80020d4:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40
	DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	f9b3 3034 	ldrsh.w	r3, [r3, #52]	@ 0x34
 80020de:	4618      	mov	r0, r3
 80020e0:	f7fe fa20 	bl	8000524 <__aeabi_i2d>
 80020e4:	a38a      	add	r3, pc, #552	@ (adr r3, 8002310 <MPU6050_Process_Data+0x3b8>)
 80020e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80020ea:	f7fe fbaf 	bl	800084c <__aeabi_ddiv>
 80020ee:	4602      	mov	r2, r0
 80020f0:	460b      	mov	r3, r1
 80020f2:	6879      	ldr	r1, [r7, #4]
 80020f4:	e9c1 2312 	strd	r2, r3, [r1, #72]	@ 0x48

	DataStruct->is_reading = 0u;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2200      	movs	r2, #0
 80020fc:	f883 2068 	strb.w	r2, [r3, #104]	@ 0x68

	// Kalman angle solve
	double dt = (double)(HAL_GetTick() - timer) / 1000;
 8002100:	f001 fcf2 	bl	8003ae8 <HAL_GetTick>
 8002104:	4602      	mov	r2, r0
 8002106:	4b89      	ldr	r3, [pc, #548]	@ (800232c <MPU6050_Process_Data+0x3d4>)
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	1ad3      	subs	r3, r2, r3
 800210c:	4618      	mov	r0, r3
 800210e:	f7fe f9f9 	bl	8000504 <__aeabi_ui2d>
 8002112:	f04f 0200 	mov.w	r2, #0
 8002116:	4b86      	ldr	r3, [pc, #536]	@ (8002330 <MPU6050_Process_Data+0x3d8>)
 8002118:	f7fe fb98 	bl	800084c <__aeabi_ddiv>
 800211c:	4602      	mov	r2, r0
 800211e:	460b      	mov	r3, r1
 8002120:	e9c7 2306 	strd	r2, r3, [r7, #24]
	timer = HAL_GetTick();
 8002124:	f001 fce0 	bl	8003ae8 <HAL_GetTick>
 8002128:	4603      	mov	r3, r0
 800212a:	4a80      	ldr	r2, [pc, #512]	@ (800232c <MPU6050_Process_Data+0x3d4>)
 800212c:	6013      	str	r3, [r2, #0]
	double roll;
	double roll_sqrt = sqrt(
		DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8002134:	461a      	mov	r2, r3
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 800213c:	fb03 f202 	mul.w	r2, r3, r2
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8002146:	4619      	mov	r1, r3
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 800214e:	fb01 f303 	mul.w	r3, r1, r3
 8002152:	4413      	add	r3, r2
	double roll_sqrt = sqrt(
 8002154:	4618      	mov	r0, r3
 8002156:	f7fe f9e5 	bl	8000524 <__aeabi_i2d>
 800215a:	4602      	mov	r2, r0
 800215c:	460b      	mov	r3, r1
 800215e:	ec43 2b10 	vmov	d0, r2, r3
 8002162:	f00d fc7f 	bl	800fa64 <sqrt>
 8002166:	ed87 0b04 	vstr	d0, [r7, #16]
	if (roll_sqrt != 0.0)
 800216a:	f04f 0200 	mov.w	r2, #0
 800216e:	f04f 0300 	mov.w	r3, #0
 8002172:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8002176:	f7fe fca7 	bl	8000ac8 <__aeabi_dcmpeq>
 800217a:	4603      	mov	r3, r0
 800217c:	2b00      	cmp	r3, #0
 800217e:	d11f      	bne.n	80021c0 <MPU6050_Process_Data+0x268>
	{
		roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8002186:	4618      	mov	r0, r3
 8002188:	f7fe f9cc 	bl	8000524 <__aeabi_i2d>
 800218c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002190:	f7fe fb5c 	bl	800084c <__aeabi_ddiv>
 8002194:	4602      	mov	r2, r0
 8002196:	460b      	mov	r3, r1
 8002198:	ec43 2b17 	vmov	d7, r2, r3
 800219c:	eeb0 0a47 	vmov.f32	s0, s14
 80021a0:	eef0 0a67 	vmov.f32	s1, s15
 80021a4:	f00d fc8c 	bl	800fac0 <atan>
 80021a8:	ec51 0b10 	vmov	r0, r1, d0
 80021ac:	a35a      	add	r3, pc, #360	@ (adr r3, 8002318 <MPU6050_Process_Data+0x3c0>)
 80021ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021b2:	f7fe fa21 	bl	80005f8 <__aeabi_dmul>
 80021b6:	4602      	mov	r2, r0
 80021b8:	460b      	mov	r3, r1
 80021ba:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
 80021be:	e005      	b.n	80021cc <MPU6050_Process_Data+0x274>
	}
	else
	{
		roll = 0.0;
 80021c0:	f04f 0200 	mov.w	r2, #0
 80021c4:	f04f 0300 	mov.w	r3, #0
 80021c8:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
	}
	double pitch = atan2(-DataStruct->Accel_X_RAW, DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80021d2:	425b      	negs	r3, r3
 80021d4:	4618      	mov	r0, r3
 80021d6:	f7fe f9a5 	bl	8000524 <__aeabi_i2d>
 80021da:	4682      	mov	sl, r0
 80021dc:	468b      	mov	fp, r1
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 80021e4:	4618      	mov	r0, r3
 80021e6:	f7fe f99d 	bl	8000524 <__aeabi_i2d>
 80021ea:	4602      	mov	r2, r0
 80021ec:	460b      	mov	r3, r1
 80021ee:	ec43 2b11 	vmov	d1, r2, r3
 80021f2:	ec4b ab10 	vmov	d0, sl, fp
 80021f6:	f00d fc33 	bl	800fa60 <atan2>
 80021fa:	ec51 0b10 	vmov	r0, r1, d0
 80021fe:	a346      	add	r3, pc, #280	@ (adr r3, 8002318 <MPU6050_Process_Data+0x3c0>)
 8002200:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002204:	f7fe f9f8 	bl	80005f8 <__aeabi_dmul>
 8002208:	4602      	mov	r2, r0
 800220a:	460b      	mov	r3, r1
 800220c:	e9c7 2302 	strd	r2, r3, [r7, #8]
	if ((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90))
 8002210:	f04f 0200 	mov.w	r2, #0
 8002214:	4b47      	ldr	r3, [pc, #284]	@ (8002334 <MPU6050_Process_Data+0x3dc>)
 8002216:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800221a:	f7fe fc5f 	bl	8000adc <__aeabi_dcmplt>
 800221e:	4603      	mov	r3, r0
 8002220:	2b00      	cmp	r3, #0
 8002222:	d00a      	beq.n	800223a <MPU6050_Process_Data+0x2e2>
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	@ 0x60
 800222a:	f04f 0200 	mov.w	r2, #0
 800222e:	4b42      	ldr	r3, [pc, #264]	@ (8002338 <MPU6050_Process_Data+0x3e0>)
 8002230:	f7fe fc72 	bl	8000b18 <__aeabi_dcmpgt>
 8002234:	4603      	mov	r3, r0
 8002236:	2b00      	cmp	r3, #0
 8002238:	d114      	bne.n	8002264 <MPU6050_Process_Data+0x30c>
 800223a:	f04f 0200 	mov.w	r2, #0
 800223e:	4b3e      	ldr	r3, [pc, #248]	@ (8002338 <MPU6050_Process_Data+0x3e0>)
 8002240:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002244:	f7fe fc68 	bl	8000b18 <__aeabi_dcmpgt>
 8002248:	4603      	mov	r3, r0
 800224a:	2b00      	cmp	r3, #0
 800224c:	d015      	beq.n	800227a <MPU6050_Process_Data+0x322>
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	e9d3 0118 	ldrd	r0, r1, [r3, #96]	@ 0x60
 8002254:	f04f 0200 	mov.w	r2, #0
 8002258:	4b36      	ldr	r3, [pc, #216]	@ (8002334 <MPU6050_Process_Data+0x3dc>)
 800225a:	f7fe fc3f 	bl	8000adc <__aeabi_dcmplt>
 800225e:	4603      	mov	r3, r0
 8002260:	2b00      	cmp	r3, #0
 8002262:	d00a      	beq.n	800227a <MPU6050_Process_Data+0x322>
	{
		KalmanY.angle = pitch;
 8002264:	4935      	ldr	r1, [pc, #212]	@ (800233c <MPU6050_Process_Data+0x3e4>)
 8002266:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800226a:	e9c1 2306 	strd	r2, r3, [r1, #24]
		DataStruct->KalmanAngleY = pitch;
 800226e:	6879      	ldr	r1, [r7, #4]
 8002270:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002274:	e9c1 2318 	strd	r2, r3, [r1, #96]	@ 0x60
 8002278:	e014      	b.n	80022a4 <MPU6050_Process_Data+0x34c>
	}
	else
	{
		DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch, DataStruct->Gy, dt);
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	ed93 7b10 	vldr	d7, [r3, #64]	@ 0x40
 8002280:	ed97 2b06 	vldr	d2, [r7, #24]
 8002284:	eeb0 1a47 	vmov.f32	s2, s14
 8002288:	eef0 1a67 	vmov.f32	s3, s15
 800228c:	ed97 0b02 	vldr	d0, [r7, #8]
 8002290:	482a      	ldr	r0, [pc, #168]	@ (800233c <MPU6050_Process_Data+0x3e4>)
 8002292:	f000 f857 	bl	8002344 <Kalman_getAngle>
 8002296:	eeb0 7a40 	vmov.f32	s14, s0
 800229a:	eef0 7a60 	vmov.f32	s15, s1
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	ed83 7b18 	vstr	d7, [r3, #96]	@ 0x60
	}
	if (fabs(DataStruct->KalmanAngleY) > 90)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	e9d3 2318 	ldrd	r2, r3, [r3, #96]	@ 0x60
 80022aa:	4690      	mov	r8, r2
 80022ac:	f023 4900 	bic.w	r9, r3, #2147483648	@ 0x80000000
 80022b0:	f04f 0200 	mov.w	r2, #0
 80022b4:	4b20      	ldr	r3, [pc, #128]	@ (8002338 <MPU6050_Process_Data+0x3e0>)
 80022b6:	4640      	mov	r0, r8
 80022b8:	4649      	mov	r1, r9
 80022ba:	f7fe fc2d 	bl	8000b18 <__aeabi_dcmpgt>
 80022be:	4603      	mov	r3, r0
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d008      	beq.n	80022d6 <MPU6050_Process_Data+0x37e>
		DataStruct->Gx = -DataStruct->Gx;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 80022ca:	4614      	mov	r4, r2
 80022cc:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	e9c3 450e 	strd	r4, r5, [r3, #56]	@ 0x38
	DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gx, dt);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	ed93 7b0e 	vldr	d7, [r3, #56]	@ 0x38
 80022dc:	ed97 2b06 	vldr	d2, [r7, #24]
 80022e0:	eeb0 1a47 	vmov.f32	s2, s14
 80022e4:	eef0 1a67 	vmov.f32	s3, s15
 80022e8:	ed97 0b0a 	vldr	d0, [r7, #40]	@ 0x28
 80022ec:	4814      	ldr	r0, [pc, #80]	@ (8002340 <MPU6050_Process_Data+0x3e8>)
 80022ee:	f000 f829 	bl	8002344 <Kalman_getAngle>
 80022f2:	eeb0 7a40 	vmov.f32	s14, s0
 80022f6:	eef0 7a60 	vmov.f32	s15, s1
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	ed83 7b16 	vstr	d7, [r3, #88]	@ 0x58
}
 8002300:	bf00      	nop
 8002302:	3730      	adds	r7, #48	@ 0x30
 8002304:	46bd      	mov	sp, r7
 8002306:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800230a:	bf00      	nop
 800230c:	f3af 8000 	nop.w
 8002310:	00000000 	.word	0x00000000
 8002314:	40606000 	.word	0x40606000
 8002318:	1a63c1f8 	.word	0x1a63c1f8
 800231c:	404ca5dc 	.word	0x404ca5dc
 8002320:	40d00000 	.word	0x40d00000
 8002324:	43aa0000 	.word	0x43aa0000
 8002328:	42121eb8 	.word	0x42121eb8
 800232c:	200002ec 	.word	0x200002ec
 8002330:	408f4000 	.word	0x408f4000
 8002334:	c0568000 	.word	0xc0568000
 8002338:	40568000 	.word	0x40568000
 800233c:	20000048 	.word	0x20000048
 8002340:	20000000 	.word	0x20000000

08002344 <Kalman_getAngle>:
double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt)
{
 8002344:	b5b0      	push	{r4, r5, r7, lr}
 8002346:	b096      	sub	sp, #88	@ 0x58
 8002348:	af00      	add	r7, sp, #0
 800234a:	61f8      	str	r0, [r7, #28]
 800234c:	ed87 0b04 	vstr	d0, [r7, #16]
 8002350:	ed87 1b02 	vstr	d1, [r7, #8]
 8002354:	ed87 2b00 	vstr	d2, [r7]
    double rate = newRate - Kalman->bias;
 8002358:	69fb      	ldr	r3, [r7, #28]
 800235a:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800235e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002362:	f7fd ff91 	bl	8000288 <__aeabi_dsub>
 8002366:	4602      	mov	r2, r0
 8002368:	460b      	mov	r3, r1
 800236a:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    Kalman->angle += dt * rate;
 800236e:	69fb      	ldr	r3, [r7, #28]
 8002370:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8002374:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8002378:	e9d7 0100 	ldrd	r0, r1, [r7]
 800237c:	f7fe f93c 	bl	80005f8 <__aeabi_dmul>
 8002380:	4602      	mov	r2, r0
 8002382:	460b      	mov	r3, r1
 8002384:	4620      	mov	r0, r4
 8002386:	4629      	mov	r1, r5
 8002388:	f7fd ff80 	bl	800028c <__adddf3>
 800238c:	4602      	mov	r2, r0
 800238e:	460b      	mov	r3, r1
 8002390:	69f9      	ldr	r1, [r7, #28]
 8002392:	e9c1 2306 	strd	r2, r3, [r1, #24]

    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 8002396:	69fb      	ldr	r3, [r7, #28]
 8002398:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	@ 0x28
 800239c:	69fb      	ldr	r3, [r7, #28]
 800239e:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 80023a2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80023a6:	f7fe f927 	bl	80005f8 <__aeabi_dmul>
 80023aa:	4602      	mov	r2, r0
 80023ac:	460b      	mov	r3, r1
 80023ae:	4610      	mov	r0, r2
 80023b0:	4619      	mov	r1, r3
 80023b2:	69fb      	ldr	r3, [r7, #28]
 80023b4:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 80023b8:	f7fd ff66 	bl	8000288 <__aeabi_dsub>
 80023bc:	4602      	mov	r2, r0
 80023be:	460b      	mov	r3, r1
 80023c0:	4610      	mov	r0, r2
 80023c2:	4619      	mov	r1, r3
 80023c4:	69fb      	ldr	r3, [r7, #28]
 80023c6:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 80023ca:	f7fd ff5d 	bl	8000288 <__aeabi_dsub>
 80023ce:	4602      	mov	r2, r0
 80023d0:	460b      	mov	r3, r1
 80023d2:	4610      	mov	r0, r2
 80023d4:	4619      	mov	r1, r3
 80023d6:	69fb      	ldr	r3, [r7, #28]
 80023d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023dc:	f7fd ff56 	bl	800028c <__adddf3>
 80023e0:	4602      	mov	r2, r0
 80023e2:	460b      	mov	r3, r1
 80023e4:	4610      	mov	r0, r2
 80023e6:	4619      	mov	r1, r3
 80023e8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80023ec:	f7fe f904 	bl	80005f8 <__aeabi_dmul>
 80023f0:	4602      	mov	r2, r0
 80023f2:	460b      	mov	r3, r1
 80023f4:	4620      	mov	r0, r4
 80023f6:	4629      	mov	r1, r5
 80023f8:	f7fd ff48 	bl	800028c <__adddf3>
 80023fc:	4602      	mov	r2, r0
 80023fe:	460b      	mov	r3, r1
 8002400:	69f9      	ldr	r1, [r7, #28]
 8002402:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 8002406:	69fb      	ldr	r3, [r7, #28]
 8002408:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	@ 0x30
 800240c:	69fb      	ldr	r3, [r7, #28]
 800240e:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 8002412:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002416:	f7fe f8ef 	bl	80005f8 <__aeabi_dmul>
 800241a:	4602      	mov	r2, r0
 800241c:	460b      	mov	r3, r1
 800241e:	4620      	mov	r0, r4
 8002420:	4629      	mov	r1, r5
 8002422:	f7fd ff31 	bl	8000288 <__aeabi_dsub>
 8002426:	4602      	mov	r2, r0
 8002428:	460b      	mov	r3, r1
 800242a:	69f9      	ldr	r1, [r7, #28]
 800242c:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 8002430:	69fb      	ldr	r3, [r7, #28]
 8002432:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	@ 0x38
 8002436:	69fb      	ldr	r3, [r7, #28]
 8002438:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 800243c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002440:	f7fe f8da 	bl	80005f8 <__aeabi_dmul>
 8002444:	4602      	mov	r2, r0
 8002446:	460b      	mov	r3, r1
 8002448:	4620      	mov	r0, r4
 800244a:	4629      	mov	r1, r5
 800244c:	f7fd ff1c 	bl	8000288 <__aeabi_dsub>
 8002450:	4602      	mov	r2, r0
 8002452:	460b      	mov	r3, r1
 8002454:	69f9      	ldr	r1, [r7, #28]
 8002456:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 800245a:	69fb      	ldr	r3, [r7, #28]
 800245c:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	@ 0x40
 8002460:	69fb      	ldr	r3, [r7, #28]
 8002462:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 8002466:	e9d7 2300 	ldrd	r2, r3, [r7]
 800246a:	f7fe f8c5 	bl	80005f8 <__aeabi_dmul>
 800246e:	4602      	mov	r2, r0
 8002470:	460b      	mov	r3, r1
 8002472:	4620      	mov	r0, r4
 8002474:	4629      	mov	r1, r5
 8002476:	f7fd ff09 	bl	800028c <__adddf3>
 800247a:	4602      	mov	r2, r0
 800247c:	460b      	mov	r3, r1
 800247e:	69f9      	ldr	r1, [r7, #28]
 8002480:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40

    double S = Kalman->P[0][0] + Kalman->R_measure;
 8002484:	69fb      	ldr	r3, [r7, #28]
 8002486:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 800248a:	69fb      	ldr	r3, [r7, #28]
 800248c:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 8002490:	f7fd fefc 	bl	800028c <__adddf3>
 8002494:	4602      	mov	r2, r0
 8002496:	460b      	mov	r3, r1
 8002498:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 800249c:	69fb      	ldr	r3, [r7, #28]
 800249e:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 80024a2:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80024a6:	f7fe f9d1 	bl	800084c <__aeabi_ddiv>
 80024aa:	4602      	mov	r2, r0
 80024ac:	460b      	mov	r3, r1
 80024ae:	e9c7 2308 	strd	r2, r3, [r7, #32]
    K[1] = Kalman->P[1][0] / S;
 80024b2:	69fb      	ldr	r3, [r7, #28]
 80024b4:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 80024b8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80024bc:	f7fe f9c6 	bl	800084c <__aeabi_ddiv>
 80024c0:	4602      	mov	r2, r0
 80024c2:	460b      	mov	r3, r1
 80024c4:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28

    double y = newAngle - Kalman->angle;
 80024c8:	69fb      	ldr	r3, [r7, #28]
 80024ca:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80024ce:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80024d2:	f7fd fed9 	bl	8000288 <__aeabi_dsub>
 80024d6:	4602      	mov	r2, r0
 80024d8:	460b      	mov	r3, r1
 80024da:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
    Kalman->angle += K[0] * y;
 80024de:	69fb      	ldr	r3, [r7, #28]
 80024e0:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 80024e4:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80024e8:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80024ec:	f7fe f884 	bl	80005f8 <__aeabi_dmul>
 80024f0:	4602      	mov	r2, r0
 80024f2:	460b      	mov	r3, r1
 80024f4:	4620      	mov	r0, r4
 80024f6:	4629      	mov	r1, r5
 80024f8:	f7fd fec8 	bl	800028c <__adddf3>
 80024fc:	4602      	mov	r2, r0
 80024fe:	460b      	mov	r3, r1
 8002500:	69f9      	ldr	r1, [r7, #28]
 8002502:	e9c1 2306 	strd	r2, r3, [r1, #24]
    Kalman->bias += K[1] * y;
 8002506:	69fb      	ldr	r3, [r7, #28]
 8002508:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 800250c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002510:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002514:	f7fe f870 	bl	80005f8 <__aeabi_dmul>
 8002518:	4602      	mov	r2, r0
 800251a:	460b      	mov	r3, r1
 800251c:	4620      	mov	r0, r4
 800251e:	4629      	mov	r1, r5
 8002520:	f7fd feb4 	bl	800028c <__adddf3>
 8002524:	4602      	mov	r2, r0
 8002526:	460b      	mov	r3, r1
 8002528:	69f9      	ldr	r1, [r7, #28]
 800252a:	e9c1 2308 	strd	r2, r3, [r1, #32]

    double P00_temp = Kalman->P[0][0];
 800252e:	69fb      	ldr	r3, [r7, #28]
 8002530:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8002534:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    double P01_temp = Kalman->P[0][1];
 8002538:	69fb      	ldr	r3, [r7, #28]
 800253a:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 800253e:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    Kalman->P[0][0] -= K[0] * P00_temp;
 8002542:	69fb      	ldr	r3, [r7, #28]
 8002544:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	@ 0x28
 8002548:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800254c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002550:	f7fe f852 	bl	80005f8 <__aeabi_dmul>
 8002554:	4602      	mov	r2, r0
 8002556:	460b      	mov	r3, r1
 8002558:	4620      	mov	r0, r4
 800255a:	4629      	mov	r1, r5
 800255c:	f7fd fe94 	bl	8000288 <__aeabi_dsub>
 8002560:	4602      	mov	r2, r0
 8002562:	460b      	mov	r3, r1
 8002564:	69f9      	ldr	r1, [r7, #28]
 8002566:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    Kalman->P[0][1] -= K[0] * P01_temp;
 800256a:	69fb      	ldr	r3, [r7, #28]
 800256c:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	@ 0x30
 8002570:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002574:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8002578:	f7fe f83e 	bl	80005f8 <__aeabi_dmul>
 800257c:	4602      	mov	r2, r0
 800257e:	460b      	mov	r3, r1
 8002580:	4620      	mov	r0, r4
 8002582:	4629      	mov	r1, r5
 8002584:	f7fd fe80 	bl	8000288 <__aeabi_dsub>
 8002588:	4602      	mov	r2, r0
 800258a:	460b      	mov	r3, r1
 800258c:	69f9      	ldr	r1, [r7, #28]
 800258e:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    Kalman->P[1][0] -= K[1] * P00_temp;
 8002592:	69fb      	ldr	r3, [r7, #28]
 8002594:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	@ 0x38
 8002598:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 800259c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80025a0:	f7fe f82a 	bl	80005f8 <__aeabi_dmul>
 80025a4:	4602      	mov	r2, r0
 80025a6:	460b      	mov	r3, r1
 80025a8:	4620      	mov	r0, r4
 80025aa:	4629      	mov	r1, r5
 80025ac:	f7fd fe6c 	bl	8000288 <__aeabi_dsub>
 80025b0:	4602      	mov	r2, r0
 80025b2:	460b      	mov	r3, r1
 80025b4:	69f9      	ldr	r1, [r7, #28]
 80025b6:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
    Kalman->P[1][1] -= K[1] * P01_temp;
 80025ba:	69fb      	ldr	r3, [r7, #28]
 80025bc:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	@ 0x40
 80025c0:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80025c4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80025c8:	f7fe f816 	bl	80005f8 <__aeabi_dmul>
 80025cc:	4602      	mov	r2, r0
 80025ce:	460b      	mov	r3, r1
 80025d0:	4620      	mov	r0, r4
 80025d2:	4629      	mov	r1, r5
 80025d4:	f7fd fe58 	bl	8000288 <__aeabi_dsub>
 80025d8:	4602      	mov	r2, r0
 80025da:	460b      	mov	r3, r1
 80025dc:	69f9      	ldr	r1, [r7, #28]
 80025de:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40

    return Kalman->angle;
 80025e2:	69fb      	ldr	r3, [r7, #28]
 80025e4:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 80025e8:	ec43 2b17 	vmov	d7, r2, r3
};
 80025ec:	eeb0 0a47 	vmov.f32	s0, s14
 80025f0:	eef0 0a67 	vmov.f32	s1, s15
 80025f4:	3758      	adds	r7, #88	@ 0x58
 80025f6:	46bd      	mov	sp, r7
 80025f8:	bdb0      	pop	{r4, r5, r7, pc}

080025fa <width>:
SSD1306_Geometry display_geometry = SSD1306_GEOMETRY;

//
//  Get a width and height screen size
//
static const uint16_t width(void)  { return SSD1306_WIDTH; };
 80025fa:	b480      	push	{r7}
 80025fc:	af00      	add	r7, sp, #0
 80025fe:	2380      	movs	r3, #128	@ 0x80
 8002600:	4618      	mov	r0, r3
 8002602:	46bd      	mov	sp, r7
 8002604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002608:	4770      	bx	lr

0800260a <height>:
static const uint16_t height(void)  { return SSD1306_HEIGHT; };
 800260a:	b480      	push	{r7}
 800260c:	af00      	add	r7, sp, #0
 800260e:	2320      	movs	r3, #32
 8002610:	4618      	mov	r0, r3
 8002612:	46bd      	mov	sp, r7
 8002614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002618:	4770      	bx	lr

0800261a <ssd1306_GetWidth>:

uint16_t ssd1306_GetWidth(void)
{
 800261a:	b480      	push	{r7}
 800261c:	af00      	add	r7, sp, #0
  return SSD1306_WIDTH;
 800261e:	2380      	movs	r3, #128	@ 0x80
}
 8002620:	4618      	mov	r0, r3
 8002622:	46bd      	mov	sp, r7
 8002624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002628:	4770      	bx	lr

0800262a <ssd1306_GetHeight>:

uint16_t ssd1306_GetHeight(void)
{
 800262a:	b480      	push	{r7}
 800262c:	af00      	add	r7, sp, #0
  return SSD1306_HEIGHT;
 800262e:	2320      	movs	r3, #32
}
 8002630:	4618      	mov	r0, r3
 8002632:	46bd      	mov	sp, r7
 8002634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002638:	4770      	bx	lr
	...

0800263c <ssd1306_Init>:
  SSD1306.Color = color;
}

//  Initialize the oled screen
uint8_t ssd1306_Init(void)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	af00      	add	r7, sp, #0
  /* Check if LCD connected to I2C */
  if (HAL_I2C_IsDeviceReady(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 5, 1000) != HAL_OK)
 8002640:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002644:	2205      	movs	r2, #5
 8002646:	2178      	movs	r1, #120	@ 0x78
 8002648:	4847      	ldr	r0, [pc, #284]	@ (8002768 <ssd1306_Init+0x12c>)
 800264a:	f002 ff09 	bl	8005460 <HAL_I2C_IsDeviceReady>
 800264e:	4603      	mov	r3, r0
 8002650:	2b00      	cmp	r3, #0
 8002652:	d004      	beq.n	800265e <ssd1306_Init+0x22>
  {
    SSD1306.Initialized = 0;
 8002654:	4b45      	ldr	r3, [pc, #276]	@ (800276c <ssd1306_Init+0x130>)
 8002656:	2200      	movs	r2, #0
 8002658:	719a      	strb	r2, [r3, #6]
    /* Return false */
    return 0;
 800265a:	2300      	movs	r3, #0
 800265c:	e082      	b.n	8002764 <ssd1306_Init+0x128>
  }

  // Wait for the screen to boot
  HAL_Delay(100);
 800265e:	2064      	movs	r0, #100	@ 0x64
 8002660:	f001 fa4e 	bl	8003b00 <HAL_Delay>

  /* Init LCD */
  ssd1306_WriteCommand(DISPLAYOFF);
 8002664:	20ae      	movs	r0, #174	@ 0xae
 8002666:	f000 f9d5 	bl	8002a14 <ssd1306_WriteCommand>
  ssd1306_WriteCommand(SETDISPLAYCLOCKDIV);
 800266a:	20d5      	movs	r0, #213	@ 0xd5
 800266c:	f000 f9d2 	bl	8002a14 <ssd1306_WriteCommand>
  ssd1306_WriteCommand(0xF0); // Increase speed of the display max ~96Hz
 8002670:	20f0      	movs	r0, #240	@ 0xf0
 8002672:	f000 f9cf 	bl	8002a14 <ssd1306_WriteCommand>
  ssd1306_WriteCommand(SETMULTIPLEX);
 8002676:	20a8      	movs	r0, #168	@ 0xa8
 8002678:	f000 f9cc 	bl	8002a14 <ssd1306_WriteCommand>
  ssd1306_WriteCommand(height() - 1);
 800267c:	f7ff ffc5 	bl	800260a <height>
 8002680:	4603      	mov	r3, r0
 8002682:	b2db      	uxtb	r3, r3
 8002684:	3b01      	subs	r3, #1
 8002686:	b2db      	uxtb	r3, r3
 8002688:	4618      	mov	r0, r3
 800268a:	f000 f9c3 	bl	8002a14 <ssd1306_WriteCommand>
  ssd1306_WriteCommand(SETDISPLAYOFFSET);
 800268e:	20d3      	movs	r0, #211	@ 0xd3
 8002690:	f000 f9c0 	bl	8002a14 <ssd1306_WriteCommand>
  ssd1306_WriteCommand(0x00);
 8002694:	2000      	movs	r0, #0
 8002696:	f000 f9bd 	bl	8002a14 <ssd1306_WriteCommand>
  ssd1306_WriteCommand(SETSTARTLINE);
 800269a:	2040      	movs	r0, #64	@ 0x40
 800269c:	f000 f9ba 	bl	8002a14 <ssd1306_WriteCommand>
  ssd1306_WriteCommand(CHARGEPUMP);
 80026a0:	208d      	movs	r0, #141	@ 0x8d
 80026a2:	f000 f9b7 	bl	8002a14 <ssd1306_WriteCommand>
  ssd1306_WriteCommand(0x14);
 80026a6:	2014      	movs	r0, #20
 80026a8:	f000 f9b4 	bl	8002a14 <ssd1306_WriteCommand>
  ssd1306_WriteCommand(MEMORYMODE);
 80026ac:	2020      	movs	r0, #32
 80026ae:	f000 f9b1 	bl	8002a14 <ssd1306_WriteCommand>
  ssd1306_WriteCommand(0x00);
 80026b2:	2000      	movs	r0, #0
 80026b4:	f000 f9ae 	bl	8002a14 <ssd1306_WriteCommand>
  ssd1306_WriteCommand(SEGREMAP);
 80026b8:	20a0      	movs	r0, #160	@ 0xa0
 80026ba:	f000 f9ab 	bl	8002a14 <ssd1306_WriteCommand>
  ssd1306_WriteCommand(COMSCANINC);
 80026be:	20c0      	movs	r0, #192	@ 0xc0
 80026c0:	f000 f9a8 	bl	8002a14 <ssd1306_WriteCommand>
  ssd1306_WriteCommand(SETCOMPINS);
 80026c4:	20da      	movs	r0, #218	@ 0xda
 80026c6:	f000 f9a5 	bl	8002a14 <ssd1306_WriteCommand>

  if (display_geometry == GEOMETRY_128_64)
 80026ca:	4b29      	ldr	r3, [pc, #164]	@ (8002770 <ssd1306_Init+0x134>)
 80026cc:	781b      	ldrb	r3, [r3, #0]
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d103      	bne.n	80026da <ssd1306_Init+0x9e>
  {
    ssd1306_WriteCommand(0x12);
 80026d2:	2012      	movs	r0, #18
 80026d4:	f000 f99e 	bl	8002a14 <ssd1306_WriteCommand>
 80026d8:	e006      	b.n	80026e8 <ssd1306_Init+0xac>
  }
  else if (display_geometry == GEOMETRY_128_32)
 80026da:	4b25      	ldr	r3, [pc, #148]	@ (8002770 <ssd1306_Init+0x134>)
 80026dc:	781b      	ldrb	r3, [r3, #0]
 80026de:	2b01      	cmp	r3, #1
 80026e0:	d102      	bne.n	80026e8 <ssd1306_Init+0xac>
  {
    ssd1306_WriteCommand(0x02);
 80026e2:	2002      	movs	r0, #2
 80026e4:	f000 f996 	bl	8002a14 <ssd1306_WriteCommand>
  }

  ssd1306_WriteCommand(SETCONTRAST);
 80026e8:	2081      	movs	r0, #129	@ 0x81
 80026ea:	f000 f993 	bl	8002a14 <ssd1306_WriteCommand>

  if (display_geometry == GEOMETRY_128_64)
 80026ee:	4b20      	ldr	r3, [pc, #128]	@ (8002770 <ssd1306_Init+0x134>)
 80026f0:	781b      	ldrb	r3, [r3, #0]
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d103      	bne.n	80026fe <ssd1306_Init+0xc2>
  {
    ssd1306_WriteCommand(0xCF);
 80026f6:	20cf      	movs	r0, #207	@ 0xcf
 80026f8:	f000 f98c 	bl	8002a14 <ssd1306_WriteCommand>
 80026fc:	e006      	b.n	800270c <ssd1306_Init+0xd0>
  }
  else if (display_geometry == GEOMETRY_128_32)
 80026fe:	4b1c      	ldr	r3, [pc, #112]	@ (8002770 <ssd1306_Init+0x134>)
 8002700:	781b      	ldrb	r3, [r3, #0]
 8002702:	2b01      	cmp	r3, #1
 8002704:	d102      	bne.n	800270c <ssd1306_Init+0xd0>
  {
    ssd1306_WriteCommand(0x8F);
 8002706:	208f      	movs	r0, #143	@ 0x8f
 8002708:	f000 f984 	bl	8002a14 <ssd1306_WriteCommand>
  }

  ssd1306_WriteCommand(SETPRECHARGE);
 800270c:	20d9      	movs	r0, #217	@ 0xd9
 800270e:	f000 f981 	bl	8002a14 <ssd1306_WriteCommand>
  ssd1306_WriteCommand(0xF1);
 8002712:	20f1      	movs	r0, #241	@ 0xf1
 8002714:	f000 f97e 	bl	8002a14 <ssd1306_WriteCommand>
  ssd1306_WriteCommand(SETVCOMDETECT); //0xDB, (additionally needed to lower the contrast)
 8002718:	20db      	movs	r0, #219	@ 0xdb
 800271a:	f000 f97b 	bl	8002a14 <ssd1306_WriteCommand>
  ssd1306_WriteCommand(0x40);          //0x40 default, to lower the contrast, put 0
 800271e:	2040      	movs	r0, #64	@ 0x40
 8002720:	f000 f978 	bl	8002a14 <ssd1306_WriteCommand>
  ssd1306_WriteCommand(DISPLAYALLON_RESUME);
 8002724:	20a4      	movs	r0, #164	@ 0xa4
 8002726:	f000 f975 	bl	8002a14 <ssd1306_WriteCommand>
  ssd1306_WriteCommand(NORMALDISPLAY);
 800272a:	20a6      	movs	r0, #166	@ 0xa6
 800272c:	f000 f972 	bl	8002a14 <ssd1306_WriteCommand>
  ssd1306_WriteCommand(0x2e);            // stop scroll
 8002730:	202e      	movs	r0, #46	@ 0x2e
 8002732:	f000 f96f 	bl	8002a14 <ssd1306_WriteCommand>
  ssd1306_WriteCommand(DISPLAYON);
 8002736:	20af      	movs	r0, #175	@ 0xaf
 8002738:	f000 f96c 	bl	8002a14 <ssd1306_WriteCommand>

  // Set default values for screen object
  SSD1306.CurrentX = 0;
 800273c:	4b0b      	ldr	r3, [pc, #44]	@ (800276c <ssd1306_Init+0x130>)
 800273e:	2200      	movs	r2, #0
 8002740:	801a      	strh	r2, [r3, #0]
  SSD1306.CurrentY = 0;
 8002742:	4b0a      	ldr	r3, [pc, #40]	@ (800276c <ssd1306_Init+0x130>)
 8002744:	2200      	movs	r2, #0
 8002746:	805a      	strh	r2, [r3, #2]
  SSD1306.Color = Black;
 8002748:	4b08      	ldr	r3, [pc, #32]	@ (800276c <ssd1306_Init+0x130>)
 800274a:	2200      	movs	r2, #0
 800274c:	715a      	strb	r2, [r3, #5]
  SSD1306.Inverted = 1;
 800274e:	4b07      	ldr	r3, [pc, #28]	@ (800276c <ssd1306_Init+0x130>)
 8002750:	2201      	movs	r2, #1
 8002752:	711a      	strb	r2, [r3, #4]
  // Clear screen
  ssd1306_Clear();
 8002754:	f000 f952 	bl	80029fc <ssd1306_Clear>

  // Continuous Update on
  ssd1306_ContUpdateEnable();

  // Flush buffer to screen
  ssd1306_UpdateScreen();
 8002758:	f000 f98c 	bl	8002a74 <ssd1306_UpdateScreen>

  SSD1306.Initialized = 1;
 800275c:	4b03      	ldr	r3, [pc, #12]	@ (800276c <ssd1306_Init+0x130>)
 800275e:	2201      	movs	r2, #1
 8002760:	719a      	strb	r2, [r3, #6]


  /* Return OK */
  return 1;
 8002762:	2301      	movs	r3, #1
}
 8002764:	4618      	mov	r0, r3
 8002766:	bd80      	pop	{r7, pc}
 8002768:	20000518 	.word	0x20000518
 800276c:	200002f0 	.word	0x200002f0
 8002770:	20000098 	.word	0x20000098

08002774 <ssd1306_DrawPixel>:
//  X => X Coordinate
//  Y => Y Coordinate
//  color => Pixel color
//
void ssd1306_DrawPixel(uint8_t x, uint8_t y)
{
 8002774:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002776:	b085      	sub	sp, #20
 8002778:	af00      	add	r7, sp, #0
 800277a:	4603      	mov	r3, r0
 800277c:	460a      	mov	r2, r1
 800277e:	71fb      	strb	r3, [r7, #7]
 8002780:	4613      	mov	r3, r2
 8002782:	71bb      	strb	r3, [r7, #6]
  SSD1306_COLOR color = SSD1306.Color;
 8002784:	4b34      	ldr	r3, [pc, #208]	@ (8002858 <ssd1306_DrawPixel+0xe4>)
 8002786:	795b      	ldrb	r3, [r3, #5]
 8002788:	73fb      	strb	r3, [r7, #15]

  if (x >= ssd1306_GetWidth() || y >= ssd1306_GetHeight())
 800278a:	79fb      	ldrb	r3, [r7, #7]
 800278c:	b29c      	uxth	r4, r3
 800278e:	f7ff ff44 	bl	800261a <ssd1306_GetWidth>
 8002792:	4603      	mov	r3, r0
 8002794:	429c      	cmp	r4, r3
 8002796:	d25a      	bcs.n	800284e <ssd1306_DrawPixel+0xda>
 8002798:	79bb      	ldrb	r3, [r7, #6]
 800279a:	b29c      	uxth	r4, r3
 800279c:	f7ff ff45 	bl	800262a <ssd1306_GetHeight>
 80027a0:	4603      	mov	r3, r0
 80027a2:	429c      	cmp	r4, r3
 80027a4:	d253      	bcs.n	800284e <ssd1306_DrawPixel+0xda>
    // Don't write outside the buffer
    return;
  }

  // Check if pixel should be inverted
  if (SSD1306.Inverted)
 80027a6:	4b2c      	ldr	r3, [pc, #176]	@ (8002858 <ssd1306_DrawPixel+0xe4>)
 80027a8:	791b      	ldrb	r3, [r3, #4]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d006      	beq.n	80027bc <ssd1306_DrawPixel+0x48>
  {
    color = (SSD1306_COLOR) !color;
 80027ae:	7bfb      	ldrb	r3, [r7, #15]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	bf0c      	ite	eq
 80027b4:	2301      	moveq	r3, #1
 80027b6:	2300      	movne	r3, #0
 80027b8:	b2db      	uxtb	r3, r3
 80027ba:	73fb      	strb	r3, [r7, #15]
  }

  // Draw in the right color
  if (color == White)
 80027bc:	7bfb      	ldrb	r3, [r7, #15]
 80027be:	2b01      	cmp	r3, #1
 80027c0:	d121      	bne.n	8002806 <ssd1306_DrawPixel+0x92>
  {
    SSD1306_Buffer[x + (y / 8) * width()] |= 1 << (y % 8);
 80027c2:	79fc      	ldrb	r4, [r7, #7]
 80027c4:	79bb      	ldrb	r3, [r7, #6]
 80027c6:	08db      	lsrs	r3, r3, #3
 80027c8:	b2dd      	uxtb	r5, r3
 80027ca:	462e      	mov	r6, r5
 80027cc:	f7ff ff15 	bl	80025fa <width>
 80027d0:	4603      	mov	r3, r0
 80027d2:	4618      	mov	r0, r3
 80027d4:	4603      	mov	r3, r0
 80027d6:	fb06 f303 	mul.w	r3, r6, r3
 80027da:	4423      	add	r3, r4
 80027dc:	4a1f      	ldr	r2, [pc, #124]	@ (800285c <ssd1306_DrawPixel+0xe8>)
 80027de:	5cd3      	ldrb	r3, [r2, r3]
 80027e0:	b25a      	sxtb	r2, r3
 80027e2:	79bb      	ldrb	r3, [r7, #6]
 80027e4:	f003 0307 	and.w	r3, r3, #7
 80027e8:	2101      	movs	r1, #1
 80027ea:	fa01 f303 	lsl.w	r3, r1, r3
 80027ee:	b25b      	sxtb	r3, r3
 80027f0:	4313      	orrs	r3, r2
 80027f2:	b259      	sxtb	r1, r3
 80027f4:	79fa      	ldrb	r2, [r7, #7]
 80027f6:	462b      	mov	r3, r5
 80027f8:	fb00 f303 	mul.w	r3, r0, r3
 80027fc:	4413      	add	r3, r2
 80027fe:	b2c9      	uxtb	r1, r1
 8002800:	4a16      	ldr	r2, [pc, #88]	@ (800285c <ssd1306_DrawPixel+0xe8>)
 8002802:	54d1      	strb	r1, [r2, r3]
 8002804:	e024      	b.n	8002850 <ssd1306_DrawPixel+0xdc>
  }
  else
  {
    SSD1306_Buffer[x + (y / 8) * width()] &= ~(1 << (y % 8));
 8002806:	79fc      	ldrb	r4, [r7, #7]
 8002808:	79bb      	ldrb	r3, [r7, #6]
 800280a:	08db      	lsrs	r3, r3, #3
 800280c:	b2dd      	uxtb	r5, r3
 800280e:	462e      	mov	r6, r5
 8002810:	f7ff fef3 	bl	80025fa <width>
 8002814:	4603      	mov	r3, r0
 8002816:	4618      	mov	r0, r3
 8002818:	4603      	mov	r3, r0
 800281a:	fb06 f303 	mul.w	r3, r6, r3
 800281e:	4423      	add	r3, r4
 8002820:	4a0e      	ldr	r2, [pc, #56]	@ (800285c <ssd1306_DrawPixel+0xe8>)
 8002822:	5cd3      	ldrb	r3, [r2, r3]
 8002824:	b25a      	sxtb	r2, r3
 8002826:	79bb      	ldrb	r3, [r7, #6]
 8002828:	f003 0307 	and.w	r3, r3, #7
 800282c:	2101      	movs	r1, #1
 800282e:	fa01 f303 	lsl.w	r3, r1, r3
 8002832:	b25b      	sxtb	r3, r3
 8002834:	43db      	mvns	r3, r3
 8002836:	b25b      	sxtb	r3, r3
 8002838:	4013      	ands	r3, r2
 800283a:	b259      	sxtb	r1, r3
 800283c:	79fa      	ldrb	r2, [r7, #7]
 800283e:	462b      	mov	r3, r5
 8002840:	fb00 f303 	mul.w	r3, r0, r3
 8002844:	4413      	add	r3, r2
 8002846:	b2c9      	uxtb	r1, r1
 8002848:	4a04      	ldr	r2, [pc, #16]	@ (800285c <ssd1306_DrawPixel+0xe8>)
 800284a:	54d1      	strb	r1, [r2, r3]
 800284c:	e000      	b.n	8002850 <ssd1306_DrawPixel+0xdc>
    return;
 800284e:	bf00      	nop
  }
}
 8002850:	3714      	adds	r7, #20
 8002852:	46bd      	mov	sp, r7
 8002854:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002856:	bf00      	nop
 8002858:	200002f0 	.word	0x200002f0
 800285c:	200002f8 	.word	0x200002f8

08002860 <ssd1306_WriteChar>:
    pY += 8;
  }
}

char ssd1306_WriteChar(char ch, FontDef Font)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b088      	sub	sp, #32
 8002864:	af00      	add	r7, sp, #0
 8002866:	1d3b      	adds	r3, r7, #4
 8002868:	e883 0006 	stmia.w	r3, {r1, r2}
 800286c:	4603      	mov	r3, r0
 800286e:	73fb      	strb	r3, [r7, #15]
  uint32_t i, b, j;

  // Check remaining space on current line
  if (width() <= (SSD1306.CurrentX + Font.FontWidth) ||
 8002870:	f7ff fec3 	bl	80025fa <width>
 8002874:	4603      	mov	r3, r0
 8002876:	461a      	mov	r2, r3
 8002878:	4b40      	ldr	r3, [pc, #256]	@ (800297c <ssd1306_WriteChar+0x11c>)
 800287a:	881b      	ldrh	r3, [r3, #0]
 800287c:	4619      	mov	r1, r3
 800287e:	793b      	ldrb	r3, [r7, #4]
 8002880:	440b      	add	r3, r1
 8002882:	429a      	cmp	r2, r3
 8002884:	dd0a      	ble.n	800289c <ssd1306_WriteChar+0x3c>
    height() <= (SSD1306.CurrentY + Font.FontHeight))
 8002886:	f7ff fec0 	bl	800260a <height>
 800288a:	4603      	mov	r3, r0
 800288c:	461a      	mov	r2, r3
 800288e:	4b3b      	ldr	r3, [pc, #236]	@ (800297c <ssd1306_WriteChar+0x11c>)
 8002890:	885b      	ldrh	r3, [r3, #2]
 8002892:	4619      	mov	r1, r3
 8002894:	797b      	ldrb	r3, [r7, #5]
 8002896:	440b      	add	r3, r1
  if (width() <= (SSD1306.CurrentX + Font.FontWidth) ||
 8002898:	429a      	cmp	r2, r3
 800289a:	dc01      	bgt.n	80028a0 <ssd1306_WriteChar+0x40>
  {
    // Not enough space on current line
    return 0;
 800289c:	2300      	movs	r3, #0
 800289e:	e069      	b.n	8002974 <ssd1306_WriteChar+0x114>
  }

  // Use the font to write
  for (i = 0; i < Font.FontHeight; i++)
 80028a0:	2300      	movs	r3, #0
 80028a2:	61fb      	str	r3, [r7, #28]
 80028a4:	e059      	b.n	800295a <ssd1306_WriteChar+0xfa>
  {
    b = Font.data[(ch - 32) * Font.FontHeight + i];
 80028a6:	68ba      	ldr	r2, [r7, #8]
 80028a8:	7bfb      	ldrb	r3, [r7, #15]
 80028aa:	3b20      	subs	r3, #32
 80028ac:	7979      	ldrb	r1, [r7, #5]
 80028ae:	fb01 f303 	mul.w	r3, r1, r3
 80028b2:	4619      	mov	r1, r3
 80028b4:	69fb      	ldr	r3, [r7, #28]
 80028b6:	440b      	add	r3, r1
 80028b8:	005b      	lsls	r3, r3, #1
 80028ba:	4413      	add	r3, r2
 80028bc:	881b      	ldrh	r3, [r3, #0]
 80028be:	617b      	str	r3, [r7, #20]
    for (j = 0; j < Font.FontWidth; j++)
 80028c0:	2300      	movs	r3, #0
 80028c2:	61bb      	str	r3, [r7, #24]
 80028c4:	e041      	b.n	800294a <ssd1306_WriteChar+0xea>
    {
      if ((b << j) & 0x8000)
 80028c6:	697a      	ldr	r2, [r7, #20]
 80028c8:	69bb      	ldr	r3, [r7, #24]
 80028ca:	fa02 f303 	lsl.w	r3, r2, r3
 80028ce:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d011      	beq.n	80028fa <ssd1306_WriteChar+0x9a>
      {
        ssd1306_DrawPixel(SSD1306.CurrentX + j, SSD1306.CurrentY + i);
 80028d6:	4b29      	ldr	r3, [pc, #164]	@ (800297c <ssd1306_WriteChar+0x11c>)
 80028d8:	881b      	ldrh	r3, [r3, #0]
 80028da:	b2da      	uxtb	r2, r3
 80028dc:	69bb      	ldr	r3, [r7, #24]
 80028de:	b2db      	uxtb	r3, r3
 80028e0:	4413      	add	r3, r2
 80028e2:	b2d8      	uxtb	r0, r3
 80028e4:	4b25      	ldr	r3, [pc, #148]	@ (800297c <ssd1306_WriteChar+0x11c>)
 80028e6:	885b      	ldrh	r3, [r3, #2]
 80028e8:	b2da      	uxtb	r2, r3
 80028ea:	69fb      	ldr	r3, [r7, #28]
 80028ec:	b2db      	uxtb	r3, r3
 80028ee:	4413      	add	r3, r2
 80028f0:	b2db      	uxtb	r3, r3
 80028f2:	4619      	mov	r1, r3
 80028f4:	f7ff ff3e 	bl	8002774 <ssd1306_DrawPixel>
 80028f8:	e024      	b.n	8002944 <ssd1306_WriteChar+0xe4>
      }
      else
      {
        SSD1306.Color = !SSD1306.Color;
 80028fa:	4b20      	ldr	r3, [pc, #128]	@ (800297c <ssd1306_WriteChar+0x11c>)
 80028fc:	795b      	ldrb	r3, [r3, #5]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	bf0c      	ite	eq
 8002902:	2301      	moveq	r3, #1
 8002904:	2300      	movne	r3, #0
 8002906:	b2db      	uxtb	r3, r3
 8002908:	461a      	mov	r2, r3
 800290a:	4b1c      	ldr	r3, [pc, #112]	@ (800297c <ssd1306_WriteChar+0x11c>)
 800290c:	715a      	strb	r2, [r3, #5]
        ssd1306_DrawPixel(SSD1306.CurrentX + j, SSD1306.CurrentY + i);
 800290e:	4b1b      	ldr	r3, [pc, #108]	@ (800297c <ssd1306_WriteChar+0x11c>)
 8002910:	881b      	ldrh	r3, [r3, #0]
 8002912:	b2da      	uxtb	r2, r3
 8002914:	69bb      	ldr	r3, [r7, #24]
 8002916:	b2db      	uxtb	r3, r3
 8002918:	4413      	add	r3, r2
 800291a:	b2d8      	uxtb	r0, r3
 800291c:	4b17      	ldr	r3, [pc, #92]	@ (800297c <ssd1306_WriteChar+0x11c>)
 800291e:	885b      	ldrh	r3, [r3, #2]
 8002920:	b2da      	uxtb	r2, r3
 8002922:	69fb      	ldr	r3, [r7, #28]
 8002924:	b2db      	uxtb	r3, r3
 8002926:	4413      	add	r3, r2
 8002928:	b2db      	uxtb	r3, r3
 800292a:	4619      	mov	r1, r3
 800292c:	f7ff ff22 	bl	8002774 <ssd1306_DrawPixel>
        SSD1306.Color = !SSD1306.Color;
 8002930:	4b12      	ldr	r3, [pc, #72]	@ (800297c <ssd1306_WriteChar+0x11c>)
 8002932:	795b      	ldrb	r3, [r3, #5]
 8002934:	2b00      	cmp	r3, #0
 8002936:	bf0c      	ite	eq
 8002938:	2301      	moveq	r3, #1
 800293a:	2300      	movne	r3, #0
 800293c:	b2db      	uxtb	r3, r3
 800293e:	461a      	mov	r2, r3
 8002940:	4b0e      	ldr	r3, [pc, #56]	@ (800297c <ssd1306_WriteChar+0x11c>)
 8002942:	715a      	strb	r2, [r3, #5]
    for (j = 0; j < Font.FontWidth; j++)
 8002944:	69bb      	ldr	r3, [r7, #24]
 8002946:	3301      	adds	r3, #1
 8002948:	61bb      	str	r3, [r7, #24]
 800294a:	793b      	ldrb	r3, [r7, #4]
 800294c:	461a      	mov	r2, r3
 800294e:	69bb      	ldr	r3, [r7, #24]
 8002950:	4293      	cmp	r3, r2
 8002952:	d3b8      	bcc.n	80028c6 <ssd1306_WriteChar+0x66>
  for (i = 0; i < Font.FontHeight; i++)
 8002954:	69fb      	ldr	r3, [r7, #28]
 8002956:	3301      	adds	r3, #1
 8002958:	61fb      	str	r3, [r7, #28]
 800295a:	797b      	ldrb	r3, [r7, #5]
 800295c:	461a      	mov	r2, r3
 800295e:	69fb      	ldr	r3, [r7, #28]
 8002960:	4293      	cmp	r3, r2
 8002962:	d3a0      	bcc.n	80028a6 <ssd1306_WriteChar+0x46>
      }
    }
  }

  // The current space is now taken
  SSD1306.CurrentX += Font.FontWidth;
 8002964:	4b05      	ldr	r3, [pc, #20]	@ (800297c <ssd1306_WriteChar+0x11c>)
 8002966:	881b      	ldrh	r3, [r3, #0]
 8002968:	793a      	ldrb	r2, [r7, #4]
 800296a:	4413      	add	r3, r2
 800296c:	b29a      	uxth	r2, r3
 800296e:	4b03      	ldr	r3, [pc, #12]	@ (800297c <ssd1306_WriteChar+0x11c>)
 8002970:	801a      	strh	r2, [r3, #0]

  // Return written char for validation
  return ch;
 8002972:	7bfb      	ldrb	r3, [r7, #15]
}
 8002974:	4618      	mov	r0, r3
 8002976:	3720      	adds	r7, #32
 8002978:	46bd      	mov	sp, r7
 800297a:	bd80      	pop	{r7, pc}
 800297c:	200002f0 	.word	0x200002f0

08002980 <ssd1306_WriteString>:

//
//  Write full string to screenbuffer
//
char ssd1306_WriteString(char* str, FontDef Font)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	b084      	sub	sp, #16
 8002984:	af00      	add	r7, sp, #0
 8002986:	60f8      	str	r0, [r7, #12]
 8002988:	1d3b      	adds	r3, r7, #4
 800298a:	e883 0006 	stmia.w	r3, {r1, r2}
  // Write until null-byte
  while (*str)
 800298e:	e012      	b.n	80029b6 <ssd1306_WriteString+0x36>
  {
    if (ssd1306_WriteChar(*str, Font) != *str)
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	7818      	ldrb	r0, [r3, #0]
 8002994:	1d3b      	adds	r3, r7, #4
 8002996:	e893 0006 	ldmia.w	r3, {r1, r2}
 800299a:	f7ff ff61 	bl	8002860 <ssd1306_WriteChar>
 800299e:	4603      	mov	r3, r0
 80029a0:	461a      	mov	r2, r3
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	781b      	ldrb	r3, [r3, #0]
 80029a6:	429a      	cmp	r2, r3
 80029a8:	d002      	beq.n	80029b0 <ssd1306_WriteString+0x30>
    {
      // Char could not be written
      return *str;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	781b      	ldrb	r3, [r3, #0]
 80029ae:	e008      	b.n	80029c2 <ssd1306_WriteString+0x42>
    }

    // Next char
    str++;
 80029b0:	68fb      	ldr	r3, [r7, #12]
 80029b2:	3301      	adds	r3, #1
 80029b4:	60fb      	str	r3, [r7, #12]
  while (*str)
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	781b      	ldrb	r3, [r3, #0]
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d1e8      	bne.n	8002990 <ssd1306_WriteString+0x10>
  }

  // Everything ok
  return *str;
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	781b      	ldrb	r3, [r3, #0]
}
 80029c2:	4618      	mov	r0, r3
 80029c4:	3710      	adds	r7, #16
 80029c6:	46bd      	mov	sp, r7
 80029c8:	bd80      	pop	{r7, pc}
	...

080029cc <ssd1306_SetCursor>:

//
//  Position the cursor
//
void ssd1306_SetCursor(uint8_t x, uint8_t y)
{
 80029cc:	b480      	push	{r7}
 80029ce:	b083      	sub	sp, #12
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	4603      	mov	r3, r0
 80029d4:	460a      	mov	r2, r1
 80029d6:	71fb      	strb	r3, [r7, #7]
 80029d8:	4613      	mov	r3, r2
 80029da:	71bb      	strb	r3, [r7, #6]
  SSD1306.CurrentX = x;
 80029dc:	79fb      	ldrb	r3, [r7, #7]
 80029de:	b29a      	uxth	r2, r3
 80029e0:	4b05      	ldr	r3, [pc, #20]	@ (80029f8 <ssd1306_SetCursor+0x2c>)
 80029e2:	801a      	strh	r2, [r3, #0]
  SSD1306.CurrentY = y;
 80029e4:	79bb      	ldrb	r3, [r7, #6]
 80029e6:	b29a      	uxth	r2, r3
 80029e8:	4b03      	ldr	r3, [pc, #12]	@ (80029f8 <ssd1306_SetCursor+0x2c>)
 80029ea:	805a      	strh	r2, [r3, #2]
}
 80029ec:	bf00      	nop
 80029ee:	370c      	adds	r7, #12
 80029f0:	46bd      	mov	sp, r7
 80029f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029f6:	4770      	bx	lr
 80029f8:	200002f0 	.word	0x200002f0

080029fc <ssd1306_Clear>:

void ssd1306_Clear()
{
 80029fc:	b580      	push	{r7, lr}
 80029fe:	af00      	add	r7, sp, #0
  memset(SSD1306_Buffer, 0, SSD1306_BUFFER_SIZE);
 8002a00:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002a04:	2100      	movs	r1, #0
 8002a06:	4802      	ldr	r0, [pc, #8]	@ (8002a10 <ssd1306_Clear+0x14>)
 8002a08:	f00a ff9c 	bl	800d944 <memset>
}
 8002a0c:	bf00      	nop
 8002a0e:	bd80      	pop	{r7, pc}
 8002a10:	200002f8 	.word	0x200002f8

08002a14 <ssd1306_WriteCommand>:

//
//  Send a byte to the command register
//
void ssd1306_WriteCommand(uint8_t command)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	b086      	sub	sp, #24
 8002a18:	af04      	add	r7, sp, #16
 8002a1a:	4603      	mov	r3, r0
 8002a1c:	71fb      	strb	r3, [r7, #7]
  HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &command, 1, 10);
 8002a1e:	230a      	movs	r3, #10
 8002a20:	9302      	str	r3, [sp, #8]
 8002a22:	2301      	movs	r3, #1
 8002a24:	9301      	str	r3, [sp, #4]
 8002a26:	1dfb      	adds	r3, r7, #7
 8002a28:	9300      	str	r3, [sp, #0]
 8002a2a:	2301      	movs	r3, #1
 8002a2c:	2200      	movs	r2, #0
 8002a2e:	2178      	movs	r1, #120	@ 0x78
 8002a30:	4803      	ldr	r0, [pc, #12]	@ (8002a40 <ssd1306_WriteCommand+0x2c>)
 8002a32:	f002 f859 	bl	8004ae8 <HAL_I2C_Mem_Write>
}
 8002a36:	bf00      	nop
 8002a38:	3708      	adds	r7, #8
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	bd80      	pop	{r7, pc}
 8002a3e:	bf00      	nop
 8002a40:	20000518 	.word	0x20000518

08002a44 <ssd1306_WriteData>:

void ssd1306_WriteData(uint8_t* data, uint16_t size)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b086      	sub	sp, #24
 8002a48:	af04      	add	r7, sp, #16
 8002a4a:	6078      	str	r0, [r7, #4]
 8002a4c:	460b      	mov	r3, r1
 8002a4e:	807b      	strh	r3, [r7, #2]
  HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, data, size, 100);
 8002a50:	2364      	movs	r3, #100	@ 0x64
 8002a52:	9302      	str	r3, [sp, #8]
 8002a54:	887b      	ldrh	r3, [r7, #2]
 8002a56:	9301      	str	r3, [sp, #4]
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	9300      	str	r3, [sp, #0]
 8002a5c:	2301      	movs	r3, #1
 8002a5e:	2240      	movs	r2, #64	@ 0x40
 8002a60:	2178      	movs	r1, #120	@ 0x78
 8002a62:	4803      	ldr	r0, [pc, #12]	@ (8002a70 <ssd1306_WriteData+0x2c>)
 8002a64:	f002 f840 	bl	8004ae8 <HAL_I2C_Mem_Write>
}
 8002a68:	bf00      	nop
 8002a6a:	3708      	adds	r7, #8
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	bd80      	pop	{r7, pc}
 8002a70:	20000518 	.word	0x20000518

08002a74 <ssd1306_UpdateScreen>:

//
//  Write the screenbuffer with changed to the screen
//
void ssd1306_UpdateScreen(void)
{
 8002a74:	b590      	push	{r4, r7, lr}
 8002a76:	b083      	sub	sp, #12
 8002a78:	af00      	add	r7, sp, #0
  uint8_t i;
  for (i = 0; i < SSD1306_HEIGHT / 8; i++)
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	71fb      	strb	r3, [r7, #7]
 8002a7e:	e019      	b.n	8002ab4 <ssd1306_UpdateScreen+0x40>
  {
    ssd1306_WriteCommand(0xB0 + i);
 8002a80:	79fb      	ldrb	r3, [r7, #7]
 8002a82:	3b50      	subs	r3, #80	@ 0x50
 8002a84:	b2db      	uxtb	r3, r3
 8002a86:	4618      	mov	r0, r3
 8002a88:	f7ff ffc4 	bl	8002a14 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(SETLOWCOLUMN);
 8002a8c:	2000      	movs	r0, #0
 8002a8e:	f7ff ffc1 	bl	8002a14 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(SETHIGHCOLUMN);
 8002a92:	2010      	movs	r0, #16
 8002a94:	f7ff ffbe 	bl	8002a14 <ssd1306_WriteCommand>
    ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH * i], width());
 8002a98:	79fb      	ldrb	r3, [r7, #7]
 8002a9a:	01db      	lsls	r3, r3, #7
 8002a9c:	4a09      	ldr	r2, [pc, #36]	@ (8002ac4 <ssd1306_UpdateScreen+0x50>)
 8002a9e:	189c      	adds	r4, r3, r2
 8002aa0:	f7ff fdab 	bl	80025fa <width>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	4619      	mov	r1, r3
 8002aa8:	4620      	mov	r0, r4
 8002aaa:	f7ff ffcb 	bl	8002a44 <ssd1306_WriteData>
  for (i = 0; i < SSD1306_HEIGHT / 8; i++)
 8002aae:	79fb      	ldrb	r3, [r7, #7]
 8002ab0:	3301      	adds	r3, #1
 8002ab2:	71fb      	strb	r3, [r7, #7]
 8002ab4:	79fb      	ldrb	r3, [r7, #7]
 8002ab6:	2b03      	cmp	r3, #3
 8002ab8:	d9e2      	bls.n	8002a80 <ssd1306_UpdateScreen+0xc>
  }
}
 8002aba:	bf00      	nop
 8002abc:	bf00      	nop
 8002abe:	370c      	adds	r7, #12
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bd90      	pop	{r4, r7, pc}
 8002ac4:	200002f8 	.word	0x200002f8

08002ac8 <board_button_init>:
---------------------------------------*/

#include "board.h"

void board_button_init(void)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b086      	sub	sp, #24
 8002acc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ace:	1d3b      	adds	r3, r7, #4
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	601a      	str	r2, [r3, #0]
 8002ad4:	605a      	str	r2, [r3, #4]
 8002ad6:	609a      	str	r2, [r3, #8]
 8002ad8:	60da      	str	r2, [r3, #12]
 8002ada:	611a      	str	r2, [r3, #16]
  
  /* GPIO Ports Clock Enable */
  KEY_GPIO_CLK_ENABLE();
 8002adc:	2300      	movs	r3, #0
 8002ade:	603b      	str	r3, [r7, #0]
 8002ae0:	4b0d      	ldr	r3, [pc, #52]	@ (8002b18 <board_button_init+0x50>)
 8002ae2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ae4:	4a0c      	ldr	r2, [pc, #48]	@ (8002b18 <board_button_init+0x50>)
 8002ae6:	f043 0304 	orr.w	r3, r3, #4
 8002aea:	6313      	str	r3, [r2, #48]	@ 0x30
 8002aec:	4b0a      	ldr	r3, [pc, #40]	@ (8002b18 <board_button_init+0x50>)
 8002aee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002af0:	f003 0304 	and.w	r3, r3, #4
 8002af4:	603b      	str	r3, [r7, #0]
 8002af6:	683b      	ldr	r3, [r7, #0]
  
  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY_Pin;
 8002af8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002afc:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002afe:	2300      	movs	r3, #0
 8002b00:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002b02:	2302      	movs	r3, #2
 8002b04:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(KEY_GPIO_Port, &GPIO_InitStruct);
 8002b06:	1d3b      	adds	r3, r7, #4
 8002b08:	4619      	mov	r1, r3
 8002b0a:	4804      	ldr	r0, [pc, #16]	@ (8002b1c <board_button_init+0x54>)
 8002b0c:	f001 fcaa 	bl	8004464 <HAL_GPIO_Init>
}
 8002b10:	bf00      	nop
 8002b12:	3718      	adds	r7, #24
 8002b14:	46bd      	mov	sp, r7
 8002b16:	bd80      	pop	{r7, pc}
 8002b18:	40023800 	.word	0x40023800
 8002b1c:	40020800 	.word	0x40020800

08002b20 <board_button_pressed>:

uint8_t board_button_pressed(void)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	af00      	add	r7, sp, #0
  return HAL_GPIO_ReadPin(KEY_GPIO_Port,KEY_Pin)==GPIO_PIN_SET?1:0;
 8002b24:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002b28:	4805      	ldr	r0, [pc, #20]	@ (8002b40 <board_button_pressed+0x20>)
 8002b2a:	f001 fe37 	bl	800479c <HAL_GPIO_ReadPin>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	2b01      	cmp	r3, #1
 8002b32:	bf0c      	ite	eq
 8002b34:	2301      	moveq	r3, #1
 8002b36:	2300      	movne	r3, #0
 8002b38:	b2db      	uxtb	r3, r3
}
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	bd80      	pop	{r7, pc}
 8002b3e:	bf00      	nop
 8002b40:	40020800 	.word	0x40020800

08002b44 <board_led_init>:

void board_led_init(void)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b086      	sub	sp, #24
 8002b48:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b4a:	1d3b      	adds	r3, r7, #4
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	601a      	str	r2, [r3, #0]
 8002b50:	605a      	str	r2, [r3, #4]
 8002b52:	609a      	str	r2, [r3, #8]
 8002b54:	60da      	str	r2, [r3, #12]
 8002b56:	611a      	str	r2, [r3, #16]
  
  /* GPIO Ports Clock Enable */
  LED_GPIO_CLK_ENABLE();
 8002b58:	2300      	movs	r3, #0
 8002b5a:	603b      	str	r3, [r7, #0]
 8002b5c:	4b10      	ldr	r3, [pc, #64]	@ (8002ba0 <board_led_init+0x5c>)
 8002b5e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b60:	4a0f      	ldr	r2, [pc, #60]	@ (8002ba0 <board_led_init+0x5c>)
 8002b62:	f043 0302 	orr.w	r3, r3, #2
 8002b66:	6313      	str	r3, [r2, #48]	@ 0x30
 8002b68:	4b0d      	ldr	r3, [pc, #52]	@ (8002ba0 <board_led_init+0x5c>)
 8002b6a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b6c:	f003 0302 	and.w	r3, r3, #2
 8002b70:	603b      	str	r3, [r7, #0]
 8002b72:	683b      	ldr	r3, [r7, #0]
  
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8002b74:	2200      	movs	r2, #0
 8002b76:	2104      	movs	r1, #4
 8002b78:	480a      	ldr	r0, [pc, #40]	@ (8002ba4 <board_led_init+0x60>)
 8002b7a:	f001 fe27 	bl	80047cc <HAL_GPIO_WritePin>
  
  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8002b7e:	2304      	movs	r3, #4
 8002b80:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002b82:	2301      	movs	r3, #1
 8002b84:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b86:	2300      	movs	r3, #0
 8002b88:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8002b8e:	1d3b      	adds	r3, r7, #4
 8002b90:	4619      	mov	r1, r3
 8002b92:	4804      	ldr	r0, [pc, #16]	@ (8002ba4 <board_led_init+0x60>)
 8002b94:	f001 fc66 	bl	8004464 <HAL_GPIO_Init>
}
 8002b98:	bf00      	nop
 8002b9a:	3718      	adds	r7, #24
 8002b9c:	46bd      	mov	sp, r7
 8002b9e:	bd80      	pop	{r7, pc}
 8002ba0:	40023800 	.word	0x40023800
 8002ba4:	40020400 	.word	0x40020400

08002ba8 <board_led_toggle>:

void board_led_toggle(void)
{
 8002ba8:	b580      	push	{r7, lr}
 8002baa:	af00      	add	r7, sp, #0
    HAL_GPIO_TogglePin(LED_GPIO_Port,LED_Pin);
 8002bac:	2104      	movs	r1, #4
 8002bae:	4802      	ldr	r0, [pc, #8]	@ (8002bb8 <board_led_toggle+0x10>)
 8002bb0:	f001 fe25 	bl	80047fe <HAL_GPIO_TogglePin>
}
 8002bb4:	bf00      	nop
 8002bb6:	bd80      	pop	{r7, pc}
 8002bb8:	40020400 	.word	0x40020400

08002bbc <board_led_set>:

void board_led_set(uint8_t set)
{
 8002bbc:	b580      	push	{r7, lr}
 8002bbe:	b082      	sub	sp, #8
 8002bc0:	af00      	add	r7, sp, #0
 8002bc2:	4603      	mov	r3, r0
 8002bc4:	71fb      	strb	r3, [r7, #7]
    if (set)
 8002bc6:	79fb      	ldrb	r3, [r7, #7]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d005      	beq.n	8002bd8 <board_led_set+0x1c>
        HAL_GPIO_WritePin(LED_GPIO_Port,LED_Pin,GPIO_PIN_SET);
 8002bcc:	2201      	movs	r2, #1
 8002bce:	2104      	movs	r1, #4
 8002bd0:	4806      	ldr	r0, [pc, #24]	@ (8002bec <board_led_set+0x30>)
 8002bd2:	f001 fdfb 	bl	80047cc <HAL_GPIO_WritePin>
    else
        HAL_GPIO_WritePin(LED_GPIO_Port,LED_Pin,GPIO_PIN_RESET);
}
 8002bd6:	e004      	b.n	8002be2 <board_led_set+0x26>
        HAL_GPIO_WritePin(LED_GPIO_Port,LED_Pin,GPIO_PIN_RESET);
 8002bd8:	2200      	movs	r2, #0
 8002bda:	2104      	movs	r1, #4
 8002bdc:	4803      	ldr	r0, [pc, #12]	@ (8002bec <board_led_set+0x30>)
 8002bde:	f001 fdf5 	bl	80047cc <HAL_GPIO_WritePin>
}
 8002be2:	bf00      	nop
 8002be4:	3708      	adds	r7, #8
 8002be6:	46bd      	mov	sp, r7
 8002be8:	bd80      	pop	{r7, pc}
 8002bea:	bf00      	nop
 8002bec:	40020400 	.word	0x40020400

08002bf0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002bf0:	b580      	push	{r7, lr}
 8002bf2:	b082      	sub	sp, #8
 8002bf4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	607b      	str	r3, [r7, #4]
 8002bfa:	4b0c      	ldr	r3, [pc, #48]	@ (8002c2c <MX_DMA_Init+0x3c>)
 8002bfc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bfe:	4a0b      	ldr	r2, [pc, #44]	@ (8002c2c <MX_DMA_Init+0x3c>)
 8002c00:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002c04:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c06:	4b09      	ldr	r3, [pc, #36]	@ (8002c2c <MX_DMA_Init+0x3c>)
 8002c08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c0a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002c0e:	607b      	str	r3, [r7, #4]
 8002c10:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8002c12:	2200      	movs	r2, #0
 8002c14:	2105      	movs	r1, #5
 8002c16:	200b      	movs	r0, #11
 8002c18:	f001 f84e 	bl	8003cb8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8002c1c:	200b      	movs	r0, #11
 8002c1e:	f001 f867 	bl	8003cf0 <HAL_NVIC_EnableIRQ>

}
 8002c22:	bf00      	nop
 8002c24:	3708      	adds	r7, #8
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}
 8002c2a:	bf00      	nop
 8002c2c:	40023800 	.word	0x40023800

08002c30 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8002c30:	b580      	push	{r7, lr}
 8002c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* creation of mutexMpu6050 */
  mutexMpu6050Handle = osMutexNew(&mutexMpu6050_attributes);
 8002c34:	4827      	ldr	r0, [pc, #156]	@ (8002cd4 <MX_FREERTOS_Init+0xa4>)
 8002c36:	f006 ff72 	bl	8009b1e <osMutexNew>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	4a26      	ldr	r2, [pc, #152]	@ (8002cd8 <MX_FREERTOS_Init+0xa8>)
 8002c3e:	6013      	str	r3, [r2, #0]

  /* creation of mutexIcm20948 */
  mutexIcm20948Handle = osMutexNew(&mutexIcm20948_attributes);
 8002c40:	4826      	ldr	r0, [pc, #152]	@ (8002cdc <MX_FREERTOS_Init+0xac>)
 8002c42:	f006 ff6c 	bl	8009b1e <osMutexNew>
 8002c46:	4603      	mov	r3, r0
 8002c48:	4a25      	ldr	r2, [pc, #148]	@ (8002ce0 <MX_FREERTOS_Init+0xb0>)
 8002c4a:	6013      	str	r3, [r2, #0]
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */
  dmaCompleteSemaphore = xSemaphoreCreateBinary();
 8002c4c:	2203      	movs	r2, #3
 8002c4e:	2100      	movs	r1, #0
 8002c50:	2001      	movs	r0, #1
 8002c52:	f007 f9ba 	bl	8009fca <xQueueGenericCreate>
 8002c56:	4603      	mov	r3, r0
 8002c58:	4a22      	ldr	r2, [pc, #136]	@ (8002ce4 <MX_FREERTOS_Init+0xb4>)
 8002c5a:	6013      	str	r3, [r2, #0]
  if (dmaCompleteSemaphore == NULL) {
 8002c5c:	4b21      	ldr	r3, [pc, #132]	@ (8002ce4 <MX_FREERTOS_Init+0xb4>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d104      	bne.n	8002c6e <MX_FREERTOS_Init+0x3e>
	  // Handle semaphore creation failure
	  printf("Failed to create dmaCompleteSemaphore.\r\n");
 8002c64:	4820      	ldr	r0, [pc, #128]	@ (8002ce8 <MX_FREERTOS_Init+0xb8>)
 8002c66:	f00a fd59 	bl	800d71c <puts>
	  while (1);
 8002c6a:	bf00      	nop
 8002c6c:	e7fd      	b.n	8002c6a <MX_FREERTOS_Init+0x3a>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of buttonTask */
  buttonTaskHandle = osThreadNew(StartButtonTask, NULL, &buttonTask_attributes);
 8002c6e:	4a1f      	ldr	r2, [pc, #124]	@ (8002cec <MX_FREERTOS_Init+0xbc>)
 8002c70:	2100      	movs	r1, #0
 8002c72:	481f      	ldr	r0, [pc, #124]	@ (8002cf0 <MX_FREERTOS_Init+0xc0>)
 8002c74:	f006 fea6 	bl	80099c4 <osThreadNew>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	4a1e      	ldr	r2, [pc, #120]	@ (8002cf4 <MX_FREERTOS_Init+0xc4>)
 8002c7c:	6013      	str	r3, [r2, #0]

  /* creation of lcdTask */
  lcdTaskHandle = osThreadNew(StartLcdTask, NULL, &lcdTask_attributes);
 8002c7e:	4a1e      	ldr	r2, [pc, #120]	@ (8002cf8 <MX_FREERTOS_Init+0xc8>)
 8002c80:	2100      	movs	r1, #0
 8002c82:	481e      	ldr	r0, [pc, #120]	@ (8002cfc <MX_FREERTOS_Init+0xcc>)
 8002c84:	f006 fe9e 	bl	80099c4 <osThreadNew>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	4a1d      	ldr	r2, [pc, #116]	@ (8002d00 <MX_FREERTOS_Init+0xd0>)
 8002c8c:	6013      	str	r3, [r2, #0]

  /* creation of mpu6050Task */
  mpu6050TaskHandle = osThreadNew(StartTaskMpu6050, NULL, &mpu6050Task_attributes);
 8002c8e:	4a1d      	ldr	r2, [pc, #116]	@ (8002d04 <MX_FREERTOS_Init+0xd4>)
 8002c90:	2100      	movs	r1, #0
 8002c92:	481d      	ldr	r0, [pc, #116]	@ (8002d08 <MX_FREERTOS_Init+0xd8>)
 8002c94:	f006 fe96 	bl	80099c4 <osThreadNew>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	4a1c      	ldr	r2, [pc, #112]	@ (8002d0c <MX_FREERTOS_Init+0xdc>)
 8002c9c:	6013      	str	r3, [r2, #0]

  /* creation of icm20948Task */
  icm20948TaskHandle = osThreadNew(StartTaskIcm20948, NULL, &icm20948Task_attributes);
 8002c9e:	4a1c      	ldr	r2, [pc, #112]	@ (8002d10 <MX_FREERTOS_Init+0xe0>)
 8002ca0:	2100      	movs	r1, #0
 8002ca2:	481c      	ldr	r0, [pc, #112]	@ (8002d14 <MX_FREERTOS_Init+0xe4>)
 8002ca4:	f006 fe8e 	bl	80099c4 <osThreadNew>
 8002ca8:	4603      	mov	r3, r0
 8002caa:	4a1b      	ldr	r2, [pc, #108]	@ (8002d18 <MX_FREERTOS_Init+0xe8>)
 8002cac:	6013      	str	r3, [r2, #0]

  /* creation of taskKalmanFilte */
  taskKalmanFilteHandle = osThreadNew(StartTaskKalmanFilter, NULL, &taskKalmanFilte_attributes);
 8002cae:	4a1b      	ldr	r2, [pc, #108]	@ (8002d1c <MX_FREERTOS_Init+0xec>)
 8002cb0:	2100      	movs	r1, #0
 8002cb2:	481b      	ldr	r0, [pc, #108]	@ (8002d20 <MX_FREERTOS_Init+0xf0>)
 8002cb4:	f006 fe86 	bl	80099c4 <osThreadNew>
 8002cb8:	4603      	mov	r3, r0
 8002cba:	4a1a      	ldr	r2, [pc, #104]	@ (8002d24 <MX_FREERTOS_Init+0xf4>)
 8002cbc:	6013      	str	r3, [r2, #0]

  /* creation of bmp280Task */
  bmp280TaskHandle = osThreadNew(StartTaskBmp280, NULL, &bmp280Task_attributes);
 8002cbe:	4a1a      	ldr	r2, [pc, #104]	@ (8002d28 <MX_FREERTOS_Init+0xf8>)
 8002cc0:	2100      	movs	r1, #0
 8002cc2:	481a      	ldr	r0, [pc, #104]	@ (8002d2c <MX_FREERTOS_Init+0xfc>)
 8002cc4:	f006 fe7e 	bl	80099c4 <osThreadNew>
 8002cc8:	4603      	mov	r3, r0
 8002cca:	4a19      	ldr	r2, [pc, #100]	@ (8002d30 <MX_FREERTOS_Init+0x100>)
 8002ccc:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8002cce:	bf00      	nop
 8002cd0:	bd80      	pop	{r7, pc}
 8002cd2:	bf00      	nop
 8002cd4:	08010bc8 	.word	0x08010bc8
 8002cd8:	20000510 	.word	0x20000510
 8002cdc:	08010bd8 	.word	0x08010bd8
 8002ce0:	20000514 	.word	0x20000514
 8002ce4:	200006ac 	.word	0x200006ac
 8002ce8:	080101cc 	.word	0x080101cc
 8002cec:	08010af0 	.word	0x08010af0
 8002cf0:	08002d35 	.word	0x08002d35
 8002cf4:	200004f8 	.word	0x200004f8
 8002cf8:	08010b14 	.word	0x08010b14
 8002cfc:	08002d6d 	.word	0x08002d6d
 8002d00:	200004fc 	.word	0x200004fc
 8002d04:	08010b38 	.word	0x08010b38
 8002d08:	08002db5 	.word	0x08002db5
 8002d0c:	20000500 	.word	0x20000500
 8002d10:	08010b5c 	.word	0x08010b5c
 8002d14:	08002dfd 	.word	0x08002dfd
 8002d18:	20000504 	.word	0x20000504
 8002d1c:	08010b80 	.word	0x08010b80
 8002d20:	08002e65 	.word	0x08002e65
 8002d24:	20000508 	.word	0x20000508
 8002d28:	08010ba4 	.word	0x08010ba4
 8002d2c:	08002e75 	.word	0x08002e75
 8002d30:	2000050c 	.word	0x2000050c

08002d34 <StartButtonTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartButtonTask */
void StartButtonTask(void *argument)
{
 8002d34:	b580      	push	{r7, lr}
 8002d36:	b084      	sub	sp, #16
 8002d38:	af00      	add	r7, sp, #0
 8002d3a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartButtonTask */
  /* Infinite loop */
	uint32_t now;
	for(;;)
	{
	  if(board_button_pressed())
 8002d3c:	f7ff fef0 	bl	8002b20 <board_button_pressed>
 8002d40:	4603      	mov	r3, r0
 8002d42:	2b00      	cmp	r3, #0
 8002d44:	d003      	beq.n	8002d4e <StartButtonTask+0x1a>
	  {
		  board_led_set(GPIO_PIN_SET);
 8002d46:	2001      	movs	r0, #1
 8002d48:	f7ff ff38 	bl	8002bbc <board_led_set>
 8002d4c:	e00a      	b.n	8002d64 <StartButtonTask+0x30>
	  }
	  else
	  {
		  if(now >= 100)
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	2b63      	cmp	r3, #99	@ 0x63
 8002d52:	d904      	bls.n	8002d5e <StartButtonTask+0x2a>
		  {
			  now = 0;
 8002d54:	2300      	movs	r3, #0
 8002d56:	60fb      	str	r3, [r7, #12]
			  board_led_toggle();
 8002d58:	f7ff ff26 	bl	8002ba8 <board_led_toggle>
 8002d5c:	e002      	b.n	8002d64 <StartButtonTask+0x30>
		  }
		  else
		  {
			  now++;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	3301      	adds	r3, #1
 8002d62:	60fb      	str	r3, [r7, #12]
		  }
	  }
	  osDelay(10);
 8002d64:	200a      	movs	r0, #10
 8002d66:	f006 febf 	bl	8009ae8 <osDelay>
	  if(board_button_pressed())
 8002d6a:	e7e7      	b.n	8002d3c <StartButtonTask+0x8>

08002d6c <StartLcdTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLcdTask */
void StartLcdTask(void *argument)
{
 8002d6c:	b5b0      	push	{r4, r5, r7, lr}
 8002d6e:	b084      	sub	sp, #16
 8002d70:	af02      	add	r7, sp, #8
 8002d72:	6078      	str	r0, [r7, #4]
  /* Infinite loop */
	for(;;)
	{
	  if(1)
	  {
		  Display_Accel_Data();
 8002d74:	f000 fab6 	bl	80032e4 <Display_Accel_Data>
	  }
	  // printf("%d, %.5f, %.5f, %.5f, ", ++cnt, MPU6050.Ax, MPU6050.Ay, MPU6050.Az);
	  // printf("%.5f, %.5f, %.5f\r\n", ICM20948.acce[0], ICM20948.acce[1], ICM20948.acce[2]);
	  //printf(" Mx: %.5f My: %.5f Mz: %.5f\r\n", ICM20948.mage[0], ICM20948.mage[1], ICM20948.mage[2]);
	  printf("Temp: %.5f, Pressure: %.5f\r\n", BMP280.temp, BMP280.press);
 8002d78:	4b0c      	ldr	r3, [pc, #48]	@ (8002dac <StartLcdTask+0x40>)
 8002d7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	f7fd fbe3 	bl	8000548 <__aeabi_f2d>
 8002d82:	4604      	mov	r4, r0
 8002d84:	460d      	mov	r5, r1
 8002d86:	4b09      	ldr	r3, [pc, #36]	@ (8002dac <StartLcdTask+0x40>)
 8002d88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d8a:	4618      	mov	r0, r3
 8002d8c:	f7fd fbdc 	bl	8000548 <__aeabi_f2d>
 8002d90:	4602      	mov	r2, r0
 8002d92:	460b      	mov	r3, r1
 8002d94:	e9cd 2300 	strd	r2, r3, [sp]
 8002d98:	4622      	mov	r2, r4
 8002d9a:	462b      	mov	r3, r5
 8002d9c:	4804      	ldr	r0, [pc, #16]	@ (8002db0 <StartLcdTask+0x44>)
 8002d9e:	f00a fc55 	bl	800d64c <iprintf>
	  osDelay(50);
 8002da2:	2032      	movs	r0, #50	@ 0x32
 8002da4:	f006 fea0 	bl	8009ae8 <osDelay>
	{
 8002da8:	e7e4      	b.n	8002d74 <StartLcdTask+0x8>
 8002daa:	bf00      	nop
 8002dac:	2000067c 	.word	0x2000067c
 8002db0:	080101f4 	.word	0x080101f4

08002db4 <StartTaskMpu6050>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskMpu6050 */
void StartTaskMpu6050(void *argument)
{
 8002db4:	b580      	push	{r7, lr}
 8002db6:	b082      	sub	sp, #8
 8002db8:	af00      	add	r7, sp, #0
 8002dba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskMpu6050 */
  /* Infinite loop */
	  for(;;)
	  {
		  current_i2c_dma_state = I2C_DMA_STATE_MPU6050;
 8002dbc:	4b0b      	ldr	r3, [pc, #44]	@ (8002dec <StartTaskMpu6050+0x38>)
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	701a      	strb	r2, [r3, #0]
		  MPU6050_Read_DMA(&hi2c1, &MPU6050);
 8002dc2:	490b      	ldr	r1, [pc, #44]	@ (8002df0 <StartTaskMpu6050+0x3c>)
 8002dc4:	480b      	ldr	r0, [pc, #44]	@ (8002df4 <StartTaskMpu6050+0x40>)
 8002dc6:	f7ff f8ab 	bl	8001f20 <MPU6050_Read_DMA>
		  if (xSemaphoreTake(dmaCompleteSemaphore, portMAX_DELAY) == pdTRUE) {
 8002dca:	4b0b      	ldr	r3, [pc, #44]	@ (8002df8 <StartTaskMpu6050+0x44>)
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f007 fcb6 	bl	800a744 <xQueueSemaphoreTake>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	2b01      	cmp	r3, #1
 8002ddc:	d102      	bne.n	8002de4 <StartTaskMpu6050+0x30>
			  // Process MPU6050 data
			  MPU6050_Process_Data(&MPU6050);
 8002dde:	4804      	ldr	r0, [pc, #16]	@ (8002df0 <StartTaskMpu6050+0x3c>)
 8002de0:	f7ff f8ba 	bl	8001f58 <MPU6050_Process_Data>
			  //printf("MPU6050 Ax: %d Ay: %d Az: %d\r\n", MPU6050.Ax, MPU6050.Ay, MPU6050.Az);
		  }
		  osDelay(10);
 8002de4:	200a      	movs	r0, #10
 8002de6:	f006 fe7f 	bl	8009ae8 <osDelay>
		  current_i2c_dma_state = I2C_DMA_STATE_MPU6050;
 8002dea:	e7e7      	b.n	8002dbc <StartTaskMpu6050+0x8>
 8002dec:	200006a8 	.word	0x200006a8
 8002df0:	200005d0 	.word	0x200005d0
 8002df4:	20000518 	.word	0x20000518
 8002df8:	200006ac 	.word	0x200006ac

08002dfc <StartTaskIcm20948>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskIcm20948 */
void StartTaskIcm20948(void *argument)
{
 8002dfc:	b580      	push	{r7, lr}
 8002dfe:	b082      	sub	sp, #8
 8002e00:	af00      	add	r7, sp, #0
 8002e02:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskIcm20948 */
  /* Infinite loop */
	  for(;;)
	  {
		  // first read acc & gyro
		  current_i2c_dma_state = I2C_DMA_STATE_ICM20948_ACCEL_GYRO;
 8002e04:	4b14      	ldr	r3, [pc, #80]	@ (8002e58 <StartTaskIcm20948+0x5c>)
 8002e06:	2202      	movs	r2, #2
 8002e08:	701a      	strb	r2, [r3, #0]
		  ICM20948_ReadDMA(&ICM20948);
 8002e0a:	4814      	ldr	r0, [pc, #80]	@ (8002e5c <StartTaskIcm20948+0x60>)
 8002e0c:	f7fe fdb6 	bl	800197c <ICM20948_ReadDMA>
		  if (xSemaphoreTake(dmaCompleteSemaphore, portMAX_DELAY) == pdTRUE) {
 8002e10:	4b13      	ldr	r3, [pc, #76]	@ (8002e60 <StartTaskIcm20948+0x64>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002e18:	4618      	mov	r0, r3
 8002e1a:	f007 fc93 	bl	800a744 <xQueueSemaphoreTake>
 8002e1e:	4603      	mov	r3, r0
 8002e20:	2b01      	cmp	r3, #1
 8002e22:	d102      	bne.n	8002e2a <StartTaskIcm20948+0x2e>
			  ICM20948_Process_Gyro_data(&ICM20948);
 8002e24:	480d      	ldr	r0, [pc, #52]	@ (8002e5c <StartTaskIcm20948+0x60>)
 8002e26:	f7fe fdbd 	bl	80019a4 <ICM20948_Process_Gyro_data>
		      //printf("ICM20948 Ax: %d Ay: %d Az: %d\r\n", ax, ay, az);
		  }
		  // then read mag
		  current_i2c_dma_state = I2C_DMA_STATE_ICM20948_MAG;
 8002e2a:	4b0b      	ldr	r3, [pc, #44]	@ (8002e58 <StartTaskIcm20948+0x5c>)
 8002e2c:	2203      	movs	r2, #3
 8002e2e:	701a      	strb	r2, [r3, #0]
		  Magnetometer_ReadDMA(&ICM20948);
 8002e30:	480a      	ldr	r0, [pc, #40]	@ (8002e5c <StartTaskIcm20948+0x60>)
 8002e32:	f7fe fe91 	bl	8001b58 <Magnetometer_ReadDMA>
		  if (xSemaphoreTake(dmaCompleteSemaphore, portMAX_DELAY) == pdTRUE) {
 8002e36:	4b0a      	ldr	r3, [pc, #40]	@ (8002e60 <StartTaskIcm20948+0x64>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002e3e:	4618      	mov	r0, r3
 8002e40:	f007 fc80 	bl	800a744 <xQueueSemaphoreTake>
 8002e44:	4603      	mov	r3, r0
 8002e46:	2b01      	cmp	r3, #1
 8002e48:	d102      	bne.n	8002e50 <StartTaskIcm20948+0x54>
			  ICM20948_Process_Mage_data(&ICM20948);
 8002e4a:	4804      	ldr	r0, [pc, #16]	@ (8002e5c <StartTaskIcm20948+0x60>)
 8002e4c:	f7fe fe9a 	bl	8001b84 <ICM20948_Process_Mage_data>
		      //printf("ICM20948 Mx: %d My: %d Mz: %d\r\n", ICM20948.mage[0], ICM20948.mage[1], ICM20948.mage[2]);
		  }
		  osDelay(10);
 8002e50:	200a      	movs	r0, #10
 8002e52:	f006 fe49 	bl	8009ae8 <osDelay>
		  current_i2c_dma_state = I2C_DMA_STATE_ICM20948_ACCEL_GYRO;
 8002e56:	e7d5      	b.n	8002e04 <StartTaskIcm20948+0x8>
 8002e58:	200006a8 	.word	0x200006a8
 8002e5c:	20000640 	.word	0x20000640
 8002e60:	200006ac 	.word	0x200006ac

08002e64 <StartTaskKalmanFilter>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskKalmanFilter */
void StartTaskKalmanFilter(void *argument)
{
 8002e64:	b580      	push	{r7, lr}
 8002e66:	b082      	sub	sp, #8
 8002e68:	af00      	add	r7, sp, #0
 8002e6a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskKalmanFilter */
  /* Infinite loop */
	  for(;;)
	  {
		osDelay(10);
 8002e6c:	200a      	movs	r0, #10
 8002e6e:	f006 fe3b 	bl	8009ae8 <osDelay>
 8002e72:	e7fb      	b.n	8002e6c <StartTaskKalmanFilter+0x8>

08002e74 <StartTaskBmp280>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskBmp280 */
void StartTaskBmp280(void *argument)
{
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b082      	sub	sp, #8
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskBmp280 */
  /* Infinite loop */
	for(;;)
	{
		current_i2c_dma_state = I2C_DMA_STATE_BMP280;
 8002e7c:	4b0b      	ldr	r3, [pc, #44]	@ (8002eac <StartTaskBmp280+0x38>)
 8002e7e:	2204      	movs	r2, #4
 8002e80:	701a      	strb	r2, [r3, #0]
		//BMP280_ReadTempAndPressure(&BMP280);
		BMP280_Read_DMA(&BMP280);
 8002e82:	480b      	ldr	r0, [pc, #44]	@ (8002eb0 <StartTaskBmp280+0x3c>)
 8002e84:	f7fe fc92 	bl	80017ac <BMP280_Read_DMA>
		if (xSemaphoreTake(dmaCompleteSemaphore, portMAX_DELAY) == pdTRUE) {
 8002e88:	4b0a      	ldr	r3, [pc, #40]	@ (8002eb4 <StartTaskBmp280+0x40>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002e90:	4618      	mov	r0, r3
 8002e92:	f007 fc57 	bl	800a744 <xQueueSemaphoreTake>
 8002e96:	4603      	mov	r3, r0
 8002e98:	2b01      	cmp	r3, #1
 8002e9a:	d102      	bne.n	8002ea2 <StartTaskBmp280+0x2e>
			BMP280_Process_data(&BMP280);
 8002e9c:	4804      	ldr	r0, [pc, #16]	@ (8002eb0 <StartTaskBmp280+0x3c>)
 8002e9e:	f7fe fc3b 	bl	8001718 <BMP280_Process_data>
		}
		osDelay(10);
 8002ea2:	200a      	movs	r0, #10
 8002ea4:	f006 fe20 	bl	8009ae8 <osDelay>
		current_i2c_dma_state = I2C_DMA_STATE_BMP280;
 8002ea8:	e7e8      	b.n	8002e7c <StartTaskBmp280+0x8>
 8002eaa:	bf00      	nop
 8002eac:	200006a8 	.word	0x200006a8
 8002eb0:	2000067c 	.word	0x2000067c
 8002eb4:	200006ac 	.word	0x200006ac

08002eb8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002eb8:	b480      	push	{r7}
 8002eba:	b085      	sub	sp, #20
 8002ebc:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	60fb      	str	r3, [r7, #12]
 8002ec2:	4b1e      	ldr	r3, [pc, #120]	@ (8002f3c <MX_GPIO_Init+0x84>)
 8002ec4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ec6:	4a1d      	ldr	r2, [pc, #116]	@ (8002f3c <MX_GPIO_Init+0x84>)
 8002ec8:	f043 0304 	orr.w	r3, r3, #4
 8002ecc:	6313      	str	r3, [r2, #48]	@ 0x30
 8002ece:	4b1b      	ldr	r3, [pc, #108]	@ (8002f3c <MX_GPIO_Init+0x84>)
 8002ed0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ed2:	f003 0304 	and.w	r3, r3, #4
 8002ed6:	60fb      	str	r3, [r7, #12]
 8002ed8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002eda:	2300      	movs	r3, #0
 8002edc:	60bb      	str	r3, [r7, #8]
 8002ede:	4b17      	ldr	r3, [pc, #92]	@ (8002f3c <MX_GPIO_Init+0x84>)
 8002ee0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ee2:	4a16      	ldr	r2, [pc, #88]	@ (8002f3c <MX_GPIO_Init+0x84>)
 8002ee4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002ee8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002eea:	4b14      	ldr	r3, [pc, #80]	@ (8002f3c <MX_GPIO_Init+0x84>)
 8002eec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002eee:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002ef2:	60bb      	str	r3, [r7, #8]
 8002ef4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ef6:	2300      	movs	r3, #0
 8002ef8:	607b      	str	r3, [r7, #4]
 8002efa:	4b10      	ldr	r3, [pc, #64]	@ (8002f3c <MX_GPIO_Init+0x84>)
 8002efc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002efe:	4a0f      	ldr	r2, [pc, #60]	@ (8002f3c <MX_GPIO_Init+0x84>)
 8002f00:	f043 0301 	orr.w	r3, r3, #1
 8002f04:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f06:	4b0d      	ldr	r3, [pc, #52]	@ (8002f3c <MX_GPIO_Init+0x84>)
 8002f08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f0a:	f003 0301 	and.w	r3, r3, #1
 8002f0e:	607b      	str	r3, [r7, #4]
 8002f10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002f12:	2300      	movs	r3, #0
 8002f14:	603b      	str	r3, [r7, #0]
 8002f16:	4b09      	ldr	r3, [pc, #36]	@ (8002f3c <MX_GPIO_Init+0x84>)
 8002f18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f1a:	4a08      	ldr	r2, [pc, #32]	@ (8002f3c <MX_GPIO_Init+0x84>)
 8002f1c:	f043 0302 	orr.w	r3, r3, #2
 8002f20:	6313      	str	r3, [r2, #48]	@ 0x30
 8002f22:	4b06      	ldr	r3, [pc, #24]	@ (8002f3c <MX_GPIO_Init+0x84>)
 8002f24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f26:	f003 0302 	and.w	r3, r3, #2
 8002f2a:	603b      	str	r3, [r7, #0]
 8002f2c:	683b      	ldr	r3, [r7, #0]

}
 8002f2e:	bf00      	nop
 8002f30:	3714      	adds	r7, #20
 8002f32:	46bd      	mov	sp, r7
 8002f34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f38:	4770      	bx	lr
 8002f3a:	bf00      	nop
 8002f3c:	40023800 	.word	0x40023800

08002f40 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
DMA_HandleTypeDef hdma_i2c1_rx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002f40:	b580      	push	{r7, lr}
 8002f42:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002f44:	4b12      	ldr	r3, [pc, #72]	@ (8002f90 <MX_I2C1_Init+0x50>)
 8002f46:	4a13      	ldr	r2, [pc, #76]	@ (8002f94 <MX_I2C1_Init+0x54>)
 8002f48:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8002f4a:	4b11      	ldr	r3, [pc, #68]	@ (8002f90 <MX_I2C1_Init+0x50>)
 8002f4c:	4a12      	ldr	r2, [pc, #72]	@ (8002f98 <MX_I2C1_Init+0x58>)
 8002f4e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002f50:	4b0f      	ldr	r3, [pc, #60]	@ (8002f90 <MX_I2C1_Init+0x50>)
 8002f52:	2200      	movs	r2, #0
 8002f54:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002f56:	4b0e      	ldr	r3, [pc, #56]	@ (8002f90 <MX_I2C1_Init+0x50>)
 8002f58:	2200      	movs	r2, #0
 8002f5a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002f5c:	4b0c      	ldr	r3, [pc, #48]	@ (8002f90 <MX_I2C1_Init+0x50>)
 8002f5e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002f62:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002f64:	4b0a      	ldr	r3, [pc, #40]	@ (8002f90 <MX_I2C1_Init+0x50>)
 8002f66:	2200      	movs	r2, #0
 8002f68:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002f6a:	4b09      	ldr	r3, [pc, #36]	@ (8002f90 <MX_I2C1_Init+0x50>)
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002f70:	4b07      	ldr	r3, [pc, #28]	@ (8002f90 <MX_I2C1_Init+0x50>)
 8002f72:	2200      	movs	r2, #0
 8002f74:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002f76:	4b06      	ldr	r3, [pc, #24]	@ (8002f90 <MX_I2C1_Init+0x50>)
 8002f78:	2200      	movs	r2, #0
 8002f7a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002f7c:	4804      	ldr	r0, [pc, #16]	@ (8002f90 <MX_I2C1_Init+0x50>)
 8002f7e:	f001 fc59 	bl	8004834 <HAL_I2C_Init>
 8002f82:	4603      	mov	r3, r0
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d001      	beq.n	8002f8c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002f88:	f000 fa96 	bl	80034b8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002f8c:	bf00      	nop
 8002f8e:	bd80      	pop	{r7, pc}
 8002f90:	20000518 	.word	0x20000518
 8002f94:	40005400 	.word	0x40005400
 8002f98:	00061a80 	.word	0x00061a80

08002f9c <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002f9c:	b580      	push	{r7, lr}
 8002f9e:	b08a      	sub	sp, #40	@ 0x28
 8002fa0:	af00      	add	r7, sp, #0
 8002fa2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002fa4:	f107 0314 	add.w	r3, r7, #20
 8002fa8:	2200      	movs	r2, #0
 8002faa:	601a      	str	r2, [r3, #0]
 8002fac:	605a      	str	r2, [r3, #4]
 8002fae:	609a      	str	r2, [r3, #8]
 8002fb0:	60da      	str	r2, [r3, #12]
 8002fb2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a39      	ldr	r2, [pc, #228]	@ (80030a0 <HAL_I2C_MspInit+0x104>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d16b      	bne.n	8003096 <HAL_I2C_MspInit+0xfa>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	613b      	str	r3, [r7, #16]
 8002fc2:	4b38      	ldr	r3, [pc, #224]	@ (80030a4 <HAL_I2C_MspInit+0x108>)
 8002fc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fc6:	4a37      	ldr	r2, [pc, #220]	@ (80030a4 <HAL_I2C_MspInit+0x108>)
 8002fc8:	f043 0302 	orr.w	r3, r3, #2
 8002fcc:	6313      	str	r3, [r2, #48]	@ 0x30
 8002fce:	4b35      	ldr	r3, [pc, #212]	@ (80030a4 <HAL_I2C_MspInit+0x108>)
 8002fd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fd2:	f003 0302 	and.w	r3, r3, #2
 8002fd6:	613b      	str	r3, [r7, #16]
 8002fd8:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8002fda:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8002fde:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002fe0:	2312      	movs	r3, #18
 8002fe2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002fe4:	2301      	movs	r3, #1
 8002fe6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002fe8:	2303      	movs	r3, #3
 8002fea:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002fec:	2304      	movs	r3, #4
 8002fee:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ff0:	f107 0314 	add.w	r3, r7, #20
 8002ff4:	4619      	mov	r1, r3
 8002ff6:	482c      	ldr	r0, [pc, #176]	@ (80030a8 <HAL_I2C_MspInit+0x10c>)
 8002ff8:	f001 fa34 	bl	8004464 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	60fb      	str	r3, [r7, #12]
 8003000:	4b28      	ldr	r3, [pc, #160]	@ (80030a4 <HAL_I2C_MspInit+0x108>)
 8003002:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003004:	4a27      	ldr	r2, [pc, #156]	@ (80030a4 <HAL_I2C_MspInit+0x108>)
 8003006:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 800300a:	6413      	str	r3, [r2, #64]	@ 0x40
 800300c:	4b25      	ldr	r3, [pc, #148]	@ (80030a4 <HAL_I2C_MspInit+0x108>)
 800300e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003010:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003014:	60fb      	str	r3, [r7, #12]
 8003016:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8003018:	4b24      	ldr	r3, [pc, #144]	@ (80030ac <HAL_I2C_MspInit+0x110>)
 800301a:	4a25      	ldr	r2, [pc, #148]	@ (80030b0 <HAL_I2C_MspInit+0x114>)
 800301c:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 800301e:	4b23      	ldr	r3, [pc, #140]	@ (80030ac <HAL_I2C_MspInit+0x110>)
 8003020:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8003024:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003026:	4b21      	ldr	r3, [pc, #132]	@ (80030ac <HAL_I2C_MspInit+0x110>)
 8003028:	2200      	movs	r2, #0
 800302a:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800302c:	4b1f      	ldr	r3, [pc, #124]	@ (80030ac <HAL_I2C_MspInit+0x110>)
 800302e:	2200      	movs	r2, #0
 8003030:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003032:	4b1e      	ldr	r3, [pc, #120]	@ (80030ac <HAL_I2C_MspInit+0x110>)
 8003034:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8003038:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800303a:	4b1c      	ldr	r3, [pc, #112]	@ (80030ac <HAL_I2C_MspInit+0x110>)
 800303c:	2200      	movs	r2, #0
 800303e:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003040:	4b1a      	ldr	r3, [pc, #104]	@ (80030ac <HAL_I2C_MspInit+0x110>)
 8003042:	2200      	movs	r2, #0
 8003044:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8003046:	4b19      	ldr	r3, [pc, #100]	@ (80030ac <HAL_I2C_MspInit+0x110>)
 8003048:	2200      	movs	r2, #0
 800304a:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 800304c:	4b17      	ldr	r3, [pc, #92]	@ (80030ac <HAL_I2C_MspInit+0x110>)
 800304e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8003052:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003054:	4b15      	ldr	r3, [pc, #84]	@ (80030ac <HAL_I2C_MspInit+0x110>)
 8003056:	2200      	movs	r2, #0
 8003058:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 800305a:	4814      	ldr	r0, [pc, #80]	@ (80030ac <HAL_I2C_MspInit+0x110>)
 800305c:	f000 fe56 	bl	8003d0c <HAL_DMA_Init>
 8003060:	4603      	mov	r3, r0
 8003062:	2b00      	cmp	r3, #0
 8003064:	d001      	beq.n	800306a <HAL_I2C_MspInit+0xce>
    {
      Error_Handler();
 8003066:	f000 fa27 	bl	80034b8 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	4a0f      	ldr	r2, [pc, #60]	@ (80030ac <HAL_I2C_MspInit+0x110>)
 800306e:	639a      	str	r2, [r3, #56]	@ 0x38
 8003070:	4a0e      	ldr	r2, [pc, #56]	@ (80030ac <HAL_I2C_MspInit+0x110>)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8003076:	2200      	movs	r2, #0
 8003078:	2105      	movs	r1, #5
 800307a:	201f      	movs	r0, #31
 800307c:	f000 fe1c 	bl	8003cb8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8003080:	201f      	movs	r0, #31
 8003082:	f000 fe35 	bl	8003cf0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 8003086:	2200      	movs	r2, #0
 8003088:	2105      	movs	r1, #5
 800308a:	2020      	movs	r0, #32
 800308c:	f000 fe14 	bl	8003cb8 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8003090:	2020      	movs	r0, #32
 8003092:	f000 fe2d 	bl	8003cf0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8003096:	bf00      	nop
 8003098:	3728      	adds	r7, #40	@ 0x28
 800309a:	46bd      	mov	sp, r7
 800309c:	bd80      	pop	{r7, pc}
 800309e:	bf00      	nop
 80030a0:	40005400 	.word	0x40005400
 80030a4:	40023800 	.word	0x40023800
 80030a8:	40020400 	.word	0x40020400
 80030ac:	2000056c 	.word	0x2000056c
 80030b0:	40026010 	.word	0x40026010

080030b4 <__io_putchar>:
  int __io_putchar(int ch)
#else
  // For other compilers, implement fputc for printf redirection
  int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
{
 80030b4:	b580      	push	{r7, lr}
 80030b6:	b082      	sub	sp, #8
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
    // Transmit the character over UART1
    HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80030bc:	1d39      	adds	r1, r7, #4
 80030be:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80030c2:	2201      	movs	r2, #1
 80030c4:	4803      	ldr	r0, [pc, #12]	@ (80030d4 <__io_putchar+0x20>)
 80030c6:	f006 f833 	bl	8009130 <HAL_UART_Transmit>
    return ch;
 80030ca:	687b      	ldr	r3, [r7, #4]
}
 80030cc:	4618      	mov	r0, r3
 80030ce:	3708      	adds	r7, #8
 80030d0:	46bd      	mov	sp, r7
 80030d2:	bd80      	pop	{r7, pc}
 80030d4:	2000071c 	.word	0x2000071c

080030d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80030d8:	b580      	push	{r7, lr}
 80030da:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80030dc:	f000 fcce 	bl	8003a7c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80030e0:	f000 f846 	bl	8003170 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80030e4:	f7ff fee8 	bl	8002eb8 <MX_GPIO_Init>
  MX_DMA_Init();
 80030e8:	f7ff fd82 	bl	8002bf0 <MX_DMA_Init>
  MX_RTC_Init();
 80030ec:	f000 f9ea 	bl	80034c4 <MX_RTC_Init>
  MX_USART1_UART_Init();
 80030f0:	f000 fc28 	bl	8003944 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 80030f4:	f7ff ff24 	bl	8002f40 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  I2C_Scan();
 80030f8:	f000 f8a6 	bl	8003248 <I2C_Scan>
  while (MPU6050_Init(&hi2c1) == 1);
 80030fc:	bf00      	nop
 80030fe:	4816      	ldr	r0, [pc, #88]	@ (8003158 <main+0x80>)
 8003100:	f7fe feb0 	bl	8001e64 <MPU6050_Init>
 8003104:	4603      	mov	r3, r0
 8003106:	2b01      	cmp	r3, #1
 8003108:	d0f9      	beq.n	80030fe <main+0x26>

  if(ICM20948_Init() != HAL_OK)
 800310a:	f7fe fbab 	bl	8001864 <ICM20948_Init>
 800310e:	4603      	mov	r3, r0
 8003110:	2b00      	cmp	r3, #0
 8003112:	d002      	beq.n	800311a <main+0x42>
  {
	  printf("init icm20948 fails\r\n");
 8003114:	4811      	ldr	r0, [pc, #68]	@ (800315c <main+0x84>)
 8003116:	f00a fb01 	bl	800d71c <puts>
  }

  if(BMP280_Init(&BMP280) != HAL_OK)
 800311a:	4811      	ldr	r0, [pc, #68]	@ (8003160 <main+0x88>)
 800311c:	f7fd ff48 	bl	8000fb0 <BMP280_Init>
 8003120:	4603      	mov	r3, r0
 8003122:	2b00      	cmp	r3, #0
 8003124:	d002      	beq.n	800312c <main+0x54>
  {
	  printf("init bmp280 fails\r\n");
 8003126:	480f      	ldr	r0, [pc, #60]	@ (8003164 <main+0x8c>)
 8003128:	f00a faf8 	bl	800d71c <puts>
  }

  ssd1306_Init();
 800312c:	f7ff fa86 	bl	800263c <ssd1306_Init>
  ssd1306_WriteString("Hello World", Font_7x10);
 8003130:	4b0d      	ldr	r3, [pc, #52]	@ (8003168 <main+0x90>)
 8003132:	e893 0006 	ldmia.w	r3, {r1, r2}
 8003136:	480d      	ldr	r0, [pc, #52]	@ (800316c <main+0x94>)
 8003138:	f7ff fc22 	bl	8002980 <ssd1306_WriteString>
  ssd1306_UpdateScreen();
 800313c:	f7ff fc9a 	bl	8002a74 <ssd1306_UpdateScreen>
  else
  {
	  printf("Pressure sersor NULL\r\n");
  }
*/
  board_button_init();
 8003140:	f7ff fcc2 	bl	8002ac8 <board_button_init>
  board_led_init();
 8003144:	f7ff fcfe 	bl	8002b44 <board_led_init>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8003148:	f006 fbf2 	bl	8009930 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 800314c:	f7ff fd70 	bl	8002c30 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8003150:	f006 fc12 	bl	8009978 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8003154:	bf00      	nop
 8003156:	e7fd      	b.n	8003154 <main+0x7c>
 8003158:	20000518 	.word	0x20000518
 800315c:	08010214 	.word	0x08010214
 8003160:	2000067c 	.word	0x2000067c
 8003164:	0801022c 	.word	0x0801022c
 8003168:	20000090 	.word	0x20000090
 800316c:	08010240 	.word	0x08010240

08003170 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b094      	sub	sp, #80	@ 0x50
 8003174:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003176:	f107 0320 	add.w	r3, r7, #32
 800317a:	2230      	movs	r2, #48	@ 0x30
 800317c:	2100      	movs	r1, #0
 800317e:	4618      	mov	r0, r3
 8003180:	f00a fbe0 	bl	800d944 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003184:	f107 030c 	add.w	r3, r7, #12
 8003188:	2200      	movs	r2, #0
 800318a:	601a      	str	r2, [r3, #0]
 800318c:	605a      	str	r2, [r3, #4]
 800318e:	609a      	str	r2, [r3, #8]
 8003190:	60da      	str	r2, [r3, #12]
 8003192:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003194:	2300      	movs	r3, #0
 8003196:	60bb      	str	r3, [r7, #8]
 8003198:	4b29      	ldr	r3, [pc, #164]	@ (8003240 <SystemClock_Config+0xd0>)
 800319a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800319c:	4a28      	ldr	r2, [pc, #160]	@ (8003240 <SystemClock_Config+0xd0>)
 800319e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80031a2:	6413      	str	r3, [r2, #64]	@ 0x40
 80031a4:	4b26      	ldr	r3, [pc, #152]	@ (8003240 <SystemClock_Config+0xd0>)
 80031a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031a8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031ac:	60bb      	str	r3, [r7, #8]
 80031ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80031b0:	2300      	movs	r3, #0
 80031b2:	607b      	str	r3, [r7, #4]
 80031b4:	4b23      	ldr	r3, [pc, #140]	@ (8003244 <SystemClock_Config+0xd4>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	4a22      	ldr	r2, [pc, #136]	@ (8003244 <SystemClock_Config+0xd4>)
 80031ba:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80031be:	6013      	str	r3, [r2, #0]
 80031c0:	4b20      	ldr	r3, [pc, #128]	@ (8003244 <SystemClock_Config+0xd4>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80031c8:	607b      	str	r3, [r7, #4]
 80031ca:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 80031cc:	2305      	movs	r3, #5
 80031ce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80031d0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80031d4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80031d6:	2301      	movs	r3, #1
 80031d8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80031da:	2302      	movs	r3, #2
 80031dc:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80031de:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80031e2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80031e4:	2304      	movs	r3, #4
 80031e6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80031e8:	23a8      	movs	r3, #168	@ 0xa8
 80031ea:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80031ec:	2302      	movs	r3, #2
 80031ee:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80031f0:	2304      	movs	r3, #4
 80031f2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80031f4:	f107 0320 	add.w	r3, r7, #32
 80031f8:	4618      	mov	r0, r3
 80031fa:	f004 fbef 	bl	80079dc <HAL_RCC_OscConfig>
 80031fe:	4603      	mov	r3, r0
 8003200:	2b00      	cmp	r3, #0
 8003202:	d001      	beq.n	8003208 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8003204:	f000 f958 	bl	80034b8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003208:	230f      	movs	r3, #15
 800320a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800320c:	2302      	movs	r3, #2
 800320e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003210:	2300      	movs	r3, #0
 8003212:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003214:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8003218:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800321a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800321e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003220:	f107 030c 	add.w	r3, r7, #12
 8003224:	2105      	movs	r1, #5
 8003226:	4618      	mov	r0, r3
 8003228:	f004 fe50 	bl	8007ecc <HAL_RCC_ClockConfig>
 800322c:	4603      	mov	r3, r0
 800322e:	2b00      	cmp	r3, #0
 8003230:	d001      	beq.n	8003236 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8003232:	f000 f941 	bl	80034b8 <Error_Handler>
  }
}
 8003236:	bf00      	nop
 8003238:	3750      	adds	r7, #80	@ 0x50
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}
 800323e:	bf00      	nop
 8003240:	40023800 	.word	0x40023800
 8003244:	40007000 	.word	0x40007000

08003248 <I2C_Scan>:

/* USER CODE BEGIN 4 */
void I2C_Scan(void)
{
 8003248:	b5b0      	push	{r4, r5, r7, lr}
 800324a:	b08c      	sub	sp, #48	@ 0x30
 800324c:	af04      	add	r7, sp, #16

	RTC_DateTypeDef sdatestructureget;
	RTC_TimeTypeDef stimestructureget;
	HAL_RTC_GetTime(&hrtc, &stimestructureget, RTC_FORMAT_BIN);
 800324e:	1d3b      	adds	r3, r7, #4
 8003250:	2200      	movs	r2, #0
 8003252:	4619      	mov	r1, r3
 8003254:	481e      	ldr	r0, [pc, #120]	@ (80032d0 <I2C_Scan+0x88>)
 8003256:	f005 fa8a 	bl	800876e <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sdatestructureget, RTC_FORMAT_BIN);
 800325a:	f107 0318 	add.w	r3, r7, #24
 800325e:	2200      	movs	r2, #0
 8003260:	4619      	mov	r1, r3
 8003262:	481b      	ldr	r0, [pc, #108]	@ (80032d0 <I2C_Scan+0x88>)
 8003264:	f005 fb65 	bl	8008932 <HAL_RTC_GetDate>
    printf("Scanning I2C bus on Y20%02d.M%02d.D%02d at %02d:%02d:%02d...\r\n",
    		sdatestructureget.Year,
 8003268:	7efb      	ldrb	r3, [r7, #27]
    printf("Scanning I2C bus on Y20%02d.M%02d.D%02d at %02d:%02d:%02d...\r\n",
 800326a:	4618      	mov	r0, r3
			sdatestructureget.Month,
 800326c:	7e7b      	ldrb	r3, [r7, #25]
    printf("Scanning I2C bus on Y20%02d.M%02d.D%02d at %02d:%02d:%02d...\r\n",
 800326e:	461c      	mov	r4, r3
			sdatestructureget.Date,
 8003270:	7ebb      	ldrb	r3, [r7, #26]
    printf("Scanning I2C bus on Y20%02d.M%02d.D%02d at %02d:%02d:%02d...\r\n",
 8003272:	461d      	mov	r5, r3
			stimestructureget.Hours,
 8003274:	793b      	ldrb	r3, [r7, #4]
			stimestructureget.Minutes,
 8003276:	797a      	ldrb	r2, [r7, #5]
			stimestructureget.Seconds);
 8003278:	79b9      	ldrb	r1, [r7, #6]
    printf("Scanning I2C bus on Y20%02d.M%02d.D%02d at %02d:%02d:%02d...\r\n",
 800327a:	9102      	str	r1, [sp, #8]
 800327c:	9201      	str	r2, [sp, #4]
 800327e:	9300      	str	r3, [sp, #0]
 8003280:	462b      	mov	r3, r5
 8003282:	4622      	mov	r2, r4
 8003284:	4601      	mov	r1, r0
 8003286:	4813      	ldr	r0, [pc, #76]	@ (80032d4 <I2C_Scan+0x8c>)
 8003288:	f00a f9e0 	bl	800d64c <iprintf>
    for (uint16_t addr = 0; addr < 128; addr++)
 800328c:	2300      	movs	r3, #0
 800328e:	83fb      	strh	r3, [r7, #30]
 8003290:	e013      	b.n	80032ba <I2C_Scan+0x72>
    {
        if (HAL_I2C_IsDeviceReady(&hi2c1, addr << 1, 1, HAL_MAX_DELAY) == HAL_OK)
 8003292:	8bfb      	ldrh	r3, [r7, #30]
 8003294:	005b      	lsls	r3, r3, #1
 8003296:	b299      	uxth	r1, r3
 8003298:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800329c:	2201      	movs	r2, #1
 800329e:	480e      	ldr	r0, [pc, #56]	@ (80032d8 <I2C_Scan+0x90>)
 80032a0:	f002 f8de 	bl	8005460 <HAL_I2C_IsDeviceReady>
 80032a4:	4603      	mov	r3, r0
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d104      	bne.n	80032b4 <I2C_Scan+0x6c>
        {
            printf("Device found at 0x%02X\r\n", addr);
 80032aa:	8bfb      	ldrh	r3, [r7, #30]
 80032ac:	4619      	mov	r1, r3
 80032ae:	480b      	ldr	r0, [pc, #44]	@ (80032dc <I2C_Scan+0x94>)
 80032b0:	f00a f9cc 	bl	800d64c <iprintf>
    for (uint16_t addr = 0; addr < 128; addr++)
 80032b4:	8bfb      	ldrh	r3, [r7, #30]
 80032b6:	3301      	adds	r3, #1
 80032b8:	83fb      	strh	r3, [r7, #30]
 80032ba:	8bfb      	ldrh	r3, [r7, #30]
 80032bc:	2b7f      	cmp	r3, #127	@ 0x7f
 80032be:	d9e8      	bls.n	8003292 <I2C_Scan+0x4a>
        }
    }
    printf("Scanning I2C DONE!...\r\n");
 80032c0:	4807      	ldr	r0, [pc, #28]	@ (80032e0 <I2C_Scan+0x98>)
 80032c2:	f00a fa2b 	bl	800d71c <puts>
}
 80032c6:	bf00      	nop
 80032c8:	3720      	adds	r7, #32
 80032ca:	46bd      	mov	sp, r7
 80032cc:	bdb0      	pop	{r4, r5, r7, pc}
 80032ce:	bf00      	nop
 80032d0:	200006b0 	.word	0x200006b0
 80032d4:	0801024c 	.word	0x0801024c
 80032d8:	20000518 	.word	0x20000518
 80032dc:	0801028c 	.word	0x0801028c
 80032e0:	080102a8 	.word	0x080102a8

080032e4 <Display_Accel_Data>:

void Display_Accel_Data(void) {
 80032e4:	b5b0      	push	{r4, r5, r7, lr}
 80032e6:	b08a      	sub	sp, #40	@ 0x28
 80032e8:	af04      	add	r7, sp, #16
    // Clear the screen
    ssd1306_Clear();
 80032ea:	f7ff fb87 	bl	80029fc <ssd1306_Clear>
    char buffer[20];  // Buffer to hold the text
    uint8_t len = 75;
 80032ee:	234b      	movs	r3, #75	@ 0x4b
 80032f0:	75fb      	strb	r3, [r7, #23]

	// Display the Ax value
	snprintf(buffer, sizeof(buffer), "x:%8.5f|%8.5f", MPU6050.Ax, ICM20948.acce[0]);
 80032f2:	4b2e      	ldr	r3, [pc, #184]	@ (80033ac <Display_Accel_Data+0xc8>)
 80032f4:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 80032f8:	4b2d      	ldr	r3, [pc, #180]	@ (80033b0 <Display_Accel_Data+0xcc>)
 80032fa:	695b      	ldr	r3, [r3, #20]
 80032fc:	4618      	mov	r0, r3
 80032fe:	f7fd f923 	bl	8000548 <__aeabi_f2d>
 8003302:	4602      	mov	r2, r0
 8003304:	460b      	mov	r3, r1
 8003306:	4638      	mov	r0, r7
 8003308:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800330c:	e9cd 4500 	strd	r4, r5, [sp]
 8003310:	4a28      	ldr	r2, [pc, #160]	@ (80033b4 <Display_Accel_Data+0xd0>)
 8003312:	2114      	movs	r1, #20
 8003314:	f00a fa0a 	bl	800d72c <sniprintf>
	ssd1306_SetCursor(0, 0);
 8003318:	2100      	movs	r1, #0
 800331a:	2000      	movs	r0, #0
 800331c:	f7ff fb56 	bl	80029cc <ssd1306_SetCursor>
	ssd1306_WriteString(buffer, Font_7x10);
 8003320:	4a25      	ldr	r2, [pc, #148]	@ (80033b8 <Display_Accel_Data+0xd4>)
 8003322:	463b      	mov	r3, r7
 8003324:	ca06      	ldmia	r2, {r1, r2}
 8003326:	4618      	mov	r0, r3
 8003328:	f7ff fb2a 	bl	8002980 <ssd1306_WriteString>

	// Display the Ay value
	snprintf(buffer, sizeof(buffer), "y:%8.5f|%8.5f", MPU6050.Ay, ICM20948.acce[1]);
 800332c:	4b1f      	ldr	r3, [pc, #124]	@ (80033ac <Display_Accel_Data+0xc8>)
 800332e:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 8003332:	4b1f      	ldr	r3, [pc, #124]	@ (80033b0 <Display_Accel_Data+0xcc>)
 8003334:	699b      	ldr	r3, [r3, #24]
 8003336:	4618      	mov	r0, r3
 8003338:	f7fd f906 	bl	8000548 <__aeabi_f2d>
 800333c:	4602      	mov	r2, r0
 800333e:	460b      	mov	r3, r1
 8003340:	4638      	mov	r0, r7
 8003342:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003346:	e9cd 4500 	strd	r4, r5, [sp]
 800334a:	4a1c      	ldr	r2, [pc, #112]	@ (80033bc <Display_Accel_Data+0xd8>)
 800334c:	2114      	movs	r1, #20
 800334e:	f00a f9ed 	bl	800d72c <sniprintf>
	ssd1306_SetCursor(0, 10);
 8003352:	210a      	movs	r1, #10
 8003354:	2000      	movs	r0, #0
 8003356:	f7ff fb39 	bl	80029cc <ssd1306_SetCursor>
	ssd1306_WriteString(buffer, Font_7x10);
 800335a:	4a17      	ldr	r2, [pc, #92]	@ (80033b8 <Display_Accel_Data+0xd4>)
 800335c:	463b      	mov	r3, r7
 800335e:	ca06      	ldmia	r2, {r1, r2}
 8003360:	4618      	mov	r0, r3
 8003362:	f7ff fb0d 	bl	8002980 <ssd1306_WriteString>

	// Display the Az value
	snprintf(buffer, sizeof(buffer), "z:%8.5f|%8.5f", MPU6050.Az, ICM20948.acce[2]);
 8003366:	4b11      	ldr	r3, [pc, #68]	@ (80033ac <Display_Accel_Data+0xc8>)
 8003368:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	@ 0x28
 800336c:	4b10      	ldr	r3, [pc, #64]	@ (80033b0 <Display_Accel_Data+0xcc>)
 800336e:	69db      	ldr	r3, [r3, #28]
 8003370:	4618      	mov	r0, r3
 8003372:	f7fd f8e9 	bl	8000548 <__aeabi_f2d>
 8003376:	4602      	mov	r2, r0
 8003378:	460b      	mov	r3, r1
 800337a:	4638      	mov	r0, r7
 800337c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003380:	e9cd 4500 	strd	r4, r5, [sp]
 8003384:	4a0e      	ldr	r2, [pc, #56]	@ (80033c0 <Display_Accel_Data+0xdc>)
 8003386:	2114      	movs	r1, #20
 8003388:	f00a f9d0 	bl	800d72c <sniprintf>
	ssd1306_SetCursor(0, 20);
 800338c:	2114      	movs	r1, #20
 800338e:	2000      	movs	r0, #0
 8003390:	f7ff fb1c 	bl	80029cc <ssd1306_SetCursor>
	ssd1306_WriteString(buffer, Font_7x10);
 8003394:	4a08      	ldr	r2, [pc, #32]	@ (80033b8 <Display_Accel_Data+0xd4>)
 8003396:	463b      	mov	r3, r7
 8003398:	ca06      	ldmia	r2, {r1, r2}
 800339a:	4618      	mov	r0, r3
 800339c:	f7ff faf0 	bl	8002980 <ssd1306_WriteString>

	// Update the screen
	ssd1306_UpdateScreen();
 80033a0:	f7ff fb68 	bl	8002a74 <ssd1306_UpdateScreen>

}
 80033a4:	bf00      	nop
 80033a6:	3718      	adds	r7, #24
 80033a8:	46bd      	mov	sp, r7
 80033aa:	bdb0      	pop	{r4, r5, r7, pc}
 80033ac:	200005d0 	.word	0x200005d0
 80033b0:	20000640 	.word	0x20000640
 80033b4:	080102c0 	.word	0x080102c0
 80033b8:	20000090 	.word	0x20000090
 80033bc:	080102d0 	.word	0x080102d0
 80033c0:	080102e0 	.word	0x080102e0

080033c4 <HAL_I2C_MemRxCpltCallback>:

void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c) {
 80033c4:	b580      	push	{r7, lr}
 80033c6:	b084      	sub	sp, #16
 80033c8:	af00      	add	r7, sp, #0
 80033ca:	6078      	str	r0, [r7, #4]
    if (hi2c->Instance == I2C1) {
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	4a0d      	ldr	r2, [pc, #52]	@ (8003408 <HAL_I2C_MemRxCpltCallback+0x44>)
 80033d2:	4293      	cmp	r3, r2
 80033d4:	d114      	bne.n	8003400 <HAL_I2C_MemRxCpltCallback+0x3c>
    	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 80033d6:	2300      	movs	r3, #0
 80033d8:	60fb      	str	r3, [r7, #12]
    	xSemaphoreGiveFromISR(dmaCompleteSemaphore, &xHigherPriorityTaskWoken);
 80033da:	4b0c      	ldr	r3, [pc, #48]	@ (800340c <HAL_I2C_MemRxCpltCallback+0x48>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f107 020c 	add.w	r2, r7, #12
 80033e2:	4611      	mov	r1, r2
 80033e4:	4618      	mov	r0, r3
 80033e6:	f007 f83b 	bl	800a460 <xQueueGiveFromISR>
    	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d007      	beq.n	8003400 <HAL_I2C_MemRxCpltCallback+0x3c>
 80033f0:	4b07      	ldr	r3, [pc, #28]	@ (8003410 <HAL_I2C_MemRxCpltCallback+0x4c>)
 80033f2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80033f6:	601a      	str	r2, [r3, #0]
 80033f8:	f3bf 8f4f 	dsb	sy
 80033fc:	f3bf 8f6f 	isb	sy

    }
}
 8003400:	bf00      	nop
 8003402:	3710      	adds	r7, #16
 8003404:	46bd      	mov	sp, r7
 8003406:	bd80      	pop	{r7, pc}
 8003408:	40005400 	.word	0x40005400
 800340c:	200006ac 	.word	0x200006ac
 8003410:	e000ed04 	.word	0xe000ed04

08003414 <HAL_I2C_ErrorCallback>:
void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c) {
 8003414:	b580      	push	{r7, lr}
 8003416:	b082      	sub	sp, #8
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
    if (hi2c->Instance == I2C1) {
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	4a15      	ldr	r2, [pc, #84]	@ (8003478 <HAL_I2C_ErrorCallback+0x64>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d124      	bne.n	8003470 <HAL_I2C_ErrorCallback+0x5c>
    	switch (current_i2c_dma_state)
 8003426:	4b15      	ldr	r3, [pc, #84]	@ (800347c <HAL_I2C_ErrorCallback+0x68>)
 8003428:	781b      	ldrb	r3, [r3, #0]
 800342a:	b2db      	uxtb	r3, r3
 800342c:	3b01      	subs	r3, #1
 800342e:	2b03      	cmp	r3, #3
 8003430:	d81a      	bhi.n	8003468 <HAL_I2C_ErrorCallback+0x54>
 8003432:	a201      	add	r2, pc, #4	@ (adr r2, 8003438 <HAL_I2C_ErrorCallback+0x24>)
 8003434:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003438:	08003449 	.word	0x08003449
 800343c:	08003451 	.word	0x08003451
 8003440:	08003459 	.word	0x08003459
 8003444:	08003461 	.word	0x08003461
		{
			case I2C_DMA_STATE_MPU6050:
				printf("mpu6050 i2c error");
 8003448:	480d      	ldr	r0, [pc, #52]	@ (8003480 <HAL_I2C_ErrorCallback+0x6c>)
 800344a:	f00a f8ff 	bl	800d64c <iprintf>
				break;
 800344e:	e00f      	b.n	8003470 <HAL_I2C_ErrorCallback+0x5c>
			case I2C_DMA_STATE_ICM20948_ACCEL_GYRO:
				printf("icm20948 gyro i2c error");
 8003450:	480c      	ldr	r0, [pc, #48]	@ (8003484 <HAL_I2C_ErrorCallback+0x70>)
 8003452:	f00a f8fb 	bl	800d64c <iprintf>
				break;
 8003456:	e00b      	b.n	8003470 <HAL_I2C_ErrorCallback+0x5c>
			case I2C_DMA_STATE_ICM20948_MAG:
				printf("icm20948 mag i2c error");
 8003458:	480b      	ldr	r0, [pc, #44]	@ (8003488 <HAL_I2C_ErrorCallback+0x74>)
 800345a:	f00a f8f7 	bl	800d64c <iprintf>
				break;
 800345e:	e007      	b.n	8003470 <HAL_I2C_ErrorCallback+0x5c>
			case I2C_DMA_STATE_BMP280:
				printf("icm20948 bmp280 i2c error");
 8003460:	480a      	ldr	r0, [pc, #40]	@ (800348c <HAL_I2C_ErrorCallback+0x78>)
 8003462:	f00a f8f3 	bl	800d64c <iprintf>
				break;
 8003466:	e003      	b.n	8003470 <HAL_I2C_ErrorCallback+0x5c>
			case I2C_DMA_STATE_NONE:
			default:
				printf("Unexpected I2C DMA state!\r\n");
 8003468:	4809      	ldr	r0, [pc, #36]	@ (8003490 <HAL_I2C_ErrorCallback+0x7c>)
 800346a:	f00a f957 	bl	800d71c <puts>
				break;
 800346e:	bf00      	nop
		}
    }
}
 8003470:	bf00      	nop
 8003472:	3708      	adds	r7, #8
 8003474:	46bd      	mov	sp, r7
 8003476:	bd80      	pop	{r7, pc}
 8003478:	40005400 	.word	0x40005400
 800347c:	200006a8 	.word	0x200006a8
 8003480:	080102f0 	.word	0x080102f0
 8003484:	08010304 	.word	0x08010304
 8003488:	0801031c 	.word	0x0801031c
 800348c:	08010334 	.word	0x08010334
 8003490:	08010350 	.word	0x08010350

08003494 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b082      	sub	sp, #8
 8003498:	af00      	add	r7, sp, #0
 800349a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	4a04      	ldr	r2, [pc, #16]	@ (80034b4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80034a2:	4293      	cmp	r3, r2
 80034a4:	d101      	bne.n	80034aa <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80034a6:	f000 fb0b 	bl	8003ac0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80034aa:	bf00      	nop
 80034ac:	3708      	adds	r7, #8
 80034ae:	46bd      	mov	sp, r7
 80034b0:	bd80      	pop	{r7, pc}
 80034b2:	bf00      	nop
 80034b4:	40010000 	.word	0x40010000

080034b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80034b8:	b480      	push	{r7}
 80034ba:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80034bc:	b672      	cpsid	i
}
 80034be:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80034c0:	bf00      	nop
 80034c2:	e7fd      	b.n	80034c0 <Error_Handler+0x8>

080034c4 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80034c4:	b580      	push	{r7, lr}
 80034c6:	b086      	sub	sp, #24
 80034c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80034ca:	1d3b      	adds	r3, r7, #4
 80034cc:	2200      	movs	r2, #0
 80034ce:	601a      	str	r2, [r3, #0]
 80034d0:	605a      	str	r2, [r3, #4]
 80034d2:	609a      	str	r2, [r3, #8]
 80034d4:	60da      	str	r2, [r3, #12]
 80034d6:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80034d8:	2300      	movs	r3, #0
 80034da:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80034dc:	4b24      	ldr	r3, [pc, #144]	@ (8003570 <MX_RTC_Init+0xac>)
 80034de:	4a25      	ldr	r2, [pc, #148]	@ (8003574 <MX_RTC_Init+0xb0>)
 80034e0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80034e2:	4b23      	ldr	r3, [pc, #140]	@ (8003570 <MX_RTC_Init+0xac>)
 80034e4:	2200      	movs	r2, #0
 80034e6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80034e8:	4b21      	ldr	r3, [pc, #132]	@ (8003570 <MX_RTC_Init+0xac>)
 80034ea:	227f      	movs	r2, #127	@ 0x7f
 80034ec:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80034ee:	4b20      	ldr	r3, [pc, #128]	@ (8003570 <MX_RTC_Init+0xac>)
 80034f0:	22ff      	movs	r2, #255	@ 0xff
 80034f2:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80034f4:	4b1e      	ldr	r3, [pc, #120]	@ (8003570 <MX_RTC_Init+0xac>)
 80034f6:	2200      	movs	r2, #0
 80034f8:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80034fa:	4b1d      	ldr	r3, [pc, #116]	@ (8003570 <MX_RTC_Init+0xac>)
 80034fc:	2200      	movs	r2, #0
 80034fe:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003500:	4b1b      	ldr	r3, [pc, #108]	@ (8003570 <MX_RTC_Init+0xac>)
 8003502:	2200      	movs	r2, #0
 8003504:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8003506:	481a      	ldr	r0, [pc, #104]	@ (8003570 <MX_RTC_Init+0xac>)
 8003508:	f005 f814 	bl	8008534 <HAL_RTC_Init>
 800350c:	4603      	mov	r3, r0
 800350e:	2b00      	cmp	r3, #0
 8003510:	d001      	beq.n	8003516 <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8003512:	f7ff ffd1 	bl	80034b8 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 8003516:	2300      	movs	r3, #0
 8003518:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 800351a:	2300      	movs	r3, #0
 800351c:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 800351e:	2300      	movs	r3, #0
 8003520:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8003522:	2300      	movs	r3, #0
 8003524:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8003526:	2300      	movs	r3, #0
 8003528:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800352a:	1d3b      	adds	r3, r7, #4
 800352c:	2201      	movs	r2, #1
 800352e:	4619      	mov	r1, r3
 8003530:	480f      	ldr	r0, [pc, #60]	@ (8003570 <MX_RTC_Init+0xac>)
 8003532:	f005 f882 	bl	800863a <HAL_RTC_SetTime>
 8003536:	4603      	mov	r3, r0
 8003538:	2b00      	cmp	r3, #0
 800353a:	d001      	beq.n	8003540 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 800353c:	f7ff ffbc 	bl	80034b8 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8003540:	2301      	movs	r3, #1
 8003542:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_AUGUST;
 8003544:	2308      	movs	r3, #8
 8003546:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x7;
 8003548:	2307      	movs	r3, #7
 800354a:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x23;
 800354c:	2323      	movs	r3, #35	@ 0x23
 800354e:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8003550:	463b      	mov	r3, r7
 8003552:	2201      	movs	r2, #1
 8003554:	4619      	mov	r1, r3
 8003556:	4806      	ldr	r0, [pc, #24]	@ (8003570 <MX_RTC_Init+0xac>)
 8003558:	f005 f967 	bl	800882a <HAL_RTC_SetDate>
 800355c:	4603      	mov	r3, r0
 800355e:	2b00      	cmp	r3, #0
 8003560:	d001      	beq.n	8003566 <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 8003562:	f7ff ffa9 	bl	80034b8 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8003566:	bf00      	nop
 8003568:	3718      	adds	r7, #24
 800356a:	46bd      	mov	sp, r7
 800356c:	bd80      	pop	{r7, pc}
 800356e:	bf00      	nop
 8003570:	200006b0 	.word	0x200006b0
 8003574:	40002800 	.word	0x40002800

08003578 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	b086      	sub	sp, #24
 800357c:	af00      	add	r7, sp, #0
 800357e:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8003580:	f107 0308 	add.w	r3, r7, #8
 8003584:	2200      	movs	r2, #0
 8003586:	601a      	str	r2, [r3, #0]
 8003588:	605a      	str	r2, [r3, #4]
 800358a:	609a      	str	r2, [r3, #8]
 800358c:	60da      	str	r2, [r3, #12]
  if(rtcHandle->Instance==RTC)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4a0c      	ldr	r2, [pc, #48]	@ (80035c4 <HAL_RTC_MspInit+0x4c>)
 8003594:	4293      	cmp	r3, r2
 8003596:	d111      	bne.n	80035bc <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8003598:	2302      	movs	r3, #2
 800359a:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800359c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80035a0:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80035a2:	f107 0308 	add.w	r3, r7, #8
 80035a6:	4618      	mov	r0, r3
 80035a8:	f004 fee2 	bl	8008370 <HAL_RCCEx_PeriphCLKConfig>
 80035ac:	4603      	mov	r3, r0
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d001      	beq.n	80035b6 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 80035b2:	f7ff ff81 	bl	80034b8 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80035b6:	4b04      	ldr	r3, [pc, #16]	@ (80035c8 <HAL_RTC_MspInit+0x50>)
 80035b8:	2201      	movs	r2, #1
 80035ba:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80035bc:	bf00      	nop
 80035be:	3718      	adds	r7, #24
 80035c0:	46bd      	mov	sp, r7
 80035c2:	bd80      	pop	{r7, pc}
 80035c4:	40002800 	.word	0x40002800
 80035c8:	42470e3c 	.word	0x42470e3c

080035cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80035cc:	b580      	push	{r7, lr}
 80035ce:	b082      	sub	sp, #8
 80035d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035d2:	2300      	movs	r3, #0
 80035d4:	607b      	str	r3, [r7, #4]
 80035d6:	4b12      	ldr	r3, [pc, #72]	@ (8003620 <HAL_MspInit+0x54>)
 80035d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035da:	4a11      	ldr	r2, [pc, #68]	@ (8003620 <HAL_MspInit+0x54>)
 80035dc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80035e0:	6453      	str	r3, [r2, #68]	@ 0x44
 80035e2:	4b0f      	ldr	r3, [pc, #60]	@ (8003620 <HAL_MspInit+0x54>)
 80035e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80035ea:	607b      	str	r3, [r7, #4]
 80035ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80035ee:	2300      	movs	r3, #0
 80035f0:	603b      	str	r3, [r7, #0]
 80035f2:	4b0b      	ldr	r3, [pc, #44]	@ (8003620 <HAL_MspInit+0x54>)
 80035f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80035f6:	4a0a      	ldr	r2, [pc, #40]	@ (8003620 <HAL_MspInit+0x54>)
 80035f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80035fc:	6413      	str	r3, [r2, #64]	@ 0x40
 80035fe:	4b08      	ldr	r3, [pc, #32]	@ (8003620 <HAL_MspInit+0x54>)
 8003600:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003602:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003606:	603b      	str	r3, [r7, #0]
 8003608:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800360a:	2200      	movs	r2, #0
 800360c:	210f      	movs	r1, #15
 800360e:	f06f 0001 	mvn.w	r0, #1
 8003612:	f000 fb51 	bl	8003cb8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003616:	bf00      	nop
 8003618:	3708      	adds	r7, #8
 800361a:	46bd      	mov	sp, r7
 800361c:	bd80      	pop	{r7, pc}
 800361e:	bf00      	nop
 8003620:	40023800 	.word	0x40023800

08003624 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003624:	b580      	push	{r7, lr}
 8003626:	b08c      	sub	sp, #48	@ 0x30
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 800362c:	2300      	movs	r3, #0
 800362e:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8003630:	2300      	movs	r3, #0
 8003632:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8003634:	2300      	movs	r3, #0
 8003636:	60bb      	str	r3, [r7, #8]
 8003638:	4b2f      	ldr	r3, [pc, #188]	@ (80036f8 <HAL_InitTick+0xd4>)
 800363a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800363c:	4a2e      	ldr	r2, [pc, #184]	@ (80036f8 <HAL_InitTick+0xd4>)
 800363e:	f043 0301 	orr.w	r3, r3, #1
 8003642:	6453      	str	r3, [r2, #68]	@ 0x44
 8003644:	4b2c      	ldr	r3, [pc, #176]	@ (80036f8 <HAL_InitTick+0xd4>)
 8003646:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003648:	f003 0301 	and.w	r3, r3, #1
 800364c:	60bb      	str	r3, [r7, #8]
 800364e:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003650:	f107 020c 	add.w	r2, r7, #12
 8003654:	f107 0310 	add.w	r3, r7, #16
 8003658:	4611      	mov	r1, r2
 800365a:	4618      	mov	r0, r3
 800365c:	f004 fe56 	bl	800830c <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8003660:	f004 fe40 	bl	80082e4 <HAL_RCC_GetPCLK2Freq>
 8003664:	4603      	mov	r3, r0
 8003666:	005b      	lsls	r3, r3, #1
 8003668:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800366a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800366c:	4a23      	ldr	r2, [pc, #140]	@ (80036fc <HAL_InitTick+0xd8>)
 800366e:	fba2 2303 	umull	r2, r3, r2, r3
 8003672:	0c9b      	lsrs	r3, r3, #18
 8003674:	3b01      	subs	r3, #1
 8003676:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8003678:	4b21      	ldr	r3, [pc, #132]	@ (8003700 <HAL_InitTick+0xdc>)
 800367a:	4a22      	ldr	r2, [pc, #136]	@ (8003704 <HAL_InitTick+0xe0>)
 800367c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800367e:	4b20      	ldr	r3, [pc, #128]	@ (8003700 <HAL_InitTick+0xdc>)
 8003680:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8003684:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8003686:	4a1e      	ldr	r2, [pc, #120]	@ (8003700 <HAL_InitTick+0xdc>)
 8003688:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800368a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800368c:	4b1c      	ldr	r3, [pc, #112]	@ (8003700 <HAL_InitTick+0xdc>)
 800368e:	2200      	movs	r2, #0
 8003690:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003692:	4b1b      	ldr	r3, [pc, #108]	@ (8003700 <HAL_InitTick+0xdc>)
 8003694:	2200      	movs	r2, #0
 8003696:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003698:	4b19      	ldr	r3, [pc, #100]	@ (8003700 <HAL_InitTick+0xdc>)
 800369a:	2200      	movs	r2, #0
 800369c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 800369e:	4818      	ldr	r0, [pc, #96]	@ (8003700 <HAL_InitTick+0xdc>)
 80036a0:	f005 fa54 	bl	8008b4c <HAL_TIM_Base_Init>
 80036a4:	4603      	mov	r3, r0
 80036a6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 80036aa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80036ae:	2b00      	cmp	r3, #0
 80036b0:	d11b      	bne.n	80036ea <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80036b2:	4813      	ldr	r0, [pc, #76]	@ (8003700 <HAL_InitTick+0xdc>)
 80036b4:	f005 faa4 	bl	8008c00 <HAL_TIM_Base_Start_IT>
 80036b8:	4603      	mov	r3, r0
 80036ba:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 80036be:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d111      	bne.n	80036ea <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80036c6:	2019      	movs	r0, #25
 80036c8:	f000 fb12 	bl	8003cf0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	2b0f      	cmp	r3, #15
 80036d0:	d808      	bhi.n	80036e4 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 80036d2:	2200      	movs	r2, #0
 80036d4:	6879      	ldr	r1, [r7, #4]
 80036d6:	2019      	movs	r0, #25
 80036d8:	f000 faee 	bl	8003cb8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80036dc:	4a0a      	ldr	r2, [pc, #40]	@ (8003708 <HAL_InitTick+0xe4>)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	6013      	str	r3, [r2, #0]
 80036e2:	e002      	b.n	80036ea <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 80036e4:	2301      	movs	r3, #1
 80036e6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80036ea:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80036ee:	4618      	mov	r0, r3
 80036f0:	3730      	adds	r7, #48	@ 0x30
 80036f2:	46bd      	mov	sp, r7
 80036f4:	bd80      	pop	{r7, pc}
 80036f6:	bf00      	nop
 80036f8:	40023800 	.word	0x40023800
 80036fc:	431bde83 	.word	0x431bde83
 8003700:	200006d0 	.word	0x200006d0
 8003704:	40010000 	.word	0x40010000
 8003708:	200000a0 	.word	0x200000a0

0800370c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800370c:	b480      	push	{r7}
 800370e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003710:	bf00      	nop
 8003712:	e7fd      	b.n	8003710 <NMI_Handler+0x4>

08003714 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003714:	b480      	push	{r7}
 8003716:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003718:	bf00      	nop
 800371a:	e7fd      	b.n	8003718 <HardFault_Handler+0x4>

0800371c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800371c:	b480      	push	{r7}
 800371e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003720:	bf00      	nop
 8003722:	e7fd      	b.n	8003720 <MemManage_Handler+0x4>

08003724 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003724:	b480      	push	{r7}
 8003726:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003728:	bf00      	nop
 800372a:	e7fd      	b.n	8003728 <BusFault_Handler+0x4>

0800372c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800372c:	b480      	push	{r7}
 800372e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003730:	bf00      	nop
 8003732:	e7fd      	b.n	8003730 <UsageFault_Handler+0x4>

08003734 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003734:	b480      	push	{r7}
 8003736:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003738:	bf00      	nop
 800373a:	46bd      	mov	sp, r7
 800373c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003740:	4770      	bx	lr
	...

08003744 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8003744:	b580      	push	{r7, lr}
 8003746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8003748:	4802      	ldr	r0, [pc, #8]	@ (8003754 <DMA1_Stream0_IRQHandler+0x10>)
 800374a:	f000 fc07 	bl	8003f5c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 800374e:	bf00      	nop
 8003750:	bd80      	pop	{r7, pc}
 8003752:	bf00      	nop
 8003754:	2000056c 	.word	0x2000056c

08003758 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800375c:	4802      	ldr	r0, [pc, #8]	@ (8003768 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800375e:	f005 fabf 	bl	8008ce0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8003762:	bf00      	nop
 8003764:	bd80      	pop	{r7, pc}
 8003766:	bf00      	nop
 8003768:	200006d0 	.word	0x200006d0

0800376c <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8003770:	4802      	ldr	r0, [pc, #8]	@ (800377c <I2C1_EV_IRQHandler+0x10>)
 8003772:	f001 ffa3 	bl	80056bc <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8003776:	bf00      	nop
 8003778:	bd80      	pop	{r7, pc}
 800377a:	bf00      	nop
 800377c:	20000518 	.word	0x20000518

08003780 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8003784:	4802      	ldr	r0, [pc, #8]	@ (8003790 <I2C1_ER_IRQHandler+0x10>)
 8003786:	f002 f8ec 	bl	8005962 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 800378a:	bf00      	nop
 800378c:	bd80      	pop	{r7, pc}
 800378e:	bf00      	nop
 8003790:	20000518 	.word	0x20000518

08003794 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003794:	b480      	push	{r7}
 8003796:	af00      	add	r7, sp, #0
  return 1;
 8003798:	2301      	movs	r3, #1
}
 800379a:	4618      	mov	r0, r3
 800379c:	46bd      	mov	sp, r7
 800379e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a2:	4770      	bx	lr

080037a4 <_kill>:

int _kill(int pid, int sig)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b082      	sub	sp, #8
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
 80037ac:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80037ae:	f00a f971 	bl	800da94 <__errno>
 80037b2:	4603      	mov	r3, r0
 80037b4:	2216      	movs	r2, #22
 80037b6:	601a      	str	r2, [r3, #0]
  return -1;
 80037b8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80037bc:	4618      	mov	r0, r3
 80037be:	3708      	adds	r7, #8
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bd80      	pop	{r7, pc}

080037c4 <_exit>:

void _exit (int status)
{
 80037c4:	b580      	push	{r7, lr}
 80037c6:	b082      	sub	sp, #8
 80037c8:	af00      	add	r7, sp, #0
 80037ca:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80037cc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80037d0:	6878      	ldr	r0, [r7, #4]
 80037d2:	f7ff ffe7 	bl	80037a4 <_kill>
  while (1) {}    /* Make sure we hang here */
 80037d6:	bf00      	nop
 80037d8:	e7fd      	b.n	80037d6 <_exit+0x12>

080037da <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80037da:	b580      	push	{r7, lr}
 80037dc:	b086      	sub	sp, #24
 80037de:	af00      	add	r7, sp, #0
 80037e0:	60f8      	str	r0, [r7, #12]
 80037e2:	60b9      	str	r1, [r7, #8]
 80037e4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80037e6:	2300      	movs	r3, #0
 80037e8:	617b      	str	r3, [r7, #20]
 80037ea:	e00a      	b.n	8003802 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80037ec:	f3af 8000 	nop.w
 80037f0:	4601      	mov	r1, r0
 80037f2:	68bb      	ldr	r3, [r7, #8]
 80037f4:	1c5a      	adds	r2, r3, #1
 80037f6:	60ba      	str	r2, [r7, #8]
 80037f8:	b2ca      	uxtb	r2, r1
 80037fa:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80037fc:	697b      	ldr	r3, [r7, #20]
 80037fe:	3301      	adds	r3, #1
 8003800:	617b      	str	r3, [r7, #20]
 8003802:	697a      	ldr	r2, [r7, #20]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	429a      	cmp	r2, r3
 8003808:	dbf0      	blt.n	80037ec <_read+0x12>
  }

  return len;
 800380a:	687b      	ldr	r3, [r7, #4]
}
 800380c:	4618      	mov	r0, r3
 800380e:	3718      	adds	r7, #24
 8003810:	46bd      	mov	sp, r7
 8003812:	bd80      	pop	{r7, pc}

08003814 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	b086      	sub	sp, #24
 8003818:	af00      	add	r7, sp, #0
 800381a:	60f8      	str	r0, [r7, #12]
 800381c:	60b9      	str	r1, [r7, #8]
 800381e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003820:	2300      	movs	r3, #0
 8003822:	617b      	str	r3, [r7, #20]
 8003824:	e009      	b.n	800383a <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003826:	68bb      	ldr	r3, [r7, #8]
 8003828:	1c5a      	adds	r2, r3, #1
 800382a:	60ba      	str	r2, [r7, #8]
 800382c:	781b      	ldrb	r3, [r3, #0]
 800382e:	4618      	mov	r0, r3
 8003830:	f7ff fc40 	bl	80030b4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003834:	697b      	ldr	r3, [r7, #20]
 8003836:	3301      	adds	r3, #1
 8003838:	617b      	str	r3, [r7, #20]
 800383a:	697a      	ldr	r2, [r7, #20]
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	429a      	cmp	r2, r3
 8003840:	dbf1      	blt.n	8003826 <_write+0x12>
  }
  return len;
 8003842:	687b      	ldr	r3, [r7, #4]
}
 8003844:	4618      	mov	r0, r3
 8003846:	3718      	adds	r7, #24
 8003848:	46bd      	mov	sp, r7
 800384a:	bd80      	pop	{r7, pc}

0800384c <_close>:

int _close(int file)
{
 800384c:	b480      	push	{r7}
 800384e:	b083      	sub	sp, #12
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003854:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8003858:	4618      	mov	r0, r3
 800385a:	370c      	adds	r7, #12
 800385c:	46bd      	mov	sp, r7
 800385e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003862:	4770      	bx	lr

08003864 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003864:	b480      	push	{r7}
 8003866:	b083      	sub	sp, #12
 8003868:	af00      	add	r7, sp, #0
 800386a:	6078      	str	r0, [r7, #4]
 800386c:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8003874:	605a      	str	r2, [r3, #4]
  return 0;
 8003876:	2300      	movs	r3, #0
}
 8003878:	4618      	mov	r0, r3
 800387a:	370c      	adds	r7, #12
 800387c:	46bd      	mov	sp, r7
 800387e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003882:	4770      	bx	lr

08003884 <_isatty>:

int _isatty(int file)
{
 8003884:	b480      	push	{r7}
 8003886:	b083      	sub	sp, #12
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800388c:	2301      	movs	r3, #1
}
 800388e:	4618      	mov	r0, r3
 8003890:	370c      	adds	r7, #12
 8003892:	46bd      	mov	sp, r7
 8003894:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003898:	4770      	bx	lr

0800389a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800389a:	b480      	push	{r7}
 800389c:	b085      	sub	sp, #20
 800389e:	af00      	add	r7, sp, #0
 80038a0:	60f8      	str	r0, [r7, #12]
 80038a2:	60b9      	str	r1, [r7, #8]
 80038a4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80038a6:	2300      	movs	r3, #0
}
 80038a8:	4618      	mov	r0, r3
 80038aa:	3714      	adds	r7, #20
 80038ac:	46bd      	mov	sp, r7
 80038ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b2:	4770      	bx	lr

080038b4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80038b4:	b580      	push	{r7, lr}
 80038b6:	b086      	sub	sp, #24
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80038bc:	4a14      	ldr	r2, [pc, #80]	@ (8003910 <_sbrk+0x5c>)
 80038be:	4b15      	ldr	r3, [pc, #84]	@ (8003914 <_sbrk+0x60>)
 80038c0:	1ad3      	subs	r3, r2, r3
 80038c2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80038c4:	697b      	ldr	r3, [r7, #20]
 80038c6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80038c8:	4b13      	ldr	r3, [pc, #76]	@ (8003918 <_sbrk+0x64>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d102      	bne.n	80038d6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80038d0:	4b11      	ldr	r3, [pc, #68]	@ (8003918 <_sbrk+0x64>)
 80038d2:	4a12      	ldr	r2, [pc, #72]	@ (800391c <_sbrk+0x68>)
 80038d4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80038d6:	4b10      	ldr	r3, [pc, #64]	@ (8003918 <_sbrk+0x64>)
 80038d8:	681a      	ldr	r2, [r3, #0]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	4413      	add	r3, r2
 80038de:	693a      	ldr	r2, [r7, #16]
 80038e0:	429a      	cmp	r2, r3
 80038e2:	d207      	bcs.n	80038f4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80038e4:	f00a f8d6 	bl	800da94 <__errno>
 80038e8:	4603      	mov	r3, r0
 80038ea:	220c      	movs	r2, #12
 80038ec:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80038ee:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80038f2:	e009      	b.n	8003908 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80038f4:	4b08      	ldr	r3, [pc, #32]	@ (8003918 <_sbrk+0x64>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80038fa:	4b07      	ldr	r3, [pc, #28]	@ (8003918 <_sbrk+0x64>)
 80038fc:	681a      	ldr	r2, [r3, #0]
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	4413      	add	r3, r2
 8003902:	4a05      	ldr	r2, [pc, #20]	@ (8003918 <_sbrk+0x64>)
 8003904:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003906:	68fb      	ldr	r3, [r7, #12]
}
 8003908:	4618      	mov	r0, r3
 800390a:	3718      	adds	r7, #24
 800390c:	46bd      	mov	sp, r7
 800390e:	bd80      	pop	{r7, pc}
 8003910:	20020000 	.word	0x20020000
 8003914:	00000400 	.word	0x00000400
 8003918:	20000718 	.word	0x20000718
 800391c:	200052a0 	.word	0x200052a0

08003920 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003920:	b480      	push	{r7}
 8003922:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003924:	4b06      	ldr	r3, [pc, #24]	@ (8003940 <SystemInit+0x20>)
 8003926:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800392a:	4a05      	ldr	r2, [pc, #20]	@ (8003940 <SystemInit+0x20>)
 800392c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8003930:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003934:	bf00      	nop
 8003936:	46bd      	mov	sp, r7
 8003938:	f85d 7b04 	ldr.w	r7, [sp], #4
 800393c:	4770      	bx	lr
 800393e:	bf00      	nop
 8003940:	e000ed00 	.word	0xe000ed00

08003944 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8003944:	b580      	push	{r7, lr}
 8003946:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8003948:	4b11      	ldr	r3, [pc, #68]	@ (8003990 <MX_USART1_UART_Init+0x4c>)
 800394a:	4a12      	ldr	r2, [pc, #72]	@ (8003994 <MX_USART1_UART_Init+0x50>)
 800394c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800394e:	4b10      	ldr	r3, [pc, #64]	@ (8003990 <MX_USART1_UART_Init+0x4c>)
 8003950:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8003954:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8003956:	4b0e      	ldr	r3, [pc, #56]	@ (8003990 <MX_USART1_UART_Init+0x4c>)
 8003958:	2200      	movs	r2, #0
 800395a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800395c:	4b0c      	ldr	r3, [pc, #48]	@ (8003990 <MX_USART1_UART_Init+0x4c>)
 800395e:	2200      	movs	r2, #0
 8003960:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8003962:	4b0b      	ldr	r3, [pc, #44]	@ (8003990 <MX_USART1_UART_Init+0x4c>)
 8003964:	2200      	movs	r2, #0
 8003966:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8003968:	4b09      	ldr	r3, [pc, #36]	@ (8003990 <MX_USART1_UART_Init+0x4c>)
 800396a:	220c      	movs	r2, #12
 800396c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800396e:	4b08      	ldr	r3, [pc, #32]	@ (8003990 <MX_USART1_UART_Init+0x4c>)
 8003970:	2200      	movs	r2, #0
 8003972:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8003974:	4b06      	ldr	r3, [pc, #24]	@ (8003990 <MX_USART1_UART_Init+0x4c>)
 8003976:	2200      	movs	r2, #0
 8003978:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800397a:	4805      	ldr	r0, [pc, #20]	@ (8003990 <MX_USART1_UART_Init+0x4c>)
 800397c:	f005 fb88 	bl	8009090 <HAL_UART_Init>
 8003980:	4603      	mov	r3, r0
 8003982:	2b00      	cmp	r3, #0
 8003984:	d001      	beq.n	800398a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8003986:	f7ff fd97 	bl	80034b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800398a:	bf00      	nop
 800398c:	bd80      	pop	{r7, pc}
 800398e:	bf00      	nop
 8003990:	2000071c 	.word	0x2000071c
 8003994:	40011000 	.word	0x40011000

08003998 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b08a      	sub	sp, #40	@ 0x28
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80039a0:	f107 0314 	add.w	r3, r7, #20
 80039a4:	2200      	movs	r2, #0
 80039a6:	601a      	str	r2, [r3, #0]
 80039a8:	605a      	str	r2, [r3, #4]
 80039aa:	609a      	str	r2, [r3, #8]
 80039ac:	60da      	str	r2, [r3, #12]
 80039ae:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	4a19      	ldr	r2, [pc, #100]	@ (8003a1c <HAL_UART_MspInit+0x84>)
 80039b6:	4293      	cmp	r3, r2
 80039b8:	d12c      	bne.n	8003a14 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80039ba:	2300      	movs	r3, #0
 80039bc:	613b      	str	r3, [r7, #16]
 80039be:	4b18      	ldr	r3, [pc, #96]	@ (8003a20 <HAL_UART_MspInit+0x88>)
 80039c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039c2:	4a17      	ldr	r2, [pc, #92]	@ (8003a20 <HAL_UART_MspInit+0x88>)
 80039c4:	f043 0310 	orr.w	r3, r3, #16
 80039c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80039ca:	4b15      	ldr	r3, [pc, #84]	@ (8003a20 <HAL_UART_MspInit+0x88>)
 80039cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039ce:	f003 0310 	and.w	r3, r3, #16
 80039d2:	613b      	str	r3, [r7, #16]
 80039d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80039d6:	2300      	movs	r3, #0
 80039d8:	60fb      	str	r3, [r7, #12]
 80039da:	4b11      	ldr	r3, [pc, #68]	@ (8003a20 <HAL_UART_MspInit+0x88>)
 80039dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039de:	4a10      	ldr	r2, [pc, #64]	@ (8003a20 <HAL_UART_MspInit+0x88>)
 80039e0:	f043 0301 	orr.w	r3, r3, #1
 80039e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80039e6:	4b0e      	ldr	r3, [pc, #56]	@ (8003a20 <HAL_UART_MspInit+0x88>)
 80039e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039ea:	f003 0301 	and.w	r3, r3, #1
 80039ee:	60fb      	str	r3, [r7, #12]
 80039f0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80039f2:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80039f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039f8:	2302      	movs	r3, #2
 80039fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039fc:	2300      	movs	r3, #0
 80039fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a00:	2303      	movs	r3, #3
 8003a02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003a04:	2307      	movs	r3, #7
 8003a06:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a08:	f107 0314 	add.w	r3, r7, #20
 8003a0c:	4619      	mov	r1, r3
 8003a0e:	4805      	ldr	r0, [pc, #20]	@ (8003a24 <HAL_UART_MspInit+0x8c>)
 8003a10:	f000 fd28 	bl	8004464 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8003a14:	bf00      	nop
 8003a16:	3728      	adds	r7, #40	@ 0x28
 8003a18:	46bd      	mov	sp, r7
 8003a1a:	bd80      	pop	{r7, pc}
 8003a1c:	40011000 	.word	0x40011000
 8003a20:	40023800 	.word	0x40023800
 8003a24:	40020000 	.word	0x40020000

08003a28 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8003a28:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003a60 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003a2c:	480d      	ldr	r0, [pc, #52]	@ (8003a64 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003a2e:	490e      	ldr	r1, [pc, #56]	@ (8003a68 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003a30:	4a0e      	ldr	r2, [pc, #56]	@ (8003a6c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003a32:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003a34:	e002      	b.n	8003a3c <LoopCopyDataInit>

08003a36 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003a36:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003a38:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003a3a:	3304      	adds	r3, #4

08003a3c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003a3c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003a3e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003a40:	d3f9      	bcc.n	8003a36 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003a42:	4a0b      	ldr	r2, [pc, #44]	@ (8003a70 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003a44:	4c0b      	ldr	r4, [pc, #44]	@ (8003a74 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003a46:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003a48:	e001      	b.n	8003a4e <LoopFillZerobss>

08003a4a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003a4a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003a4c:	3204      	adds	r2, #4

08003a4e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003a4e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003a50:	d3fb      	bcc.n	8003a4a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8003a52:	f7ff ff65 	bl	8003920 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003a56:	f00a f823 	bl	800daa0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003a5a:	f7ff fb3d 	bl	80030d8 <main>
  bx  lr    
 8003a5e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8003a60:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003a64:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003a68:	20000288 	.word	0x20000288
  ldr r2, =_sidata
 8003a6c:	08010ff8 	.word	0x08010ff8
  ldr r2, =_sbss
 8003a70:	20000288 	.word	0x20000288
  ldr r4, =_ebss
 8003a74:	2000529c 	.word	0x2000529c

08003a78 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003a78:	e7fe      	b.n	8003a78 <ADC_IRQHandler>
	...

08003a7c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003a80:	4b0e      	ldr	r3, [pc, #56]	@ (8003abc <HAL_Init+0x40>)
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	4a0d      	ldr	r2, [pc, #52]	@ (8003abc <HAL_Init+0x40>)
 8003a86:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003a8a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003a8c:	4b0b      	ldr	r3, [pc, #44]	@ (8003abc <HAL_Init+0x40>)
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	4a0a      	ldr	r2, [pc, #40]	@ (8003abc <HAL_Init+0x40>)
 8003a92:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003a96:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003a98:	4b08      	ldr	r3, [pc, #32]	@ (8003abc <HAL_Init+0x40>)
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4a07      	ldr	r2, [pc, #28]	@ (8003abc <HAL_Init+0x40>)
 8003a9e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003aa2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003aa4:	2003      	movs	r0, #3
 8003aa6:	f000 f8fc 	bl	8003ca2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003aaa:	200f      	movs	r0, #15
 8003aac:	f7ff fdba 	bl	8003624 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003ab0:	f7ff fd8c 	bl	80035cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003ab4:	2300      	movs	r3, #0
}
 8003ab6:	4618      	mov	r0, r3
 8003ab8:	bd80      	pop	{r7, pc}
 8003aba:	bf00      	nop
 8003abc:	40023c00 	.word	0x40023c00

08003ac0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003ac4:	4b06      	ldr	r3, [pc, #24]	@ (8003ae0 <HAL_IncTick+0x20>)
 8003ac6:	781b      	ldrb	r3, [r3, #0]
 8003ac8:	461a      	mov	r2, r3
 8003aca:	4b06      	ldr	r3, [pc, #24]	@ (8003ae4 <HAL_IncTick+0x24>)
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	4413      	add	r3, r2
 8003ad0:	4a04      	ldr	r2, [pc, #16]	@ (8003ae4 <HAL_IncTick+0x24>)
 8003ad2:	6013      	str	r3, [r2, #0]
}
 8003ad4:	bf00      	nop
 8003ad6:	46bd      	mov	sp, r7
 8003ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003adc:	4770      	bx	lr
 8003ade:	bf00      	nop
 8003ae0:	200000a4 	.word	0x200000a4
 8003ae4:	20000764 	.word	0x20000764

08003ae8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003ae8:	b480      	push	{r7}
 8003aea:	af00      	add	r7, sp, #0
  return uwTick;
 8003aec:	4b03      	ldr	r3, [pc, #12]	@ (8003afc <HAL_GetTick+0x14>)
 8003aee:	681b      	ldr	r3, [r3, #0]
}
 8003af0:	4618      	mov	r0, r3
 8003af2:	46bd      	mov	sp, r7
 8003af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af8:	4770      	bx	lr
 8003afa:	bf00      	nop
 8003afc:	20000764 	.word	0x20000764

08003b00 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b084      	sub	sp, #16
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003b08:	f7ff ffee 	bl	8003ae8 <HAL_GetTick>
 8003b0c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003b18:	d005      	beq.n	8003b26 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003b1a:	4b0a      	ldr	r3, [pc, #40]	@ (8003b44 <HAL_Delay+0x44>)
 8003b1c:	781b      	ldrb	r3, [r3, #0]
 8003b1e:	461a      	mov	r2, r3
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	4413      	add	r3, r2
 8003b24:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003b26:	bf00      	nop
 8003b28:	f7ff ffde 	bl	8003ae8 <HAL_GetTick>
 8003b2c:	4602      	mov	r2, r0
 8003b2e:	68bb      	ldr	r3, [r7, #8]
 8003b30:	1ad3      	subs	r3, r2, r3
 8003b32:	68fa      	ldr	r2, [r7, #12]
 8003b34:	429a      	cmp	r2, r3
 8003b36:	d8f7      	bhi.n	8003b28 <HAL_Delay+0x28>
  {
  }
}
 8003b38:	bf00      	nop
 8003b3a:	bf00      	nop
 8003b3c:	3710      	adds	r7, #16
 8003b3e:	46bd      	mov	sp, r7
 8003b40:	bd80      	pop	{r7, pc}
 8003b42:	bf00      	nop
 8003b44:	200000a4 	.word	0x200000a4

08003b48 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b085      	sub	sp, #20
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	f003 0307 	and.w	r3, r3, #7
 8003b56:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003b58:	4b0c      	ldr	r3, [pc, #48]	@ (8003b8c <__NVIC_SetPriorityGrouping+0x44>)
 8003b5a:	68db      	ldr	r3, [r3, #12]
 8003b5c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003b5e:	68ba      	ldr	r2, [r7, #8]
 8003b60:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003b64:	4013      	ands	r3, r2
 8003b66:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003b6c:	68bb      	ldr	r3, [r7, #8]
 8003b6e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003b70:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003b74:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003b78:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003b7a:	4a04      	ldr	r2, [pc, #16]	@ (8003b8c <__NVIC_SetPriorityGrouping+0x44>)
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	60d3      	str	r3, [r2, #12]
}
 8003b80:	bf00      	nop
 8003b82:	3714      	adds	r7, #20
 8003b84:	46bd      	mov	sp, r7
 8003b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8a:	4770      	bx	lr
 8003b8c:	e000ed00 	.word	0xe000ed00

08003b90 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003b90:	b480      	push	{r7}
 8003b92:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003b94:	4b04      	ldr	r3, [pc, #16]	@ (8003ba8 <__NVIC_GetPriorityGrouping+0x18>)
 8003b96:	68db      	ldr	r3, [r3, #12]
 8003b98:	0a1b      	lsrs	r3, r3, #8
 8003b9a:	f003 0307 	and.w	r3, r3, #7
}
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	46bd      	mov	sp, r7
 8003ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ba6:	4770      	bx	lr
 8003ba8:	e000ed00 	.word	0xe000ed00

08003bac <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003bac:	b480      	push	{r7}
 8003bae:	b083      	sub	sp, #12
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	4603      	mov	r3, r0
 8003bb4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003bb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	db0b      	blt.n	8003bd6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003bbe:	79fb      	ldrb	r3, [r7, #7]
 8003bc0:	f003 021f 	and.w	r2, r3, #31
 8003bc4:	4907      	ldr	r1, [pc, #28]	@ (8003be4 <__NVIC_EnableIRQ+0x38>)
 8003bc6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bca:	095b      	lsrs	r3, r3, #5
 8003bcc:	2001      	movs	r0, #1
 8003bce:	fa00 f202 	lsl.w	r2, r0, r2
 8003bd2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003bd6:	bf00      	nop
 8003bd8:	370c      	adds	r7, #12
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be0:	4770      	bx	lr
 8003be2:	bf00      	nop
 8003be4:	e000e100 	.word	0xe000e100

08003be8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003be8:	b480      	push	{r7}
 8003bea:	b083      	sub	sp, #12
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	4603      	mov	r3, r0
 8003bf0:	6039      	str	r1, [r7, #0]
 8003bf2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003bf4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bf8:	2b00      	cmp	r3, #0
 8003bfa:	db0a      	blt.n	8003c12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	b2da      	uxtb	r2, r3
 8003c00:	490c      	ldr	r1, [pc, #48]	@ (8003c34 <__NVIC_SetPriority+0x4c>)
 8003c02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003c06:	0112      	lsls	r2, r2, #4
 8003c08:	b2d2      	uxtb	r2, r2
 8003c0a:	440b      	add	r3, r1
 8003c0c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003c10:	e00a      	b.n	8003c28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	b2da      	uxtb	r2, r3
 8003c16:	4908      	ldr	r1, [pc, #32]	@ (8003c38 <__NVIC_SetPriority+0x50>)
 8003c18:	79fb      	ldrb	r3, [r7, #7]
 8003c1a:	f003 030f 	and.w	r3, r3, #15
 8003c1e:	3b04      	subs	r3, #4
 8003c20:	0112      	lsls	r2, r2, #4
 8003c22:	b2d2      	uxtb	r2, r2
 8003c24:	440b      	add	r3, r1
 8003c26:	761a      	strb	r2, [r3, #24]
}
 8003c28:	bf00      	nop
 8003c2a:	370c      	adds	r7, #12
 8003c2c:	46bd      	mov	sp, r7
 8003c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c32:	4770      	bx	lr
 8003c34:	e000e100 	.word	0xe000e100
 8003c38:	e000ed00 	.word	0xe000ed00

08003c3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c3c:	b480      	push	{r7}
 8003c3e:	b089      	sub	sp, #36	@ 0x24
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	60f8      	str	r0, [r7, #12]
 8003c44:	60b9      	str	r1, [r7, #8]
 8003c46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	f003 0307 	and.w	r3, r3, #7
 8003c4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003c50:	69fb      	ldr	r3, [r7, #28]
 8003c52:	f1c3 0307 	rsb	r3, r3, #7
 8003c56:	2b04      	cmp	r3, #4
 8003c58:	bf28      	it	cs
 8003c5a:	2304      	movcs	r3, #4
 8003c5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003c5e:	69fb      	ldr	r3, [r7, #28]
 8003c60:	3304      	adds	r3, #4
 8003c62:	2b06      	cmp	r3, #6
 8003c64:	d902      	bls.n	8003c6c <NVIC_EncodePriority+0x30>
 8003c66:	69fb      	ldr	r3, [r7, #28]
 8003c68:	3b03      	subs	r3, #3
 8003c6a:	e000      	b.n	8003c6e <NVIC_EncodePriority+0x32>
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c70:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003c74:	69bb      	ldr	r3, [r7, #24]
 8003c76:	fa02 f303 	lsl.w	r3, r2, r3
 8003c7a:	43da      	mvns	r2, r3
 8003c7c:	68bb      	ldr	r3, [r7, #8]
 8003c7e:	401a      	ands	r2, r3
 8003c80:	697b      	ldr	r3, [r7, #20]
 8003c82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003c84:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003c88:	697b      	ldr	r3, [r7, #20]
 8003c8a:	fa01 f303 	lsl.w	r3, r1, r3
 8003c8e:	43d9      	mvns	r1, r3
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c94:	4313      	orrs	r3, r2
         );
}
 8003c96:	4618      	mov	r0, r3
 8003c98:	3724      	adds	r7, #36	@ 0x24
 8003c9a:	46bd      	mov	sp, r7
 8003c9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ca0:	4770      	bx	lr

08003ca2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003ca2:	b580      	push	{r7, lr}
 8003ca4:	b082      	sub	sp, #8
 8003ca6:	af00      	add	r7, sp, #0
 8003ca8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003caa:	6878      	ldr	r0, [r7, #4]
 8003cac:	f7ff ff4c 	bl	8003b48 <__NVIC_SetPriorityGrouping>
}
 8003cb0:	bf00      	nop
 8003cb2:	3708      	adds	r7, #8
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	bd80      	pop	{r7, pc}

08003cb8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003cb8:	b580      	push	{r7, lr}
 8003cba:	b086      	sub	sp, #24
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	4603      	mov	r3, r0
 8003cc0:	60b9      	str	r1, [r7, #8]
 8003cc2:	607a      	str	r2, [r7, #4]
 8003cc4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003cca:	f7ff ff61 	bl	8003b90 <__NVIC_GetPriorityGrouping>
 8003cce:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003cd0:	687a      	ldr	r2, [r7, #4]
 8003cd2:	68b9      	ldr	r1, [r7, #8]
 8003cd4:	6978      	ldr	r0, [r7, #20]
 8003cd6:	f7ff ffb1 	bl	8003c3c <NVIC_EncodePriority>
 8003cda:	4602      	mov	r2, r0
 8003cdc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ce0:	4611      	mov	r1, r2
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	f7ff ff80 	bl	8003be8 <__NVIC_SetPriority>
}
 8003ce8:	bf00      	nop
 8003cea:	3718      	adds	r7, #24
 8003cec:	46bd      	mov	sp, r7
 8003cee:	bd80      	pop	{r7, pc}

08003cf0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003cf0:	b580      	push	{r7, lr}
 8003cf2:	b082      	sub	sp, #8
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003cfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cfe:	4618      	mov	r0, r3
 8003d00:	f7ff ff54 	bl	8003bac <__NVIC_EnableIRQ>
}
 8003d04:	bf00      	nop
 8003d06:	3708      	adds	r7, #8
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	bd80      	pop	{r7, pc}

08003d0c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b086      	sub	sp, #24
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003d14:	2300      	movs	r3, #0
 8003d16:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003d18:	f7ff fee6 	bl	8003ae8 <HAL_GetTick>
 8003d1c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d101      	bne.n	8003d28 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003d24:	2301      	movs	r3, #1
 8003d26:	e099      	b.n	8003e5c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2202      	movs	r2, #2
 8003d2c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2200      	movs	r2, #0
 8003d34:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	681a      	ldr	r2, [r3, #0]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	f022 0201 	bic.w	r2, r2, #1
 8003d46:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003d48:	e00f      	b.n	8003d6a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003d4a:	f7ff fecd 	bl	8003ae8 <HAL_GetTick>
 8003d4e:	4602      	mov	r2, r0
 8003d50:	693b      	ldr	r3, [r7, #16]
 8003d52:	1ad3      	subs	r3, r2, r3
 8003d54:	2b05      	cmp	r3, #5
 8003d56:	d908      	bls.n	8003d6a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2220      	movs	r2, #32
 8003d5c:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2203      	movs	r2, #3
 8003d62:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003d66:	2303      	movs	r3, #3
 8003d68:	e078      	b.n	8003e5c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	f003 0301 	and.w	r3, r3, #1
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d1e8      	bne.n	8003d4a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003d80:	697a      	ldr	r2, [r7, #20]
 8003d82:	4b38      	ldr	r3, [pc, #224]	@ (8003e64 <HAL_DMA_Init+0x158>)
 8003d84:	4013      	ands	r3, r2
 8003d86:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	685a      	ldr	r2, [r3, #4]
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	689b      	ldr	r3, [r3, #8]
 8003d90:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003d96:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	691b      	ldr	r3, [r3, #16]
 8003d9c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003da2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	699b      	ldr	r3, [r3, #24]
 8003da8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003dae:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6a1b      	ldr	r3, [r3, #32]
 8003db4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003db6:	697a      	ldr	r2, [r7, #20]
 8003db8:	4313      	orrs	r3, r2
 8003dba:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dc0:	2b04      	cmp	r3, #4
 8003dc2:	d107      	bne.n	8003dd4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003dcc:	4313      	orrs	r3, r2
 8003dce:	697a      	ldr	r2, [r7, #20]
 8003dd0:	4313      	orrs	r3, r2
 8003dd2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	681b      	ldr	r3, [r3, #0]
 8003dd8:	697a      	ldr	r2, [r7, #20]
 8003dda:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	695b      	ldr	r3, [r3, #20]
 8003de2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003de4:	697b      	ldr	r3, [r7, #20]
 8003de6:	f023 0307 	bic.w	r3, r3, #7
 8003dea:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003df0:	697a      	ldr	r2, [r7, #20]
 8003df2:	4313      	orrs	r3, r2
 8003df4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dfa:	2b04      	cmp	r3, #4
 8003dfc:	d117      	bne.n	8003e2e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e02:	697a      	ldr	r2, [r7, #20]
 8003e04:	4313      	orrs	r3, r2
 8003e06:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d00e      	beq.n	8003e2e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003e10:	6878      	ldr	r0, [r7, #4]
 8003e12:	f000 faab 	bl	800436c <DMA_CheckFifoParam>
 8003e16:	4603      	mov	r3, r0
 8003e18:	2b00      	cmp	r3, #0
 8003e1a:	d008      	beq.n	8003e2e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2240      	movs	r2, #64	@ 0x40
 8003e20:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	2201      	movs	r2, #1
 8003e26:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003e2a:	2301      	movs	r3, #1
 8003e2c:	e016      	b.n	8003e5c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	697a      	ldr	r2, [r7, #20]
 8003e34:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003e36:	6878      	ldr	r0, [r7, #4]
 8003e38:	f000 fa62 	bl	8004300 <DMA_CalcBaseAndBitshift>
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003e44:	223f      	movs	r2, #63	@ 0x3f
 8003e46:	409a      	lsls	r2, r3
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2200      	movs	r2, #0
 8003e50:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	2201      	movs	r2, #1
 8003e56:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003e5a:	2300      	movs	r3, #0
}
 8003e5c:	4618      	mov	r0, r3
 8003e5e:	3718      	adds	r7, #24
 8003e60:	46bd      	mov	sp, r7
 8003e62:	bd80      	pop	{r7, pc}
 8003e64:	f010803f 	.word	0xf010803f

08003e68 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003e68:	b580      	push	{r7, lr}
 8003e6a:	b086      	sub	sp, #24
 8003e6c:	af00      	add	r7, sp, #0
 8003e6e:	60f8      	str	r0, [r7, #12]
 8003e70:	60b9      	str	r1, [r7, #8]
 8003e72:	607a      	str	r2, [r7, #4]
 8003e74:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e76:	2300      	movs	r3, #0
 8003e78:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003e7e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003e86:	2b01      	cmp	r3, #1
 8003e88:	d101      	bne.n	8003e8e <HAL_DMA_Start_IT+0x26>
 8003e8a:	2302      	movs	r3, #2
 8003e8c:	e040      	b.n	8003f10 <HAL_DMA_Start_IT+0xa8>
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	2201      	movs	r2, #1
 8003e92:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003e9c:	b2db      	uxtb	r3, r3
 8003e9e:	2b01      	cmp	r3, #1
 8003ea0:	d12f      	bne.n	8003f02 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	2202      	movs	r2, #2
 8003ea6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	2200      	movs	r2, #0
 8003eae:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003eb0:	683b      	ldr	r3, [r7, #0]
 8003eb2:	687a      	ldr	r2, [r7, #4]
 8003eb4:	68b9      	ldr	r1, [r7, #8]
 8003eb6:	68f8      	ldr	r0, [r7, #12]
 8003eb8:	f000 f9f4 	bl	80042a4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003ec0:	223f      	movs	r2, #63	@ 0x3f
 8003ec2:	409a      	lsls	r2, r3
 8003ec4:	693b      	ldr	r3, [r7, #16]
 8003ec6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	681a      	ldr	r2, [r3, #0]
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	f042 0216 	orr.w	r2, r2, #22
 8003ed6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d007      	beq.n	8003ef0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	681a      	ldr	r2, [r3, #0]
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f042 0208 	orr.w	r2, r2, #8
 8003eee:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	681a      	ldr	r2, [r3, #0]
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	f042 0201 	orr.w	r2, r2, #1
 8003efe:	601a      	str	r2, [r3, #0]
 8003f00:	e005      	b.n	8003f0e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	2200      	movs	r2, #0
 8003f06:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003f0a:	2302      	movs	r3, #2
 8003f0c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003f0e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f10:	4618      	mov	r0, r3
 8003f12:	3718      	adds	r7, #24
 8003f14:	46bd      	mov	sp, r7
 8003f16:	bd80      	pop	{r7, pc}

08003f18 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b083      	sub	sp, #12
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003f26:	b2db      	uxtb	r3, r3
 8003f28:	2b02      	cmp	r3, #2
 8003f2a:	d004      	beq.n	8003f36 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2280      	movs	r2, #128	@ 0x80
 8003f30:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8003f32:	2301      	movs	r3, #1
 8003f34:	e00c      	b.n	8003f50 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	2205      	movs	r2, #5
 8003f3a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	681a      	ldr	r2, [r3, #0]
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f022 0201 	bic.w	r2, r2, #1
 8003f4c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003f4e:	2300      	movs	r3, #0
}
 8003f50:	4618      	mov	r0, r3
 8003f52:	370c      	adds	r7, #12
 8003f54:	46bd      	mov	sp, r7
 8003f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5a:	4770      	bx	lr

08003f5c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b086      	sub	sp, #24
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8003f64:	2300      	movs	r3, #0
 8003f66:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003f68:	4b8e      	ldr	r3, [pc, #568]	@ (80041a4 <HAL_DMA_IRQHandler+0x248>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	4a8e      	ldr	r2, [pc, #568]	@ (80041a8 <HAL_DMA_IRQHandler+0x24c>)
 8003f6e:	fba2 2303 	umull	r2, r3, r2, r3
 8003f72:	0a9b      	lsrs	r3, r3, #10
 8003f74:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003f7a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003f7c:	693b      	ldr	r3, [r7, #16]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f86:	2208      	movs	r2, #8
 8003f88:	409a      	lsls	r2, r3
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	4013      	ands	r3, r2
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d01a      	beq.n	8003fc8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	f003 0304 	and.w	r3, r3, #4
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d013      	beq.n	8003fc8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	681a      	ldr	r2, [r3, #0]
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f022 0204 	bic.w	r2, r2, #4
 8003fae:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fb4:	2208      	movs	r2, #8
 8003fb6:	409a      	lsls	r2, r3
 8003fb8:	693b      	ldr	r3, [r7, #16]
 8003fba:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fc0:	f043 0201 	orr.w	r2, r3, #1
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fcc:	2201      	movs	r2, #1
 8003fce:	409a      	lsls	r2, r3
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	4013      	ands	r3, r2
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d012      	beq.n	8003ffe <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	695b      	ldr	r3, [r3, #20]
 8003fde:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d00b      	beq.n	8003ffe <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003fea:	2201      	movs	r2, #1
 8003fec:	409a      	lsls	r2, r3
 8003fee:	693b      	ldr	r3, [r7, #16]
 8003ff0:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ff6:	f043 0202 	orr.w	r2, r3, #2
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004002:	2204      	movs	r2, #4
 8004004:	409a      	lsls	r2, r3
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	4013      	ands	r3, r2
 800400a:	2b00      	cmp	r3, #0
 800400c:	d012      	beq.n	8004034 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	f003 0302 	and.w	r3, r3, #2
 8004018:	2b00      	cmp	r3, #0
 800401a:	d00b      	beq.n	8004034 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004020:	2204      	movs	r2, #4
 8004022:	409a      	lsls	r2, r3
 8004024:	693b      	ldr	r3, [r7, #16]
 8004026:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800402c:	f043 0204 	orr.w	r2, r3, #4
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004038:	2210      	movs	r2, #16
 800403a:	409a      	lsls	r2, r3
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	4013      	ands	r3, r2
 8004040:	2b00      	cmp	r3, #0
 8004042:	d043      	beq.n	80040cc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	681b      	ldr	r3, [r3, #0]
 800404a:	f003 0308 	and.w	r3, r3, #8
 800404e:	2b00      	cmp	r3, #0
 8004050:	d03c      	beq.n	80040cc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004056:	2210      	movs	r2, #16
 8004058:	409a      	lsls	r2, r3
 800405a:	693b      	ldr	r3, [r7, #16]
 800405c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8004068:	2b00      	cmp	r3, #0
 800406a:	d018      	beq.n	800409e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004076:	2b00      	cmp	r3, #0
 8004078:	d108      	bne.n	800408c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800407e:	2b00      	cmp	r3, #0
 8004080:	d024      	beq.n	80040cc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004086:	6878      	ldr	r0, [r7, #4]
 8004088:	4798      	blx	r3
 800408a:	e01f      	b.n	80040cc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004090:	2b00      	cmp	r3, #0
 8004092:	d01b      	beq.n	80040cc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004098:	6878      	ldr	r0, [r7, #4]
 800409a:	4798      	blx	r3
 800409c:	e016      	b.n	80040cc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80040a8:	2b00      	cmp	r3, #0
 80040aa:	d107      	bne.n	80040bc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	681a      	ldr	r2, [r3, #0]
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	681b      	ldr	r3, [r3, #0]
 80040b6:	f022 0208 	bic.w	r2, r2, #8
 80040ba:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d003      	beq.n	80040cc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040c8:	6878      	ldr	r0, [r7, #4]
 80040ca:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040d0:	2220      	movs	r2, #32
 80040d2:	409a      	lsls	r2, r3
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	4013      	ands	r3, r2
 80040d8:	2b00      	cmp	r3, #0
 80040da:	f000 808f 	beq.w	80041fc <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f003 0310 	and.w	r3, r3, #16
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	f000 8087 	beq.w	80041fc <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040f2:	2220      	movs	r2, #32
 80040f4:	409a      	lsls	r2, r3
 80040f6:	693b      	ldr	r3, [r7, #16]
 80040f8:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004100:	b2db      	uxtb	r3, r3
 8004102:	2b05      	cmp	r3, #5
 8004104:	d136      	bne.n	8004174 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	681a      	ldr	r2, [r3, #0]
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f022 0216 	bic.w	r2, r2, #22
 8004114:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	695a      	ldr	r2, [r3, #20]
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004124:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800412a:	2b00      	cmp	r3, #0
 800412c:	d103      	bne.n	8004136 <HAL_DMA_IRQHandler+0x1da>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004132:	2b00      	cmp	r3, #0
 8004134:	d007      	beq.n	8004146 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	681a      	ldr	r2, [r3, #0]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f022 0208 	bic.w	r2, r2, #8
 8004144:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800414a:	223f      	movs	r2, #63	@ 0x3f
 800414c:	409a      	lsls	r2, r3
 800414e:	693b      	ldr	r3, [r7, #16]
 8004150:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2201      	movs	r2, #1
 8004156:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	2200      	movs	r2, #0
 800415e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004166:	2b00      	cmp	r3, #0
 8004168:	d07e      	beq.n	8004268 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800416e:	6878      	ldr	r0, [r7, #4]
 8004170:	4798      	blx	r3
        }
        return;
 8004172:	e079      	b.n	8004268 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800417e:	2b00      	cmp	r3, #0
 8004180:	d01d      	beq.n	80041be <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 800418c:	2b00      	cmp	r3, #0
 800418e:	d10d      	bne.n	80041ac <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004194:	2b00      	cmp	r3, #0
 8004196:	d031      	beq.n	80041fc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800419c:	6878      	ldr	r0, [r7, #4]
 800419e:	4798      	blx	r3
 80041a0:	e02c      	b.n	80041fc <HAL_DMA_IRQHandler+0x2a0>
 80041a2:	bf00      	nop
 80041a4:	2000009c 	.word	0x2000009c
 80041a8:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041b0:	2b00      	cmp	r3, #0
 80041b2:	d023      	beq.n	80041fc <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041b8:	6878      	ldr	r0, [r7, #4]
 80041ba:	4798      	blx	r3
 80041bc:	e01e      	b.n	80041fc <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d10f      	bne.n	80041ec <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	681a      	ldr	r2, [r3, #0]
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	f022 0210 	bic.w	r2, r2, #16
 80041da:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2201      	movs	r2, #1
 80041e0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	2200      	movs	r2, #0
 80041e8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d003      	beq.n	80041fc <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80041f8:	6878      	ldr	r0, [r7, #4]
 80041fa:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004200:	2b00      	cmp	r3, #0
 8004202:	d032      	beq.n	800426a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004208:	f003 0301 	and.w	r3, r3, #1
 800420c:	2b00      	cmp	r3, #0
 800420e:	d022      	beq.n	8004256 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	2205      	movs	r2, #5
 8004214:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	681a      	ldr	r2, [r3, #0]
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	f022 0201 	bic.w	r2, r2, #1
 8004226:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004228:	68bb      	ldr	r3, [r7, #8]
 800422a:	3301      	adds	r3, #1
 800422c:	60bb      	str	r3, [r7, #8]
 800422e:	697a      	ldr	r2, [r7, #20]
 8004230:	429a      	cmp	r2, r3
 8004232:	d307      	bcc.n	8004244 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f003 0301 	and.w	r3, r3, #1
 800423e:	2b00      	cmp	r3, #0
 8004240:	d1f2      	bne.n	8004228 <HAL_DMA_IRQHandler+0x2cc>
 8004242:	e000      	b.n	8004246 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004244:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2201      	movs	r2, #1
 800424a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	2200      	movs	r2, #0
 8004252:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800425a:	2b00      	cmp	r3, #0
 800425c:	d005      	beq.n	800426a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004262:	6878      	ldr	r0, [r7, #4]
 8004264:	4798      	blx	r3
 8004266:	e000      	b.n	800426a <HAL_DMA_IRQHandler+0x30e>
        return;
 8004268:	bf00      	nop
    }
  }
}
 800426a:	3718      	adds	r7, #24
 800426c:	46bd      	mov	sp, r7
 800426e:	bd80      	pop	{r7, pc}

08004270 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8004270:	b480      	push	{r7}
 8004272:	b083      	sub	sp, #12
 8004274:	af00      	add	r7, sp, #0
 8004276:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800427e:	b2db      	uxtb	r3, r3
}
 8004280:	4618      	mov	r0, r3
 8004282:	370c      	adds	r7, #12
 8004284:	46bd      	mov	sp, r7
 8004286:	f85d 7b04 	ldr.w	r7, [sp], #4
 800428a:	4770      	bx	lr

0800428c <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 800428c:	b480      	push	{r7}
 800428e:	b083      	sub	sp, #12
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8004298:	4618      	mov	r0, r3
 800429a:	370c      	adds	r7, #12
 800429c:	46bd      	mov	sp, r7
 800429e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a2:	4770      	bx	lr

080042a4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80042a4:	b480      	push	{r7}
 80042a6:	b085      	sub	sp, #20
 80042a8:	af00      	add	r7, sp, #0
 80042aa:	60f8      	str	r0, [r7, #12]
 80042ac:	60b9      	str	r1, [r7, #8]
 80042ae:	607a      	str	r2, [r7, #4]
 80042b0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	681a      	ldr	r2, [r3, #0]
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80042c0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	683a      	ldr	r2, [r7, #0]
 80042c8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	689b      	ldr	r3, [r3, #8]
 80042ce:	2b40      	cmp	r3, #64	@ 0x40
 80042d0:	d108      	bne.n	80042e4 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	687a      	ldr	r2, [r7, #4]
 80042d8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	68ba      	ldr	r2, [r7, #8]
 80042e0:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80042e2:	e007      	b.n	80042f4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	68ba      	ldr	r2, [r7, #8]
 80042ea:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	687a      	ldr	r2, [r7, #4]
 80042f2:	60da      	str	r2, [r3, #12]
}
 80042f4:	bf00      	nop
 80042f6:	3714      	adds	r7, #20
 80042f8:	46bd      	mov	sp, r7
 80042fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042fe:	4770      	bx	lr

08004300 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004300:	b480      	push	{r7}
 8004302:	b085      	sub	sp, #20
 8004304:	af00      	add	r7, sp, #0
 8004306:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	b2db      	uxtb	r3, r3
 800430e:	3b10      	subs	r3, #16
 8004310:	4a14      	ldr	r2, [pc, #80]	@ (8004364 <DMA_CalcBaseAndBitshift+0x64>)
 8004312:	fba2 2303 	umull	r2, r3, r2, r3
 8004316:	091b      	lsrs	r3, r3, #4
 8004318:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800431a:	4a13      	ldr	r2, [pc, #76]	@ (8004368 <DMA_CalcBaseAndBitshift+0x68>)
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	4413      	add	r3, r2
 8004320:	781b      	ldrb	r3, [r3, #0]
 8004322:	461a      	mov	r2, r3
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	2b03      	cmp	r3, #3
 800432c:	d909      	bls.n	8004342 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 8004336:	f023 0303 	bic.w	r3, r3, #3
 800433a:	1d1a      	adds	r2, r3, #4
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	659a      	str	r2, [r3, #88]	@ 0x58
 8004340:	e007      	b.n	8004352 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800434a:	f023 0303 	bic.w	r3, r3, #3
 800434e:	687a      	ldr	r2, [r7, #4]
 8004350:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 8004356:	4618      	mov	r0, r3
 8004358:	3714      	adds	r7, #20
 800435a:	46bd      	mov	sp, r7
 800435c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004360:	4770      	bx	lr
 8004362:	bf00      	nop
 8004364:	aaaaaaab 	.word	0xaaaaaaab
 8004368:	08010c00 	.word	0x08010c00

0800436c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800436c:	b480      	push	{r7}
 800436e:	b085      	sub	sp, #20
 8004370:	af00      	add	r7, sp, #0
 8004372:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004374:	2300      	movs	r3, #0
 8004376:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800437c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	699b      	ldr	r3, [r3, #24]
 8004382:	2b00      	cmp	r3, #0
 8004384:	d11f      	bne.n	80043c6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	2b03      	cmp	r3, #3
 800438a:	d856      	bhi.n	800443a <DMA_CheckFifoParam+0xce>
 800438c:	a201      	add	r2, pc, #4	@ (adr r2, 8004394 <DMA_CheckFifoParam+0x28>)
 800438e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004392:	bf00      	nop
 8004394:	080043a5 	.word	0x080043a5
 8004398:	080043b7 	.word	0x080043b7
 800439c:	080043a5 	.word	0x080043a5
 80043a0:	0800443b 	.word	0x0800443b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043a8:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d046      	beq.n	800443e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80043b0:	2301      	movs	r3, #1
 80043b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80043b4:	e043      	b.n	800443e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043ba:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 80043be:	d140      	bne.n	8004442 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80043c0:	2301      	movs	r3, #1
 80043c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80043c4:	e03d      	b.n	8004442 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	699b      	ldr	r3, [r3, #24]
 80043ca:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80043ce:	d121      	bne.n	8004414 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80043d0:	68bb      	ldr	r3, [r7, #8]
 80043d2:	2b03      	cmp	r3, #3
 80043d4:	d837      	bhi.n	8004446 <DMA_CheckFifoParam+0xda>
 80043d6:	a201      	add	r2, pc, #4	@ (adr r2, 80043dc <DMA_CheckFifoParam+0x70>)
 80043d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80043dc:	080043ed 	.word	0x080043ed
 80043e0:	080043f3 	.word	0x080043f3
 80043e4:	080043ed 	.word	0x080043ed
 80043e8:	08004405 	.word	0x08004405
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80043ec:	2301      	movs	r3, #1
 80043ee:	73fb      	strb	r3, [r7, #15]
      break;
 80043f0:	e030      	b.n	8004454 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80043f6:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d025      	beq.n	800444a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80043fe:	2301      	movs	r3, #1
 8004400:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004402:	e022      	b.n	800444a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004408:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 800440c:	d11f      	bne.n	800444e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800440e:	2301      	movs	r3, #1
 8004410:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004412:	e01c      	b.n	800444e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	2b02      	cmp	r3, #2
 8004418:	d903      	bls.n	8004422 <DMA_CheckFifoParam+0xb6>
 800441a:	68bb      	ldr	r3, [r7, #8]
 800441c:	2b03      	cmp	r3, #3
 800441e:	d003      	beq.n	8004428 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004420:	e018      	b.n	8004454 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004422:	2301      	movs	r3, #1
 8004424:	73fb      	strb	r3, [r7, #15]
      break;
 8004426:	e015      	b.n	8004454 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800442c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004430:	2b00      	cmp	r3, #0
 8004432:	d00e      	beq.n	8004452 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004434:	2301      	movs	r3, #1
 8004436:	73fb      	strb	r3, [r7, #15]
      break;
 8004438:	e00b      	b.n	8004452 <DMA_CheckFifoParam+0xe6>
      break;
 800443a:	bf00      	nop
 800443c:	e00a      	b.n	8004454 <DMA_CheckFifoParam+0xe8>
      break;
 800443e:	bf00      	nop
 8004440:	e008      	b.n	8004454 <DMA_CheckFifoParam+0xe8>
      break;
 8004442:	bf00      	nop
 8004444:	e006      	b.n	8004454 <DMA_CheckFifoParam+0xe8>
      break;
 8004446:	bf00      	nop
 8004448:	e004      	b.n	8004454 <DMA_CheckFifoParam+0xe8>
      break;
 800444a:	bf00      	nop
 800444c:	e002      	b.n	8004454 <DMA_CheckFifoParam+0xe8>
      break;   
 800444e:	bf00      	nop
 8004450:	e000      	b.n	8004454 <DMA_CheckFifoParam+0xe8>
      break;
 8004452:	bf00      	nop
    }
  } 
  
  return status; 
 8004454:	7bfb      	ldrb	r3, [r7, #15]
}
 8004456:	4618      	mov	r0, r3
 8004458:	3714      	adds	r7, #20
 800445a:	46bd      	mov	sp, r7
 800445c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004460:	4770      	bx	lr
 8004462:	bf00      	nop

08004464 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004464:	b480      	push	{r7}
 8004466:	b089      	sub	sp, #36	@ 0x24
 8004468:	af00      	add	r7, sp, #0
 800446a:	6078      	str	r0, [r7, #4]
 800446c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800446e:	2300      	movs	r3, #0
 8004470:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004472:	2300      	movs	r3, #0
 8004474:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004476:	2300      	movs	r3, #0
 8004478:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800447a:	2300      	movs	r3, #0
 800447c:	61fb      	str	r3, [r7, #28]
 800447e:	e16b      	b.n	8004758 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004480:	2201      	movs	r2, #1
 8004482:	69fb      	ldr	r3, [r7, #28]
 8004484:	fa02 f303 	lsl.w	r3, r2, r3
 8004488:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800448a:	683b      	ldr	r3, [r7, #0]
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	697a      	ldr	r2, [r7, #20]
 8004490:	4013      	ands	r3, r2
 8004492:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004494:	693a      	ldr	r2, [r7, #16]
 8004496:	697b      	ldr	r3, [r7, #20]
 8004498:	429a      	cmp	r2, r3
 800449a:	f040 815a 	bne.w	8004752 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	685b      	ldr	r3, [r3, #4]
 80044a2:	f003 0303 	and.w	r3, r3, #3
 80044a6:	2b01      	cmp	r3, #1
 80044a8:	d005      	beq.n	80044b6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	685b      	ldr	r3, [r3, #4]
 80044ae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80044b2:	2b02      	cmp	r3, #2
 80044b4:	d130      	bne.n	8004518 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	689b      	ldr	r3, [r3, #8]
 80044ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80044bc:	69fb      	ldr	r3, [r7, #28]
 80044be:	005b      	lsls	r3, r3, #1
 80044c0:	2203      	movs	r2, #3
 80044c2:	fa02 f303 	lsl.w	r3, r2, r3
 80044c6:	43db      	mvns	r3, r3
 80044c8:	69ba      	ldr	r2, [r7, #24]
 80044ca:	4013      	ands	r3, r2
 80044cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	68da      	ldr	r2, [r3, #12]
 80044d2:	69fb      	ldr	r3, [r7, #28]
 80044d4:	005b      	lsls	r3, r3, #1
 80044d6:	fa02 f303 	lsl.w	r3, r2, r3
 80044da:	69ba      	ldr	r2, [r7, #24]
 80044dc:	4313      	orrs	r3, r2
 80044de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	69ba      	ldr	r2, [r7, #24]
 80044e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	685b      	ldr	r3, [r3, #4]
 80044ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80044ec:	2201      	movs	r2, #1
 80044ee:	69fb      	ldr	r3, [r7, #28]
 80044f0:	fa02 f303 	lsl.w	r3, r2, r3
 80044f4:	43db      	mvns	r3, r3
 80044f6:	69ba      	ldr	r2, [r7, #24]
 80044f8:	4013      	ands	r3, r2
 80044fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	091b      	lsrs	r3, r3, #4
 8004502:	f003 0201 	and.w	r2, r3, #1
 8004506:	69fb      	ldr	r3, [r7, #28]
 8004508:	fa02 f303 	lsl.w	r3, r2, r3
 800450c:	69ba      	ldr	r2, [r7, #24]
 800450e:	4313      	orrs	r3, r2
 8004510:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	69ba      	ldr	r2, [r7, #24]
 8004516:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	f003 0303 	and.w	r3, r3, #3
 8004520:	2b03      	cmp	r3, #3
 8004522:	d017      	beq.n	8004554 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	68db      	ldr	r3, [r3, #12]
 8004528:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800452a:	69fb      	ldr	r3, [r7, #28]
 800452c:	005b      	lsls	r3, r3, #1
 800452e:	2203      	movs	r2, #3
 8004530:	fa02 f303 	lsl.w	r3, r2, r3
 8004534:	43db      	mvns	r3, r3
 8004536:	69ba      	ldr	r2, [r7, #24]
 8004538:	4013      	ands	r3, r2
 800453a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	689a      	ldr	r2, [r3, #8]
 8004540:	69fb      	ldr	r3, [r7, #28]
 8004542:	005b      	lsls	r3, r3, #1
 8004544:	fa02 f303 	lsl.w	r3, r2, r3
 8004548:	69ba      	ldr	r2, [r7, #24]
 800454a:	4313      	orrs	r3, r2
 800454c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	69ba      	ldr	r2, [r7, #24]
 8004552:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004554:	683b      	ldr	r3, [r7, #0]
 8004556:	685b      	ldr	r3, [r3, #4]
 8004558:	f003 0303 	and.w	r3, r3, #3
 800455c:	2b02      	cmp	r3, #2
 800455e:	d123      	bne.n	80045a8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004560:	69fb      	ldr	r3, [r7, #28]
 8004562:	08da      	lsrs	r2, r3, #3
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	3208      	adds	r2, #8
 8004568:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800456c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800456e:	69fb      	ldr	r3, [r7, #28]
 8004570:	f003 0307 	and.w	r3, r3, #7
 8004574:	009b      	lsls	r3, r3, #2
 8004576:	220f      	movs	r2, #15
 8004578:	fa02 f303 	lsl.w	r3, r2, r3
 800457c:	43db      	mvns	r3, r3
 800457e:	69ba      	ldr	r2, [r7, #24]
 8004580:	4013      	ands	r3, r2
 8004582:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004584:	683b      	ldr	r3, [r7, #0]
 8004586:	691a      	ldr	r2, [r3, #16]
 8004588:	69fb      	ldr	r3, [r7, #28]
 800458a:	f003 0307 	and.w	r3, r3, #7
 800458e:	009b      	lsls	r3, r3, #2
 8004590:	fa02 f303 	lsl.w	r3, r2, r3
 8004594:	69ba      	ldr	r2, [r7, #24]
 8004596:	4313      	orrs	r3, r2
 8004598:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800459a:	69fb      	ldr	r3, [r7, #28]
 800459c:	08da      	lsrs	r2, r3, #3
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	3208      	adds	r2, #8
 80045a2:	69b9      	ldr	r1, [r7, #24]
 80045a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80045ae:	69fb      	ldr	r3, [r7, #28]
 80045b0:	005b      	lsls	r3, r3, #1
 80045b2:	2203      	movs	r2, #3
 80045b4:	fa02 f303 	lsl.w	r3, r2, r3
 80045b8:	43db      	mvns	r3, r3
 80045ba:	69ba      	ldr	r2, [r7, #24]
 80045bc:	4013      	ands	r3, r2
 80045be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80045c0:	683b      	ldr	r3, [r7, #0]
 80045c2:	685b      	ldr	r3, [r3, #4]
 80045c4:	f003 0203 	and.w	r2, r3, #3
 80045c8:	69fb      	ldr	r3, [r7, #28]
 80045ca:	005b      	lsls	r3, r3, #1
 80045cc:	fa02 f303 	lsl.w	r3, r2, r3
 80045d0:	69ba      	ldr	r2, [r7, #24]
 80045d2:	4313      	orrs	r3, r2
 80045d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	69ba      	ldr	r2, [r7, #24]
 80045da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80045dc:	683b      	ldr	r3, [r7, #0]
 80045de:	685b      	ldr	r3, [r3, #4]
 80045e0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	f000 80b4 	beq.w	8004752 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80045ea:	2300      	movs	r3, #0
 80045ec:	60fb      	str	r3, [r7, #12]
 80045ee:	4b60      	ldr	r3, [pc, #384]	@ (8004770 <HAL_GPIO_Init+0x30c>)
 80045f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045f2:	4a5f      	ldr	r2, [pc, #380]	@ (8004770 <HAL_GPIO_Init+0x30c>)
 80045f4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80045f8:	6453      	str	r3, [r2, #68]	@ 0x44
 80045fa:	4b5d      	ldr	r3, [pc, #372]	@ (8004770 <HAL_GPIO_Init+0x30c>)
 80045fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045fe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004602:	60fb      	str	r3, [r7, #12]
 8004604:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004606:	4a5b      	ldr	r2, [pc, #364]	@ (8004774 <HAL_GPIO_Init+0x310>)
 8004608:	69fb      	ldr	r3, [r7, #28]
 800460a:	089b      	lsrs	r3, r3, #2
 800460c:	3302      	adds	r3, #2
 800460e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004612:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004614:	69fb      	ldr	r3, [r7, #28]
 8004616:	f003 0303 	and.w	r3, r3, #3
 800461a:	009b      	lsls	r3, r3, #2
 800461c:	220f      	movs	r2, #15
 800461e:	fa02 f303 	lsl.w	r3, r2, r3
 8004622:	43db      	mvns	r3, r3
 8004624:	69ba      	ldr	r2, [r7, #24]
 8004626:	4013      	ands	r3, r2
 8004628:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	4a52      	ldr	r2, [pc, #328]	@ (8004778 <HAL_GPIO_Init+0x314>)
 800462e:	4293      	cmp	r3, r2
 8004630:	d02b      	beq.n	800468a <HAL_GPIO_Init+0x226>
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	4a51      	ldr	r2, [pc, #324]	@ (800477c <HAL_GPIO_Init+0x318>)
 8004636:	4293      	cmp	r3, r2
 8004638:	d025      	beq.n	8004686 <HAL_GPIO_Init+0x222>
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	4a50      	ldr	r2, [pc, #320]	@ (8004780 <HAL_GPIO_Init+0x31c>)
 800463e:	4293      	cmp	r3, r2
 8004640:	d01f      	beq.n	8004682 <HAL_GPIO_Init+0x21e>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	4a4f      	ldr	r2, [pc, #316]	@ (8004784 <HAL_GPIO_Init+0x320>)
 8004646:	4293      	cmp	r3, r2
 8004648:	d019      	beq.n	800467e <HAL_GPIO_Init+0x21a>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	4a4e      	ldr	r2, [pc, #312]	@ (8004788 <HAL_GPIO_Init+0x324>)
 800464e:	4293      	cmp	r3, r2
 8004650:	d013      	beq.n	800467a <HAL_GPIO_Init+0x216>
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	4a4d      	ldr	r2, [pc, #308]	@ (800478c <HAL_GPIO_Init+0x328>)
 8004656:	4293      	cmp	r3, r2
 8004658:	d00d      	beq.n	8004676 <HAL_GPIO_Init+0x212>
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	4a4c      	ldr	r2, [pc, #304]	@ (8004790 <HAL_GPIO_Init+0x32c>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d007      	beq.n	8004672 <HAL_GPIO_Init+0x20e>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	4a4b      	ldr	r2, [pc, #300]	@ (8004794 <HAL_GPIO_Init+0x330>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d101      	bne.n	800466e <HAL_GPIO_Init+0x20a>
 800466a:	2307      	movs	r3, #7
 800466c:	e00e      	b.n	800468c <HAL_GPIO_Init+0x228>
 800466e:	2308      	movs	r3, #8
 8004670:	e00c      	b.n	800468c <HAL_GPIO_Init+0x228>
 8004672:	2306      	movs	r3, #6
 8004674:	e00a      	b.n	800468c <HAL_GPIO_Init+0x228>
 8004676:	2305      	movs	r3, #5
 8004678:	e008      	b.n	800468c <HAL_GPIO_Init+0x228>
 800467a:	2304      	movs	r3, #4
 800467c:	e006      	b.n	800468c <HAL_GPIO_Init+0x228>
 800467e:	2303      	movs	r3, #3
 8004680:	e004      	b.n	800468c <HAL_GPIO_Init+0x228>
 8004682:	2302      	movs	r3, #2
 8004684:	e002      	b.n	800468c <HAL_GPIO_Init+0x228>
 8004686:	2301      	movs	r3, #1
 8004688:	e000      	b.n	800468c <HAL_GPIO_Init+0x228>
 800468a:	2300      	movs	r3, #0
 800468c:	69fa      	ldr	r2, [r7, #28]
 800468e:	f002 0203 	and.w	r2, r2, #3
 8004692:	0092      	lsls	r2, r2, #2
 8004694:	4093      	lsls	r3, r2
 8004696:	69ba      	ldr	r2, [r7, #24]
 8004698:	4313      	orrs	r3, r2
 800469a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800469c:	4935      	ldr	r1, [pc, #212]	@ (8004774 <HAL_GPIO_Init+0x310>)
 800469e:	69fb      	ldr	r3, [r7, #28]
 80046a0:	089b      	lsrs	r3, r3, #2
 80046a2:	3302      	adds	r3, #2
 80046a4:	69ba      	ldr	r2, [r7, #24]
 80046a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80046aa:	4b3b      	ldr	r3, [pc, #236]	@ (8004798 <HAL_GPIO_Init+0x334>)
 80046ac:	689b      	ldr	r3, [r3, #8]
 80046ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80046b0:	693b      	ldr	r3, [r7, #16]
 80046b2:	43db      	mvns	r3, r3
 80046b4:	69ba      	ldr	r2, [r7, #24]
 80046b6:	4013      	ands	r3, r2
 80046b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80046ba:	683b      	ldr	r3, [r7, #0]
 80046bc:	685b      	ldr	r3, [r3, #4]
 80046be:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80046c2:	2b00      	cmp	r3, #0
 80046c4:	d003      	beq.n	80046ce <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80046c6:	69ba      	ldr	r2, [r7, #24]
 80046c8:	693b      	ldr	r3, [r7, #16]
 80046ca:	4313      	orrs	r3, r2
 80046cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80046ce:	4a32      	ldr	r2, [pc, #200]	@ (8004798 <HAL_GPIO_Init+0x334>)
 80046d0:	69bb      	ldr	r3, [r7, #24]
 80046d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80046d4:	4b30      	ldr	r3, [pc, #192]	@ (8004798 <HAL_GPIO_Init+0x334>)
 80046d6:	68db      	ldr	r3, [r3, #12]
 80046d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80046da:	693b      	ldr	r3, [r7, #16]
 80046dc:	43db      	mvns	r3, r3
 80046de:	69ba      	ldr	r2, [r7, #24]
 80046e0:	4013      	ands	r3, r2
 80046e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	685b      	ldr	r3, [r3, #4]
 80046e8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	d003      	beq.n	80046f8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80046f0:	69ba      	ldr	r2, [r7, #24]
 80046f2:	693b      	ldr	r3, [r7, #16]
 80046f4:	4313      	orrs	r3, r2
 80046f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80046f8:	4a27      	ldr	r2, [pc, #156]	@ (8004798 <HAL_GPIO_Init+0x334>)
 80046fa:	69bb      	ldr	r3, [r7, #24]
 80046fc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80046fe:	4b26      	ldr	r3, [pc, #152]	@ (8004798 <HAL_GPIO_Init+0x334>)
 8004700:	685b      	ldr	r3, [r3, #4]
 8004702:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004704:	693b      	ldr	r3, [r7, #16]
 8004706:	43db      	mvns	r3, r3
 8004708:	69ba      	ldr	r2, [r7, #24]
 800470a:	4013      	ands	r3, r2
 800470c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800470e:	683b      	ldr	r3, [r7, #0]
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004716:	2b00      	cmp	r3, #0
 8004718:	d003      	beq.n	8004722 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800471a:	69ba      	ldr	r2, [r7, #24]
 800471c:	693b      	ldr	r3, [r7, #16]
 800471e:	4313      	orrs	r3, r2
 8004720:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004722:	4a1d      	ldr	r2, [pc, #116]	@ (8004798 <HAL_GPIO_Init+0x334>)
 8004724:	69bb      	ldr	r3, [r7, #24]
 8004726:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004728:	4b1b      	ldr	r3, [pc, #108]	@ (8004798 <HAL_GPIO_Init+0x334>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800472e:	693b      	ldr	r3, [r7, #16]
 8004730:	43db      	mvns	r3, r3
 8004732:	69ba      	ldr	r2, [r7, #24]
 8004734:	4013      	ands	r3, r2
 8004736:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004738:	683b      	ldr	r3, [r7, #0]
 800473a:	685b      	ldr	r3, [r3, #4]
 800473c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004740:	2b00      	cmp	r3, #0
 8004742:	d003      	beq.n	800474c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004744:	69ba      	ldr	r2, [r7, #24]
 8004746:	693b      	ldr	r3, [r7, #16]
 8004748:	4313      	orrs	r3, r2
 800474a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800474c:	4a12      	ldr	r2, [pc, #72]	@ (8004798 <HAL_GPIO_Init+0x334>)
 800474e:	69bb      	ldr	r3, [r7, #24]
 8004750:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004752:	69fb      	ldr	r3, [r7, #28]
 8004754:	3301      	adds	r3, #1
 8004756:	61fb      	str	r3, [r7, #28]
 8004758:	69fb      	ldr	r3, [r7, #28]
 800475a:	2b0f      	cmp	r3, #15
 800475c:	f67f ae90 	bls.w	8004480 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004760:	bf00      	nop
 8004762:	bf00      	nop
 8004764:	3724      	adds	r7, #36	@ 0x24
 8004766:	46bd      	mov	sp, r7
 8004768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476c:	4770      	bx	lr
 800476e:	bf00      	nop
 8004770:	40023800 	.word	0x40023800
 8004774:	40013800 	.word	0x40013800
 8004778:	40020000 	.word	0x40020000
 800477c:	40020400 	.word	0x40020400
 8004780:	40020800 	.word	0x40020800
 8004784:	40020c00 	.word	0x40020c00
 8004788:	40021000 	.word	0x40021000
 800478c:	40021400 	.word	0x40021400
 8004790:	40021800 	.word	0x40021800
 8004794:	40021c00 	.word	0x40021c00
 8004798:	40013c00 	.word	0x40013c00

0800479c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800479c:	b480      	push	{r7}
 800479e:	b085      	sub	sp, #20
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
 80047a4:	460b      	mov	r3, r1
 80047a6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	691a      	ldr	r2, [r3, #16]
 80047ac:	887b      	ldrh	r3, [r7, #2]
 80047ae:	4013      	ands	r3, r2
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d002      	beq.n	80047ba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80047b4:	2301      	movs	r3, #1
 80047b6:	73fb      	strb	r3, [r7, #15]
 80047b8:	e001      	b.n	80047be <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80047ba:	2300      	movs	r3, #0
 80047bc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80047be:	7bfb      	ldrb	r3, [r7, #15]
}
 80047c0:	4618      	mov	r0, r3
 80047c2:	3714      	adds	r7, #20
 80047c4:	46bd      	mov	sp, r7
 80047c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ca:	4770      	bx	lr

080047cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80047cc:	b480      	push	{r7}
 80047ce:	b083      	sub	sp, #12
 80047d0:	af00      	add	r7, sp, #0
 80047d2:	6078      	str	r0, [r7, #4]
 80047d4:	460b      	mov	r3, r1
 80047d6:	807b      	strh	r3, [r7, #2]
 80047d8:	4613      	mov	r3, r2
 80047da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80047dc:	787b      	ldrb	r3, [r7, #1]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d003      	beq.n	80047ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80047e2:	887a      	ldrh	r2, [r7, #2]
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80047e8:	e003      	b.n	80047f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80047ea:	887b      	ldrh	r3, [r7, #2]
 80047ec:	041a      	lsls	r2, r3, #16
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	619a      	str	r2, [r3, #24]
}
 80047f2:	bf00      	nop
 80047f4:	370c      	adds	r7, #12
 80047f6:	46bd      	mov	sp, r7
 80047f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fc:	4770      	bx	lr

080047fe <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80047fe:	b480      	push	{r7}
 8004800:	b085      	sub	sp, #20
 8004802:	af00      	add	r7, sp, #0
 8004804:	6078      	str	r0, [r7, #4]
 8004806:	460b      	mov	r3, r1
 8004808:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	695b      	ldr	r3, [r3, #20]
 800480e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004810:	887a      	ldrh	r2, [r7, #2]
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	4013      	ands	r3, r2
 8004816:	041a      	lsls	r2, r3, #16
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	43d9      	mvns	r1, r3
 800481c:	887b      	ldrh	r3, [r7, #2]
 800481e:	400b      	ands	r3, r1
 8004820:	431a      	orrs	r2, r3
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	619a      	str	r2, [r3, #24]
}
 8004826:	bf00      	nop
 8004828:	3714      	adds	r7, #20
 800482a:	46bd      	mov	sp, r7
 800482c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004830:	4770      	bx	lr
	...

08004834 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004834:	b580      	push	{r7, lr}
 8004836:	b084      	sub	sp, #16
 8004838:	af00      	add	r7, sp, #0
 800483a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2b00      	cmp	r3, #0
 8004840:	d101      	bne.n	8004846 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004842:	2301      	movs	r3, #1
 8004844:	e12b      	b.n	8004a9e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800484c:	b2db      	uxtb	r3, r3
 800484e:	2b00      	cmp	r3, #0
 8004850:	d106      	bne.n	8004860 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004852:	687b      	ldr	r3, [r7, #4]
 8004854:	2200      	movs	r2, #0
 8004856:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800485a:	6878      	ldr	r0, [r7, #4]
 800485c:	f7fe fb9e 	bl	8002f9c <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	2224      	movs	r2, #36	@ 0x24
 8004864:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	681a      	ldr	r2, [r3, #0]
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	f022 0201 	bic.w	r2, r2, #1
 8004876:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	681b      	ldr	r3, [r3, #0]
 800487c:	681a      	ldr	r2, [r3, #0]
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004886:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	681a      	ldr	r2, [r3, #0]
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004896:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004898:	f003 fd10 	bl	80082bc <HAL_RCC_GetPCLK1Freq>
 800489c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	685b      	ldr	r3, [r3, #4]
 80048a2:	4a81      	ldr	r2, [pc, #516]	@ (8004aa8 <HAL_I2C_Init+0x274>)
 80048a4:	4293      	cmp	r3, r2
 80048a6:	d807      	bhi.n	80048b8 <HAL_I2C_Init+0x84>
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	4a80      	ldr	r2, [pc, #512]	@ (8004aac <HAL_I2C_Init+0x278>)
 80048ac:	4293      	cmp	r3, r2
 80048ae:	bf94      	ite	ls
 80048b0:	2301      	movls	r3, #1
 80048b2:	2300      	movhi	r3, #0
 80048b4:	b2db      	uxtb	r3, r3
 80048b6:	e006      	b.n	80048c6 <HAL_I2C_Init+0x92>
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	4a7d      	ldr	r2, [pc, #500]	@ (8004ab0 <HAL_I2C_Init+0x27c>)
 80048bc:	4293      	cmp	r3, r2
 80048be:	bf94      	ite	ls
 80048c0:	2301      	movls	r3, #1
 80048c2:	2300      	movhi	r3, #0
 80048c4:	b2db      	uxtb	r3, r3
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d001      	beq.n	80048ce <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80048ca:	2301      	movs	r3, #1
 80048cc:	e0e7      	b.n	8004a9e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	4a78      	ldr	r2, [pc, #480]	@ (8004ab4 <HAL_I2C_Init+0x280>)
 80048d2:	fba2 2303 	umull	r2, r3, r2, r3
 80048d6:	0c9b      	lsrs	r3, r3, #18
 80048d8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	685b      	ldr	r3, [r3, #4]
 80048e0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	68ba      	ldr	r2, [r7, #8]
 80048ea:	430a      	orrs	r2, r1
 80048ec:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	681b      	ldr	r3, [r3, #0]
 80048f2:	6a1b      	ldr	r3, [r3, #32]
 80048f4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	685b      	ldr	r3, [r3, #4]
 80048fc:	4a6a      	ldr	r2, [pc, #424]	@ (8004aa8 <HAL_I2C_Init+0x274>)
 80048fe:	4293      	cmp	r3, r2
 8004900:	d802      	bhi.n	8004908 <HAL_I2C_Init+0xd4>
 8004902:	68bb      	ldr	r3, [r7, #8]
 8004904:	3301      	adds	r3, #1
 8004906:	e009      	b.n	800491c <HAL_I2C_Init+0xe8>
 8004908:	68bb      	ldr	r3, [r7, #8]
 800490a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800490e:	fb02 f303 	mul.w	r3, r2, r3
 8004912:	4a69      	ldr	r2, [pc, #420]	@ (8004ab8 <HAL_I2C_Init+0x284>)
 8004914:	fba2 2303 	umull	r2, r3, r2, r3
 8004918:	099b      	lsrs	r3, r3, #6
 800491a:	3301      	adds	r3, #1
 800491c:	687a      	ldr	r2, [r7, #4]
 800491e:	6812      	ldr	r2, [r2, #0]
 8004920:	430b      	orrs	r3, r1
 8004922:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	69db      	ldr	r3, [r3, #28]
 800492a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800492e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	495c      	ldr	r1, [pc, #368]	@ (8004aa8 <HAL_I2C_Init+0x274>)
 8004938:	428b      	cmp	r3, r1
 800493a:	d819      	bhi.n	8004970 <HAL_I2C_Init+0x13c>
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	1e59      	subs	r1, r3, #1
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	685b      	ldr	r3, [r3, #4]
 8004944:	005b      	lsls	r3, r3, #1
 8004946:	fbb1 f3f3 	udiv	r3, r1, r3
 800494a:	1c59      	adds	r1, r3, #1
 800494c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004950:	400b      	ands	r3, r1
 8004952:	2b00      	cmp	r3, #0
 8004954:	d00a      	beq.n	800496c <HAL_I2C_Init+0x138>
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	1e59      	subs	r1, r3, #1
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	685b      	ldr	r3, [r3, #4]
 800495e:	005b      	lsls	r3, r3, #1
 8004960:	fbb1 f3f3 	udiv	r3, r1, r3
 8004964:	3301      	adds	r3, #1
 8004966:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800496a:	e051      	b.n	8004a10 <HAL_I2C_Init+0x1dc>
 800496c:	2304      	movs	r3, #4
 800496e:	e04f      	b.n	8004a10 <HAL_I2C_Init+0x1dc>
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	689b      	ldr	r3, [r3, #8]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d111      	bne.n	800499c <HAL_I2C_Init+0x168>
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	1e58      	subs	r0, r3, #1
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6859      	ldr	r1, [r3, #4]
 8004980:	460b      	mov	r3, r1
 8004982:	005b      	lsls	r3, r3, #1
 8004984:	440b      	add	r3, r1
 8004986:	fbb0 f3f3 	udiv	r3, r0, r3
 800498a:	3301      	adds	r3, #1
 800498c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004990:	2b00      	cmp	r3, #0
 8004992:	bf0c      	ite	eq
 8004994:	2301      	moveq	r3, #1
 8004996:	2300      	movne	r3, #0
 8004998:	b2db      	uxtb	r3, r3
 800499a:	e012      	b.n	80049c2 <HAL_I2C_Init+0x18e>
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	1e58      	subs	r0, r3, #1
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6859      	ldr	r1, [r3, #4]
 80049a4:	460b      	mov	r3, r1
 80049a6:	009b      	lsls	r3, r3, #2
 80049a8:	440b      	add	r3, r1
 80049aa:	0099      	lsls	r1, r3, #2
 80049ac:	440b      	add	r3, r1
 80049ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80049b2:	3301      	adds	r3, #1
 80049b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	bf0c      	ite	eq
 80049bc:	2301      	moveq	r3, #1
 80049be:	2300      	movne	r3, #0
 80049c0:	b2db      	uxtb	r3, r3
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d001      	beq.n	80049ca <HAL_I2C_Init+0x196>
 80049c6:	2301      	movs	r3, #1
 80049c8:	e022      	b.n	8004a10 <HAL_I2C_Init+0x1dc>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	689b      	ldr	r3, [r3, #8]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d10e      	bne.n	80049f0 <HAL_I2C_Init+0x1bc>
 80049d2:	68fb      	ldr	r3, [r7, #12]
 80049d4:	1e58      	subs	r0, r3, #1
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6859      	ldr	r1, [r3, #4]
 80049da:	460b      	mov	r3, r1
 80049dc:	005b      	lsls	r3, r3, #1
 80049de:	440b      	add	r3, r1
 80049e0:	fbb0 f3f3 	udiv	r3, r0, r3
 80049e4:	3301      	adds	r3, #1
 80049e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80049ea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80049ee:	e00f      	b.n	8004a10 <HAL_I2C_Init+0x1dc>
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	1e58      	subs	r0, r3, #1
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6859      	ldr	r1, [r3, #4]
 80049f8:	460b      	mov	r3, r1
 80049fa:	009b      	lsls	r3, r3, #2
 80049fc:	440b      	add	r3, r1
 80049fe:	0099      	lsls	r1, r3, #2
 8004a00:	440b      	add	r3, r1
 8004a02:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a06:	3301      	adds	r3, #1
 8004a08:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a0c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004a10:	6879      	ldr	r1, [r7, #4]
 8004a12:	6809      	ldr	r1, [r1, #0]
 8004a14:	4313      	orrs	r3, r2
 8004a16:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	69da      	ldr	r2, [r3, #28]
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6a1b      	ldr	r3, [r3, #32]
 8004a2a:	431a      	orrs	r2, r3
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	430a      	orrs	r2, r1
 8004a32:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	689b      	ldr	r3, [r3, #8]
 8004a3a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004a3e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004a42:	687a      	ldr	r2, [r7, #4]
 8004a44:	6911      	ldr	r1, [r2, #16]
 8004a46:	687a      	ldr	r2, [r7, #4]
 8004a48:	68d2      	ldr	r2, [r2, #12]
 8004a4a:	4311      	orrs	r1, r2
 8004a4c:	687a      	ldr	r2, [r7, #4]
 8004a4e:	6812      	ldr	r2, [r2, #0]
 8004a50:	430b      	orrs	r3, r1
 8004a52:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	68db      	ldr	r3, [r3, #12]
 8004a5a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	695a      	ldr	r2, [r3, #20]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	699b      	ldr	r3, [r3, #24]
 8004a66:	431a      	orrs	r2, r3
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	430a      	orrs	r2, r1
 8004a6e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	681a      	ldr	r2, [r3, #0]
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	f042 0201 	orr.w	r2, r2, #1
 8004a7e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	2200      	movs	r2, #0
 8004a84:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	2220      	movs	r2, #32
 8004a8a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	2200      	movs	r2, #0
 8004a92:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	2200      	movs	r2, #0
 8004a98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004a9c:	2300      	movs	r3, #0
}
 8004a9e:	4618      	mov	r0, r3
 8004aa0:	3710      	adds	r7, #16
 8004aa2:	46bd      	mov	sp, r7
 8004aa4:	bd80      	pop	{r7, pc}
 8004aa6:	bf00      	nop
 8004aa8:	000186a0 	.word	0x000186a0
 8004aac:	001e847f 	.word	0x001e847f
 8004ab0:	003d08ff 	.word	0x003d08ff
 8004ab4:	431bde83 	.word	0x431bde83
 8004ab8:	10624dd3 	.word	0x10624dd3

08004abc <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8004abc:	b480      	push	{r7}
 8004abe:	b083      	sub	sp, #12
 8004ac0:	af00      	add	r7, sp, #0
 8004ac2:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8004ac4:	687b      	ldr	r3, [r7, #4]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	695b      	ldr	r3, [r3, #20]
 8004aca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004ace:	2b80      	cmp	r3, #128	@ 0x80
 8004ad0:	d103      	bne.n	8004ada <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	681b      	ldr	r3, [r3, #0]
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	611a      	str	r2, [r3, #16]
  }
}
 8004ada:	bf00      	nop
 8004adc:	370c      	adds	r7, #12
 8004ade:	46bd      	mov	sp, r7
 8004ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ae4:	4770      	bx	lr
	...

08004ae8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ae8:	b580      	push	{r7, lr}
 8004aea:	b088      	sub	sp, #32
 8004aec:	af02      	add	r7, sp, #8
 8004aee:	60f8      	str	r0, [r7, #12]
 8004af0:	4608      	mov	r0, r1
 8004af2:	4611      	mov	r1, r2
 8004af4:	461a      	mov	r2, r3
 8004af6:	4603      	mov	r3, r0
 8004af8:	817b      	strh	r3, [r7, #10]
 8004afa:	460b      	mov	r3, r1
 8004afc:	813b      	strh	r3, [r7, #8]
 8004afe:	4613      	mov	r3, r2
 8004b00:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004b02:	f7fe fff1 	bl	8003ae8 <HAL_GetTick>
 8004b06:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004b0e:	b2db      	uxtb	r3, r3
 8004b10:	2b20      	cmp	r3, #32
 8004b12:	f040 80d9 	bne.w	8004cc8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004b16:	697b      	ldr	r3, [r7, #20]
 8004b18:	9300      	str	r3, [sp, #0]
 8004b1a:	2319      	movs	r3, #25
 8004b1c:	2201      	movs	r2, #1
 8004b1e:	496d      	ldr	r1, [pc, #436]	@ (8004cd4 <HAL_I2C_Mem_Write+0x1ec>)
 8004b20:	68f8      	ldr	r0, [r7, #12]
 8004b22:	f002 fcd7 	bl	80074d4 <I2C_WaitOnFlagUntilTimeout>
 8004b26:	4603      	mov	r3, r0
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d001      	beq.n	8004b30 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004b2c:	2302      	movs	r3, #2
 8004b2e:	e0cc      	b.n	8004cca <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004b36:	2b01      	cmp	r3, #1
 8004b38:	d101      	bne.n	8004b3e <HAL_I2C_Mem_Write+0x56>
 8004b3a:	2302      	movs	r3, #2
 8004b3c:	e0c5      	b.n	8004cca <HAL_I2C_Mem_Write+0x1e2>
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	2201      	movs	r2, #1
 8004b42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f003 0301 	and.w	r3, r3, #1
 8004b50:	2b01      	cmp	r3, #1
 8004b52:	d007      	beq.n	8004b64 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	681a      	ldr	r2, [r3, #0]
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f042 0201 	orr.w	r2, r2, #1
 8004b62:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	681a      	ldr	r2, [r3, #0]
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004b72:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004b74:	68fb      	ldr	r3, [r7, #12]
 8004b76:	2221      	movs	r2, #33	@ 0x21
 8004b78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004b7c:	68fb      	ldr	r3, [r7, #12]
 8004b7e:	2240      	movs	r2, #64	@ 0x40
 8004b80:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	2200      	movs	r2, #0
 8004b88:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	6a3a      	ldr	r2, [r7, #32]
 8004b8e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004b94:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004b9a:	b29a      	uxth	r2, r3
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	4a4d      	ldr	r2, [pc, #308]	@ (8004cd8 <HAL_I2C_Mem_Write+0x1f0>)
 8004ba4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004ba6:	88f8      	ldrh	r0, [r7, #6]
 8004ba8:	893a      	ldrh	r2, [r7, #8]
 8004baa:	8979      	ldrh	r1, [r7, #10]
 8004bac:	697b      	ldr	r3, [r7, #20]
 8004bae:	9301      	str	r3, [sp, #4]
 8004bb0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bb2:	9300      	str	r3, [sp, #0]
 8004bb4:	4603      	mov	r3, r0
 8004bb6:	68f8      	ldr	r0, [r7, #12]
 8004bb8:	f002 f94a 	bl	8006e50 <I2C_RequestMemoryWrite>
 8004bbc:	4603      	mov	r3, r0
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d052      	beq.n	8004c68 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004bc2:	2301      	movs	r3, #1
 8004bc4:	e081      	b.n	8004cca <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004bc6:	697a      	ldr	r2, [r7, #20]
 8004bc8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004bca:	68f8      	ldr	r0, [r7, #12]
 8004bcc:	f002 fd9c 	bl	8007708 <I2C_WaitOnTXEFlagUntilTimeout>
 8004bd0:	4603      	mov	r3, r0
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d00d      	beq.n	8004bf2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bda:	2b04      	cmp	r3, #4
 8004bdc:	d107      	bne.n	8004bee <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	681a      	ldr	r2, [r3, #0]
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004bec:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004bee:	2301      	movs	r3, #1
 8004bf0:	e06b      	b.n	8004cca <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bf6:	781a      	ldrb	r2, [r3, #0]
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c02:	1c5a      	adds	r2, r3, #1
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c0c:	3b01      	subs	r3, #1
 8004c0e:	b29a      	uxth	r2, r3
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c18:	b29b      	uxth	r3, r3
 8004c1a:	3b01      	subs	r3, #1
 8004c1c:	b29a      	uxth	r2, r3
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	695b      	ldr	r3, [r3, #20]
 8004c28:	f003 0304 	and.w	r3, r3, #4
 8004c2c:	2b04      	cmp	r3, #4
 8004c2e:	d11b      	bne.n	8004c68 <HAL_I2C_Mem_Write+0x180>
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c34:	2b00      	cmp	r3, #0
 8004c36:	d017      	beq.n	8004c68 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004c38:	68fb      	ldr	r3, [r7, #12]
 8004c3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c3c:	781a      	ldrb	r2, [r3, #0]
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c48:	1c5a      	adds	r2, r3, #1
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c52:	3b01      	subs	r3, #1
 8004c54:	b29a      	uxth	r2, r3
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004c5e:	b29b      	uxth	r3, r3
 8004c60:	3b01      	subs	r3, #1
 8004c62:	b29a      	uxth	r2, r3
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d1aa      	bne.n	8004bc6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c70:	697a      	ldr	r2, [r7, #20]
 8004c72:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004c74:	68f8      	ldr	r0, [r7, #12]
 8004c76:	f002 fd8f 	bl	8007798 <I2C_WaitOnBTFFlagUntilTimeout>
 8004c7a:	4603      	mov	r3, r0
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d00d      	beq.n	8004c9c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c84:	2b04      	cmp	r3, #4
 8004c86:	d107      	bne.n	8004c98 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	681a      	ldr	r2, [r3, #0]
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004c96:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004c98:	2301      	movs	r3, #1
 8004c9a:	e016      	b.n	8004cca <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	681a      	ldr	r2, [r3, #0]
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004caa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	2220      	movs	r2, #32
 8004cb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004cc4:	2300      	movs	r3, #0
 8004cc6:	e000      	b.n	8004cca <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004cc8:	2302      	movs	r3, #2
  }
}
 8004cca:	4618      	mov	r0, r3
 8004ccc:	3718      	adds	r7, #24
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	bd80      	pop	{r7, pc}
 8004cd2:	bf00      	nop
 8004cd4:	00100002 	.word	0x00100002
 8004cd8:	ffff0000 	.word	0xffff0000

08004cdc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004cdc:	b580      	push	{r7, lr}
 8004cde:	b08c      	sub	sp, #48	@ 0x30
 8004ce0:	af02      	add	r7, sp, #8
 8004ce2:	60f8      	str	r0, [r7, #12]
 8004ce4:	4608      	mov	r0, r1
 8004ce6:	4611      	mov	r1, r2
 8004ce8:	461a      	mov	r2, r3
 8004cea:	4603      	mov	r3, r0
 8004cec:	817b      	strh	r3, [r7, #10]
 8004cee:	460b      	mov	r3, r1
 8004cf0:	813b      	strh	r3, [r7, #8]
 8004cf2:	4613      	mov	r3, r2
 8004cf4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004cf6:	f7fe fef7 	bl	8003ae8 <HAL_GetTick>
 8004cfa:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004cfc:	68fb      	ldr	r3, [r7, #12]
 8004cfe:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d02:	b2db      	uxtb	r3, r3
 8004d04:	2b20      	cmp	r3, #32
 8004d06:	f040 8214 	bne.w	8005132 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004d0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d0c:	9300      	str	r3, [sp, #0]
 8004d0e:	2319      	movs	r3, #25
 8004d10:	2201      	movs	r2, #1
 8004d12:	497b      	ldr	r1, [pc, #492]	@ (8004f00 <HAL_I2C_Mem_Read+0x224>)
 8004d14:	68f8      	ldr	r0, [r7, #12]
 8004d16:	f002 fbdd 	bl	80074d4 <I2C_WaitOnFlagUntilTimeout>
 8004d1a:	4603      	mov	r3, r0
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d001      	beq.n	8004d24 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004d20:	2302      	movs	r3, #2
 8004d22:	e207      	b.n	8005134 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004d2a:	2b01      	cmp	r3, #1
 8004d2c:	d101      	bne.n	8004d32 <HAL_I2C_Mem_Read+0x56>
 8004d2e:	2302      	movs	r3, #2
 8004d30:	e200      	b.n	8005134 <HAL_I2C_Mem_Read+0x458>
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	2201      	movs	r2, #1
 8004d36:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	f003 0301 	and.w	r3, r3, #1
 8004d44:	2b01      	cmp	r3, #1
 8004d46:	d007      	beq.n	8004d58 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	681b      	ldr	r3, [r3, #0]
 8004d4c:	681a      	ldr	r2, [r3, #0]
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	f042 0201 	orr.w	r2, r2, #1
 8004d56:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	681a      	ldr	r2, [r3, #0]
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	681b      	ldr	r3, [r3, #0]
 8004d62:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004d66:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	2222      	movs	r2, #34	@ 0x22
 8004d6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	2240      	movs	r2, #64	@ 0x40
 8004d74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	2200      	movs	r2, #0
 8004d7c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004d82:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8004d88:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d8e:	b29a      	uxth	r2, r3
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	4a5b      	ldr	r2, [pc, #364]	@ (8004f04 <HAL_I2C_Mem_Read+0x228>)
 8004d98:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004d9a:	88f8      	ldrh	r0, [r7, #6]
 8004d9c:	893a      	ldrh	r2, [r7, #8]
 8004d9e:	8979      	ldrh	r1, [r7, #10]
 8004da0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004da2:	9301      	str	r3, [sp, #4]
 8004da4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004da6:	9300      	str	r3, [sp, #0]
 8004da8:	4603      	mov	r3, r0
 8004daa:	68f8      	ldr	r0, [r7, #12]
 8004dac:	f002 f8e6 	bl	8006f7c <I2C_RequestMemoryRead>
 8004db0:	4603      	mov	r3, r0
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d001      	beq.n	8004dba <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004db6:	2301      	movs	r3, #1
 8004db8:	e1bc      	b.n	8005134 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004dbe:	2b00      	cmp	r3, #0
 8004dc0:	d113      	bne.n	8004dea <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004dc2:	2300      	movs	r3, #0
 8004dc4:	623b      	str	r3, [r7, #32]
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	681b      	ldr	r3, [r3, #0]
 8004dca:	695b      	ldr	r3, [r3, #20]
 8004dcc:	623b      	str	r3, [r7, #32]
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	699b      	ldr	r3, [r3, #24]
 8004dd4:	623b      	str	r3, [r7, #32]
 8004dd6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	681a      	ldr	r2, [r3, #0]
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004de6:	601a      	str	r2, [r3, #0]
 8004de8:	e190      	b.n	800510c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8004dea:	68fb      	ldr	r3, [r7, #12]
 8004dec:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004dee:	2b01      	cmp	r3, #1
 8004df0:	d11b      	bne.n	8004e2a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	681a      	ldr	r2, [r3, #0]
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004e00:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e02:	2300      	movs	r3, #0
 8004e04:	61fb      	str	r3, [r7, #28]
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	695b      	ldr	r3, [r3, #20]
 8004e0c:	61fb      	str	r3, [r7, #28]
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	699b      	ldr	r3, [r3, #24]
 8004e14:	61fb      	str	r3, [r7, #28]
 8004e16:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	681a      	ldr	r2, [r3, #0]
 8004e1e:	68fb      	ldr	r3, [r7, #12]
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004e26:	601a      	str	r2, [r3, #0]
 8004e28:	e170      	b.n	800510c <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e2e:	2b02      	cmp	r3, #2
 8004e30:	d11b      	bne.n	8004e6a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e32:	68fb      	ldr	r3, [r7, #12]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	681a      	ldr	r2, [r3, #0]
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	681b      	ldr	r3, [r3, #0]
 8004e3c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004e40:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004e42:	68fb      	ldr	r3, [r7, #12]
 8004e44:	681b      	ldr	r3, [r3, #0]
 8004e46:	681a      	ldr	r2, [r3, #0]
 8004e48:	68fb      	ldr	r3, [r7, #12]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004e50:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e52:	2300      	movs	r3, #0
 8004e54:	61bb      	str	r3, [r7, #24]
 8004e56:	68fb      	ldr	r3, [r7, #12]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	695b      	ldr	r3, [r3, #20]
 8004e5c:	61bb      	str	r3, [r7, #24]
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	699b      	ldr	r3, [r3, #24]
 8004e64:	61bb      	str	r3, [r7, #24]
 8004e66:	69bb      	ldr	r3, [r7, #24]
 8004e68:	e150      	b.n	800510c <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	617b      	str	r3, [r7, #20]
 8004e6e:	68fb      	ldr	r3, [r7, #12]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	695b      	ldr	r3, [r3, #20]
 8004e74:	617b      	str	r3, [r7, #20]
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	699b      	ldr	r3, [r3, #24]
 8004e7c:	617b      	str	r3, [r7, #20]
 8004e7e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004e80:	e144      	b.n	800510c <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e86:	2b03      	cmp	r3, #3
 8004e88:	f200 80f1 	bhi.w	800506e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004e90:	2b01      	cmp	r3, #1
 8004e92:	d123      	bne.n	8004edc <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004e94:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004e96:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004e98:	68f8      	ldr	r0, [r7, #12]
 8004e9a:	f002 fcf7 	bl	800788c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004e9e:	4603      	mov	r3, r0
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d001      	beq.n	8004ea8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004ea4:	2301      	movs	r3, #1
 8004ea6:	e145      	b.n	8005134 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	691a      	ldr	r2, [r3, #16]
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004eb2:	b2d2      	uxtb	r2, r2
 8004eb4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004eba:	1c5a      	adds	r2, r3, #1
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ec4:	3b01      	subs	r3, #1
 8004ec6:	b29a      	uxth	r2, r3
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004ecc:	68fb      	ldr	r3, [r7, #12]
 8004ece:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ed0:	b29b      	uxth	r3, r3
 8004ed2:	3b01      	subs	r3, #1
 8004ed4:	b29a      	uxth	r2, r3
 8004ed6:	68fb      	ldr	r3, [r7, #12]
 8004ed8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004eda:	e117      	b.n	800510c <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004ee0:	2b02      	cmp	r3, #2
 8004ee2:	d14e      	bne.n	8004f82 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004ee4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ee6:	9300      	str	r3, [sp, #0]
 8004ee8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004eea:	2200      	movs	r2, #0
 8004eec:	4906      	ldr	r1, [pc, #24]	@ (8004f08 <HAL_I2C_Mem_Read+0x22c>)
 8004eee:	68f8      	ldr	r0, [r7, #12]
 8004ef0:	f002 faf0 	bl	80074d4 <I2C_WaitOnFlagUntilTimeout>
 8004ef4:	4603      	mov	r3, r0
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d008      	beq.n	8004f0c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004efa:	2301      	movs	r3, #1
 8004efc:	e11a      	b.n	8005134 <HAL_I2C_Mem_Read+0x458>
 8004efe:	bf00      	nop
 8004f00:	00100002 	.word	0x00100002
 8004f04:	ffff0000 	.word	0xffff0000
 8004f08:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	681a      	ldr	r2, [r3, #0]
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004f1a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	691a      	ldr	r2, [r3, #16]
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f26:	b2d2      	uxtb	r2, r2
 8004f28:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f2e:	1c5a      	adds	r2, r3, #1
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f38:	3b01      	subs	r3, #1
 8004f3a:	b29a      	uxth	r2, r3
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f44:	b29b      	uxth	r3, r3
 8004f46:	3b01      	subs	r3, #1
 8004f48:	b29a      	uxth	r2, r3
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	691a      	ldr	r2, [r3, #16]
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f58:	b2d2      	uxtb	r2, r2
 8004f5a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004f60:	1c5a      	adds	r2, r3, #1
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f6a:	3b01      	subs	r3, #1
 8004f6c:	b29a      	uxth	r2, r3
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004f76:	b29b      	uxth	r3, r3
 8004f78:	3b01      	subs	r3, #1
 8004f7a:	b29a      	uxth	r2, r3
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004f80:	e0c4      	b.n	800510c <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004f82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f84:	9300      	str	r3, [sp, #0]
 8004f86:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004f88:	2200      	movs	r2, #0
 8004f8a:	496c      	ldr	r1, [pc, #432]	@ (800513c <HAL_I2C_Mem_Read+0x460>)
 8004f8c:	68f8      	ldr	r0, [r7, #12]
 8004f8e:	f002 faa1 	bl	80074d4 <I2C_WaitOnFlagUntilTimeout>
 8004f92:	4603      	mov	r3, r0
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d001      	beq.n	8004f9c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8004f98:	2301      	movs	r3, #1
 8004f9a:	e0cb      	b.n	8005134 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f9c:	68fb      	ldr	r3, [r7, #12]
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	681a      	ldr	r2, [r3, #0]
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004faa:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fac:	68fb      	ldr	r3, [r7, #12]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	691a      	ldr	r2, [r3, #16]
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fb6:	b2d2      	uxtb	r2, r2
 8004fb8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fbe:	1c5a      	adds	r2, r3, #1
 8004fc0:	68fb      	ldr	r3, [r7, #12]
 8004fc2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004fc8:	3b01      	subs	r3, #1
 8004fca:	b29a      	uxth	r2, r3
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004fd4:	b29b      	uxth	r3, r3
 8004fd6:	3b01      	subs	r3, #1
 8004fd8:	b29a      	uxth	r2, r3
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004fde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004fe0:	9300      	str	r3, [sp, #0]
 8004fe2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	4955      	ldr	r1, [pc, #340]	@ (800513c <HAL_I2C_Mem_Read+0x460>)
 8004fe8:	68f8      	ldr	r0, [r7, #12]
 8004fea:	f002 fa73 	bl	80074d4 <I2C_WaitOnFlagUntilTimeout>
 8004fee:	4603      	mov	r3, r0
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d001      	beq.n	8004ff8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	e09d      	b.n	8005134 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	681a      	ldr	r2, [r3, #0]
 8004ffe:	68fb      	ldr	r3, [r7, #12]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005006:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	691a      	ldr	r2, [r3, #16]
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005012:	b2d2      	uxtb	r2, r2
 8005014:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800501a:	1c5a      	adds	r2, r3, #1
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005024:	3b01      	subs	r3, #1
 8005026:	b29a      	uxth	r2, r3
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005030:	b29b      	uxth	r3, r3
 8005032:	3b01      	subs	r3, #1
 8005034:	b29a      	uxth	r2, r3
 8005036:	68fb      	ldr	r3, [r7, #12]
 8005038:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800503a:	68fb      	ldr	r3, [r7, #12]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	691a      	ldr	r2, [r3, #16]
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005044:	b2d2      	uxtb	r2, r2
 8005046:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800504c:	1c5a      	adds	r2, r3, #1
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005056:	3b01      	subs	r3, #1
 8005058:	b29a      	uxth	r2, r3
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005062:	b29b      	uxth	r3, r3
 8005064:	3b01      	subs	r3, #1
 8005066:	b29a      	uxth	r2, r3
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800506c:	e04e      	b.n	800510c <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800506e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005070:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005072:	68f8      	ldr	r0, [r7, #12]
 8005074:	f002 fc0a 	bl	800788c <I2C_WaitOnRXNEFlagUntilTimeout>
 8005078:	4603      	mov	r3, r0
 800507a:	2b00      	cmp	r3, #0
 800507c:	d001      	beq.n	8005082 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800507e:	2301      	movs	r3, #1
 8005080:	e058      	b.n	8005134 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	691a      	ldr	r2, [r3, #16]
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800508c:	b2d2      	uxtb	r2, r2
 800508e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005094:	1c5a      	adds	r2, r3, #1
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800509e:	3b01      	subs	r3, #1
 80050a0:	b29a      	uxth	r2, r3
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050aa:	b29b      	uxth	r3, r3
 80050ac:	3b01      	subs	r3, #1
 80050ae:	b29a      	uxth	r2, r3
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	695b      	ldr	r3, [r3, #20]
 80050ba:	f003 0304 	and.w	r3, r3, #4
 80050be:	2b04      	cmp	r3, #4
 80050c0:	d124      	bne.n	800510c <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80050c6:	2b03      	cmp	r3, #3
 80050c8:	d107      	bne.n	80050da <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	681a      	ldr	r2, [r3, #0]
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80050d8:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	691a      	ldr	r2, [r3, #16]
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050e4:	b2d2      	uxtb	r2, r2
 80050e6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050ec:	1c5a      	adds	r2, r3, #1
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80050f6:	3b01      	subs	r3, #1
 80050f8:	b29a      	uxth	r2, r3
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005102:	b29b      	uxth	r3, r3
 8005104:	3b01      	subs	r3, #1
 8005106:	b29a      	uxth	r2, r3
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005110:	2b00      	cmp	r3, #0
 8005112:	f47f aeb6 	bne.w	8004e82 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	2220      	movs	r2, #32
 800511a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	2200      	movs	r2, #0
 8005122:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	2200      	movs	r2, #0
 800512a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800512e:	2300      	movs	r3, #0
 8005130:	e000      	b.n	8005134 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8005132:	2302      	movs	r3, #2
  }
}
 8005134:	4618      	mov	r0, r3
 8005136:	3728      	adds	r7, #40	@ 0x28
 8005138:	46bd      	mov	sp, r7
 800513a:	bd80      	pop	{r7, pc}
 800513c:	00010004 	.word	0x00010004

08005140 <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8005140:	b580      	push	{r7, lr}
 8005142:	b08c      	sub	sp, #48	@ 0x30
 8005144:	af02      	add	r7, sp, #8
 8005146:	60f8      	str	r0, [r7, #12]
 8005148:	4608      	mov	r0, r1
 800514a:	4611      	mov	r1, r2
 800514c:	461a      	mov	r2, r3
 800514e:	4603      	mov	r3, r0
 8005150:	817b      	strh	r3, [r7, #10]
 8005152:	460b      	mov	r3, r1
 8005154:	813b      	strh	r3, [r7, #8]
 8005156:	4613      	mov	r3, r2
 8005158:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800515a:	f7fe fcc5 	bl	8003ae8 <HAL_GetTick>
 800515e:	6278      	str	r0, [r7, #36]	@ 0x24
  __IO uint32_t count = 0U;
 8005160:	2300      	movs	r3, #0
 8005162:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800516a:	b2db      	uxtb	r3, r3
 800516c:	2b20      	cmp	r3, #32
 800516e:	f040 8172 	bne.w	8005456 <HAL_I2C_Mem_Read_DMA+0x316>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8005172:	4b93      	ldr	r3, [pc, #588]	@ (80053c0 <HAL_I2C_Mem_Read_DMA+0x280>)
 8005174:	681b      	ldr	r3, [r3, #0]
 8005176:	08db      	lsrs	r3, r3, #3
 8005178:	4a92      	ldr	r2, [pc, #584]	@ (80053c4 <HAL_I2C_Mem_Read_DMA+0x284>)
 800517a:	fba2 2303 	umull	r2, r3, r2, r3
 800517e:	0a1a      	lsrs	r2, r3, #8
 8005180:	4613      	mov	r3, r2
 8005182:	009b      	lsls	r3, r3, #2
 8005184:	4413      	add	r3, r2
 8005186:	009a      	lsls	r2, r3, #2
 8005188:	4413      	add	r3, r2
 800518a:	61fb      	str	r3, [r7, #28]
    do
    {
      count--;
 800518c:	69fb      	ldr	r3, [r7, #28]
 800518e:	3b01      	subs	r3, #1
 8005190:	61fb      	str	r3, [r7, #28]
      if (count == 0U)
 8005192:	69fb      	ldr	r3, [r7, #28]
 8005194:	2b00      	cmp	r3, #0
 8005196:	d112      	bne.n	80051be <HAL_I2C_Mem_Read_DMA+0x7e>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	2200      	movs	r2, #0
 800519c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	2220      	movs	r2, #32
 80051a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80051a6:	68fb      	ldr	r3, [r7, #12]
 80051a8:	2200      	movs	r2, #0
 80051aa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80051ae:	68fb      	ldr	r3, [r7, #12]
 80051b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80051b2:	f043 0220 	orr.w	r2, r3, #32
 80051b6:	68fb      	ldr	r3, [r7, #12]
 80051b8:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 80051ba:	2302      	movs	r3, #2
 80051bc:	e14c      	b.n	8005458 <HAL_I2C_Mem_Read_DMA+0x318>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80051be:	68fb      	ldr	r3, [r7, #12]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	699b      	ldr	r3, [r3, #24]
 80051c4:	f003 0302 	and.w	r3, r3, #2
 80051c8:	2b02      	cmp	r3, #2
 80051ca:	d0df      	beq.n	800518c <HAL_I2C_Mem_Read_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80051d2:	2b01      	cmp	r3, #1
 80051d4:	d101      	bne.n	80051da <HAL_I2C_Mem_Read_DMA+0x9a>
 80051d6:	2302      	movs	r3, #2
 80051d8:	e13e      	b.n	8005458 <HAL_I2C_Mem_Read_DMA+0x318>
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	2201      	movs	r2, #1
 80051de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80051e2:	68fb      	ldr	r3, [r7, #12]
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	f003 0301 	and.w	r3, r3, #1
 80051ec:	2b01      	cmp	r3, #1
 80051ee:	d007      	beq.n	8005200 <HAL_I2C_Mem_Read_DMA+0xc0>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80051f0:	68fb      	ldr	r3, [r7, #12]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	681a      	ldr	r2, [r3, #0]
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f042 0201 	orr.w	r2, r2, #1
 80051fe:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	681a      	ldr	r2, [r3, #0]
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800520e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005210:	68fb      	ldr	r3, [r7, #12]
 8005212:	2222      	movs	r2, #34	@ 0x22
 8005214:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	2240      	movs	r2, #64	@ 0x40
 800521c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	2200      	movs	r2, #0
 8005224:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800522a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8005230:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005236:	b29a      	uxth	r2, r3
 8005238:	68fb      	ldr	r3, [r7, #12]
 800523a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	4a62      	ldr	r2, [pc, #392]	@ (80053c8 <HAL_I2C_Mem_Read_DMA+0x288>)
 8005240:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 8005242:	897a      	ldrh	r2, [r7, #10]
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->Memaddress  = MemAddress;
 8005248:	893a      	ldrh	r2, [r7, #8]
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	649a      	str	r2, [r3, #72]	@ 0x48
    hi2c->MemaddSize  = MemAddSize;
 800524e:	88fa      	ldrh	r2, [r7, #6]
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	64da      	str	r2, [r3, #76]	@ 0x4c
    hi2c->EventCount  = 0U;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	2200      	movs	r2, #0
 8005258:	651a      	str	r2, [r3, #80]	@ 0x50

    if (hi2c->XferSize > 0U)
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800525e:	2b00      	cmp	r3, #0
 8005260:	f000 80cc 	beq.w	80053fc <HAL_I2C_Mem_Read_DMA+0x2bc>
    {
      if (hi2c->hdmarx != NULL)
 8005264:	68fb      	ldr	r3, [r7, #12]
 8005266:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005268:	2b00      	cmp	r3, #0
 800526a:	d02d      	beq.n	80052c8 <HAL_I2C_Mem_Read_DMA+0x188>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005270:	4a56      	ldr	r2, [pc, #344]	@ (80053cc <HAL_I2C_Mem_Read_DMA+0x28c>)
 8005272:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005278:	4a55      	ldr	r2, [pc, #340]	@ (80053d0 <HAL_I2C_Mem_Read_DMA+0x290>)
 800527a:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005280:	2200      	movs	r2, #0
 8005282:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmarx->XferM1CpltCallback = NULL;
 8005284:	68fb      	ldr	r3, [r7, #12]
 8005286:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005288:	2200      	movs	r2, #0
 800528a:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 800528c:	68fb      	ldr	r3, [r7, #12]
 800528e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005290:	2200      	movs	r2, #0
 8005292:	649a      	str	r2, [r3, #72]	@ 0x48
        hi2c->hdmarx->XferAbortCallback = NULL;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005298:	2200      	movs	r2, #0
 800529a:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	3310      	adds	r3, #16
 80052a6:	4619      	mov	r1, r3
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052ac:	461a      	mov	r2, r3
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80052b2:	f7fe fdd9 	bl	8003e68 <HAL_DMA_Start_IT>
 80052b6:	4603      	mov	r3, r0
 80052b8:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 80052bc:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	f040 8087 	bne.w	80053d4 <HAL_I2C_Mem_Read_DMA+0x294>
 80052c6:	e013      	b.n	80052f0 <HAL_I2C_Mem_Read_DMA+0x1b0>
        hi2c->State     = HAL_I2C_STATE_READY;
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	2220      	movs	r2, #32
 80052cc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80052d0:	68fb      	ldr	r3, [r7, #12]
 80052d2:	2200      	movs	r2, #0
 80052d4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 80052d8:	68fb      	ldr	r3, [r7, #12]
 80052da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052dc:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	2200      	movs	r2, #0
 80052e8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 80052ec:	2301      	movs	r3, #1
 80052ee:	e0b3      	b.n	8005458 <HAL_I2C_Mem_Read_DMA+0x318>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 80052f0:	88f8      	ldrh	r0, [r7, #6]
 80052f2:	893a      	ldrh	r2, [r7, #8]
 80052f4:	8979      	ldrh	r1, [r7, #10]
 80052f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80052f8:	9301      	str	r3, [sp, #4]
 80052fa:	2323      	movs	r3, #35	@ 0x23
 80052fc:	9300      	str	r3, [sp, #0]
 80052fe:	4603      	mov	r3, r0
 8005300:	68f8      	ldr	r0, [r7, #12]
 8005302:	f001 fe3b 	bl	8006f7c <I2C_RequestMemoryRead>
 8005306:	4603      	mov	r3, r0
 8005308:	2b00      	cmp	r3, #0
 800530a:	d023      	beq.n	8005354 <HAL_I2C_Mem_Read_DMA+0x214>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmarx);
 800530c:	68fb      	ldr	r3, [r7, #12]
 800530e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005310:	4618      	mov	r0, r3
 8005312:	f7fe fe01 	bl	8003f18 <HAL_DMA_Abort_IT>
 8005316:	4603      	mov	r3, r0
 8005318:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmarx->XferCpltCallback = NULL;
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005320:	2200      	movs	r2, #0
 8005322:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	681a      	ldr	r2, [r3, #0]
 800532a:	68fb      	ldr	r3, [r7, #12]
 800532c:	681b      	ldr	r3, [r3, #0]
 800532e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005332:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	2200      	movs	r2, #0
 8005338:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount = 0U;
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	2200      	movs	r2, #0
 800533e:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	681a      	ldr	r2, [r3, #0]
 8005346:	68fb      	ldr	r3, [r7, #12]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f022 0201 	bic.w	r2, r2, #1
 800534e:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 8005350:	2301      	movs	r3, #1
 8005352:	e081      	b.n	8005458 <HAL_I2C_Mem_Read_DMA+0x318>
        }

        if (hi2c->XferSize == 1U)
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005358:	2b01      	cmp	r3, #1
 800535a:	d108      	bne.n	800536e <HAL_I2C_Mem_Read_DMA+0x22e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	681a      	ldr	r2, [r3, #0]
 8005362:	68fb      	ldr	r3, [r7, #12]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800536a:	601a      	str	r2, [r3, #0]
 800536c:	e007      	b.n	800537e <HAL_I2C_Mem_Read_DMA+0x23e>
        }
        else
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	685a      	ldr	r2, [r3, #4]
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 800537c:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800537e:	2300      	movs	r3, #0
 8005380:	61bb      	str	r3, [r7, #24]
 8005382:	68fb      	ldr	r3, [r7, #12]
 8005384:	681b      	ldr	r3, [r3, #0]
 8005386:	695b      	ldr	r3, [r3, #20]
 8005388:	61bb      	str	r3, [r7, #24]
 800538a:	68fb      	ldr	r3, [r7, #12]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	699b      	ldr	r3, [r3, #24]
 8005390:	61bb      	str	r3, [r7, #24]
 8005392:	69bb      	ldr	r3, [r7, #24]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	2200      	movs	r2, #0
 8005398:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	685a      	ldr	r2, [r3, #4]
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80053aa:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 80053ac:	68fb      	ldr	r3, [r7, #12]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	685a      	ldr	r2, [r3, #4]
 80053b2:	68fb      	ldr	r3, [r7, #12]
 80053b4:	681b      	ldr	r3, [r3, #0]
 80053b6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80053ba:	605a      	str	r2, [r3, #4]
 80053bc:	e049      	b.n	8005452 <HAL_I2C_Mem_Read_DMA+0x312>
 80053be:	bf00      	nop
 80053c0:	2000009c 	.word	0x2000009c
 80053c4:	14f8b589 	.word	0x14f8b589
 80053c8:	ffff0000 	.word	0xffff0000
 80053cc:	0800714d 	.word	0x0800714d
 80053d0:	0800730b 	.word	0x0800730b
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	2220      	movs	r2, #32
 80053d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	2200      	movs	r2, #0
 80053e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053e8:	f043 0210 	orr.w	r2, r3, #16
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	2200      	movs	r2, #0
 80053f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80053f8:	2301      	movs	r3, #1
 80053fa:	e02d      	b.n	8005458 <HAL_I2C_Mem_Read_DMA+0x318>
      }
    }
    else
    {
      /* Send Slave Address and Memory Address */
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 80053fc:	88f8      	ldrh	r0, [r7, #6]
 80053fe:	893a      	ldrh	r2, [r7, #8]
 8005400:	8979      	ldrh	r1, [r7, #10]
 8005402:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005404:	9301      	str	r3, [sp, #4]
 8005406:	2323      	movs	r3, #35	@ 0x23
 8005408:	9300      	str	r3, [sp, #0]
 800540a:	4603      	mov	r3, r0
 800540c:	68f8      	ldr	r0, [r7, #12]
 800540e:	f001 fdb5 	bl	8006f7c <I2C_RequestMemoryRead>
 8005412:	4603      	mov	r3, r0
 8005414:	2b00      	cmp	r3, #0
 8005416:	d001      	beq.n	800541c <HAL_I2C_Mem_Read_DMA+0x2dc>
      {
        return HAL_ERROR;
 8005418:	2301      	movs	r3, #1
 800541a:	e01d      	b.n	8005458 <HAL_I2C_Mem_Read_DMA+0x318>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800541c:	2300      	movs	r3, #0
 800541e:	617b      	str	r3, [r7, #20]
 8005420:	68fb      	ldr	r3, [r7, #12]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	695b      	ldr	r3, [r3, #20]
 8005426:	617b      	str	r3, [r7, #20]
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	699b      	ldr	r3, [r3, #24]
 800542e:	617b      	str	r3, [r7, #20]
 8005430:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005432:	68fb      	ldr	r3, [r7, #12]
 8005434:	681b      	ldr	r3, [r3, #0]
 8005436:	681a      	ldr	r2, [r3, #0]
 8005438:	68fb      	ldr	r3, [r7, #12]
 800543a:	681b      	ldr	r3, [r3, #0]
 800543c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005440:	601a      	str	r2, [r3, #0]

      hi2c->State = HAL_I2C_STATE_READY;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	2220      	movs	r2, #32
 8005446:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	2200      	movs	r2, #0
 800544e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }

    return HAL_OK;
 8005452:	2300      	movs	r3, #0
 8005454:	e000      	b.n	8005458 <HAL_I2C_Mem_Read_DMA+0x318>
  }
  else
  {
    return HAL_BUSY;
 8005456:	2302      	movs	r3, #2
  }
}
 8005458:	4618      	mov	r0, r3
 800545a:	3728      	adds	r7, #40	@ 0x28
 800545c:	46bd      	mov	sp, r7
 800545e:	bd80      	pop	{r7, pc}

08005460 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8005460:	b580      	push	{r7, lr}
 8005462:	b08a      	sub	sp, #40	@ 0x28
 8005464:	af02      	add	r7, sp, #8
 8005466:	60f8      	str	r0, [r7, #12]
 8005468:	607a      	str	r2, [r7, #4]
 800546a:	603b      	str	r3, [r7, #0]
 800546c:	460b      	mov	r3, r1
 800546e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8005470:	f7fe fb3a 	bl	8003ae8 <HAL_GetTick>
 8005474:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8005476:	2300      	movs	r3, #0
 8005478:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800547a:	68fb      	ldr	r3, [r7, #12]
 800547c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005480:	b2db      	uxtb	r3, r3
 8005482:	2b20      	cmp	r3, #32
 8005484:	f040 8111 	bne.w	80056aa <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005488:	69fb      	ldr	r3, [r7, #28]
 800548a:	9300      	str	r3, [sp, #0]
 800548c:	2319      	movs	r3, #25
 800548e:	2201      	movs	r2, #1
 8005490:	4988      	ldr	r1, [pc, #544]	@ (80056b4 <HAL_I2C_IsDeviceReady+0x254>)
 8005492:	68f8      	ldr	r0, [r7, #12]
 8005494:	f002 f81e 	bl	80074d4 <I2C_WaitOnFlagUntilTimeout>
 8005498:	4603      	mov	r3, r0
 800549a:	2b00      	cmp	r3, #0
 800549c:	d001      	beq.n	80054a2 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 800549e:	2302      	movs	r3, #2
 80054a0:	e104      	b.n	80056ac <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80054a8:	2b01      	cmp	r3, #1
 80054aa:	d101      	bne.n	80054b0 <HAL_I2C_IsDeviceReady+0x50>
 80054ac:	2302      	movs	r3, #2
 80054ae:	e0fd      	b.n	80056ac <HAL_I2C_IsDeviceReady+0x24c>
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	2201      	movs	r2, #1
 80054b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f003 0301 	and.w	r3, r3, #1
 80054c2:	2b01      	cmp	r3, #1
 80054c4:	d007      	beq.n	80054d6 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	681a      	ldr	r2, [r3, #0]
 80054cc:	68fb      	ldr	r3, [r7, #12]
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	f042 0201 	orr.w	r2, r2, #1
 80054d4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	681a      	ldr	r2, [r3, #0]
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80054e4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	2224      	movs	r2, #36	@ 0x24
 80054ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80054ee:	68fb      	ldr	r3, [r7, #12]
 80054f0:	2200      	movs	r2, #0
 80054f2:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	4a70      	ldr	r2, [pc, #448]	@ (80056b8 <HAL_I2C_IsDeviceReady+0x258>)
 80054f8:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	681a      	ldr	r2, [r3, #0]
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005508:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800550a:	69fb      	ldr	r3, [r7, #28]
 800550c:	9300      	str	r3, [sp, #0]
 800550e:	683b      	ldr	r3, [r7, #0]
 8005510:	2200      	movs	r2, #0
 8005512:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005516:	68f8      	ldr	r0, [r7, #12]
 8005518:	f001 ffdc 	bl	80074d4 <I2C_WaitOnFlagUntilTimeout>
 800551c:	4603      	mov	r3, r0
 800551e:	2b00      	cmp	r3, #0
 8005520:	d00d      	beq.n	800553e <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	681b      	ldr	r3, [r3, #0]
 8005528:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800552c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005530:	d103      	bne.n	800553a <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005538:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 800553a:	2303      	movs	r3, #3
 800553c:	e0b6      	b.n	80056ac <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800553e:	897b      	ldrh	r3, [r7, #10]
 8005540:	b2db      	uxtb	r3, r3
 8005542:	461a      	mov	r2, r3
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800554c:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 800554e:	f7fe facb 	bl	8003ae8 <HAL_GetTick>
 8005552:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005554:	68fb      	ldr	r3, [r7, #12]
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	695b      	ldr	r3, [r3, #20]
 800555a:	f003 0302 	and.w	r3, r3, #2
 800555e:	2b02      	cmp	r3, #2
 8005560:	bf0c      	ite	eq
 8005562:	2301      	moveq	r3, #1
 8005564:	2300      	movne	r3, #0
 8005566:	b2db      	uxtb	r3, r3
 8005568:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	695b      	ldr	r3, [r3, #20]
 8005570:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005574:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005578:	bf0c      	ite	eq
 800557a:	2301      	moveq	r3, #1
 800557c:	2300      	movne	r3, #0
 800557e:	b2db      	uxtb	r3, r3
 8005580:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8005582:	e025      	b.n	80055d0 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005584:	f7fe fab0 	bl	8003ae8 <HAL_GetTick>
 8005588:	4602      	mov	r2, r0
 800558a:	69fb      	ldr	r3, [r7, #28]
 800558c:	1ad3      	subs	r3, r2, r3
 800558e:	683a      	ldr	r2, [r7, #0]
 8005590:	429a      	cmp	r2, r3
 8005592:	d302      	bcc.n	800559a <HAL_I2C_IsDeviceReady+0x13a>
 8005594:	683b      	ldr	r3, [r7, #0]
 8005596:	2b00      	cmp	r3, #0
 8005598:	d103      	bne.n	80055a2 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 800559a:	68fb      	ldr	r3, [r7, #12]
 800559c:	22a0      	movs	r2, #160	@ 0xa0
 800559e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	695b      	ldr	r3, [r3, #20]
 80055a8:	f003 0302 	and.w	r3, r3, #2
 80055ac:	2b02      	cmp	r3, #2
 80055ae:	bf0c      	ite	eq
 80055b0:	2301      	moveq	r3, #1
 80055b2:	2300      	movne	r3, #0
 80055b4:	b2db      	uxtb	r3, r3
 80055b6:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80055b8:	68fb      	ldr	r3, [r7, #12]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	695b      	ldr	r3, [r3, #20]
 80055be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80055c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80055c6:	bf0c      	ite	eq
 80055c8:	2301      	moveq	r3, #1
 80055ca:	2300      	movne	r3, #0
 80055cc:	b2db      	uxtb	r3, r3
 80055ce:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80055d6:	b2db      	uxtb	r3, r3
 80055d8:	2ba0      	cmp	r3, #160	@ 0xa0
 80055da:	d005      	beq.n	80055e8 <HAL_I2C_IsDeviceReady+0x188>
 80055dc:	7dfb      	ldrb	r3, [r7, #23]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d102      	bne.n	80055e8 <HAL_I2C_IsDeviceReady+0x188>
 80055e2:	7dbb      	ldrb	r3, [r7, #22]
 80055e4:	2b00      	cmp	r3, #0
 80055e6:	d0cd      	beq.n	8005584 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	2220      	movs	r2, #32
 80055ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	695b      	ldr	r3, [r3, #20]
 80055f6:	f003 0302 	and.w	r3, r3, #2
 80055fa:	2b02      	cmp	r3, #2
 80055fc:	d129      	bne.n	8005652 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	681a      	ldr	r2, [r3, #0]
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800560c:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800560e:	2300      	movs	r3, #0
 8005610:	613b      	str	r3, [r7, #16]
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	695b      	ldr	r3, [r3, #20]
 8005618:	613b      	str	r3, [r7, #16]
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	699b      	ldr	r3, [r3, #24]
 8005620:	613b      	str	r3, [r7, #16]
 8005622:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005624:	69fb      	ldr	r3, [r7, #28]
 8005626:	9300      	str	r3, [sp, #0]
 8005628:	2319      	movs	r3, #25
 800562a:	2201      	movs	r2, #1
 800562c:	4921      	ldr	r1, [pc, #132]	@ (80056b4 <HAL_I2C_IsDeviceReady+0x254>)
 800562e:	68f8      	ldr	r0, [r7, #12]
 8005630:	f001 ff50 	bl	80074d4 <I2C_WaitOnFlagUntilTimeout>
 8005634:	4603      	mov	r3, r0
 8005636:	2b00      	cmp	r3, #0
 8005638:	d001      	beq.n	800563e <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800563a:	2301      	movs	r3, #1
 800563c:	e036      	b.n	80056ac <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	2220      	movs	r2, #32
 8005642:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	2200      	movs	r2, #0
 800564a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 800564e:	2300      	movs	r3, #0
 8005650:	e02c      	b.n	80056ac <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	681a      	ldr	r2, [r3, #0]
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005660:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800566a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800566c:	69fb      	ldr	r3, [r7, #28]
 800566e:	9300      	str	r3, [sp, #0]
 8005670:	2319      	movs	r3, #25
 8005672:	2201      	movs	r2, #1
 8005674:	490f      	ldr	r1, [pc, #60]	@ (80056b4 <HAL_I2C_IsDeviceReady+0x254>)
 8005676:	68f8      	ldr	r0, [r7, #12]
 8005678:	f001 ff2c 	bl	80074d4 <I2C_WaitOnFlagUntilTimeout>
 800567c:	4603      	mov	r3, r0
 800567e:	2b00      	cmp	r3, #0
 8005680:	d001      	beq.n	8005686 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8005682:	2301      	movs	r3, #1
 8005684:	e012      	b.n	80056ac <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8005686:	69bb      	ldr	r3, [r7, #24]
 8005688:	3301      	adds	r3, #1
 800568a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 800568c:	69ba      	ldr	r2, [r7, #24]
 800568e:	687b      	ldr	r3, [r7, #4]
 8005690:	429a      	cmp	r2, r3
 8005692:	f4ff af32 	bcc.w	80054fa <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8005696:	68fb      	ldr	r3, [r7, #12]
 8005698:	2220      	movs	r2, #32
 800569a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	2200      	movs	r2, #0
 80056a2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80056a6:	2301      	movs	r3, #1
 80056a8:	e000      	b.n	80056ac <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80056aa:	2302      	movs	r3, #2
  }
}
 80056ac:	4618      	mov	r0, r3
 80056ae:	3720      	adds	r7, #32
 80056b0:	46bd      	mov	sp, r7
 80056b2:	bd80      	pop	{r7, pc}
 80056b4:	00100002 	.word	0x00100002
 80056b8:	ffff0000 	.word	0xffff0000

080056bc <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80056bc:	b580      	push	{r7, lr}
 80056be:	b088      	sub	sp, #32
 80056c0:	af00      	add	r7, sp, #0
 80056c2:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80056c4:	2300      	movs	r3, #0
 80056c6:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	685b      	ldr	r3, [r3, #4]
 80056ce:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80056d4:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80056dc:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80056e4:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80056e6:	7bfb      	ldrb	r3, [r7, #15]
 80056e8:	2b10      	cmp	r3, #16
 80056ea:	d003      	beq.n	80056f4 <HAL_I2C_EV_IRQHandler+0x38>
 80056ec:	7bfb      	ldrb	r3, [r7, #15]
 80056ee:	2b40      	cmp	r3, #64	@ 0x40
 80056f0:	f040 80b1 	bne.w	8005856 <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	699b      	ldr	r3, [r3, #24]
 80056fa:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	695b      	ldr	r3, [r3, #20]
 8005702:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8005704:	69fb      	ldr	r3, [r7, #28]
 8005706:	f003 0301 	and.w	r3, r3, #1
 800570a:	2b00      	cmp	r3, #0
 800570c:	d10d      	bne.n	800572a <HAL_I2C_EV_IRQHandler+0x6e>
 800570e:	693b      	ldr	r3, [r7, #16]
 8005710:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8005714:	d003      	beq.n	800571e <HAL_I2C_EV_IRQHandler+0x62>
 8005716:	693b      	ldr	r3, [r7, #16]
 8005718:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 800571c:	d101      	bne.n	8005722 <HAL_I2C_EV_IRQHandler+0x66>
 800571e:	2301      	movs	r3, #1
 8005720:	e000      	b.n	8005724 <HAL_I2C_EV_IRQHandler+0x68>
 8005722:	2300      	movs	r3, #0
 8005724:	2b01      	cmp	r3, #1
 8005726:	f000 8114 	beq.w	8005952 <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800572a:	69fb      	ldr	r3, [r7, #28]
 800572c:	f003 0301 	and.w	r3, r3, #1
 8005730:	2b00      	cmp	r3, #0
 8005732:	d00b      	beq.n	800574c <HAL_I2C_EV_IRQHandler+0x90>
 8005734:	697b      	ldr	r3, [r7, #20]
 8005736:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800573a:	2b00      	cmp	r3, #0
 800573c:	d006      	beq.n	800574c <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 800573e:	6878      	ldr	r0, [r7, #4]
 8005740:	f002 f930 	bl	80079a4 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8005744:	6878      	ldr	r0, [r7, #4]
 8005746:	f000 fd66 	bl	8006216 <I2C_Master_SB>
 800574a:	e083      	b.n	8005854 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800574c:	69fb      	ldr	r3, [r7, #28]
 800574e:	f003 0308 	and.w	r3, r3, #8
 8005752:	2b00      	cmp	r3, #0
 8005754:	d008      	beq.n	8005768 <HAL_I2C_EV_IRQHandler+0xac>
 8005756:	697b      	ldr	r3, [r7, #20]
 8005758:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800575c:	2b00      	cmp	r3, #0
 800575e:	d003      	beq.n	8005768 <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 8005760:	6878      	ldr	r0, [r7, #4]
 8005762:	f000 fdde 	bl	8006322 <I2C_Master_ADD10>
 8005766:	e075      	b.n	8005854 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005768:	69fb      	ldr	r3, [r7, #28]
 800576a:	f003 0302 	and.w	r3, r3, #2
 800576e:	2b00      	cmp	r3, #0
 8005770:	d008      	beq.n	8005784 <HAL_I2C_EV_IRQHandler+0xc8>
 8005772:	697b      	ldr	r3, [r7, #20]
 8005774:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005778:	2b00      	cmp	r3, #0
 800577a:	d003      	beq.n	8005784 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 800577c:	6878      	ldr	r0, [r7, #4]
 800577e:	f000 fdfa 	bl	8006376 <I2C_Master_ADDR>
 8005782:	e067      	b.n	8005854 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8005784:	69bb      	ldr	r3, [r7, #24]
 8005786:	f003 0304 	and.w	r3, r3, #4
 800578a:	2b00      	cmp	r3, #0
 800578c:	d036      	beq.n	80057fc <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	685b      	ldr	r3, [r3, #4]
 8005794:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005798:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800579c:	f000 80db 	beq.w	8005956 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80057a0:	69fb      	ldr	r3, [r7, #28]
 80057a2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d00d      	beq.n	80057c6 <HAL_I2C_EV_IRQHandler+0x10a>
 80057aa:	697b      	ldr	r3, [r7, #20]
 80057ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d008      	beq.n	80057c6 <HAL_I2C_EV_IRQHandler+0x10a>
 80057b4:	69fb      	ldr	r3, [r7, #28]
 80057b6:	f003 0304 	and.w	r3, r3, #4
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d103      	bne.n	80057c6 <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80057be:	6878      	ldr	r0, [r7, #4]
 80057c0:	f000 f9c2 	bl	8005b48 <I2C_MasterTransmit_TXE>
 80057c4:	e046      	b.n	8005854 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80057c6:	69fb      	ldr	r3, [r7, #28]
 80057c8:	f003 0304 	and.w	r3, r3, #4
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	f000 80c2 	beq.w	8005956 <HAL_I2C_EV_IRQHandler+0x29a>
 80057d2:	697b      	ldr	r3, [r7, #20]
 80057d4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80057d8:	2b00      	cmp	r3, #0
 80057da:	f000 80bc 	beq.w	8005956 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80057de:	7bbb      	ldrb	r3, [r7, #14]
 80057e0:	2b21      	cmp	r3, #33	@ 0x21
 80057e2:	d103      	bne.n	80057ec <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80057e4:	6878      	ldr	r0, [r7, #4]
 80057e6:	f000 fa4b 	bl	8005c80 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80057ea:	e0b4      	b.n	8005956 <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 80057ec:	7bfb      	ldrb	r3, [r7, #15]
 80057ee:	2b40      	cmp	r3, #64	@ 0x40
 80057f0:	f040 80b1 	bne.w	8005956 <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 80057f4:	6878      	ldr	r0, [r7, #4]
 80057f6:	f000 fab9 	bl	8005d6c <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80057fa:	e0ac      	b.n	8005956 <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	685b      	ldr	r3, [r3, #4]
 8005802:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005806:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800580a:	f000 80a4 	beq.w	8005956 <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800580e:	69fb      	ldr	r3, [r7, #28]
 8005810:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005814:	2b00      	cmp	r3, #0
 8005816:	d00d      	beq.n	8005834 <HAL_I2C_EV_IRQHandler+0x178>
 8005818:	697b      	ldr	r3, [r7, #20]
 800581a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800581e:	2b00      	cmp	r3, #0
 8005820:	d008      	beq.n	8005834 <HAL_I2C_EV_IRQHandler+0x178>
 8005822:	69fb      	ldr	r3, [r7, #28]
 8005824:	f003 0304 	and.w	r3, r3, #4
 8005828:	2b00      	cmp	r3, #0
 800582a:	d103      	bne.n	8005834 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 800582c:	6878      	ldr	r0, [r7, #4]
 800582e:	f000 fb35 	bl	8005e9c <I2C_MasterReceive_RXNE>
 8005832:	e00f      	b.n	8005854 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005834:	69fb      	ldr	r3, [r7, #28]
 8005836:	f003 0304 	and.w	r3, r3, #4
 800583a:	2b00      	cmp	r3, #0
 800583c:	f000 808b 	beq.w	8005956 <HAL_I2C_EV_IRQHandler+0x29a>
 8005840:	697b      	ldr	r3, [r7, #20]
 8005842:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005846:	2b00      	cmp	r3, #0
 8005848:	f000 8085 	beq.w	8005956 <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 800584c:	6878      	ldr	r0, [r7, #4]
 800584e:	f000 fbed 	bl	800602c <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005852:	e080      	b.n	8005956 <HAL_I2C_EV_IRQHandler+0x29a>
 8005854:	e07f      	b.n	8005956 <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800585a:	2b00      	cmp	r3, #0
 800585c:	d004      	beq.n	8005868 <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	695b      	ldr	r3, [r3, #20]
 8005864:	61fb      	str	r3, [r7, #28]
 8005866:	e007      	b.n	8005878 <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	699b      	ldr	r3, [r3, #24]
 800586e:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	681b      	ldr	r3, [r3, #0]
 8005874:	695b      	ldr	r3, [r3, #20]
 8005876:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005878:	69fb      	ldr	r3, [r7, #28]
 800587a:	f003 0302 	and.w	r3, r3, #2
 800587e:	2b00      	cmp	r3, #0
 8005880:	d011      	beq.n	80058a6 <HAL_I2C_EV_IRQHandler+0x1ea>
 8005882:	697b      	ldr	r3, [r7, #20]
 8005884:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005888:	2b00      	cmp	r3, #0
 800588a:	d00c      	beq.n	80058a6 <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005890:	2b00      	cmp	r3, #0
 8005892:	d003      	beq.n	800589c <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	681b      	ldr	r3, [r3, #0]
 8005898:	699b      	ldr	r3, [r3, #24]
 800589a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800589c:	69b9      	ldr	r1, [r7, #24]
 800589e:	6878      	ldr	r0, [r7, #4]
 80058a0:	f000 ffb8 	bl	8006814 <I2C_Slave_ADDR>
 80058a4:	e05a      	b.n	800595c <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80058a6:	69fb      	ldr	r3, [r7, #28]
 80058a8:	f003 0310 	and.w	r3, r3, #16
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d008      	beq.n	80058c2 <HAL_I2C_EV_IRQHandler+0x206>
 80058b0:	697b      	ldr	r3, [r7, #20]
 80058b2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d003      	beq.n	80058c2 <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 80058ba:	6878      	ldr	r0, [r7, #4]
 80058bc:	f000 fff2 	bl	80068a4 <I2C_Slave_STOPF>
 80058c0:	e04c      	b.n	800595c <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80058c2:	7bbb      	ldrb	r3, [r7, #14]
 80058c4:	2b21      	cmp	r3, #33	@ 0x21
 80058c6:	d002      	beq.n	80058ce <HAL_I2C_EV_IRQHandler+0x212>
 80058c8:	7bbb      	ldrb	r3, [r7, #14]
 80058ca:	2b29      	cmp	r3, #41	@ 0x29
 80058cc:	d120      	bne.n	8005910 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80058ce:	69fb      	ldr	r3, [r7, #28]
 80058d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058d4:	2b00      	cmp	r3, #0
 80058d6:	d00d      	beq.n	80058f4 <HAL_I2C_EV_IRQHandler+0x238>
 80058d8:	697b      	ldr	r3, [r7, #20]
 80058da:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d008      	beq.n	80058f4 <HAL_I2C_EV_IRQHandler+0x238>
 80058e2:	69fb      	ldr	r3, [r7, #28]
 80058e4:	f003 0304 	and.w	r3, r3, #4
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d103      	bne.n	80058f4 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80058ec:	6878      	ldr	r0, [r7, #4]
 80058ee:	f000 fed3 	bl	8006698 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80058f2:	e032      	b.n	800595a <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80058f4:	69fb      	ldr	r3, [r7, #28]
 80058f6:	f003 0304 	and.w	r3, r3, #4
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	d02d      	beq.n	800595a <HAL_I2C_EV_IRQHandler+0x29e>
 80058fe:	697b      	ldr	r3, [r7, #20]
 8005900:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005904:	2b00      	cmp	r3, #0
 8005906:	d028      	beq.n	800595a <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8005908:	6878      	ldr	r0, [r7, #4]
 800590a:	f000 ff02 	bl	8006712 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800590e:	e024      	b.n	800595a <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005910:	69fb      	ldr	r3, [r7, #28]
 8005912:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005916:	2b00      	cmp	r3, #0
 8005918:	d00d      	beq.n	8005936 <HAL_I2C_EV_IRQHandler+0x27a>
 800591a:	697b      	ldr	r3, [r7, #20]
 800591c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005920:	2b00      	cmp	r3, #0
 8005922:	d008      	beq.n	8005936 <HAL_I2C_EV_IRQHandler+0x27a>
 8005924:	69fb      	ldr	r3, [r7, #28]
 8005926:	f003 0304 	and.w	r3, r3, #4
 800592a:	2b00      	cmp	r3, #0
 800592c:	d103      	bne.n	8005936 <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800592e:	6878      	ldr	r0, [r7, #4]
 8005930:	f000 ff10 	bl	8006754 <I2C_SlaveReceive_RXNE>
 8005934:	e012      	b.n	800595c <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005936:	69fb      	ldr	r3, [r7, #28]
 8005938:	f003 0304 	and.w	r3, r3, #4
 800593c:	2b00      	cmp	r3, #0
 800593e:	d00d      	beq.n	800595c <HAL_I2C_EV_IRQHandler+0x2a0>
 8005940:	697b      	ldr	r3, [r7, #20]
 8005942:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005946:	2b00      	cmp	r3, #0
 8005948:	d008      	beq.n	800595c <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800594a:	6878      	ldr	r0, [r7, #4]
 800594c:	f000 ff40 	bl	80067d0 <I2C_SlaveReceive_BTF>
 8005950:	e004      	b.n	800595c <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 8005952:	bf00      	nop
 8005954:	e002      	b.n	800595c <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005956:	bf00      	nop
 8005958:	e000      	b.n	800595c <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800595a:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 800595c:	3720      	adds	r7, #32
 800595e:	46bd      	mov	sp, r7
 8005960:	bd80      	pop	{r7, pc}

08005962 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005962:	b580      	push	{r7, lr}
 8005964:	b08a      	sub	sp, #40	@ 0x28
 8005966:	af00      	add	r7, sp, #0
 8005968:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	695b      	ldr	r3, [r3, #20]
 8005970:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	685b      	ldr	r3, [r3, #4]
 8005978:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 800597a:	2300      	movs	r3, #0
 800597c:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005984:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005986:	6a3b      	ldr	r3, [r7, #32]
 8005988:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800598c:	2b00      	cmp	r3, #0
 800598e:	d00d      	beq.n	80059ac <HAL_I2C_ER_IRQHandler+0x4a>
 8005990:	69fb      	ldr	r3, [r7, #28]
 8005992:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005996:	2b00      	cmp	r3, #0
 8005998:	d008      	beq.n	80059ac <HAL_I2C_ER_IRQHandler+0x4a>
  {
    error |= HAL_I2C_ERROR_BERR;
 800599a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800599c:	f043 0301 	orr.w	r3, r3, #1
 80059a0:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 80059aa:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80059ac:	6a3b      	ldr	r3, [r7, #32]
 80059ae:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80059b2:	2b00      	cmp	r3, #0
 80059b4:	d00d      	beq.n	80059d2 <HAL_I2C_ER_IRQHandler+0x70>
 80059b6:	69fb      	ldr	r3, [r7, #28]
 80059b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d008      	beq.n	80059d2 <HAL_I2C_ER_IRQHandler+0x70>
  {
    error |= HAL_I2C_ERROR_ARLO;
 80059c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059c2:	f043 0302 	orr.w	r3, r3, #2
 80059c6:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80059c8:	687b      	ldr	r3, [r7, #4]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 80059d0:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80059d2:	6a3b      	ldr	r3, [r7, #32]
 80059d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d03e      	beq.n	8005a5a <HAL_I2C_ER_IRQHandler+0xf8>
 80059dc:	69fb      	ldr	r3, [r7, #28]
 80059de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80059e2:	2b00      	cmp	r3, #0
 80059e4:	d039      	beq.n	8005a5a <HAL_I2C_ER_IRQHandler+0xf8>
  {
    tmp1 = CurrentMode;
 80059e6:	7efb      	ldrb	r3, [r7, #27]
 80059e8:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80059ee:	b29b      	uxth	r3, r3
 80059f0:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80059f8:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80059fe:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8005a00:	7ebb      	ldrb	r3, [r7, #26]
 8005a02:	2b20      	cmp	r3, #32
 8005a04:	d112      	bne.n	8005a2c <HAL_I2C_ER_IRQHandler+0xca>
 8005a06:	697b      	ldr	r3, [r7, #20]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d10f      	bne.n	8005a2c <HAL_I2C_ER_IRQHandler+0xca>
 8005a0c:	7cfb      	ldrb	r3, [r7, #19]
 8005a0e:	2b21      	cmp	r3, #33	@ 0x21
 8005a10:	d008      	beq.n	8005a24 <HAL_I2C_ER_IRQHandler+0xc2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8005a12:	7cfb      	ldrb	r3, [r7, #19]
 8005a14:	2b29      	cmp	r3, #41	@ 0x29
 8005a16:	d005      	beq.n	8005a24 <HAL_I2C_ER_IRQHandler+0xc2>
 8005a18:	7cfb      	ldrb	r3, [r7, #19]
 8005a1a:	2b28      	cmp	r3, #40	@ 0x28
 8005a1c:	d106      	bne.n	8005a2c <HAL_I2C_ER_IRQHandler+0xca>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	2b21      	cmp	r3, #33	@ 0x21
 8005a22:	d103      	bne.n	8005a2c <HAL_I2C_ER_IRQHandler+0xca>
    {
      I2C_Slave_AF(hi2c);
 8005a24:	6878      	ldr	r0, [r7, #4]
 8005a26:	f001 f86d 	bl	8006b04 <I2C_Slave_AF>
 8005a2a:	e016      	b.n	8005a5a <HAL_I2C_ER_IRQHandler+0xf8>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005a34:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8005a36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a38:	f043 0304 	orr.w	r3, r3, #4
 8005a3c:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8005a3e:	7efb      	ldrb	r3, [r7, #27]
 8005a40:	2b10      	cmp	r3, #16
 8005a42:	d002      	beq.n	8005a4a <HAL_I2C_ER_IRQHandler+0xe8>
 8005a44:	7efb      	ldrb	r3, [r7, #27]
 8005a46:	2b40      	cmp	r3, #64	@ 0x40
 8005a48:	d107      	bne.n	8005a5a <HAL_I2C_ER_IRQHandler+0xf8>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	681a      	ldr	r2, [r3, #0]
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005a58:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005a5a:	6a3b      	ldr	r3, [r7, #32]
 8005a5c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d00d      	beq.n	8005a80 <HAL_I2C_ER_IRQHandler+0x11e>
 8005a64:	69fb      	ldr	r3, [r7, #28]
 8005a66:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005a6a:	2b00      	cmp	r3, #0
 8005a6c:	d008      	beq.n	8005a80 <HAL_I2C_ER_IRQHandler+0x11e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8005a6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a70:	f043 0308 	orr.w	r3, r3, #8
 8005a74:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 8005a7e:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8005a80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	d008      	beq.n	8005a98 <HAL_I2C_ER_IRQHandler+0x136>
  {
    hi2c->ErrorCode |= error;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005a8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005a8c:	431a      	orrs	r2, r3
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 8005a92:	6878      	ldr	r0, [r7, #4]
 8005a94:	f001 f8aa 	bl	8006bec <I2C_ITError>
  }
}
 8005a98:	bf00      	nop
 8005a9a:	3728      	adds	r7, #40	@ 0x28
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	bd80      	pop	{r7, pc}

08005aa0 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005aa0:	b480      	push	{r7}
 8005aa2:	b083      	sub	sp, #12
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8005aa8:	bf00      	nop
 8005aaa:	370c      	adds	r7, #12
 8005aac:	46bd      	mov	sp, r7
 8005aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab2:	4770      	bx	lr

08005ab4 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005ab4:	b480      	push	{r7}
 8005ab6:	b083      	sub	sp, #12
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8005abc:	bf00      	nop
 8005abe:	370c      	adds	r7, #12
 8005ac0:	46bd      	mov	sp, r7
 8005ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac6:	4770      	bx	lr

08005ac8 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005ac8:	b480      	push	{r7}
 8005aca:	b083      	sub	sp, #12
 8005acc:	af00      	add	r7, sp, #0
 8005ace:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8005ad0:	bf00      	nop
 8005ad2:	370c      	adds	r7, #12
 8005ad4:	46bd      	mov	sp, r7
 8005ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ada:	4770      	bx	lr

08005adc <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005adc:	b480      	push	{r7}
 8005ade:	b083      	sub	sp, #12
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8005ae4:	bf00      	nop
 8005ae6:	370c      	adds	r7, #12
 8005ae8:	46bd      	mov	sp, r7
 8005aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aee:	4770      	bx	lr

08005af0 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8005af0:	b480      	push	{r7}
 8005af2:	b083      	sub	sp, #12
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
 8005af8:	460b      	mov	r3, r1
 8005afa:	70fb      	strb	r3, [r7, #3]
 8005afc:	4613      	mov	r3, r2
 8005afe:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8005b00:	bf00      	nop
 8005b02:	370c      	adds	r7, #12
 8005b04:	46bd      	mov	sp, r7
 8005b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b0a:	4770      	bx	lr

08005b0c <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005b0c:	b480      	push	{r7}
 8005b0e:	b083      	sub	sp, #12
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8005b14:	bf00      	nop
 8005b16:	370c      	adds	r7, #12
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1e:	4770      	bx	lr

08005b20 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005b20:	b480      	push	{r7}
 8005b22:	b083      	sub	sp, #12
 8005b24:	af00      	add	r7, sp, #0
 8005b26:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8005b28:	bf00      	nop
 8005b2a:	370c      	adds	r7, #12
 8005b2c:	46bd      	mov	sp, r7
 8005b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b32:	4770      	bx	lr

08005b34 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005b34:	b480      	push	{r7}
 8005b36:	b083      	sub	sp, #12
 8005b38:	af00      	add	r7, sp, #0
 8005b3a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8005b3c:	bf00      	nop
 8005b3e:	370c      	adds	r7, #12
 8005b40:	46bd      	mov	sp, r7
 8005b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b46:	4770      	bx	lr

08005b48 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005b48:	b580      	push	{r7, lr}
 8005b4a:	b084      	sub	sp, #16
 8005b4c:	af00      	add	r7, sp, #0
 8005b4e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005b56:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005b5e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005b64:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d150      	bne.n	8005c10 <I2C_MasterTransmit_TXE+0xc8>
 8005b6e:	7bfb      	ldrb	r3, [r7, #15]
 8005b70:	2b21      	cmp	r3, #33	@ 0x21
 8005b72:	d14d      	bne.n	8005c10 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005b74:	68bb      	ldr	r3, [r7, #8]
 8005b76:	2b08      	cmp	r3, #8
 8005b78:	d01d      	beq.n	8005bb6 <I2C_MasterTransmit_TXE+0x6e>
 8005b7a:	68bb      	ldr	r3, [r7, #8]
 8005b7c:	2b20      	cmp	r3, #32
 8005b7e:	d01a      	beq.n	8005bb6 <I2C_MasterTransmit_TXE+0x6e>
 8005b80:	68bb      	ldr	r3, [r7, #8]
 8005b82:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005b86:	d016      	beq.n	8005bb6 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	685a      	ldr	r2, [r3, #4]
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005b96:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	2211      	movs	r2, #17
 8005b9c:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2200      	movs	r2, #0
 8005ba2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	2220      	movs	r2, #32
 8005baa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8005bae:	6878      	ldr	r0, [r7, #4]
 8005bb0:	f7ff ff76 	bl	8005aa0 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005bb4:	e060      	b.n	8005c78 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	685a      	ldr	r2, [r3, #4]
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005bc4:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	681a      	ldr	r2, [r3, #0]
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005bd4:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	2200      	movs	r2, #0
 8005bda:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2220      	movs	r2, #32
 8005be0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005bea:	b2db      	uxtb	r3, r3
 8005bec:	2b40      	cmp	r3, #64	@ 0x40
 8005bee:	d107      	bne.n	8005c00 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8005bf8:	6878      	ldr	r0, [r7, #4]
 8005bfa:	f7ff ff91 	bl	8005b20 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005bfe:	e03b      	b.n	8005c78 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	2200      	movs	r2, #0
 8005c04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005c08:	6878      	ldr	r0, [r7, #4]
 8005c0a:	f7ff ff49 	bl	8005aa0 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005c0e:	e033      	b.n	8005c78 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8005c10:	7bfb      	ldrb	r3, [r7, #15]
 8005c12:	2b21      	cmp	r3, #33	@ 0x21
 8005c14:	d005      	beq.n	8005c22 <I2C_MasterTransmit_TXE+0xda>
 8005c16:	7bbb      	ldrb	r3, [r7, #14]
 8005c18:	2b40      	cmp	r3, #64	@ 0x40
 8005c1a:	d12d      	bne.n	8005c78 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8005c1c:	7bfb      	ldrb	r3, [r7, #15]
 8005c1e:	2b22      	cmp	r3, #34	@ 0x22
 8005c20:	d12a      	bne.n	8005c78 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c26:	b29b      	uxth	r3, r3
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d108      	bne.n	8005c3e <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	685a      	ldr	r2, [r3, #4]
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005c3a:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8005c3c:	e01c      	b.n	8005c78 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005c44:	b2db      	uxtb	r3, r3
 8005c46:	2b40      	cmp	r3, #64	@ 0x40
 8005c48:	d103      	bne.n	8005c52 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8005c4a:	6878      	ldr	r0, [r7, #4]
 8005c4c:	f000 f88e 	bl	8005d6c <I2C_MemoryTransmit_TXE_BTF>
}
 8005c50:	e012      	b.n	8005c78 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c56:	781a      	ldrb	r2, [r3, #0]
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c62:	1c5a      	adds	r2, r3, #1
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c6c:	b29b      	uxth	r3, r3
 8005c6e:	3b01      	subs	r3, #1
 8005c70:	b29a      	uxth	r2, r3
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8005c76:	e7ff      	b.n	8005c78 <I2C_MasterTransmit_TXE+0x130>
 8005c78:	bf00      	nop
 8005c7a:	3710      	adds	r7, #16
 8005c7c:	46bd      	mov	sp, r7
 8005c7e:	bd80      	pop	{r7, pc}

08005c80 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005c80:	b580      	push	{r7, lr}
 8005c82:	b084      	sub	sp, #16
 8005c84:	af00      	add	r7, sp, #0
 8005c86:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c8c:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005c94:	b2db      	uxtb	r3, r3
 8005c96:	2b21      	cmp	r3, #33	@ 0x21
 8005c98:	d164      	bne.n	8005d64 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c9e:	b29b      	uxth	r3, r3
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d012      	beq.n	8005cca <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ca8:	781a      	ldrb	r2, [r3, #0]
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cb4:	1c5a      	adds	r2, r3, #1
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005cbe:	b29b      	uxth	r3, r3
 8005cc0:	3b01      	subs	r3, #1
 8005cc2:	b29a      	uxth	r2, r3
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8005cc8:	e04c      	b.n	8005d64 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	2b08      	cmp	r3, #8
 8005cce:	d01d      	beq.n	8005d0c <I2C_MasterTransmit_BTF+0x8c>
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	2b20      	cmp	r3, #32
 8005cd4:	d01a      	beq.n	8005d0c <I2C_MasterTransmit_BTF+0x8c>
 8005cd6:	68fb      	ldr	r3, [r7, #12]
 8005cd8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005cdc:	d016      	beq.n	8005d0c <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	685a      	ldr	r2, [r3, #4]
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	681b      	ldr	r3, [r3, #0]
 8005ce8:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005cec:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	2211      	movs	r2, #17
 8005cf2:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2200      	movs	r2, #0
 8005cf8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	2220      	movs	r2, #32
 8005d00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005d04:	6878      	ldr	r0, [r7, #4]
 8005d06:	f7ff fecb 	bl	8005aa0 <HAL_I2C_MasterTxCpltCallback>
}
 8005d0a:	e02b      	b.n	8005d64 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	685a      	ldr	r2, [r3, #4]
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005d1a:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	681a      	ldr	r2, [r3, #0]
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005d2a:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	2200      	movs	r2, #0
 8005d30:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	2220      	movs	r2, #32
 8005d36:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005d40:	b2db      	uxtb	r3, r3
 8005d42:	2b40      	cmp	r3, #64	@ 0x40
 8005d44:	d107      	bne.n	8005d56 <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	2200      	movs	r2, #0
 8005d4a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8005d4e:	6878      	ldr	r0, [r7, #4]
 8005d50:	f7ff fee6 	bl	8005b20 <HAL_I2C_MemTxCpltCallback>
}
 8005d54:	e006      	b.n	8005d64 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	2200      	movs	r2, #0
 8005d5a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8005d5e:	6878      	ldr	r0, [r7, #4]
 8005d60:	f7ff fe9e 	bl	8005aa0 <HAL_I2C_MasterTxCpltCallback>
}
 8005d64:	bf00      	nop
 8005d66:	3710      	adds	r7, #16
 8005d68:	46bd      	mov	sp, r7
 8005d6a:	bd80      	pop	{r7, pc}

08005d6c <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8005d6c:	b580      	push	{r7, lr}
 8005d6e:	b084      	sub	sp, #16
 8005d70:	af00      	add	r7, sp, #0
 8005d72:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005d7a:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d11d      	bne.n	8005dc0 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005d88:	2b01      	cmp	r3, #1
 8005d8a:	d10b      	bne.n	8005da4 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005d90:	b2da      	uxtb	r2, r3
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005d9c:	1c9a      	adds	r2, r3, #2
 8005d9e:	687b      	ldr	r3, [r7, #4]
 8005da0:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8005da2:	e077      	b.n	8005e94 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005da8:	b29b      	uxth	r3, r3
 8005daa:	121b      	asrs	r3, r3, #8
 8005dac:	b2da      	uxtb	r2, r3
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8005db4:	687b      	ldr	r3, [r7, #4]
 8005db6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005db8:	1c5a      	adds	r2, r3, #1
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8005dbe:	e069      	b.n	8005e94 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005dc4:	2b01      	cmp	r3, #1
 8005dc6:	d10b      	bne.n	8005de0 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005dcc:	b2da      	uxtb	r2, r3
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005dd8:	1c5a      	adds	r2, r3, #1
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8005dde:	e059      	b.n	8005e94 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005de4:	2b02      	cmp	r3, #2
 8005de6:	d152      	bne.n	8005e8e <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8005de8:	7bfb      	ldrb	r3, [r7, #15]
 8005dea:	2b22      	cmp	r3, #34	@ 0x22
 8005dec:	d10d      	bne.n	8005e0a <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	681a      	ldr	r2, [r3, #0]
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005dfc:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005e02:	1c5a      	adds	r2, r3, #1
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8005e08:	e044      	b.n	8005e94 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e0e:	b29b      	uxth	r3, r3
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d015      	beq.n	8005e40 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8005e14:	7bfb      	ldrb	r3, [r7, #15]
 8005e16:	2b21      	cmp	r3, #33	@ 0x21
 8005e18:	d112      	bne.n	8005e40 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e1e:	781a      	ldrb	r2, [r3, #0]
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e2a:	1c5a      	adds	r2, r3, #1
 8005e2c:	687b      	ldr	r3, [r7, #4]
 8005e2e:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e34:	b29b      	uxth	r3, r3
 8005e36:	3b01      	subs	r3, #1
 8005e38:	b29a      	uxth	r2, r3
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8005e3e:	e029      	b.n	8005e94 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e44:	b29b      	uxth	r3, r3
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d124      	bne.n	8005e94 <I2C_MemoryTransmit_TXE_BTF+0x128>
 8005e4a:	7bfb      	ldrb	r3, [r7, #15]
 8005e4c:	2b21      	cmp	r3, #33	@ 0x21
 8005e4e:	d121      	bne.n	8005e94 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	685a      	ldr	r2, [r3, #4]
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005e5e:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	681a      	ldr	r2, [r3, #0]
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005e6e:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2200      	movs	r2, #0
 8005e74:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	2220      	movs	r2, #32
 8005e7a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	2200      	movs	r2, #0
 8005e82:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8005e86:	6878      	ldr	r0, [r7, #4]
 8005e88:	f7ff fe4a 	bl	8005b20 <HAL_I2C_MemTxCpltCallback>
}
 8005e8c:	e002      	b.n	8005e94 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8005e8e:	6878      	ldr	r0, [r7, #4]
 8005e90:	f7fe fe14 	bl	8004abc <I2C_Flush_DR>
}
 8005e94:	bf00      	nop
 8005e96:	3710      	adds	r7, #16
 8005e98:	46bd      	mov	sp, r7
 8005e9a:	bd80      	pop	{r7, pc}

08005e9c <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b084      	sub	sp, #16
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005eaa:	b2db      	uxtb	r3, r3
 8005eac:	2b22      	cmp	r3, #34	@ 0x22
 8005eae:	f040 80b9 	bne.w	8006024 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8005eb2:	687b      	ldr	r3, [r7, #4]
 8005eb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005eb6:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ebc:	b29b      	uxth	r3, r3
 8005ebe:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8005ec0:	68bb      	ldr	r3, [r7, #8]
 8005ec2:	2b03      	cmp	r3, #3
 8005ec4:	d921      	bls.n	8005f0a <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	691a      	ldr	r2, [r3, #16]
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ed0:	b2d2      	uxtb	r2, r2
 8005ed2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ed8:	1c5a      	adds	r2, r3, #1
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ee2:	b29b      	uxth	r3, r3
 8005ee4:	3b01      	subs	r3, #1
 8005ee6:	b29a      	uxth	r2, r3
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ef0:	b29b      	uxth	r3, r3
 8005ef2:	2b03      	cmp	r3, #3
 8005ef4:	f040 8096 	bne.w	8006024 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	685a      	ldr	r2, [r3, #4]
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005f06:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 8005f08:	e08c      	b.n	8006024 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f0e:	2b02      	cmp	r3, #2
 8005f10:	d07f      	beq.n	8006012 <I2C_MasterReceive_RXNE+0x176>
 8005f12:	68bb      	ldr	r3, [r7, #8]
 8005f14:	2b01      	cmp	r3, #1
 8005f16:	d002      	beq.n	8005f1e <I2C_MasterReceive_RXNE+0x82>
 8005f18:	68bb      	ldr	r3, [r7, #8]
 8005f1a:	2b00      	cmp	r3, #0
 8005f1c:	d179      	bne.n	8006012 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005f1e:	6878      	ldr	r0, [r7, #4]
 8005f20:	f001 fc82 	bl	8007828 <I2C_WaitOnSTOPRequestThroughIT>
 8005f24:	4603      	mov	r3, r0
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d14c      	bne.n	8005fc4 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	681a      	ldr	r2, [r3, #0]
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005f38:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	685a      	ldr	r2, [r3, #4]
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005f48:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	691a      	ldr	r2, [r3, #16]
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f54:	b2d2      	uxtb	r2, r2
 8005f56:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f5c:	1c5a      	adds	r2, r3, #1
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f66:	b29b      	uxth	r3, r3
 8005f68:	3b01      	subs	r3, #1
 8005f6a:	b29a      	uxth	r2, r3
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2220      	movs	r2, #32
 8005f74:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005f7e:	b2db      	uxtb	r3, r3
 8005f80:	2b40      	cmp	r3, #64	@ 0x40
 8005f82:	d10a      	bne.n	8005f9a <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2200      	movs	r2, #0
 8005f88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	2200      	movs	r2, #0
 8005f90:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8005f92:	6878      	ldr	r0, [r7, #4]
 8005f94:	f7fd fa16 	bl	80033c4 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005f98:	e044      	b.n	8006024 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	2b08      	cmp	r3, #8
 8005fa6:	d002      	beq.n	8005fae <I2C_MasterReceive_RXNE+0x112>
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	2b20      	cmp	r3, #32
 8005fac:	d103      	bne.n	8005fb6 <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	2200      	movs	r2, #0
 8005fb2:	631a      	str	r2, [r3, #48]	@ 0x30
 8005fb4:	e002      	b.n	8005fbc <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	2212      	movs	r2, #18
 8005fba:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8005fbc:	6878      	ldr	r0, [r7, #4]
 8005fbe:	f7ff fd79 	bl	8005ab4 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8005fc2:	e02f      	b.n	8006024 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	685a      	ldr	r2, [r3, #4]
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005fd2:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	691a      	ldr	r2, [r3, #16]
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fde:	b2d2      	uxtb	r2, r2
 8005fe0:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005fe6:	1c5a      	adds	r2, r3, #1
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ff0:	b29b      	uxth	r3, r3
 8005ff2:	3b01      	subs	r3, #1
 8005ff4:	b29a      	uxth	r2, r3
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	2220      	movs	r2, #32
 8005ffe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	2200      	movs	r2, #0
 8006006:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800600a:	6878      	ldr	r0, [r7, #4]
 800600c:	f7fd fa02 	bl	8003414 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006010:	e008      	b.n	8006024 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	685a      	ldr	r2, [r3, #4]
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006020:	605a      	str	r2, [r3, #4]
}
 8006022:	e7ff      	b.n	8006024 <I2C_MasterReceive_RXNE+0x188>
 8006024:	bf00      	nop
 8006026:	3710      	adds	r7, #16
 8006028:	46bd      	mov	sp, r7
 800602a:	bd80      	pop	{r7, pc}

0800602c <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800602c:	b580      	push	{r7, lr}
 800602e:	b084      	sub	sp, #16
 8006030:	af00      	add	r7, sp, #0
 8006032:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006038:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800603e:	b29b      	uxth	r3, r3
 8006040:	2b04      	cmp	r3, #4
 8006042:	d11b      	bne.n	800607c <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	685a      	ldr	r2, [r3, #4]
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006052:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	691a      	ldr	r2, [r3, #16]
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800605e:	b2d2      	uxtb	r2, r2
 8006060:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006066:	1c5a      	adds	r2, r3, #1
 8006068:	687b      	ldr	r3, [r7, #4]
 800606a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006070:	b29b      	uxth	r3, r3
 8006072:	3b01      	subs	r3, #1
 8006074:	b29a      	uxth	r2, r3
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800607a:	e0c8      	b.n	800620e <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 3U)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006080:	b29b      	uxth	r3, r3
 8006082:	2b03      	cmp	r3, #3
 8006084:	d129      	bne.n	80060da <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	685a      	ldr	r2, [r3, #4]
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006094:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	2b04      	cmp	r3, #4
 800609a:	d00a      	beq.n	80060b2 <I2C_MasterReceive_BTF+0x86>
 800609c:	68fb      	ldr	r3, [r7, #12]
 800609e:	2b02      	cmp	r3, #2
 80060a0:	d007      	beq.n	80060b2 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	681a      	ldr	r2, [r3, #0]
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80060b0:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	691a      	ldr	r2, [r3, #16]
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060bc:	b2d2      	uxtb	r2, r2
 80060be:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060c4:	1c5a      	adds	r2, r3, #1
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80060ce:	b29b      	uxth	r3, r3
 80060d0:	3b01      	subs	r3, #1
 80060d2:	b29a      	uxth	r2, r3
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 80060d8:	e099      	b.n	800620e <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 2U)
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80060de:	b29b      	uxth	r3, r3
 80060e0:	2b02      	cmp	r3, #2
 80060e2:	f040 8081 	bne.w	80061e8 <I2C_MasterReceive_BTF+0x1bc>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	2b01      	cmp	r3, #1
 80060ea:	d002      	beq.n	80060f2 <I2C_MasterReceive_BTF+0xc6>
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	2b10      	cmp	r3, #16
 80060f0:	d108      	bne.n	8006104 <I2C_MasterReceive_BTF+0xd8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	681a      	ldr	r2, [r3, #0]
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006100:	601a      	str	r2, [r3, #0]
 8006102:	e019      	b.n	8006138 <I2C_MasterReceive_BTF+0x10c>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8006104:	68fb      	ldr	r3, [r7, #12]
 8006106:	2b04      	cmp	r3, #4
 8006108:	d002      	beq.n	8006110 <I2C_MasterReceive_BTF+0xe4>
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	2b02      	cmp	r3, #2
 800610e:	d108      	bne.n	8006122 <I2C_MasterReceive_BTF+0xf6>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	681b      	ldr	r3, [r3, #0]
 8006114:	681a      	ldr	r2, [r3, #0]
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800611e:	601a      	str	r2, [r3, #0]
 8006120:	e00a      	b.n	8006138 <I2C_MasterReceive_BTF+0x10c>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	2b10      	cmp	r3, #16
 8006126:	d007      	beq.n	8006138 <I2C_MasterReceive_BTF+0x10c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	681a      	ldr	r2, [r3, #0]
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006136:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	691a      	ldr	r2, [r3, #16]
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006142:	b2d2      	uxtb	r2, r2
 8006144:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800614a:	1c5a      	adds	r2, r3, #1
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006154:	b29b      	uxth	r3, r3
 8006156:	3b01      	subs	r3, #1
 8006158:	b29a      	uxth	r2, r3
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	691a      	ldr	r2, [r3, #16]
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006168:	b2d2      	uxtb	r2, r2
 800616a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006170:	1c5a      	adds	r2, r3, #1
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800617a:	b29b      	uxth	r3, r3
 800617c:	3b01      	subs	r3, #1
 800617e:	b29a      	uxth	r2, r3
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8006184:	687b      	ldr	r3, [r7, #4]
 8006186:	681b      	ldr	r3, [r3, #0]
 8006188:	685a      	ldr	r2, [r3, #4]
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8006192:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	2220      	movs	r2, #32
 8006198:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80061a2:	b2db      	uxtb	r3, r3
 80061a4:	2b40      	cmp	r3, #64	@ 0x40
 80061a6:	d10a      	bne.n	80061be <I2C_MasterReceive_BTF+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	2200      	movs	r2, #0
 80061ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	2200      	movs	r2, #0
 80061b4:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80061b6:	6878      	ldr	r0, [r7, #4]
 80061b8:	f7fd f904 	bl	80033c4 <HAL_I2C_MemRxCpltCallback>
}
 80061bc:	e027      	b.n	800620e <I2C_MasterReceive_BTF+0x1e2>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	2200      	movs	r2, #0
 80061c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	2b08      	cmp	r3, #8
 80061ca:	d002      	beq.n	80061d2 <I2C_MasterReceive_BTF+0x1a6>
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	2b20      	cmp	r3, #32
 80061d0:	d103      	bne.n	80061da <I2C_MasterReceive_BTF+0x1ae>
        hi2c->PreviousState = I2C_STATE_NONE;
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	2200      	movs	r2, #0
 80061d6:	631a      	str	r2, [r3, #48]	@ 0x30
 80061d8:	e002      	b.n	80061e0 <I2C_MasterReceive_BTF+0x1b4>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	2212      	movs	r2, #18
 80061de:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80061e0:	6878      	ldr	r0, [r7, #4]
 80061e2:	f7ff fc67 	bl	8005ab4 <HAL_I2C_MasterRxCpltCallback>
}
 80061e6:	e012      	b.n	800620e <I2C_MasterReceive_BTF+0x1e2>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	691a      	ldr	r2, [r3, #16]
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061f2:	b2d2      	uxtb	r2, r2
 80061f4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061fa:	1c5a      	adds	r2, r3, #1
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006204:	b29b      	uxth	r3, r3
 8006206:	3b01      	subs	r3, #1
 8006208:	b29a      	uxth	r2, r3
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800620e:	bf00      	nop
 8006210:	3710      	adds	r7, #16
 8006212:	46bd      	mov	sp, r7
 8006214:	bd80      	pop	{r7, pc}

08006216 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8006216:	b480      	push	{r7}
 8006218:	b083      	sub	sp, #12
 800621a:	af00      	add	r7, sp, #0
 800621c:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006224:	b2db      	uxtb	r3, r3
 8006226:	2b40      	cmp	r3, #64	@ 0x40
 8006228:	d117      	bne.n	800625a <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800622e:	2b00      	cmp	r3, #0
 8006230:	d109      	bne.n	8006246 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8006232:	687b      	ldr	r3, [r7, #4]
 8006234:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006236:	b2db      	uxtb	r3, r3
 8006238:	461a      	mov	r2, r3
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006242:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8006244:	e067      	b.n	8006316 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800624a:	b2db      	uxtb	r3, r3
 800624c:	f043 0301 	orr.w	r3, r3, #1
 8006250:	b2da      	uxtb	r2, r3
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	611a      	str	r2, [r3, #16]
}
 8006258:	e05d      	b.n	8006316 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	691b      	ldr	r3, [r3, #16]
 800625e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006262:	d133      	bne.n	80062cc <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800626a:	b2db      	uxtb	r3, r3
 800626c:	2b21      	cmp	r3, #33	@ 0x21
 800626e:	d109      	bne.n	8006284 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006274:	b2db      	uxtb	r3, r3
 8006276:	461a      	mov	r2, r3
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006280:	611a      	str	r2, [r3, #16]
 8006282:	e008      	b.n	8006296 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006288:	b2db      	uxtb	r3, r3
 800628a:	f043 0301 	orr.w	r3, r3, #1
 800628e:	b2da      	uxtb	r2, r3
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800629a:	2b00      	cmp	r3, #0
 800629c:	d004      	beq.n	80062a8 <I2C_Master_SB+0x92>
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80062a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062a4:	2b00      	cmp	r3, #0
 80062a6:	d108      	bne.n	80062ba <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d032      	beq.n	8006316 <I2C_Master_SB+0x100>
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80062b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d02d      	beq.n	8006316 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	681b      	ldr	r3, [r3, #0]
 80062be:	685a      	ldr	r2, [r3, #4]
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80062c8:	605a      	str	r2, [r3, #4]
}
 80062ca:	e024      	b.n	8006316 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80062d0:	2b00      	cmp	r3, #0
 80062d2:	d10e      	bne.n	80062f2 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80062d8:	b29b      	uxth	r3, r3
 80062da:	11db      	asrs	r3, r3, #7
 80062dc:	b2db      	uxtb	r3, r3
 80062de:	f003 0306 	and.w	r3, r3, #6
 80062e2:	b2db      	uxtb	r3, r3
 80062e4:	f063 030f 	orn	r3, r3, #15
 80062e8:	b2da      	uxtb	r2, r3
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	611a      	str	r2, [r3, #16]
}
 80062f0:	e011      	b.n	8006316 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80062f6:	2b01      	cmp	r3, #1
 80062f8:	d10d      	bne.n	8006316 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80062fe:	b29b      	uxth	r3, r3
 8006300:	11db      	asrs	r3, r3, #7
 8006302:	b2db      	uxtb	r3, r3
 8006304:	f003 0306 	and.w	r3, r3, #6
 8006308:	b2db      	uxtb	r3, r3
 800630a:	f063 030e 	orn	r3, r3, #14
 800630e:	b2da      	uxtb	r2, r3
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	611a      	str	r2, [r3, #16]
}
 8006316:	bf00      	nop
 8006318:	370c      	adds	r7, #12
 800631a:	46bd      	mov	sp, r7
 800631c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006320:	4770      	bx	lr

08006322 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8006322:	b480      	push	{r7}
 8006324:	b083      	sub	sp, #12
 8006326:	af00      	add	r7, sp, #0
 8006328:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800632a:	687b      	ldr	r3, [r7, #4]
 800632c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800632e:	b2da      	uxtb	r2, r3
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800633a:	2b00      	cmp	r3, #0
 800633c:	d004      	beq.n	8006348 <I2C_Master_ADD10+0x26>
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006342:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006344:	2b00      	cmp	r3, #0
 8006346:	d108      	bne.n	800635a <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800634c:	2b00      	cmp	r3, #0
 800634e:	d00c      	beq.n	800636a <I2C_Master_ADD10+0x48>
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006354:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006356:	2b00      	cmp	r3, #0
 8006358:	d007      	beq.n	800636a <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	685a      	ldr	r2, [r3, #4]
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	681b      	ldr	r3, [r3, #0]
 8006364:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8006368:	605a      	str	r2, [r3, #4]
  }
}
 800636a:	bf00      	nop
 800636c:	370c      	adds	r7, #12
 800636e:	46bd      	mov	sp, r7
 8006370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006374:	4770      	bx	lr

08006376 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8006376:	b480      	push	{r7}
 8006378:	b091      	sub	sp, #68	@ 0x44
 800637a:	af00      	add	r7, sp, #0
 800637c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006384:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800638c:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006392:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800639a:	b2db      	uxtb	r3, r3
 800639c:	2b22      	cmp	r3, #34	@ 0x22
 800639e:	f040 8169 	bne.w	8006674 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80063a6:	2b00      	cmp	r3, #0
 80063a8:	d10f      	bne.n	80063ca <I2C_Master_ADDR+0x54>
 80063aa:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80063ae:	2b40      	cmp	r3, #64	@ 0x40
 80063b0:	d10b      	bne.n	80063ca <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80063b2:	2300      	movs	r3, #0
 80063b4:	633b      	str	r3, [r7, #48]	@ 0x30
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	681b      	ldr	r3, [r3, #0]
 80063ba:	695b      	ldr	r3, [r3, #20]
 80063bc:	633b      	str	r3, [r7, #48]	@ 0x30
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	699b      	ldr	r3, [r3, #24]
 80063c4:	633b      	str	r3, [r7, #48]	@ 0x30
 80063c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063c8:	e160      	b.n	800668c <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80063ce:	2b00      	cmp	r3, #0
 80063d0:	d11d      	bne.n	800640e <I2C_Master_ADDR+0x98>
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	691b      	ldr	r3, [r3, #16]
 80063d6:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80063da:	d118      	bne.n	800640e <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80063dc:	2300      	movs	r3, #0
 80063de:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	681b      	ldr	r3, [r3, #0]
 80063e4:	695b      	ldr	r3, [r3, #20]
 80063e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	681b      	ldr	r3, [r3, #0]
 80063ec:	699b      	ldr	r3, [r3, #24]
 80063ee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80063f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	681a      	ldr	r2, [r3, #0]
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	681b      	ldr	r3, [r3, #0]
 80063fc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006400:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006406:	1c5a      	adds	r2, r3, #1
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	651a      	str	r2, [r3, #80]	@ 0x50
 800640c:	e13e      	b.n	800668c <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006412:	b29b      	uxth	r3, r3
 8006414:	2b00      	cmp	r3, #0
 8006416:	d113      	bne.n	8006440 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006418:	2300      	movs	r3, #0
 800641a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	681b      	ldr	r3, [r3, #0]
 8006420:	695b      	ldr	r3, [r3, #20]
 8006422:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	681b      	ldr	r3, [r3, #0]
 8006428:	699b      	ldr	r3, [r3, #24]
 800642a:	62bb      	str	r3, [r7, #40]	@ 0x28
 800642c:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	681a      	ldr	r2, [r3, #0]
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800643c:	601a      	str	r2, [r3, #0]
 800643e:	e115      	b.n	800666c <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006444:	b29b      	uxth	r3, r3
 8006446:	2b01      	cmp	r3, #1
 8006448:	f040 808a 	bne.w	8006560 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800644c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800644e:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006452:	d137      	bne.n	80064c4 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	681a      	ldr	r2, [r3, #0]
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006462:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	685b      	ldr	r3, [r3, #4]
 800646a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800646e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006472:	d113      	bne.n	800649c <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	681a      	ldr	r2, [r3, #0]
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006482:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006484:	2300      	movs	r3, #0
 8006486:	627b      	str	r3, [r7, #36]	@ 0x24
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	681b      	ldr	r3, [r3, #0]
 800648c:	695b      	ldr	r3, [r3, #20]
 800648e:	627b      	str	r3, [r7, #36]	@ 0x24
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	699b      	ldr	r3, [r3, #24]
 8006496:	627b      	str	r3, [r7, #36]	@ 0x24
 8006498:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800649a:	e0e7      	b.n	800666c <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800649c:	2300      	movs	r3, #0
 800649e:	623b      	str	r3, [r7, #32]
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	695b      	ldr	r3, [r3, #20]
 80064a6:	623b      	str	r3, [r7, #32]
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	699b      	ldr	r3, [r3, #24]
 80064ae:	623b      	str	r3, [r7, #32]
 80064b0:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	681a      	ldr	r2, [r3, #0]
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80064c0:	601a      	str	r2, [r3, #0]
 80064c2:	e0d3      	b.n	800666c <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80064c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064c6:	2b08      	cmp	r3, #8
 80064c8:	d02e      	beq.n	8006528 <I2C_Master_ADDR+0x1b2>
 80064ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064cc:	2b20      	cmp	r3, #32
 80064ce:	d02b      	beq.n	8006528 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80064d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80064d2:	2b12      	cmp	r3, #18
 80064d4:	d102      	bne.n	80064dc <I2C_Master_ADDR+0x166>
 80064d6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064d8:	2b01      	cmp	r3, #1
 80064da:	d125      	bne.n	8006528 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80064dc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064de:	2b04      	cmp	r3, #4
 80064e0:	d00e      	beq.n	8006500 <I2C_Master_ADDR+0x18a>
 80064e2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064e4:	2b02      	cmp	r3, #2
 80064e6:	d00b      	beq.n	8006500 <I2C_Master_ADDR+0x18a>
 80064e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80064ea:	2b10      	cmp	r3, #16
 80064ec:	d008      	beq.n	8006500 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80064ee:	687b      	ldr	r3, [r7, #4]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	681a      	ldr	r2, [r3, #0]
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80064fc:	601a      	str	r2, [r3, #0]
 80064fe:	e007      	b.n	8006510 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	681a      	ldr	r2, [r3, #0]
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800650e:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006510:	2300      	movs	r3, #0
 8006512:	61fb      	str	r3, [r7, #28]
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	681b      	ldr	r3, [r3, #0]
 8006518:	695b      	ldr	r3, [r3, #20]
 800651a:	61fb      	str	r3, [r7, #28]
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	699b      	ldr	r3, [r3, #24]
 8006522:	61fb      	str	r3, [r7, #28]
 8006524:	69fb      	ldr	r3, [r7, #28]
 8006526:	e0a1      	b.n	800666c <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	681a      	ldr	r2, [r3, #0]
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006536:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006538:	2300      	movs	r3, #0
 800653a:	61bb      	str	r3, [r7, #24]
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	695b      	ldr	r3, [r3, #20]
 8006542:	61bb      	str	r3, [r7, #24]
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	699b      	ldr	r3, [r3, #24]
 800654a:	61bb      	str	r3, [r7, #24]
 800654c:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	681a      	ldr	r2, [r3, #0]
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800655c:	601a      	str	r2, [r3, #0]
 800655e:	e085      	b.n	800666c <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006564:	b29b      	uxth	r3, r3
 8006566:	2b02      	cmp	r3, #2
 8006568:	d14d      	bne.n	8006606 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800656a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800656c:	2b04      	cmp	r3, #4
 800656e:	d016      	beq.n	800659e <I2C_Master_ADDR+0x228>
 8006570:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006572:	2b02      	cmp	r3, #2
 8006574:	d013      	beq.n	800659e <I2C_Master_ADDR+0x228>
 8006576:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006578:	2b10      	cmp	r3, #16
 800657a:	d010      	beq.n	800659e <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	681a      	ldr	r2, [r3, #0]
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800658a:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	681a      	ldr	r2, [r3, #0]
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800659a:	601a      	str	r2, [r3, #0]
 800659c:	e007      	b.n	80065ae <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	681a      	ldr	r2, [r3, #0]
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80065ac:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	685b      	ldr	r3, [r3, #4]
 80065b4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80065b8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80065bc:	d117      	bne.n	80065ee <I2C_Master_ADDR+0x278>
 80065be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065c0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80065c4:	d00b      	beq.n	80065de <I2C_Master_ADDR+0x268>
 80065c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065c8:	2b01      	cmp	r3, #1
 80065ca:	d008      	beq.n	80065de <I2C_Master_ADDR+0x268>
 80065cc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065ce:	2b08      	cmp	r3, #8
 80065d0:	d005      	beq.n	80065de <I2C_Master_ADDR+0x268>
 80065d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065d4:	2b10      	cmp	r3, #16
 80065d6:	d002      	beq.n	80065de <I2C_Master_ADDR+0x268>
 80065d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065da:	2b20      	cmp	r3, #32
 80065dc:	d107      	bne.n	80065ee <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80065de:	687b      	ldr	r3, [r7, #4]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	685a      	ldr	r2, [r3, #4]
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80065ec:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80065ee:	2300      	movs	r3, #0
 80065f0:	617b      	str	r3, [r7, #20]
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	695b      	ldr	r3, [r3, #20]
 80065f8:	617b      	str	r3, [r7, #20]
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	699b      	ldr	r3, [r3, #24]
 8006600:	617b      	str	r3, [r7, #20]
 8006602:	697b      	ldr	r3, [r7, #20]
 8006604:	e032      	b.n	800666c <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	681a      	ldr	r2, [r3, #0]
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006614:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	685b      	ldr	r3, [r3, #4]
 800661c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006620:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006624:	d117      	bne.n	8006656 <I2C_Master_ADDR+0x2e0>
 8006626:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006628:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 800662c:	d00b      	beq.n	8006646 <I2C_Master_ADDR+0x2d0>
 800662e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006630:	2b01      	cmp	r3, #1
 8006632:	d008      	beq.n	8006646 <I2C_Master_ADDR+0x2d0>
 8006634:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006636:	2b08      	cmp	r3, #8
 8006638:	d005      	beq.n	8006646 <I2C_Master_ADDR+0x2d0>
 800663a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800663c:	2b10      	cmp	r3, #16
 800663e:	d002      	beq.n	8006646 <I2C_Master_ADDR+0x2d0>
 8006640:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006642:	2b20      	cmp	r3, #32
 8006644:	d107      	bne.n	8006656 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	685a      	ldr	r2, [r3, #4]
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006654:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006656:	2300      	movs	r3, #0
 8006658:	613b      	str	r3, [r7, #16]
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	695b      	ldr	r3, [r3, #20]
 8006660:	613b      	str	r3, [r7, #16]
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	699b      	ldr	r3, [r3, #24]
 8006668:	613b      	str	r3, [r7, #16]
 800666a:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	2200      	movs	r2, #0
 8006670:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8006672:	e00b      	b.n	800668c <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006674:	2300      	movs	r3, #0
 8006676:	60fb      	str	r3, [r7, #12]
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	695b      	ldr	r3, [r3, #20]
 800667e:	60fb      	str	r3, [r7, #12]
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	699b      	ldr	r3, [r3, #24]
 8006686:	60fb      	str	r3, [r7, #12]
 8006688:	68fb      	ldr	r3, [r7, #12]
}
 800668a:	e7ff      	b.n	800668c <I2C_Master_ADDR+0x316>
 800668c:	bf00      	nop
 800668e:	3744      	adds	r7, #68	@ 0x44
 8006690:	46bd      	mov	sp, r7
 8006692:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006696:	4770      	bx	lr

08006698 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8006698:	b580      	push	{r7, lr}
 800669a:	b084      	sub	sp, #16
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80066a0:	687b      	ldr	r3, [r7, #4]
 80066a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80066a6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80066ac:	b29b      	uxth	r3, r3
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d02b      	beq.n	800670a <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066b6:	781a      	ldrb	r2, [r3, #0]
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80066c2:	1c5a      	adds	r2, r3, #1
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80066cc:	b29b      	uxth	r3, r3
 80066ce:	3b01      	subs	r3, #1
 80066d0:	b29a      	uxth	r2, r3
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80066da:	b29b      	uxth	r3, r3
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d114      	bne.n	800670a <I2C_SlaveTransmit_TXE+0x72>
 80066e0:	7bfb      	ldrb	r3, [r7, #15]
 80066e2:	2b29      	cmp	r3, #41	@ 0x29
 80066e4:	d111      	bne.n	800670a <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	685a      	ldr	r2, [r3, #4]
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80066f4:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	2221      	movs	r2, #33	@ 0x21
 80066fa:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	2228      	movs	r2, #40	@ 0x28
 8006700:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006704:	6878      	ldr	r0, [r7, #4]
 8006706:	f7ff f9df 	bl	8005ac8 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800670a:	bf00      	nop
 800670c:	3710      	adds	r7, #16
 800670e:	46bd      	mov	sp, r7
 8006710:	bd80      	pop	{r7, pc}

08006712 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8006712:	b480      	push	{r7}
 8006714:	b083      	sub	sp, #12
 8006716:	af00      	add	r7, sp, #0
 8006718:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800671a:	687b      	ldr	r3, [r7, #4]
 800671c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800671e:	b29b      	uxth	r3, r3
 8006720:	2b00      	cmp	r3, #0
 8006722:	d011      	beq.n	8006748 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006728:	781a      	ldrb	r2, [r3, #0]
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006734:	1c5a      	adds	r2, r3, #1
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800673e:	b29b      	uxth	r3, r3
 8006740:	3b01      	subs	r3, #1
 8006742:	b29a      	uxth	r2, r3
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8006748:	bf00      	nop
 800674a:	370c      	adds	r7, #12
 800674c:	46bd      	mov	sp, r7
 800674e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006752:	4770      	bx	lr

08006754 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8006754:	b580      	push	{r7, lr}
 8006756:	b084      	sub	sp, #16
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006762:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006768:	b29b      	uxth	r3, r3
 800676a:	2b00      	cmp	r3, #0
 800676c:	d02c      	beq.n	80067c8 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	691a      	ldr	r2, [r3, #16]
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006778:	b2d2      	uxtb	r2, r2
 800677a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006780:	1c5a      	adds	r2, r3, #1
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800678a:	b29b      	uxth	r3, r3
 800678c:	3b01      	subs	r3, #1
 800678e:	b29a      	uxth	r2, r3
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006798:	b29b      	uxth	r3, r3
 800679a:	2b00      	cmp	r3, #0
 800679c:	d114      	bne.n	80067c8 <I2C_SlaveReceive_RXNE+0x74>
 800679e:	7bfb      	ldrb	r3, [r7, #15]
 80067a0:	2b2a      	cmp	r3, #42	@ 0x2a
 80067a2:	d111      	bne.n	80067c8 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	685a      	ldr	r2, [r3, #4]
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80067b2:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	2222      	movs	r2, #34	@ 0x22
 80067b8:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	2228      	movs	r2, #40	@ 0x28
 80067be:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80067c2:	6878      	ldr	r0, [r7, #4]
 80067c4:	f7ff f98a 	bl	8005adc <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80067c8:	bf00      	nop
 80067ca:	3710      	adds	r7, #16
 80067cc:	46bd      	mov	sp, r7
 80067ce:	bd80      	pop	{r7, pc}

080067d0 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80067d0:	b480      	push	{r7}
 80067d2:	b083      	sub	sp, #12
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80067dc:	b29b      	uxth	r3, r3
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d012      	beq.n	8006808 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	691a      	ldr	r2, [r3, #16]
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067ec:	b2d2      	uxtb	r2, r2
 80067ee:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067f4:	1c5a      	adds	r2, r3, #1
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80067fe:	b29b      	uxth	r3, r3
 8006800:	3b01      	subs	r3, #1
 8006802:	b29a      	uxth	r2, r3
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 8006808:	bf00      	nop
 800680a:	370c      	adds	r7, #12
 800680c:	46bd      	mov	sp, r7
 800680e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006812:	4770      	bx	lr

08006814 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8006814:	b580      	push	{r7, lr}
 8006816:	b084      	sub	sp, #16
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
 800681c:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800681e:	2300      	movs	r3, #0
 8006820:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006828:	b2db      	uxtb	r3, r3
 800682a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 800682e:	2b28      	cmp	r3, #40	@ 0x28
 8006830:	d125      	bne.n	800687e <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	681b      	ldr	r3, [r3, #0]
 8006836:	685a      	ldr	r2, [r3, #4]
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006840:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8006842:	683b      	ldr	r3, [r7, #0]
 8006844:	f003 0304 	and.w	r3, r3, #4
 8006848:	2b00      	cmp	r3, #0
 800684a:	d101      	bne.n	8006850 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 800684c:	2301      	movs	r3, #1
 800684e:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8006850:	683b      	ldr	r3, [r7, #0]
 8006852:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006856:	2b00      	cmp	r3, #0
 8006858:	d103      	bne.n	8006862 <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	68db      	ldr	r3, [r3, #12]
 800685e:	81bb      	strh	r3, [r7, #12]
 8006860:	e002      	b.n	8006868 <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	699b      	ldr	r3, [r3, #24]
 8006866:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	2200      	movs	r2, #0
 800686c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8006870:	89ba      	ldrh	r2, [r7, #12]
 8006872:	7bfb      	ldrb	r3, [r7, #15]
 8006874:	4619      	mov	r1, r3
 8006876:	6878      	ldr	r0, [r7, #4]
 8006878:	f7ff f93a 	bl	8005af0 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800687c:	e00e      	b.n	800689c <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800687e:	2300      	movs	r3, #0
 8006880:	60bb      	str	r3, [r7, #8]
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	695b      	ldr	r3, [r3, #20]
 8006888:	60bb      	str	r3, [r7, #8]
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	699b      	ldr	r3, [r3, #24]
 8006890:	60bb      	str	r3, [r7, #8]
 8006892:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	2200      	movs	r2, #0
 8006898:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 800689c:	bf00      	nop
 800689e:	3710      	adds	r7, #16
 80068a0:	46bd      	mov	sp, r7
 80068a2:	bd80      	pop	{r7, pc}

080068a4 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80068a4:	b580      	push	{r7, lr}
 80068a6:	b084      	sub	sp, #16
 80068a8:	af00      	add	r7, sp, #0
 80068aa:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80068b2:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	685a      	ldr	r2, [r3, #4]
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 80068c2:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80068c4:	2300      	movs	r3, #0
 80068c6:	60bb      	str	r3, [r7, #8]
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	695b      	ldr	r3, [r3, #20]
 80068ce:	60bb      	str	r3, [r7, #8]
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	681a      	ldr	r2, [r3, #0]
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	f042 0201 	orr.w	r2, r2, #1
 80068de:	601a      	str	r2, [r3, #0]
 80068e0:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	681a      	ldr	r2, [r3, #0]
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80068f0:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	681b      	ldr	r3, [r3, #0]
 80068f6:	685b      	ldr	r3, [r3, #4]
 80068f8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80068fc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006900:	d172      	bne.n	80069e8 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006902:	7bfb      	ldrb	r3, [r7, #15]
 8006904:	2b22      	cmp	r3, #34	@ 0x22
 8006906:	d002      	beq.n	800690e <I2C_Slave_STOPF+0x6a>
 8006908:	7bfb      	ldrb	r3, [r7, #15]
 800690a:	2b2a      	cmp	r3, #42	@ 0x2a
 800690c:	d135      	bne.n	800697a <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	685b      	ldr	r3, [r3, #4]
 8006916:	b29a      	uxth	r2, r3
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006920:	b29b      	uxth	r3, r3
 8006922:	2b00      	cmp	r3, #0
 8006924:	d005      	beq.n	8006932 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800692a:	f043 0204 	orr.w	r2, r3, #4
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	685a      	ldr	r2, [r3, #4]
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006940:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006946:	4618      	mov	r0, r3
 8006948:	f7fd fc92 	bl	8004270 <HAL_DMA_GetState>
 800694c:	4603      	mov	r3, r0
 800694e:	2b01      	cmp	r3, #1
 8006950:	d049      	beq.n	80069e6 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006956:	4a69      	ldr	r2, [pc, #420]	@ (8006afc <I2C_Slave_STOPF+0x258>)
 8006958:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800695e:	4618      	mov	r0, r3
 8006960:	f7fd fada 	bl	8003f18 <HAL_DMA_Abort_IT>
 8006964:	4603      	mov	r3, r0
 8006966:	2b00      	cmp	r3, #0
 8006968:	d03d      	beq.n	80069e6 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800696e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006970:	687a      	ldr	r2, [r7, #4]
 8006972:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006974:	4610      	mov	r0, r2
 8006976:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006978:	e035      	b.n	80069e6 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	685b      	ldr	r3, [r3, #4]
 8006982:	b29a      	uxth	r2, r3
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800698c:	b29b      	uxth	r3, r3
 800698e:	2b00      	cmp	r3, #0
 8006990:	d005      	beq.n	800699e <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006996:	f043 0204 	orr.w	r2, r3, #4
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	681b      	ldr	r3, [r3, #0]
 80069a2:	685a      	ldr	r2, [r3, #4]
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80069ac:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80069b2:	4618      	mov	r0, r3
 80069b4:	f7fd fc5c 	bl	8004270 <HAL_DMA_GetState>
 80069b8:	4603      	mov	r3, r0
 80069ba:	2b01      	cmp	r3, #1
 80069bc:	d014      	beq.n	80069e8 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80069c2:	4a4e      	ldr	r2, [pc, #312]	@ (8006afc <I2C_Slave_STOPF+0x258>)
 80069c4:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80069ca:	4618      	mov	r0, r3
 80069cc:	f7fd faa4 	bl	8003f18 <HAL_DMA_Abort_IT>
 80069d0:	4603      	mov	r3, r0
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d008      	beq.n	80069e8 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80069da:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80069dc:	687a      	ldr	r2, [r7, #4]
 80069de:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80069e0:	4610      	mov	r0, r2
 80069e2:	4798      	blx	r3
 80069e4:	e000      	b.n	80069e8 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80069e6:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80069ec:	b29b      	uxth	r3, r3
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d03e      	beq.n	8006a70 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	695b      	ldr	r3, [r3, #20]
 80069f8:	f003 0304 	and.w	r3, r3, #4
 80069fc:	2b04      	cmp	r3, #4
 80069fe:	d112      	bne.n	8006a26 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	681b      	ldr	r3, [r3, #0]
 8006a04:	691a      	ldr	r2, [r3, #16]
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a0a:	b2d2      	uxtb	r2, r2
 8006a0c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a12:	1c5a      	adds	r2, r3, #1
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006a18:	687b      	ldr	r3, [r7, #4]
 8006a1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a1c:	b29b      	uxth	r3, r3
 8006a1e:	3b01      	subs	r3, #1
 8006a20:	b29a      	uxth	r2, r3
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	695b      	ldr	r3, [r3, #20]
 8006a2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006a30:	2b40      	cmp	r3, #64	@ 0x40
 8006a32:	d112      	bne.n	8006a5a <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	681b      	ldr	r3, [r3, #0]
 8006a38:	691a      	ldr	r2, [r3, #16]
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a3e:	b2d2      	uxtb	r2, r2
 8006a40:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006a46:	1c5a      	adds	r2, r3, #1
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a50:	b29b      	uxth	r3, r3
 8006a52:	3b01      	subs	r3, #1
 8006a54:	b29a      	uxth	r2, r3
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8006a5a:	687b      	ldr	r3, [r7, #4]
 8006a5c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a5e:	b29b      	uxth	r3, r3
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d005      	beq.n	8006a70 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a68:	f043 0204 	orr.w	r2, r3, #4
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d003      	beq.n	8006a80 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8006a78:	6878      	ldr	r0, [r7, #4]
 8006a7a:	f000 f8b7 	bl	8006bec <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8006a7e:	e039      	b.n	8006af4 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006a80:	7bfb      	ldrb	r3, [r7, #15]
 8006a82:	2b2a      	cmp	r3, #42	@ 0x2a
 8006a84:	d109      	bne.n	8006a9a <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	2200      	movs	r2, #0
 8006a8a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	2228      	movs	r2, #40	@ 0x28
 8006a90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006a94:	6878      	ldr	r0, [r7, #4]
 8006a96:	f7ff f821 	bl	8005adc <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006aa0:	b2db      	uxtb	r3, r3
 8006aa2:	2b28      	cmp	r3, #40	@ 0x28
 8006aa4:	d111      	bne.n	8006aca <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006aa6:	687b      	ldr	r3, [r7, #4]
 8006aa8:	4a15      	ldr	r2, [pc, #84]	@ (8006b00 <I2C_Slave_STOPF+0x25c>)
 8006aaa:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	2200      	movs	r2, #0
 8006ab0:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	2220      	movs	r2, #32
 8006ab6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	2200      	movs	r2, #0
 8006abe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8006ac2:	6878      	ldr	r0, [r7, #4]
 8006ac4:	f7ff f822 	bl	8005b0c <HAL_I2C_ListenCpltCallback>
}
 8006ac8:	e014      	b.n	8006af4 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006ace:	2b22      	cmp	r3, #34	@ 0x22
 8006ad0:	d002      	beq.n	8006ad8 <I2C_Slave_STOPF+0x234>
 8006ad2:	7bfb      	ldrb	r3, [r7, #15]
 8006ad4:	2b22      	cmp	r3, #34	@ 0x22
 8006ad6:	d10d      	bne.n	8006af4 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	2200      	movs	r2, #0
 8006adc:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	2220      	movs	r2, #32
 8006ae2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	2200      	movs	r2, #0
 8006aea:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006aee:	6878      	ldr	r0, [r7, #4]
 8006af0:	f7fe fff4 	bl	8005adc <HAL_I2C_SlaveRxCpltCallback>
}
 8006af4:	bf00      	nop
 8006af6:	3710      	adds	r7, #16
 8006af8:	46bd      	mov	sp, r7
 8006afa:	bd80      	pop	{r7, pc}
 8006afc:	08007385 	.word	0x08007385
 8006b00:	ffff0000 	.word	0xffff0000

08006b04 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b084      	sub	sp, #16
 8006b08:	af00      	add	r7, sp, #0
 8006b0a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006b12:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b18:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8006b1a:	68bb      	ldr	r3, [r7, #8]
 8006b1c:	2b08      	cmp	r3, #8
 8006b1e:	d002      	beq.n	8006b26 <I2C_Slave_AF+0x22>
 8006b20:	68bb      	ldr	r3, [r7, #8]
 8006b22:	2b20      	cmp	r3, #32
 8006b24:	d129      	bne.n	8006b7a <I2C_Slave_AF+0x76>
 8006b26:	7bfb      	ldrb	r3, [r7, #15]
 8006b28:	2b28      	cmp	r3, #40	@ 0x28
 8006b2a:	d126      	bne.n	8006b7a <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	4a2e      	ldr	r2, [pc, #184]	@ (8006be8 <I2C_Slave_AF+0xe4>)
 8006b30:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	681b      	ldr	r3, [r3, #0]
 8006b36:	685a      	ldr	r2, [r3, #4]
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006b40:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006b4a:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	681a      	ldr	r2, [r3, #0]
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006b5a:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	2200      	movs	r2, #0
 8006b60:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	2220      	movs	r2, #32
 8006b66:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	2200      	movs	r2, #0
 8006b6e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8006b72:	6878      	ldr	r0, [r7, #4]
 8006b74:	f7fe ffca 	bl	8005b0c <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8006b78:	e031      	b.n	8006bde <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8006b7a:	7bfb      	ldrb	r3, [r7, #15]
 8006b7c:	2b21      	cmp	r3, #33	@ 0x21
 8006b7e:	d129      	bne.n	8006bd4 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	4a19      	ldr	r2, [pc, #100]	@ (8006be8 <I2C_Slave_AF+0xe4>)
 8006b84:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	2221      	movs	r2, #33	@ 0x21
 8006b8a:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	2220      	movs	r2, #32
 8006b90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	2200      	movs	r2, #0
 8006b98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	685a      	ldr	r2, [r3, #4]
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006baa:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006bb4:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	681a      	ldr	r2, [r3, #0]
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006bc4:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 8006bc6:	6878      	ldr	r0, [r7, #4]
 8006bc8:	f7fd ff78 	bl	8004abc <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006bcc:	6878      	ldr	r0, [r7, #4]
 8006bce:	f7fe ff7b 	bl	8005ac8 <HAL_I2C_SlaveTxCpltCallback>
}
 8006bd2:	e004      	b.n	8006bde <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006bdc:	615a      	str	r2, [r3, #20]
}
 8006bde:	bf00      	nop
 8006be0:	3710      	adds	r7, #16
 8006be2:	46bd      	mov	sp, r7
 8006be4:	bd80      	pop	{r7, pc}
 8006be6:	bf00      	nop
 8006be8:	ffff0000 	.word	0xffff0000

08006bec <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8006bec:	b580      	push	{r7, lr}
 8006bee:	b084      	sub	sp, #16
 8006bf0:	af00      	add	r7, sp, #0
 8006bf2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006bfa:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006c02:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8006c04:	7bbb      	ldrb	r3, [r7, #14]
 8006c06:	2b10      	cmp	r3, #16
 8006c08:	d002      	beq.n	8006c10 <I2C_ITError+0x24>
 8006c0a:	7bbb      	ldrb	r3, [r7, #14]
 8006c0c:	2b40      	cmp	r3, #64	@ 0x40
 8006c0e:	d10a      	bne.n	8006c26 <I2C_ITError+0x3a>
 8006c10:	7bfb      	ldrb	r3, [r7, #15]
 8006c12:	2b22      	cmp	r3, #34	@ 0x22
 8006c14:	d107      	bne.n	8006c26 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	681a      	ldr	r2, [r3, #0]
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006c24:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006c26:	7bfb      	ldrb	r3, [r7, #15]
 8006c28:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006c2c:	2b28      	cmp	r3, #40	@ 0x28
 8006c2e:	d107      	bne.n	8006c40 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8006c30:	687b      	ldr	r3, [r7, #4]
 8006c32:	2200      	movs	r2, #0
 8006c34:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	2228      	movs	r2, #40	@ 0x28
 8006c3a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8006c3e:	e015      	b.n	8006c6c <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	681b      	ldr	r3, [r3, #0]
 8006c44:	685b      	ldr	r3, [r3, #4]
 8006c46:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006c4a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006c4e:	d00a      	beq.n	8006c66 <I2C_ITError+0x7a>
 8006c50:	7bfb      	ldrb	r3, [r7, #15]
 8006c52:	2b60      	cmp	r3, #96	@ 0x60
 8006c54:	d007      	beq.n	8006c66 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	2220      	movs	r2, #32
 8006c5a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	2200      	movs	r2, #0
 8006c62:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8006c66:	687b      	ldr	r3, [r7, #4]
 8006c68:	2200      	movs	r2, #0
 8006c6a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	685b      	ldr	r3, [r3, #4]
 8006c72:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006c76:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006c7a:	d162      	bne.n	8006d42 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	685a      	ldr	r2, [r3, #4]
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006c8a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c90:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006c94:	b2db      	uxtb	r3, r3
 8006c96:	2b01      	cmp	r3, #1
 8006c98:	d020      	beq.n	8006cdc <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c9e:	4a6a      	ldr	r2, [pc, #424]	@ (8006e48 <I2C_ITError+0x25c>)
 8006ca0:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ca6:	4618      	mov	r0, r3
 8006ca8:	f7fd f936 	bl	8003f18 <HAL_DMA_Abort_IT>
 8006cac:	4603      	mov	r3, r0
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	f000 8089 	beq.w	8006dc6 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	681a      	ldr	r2, [r3, #0]
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f022 0201 	bic.w	r2, r2, #1
 8006cc2:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	2220      	movs	r2, #32
 8006cc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006cd0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006cd2:	687a      	ldr	r2, [r7, #4]
 8006cd4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006cd6:	4610      	mov	r0, r2
 8006cd8:	4798      	blx	r3
 8006cda:	e074      	b.n	8006dc6 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ce0:	4a59      	ldr	r2, [pc, #356]	@ (8006e48 <I2C_ITError+0x25c>)
 8006ce2:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ce8:	4618      	mov	r0, r3
 8006cea:	f7fd f915 	bl	8003f18 <HAL_DMA_Abort_IT>
 8006cee:	4603      	mov	r3, r0
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d068      	beq.n	8006dc6 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	695b      	ldr	r3, [r3, #20]
 8006cfa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006cfe:	2b40      	cmp	r3, #64	@ 0x40
 8006d00:	d10b      	bne.n	8006d1a <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	691a      	ldr	r2, [r3, #16]
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d0c:	b2d2      	uxtb	r2, r2
 8006d0e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d14:	1c5a      	adds	r2, r3, #1
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	681a      	ldr	r2, [r3, #0]
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	f022 0201 	bic.w	r2, r2, #1
 8006d28:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	2220      	movs	r2, #32
 8006d2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006d36:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006d38:	687a      	ldr	r2, [r7, #4]
 8006d3a:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006d3c:	4610      	mov	r0, r2
 8006d3e:	4798      	blx	r3
 8006d40:	e041      	b.n	8006dc6 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006d48:	b2db      	uxtb	r3, r3
 8006d4a:	2b60      	cmp	r3, #96	@ 0x60
 8006d4c:	d125      	bne.n	8006d9a <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8006d4e:	687b      	ldr	r3, [r7, #4]
 8006d50:	2220      	movs	r2, #32
 8006d52:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	2200      	movs	r2, #0
 8006d5a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	695b      	ldr	r3, [r3, #20]
 8006d62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006d66:	2b40      	cmp	r3, #64	@ 0x40
 8006d68:	d10b      	bne.n	8006d82 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	691a      	ldr	r2, [r3, #16]
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d74:	b2d2      	uxtb	r2, r2
 8006d76:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006d7c:	1c5a      	adds	r2, r3, #1
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	681a      	ldr	r2, [r3, #0]
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	f022 0201 	bic.w	r2, r2, #1
 8006d90:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006d92:	6878      	ldr	r0, [r7, #4]
 8006d94:	f7fe fece 	bl	8005b34 <HAL_I2C_AbortCpltCallback>
 8006d98:	e015      	b.n	8006dc6 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	695b      	ldr	r3, [r3, #20]
 8006da0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006da4:	2b40      	cmp	r3, #64	@ 0x40
 8006da6:	d10b      	bne.n	8006dc0 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	681b      	ldr	r3, [r3, #0]
 8006dac:	691a      	ldr	r2, [r3, #16]
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006db2:	b2d2      	uxtb	r2, r2
 8006db4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006dba:	1c5a      	adds	r2, r3, #1
 8006dbc:	687b      	ldr	r3, [r7, #4]
 8006dbe:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8006dc0:	6878      	ldr	r0, [r7, #4]
 8006dc2:	f7fc fb27 	bl	8003414 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006dca:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8006dcc:	68bb      	ldr	r3, [r7, #8]
 8006dce:	f003 0301 	and.w	r3, r3, #1
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d10e      	bne.n	8006df4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8006dd6:	68bb      	ldr	r3, [r7, #8]
 8006dd8:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8006ddc:	2b00      	cmp	r3, #0
 8006dde:	d109      	bne.n	8006df4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8006de0:	68bb      	ldr	r3, [r7, #8]
 8006de2:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d104      	bne.n	8006df4 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8006dea:	68bb      	ldr	r3, [r7, #8]
 8006dec:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8006df0:	2b00      	cmp	r3, #0
 8006df2:	d007      	beq.n	8006e04 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	685a      	ldr	r2, [r3, #4]
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006e02:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006e0a:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006e10:	f003 0304 	and.w	r3, r3, #4
 8006e14:	2b04      	cmp	r3, #4
 8006e16:	d113      	bne.n	8006e40 <I2C_ITError+0x254>
 8006e18:	7bfb      	ldrb	r3, [r7, #15]
 8006e1a:	2b28      	cmp	r3, #40	@ 0x28
 8006e1c:	d110      	bne.n	8006e40 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	4a0a      	ldr	r2, [pc, #40]	@ (8006e4c <I2C_ITError+0x260>)
 8006e22:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	2200      	movs	r2, #0
 8006e28:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006e2a:	687b      	ldr	r3, [r7, #4]
 8006e2c:	2220      	movs	r2, #32
 8006e2e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	2200      	movs	r2, #0
 8006e36:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8006e3a:	6878      	ldr	r0, [r7, #4]
 8006e3c:	f7fe fe66 	bl	8005b0c <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006e40:	bf00      	nop
 8006e42:	3710      	adds	r7, #16
 8006e44:	46bd      	mov	sp, r7
 8006e46:	bd80      	pop	{r7, pc}
 8006e48:	08007385 	.word	0x08007385
 8006e4c:	ffff0000 	.word	0xffff0000

08006e50 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006e50:	b580      	push	{r7, lr}
 8006e52:	b088      	sub	sp, #32
 8006e54:	af02      	add	r7, sp, #8
 8006e56:	60f8      	str	r0, [r7, #12]
 8006e58:	4608      	mov	r0, r1
 8006e5a:	4611      	mov	r1, r2
 8006e5c:	461a      	mov	r2, r3
 8006e5e:	4603      	mov	r3, r0
 8006e60:	817b      	strh	r3, [r7, #10]
 8006e62:	460b      	mov	r3, r1
 8006e64:	813b      	strh	r3, [r7, #8]
 8006e66:	4613      	mov	r3, r2
 8006e68:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	681a      	ldr	r2, [r3, #0]
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006e78:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006e7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e7c:	9300      	str	r3, [sp, #0]
 8006e7e:	6a3b      	ldr	r3, [r7, #32]
 8006e80:	2200      	movs	r2, #0
 8006e82:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006e86:	68f8      	ldr	r0, [r7, #12]
 8006e88:	f000 fb24 	bl	80074d4 <I2C_WaitOnFlagUntilTimeout>
 8006e8c:	4603      	mov	r3, r0
 8006e8e:	2b00      	cmp	r3, #0
 8006e90:	d00d      	beq.n	8006eae <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	681b      	ldr	r3, [r3, #0]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006e9c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006ea0:	d103      	bne.n	8006eaa <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006ea2:	68fb      	ldr	r3, [r7, #12]
 8006ea4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006ea8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006eaa:	2303      	movs	r3, #3
 8006eac:	e05f      	b.n	8006f6e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006eae:	897b      	ldrh	r3, [r7, #10]
 8006eb0:	b2db      	uxtb	r3, r3
 8006eb2:	461a      	mov	r2, r3
 8006eb4:	68fb      	ldr	r3, [r7, #12]
 8006eb6:	681b      	ldr	r3, [r3, #0]
 8006eb8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006ebc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006ebe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ec0:	6a3a      	ldr	r2, [r7, #32]
 8006ec2:	492d      	ldr	r1, [pc, #180]	@ (8006f78 <I2C_RequestMemoryWrite+0x128>)
 8006ec4:	68f8      	ldr	r0, [r7, #12]
 8006ec6:	f000 fb7f 	bl	80075c8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006eca:	4603      	mov	r3, r0
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d001      	beq.n	8006ed4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8006ed0:	2301      	movs	r3, #1
 8006ed2:	e04c      	b.n	8006f6e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006ed4:	2300      	movs	r3, #0
 8006ed6:	617b      	str	r3, [r7, #20]
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	681b      	ldr	r3, [r3, #0]
 8006edc:	695b      	ldr	r3, [r3, #20]
 8006ede:	617b      	str	r3, [r7, #20]
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	699b      	ldr	r3, [r3, #24]
 8006ee6:	617b      	str	r3, [r7, #20]
 8006ee8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006eea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006eec:	6a39      	ldr	r1, [r7, #32]
 8006eee:	68f8      	ldr	r0, [r7, #12]
 8006ef0:	f000 fc0a 	bl	8007708 <I2C_WaitOnTXEFlagUntilTimeout>
 8006ef4:	4603      	mov	r3, r0
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d00d      	beq.n	8006f16 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006efe:	2b04      	cmp	r3, #4
 8006f00:	d107      	bne.n	8006f12 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	681a      	ldr	r2, [r3, #0]
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006f10:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006f12:	2301      	movs	r3, #1
 8006f14:	e02b      	b.n	8006f6e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006f16:	88fb      	ldrh	r3, [r7, #6]
 8006f18:	2b01      	cmp	r3, #1
 8006f1a:	d105      	bne.n	8006f28 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006f1c:	893b      	ldrh	r3, [r7, #8]
 8006f1e:	b2da      	uxtb	r2, r3
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	611a      	str	r2, [r3, #16]
 8006f26:	e021      	b.n	8006f6c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006f28:	893b      	ldrh	r3, [r7, #8]
 8006f2a:	0a1b      	lsrs	r3, r3, #8
 8006f2c:	b29b      	uxth	r3, r3
 8006f2e:	b2da      	uxtb	r2, r3
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006f36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006f38:	6a39      	ldr	r1, [r7, #32]
 8006f3a:	68f8      	ldr	r0, [r7, #12]
 8006f3c:	f000 fbe4 	bl	8007708 <I2C_WaitOnTXEFlagUntilTimeout>
 8006f40:	4603      	mov	r3, r0
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d00d      	beq.n	8006f62 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f4a:	2b04      	cmp	r3, #4
 8006f4c:	d107      	bne.n	8006f5e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	681a      	ldr	r2, [r3, #0]
 8006f54:	68fb      	ldr	r3, [r7, #12]
 8006f56:	681b      	ldr	r3, [r3, #0]
 8006f58:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006f5c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8006f5e:	2301      	movs	r3, #1
 8006f60:	e005      	b.n	8006f6e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006f62:	893b      	ldrh	r3, [r7, #8]
 8006f64:	b2da      	uxtb	r2, r3
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8006f6c:	2300      	movs	r3, #0
}
 8006f6e:	4618      	mov	r0, r3
 8006f70:	3718      	adds	r7, #24
 8006f72:	46bd      	mov	sp, r7
 8006f74:	bd80      	pop	{r7, pc}
 8006f76:	bf00      	nop
 8006f78:	00010002 	.word	0x00010002

08006f7c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	b088      	sub	sp, #32
 8006f80:	af02      	add	r7, sp, #8
 8006f82:	60f8      	str	r0, [r7, #12]
 8006f84:	4608      	mov	r0, r1
 8006f86:	4611      	mov	r1, r2
 8006f88:	461a      	mov	r2, r3
 8006f8a:	4603      	mov	r3, r0
 8006f8c:	817b      	strh	r3, [r7, #10]
 8006f8e:	460b      	mov	r3, r1
 8006f90:	813b      	strh	r3, [r7, #8]
 8006f92:	4613      	mov	r3, r2
 8006f94:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	681a      	ldr	r2, [r3, #0]
 8006f9c:	68fb      	ldr	r3, [r7, #12]
 8006f9e:	681b      	ldr	r3, [r3, #0]
 8006fa0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006fa4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	681a      	ldr	r2, [r3, #0]
 8006fac:	68fb      	ldr	r3, [r7, #12]
 8006fae:	681b      	ldr	r3, [r3, #0]
 8006fb0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006fb4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006fb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fb8:	9300      	str	r3, [sp, #0]
 8006fba:	6a3b      	ldr	r3, [r7, #32]
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006fc2:	68f8      	ldr	r0, [r7, #12]
 8006fc4:	f000 fa86 	bl	80074d4 <I2C_WaitOnFlagUntilTimeout>
 8006fc8:	4603      	mov	r3, r0
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d00d      	beq.n	8006fea <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006fce:	68fb      	ldr	r3, [r7, #12]
 8006fd0:	681b      	ldr	r3, [r3, #0]
 8006fd2:	681b      	ldr	r3, [r3, #0]
 8006fd4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006fd8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006fdc:	d103      	bne.n	8006fe6 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006fe4:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006fe6:	2303      	movs	r3, #3
 8006fe8:	e0aa      	b.n	8007140 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006fea:	897b      	ldrh	r3, [r7, #10]
 8006fec:	b2db      	uxtb	r3, r3
 8006fee:	461a      	mov	r2, r3
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006ff8:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006ffa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006ffc:	6a3a      	ldr	r2, [r7, #32]
 8006ffe:	4952      	ldr	r1, [pc, #328]	@ (8007148 <I2C_RequestMemoryRead+0x1cc>)
 8007000:	68f8      	ldr	r0, [r7, #12]
 8007002:	f000 fae1 	bl	80075c8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007006:	4603      	mov	r3, r0
 8007008:	2b00      	cmp	r3, #0
 800700a:	d001      	beq.n	8007010 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800700c:	2301      	movs	r3, #1
 800700e:	e097      	b.n	8007140 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007010:	2300      	movs	r3, #0
 8007012:	617b      	str	r3, [r7, #20]
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	695b      	ldr	r3, [r3, #20]
 800701a:	617b      	str	r3, [r7, #20]
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	699b      	ldr	r3, [r3, #24]
 8007022:	617b      	str	r3, [r7, #20]
 8007024:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007026:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007028:	6a39      	ldr	r1, [r7, #32]
 800702a:	68f8      	ldr	r0, [r7, #12]
 800702c:	f000 fb6c 	bl	8007708 <I2C_WaitOnTXEFlagUntilTimeout>
 8007030:	4603      	mov	r3, r0
 8007032:	2b00      	cmp	r3, #0
 8007034:	d00d      	beq.n	8007052 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800703a:	2b04      	cmp	r3, #4
 800703c:	d107      	bne.n	800704e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	681b      	ldr	r3, [r3, #0]
 8007042:	681a      	ldr	r2, [r3, #0]
 8007044:	68fb      	ldr	r3, [r7, #12]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800704c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800704e:	2301      	movs	r3, #1
 8007050:	e076      	b.n	8007140 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007052:	88fb      	ldrh	r3, [r7, #6]
 8007054:	2b01      	cmp	r3, #1
 8007056:	d105      	bne.n	8007064 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007058:	893b      	ldrh	r3, [r7, #8]
 800705a:	b2da      	uxtb	r2, r3
 800705c:	68fb      	ldr	r3, [r7, #12]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	611a      	str	r2, [r3, #16]
 8007062:	e021      	b.n	80070a8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8007064:	893b      	ldrh	r3, [r7, #8]
 8007066:	0a1b      	lsrs	r3, r3, #8
 8007068:	b29b      	uxth	r3, r3
 800706a:	b2da      	uxtb	r2, r3
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8007072:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007074:	6a39      	ldr	r1, [r7, #32]
 8007076:	68f8      	ldr	r0, [r7, #12]
 8007078:	f000 fb46 	bl	8007708 <I2C_WaitOnTXEFlagUntilTimeout>
 800707c:	4603      	mov	r3, r0
 800707e:	2b00      	cmp	r3, #0
 8007080:	d00d      	beq.n	800709e <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8007082:	68fb      	ldr	r3, [r7, #12]
 8007084:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007086:	2b04      	cmp	r3, #4
 8007088:	d107      	bne.n	800709a <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	681b      	ldr	r3, [r3, #0]
 800708e:	681a      	ldr	r2, [r3, #0]
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	681b      	ldr	r3, [r3, #0]
 8007094:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007098:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800709a:	2301      	movs	r3, #1
 800709c:	e050      	b.n	8007140 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800709e:	893b      	ldrh	r3, [r7, #8]
 80070a0:	b2da      	uxtb	r2, r3
 80070a2:	68fb      	ldr	r3, [r7, #12]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80070a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80070aa:	6a39      	ldr	r1, [r7, #32]
 80070ac:	68f8      	ldr	r0, [r7, #12]
 80070ae:	f000 fb2b 	bl	8007708 <I2C_WaitOnTXEFlagUntilTimeout>
 80070b2:	4603      	mov	r3, r0
 80070b4:	2b00      	cmp	r3, #0
 80070b6:	d00d      	beq.n	80070d4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80070b8:	68fb      	ldr	r3, [r7, #12]
 80070ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80070bc:	2b04      	cmp	r3, #4
 80070be:	d107      	bne.n	80070d0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	681a      	ldr	r2, [r3, #0]
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80070ce:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80070d0:	2301      	movs	r3, #1
 80070d2:	e035      	b.n	8007140 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80070d4:	68fb      	ldr	r3, [r7, #12]
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	681a      	ldr	r2, [r3, #0]
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80070e2:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80070e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070e6:	9300      	str	r3, [sp, #0]
 80070e8:	6a3b      	ldr	r3, [r7, #32]
 80070ea:	2200      	movs	r2, #0
 80070ec:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80070f0:	68f8      	ldr	r0, [r7, #12]
 80070f2:	f000 f9ef 	bl	80074d4 <I2C_WaitOnFlagUntilTimeout>
 80070f6:	4603      	mov	r3, r0
 80070f8:	2b00      	cmp	r3, #0
 80070fa:	d00d      	beq.n	8007118 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007106:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800710a:	d103      	bne.n	8007114 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007112:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8007114:	2303      	movs	r3, #3
 8007116:	e013      	b.n	8007140 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8007118:	897b      	ldrh	r3, [r7, #10]
 800711a:	b2db      	uxtb	r3, r3
 800711c:	f043 0301 	orr.w	r3, r3, #1
 8007120:	b2da      	uxtb	r2, r3
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007128:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800712a:	6a3a      	ldr	r2, [r7, #32]
 800712c:	4906      	ldr	r1, [pc, #24]	@ (8007148 <I2C_RequestMemoryRead+0x1cc>)
 800712e:	68f8      	ldr	r0, [r7, #12]
 8007130:	f000 fa4a 	bl	80075c8 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007134:	4603      	mov	r3, r0
 8007136:	2b00      	cmp	r3, #0
 8007138:	d001      	beq.n	800713e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800713a:	2301      	movs	r3, #1
 800713c:	e000      	b.n	8007140 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800713e:	2300      	movs	r3, #0
}
 8007140:	4618      	mov	r0, r3
 8007142:	3718      	adds	r7, #24
 8007144:	46bd      	mov	sp, r7
 8007146:	bd80      	pop	{r7, pc}
 8007148:	00010002 	.word	0x00010002

0800714c <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 800714c:	b580      	push	{r7, lr}
 800714e:	b086      	sub	sp, #24
 8007150:	af00      	add	r7, sp, #0
 8007152:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007158:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800715a:	697b      	ldr	r3, [r7, #20]
 800715c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007160:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8007162:	697b      	ldr	r3, [r7, #20]
 8007164:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007168:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800716a:	697b      	ldr	r3, [r7, #20]
 800716c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800716e:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8007170:	697b      	ldr	r3, [r7, #20]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	685a      	ldr	r2, [r3, #4]
 8007176:	697b      	ldr	r3, [r7, #20]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800717e:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8007180:	697b      	ldr	r3, [r7, #20]
 8007182:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007184:	2b00      	cmp	r3, #0
 8007186:	d003      	beq.n	8007190 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8007188:	697b      	ldr	r3, [r7, #20]
 800718a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800718c:	2200      	movs	r2, #0
 800718e:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8007190:	697b      	ldr	r3, [r7, #20]
 8007192:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007194:	2b00      	cmp	r3, #0
 8007196:	d003      	beq.n	80071a0 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8007198:	697b      	ldr	r3, [r7, #20]
 800719a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800719c:	2200      	movs	r2, #0
 800719e:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 80071a0:	7cfb      	ldrb	r3, [r7, #19]
 80071a2:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 80071a6:	2b21      	cmp	r3, #33	@ 0x21
 80071a8:	d007      	beq.n	80071ba <I2C_DMAXferCplt+0x6e>
 80071aa:	7cfb      	ldrb	r3, [r7, #19]
 80071ac:	f003 0322 	and.w	r3, r3, #34	@ 0x22
 80071b0:	2b22      	cmp	r3, #34	@ 0x22
 80071b2:	d131      	bne.n	8007218 <I2C_DMAXferCplt+0xcc>
 80071b4:	7cbb      	ldrb	r3, [r7, #18]
 80071b6:	2b20      	cmp	r3, #32
 80071b8:	d12e      	bne.n	8007218 <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80071ba:	697b      	ldr	r3, [r7, #20]
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	685a      	ldr	r2, [r3, #4]
 80071c0:	697b      	ldr	r3, [r7, #20]
 80071c2:	681b      	ldr	r3, [r3, #0]
 80071c4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80071c8:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 80071ca:	697b      	ldr	r3, [r7, #20]
 80071cc:	2200      	movs	r2, #0
 80071ce:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80071d0:	7cfb      	ldrb	r3, [r7, #19]
 80071d2:	2b29      	cmp	r3, #41	@ 0x29
 80071d4:	d10a      	bne.n	80071ec <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80071d6:	697b      	ldr	r3, [r7, #20]
 80071d8:	2221      	movs	r2, #33	@ 0x21
 80071da:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80071dc:	697b      	ldr	r3, [r7, #20]
 80071de:	2228      	movs	r2, #40	@ 0x28
 80071e0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 80071e4:	6978      	ldr	r0, [r7, #20]
 80071e6:	f7fe fc6f 	bl	8005ac8 <HAL_I2C_SlaveTxCpltCallback>
 80071ea:	e00c      	b.n	8007206 <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80071ec:	7cfb      	ldrb	r3, [r7, #19]
 80071ee:	2b2a      	cmp	r3, #42	@ 0x2a
 80071f0:	d109      	bne.n	8007206 <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80071f2:	697b      	ldr	r3, [r7, #20]
 80071f4:	2222      	movs	r2, #34	@ 0x22
 80071f6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80071f8:	697b      	ldr	r3, [r7, #20]
 80071fa:	2228      	movs	r2, #40	@ 0x28
 80071fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007200:	6978      	ldr	r0, [r7, #20]
 8007202:	f7fe fc6b 	bl	8005adc <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8007206:	697b      	ldr	r3, [r7, #20]
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	685a      	ldr	r2, [r3, #4]
 800720c:	697b      	ldr	r3, [r7, #20]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8007214:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8007216:	e074      	b.n	8007302 <I2C_DMAXferCplt+0x1b6>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 8007218:	697b      	ldr	r3, [r7, #20]
 800721a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800721e:	b2db      	uxtb	r3, r3
 8007220:	2b00      	cmp	r3, #0
 8007222:	d06e      	beq.n	8007302 <I2C_DMAXferCplt+0x1b6>
    if (hi2c->XferCount == (uint16_t)1)
 8007224:	697b      	ldr	r3, [r7, #20]
 8007226:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8007228:	b29b      	uxth	r3, r3
 800722a:	2b01      	cmp	r3, #1
 800722c:	d107      	bne.n	800723e <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800722e:	697b      	ldr	r3, [r7, #20]
 8007230:	681b      	ldr	r3, [r3, #0]
 8007232:	681a      	ldr	r2, [r3, #0]
 8007234:	697b      	ldr	r3, [r7, #20]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800723c:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800723e:	697b      	ldr	r3, [r7, #20]
 8007240:	681b      	ldr	r3, [r3, #0]
 8007242:	685a      	ldr	r2, [r3, #4]
 8007244:	697b      	ldr	r3, [r7, #20]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 800724c:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800724e:	68fb      	ldr	r3, [r7, #12]
 8007250:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007254:	d009      	beq.n	800726a <I2C_DMAXferCplt+0x11e>
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	2b08      	cmp	r3, #8
 800725a:	d006      	beq.n	800726a <I2C_DMAXferCplt+0x11e>
 800725c:	68fb      	ldr	r3, [r7, #12]
 800725e:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8007262:	d002      	beq.n	800726a <I2C_DMAXferCplt+0x11e>
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	2b20      	cmp	r3, #32
 8007268:	d107      	bne.n	800727a <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800726a:	697b      	ldr	r3, [r7, #20]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	681a      	ldr	r2, [r3, #0]
 8007270:	697b      	ldr	r3, [r7, #20]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007278:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800727a:	697b      	ldr	r3, [r7, #20]
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	685a      	ldr	r2, [r3, #4]
 8007280:	697b      	ldr	r3, [r7, #20]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8007288:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800728a:	697b      	ldr	r3, [r7, #20]
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	685a      	ldr	r2, [r3, #4]
 8007290:	697b      	ldr	r3, [r7, #20]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8007298:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 800729a:	697b      	ldr	r3, [r7, #20]
 800729c:	2200      	movs	r2, #0
 800729e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80072a0:	697b      	ldr	r3, [r7, #20]
 80072a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80072a4:	2b00      	cmp	r3, #0
 80072a6:	d003      	beq.n	80072b0 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 80072a8:	6978      	ldr	r0, [r7, #20]
 80072aa:	f7fc f8b3 	bl	8003414 <HAL_I2C_ErrorCallback>
}
 80072ae:	e028      	b.n	8007302 <I2C_DMAXferCplt+0x1b6>
      hi2c->State = HAL_I2C_STATE_READY;
 80072b0:	697b      	ldr	r3, [r7, #20]
 80072b2:	2220      	movs	r2, #32
 80072b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80072b8:	697b      	ldr	r3, [r7, #20]
 80072ba:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80072be:	b2db      	uxtb	r3, r3
 80072c0:	2b40      	cmp	r3, #64	@ 0x40
 80072c2:	d10a      	bne.n	80072da <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80072c4:	697b      	ldr	r3, [r7, #20]
 80072c6:	2200      	movs	r2, #0
 80072c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 80072cc:	697b      	ldr	r3, [r7, #20]
 80072ce:	2200      	movs	r2, #0
 80072d0:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 80072d2:	6978      	ldr	r0, [r7, #20]
 80072d4:	f7fc f876 	bl	80033c4 <HAL_I2C_MemRxCpltCallback>
}
 80072d8:	e013      	b.n	8007302 <I2C_DMAXferCplt+0x1b6>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80072da:	697b      	ldr	r3, [r7, #20]
 80072dc:	2200      	movs	r2, #0
 80072de:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	2b08      	cmp	r3, #8
 80072e6:	d002      	beq.n	80072ee <I2C_DMAXferCplt+0x1a2>
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	2b20      	cmp	r3, #32
 80072ec:	d103      	bne.n	80072f6 <I2C_DMAXferCplt+0x1aa>
          hi2c->PreviousState = I2C_STATE_NONE;
 80072ee:	697b      	ldr	r3, [r7, #20]
 80072f0:	2200      	movs	r2, #0
 80072f2:	631a      	str	r2, [r3, #48]	@ 0x30
 80072f4:	e002      	b.n	80072fc <I2C_DMAXferCplt+0x1b0>
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80072f6:	697b      	ldr	r3, [r7, #20]
 80072f8:	2212      	movs	r2, #18
 80072fa:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 80072fc:	6978      	ldr	r0, [r7, #20]
 80072fe:	f7fe fbd9 	bl	8005ab4 <HAL_I2C_MasterRxCpltCallback>
}
 8007302:	bf00      	nop
 8007304:	3718      	adds	r7, #24
 8007306:	46bd      	mov	sp, r7
 8007308:	bd80      	pop	{r7, pc}

0800730a <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 800730a:	b580      	push	{r7, lr}
 800730c:	b084      	sub	sp, #16
 800730e:	af00      	add	r7, sp, #0
 8007310:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007316:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8007318:	68fb      	ldr	r3, [r7, #12]
 800731a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800731c:	2b00      	cmp	r3, #0
 800731e:	d003      	beq.n	8007328 <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007324:	2200      	movs	r2, #0
 8007326:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800732c:	2b00      	cmp	r3, #0
 800732e:	d003      	beq.n	8007338 <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8007330:	68fb      	ldr	r3, [r7, #12]
 8007332:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007334:	2200      	movs	r2, #0
 8007336:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 8007338:	6878      	ldr	r0, [r7, #4]
 800733a:	f7fc ffa7 	bl	800428c <HAL_DMA_GetError>
 800733e:	4603      	mov	r3, r0
 8007340:	2b02      	cmp	r3, #2
 8007342:	d01b      	beq.n	800737c <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8007344:	68fb      	ldr	r3, [r7, #12]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	681a      	ldr	r2, [r3, #0]
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007352:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	2200      	movs	r2, #0
 8007358:	855a      	strh	r2, [r3, #42]	@ 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 800735a:	68fb      	ldr	r3, [r7, #12]
 800735c:	2220      	movs	r2, #32
 800735e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	2200      	movs	r2, #0
 8007366:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800736e:	f043 0210 	orr.w	r2, r3, #16
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	641a      	str	r2, [r3, #64]	@ 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8007376:	68f8      	ldr	r0, [r7, #12]
 8007378:	f7fc f84c 	bl	8003414 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800737c:	bf00      	nop
 800737e:	3710      	adds	r7, #16
 8007380:	46bd      	mov	sp, r7
 8007382:	bd80      	pop	{r7, pc}

08007384 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8007384:	b580      	push	{r7, lr}
 8007386:	b086      	sub	sp, #24
 8007388:	af00      	add	r7, sp, #0
 800738a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800738c:	2300      	movs	r3, #0
 800738e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007394:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8007396:	697b      	ldr	r3, [r7, #20]
 8007398:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800739c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 800739e:	4b4b      	ldr	r3, [pc, #300]	@ (80074cc <I2C_DMAAbort+0x148>)
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	08db      	lsrs	r3, r3, #3
 80073a4:	4a4a      	ldr	r2, [pc, #296]	@ (80074d0 <I2C_DMAAbort+0x14c>)
 80073a6:	fba2 2303 	umull	r2, r3, r2, r3
 80073aa:	0a1a      	lsrs	r2, r3, #8
 80073ac:	4613      	mov	r3, r2
 80073ae:	009b      	lsls	r3, r3, #2
 80073b0:	4413      	add	r3, r2
 80073b2:	00da      	lsls	r2, r3, #3
 80073b4:	1ad3      	subs	r3, r2, r3
 80073b6:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	2b00      	cmp	r3, #0
 80073bc:	d106      	bne.n	80073cc <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80073be:	697b      	ldr	r3, [r7, #20]
 80073c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073c2:	f043 0220 	orr.w	r2, r3, #32
 80073c6:	697b      	ldr	r3, [r7, #20]
 80073c8:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 80073ca:	e00a      	b.n	80073e2 <I2C_DMAAbort+0x5e>
    }
    count--;
 80073cc:	68fb      	ldr	r3, [r7, #12]
 80073ce:	3b01      	subs	r3, #1
 80073d0:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80073d2:	697b      	ldr	r3, [r7, #20]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80073dc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80073e0:	d0ea      	beq.n	80073b8 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80073e2:	697b      	ldr	r3, [r7, #20]
 80073e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d003      	beq.n	80073f2 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80073ea:	697b      	ldr	r3, [r7, #20]
 80073ec:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80073ee:	2200      	movs	r2, #0
 80073f0:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80073f2:	697b      	ldr	r3, [r7, #20]
 80073f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d003      	beq.n	8007402 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80073fa:	697b      	ldr	r3, [r7, #20]
 80073fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80073fe:	2200      	movs	r2, #0
 8007400:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007402:	697b      	ldr	r3, [r7, #20]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	681a      	ldr	r2, [r3, #0]
 8007408:	697b      	ldr	r3, [r7, #20]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007410:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8007412:	697b      	ldr	r3, [r7, #20]
 8007414:	2200      	movs	r2, #0
 8007416:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8007418:	697b      	ldr	r3, [r7, #20]
 800741a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800741c:	2b00      	cmp	r3, #0
 800741e:	d003      	beq.n	8007428 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8007420:	697b      	ldr	r3, [r7, #20]
 8007422:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007424:	2200      	movs	r2, #0
 8007426:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 8007428:	697b      	ldr	r3, [r7, #20]
 800742a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800742c:	2b00      	cmp	r3, #0
 800742e:	d003      	beq.n	8007438 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8007430:	697b      	ldr	r3, [r7, #20]
 8007432:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007434:	2200      	movs	r2, #0
 8007436:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8007438:	697b      	ldr	r3, [r7, #20]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	681a      	ldr	r2, [r3, #0]
 800743e:	697b      	ldr	r3, [r7, #20]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	f022 0201 	bic.w	r2, r2, #1
 8007446:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007448:	697b      	ldr	r3, [r7, #20]
 800744a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800744e:	b2db      	uxtb	r3, r3
 8007450:	2b60      	cmp	r3, #96	@ 0x60
 8007452:	d10e      	bne.n	8007472 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8007454:	697b      	ldr	r3, [r7, #20]
 8007456:	2220      	movs	r2, #32
 8007458:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800745c:	697b      	ldr	r3, [r7, #20]
 800745e:	2200      	movs	r2, #0
 8007460:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8007464:	697b      	ldr	r3, [r7, #20]
 8007466:	2200      	movs	r2, #0
 8007468:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800746a:	6978      	ldr	r0, [r7, #20]
 800746c:	f7fe fb62 	bl	8005b34 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007470:	e027      	b.n	80074c2 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007472:	7cfb      	ldrb	r3, [r7, #19]
 8007474:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8007478:	2b28      	cmp	r3, #40	@ 0x28
 800747a:	d117      	bne.n	80074ac <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 800747c:	697b      	ldr	r3, [r7, #20]
 800747e:	681b      	ldr	r3, [r3, #0]
 8007480:	681a      	ldr	r2, [r3, #0]
 8007482:	697b      	ldr	r3, [r7, #20]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	f042 0201 	orr.w	r2, r2, #1
 800748a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800748c:	697b      	ldr	r3, [r7, #20]
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	681a      	ldr	r2, [r3, #0]
 8007492:	697b      	ldr	r3, [r7, #20]
 8007494:	681b      	ldr	r3, [r3, #0]
 8007496:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 800749a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800749c:	697b      	ldr	r3, [r7, #20]
 800749e:	2200      	movs	r2, #0
 80074a0:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80074a2:	697b      	ldr	r3, [r7, #20]
 80074a4:	2228      	movs	r2, #40	@ 0x28
 80074a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80074aa:	e007      	b.n	80074bc <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80074ac:	697b      	ldr	r3, [r7, #20]
 80074ae:	2220      	movs	r2, #32
 80074b0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80074b4:	697b      	ldr	r3, [r7, #20]
 80074b6:	2200      	movs	r2, #0
 80074b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80074bc:	6978      	ldr	r0, [r7, #20]
 80074be:	f7fb ffa9 	bl	8003414 <HAL_I2C_ErrorCallback>
}
 80074c2:	bf00      	nop
 80074c4:	3718      	adds	r7, #24
 80074c6:	46bd      	mov	sp, r7
 80074c8:	bd80      	pop	{r7, pc}
 80074ca:	bf00      	nop
 80074cc:	2000009c 	.word	0x2000009c
 80074d0:	14f8b589 	.word	0x14f8b589

080074d4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80074d4:	b580      	push	{r7, lr}
 80074d6:	b084      	sub	sp, #16
 80074d8:	af00      	add	r7, sp, #0
 80074da:	60f8      	str	r0, [r7, #12]
 80074dc:	60b9      	str	r1, [r7, #8]
 80074de:	603b      	str	r3, [r7, #0]
 80074e0:	4613      	mov	r3, r2
 80074e2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80074e4:	e048      	b.n	8007578 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80074e6:	683b      	ldr	r3, [r7, #0]
 80074e8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80074ec:	d044      	beq.n	8007578 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80074ee:	f7fc fafb 	bl	8003ae8 <HAL_GetTick>
 80074f2:	4602      	mov	r2, r0
 80074f4:	69bb      	ldr	r3, [r7, #24]
 80074f6:	1ad3      	subs	r3, r2, r3
 80074f8:	683a      	ldr	r2, [r7, #0]
 80074fa:	429a      	cmp	r2, r3
 80074fc:	d302      	bcc.n	8007504 <I2C_WaitOnFlagUntilTimeout+0x30>
 80074fe:	683b      	ldr	r3, [r7, #0]
 8007500:	2b00      	cmp	r3, #0
 8007502:	d139      	bne.n	8007578 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8007504:	68bb      	ldr	r3, [r7, #8]
 8007506:	0c1b      	lsrs	r3, r3, #16
 8007508:	b2db      	uxtb	r3, r3
 800750a:	2b01      	cmp	r3, #1
 800750c:	d10d      	bne.n	800752a <I2C_WaitOnFlagUntilTimeout+0x56>
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	695b      	ldr	r3, [r3, #20]
 8007514:	43da      	mvns	r2, r3
 8007516:	68bb      	ldr	r3, [r7, #8]
 8007518:	4013      	ands	r3, r2
 800751a:	b29b      	uxth	r3, r3
 800751c:	2b00      	cmp	r3, #0
 800751e:	bf0c      	ite	eq
 8007520:	2301      	moveq	r3, #1
 8007522:	2300      	movne	r3, #0
 8007524:	b2db      	uxtb	r3, r3
 8007526:	461a      	mov	r2, r3
 8007528:	e00c      	b.n	8007544 <I2C_WaitOnFlagUntilTimeout+0x70>
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	681b      	ldr	r3, [r3, #0]
 800752e:	699b      	ldr	r3, [r3, #24]
 8007530:	43da      	mvns	r2, r3
 8007532:	68bb      	ldr	r3, [r7, #8]
 8007534:	4013      	ands	r3, r2
 8007536:	b29b      	uxth	r3, r3
 8007538:	2b00      	cmp	r3, #0
 800753a:	bf0c      	ite	eq
 800753c:	2301      	moveq	r3, #1
 800753e:	2300      	movne	r3, #0
 8007540:	b2db      	uxtb	r3, r3
 8007542:	461a      	mov	r2, r3
 8007544:	79fb      	ldrb	r3, [r7, #7]
 8007546:	429a      	cmp	r2, r3
 8007548:	d116      	bne.n	8007578 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	2200      	movs	r2, #0
 800754e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8007550:	68fb      	ldr	r3, [r7, #12]
 8007552:	2220      	movs	r2, #32
 8007554:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	2200      	movs	r2, #0
 800755c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007564:	f043 0220 	orr.w	r2, r3, #32
 8007568:	68fb      	ldr	r3, [r7, #12]
 800756a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800756c:	68fb      	ldr	r3, [r7, #12]
 800756e:	2200      	movs	r2, #0
 8007570:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007574:	2301      	movs	r3, #1
 8007576:	e023      	b.n	80075c0 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007578:	68bb      	ldr	r3, [r7, #8]
 800757a:	0c1b      	lsrs	r3, r3, #16
 800757c:	b2db      	uxtb	r3, r3
 800757e:	2b01      	cmp	r3, #1
 8007580:	d10d      	bne.n	800759e <I2C_WaitOnFlagUntilTimeout+0xca>
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	695b      	ldr	r3, [r3, #20]
 8007588:	43da      	mvns	r2, r3
 800758a:	68bb      	ldr	r3, [r7, #8]
 800758c:	4013      	ands	r3, r2
 800758e:	b29b      	uxth	r3, r3
 8007590:	2b00      	cmp	r3, #0
 8007592:	bf0c      	ite	eq
 8007594:	2301      	moveq	r3, #1
 8007596:	2300      	movne	r3, #0
 8007598:	b2db      	uxtb	r3, r3
 800759a:	461a      	mov	r2, r3
 800759c:	e00c      	b.n	80075b8 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	699b      	ldr	r3, [r3, #24]
 80075a4:	43da      	mvns	r2, r3
 80075a6:	68bb      	ldr	r3, [r7, #8]
 80075a8:	4013      	ands	r3, r2
 80075aa:	b29b      	uxth	r3, r3
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	bf0c      	ite	eq
 80075b0:	2301      	moveq	r3, #1
 80075b2:	2300      	movne	r3, #0
 80075b4:	b2db      	uxtb	r3, r3
 80075b6:	461a      	mov	r2, r3
 80075b8:	79fb      	ldrb	r3, [r7, #7]
 80075ba:	429a      	cmp	r2, r3
 80075bc:	d093      	beq.n	80074e6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80075be:	2300      	movs	r3, #0
}
 80075c0:	4618      	mov	r0, r3
 80075c2:	3710      	adds	r7, #16
 80075c4:	46bd      	mov	sp, r7
 80075c6:	bd80      	pop	{r7, pc}

080075c8 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80075c8:	b580      	push	{r7, lr}
 80075ca:	b084      	sub	sp, #16
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	60f8      	str	r0, [r7, #12]
 80075d0:	60b9      	str	r1, [r7, #8]
 80075d2:	607a      	str	r2, [r7, #4]
 80075d4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80075d6:	e071      	b.n	80076bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80075d8:	68fb      	ldr	r3, [r7, #12]
 80075da:	681b      	ldr	r3, [r3, #0]
 80075dc:	695b      	ldr	r3, [r3, #20]
 80075de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80075e2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80075e6:	d123      	bne.n	8007630 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	681b      	ldr	r3, [r3, #0]
 80075ec:	681a      	ldr	r2, [r3, #0]
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	681b      	ldr	r3, [r3, #0]
 80075f2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80075f6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8007600:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	2200      	movs	r2, #0
 8007606:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	2220      	movs	r2, #32
 800760c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	2200      	movs	r2, #0
 8007614:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800761c:	f043 0204 	orr.w	r2, r3, #4
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	2200      	movs	r2, #0
 8007628:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800762c:	2301      	movs	r3, #1
 800762e:	e067      	b.n	8007700 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007636:	d041      	beq.n	80076bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007638:	f7fc fa56 	bl	8003ae8 <HAL_GetTick>
 800763c:	4602      	mov	r2, r0
 800763e:	683b      	ldr	r3, [r7, #0]
 8007640:	1ad3      	subs	r3, r2, r3
 8007642:	687a      	ldr	r2, [r7, #4]
 8007644:	429a      	cmp	r2, r3
 8007646:	d302      	bcc.n	800764e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	2b00      	cmp	r3, #0
 800764c:	d136      	bne.n	80076bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800764e:	68bb      	ldr	r3, [r7, #8]
 8007650:	0c1b      	lsrs	r3, r3, #16
 8007652:	b2db      	uxtb	r3, r3
 8007654:	2b01      	cmp	r3, #1
 8007656:	d10c      	bne.n	8007672 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8007658:	68fb      	ldr	r3, [r7, #12]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	695b      	ldr	r3, [r3, #20]
 800765e:	43da      	mvns	r2, r3
 8007660:	68bb      	ldr	r3, [r7, #8]
 8007662:	4013      	ands	r3, r2
 8007664:	b29b      	uxth	r3, r3
 8007666:	2b00      	cmp	r3, #0
 8007668:	bf14      	ite	ne
 800766a:	2301      	movne	r3, #1
 800766c:	2300      	moveq	r3, #0
 800766e:	b2db      	uxtb	r3, r3
 8007670:	e00b      	b.n	800768a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	681b      	ldr	r3, [r3, #0]
 8007676:	699b      	ldr	r3, [r3, #24]
 8007678:	43da      	mvns	r2, r3
 800767a:	68bb      	ldr	r3, [r7, #8]
 800767c:	4013      	ands	r3, r2
 800767e:	b29b      	uxth	r3, r3
 8007680:	2b00      	cmp	r3, #0
 8007682:	bf14      	ite	ne
 8007684:	2301      	movne	r3, #1
 8007686:	2300      	moveq	r3, #0
 8007688:	b2db      	uxtb	r3, r3
 800768a:	2b00      	cmp	r3, #0
 800768c:	d016      	beq.n	80076bc <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	2200      	movs	r2, #0
 8007692:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	2220      	movs	r2, #32
 8007698:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	2200      	movs	r2, #0
 80076a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076a8:	f043 0220 	orr.w	r2, r3, #32
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	2200      	movs	r2, #0
 80076b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80076b8:	2301      	movs	r3, #1
 80076ba:	e021      	b.n	8007700 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80076bc:	68bb      	ldr	r3, [r7, #8]
 80076be:	0c1b      	lsrs	r3, r3, #16
 80076c0:	b2db      	uxtb	r3, r3
 80076c2:	2b01      	cmp	r3, #1
 80076c4:	d10c      	bne.n	80076e0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	695b      	ldr	r3, [r3, #20]
 80076cc:	43da      	mvns	r2, r3
 80076ce:	68bb      	ldr	r3, [r7, #8]
 80076d0:	4013      	ands	r3, r2
 80076d2:	b29b      	uxth	r3, r3
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	bf14      	ite	ne
 80076d8:	2301      	movne	r3, #1
 80076da:	2300      	moveq	r3, #0
 80076dc:	b2db      	uxtb	r3, r3
 80076de:	e00b      	b.n	80076f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	699b      	ldr	r3, [r3, #24]
 80076e6:	43da      	mvns	r2, r3
 80076e8:	68bb      	ldr	r3, [r7, #8]
 80076ea:	4013      	ands	r3, r2
 80076ec:	b29b      	uxth	r3, r3
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	bf14      	ite	ne
 80076f2:	2301      	movne	r3, #1
 80076f4:	2300      	moveq	r3, #0
 80076f6:	b2db      	uxtb	r3, r3
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	f47f af6d 	bne.w	80075d8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80076fe:	2300      	movs	r3, #0
}
 8007700:	4618      	mov	r0, r3
 8007702:	3710      	adds	r7, #16
 8007704:	46bd      	mov	sp, r7
 8007706:	bd80      	pop	{r7, pc}

08007708 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007708:	b580      	push	{r7, lr}
 800770a:	b084      	sub	sp, #16
 800770c:	af00      	add	r7, sp, #0
 800770e:	60f8      	str	r0, [r7, #12]
 8007710:	60b9      	str	r1, [r7, #8]
 8007712:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007714:	e034      	b.n	8007780 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8007716:	68f8      	ldr	r0, [r7, #12]
 8007718:	f000 f915 	bl	8007946 <I2C_IsAcknowledgeFailed>
 800771c:	4603      	mov	r3, r0
 800771e:	2b00      	cmp	r3, #0
 8007720:	d001      	beq.n	8007726 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007722:	2301      	movs	r3, #1
 8007724:	e034      	b.n	8007790 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007726:	68bb      	ldr	r3, [r7, #8]
 8007728:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800772c:	d028      	beq.n	8007780 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800772e:	f7fc f9db 	bl	8003ae8 <HAL_GetTick>
 8007732:	4602      	mov	r2, r0
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	1ad3      	subs	r3, r2, r3
 8007738:	68ba      	ldr	r2, [r7, #8]
 800773a:	429a      	cmp	r2, r3
 800773c:	d302      	bcc.n	8007744 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800773e:	68bb      	ldr	r3, [r7, #8]
 8007740:	2b00      	cmp	r3, #0
 8007742:	d11d      	bne.n	8007780 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8007744:	68fb      	ldr	r3, [r7, #12]
 8007746:	681b      	ldr	r3, [r3, #0]
 8007748:	695b      	ldr	r3, [r3, #20]
 800774a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800774e:	2b80      	cmp	r3, #128	@ 0x80
 8007750:	d016      	beq.n	8007780 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8007752:	68fb      	ldr	r3, [r7, #12]
 8007754:	2200      	movs	r2, #0
 8007756:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8007758:	68fb      	ldr	r3, [r7, #12]
 800775a:	2220      	movs	r2, #32
 800775c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	2200      	movs	r2, #0
 8007764:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800776c:	f043 0220 	orr.w	r2, r3, #32
 8007770:	68fb      	ldr	r3, [r7, #12]
 8007772:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007774:	68fb      	ldr	r3, [r7, #12]
 8007776:	2200      	movs	r2, #0
 8007778:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800777c:	2301      	movs	r3, #1
 800777e:	e007      	b.n	8007790 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007780:	68fb      	ldr	r3, [r7, #12]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	695b      	ldr	r3, [r3, #20]
 8007786:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800778a:	2b80      	cmp	r3, #128	@ 0x80
 800778c:	d1c3      	bne.n	8007716 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800778e:	2300      	movs	r3, #0
}
 8007790:	4618      	mov	r0, r3
 8007792:	3710      	adds	r7, #16
 8007794:	46bd      	mov	sp, r7
 8007796:	bd80      	pop	{r7, pc}

08007798 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8007798:	b580      	push	{r7, lr}
 800779a:	b084      	sub	sp, #16
 800779c:	af00      	add	r7, sp, #0
 800779e:	60f8      	str	r0, [r7, #12]
 80077a0:	60b9      	str	r1, [r7, #8]
 80077a2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80077a4:	e034      	b.n	8007810 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80077a6:	68f8      	ldr	r0, [r7, #12]
 80077a8:	f000 f8cd 	bl	8007946 <I2C_IsAcknowledgeFailed>
 80077ac:	4603      	mov	r3, r0
 80077ae:	2b00      	cmp	r3, #0
 80077b0:	d001      	beq.n	80077b6 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80077b2:	2301      	movs	r3, #1
 80077b4:	e034      	b.n	8007820 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80077b6:	68bb      	ldr	r3, [r7, #8]
 80077b8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80077bc:	d028      	beq.n	8007810 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80077be:	f7fc f993 	bl	8003ae8 <HAL_GetTick>
 80077c2:	4602      	mov	r2, r0
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	1ad3      	subs	r3, r2, r3
 80077c8:	68ba      	ldr	r2, [r7, #8]
 80077ca:	429a      	cmp	r2, r3
 80077cc:	d302      	bcc.n	80077d4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80077ce:	68bb      	ldr	r3, [r7, #8]
 80077d0:	2b00      	cmp	r3, #0
 80077d2:	d11d      	bne.n	8007810 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80077d4:	68fb      	ldr	r3, [r7, #12]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	695b      	ldr	r3, [r3, #20]
 80077da:	f003 0304 	and.w	r3, r3, #4
 80077de:	2b04      	cmp	r3, #4
 80077e0:	d016      	beq.n	8007810 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	2200      	movs	r2, #0
 80077e6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	2220      	movs	r2, #32
 80077ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	2200      	movs	r2, #0
 80077f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077fc:	f043 0220 	orr.w	r2, r3, #32
 8007800:	68fb      	ldr	r3, [r7, #12]
 8007802:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	2200      	movs	r2, #0
 8007808:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800780c:	2301      	movs	r3, #1
 800780e:	e007      	b.n	8007820 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	695b      	ldr	r3, [r3, #20]
 8007816:	f003 0304 	and.w	r3, r3, #4
 800781a:	2b04      	cmp	r3, #4
 800781c:	d1c3      	bne.n	80077a6 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800781e:	2300      	movs	r3, #0
}
 8007820:	4618      	mov	r0, r3
 8007822:	3710      	adds	r7, #16
 8007824:	46bd      	mov	sp, r7
 8007826:	bd80      	pop	{r7, pc}

08007828 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8007828:	b480      	push	{r7}
 800782a:	b085      	sub	sp, #20
 800782c:	af00      	add	r7, sp, #0
 800782e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007830:	2300      	movs	r3, #0
 8007832:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8007834:	4b13      	ldr	r3, [pc, #76]	@ (8007884 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	08db      	lsrs	r3, r3, #3
 800783a:	4a13      	ldr	r2, [pc, #76]	@ (8007888 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 800783c:	fba2 2303 	umull	r2, r3, r2, r3
 8007840:	0a1a      	lsrs	r2, r3, #8
 8007842:	4613      	mov	r3, r2
 8007844:	009b      	lsls	r3, r3, #2
 8007846:	4413      	add	r3, r2
 8007848:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	3b01      	subs	r3, #1
 800784e:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	2b00      	cmp	r3, #0
 8007854:	d107      	bne.n	8007866 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800785a:	f043 0220 	orr.w	r2, r3, #32
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 8007862:	2301      	movs	r3, #1
 8007864:	e008      	b.n	8007878 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007870:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007874:	d0e9      	beq.n	800784a <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8007876:	2300      	movs	r3, #0
}
 8007878:	4618      	mov	r0, r3
 800787a:	3714      	adds	r7, #20
 800787c:	46bd      	mov	sp, r7
 800787e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007882:	4770      	bx	lr
 8007884:	2000009c 	.word	0x2000009c
 8007888:	14f8b589 	.word	0x14f8b589

0800788c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800788c:	b580      	push	{r7, lr}
 800788e:	b084      	sub	sp, #16
 8007890:	af00      	add	r7, sp, #0
 8007892:	60f8      	str	r0, [r7, #12]
 8007894:	60b9      	str	r1, [r7, #8]
 8007896:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007898:	e049      	b.n	800792e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800789a:	68fb      	ldr	r3, [r7, #12]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	695b      	ldr	r3, [r3, #20]
 80078a0:	f003 0310 	and.w	r3, r3, #16
 80078a4:	2b10      	cmp	r3, #16
 80078a6:	d119      	bne.n	80078dc <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80078a8:	68fb      	ldr	r3, [r7, #12]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	f06f 0210 	mvn.w	r2, #16
 80078b0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80078b2:	68fb      	ldr	r3, [r7, #12]
 80078b4:	2200      	movs	r2, #0
 80078b6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	2220      	movs	r2, #32
 80078bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	2200      	movs	r2, #0
 80078c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	2200      	movs	r2, #0
 80078d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80078d8:	2301      	movs	r3, #1
 80078da:	e030      	b.n	800793e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80078dc:	f7fc f904 	bl	8003ae8 <HAL_GetTick>
 80078e0:	4602      	mov	r2, r0
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	1ad3      	subs	r3, r2, r3
 80078e6:	68ba      	ldr	r2, [r7, #8]
 80078e8:	429a      	cmp	r2, r3
 80078ea:	d302      	bcc.n	80078f2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80078ec:	68bb      	ldr	r3, [r7, #8]
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d11d      	bne.n	800792e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	695b      	ldr	r3, [r3, #20]
 80078f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80078fc:	2b40      	cmp	r3, #64	@ 0x40
 80078fe:	d016      	beq.n	800792e <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	2200      	movs	r2, #0
 8007904:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	2220      	movs	r2, #32
 800790a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	2200      	movs	r2, #0
 8007912:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007916:	68fb      	ldr	r3, [r7, #12]
 8007918:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800791a:	f043 0220 	orr.w	r2, r3, #32
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007922:	68fb      	ldr	r3, [r7, #12]
 8007924:	2200      	movs	r2, #0
 8007926:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800792a:	2301      	movs	r3, #1
 800792c:	e007      	b.n	800793e <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	695b      	ldr	r3, [r3, #20]
 8007934:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007938:	2b40      	cmp	r3, #64	@ 0x40
 800793a:	d1ae      	bne.n	800789a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800793c:	2300      	movs	r3, #0
}
 800793e:	4618      	mov	r0, r3
 8007940:	3710      	adds	r7, #16
 8007942:	46bd      	mov	sp, r7
 8007944:	bd80      	pop	{r7, pc}

08007946 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007946:	b480      	push	{r7}
 8007948:	b083      	sub	sp, #12
 800794a:	af00      	add	r7, sp, #0
 800794c:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	695b      	ldr	r3, [r3, #20]
 8007954:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007958:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800795c:	d11b      	bne.n	8007996 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8007966:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	2200      	movs	r2, #0
 800796c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	2220      	movs	r2, #32
 8007972:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	2200      	movs	r2, #0
 800797a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007982:	f043 0204 	orr.w	r2, r3, #4
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	2200      	movs	r2, #0
 800798e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8007992:	2301      	movs	r3, #1
 8007994:	e000      	b.n	8007998 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007996:	2300      	movs	r3, #0
}
 8007998:	4618      	mov	r0, r3
 800799a:	370c      	adds	r7, #12
 800799c:	46bd      	mov	sp, r7
 800799e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079a2:	4770      	bx	lr

080079a4 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 80079a4:	b480      	push	{r7}
 80079a6:	b083      	sub	sp, #12
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079b0:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 80079b4:	d103      	bne.n	80079be <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	2201      	movs	r2, #1
 80079ba:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80079bc:	e007      	b.n	80079ce <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80079be:	687b      	ldr	r3, [r7, #4]
 80079c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80079c2:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80079c6:	d102      	bne.n	80079ce <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	2208      	movs	r2, #8
 80079cc:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 80079ce:	bf00      	nop
 80079d0:	370c      	adds	r7, #12
 80079d2:	46bd      	mov	sp, r7
 80079d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079d8:	4770      	bx	lr
	...

080079dc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80079dc:	b580      	push	{r7, lr}
 80079de:	b086      	sub	sp, #24
 80079e0:	af00      	add	r7, sp, #0
 80079e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d101      	bne.n	80079ee <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80079ea:	2301      	movs	r3, #1
 80079ec:	e267      	b.n	8007ebe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	f003 0301 	and.w	r3, r3, #1
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d075      	beq.n	8007ae6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80079fa:	4b88      	ldr	r3, [pc, #544]	@ (8007c1c <HAL_RCC_OscConfig+0x240>)
 80079fc:	689b      	ldr	r3, [r3, #8]
 80079fe:	f003 030c 	and.w	r3, r3, #12
 8007a02:	2b04      	cmp	r3, #4
 8007a04:	d00c      	beq.n	8007a20 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007a06:	4b85      	ldr	r3, [pc, #532]	@ (8007c1c <HAL_RCC_OscConfig+0x240>)
 8007a08:	689b      	ldr	r3, [r3, #8]
 8007a0a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8007a0e:	2b08      	cmp	r3, #8
 8007a10:	d112      	bne.n	8007a38 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007a12:	4b82      	ldr	r3, [pc, #520]	@ (8007c1c <HAL_RCC_OscConfig+0x240>)
 8007a14:	685b      	ldr	r3, [r3, #4]
 8007a16:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007a1a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007a1e:	d10b      	bne.n	8007a38 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007a20:	4b7e      	ldr	r3, [pc, #504]	@ (8007c1c <HAL_RCC_OscConfig+0x240>)
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d05b      	beq.n	8007ae4 <HAL_RCC_OscConfig+0x108>
 8007a2c:	687b      	ldr	r3, [r7, #4]
 8007a2e:	685b      	ldr	r3, [r3, #4]
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	d157      	bne.n	8007ae4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007a34:	2301      	movs	r3, #1
 8007a36:	e242      	b.n	8007ebe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	685b      	ldr	r3, [r3, #4]
 8007a3c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007a40:	d106      	bne.n	8007a50 <HAL_RCC_OscConfig+0x74>
 8007a42:	4b76      	ldr	r3, [pc, #472]	@ (8007c1c <HAL_RCC_OscConfig+0x240>)
 8007a44:	681b      	ldr	r3, [r3, #0]
 8007a46:	4a75      	ldr	r2, [pc, #468]	@ (8007c1c <HAL_RCC_OscConfig+0x240>)
 8007a48:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007a4c:	6013      	str	r3, [r2, #0]
 8007a4e:	e01d      	b.n	8007a8c <HAL_RCC_OscConfig+0xb0>
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	685b      	ldr	r3, [r3, #4]
 8007a54:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007a58:	d10c      	bne.n	8007a74 <HAL_RCC_OscConfig+0x98>
 8007a5a:	4b70      	ldr	r3, [pc, #448]	@ (8007c1c <HAL_RCC_OscConfig+0x240>)
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	4a6f      	ldr	r2, [pc, #444]	@ (8007c1c <HAL_RCC_OscConfig+0x240>)
 8007a60:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007a64:	6013      	str	r3, [r2, #0]
 8007a66:	4b6d      	ldr	r3, [pc, #436]	@ (8007c1c <HAL_RCC_OscConfig+0x240>)
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	4a6c      	ldr	r2, [pc, #432]	@ (8007c1c <HAL_RCC_OscConfig+0x240>)
 8007a6c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007a70:	6013      	str	r3, [r2, #0]
 8007a72:	e00b      	b.n	8007a8c <HAL_RCC_OscConfig+0xb0>
 8007a74:	4b69      	ldr	r3, [pc, #420]	@ (8007c1c <HAL_RCC_OscConfig+0x240>)
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	4a68      	ldr	r2, [pc, #416]	@ (8007c1c <HAL_RCC_OscConfig+0x240>)
 8007a7a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007a7e:	6013      	str	r3, [r2, #0]
 8007a80:	4b66      	ldr	r3, [pc, #408]	@ (8007c1c <HAL_RCC_OscConfig+0x240>)
 8007a82:	681b      	ldr	r3, [r3, #0]
 8007a84:	4a65      	ldr	r2, [pc, #404]	@ (8007c1c <HAL_RCC_OscConfig+0x240>)
 8007a86:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007a8a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	685b      	ldr	r3, [r3, #4]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d013      	beq.n	8007abc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007a94:	f7fc f828 	bl	8003ae8 <HAL_GetTick>
 8007a98:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007a9a:	e008      	b.n	8007aae <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007a9c:	f7fc f824 	bl	8003ae8 <HAL_GetTick>
 8007aa0:	4602      	mov	r2, r0
 8007aa2:	693b      	ldr	r3, [r7, #16]
 8007aa4:	1ad3      	subs	r3, r2, r3
 8007aa6:	2b64      	cmp	r3, #100	@ 0x64
 8007aa8:	d901      	bls.n	8007aae <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007aaa:	2303      	movs	r3, #3
 8007aac:	e207      	b.n	8007ebe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007aae:	4b5b      	ldr	r3, [pc, #364]	@ (8007c1c <HAL_RCC_OscConfig+0x240>)
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d0f0      	beq.n	8007a9c <HAL_RCC_OscConfig+0xc0>
 8007aba:	e014      	b.n	8007ae6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007abc:	f7fc f814 	bl	8003ae8 <HAL_GetTick>
 8007ac0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007ac2:	e008      	b.n	8007ad6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007ac4:	f7fc f810 	bl	8003ae8 <HAL_GetTick>
 8007ac8:	4602      	mov	r2, r0
 8007aca:	693b      	ldr	r3, [r7, #16]
 8007acc:	1ad3      	subs	r3, r2, r3
 8007ace:	2b64      	cmp	r3, #100	@ 0x64
 8007ad0:	d901      	bls.n	8007ad6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007ad2:	2303      	movs	r3, #3
 8007ad4:	e1f3      	b.n	8007ebe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007ad6:	4b51      	ldr	r3, [pc, #324]	@ (8007c1c <HAL_RCC_OscConfig+0x240>)
 8007ad8:	681b      	ldr	r3, [r3, #0]
 8007ada:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007ade:	2b00      	cmp	r3, #0
 8007ae0:	d1f0      	bne.n	8007ac4 <HAL_RCC_OscConfig+0xe8>
 8007ae2:	e000      	b.n	8007ae6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007ae4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	f003 0302 	and.w	r3, r3, #2
 8007aee:	2b00      	cmp	r3, #0
 8007af0:	d063      	beq.n	8007bba <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8007af2:	4b4a      	ldr	r3, [pc, #296]	@ (8007c1c <HAL_RCC_OscConfig+0x240>)
 8007af4:	689b      	ldr	r3, [r3, #8]
 8007af6:	f003 030c 	and.w	r3, r3, #12
 8007afa:	2b00      	cmp	r3, #0
 8007afc:	d00b      	beq.n	8007b16 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007afe:	4b47      	ldr	r3, [pc, #284]	@ (8007c1c <HAL_RCC_OscConfig+0x240>)
 8007b00:	689b      	ldr	r3, [r3, #8]
 8007b02:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8007b06:	2b08      	cmp	r3, #8
 8007b08:	d11c      	bne.n	8007b44 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007b0a:	4b44      	ldr	r3, [pc, #272]	@ (8007c1c <HAL_RCC_OscConfig+0x240>)
 8007b0c:	685b      	ldr	r3, [r3, #4]
 8007b0e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d116      	bne.n	8007b44 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007b16:	4b41      	ldr	r3, [pc, #260]	@ (8007c1c <HAL_RCC_OscConfig+0x240>)
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	f003 0302 	and.w	r3, r3, #2
 8007b1e:	2b00      	cmp	r3, #0
 8007b20:	d005      	beq.n	8007b2e <HAL_RCC_OscConfig+0x152>
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	68db      	ldr	r3, [r3, #12]
 8007b26:	2b01      	cmp	r3, #1
 8007b28:	d001      	beq.n	8007b2e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007b2a:	2301      	movs	r3, #1
 8007b2c:	e1c7      	b.n	8007ebe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007b2e:	4b3b      	ldr	r3, [pc, #236]	@ (8007c1c <HAL_RCC_OscConfig+0x240>)
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	691b      	ldr	r3, [r3, #16]
 8007b3a:	00db      	lsls	r3, r3, #3
 8007b3c:	4937      	ldr	r1, [pc, #220]	@ (8007c1c <HAL_RCC_OscConfig+0x240>)
 8007b3e:	4313      	orrs	r3, r2
 8007b40:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007b42:	e03a      	b.n	8007bba <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	68db      	ldr	r3, [r3, #12]
 8007b48:	2b00      	cmp	r3, #0
 8007b4a:	d020      	beq.n	8007b8e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007b4c:	4b34      	ldr	r3, [pc, #208]	@ (8007c20 <HAL_RCC_OscConfig+0x244>)
 8007b4e:	2201      	movs	r2, #1
 8007b50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b52:	f7fb ffc9 	bl	8003ae8 <HAL_GetTick>
 8007b56:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007b58:	e008      	b.n	8007b6c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007b5a:	f7fb ffc5 	bl	8003ae8 <HAL_GetTick>
 8007b5e:	4602      	mov	r2, r0
 8007b60:	693b      	ldr	r3, [r7, #16]
 8007b62:	1ad3      	subs	r3, r2, r3
 8007b64:	2b02      	cmp	r3, #2
 8007b66:	d901      	bls.n	8007b6c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007b68:	2303      	movs	r3, #3
 8007b6a:	e1a8      	b.n	8007ebe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007b6c:	4b2b      	ldr	r3, [pc, #172]	@ (8007c1c <HAL_RCC_OscConfig+0x240>)
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	f003 0302 	and.w	r3, r3, #2
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d0f0      	beq.n	8007b5a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007b78:	4b28      	ldr	r3, [pc, #160]	@ (8007c1c <HAL_RCC_OscConfig+0x240>)
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	691b      	ldr	r3, [r3, #16]
 8007b84:	00db      	lsls	r3, r3, #3
 8007b86:	4925      	ldr	r1, [pc, #148]	@ (8007c1c <HAL_RCC_OscConfig+0x240>)
 8007b88:	4313      	orrs	r3, r2
 8007b8a:	600b      	str	r3, [r1, #0]
 8007b8c:	e015      	b.n	8007bba <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007b8e:	4b24      	ldr	r3, [pc, #144]	@ (8007c20 <HAL_RCC_OscConfig+0x244>)
 8007b90:	2200      	movs	r2, #0
 8007b92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007b94:	f7fb ffa8 	bl	8003ae8 <HAL_GetTick>
 8007b98:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007b9a:	e008      	b.n	8007bae <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007b9c:	f7fb ffa4 	bl	8003ae8 <HAL_GetTick>
 8007ba0:	4602      	mov	r2, r0
 8007ba2:	693b      	ldr	r3, [r7, #16]
 8007ba4:	1ad3      	subs	r3, r2, r3
 8007ba6:	2b02      	cmp	r3, #2
 8007ba8:	d901      	bls.n	8007bae <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007baa:	2303      	movs	r3, #3
 8007bac:	e187      	b.n	8007ebe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007bae:	4b1b      	ldr	r3, [pc, #108]	@ (8007c1c <HAL_RCC_OscConfig+0x240>)
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	f003 0302 	and.w	r3, r3, #2
 8007bb6:	2b00      	cmp	r3, #0
 8007bb8:	d1f0      	bne.n	8007b9c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	f003 0308 	and.w	r3, r3, #8
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d036      	beq.n	8007c34 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007bc6:	687b      	ldr	r3, [r7, #4]
 8007bc8:	695b      	ldr	r3, [r3, #20]
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d016      	beq.n	8007bfc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007bce:	4b15      	ldr	r3, [pc, #84]	@ (8007c24 <HAL_RCC_OscConfig+0x248>)
 8007bd0:	2201      	movs	r2, #1
 8007bd2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007bd4:	f7fb ff88 	bl	8003ae8 <HAL_GetTick>
 8007bd8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007bda:	e008      	b.n	8007bee <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007bdc:	f7fb ff84 	bl	8003ae8 <HAL_GetTick>
 8007be0:	4602      	mov	r2, r0
 8007be2:	693b      	ldr	r3, [r7, #16]
 8007be4:	1ad3      	subs	r3, r2, r3
 8007be6:	2b02      	cmp	r3, #2
 8007be8:	d901      	bls.n	8007bee <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007bea:	2303      	movs	r3, #3
 8007bec:	e167      	b.n	8007ebe <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007bee:	4b0b      	ldr	r3, [pc, #44]	@ (8007c1c <HAL_RCC_OscConfig+0x240>)
 8007bf0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007bf2:	f003 0302 	and.w	r3, r3, #2
 8007bf6:	2b00      	cmp	r3, #0
 8007bf8:	d0f0      	beq.n	8007bdc <HAL_RCC_OscConfig+0x200>
 8007bfa:	e01b      	b.n	8007c34 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007bfc:	4b09      	ldr	r3, [pc, #36]	@ (8007c24 <HAL_RCC_OscConfig+0x248>)
 8007bfe:	2200      	movs	r2, #0
 8007c00:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007c02:	f7fb ff71 	bl	8003ae8 <HAL_GetTick>
 8007c06:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007c08:	e00e      	b.n	8007c28 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007c0a:	f7fb ff6d 	bl	8003ae8 <HAL_GetTick>
 8007c0e:	4602      	mov	r2, r0
 8007c10:	693b      	ldr	r3, [r7, #16]
 8007c12:	1ad3      	subs	r3, r2, r3
 8007c14:	2b02      	cmp	r3, #2
 8007c16:	d907      	bls.n	8007c28 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007c18:	2303      	movs	r3, #3
 8007c1a:	e150      	b.n	8007ebe <HAL_RCC_OscConfig+0x4e2>
 8007c1c:	40023800 	.word	0x40023800
 8007c20:	42470000 	.word	0x42470000
 8007c24:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007c28:	4b88      	ldr	r3, [pc, #544]	@ (8007e4c <HAL_RCC_OscConfig+0x470>)
 8007c2a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007c2c:	f003 0302 	and.w	r3, r3, #2
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d1ea      	bne.n	8007c0a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	f003 0304 	and.w	r3, r3, #4
 8007c3c:	2b00      	cmp	r3, #0
 8007c3e:	f000 8097 	beq.w	8007d70 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007c42:	2300      	movs	r3, #0
 8007c44:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007c46:	4b81      	ldr	r3, [pc, #516]	@ (8007e4c <HAL_RCC_OscConfig+0x470>)
 8007c48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	d10f      	bne.n	8007c72 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007c52:	2300      	movs	r3, #0
 8007c54:	60bb      	str	r3, [r7, #8]
 8007c56:	4b7d      	ldr	r3, [pc, #500]	@ (8007e4c <HAL_RCC_OscConfig+0x470>)
 8007c58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c5a:	4a7c      	ldr	r2, [pc, #496]	@ (8007e4c <HAL_RCC_OscConfig+0x470>)
 8007c5c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007c60:	6413      	str	r3, [r2, #64]	@ 0x40
 8007c62:	4b7a      	ldr	r3, [pc, #488]	@ (8007e4c <HAL_RCC_OscConfig+0x470>)
 8007c64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007c66:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007c6a:	60bb      	str	r3, [r7, #8]
 8007c6c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007c6e:	2301      	movs	r3, #1
 8007c70:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007c72:	4b77      	ldr	r3, [pc, #476]	@ (8007e50 <HAL_RCC_OscConfig+0x474>)
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d118      	bne.n	8007cb0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007c7e:	4b74      	ldr	r3, [pc, #464]	@ (8007e50 <HAL_RCC_OscConfig+0x474>)
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	4a73      	ldr	r2, [pc, #460]	@ (8007e50 <HAL_RCC_OscConfig+0x474>)
 8007c84:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007c88:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007c8a:	f7fb ff2d 	bl	8003ae8 <HAL_GetTick>
 8007c8e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007c90:	e008      	b.n	8007ca4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007c92:	f7fb ff29 	bl	8003ae8 <HAL_GetTick>
 8007c96:	4602      	mov	r2, r0
 8007c98:	693b      	ldr	r3, [r7, #16]
 8007c9a:	1ad3      	subs	r3, r2, r3
 8007c9c:	2b02      	cmp	r3, #2
 8007c9e:	d901      	bls.n	8007ca4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007ca0:	2303      	movs	r3, #3
 8007ca2:	e10c      	b.n	8007ebe <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007ca4:	4b6a      	ldr	r3, [pc, #424]	@ (8007e50 <HAL_RCC_OscConfig+0x474>)
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d0f0      	beq.n	8007c92 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	689b      	ldr	r3, [r3, #8]
 8007cb4:	2b01      	cmp	r3, #1
 8007cb6:	d106      	bne.n	8007cc6 <HAL_RCC_OscConfig+0x2ea>
 8007cb8:	4b64      	ldr	r3, [pc, #400]	@ (8007e4c <HAL_RCC_OscConfig+0x470>)
 8007cba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007cbc:	4a63      	ldr	r2, [pc, #396]	@ (8007e4c <HAL_RCC_OscConfig+0x470>)
 8007cbe:	f043 0301 	orr.w	r3, r3, #1
 8007cc2:	6713      	str	r3, [r2, #112]	@ 0x70
 8007cc4:	e01c      	b.n	8007d00 <HAL_RCC_OscConfig+0x324>
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	689b      	ldr	r3, [r3, #8]
 8007cca:	2b05      	cmp	r3, #5
 8007ccc:	d10c      	bne.n	8007ce8 <HAL_RCC_OscConfig+0x30c>
 8007cce:	4b5f      	ldr	r3, [pc, #380]	@ (8007e4c <HAL_RCC_OscConfig+0x470>)
 8007cd0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007cd2:	4a5e      	ldr	r2, [pc, #376]	@ (8007e4c <HAL_RCC_OscConfig+0x470>)
 8007cd4:	f043 0304 	orr.w	r3, r3, #4
 8007cd8:	6713      	str	r3, [r2, #112]	@ 0x70
 8007cda:	4b5c      	ldr	r3, [pc, #368]	@ (8007e4c <HAL_RCC_OscConfig+0x470>)
 8007cdc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007cde:	4a5b      	ldr	r2, [pc, #364]	@ (8007e4c <HAL_RCC_OscConfig+0x470>)
 8007ce0:	f043 0301 	orr.w	r3, r3, #1
 8007ce4:	6713      	str	r3, [r2, #112]	@ 0x70
 8007ce6:	e00b      	b.n	8007d00 <HAL_RCC_OscConfig+0x324>
 8007ce8:	4b58      	ldr	r3, [pc, #352]	@ (8007e4c <HAL_RCC_OscConfig+0x470>)
 8007cea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007cec:	4a57      	ldr	r2, [pc, #348]	@ (8007e4c <HAL_RCC_OscConfig+0x470>)
 8007cee:	f023 0301 	bic.w	r3, r3, #1
 8007cf2:	6713      	str	r3, [r2, #112]	@ 0x70
 8007cf4:	4b55      	ldr	r3, [pc, #340]	@ (8007e4c <HAL_RCC_OscConfig+0x470>)
 8007cf6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007cf8:	4a54      	ldr	r2, [pc, #336]	@ (8007e4c <HAL_RCC_OscConfig+0x470>)
 8007cfa:	f023 0304 	bic.w	r3, r3, #4
 8007cfe:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007d00:	687b      	ldr	r3, [r7, #4]
 8007d02:	689b      	ldr	r3, [r3, #8]
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d015      	beq.n	8007d34 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007d08:	f7fb feee 	bl	8003ae8 <HAL_GetTick>
 8007d0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007d0e:	e00a      	b.n	8007d26 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007d10:	f7fb feea 	bl	8003ae8 <HAL_GetTick>
 8007d14:	4602      	mov	r2, r0
 8007d16:	693b      	ldr	r3, [r7, #16]
 8007d18:	1ad3      	subs	r3, r2, r3
 8007d1a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007d1e:	4293      	cmp	r3, r2
 8007d20:	d901      	bls.n	8007d26 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8007d22:	2303      	movs	r3, #3
 8007d24:	e0cb      	b.n	8007ebe <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007d26:	4b49      	ldr	r3, [pc, #292]	@ (8007e4c <HAL_RCC_OscConfig+0x470>)
 8007d28:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007d2a:	f003 0302 	and.w	r3, r3, #2
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d0ee      	beq.n	8007d10 <HAL_RCC_OscConfig+0x334>
 8007d32:	e014      	b.n	8007d5e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007d34:	f7fb fed8 	bl	8003ae8 <HAL_GetTick>
 8007d38:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007d3a:	e00a      	b.n	8007d52 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007d3c:	f7fb fed4 	bl	8003ae8 <HAL_GetTick>
 8007d40:	4602      	mov	r2, r0
 8007d42:	693b      	ldr	r3, [r7, #16]
 8007d44:	1ad3      	subs	r3, r2, r3
 8007d46:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007d4a:	4293      	cmp	r3, r2
 8007d4c:	d901      	bls.n	8007d52 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8007d4e:	2303      	movs	r3, #3
 8007d50:	e0b5      	b.n	8007ebe <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007d52:	4b3e      	ldr	r3, [pc, #248]	@ (8007e4c <HAL_RCC_OscConfig+0x470>)
 8007d54:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007d56:	f003 0302 	and.w	r3, r3, #2
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d1ee      	bne.n	8007d3c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007d5e:	7dfb      	ldrb	r3, [r7, #23]
 8007d60:	2b01      	cmp	r3, #1
 8007d62:	d105      	bne.n	8007d70 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007d64:	4b39      	ldr	r3, [pc, #228]	@ (8007e4c <HAL_RCC_OscConfig+0x470>)
 8007d66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d68:	4a38      	ldr	r2, [pc, #224]	@ (8007e4c <HAL_RCC_OscConfig+0x470>)
 8007d6a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007d6e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	699b      	ldr	r3, [r3, #24]
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	f000 80a1 	beq.w	8007ebc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007d7a:	4b34      	ldr	r3, [pc, #208]	@ (8007e4c <HAL_RCC_OscConfig+0x470>)
 8007d7c:	689b      	ldr	r3, [r3, #8]
 8007d7e:	f003 030c 	and.w	r3, r3, #12
 8007d82:	2b08      	cmp	r3, #8
 8007d84:	d05c      	beq.n	8007e40 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007d86:	687b      	ldr	r3, [r7, #4]
 8007d88:	699b      	ldr	r3, [r3, #24]
 8007d8a:	2b02      	cmp	r3, #2
 8007d8c:	d141      	bne.n	8007e12 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007d8e:	4b31      	ldr	r3, [pc, #196]	@ (8007e54 <HAL_RCC_OscConfig+0x478>)
 8007d90:	2200      	movs	r2, #0
 8007d92:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007d94:	f7fb fea8 	bl	8003ae8 <HAL_GetTick>
 8007d98:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007d9a:	e008      	b.n	8007dae <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007d9c:	f7fb fea4 	bl	8003ae8 <HAL_GetTick>
 8007da0:	4602      	mov	r2, r0
 8007da2:	693b      	ldr	r3, [r7, #16]
 8007da4:	1ad3      	subs	r3, r2, r3
 8007da6:	2b02      	cmp	r3, #2
 8007da8:	d901      	bls.n	8007dae <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8007daa:	2303      	movs	r3, #3
 8007dac:	e087      	b.n	8007ebe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007dae:	4b27      	ldr	r3, [pc, #156]	@ (8007e4c <HAL_RCC_OscConfig+0x470>)
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d1f0      	bne.n	8007d9c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	69da      	ldr	r2, [r3, #28]
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	6a1b      	ldr	r3, [r3, #32]
 8007dc2:	431a      	orrs	r2, r3
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007dc8:	019b      	lsls	r3, r3, #6
 8007dca:	431a      	orrs	r2, r3
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007dd0:	085b      	lsrs	r3, r3, #1
 8007dd2:	3b01      	subs	r3, #1
 8007dd4:	041b      	lsls	r3, r3, #16
 8007dd6:	431a      	orrs	r2, r3
 8007dd8:	687b      	ldr	r3, [r7, #4]
 8007dda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ddc:	061b      	lsls	r3, r3, #24
 8007dde:	491b      	ldr	r1, [pc, #108]	@ (8007e4c <HAL_RCC_OscConfig+0x470>)
 8007de0:	4313      	orrs	r3, r2
 8007de2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007de4:	4b1b      	ldr	r3, [pc, #108]	@ (8007e54 <HAL_RCC_OscConfig+0x478>)
 8007de6:	2201      	movs	r2, #1
 8007de8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007dea:	f7fb fe7d 	bl	8003ae8 <HAL_GetTick>
 8007dee:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007df0:	e008      	b.n	8007e04 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007df2:	f7fb fe79 	bl	8003ae8 <HAL_GetTick>
 8007df6:	4602      	mov	r2, r0
 8007df8:	693b      	ldr	r3, [r7, #16]
 8007dfa:	1ad3      	subs	r3, r2, r3
 8007dfc:	2b02      	cmp	r3, #2
 8007dfe:	d901      	bls.n	8007e04 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007e00:	2303      	movs	r3, #3
 8007e02:	e05c      	b.n	8007ebe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007e04:	4b11      	ldr	r3, [pc, #68]	@ (8007e4c <HAL_RCC_OscConfig+0x470>)
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d0f0      	beq.n	8007df2 <HAL_RCC_OscConfig+0x416>
 8007e10:	e054      	b.n	8007ebc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007e12:	4b10      	ldr	r3, [pc, #64]	@ (8007e54 <HAL_RCC_OscConfig+0x478>)
 8007e14:	2200      	movs	r2, #0
 8007e16:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007e18:	f7fb fe66 	bl	8003ae8 <HAL_GetTick>
 8007e1c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007e1e:	e008      	b.n	8007e32 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007e20:	f7fb fe62 	bl	8003ae8 <HAL_GetTick>
 8007e24:	4602      	mov	r2, r0
 8007e26:	693b      	ldr	r3, [r7, #16]
 8007e28:	1ad3      	subs	r3, r2, r3
 8007e2a:	2b02      	cmp	r3, #2
 8007e2c:	d901      	bls.n	8007e32 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8007e2e:	2303      	movs	r3, #3
 8007e30:	e045      	b.n	8007ebe <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007e32:	4b06      	ldr	r3, [pc, #24]	@ (8007e4c <HAL_RCC_OscConfig+0x470>)
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007e3a:	2b00      	cmp	r3, #0
 8007e3c:	d1f0      	bne.n	8007e20 <HAL_RCC_OscConfig+0x444>
 8007e3e:	e03d      	b.n	8007ebc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	699b      	ldr	r3, [r3, #24]
 8007e44:	2b01      	cmp	r3, #1
 8007e46:	d107      	bne.n	8007e58 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007e48:	2301      	movs	r3, #1
 8007e4a:	e038      	b.n	8007ebe <HAL_RCC_OscConfig+0x4e2>
 8007e4c:	40023800 	.word	0x40023800
 8007e50:	40007000 	.word	0x40007000
 8007e54:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007e58:	4b1b      	ldr	r3, [pc, #108]	@ (8007ec8 <HAL_RCC_OscConfig+0x4ec>)
 8007e5a:	685b      	ldr	r3, [r3, #4]
 8007e5c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	699b      	ldr	r3, [r3, #24]
 8007e62:	2b01      	cmp	r3, #1
 8007e64:	d028      	beq.n	8007eb8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007e66:	68fb      	ldr	r3, [r7, #12]
 8007e68:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007e70:	429a      	cmp	r2, r3
 8007e72:	d121      	bne.n	8007eb8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007e7e:	429a      	cmp	r2, r3
 8007e80:	d11a      	bne.n	8007eb8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007e82:	68fa      	ldr	r2, [r7, #12]
 8007e84:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8007e88:	4013      	ands	r3, r2
 8007e8a:	687a      	ldr	r2, [r7, #4]
 8007e8c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007e8e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007e90:	4293      	cmp	r3, r2
 8007e92:	d111      	bne.n	8007eb8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007e9e:	085b      	lsrs	r3, r3, #1
 8007ea0:	3b01      	subs	r3, #1
 8007ea2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007ea4:	429a      	cmp	r2, r3
 8007ea6:	d107      	bne.n	8007eb8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007eb2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007eb4:	429a      	cmp	r2, r3
 8007eb6:	d001      	beq.n	8007ebc <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8007eb8:	2301      	movs	r3, #1
 8007eba:	e000      	b.n	8007ebe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007ebc:	2300      	movs	r3, #0
}
 8007ebe:	4618      	mov	r0, r3
 8007ec0:	3718      	adds	r7, #24
 8007ec2:	46bd      	mov	sp, r7
 8007ec4:	bd80      	pop	{r7, pc}
 8007ec6:	bf00      	nop
 8007ec8:	40023800 	.word	0x40023800

08007ecc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007ecc:	b580      	push	{r7, lr}
 8007ece:	b084      	sub	sp, #16
 8007ed0:	af00      	add	r7, sp, #0
 8007ed2:	6078      	str	r0, [r7, #4]
 8007ed4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d101      	bne.n	8007ee0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007edc:	2301      	movs	r3, #1
 8007ede:	e0cc      	b.n	800807a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8007ee0:	4b68      	ldr	r3, [pc, #416]	@ (8008084 <HAL_RCC_ClockConfig+0x1b8>)
 8007ee2:	681b      	ldr	r3, [r3, #0]
 8007ee4:	f003 0307 	and.w	r3, r3, #7
 8007ee8:	683a      	ldr	r2, [r7, #0]
 8007eea:	429a      	cmp	r2, r3
 8007eec:	d90c      	bls.n	8007f08 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007eee:	4b65      	ldr	r3, [pc, #404]	@ (8008084 <HAL_RCC_ClockConfig+0x1b8>)
 8007ef0:	683a      	ldr	r2, [r7, #0]
 8007ef2:	b2d2      	uxtb	r2, r2
 8007ef4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8007ef6:	4b63      	ldr	r3, [pc, #396]	@ (8008084 <HAL_RCC_ClockConfig+0x1b8>)
 8007ef8:	681b      	ldr	r3, [r3, #0]
 8007efa:	f003 0307 	and.w	r3, r3, #7
 8007efe:	683a      	ldr	r2, [r7, #0]
 8007f00:	429a      	cmp	r2, r3
 8007f02:	d001      	beq.n	8007f08 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007f04:	2301      	movs	r3, #1
 8007f06:	e0b8      	b.n	800807a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	681b      	ldr	r3, [r3, #0]
 8007f0c:	f003 0302 	and.w	r3, r3, #2
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d020      	beq.n	8007f56 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	f003 0304 	and.w	r3, r3, #4
 8007f1c:	2b00      	cmp	r3, #0
 8007f1e:	d005      	beq.n	8007f2c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007f20:	4b59      	ldr	r3, [pc, #356]	@ (8008088 <HAL_RCC_ClockConfig+0x1bc>)
 8007f22:	689b      	ldr	r3, [r3, #8]
 8007f24:	4a58      	ldr	r2, [pc, #352]	@ (8008088 <HAL_RCC_ClockConfig+0x1bc>)
 8007f26:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8007f2a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	681b      	ldr	r3, [r3, #0]
 8007f30:	f003 0308 	and.w	r3, r3, #8
 8007f34:	2b00      	cmp	r3, #0
 8007f36:	d005      	beq.n	8007f44 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007f38:	4b53      	ldr	r3, [pc, #332]	@ (8008088 <HAL_RCC_ClockConfig+0x1bc>)
 8007f3a:	689b      	ldr	r3, [r3, #8]
 8007f3c:	4a52      	ldr	r2, [pc, #328]	@ (8008088 <HAL_RCC_ClockConfig+0x1bc>)
 8007f3e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8007f42:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007f44:	4b50      	ldr	r3, [pc, #320]	@ (8008088 <HAL_RCC_ClockConfig+0x1bc>)
 8007f46:	689b      	ldr	r3, [r3, #8]
 8007f48:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	689b      	ldr	r3, [r3, #8]
 8007f50:	494d      	ldr	r1, [pc, #308]	@ (8008088 <HAL_RCC_ClockConfig+0x1bc>)
 8007f52:	4313      	orrs	r3, r2
 8007f54:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	681b      	ldr	r3, [r3, #0]
 8007f5a:	f003 0301 	and.w	r3, r3, #1
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d044      	beq.n	8007fec <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007f62:	687b      	ldr	r3, [r7, #4]
 8007f64:	685b      	ldr	r3, [r3, #4]
 8007f66:	2b01      	cmp	r3, #1
 8007f68:	d107      	bne.n	8007f7a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007f6a:	4b47      	ldr	r3, [pc, #284]	@ (8008088 <HAL_RCC_ClockConfig+0x1bc>)
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d119      	bne.n	8007faa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007f76:	2301      	movs	r3, #1
 8007f78:	e07f      	b.n	800807a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	685b      	ldr	r3, [r3, #4]
 8007f7e:	2b02      	cmp	r3, #2
 8007f80:	d003      	beq.n	8007f8a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007f86:	2b03      	cmp	r3, #3
 8007f88:	d107      	bne.n	8007f9a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007f8a:	4b3f      	ldr	r3, [pc, #252]	@ (8008088 <HAL_RCC_ClockConfig+0x1bc>)
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d109      	bne.n	8007faa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007f96:	2301      	movs	r3, #1
 8007f98:	e06f      	b.n	800807a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007f9a:	4b3b      	ldr	r3, [pc, #236]	@ (8008088 <HAL_RCC_ClockConfig+0x1bc>)
 8007f9c:	681b      	ldr	r3, [r3, #0]
 8007f9e:	f003 0302 	and.w	r3, r3, #2
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d101      	bne.n	8007faa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007fa6:	2301      	movs	r3, #1
 8007fa8:	e067      	b.n	800807a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007faa:	4b37      	ldr	r3, [pc, #220]	@ (8008088 <HAL_RCC_ClockConfig+0x1bc>)
 8007fac:	689b      	ldr	r3, [r3, #8]
 8007fae:	f023 0203 	bic.w	r2, r3, #3
 8007fb2:	687b      	ldr	r3, [r7, #4]
 8007fb4:	685b      	ldr	r3, [r3, #4]
 8007fb6:	4934      	ldr	r1, [pc, #208]	@ (8008088 <HAL_RCC_ClockConfig+0x1bc>)
 8007fb8:	4313      	orrs	r3, r2
 8007fba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007fbc:	f7fb fd94 	bl	8003ae8 <HAL_GetTick>
 8007fc0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007fc2:	e00a      	b.n	8007fda <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007fc4:	f7fb fd90 	bl	8003ae8 <HAL_GetTick>
 8007fc8:	4602      	mov	r2, r0
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	1ad3      	subs	r3, r2, r3
 8007fce:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007fd2:	4293      	cmp	r3, r2
 8007fd4:	d901      	bls.n	8007fda <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007fd6:	2303      	movs	r3, #3
 8007fd8:	e04f      	b.n	800807a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007fda:	4b2b      	ldr	r3, [pc, #172]	@ (8008088 <HAL_RCC_ClockConfig+0x1bc>)
 8007fdc:	689b      	ldr	r3, [r3, #8]
 8007fde:	f003 020c 	and.w	r2, r3, #12
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	685b      	ldr	r3, [r3, #4]
 8007fe6:	009b      	lsls	r3, r3, #2
 8007fe8:	429a      	cmp	r2, r3
 8007fea:	d1eb      	bne.n	8007fc4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8007fec:	4b25      	ldr	r3, [pc, #148]	@ (8008084 <HAL_RCC_ClockConfig+0x1b8>)
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	f003 0307 	and.w	r3, r3, #7
 8007ff4:	683a      	ldr	r2, [r7, #0]
 8007ff6:	429a      	cmp	r2, r3
 8007ff8:	d20c      	bcs.n	8008014 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007ffa:	4b22      	ldr	r3, [pc, #136]	@ (8008084 <HAL_RCC_ClockConfig+0x1b8>)
 8007ffc:	683a      	ldr	r2, [r7, #0]
 8007ffe:	b2d2      	uxtb	r2, r2
 8008000:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008002:	4b20      	ldr	r3, [pc, #128]	@ (8008084 <HAL_RCC_ClockConfig+0x1b8>)
 8008004:	681b      	ldr	r3, [r3, #0]
 8008006:	f003 0307 	and.w	r3, r3, #7
 800800a:	683a      	ldr	r2, [r7, #0]
 800800c:	429a      	cmp	r2, r3
 800800e:	d001      	beq.n	8008014 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008010:	2301      	movs	r3, #1
 8008012:	e032      	b.n	800807a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	f003 0304 	and.w	r3, r3, #4
 800801c:	2b00      	cmp	r3, #0
 800801e:	d008      	beq.n	8008032 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008020:	4b19      	ldr	r3, [pc, #100]	@ (8008088 <HAL_RCC_ClockConfig+0x1bc>)
 8008022:	689b      	ldr	r3, [r3, #8]
 8008024:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	68db      	ldr	r3, [r3, #12]
 800802c:	4916      	ldr	r1, [pc, #88]	@ (8008088 <HAL_RCC_ClockConfig+0x1bc>)
 800802e:	4313      	orrs	r3, r2
 8008030:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008032:	687b      	ldr	r3, [r7, #4]
 8008034:	681b      	ldr	r3, [r3, #0]
 8008036:	f003 0308 	and.w	r3, r3, #8
 800803a:	2b00      	cmp	r3, #0
 800803c:	d009      	beq.n	8008052 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800803e:	4b12      	ldr	r3, [pc, #72]	@ (8008088 <HAL_RCC_ClockConfig+0x1bc>)
 8008040:	689b      	ldr	r3, [r3, #8]
 8008042:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	691b      	ldr	r3, [r3, #16]
 800804a:	00db      	lsls	r3, r3, #3
 800804c:	490e      	ldr	r1, [pc, #56]	@ (8008088 <HAL_RCC_ClockConfig+0x1bc>)
 800804e:	4313      	orrs	r3, r2
 8008050:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8008052:	f000 f821 	bl	8008098 <HAL_RCC_GetSysClockFreq>
 8008056:	4602      	mov	r2, r0
 8008058:	4b0b      	ldr	r3, [pc, #44]	@ (8008088 <HAL_RCC_ClockConfig+0x1bc>)
 800805a:	689b      	ldr	r3, [r3, #8]
 800805c:	091b      	lsrs	r3, r3, #4
 800805e:	f003 030f 	and.w	r3, r3, #15
 8008062:	490a      	ldr	r1, [pc, #40]	@ (800808c <HAL_RCC_ClockConfig+0x1c0>)
 8008064:	5ccb      	ldrb	r3, [r1, r3]
 8008066:	fa22 f303 	lsr.w	r3, r2, r3
 800806a:	4a09      	ldr	r2, [pc, #36]	@ (8008090 <HAL_RCC_ClockConfig+0x1c4>)
 800806c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800806e:	4b09      	ldr	r3, [pc, #36]	@ (8008094 <HAL_RCC_ClockConfig+0x1c8>)
 8008070:	681b      	ldr	r3, [r3, #0]
 8008072:	4618      	mov	r0, r3
 8008074:	f7fb fad6 	bl	8003624 <HAL_InitTick>

  return HAL_OK;
 8008078:	2300      	movs	r3, #0
}
 800807a:	4618      	mov	r0, r3
 800807c:	3710      	adds	r7, #16
 800807e:	46bd      	mov	sp, r7
 8008080:	bd80      	pop	{r7, pc}
 8008082:	bf00      	nop
 8008084:	40023c00 	.word	0x40023c00
 8008088:	40023800 	.word	0x40023800
 800808c:	08010be8 	.word	0x08010be8
 8008090:	2000009c 	.word	0x2000009c
 8008094:	200000a0 	.word	0x200000a0

08008098 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008098:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800809c:	b094      	sub	sp, #80	@ 0x50
 800809e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80080a0:	2300      	movs	r3, #0
 80080a2:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80080a4:	2300      	movs	r3, #0
 80080a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80080a8:	2300      	movs	r3, #0
 80080aa:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80080ac:	2300      	movs	r3, #0
 80080ae:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80080b0:	4b79      	ldr	r3, [pc, #484]	@ (8008298 <HAL_RCC_GetSysClockFreq+0x200>)
 80080b2:	689b      	ldr	r3, [r3, #8]
 80080b4:	f003 030c 	and.w	r3, r3, #12
 80080b8:	2b08      	cmp	r3, #8
 80080ba:	d00d      	beq.n	80080d8 <HAL_RCC_GetSysClockFreq+0x40>
 80080bc:	2b08      	cmp	r3, #8
 80080be:	f200 80e1 	bhi.w	8008284 <HAL_RCC_GetSysClockFreq+0x1ec>
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d002      	beq.n	80080cc <HAL_RCC_GetSysClockFreq+0x34>
 80080c6:	2b04      	cmp	r3, #4
 80080c8:	d003      	beq.n	80080d2 <HAL_RCC_GetSysClockFreq+0x3a>
 80080ca:	e0db      	b.n	8008284 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80080cc:	4b73      	ldr	r3, [pc, #460]	@ (800829c <HAL_RCC_GetSysClockFreq+0x204>)
 80080ce:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80080d0:	e0db      	b.n	800828a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80080d2:	4b73      	ldr	r3, [pc, #460]	@ (80082a0 <HAL_RCC_GetSysClockFreq+0x208>)
 80080d4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80080d6:	e0d8      	b.n	800828a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80080d8:	4b6f      	ldr	r3, [pc, #444]	@ (8008298 <HAL_RCC_GetSysClockFreq+0x200>)
 80080da:	685b      	ldr	r3, [r3, #4]
 80080dc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80080e0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80080e2:	4b6d      	ldr	r3, [pc, #436]	@ (8008298 <HAL_RCC_GetSysClockFreq+0x200>)
 80080e4:	685b      	ldr	r3, [r3, #4]
 80080e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80080ea:	2b00      	cmp	r3, #0
 80080ec:	d063      	beq.n	80081b6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80080ee:	4b6a      	ldr	r3, [pc, #424]	@ (8008298 <HAL_RCC_GetSysClockFreq+0x200>)
 80080f0:	685b      	ldr	r3, [r3, #4]
 80080f2:	099b      	lsrs	r3, r3, #6
 80080f4:	2200      	movs	r2, #0
 80080f6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80080f8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80080fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80080fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008100:	633b      	str	r3, [r7, #48]	@ 0x30
 8008102:	2300      	movs	r3, #0
 8008104:	637b      	str	r3, [r7, #52]	@ 0x34
 8008106:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800810a:	4622      	mov	r2, r4
 800810c:	462b      	mov	r3, r5
 800810e:	f04f 0000 	mov.w	r0, #0
 8008112:	f04f 0100 	mov.w	r1, #0
 8008116:	0159      	lsls	r1, r3, #5
 8008118:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800811c:	0150      	lsls	r0, r2, #5
 800811e:	4602      	mov	r2, r0
 8008120:	460b      	mov	r3, r1
 8008122:	4621      	mov	r1, r4
 8008124:	1a51      	subs	r1, r2, r1
 8008126:	6139      	str	r1, [r7, #16]
 8008128:	4629      	mov	r1, r5
 800812a:	eb63 0301 	sbc.w	r3, r3, r1
 800812e:	617b      	str	r3, [r7, #20]
 8008130:	f04f 0200 	mov.w	r2, #0
 8008134:	f04f 0300 	mov.w	r3, #0
 8008138:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800813c:	4659      	mov	r1, fp
 800813e:	018b      	lsls	r3, r1, #6
 8008140:	4651      	mov	r1, sl
 8008142:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008146:	4651      	mov	r1, sl
 8008148:	018a      	lsls	r2, r1, #6
 800814a:	4651      	mov	r1, sl
 800814c:	ebb2 0801 	subs.w	r8, r2, r1
 8008150:	4659      	mov	r1, fp
 8008152:	eb63 0901 	sbc.w	r9, r3, r1
 8008156:	f04f 0200 	mov.w	r2, #0
 800815a:	f04f 0300 	mov.w	r3, #0
 800815e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008162:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008166:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800816a:	4690      	mov	r8, r2
 800816c:	4699      	mov	r9, r3
 800816e:	4623      	mov	r3, r4
 8008170:	eb18 0303 	adds.w	r3, r8, r3
 8008174:	60bb      	str	r3, [r7, #8]
 8008176:	462b      	mov	r3, r5
 8008178:	eb49 0303 	adc.w	r3, r9, r3
 800817c:	60fb      	str	r3, [r7, #12]
 800817e:	f04f 0200 	mov.w	r2, #0
 8008182:	f04f 0300 	mov.w	r3, #0
 8008186:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800818a:	4629      	mov	r1, r5
 800818c:	024b      	lsls	r3, r1, #9
 800818e:	4621      	mov	r1, r4
 8008190:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8008194:	4621      	mov	r1, r4
 8008196:	024a      	lsls	r2, r1, #9
 8008198:	4610      	mov	r0, r2
 800819a:	4619      	mov	r1, r3
 800819c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800819e:	2200      	movs	r2, #0
 80081a0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80081a2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80081a4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80081a8:	f7f8 fd4e 	bl	8000c48 <__aeabi_uldivmod>
 80081ac:	4602      	mov	r2, r0
 80081ae:	460b      	mov	r3, r1
 80081b0:	4613      	mov	r3, r2
 80081b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80081b4:	e058      	b.n	8008268 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80081b6:	4b38      	ldr	r3, [pc, #224]	@ (8008298 <HAL_RCC_GetSysClockFreq+0x200>)
 80081b8:	685b      	ldr	r3, [r3, #4]
 80081ba:	099b      	lsrs	r3, r3, #6
 80081bc:	2200      	movs	r2, #0
 80081be:	4618      	mov	r0, r3
 80081c0:	4611      	mov	r1, r2
 80081c2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80081c6:	623b      	str	r3, [r7, #32]
 80081c8:	2300      	movs	r3, #0
 80081ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80081cc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80081d0:	4642      	mov	r2, r8
 80081d2:	464b      	mov	r3, r9
 80081d4:	f04f 0000 	mov.w	r0, #0
 80081d8:	f04f 0100 	mov.w	r1, #0
 80081dc:	0159      	lsls	r1, r3, #5
 80081de:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80081e2:	0150      	lsls	r0, r2, #5
 80081e4:	4602      	mov	r2, r0
 80081e6:	460b      	mov	r3, r1
 80081e8:	4641      	mov	r1, r8
 80081ea:	ebb2 0a01 	subs.w	sl, r2, r1
 80081ee:	4649      	mov	r1, r9
 80081f0:	eb63 0b01 	sbc.w	fp, r3, r1
 80081f4:	f04f 0200 	mov.w	r2, #0
 80081f8:	f04f 0300 	mov.w	r3, #0
 80081fc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8008200:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8008204:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8008208:	ebb2 040a 	subs.w	r4, r2, sl
 800820c:	eb63 050b 	sbc.w	r5, r3, fp
 8008210:	f04f 0200 	mov.w	r2, #0
 8008214:	f04f 0300 	mov.w	r3, #0
 8008218:	00eb      	lsls	r3, r5, #3
 800821a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800821e:	00e2      	lsls	r2, r4, #3
 8008220:	4614      	mov	r4, r2
 8008222:	461d      	mov	r5, r3
 8008224:	4643      	mov	r3, r8
 8008226:	18e3      	adds	r3, r4, r3
 8008228:	603b      	str	r3, [r7, #0]
 800822a:	464b      	mov	r3, r9
 800822c:	eb45 0303 	adc.w	r3, r5, r3
 8008230:	607b      	str	r3, [r7, #4]
 8008232:	f04f 0200 	mov.w	r2, #0
 8008236:	f04f 0300 	mov.w	r3, #0
 800823a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800823e:	4629      	mov	r1, r5
 8008240:	028b      	lsls	r3, r1, #10
 8008242:	4621      	mov	r1, r4
 8008244:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008248:	4621      	mov	r1, r4
 800824a:	028a      	lsls	r2, r1, #10
 800824c:	4610      	mov	r0, r2
 800824e:	4619      	mov	r1, r3
 8008250:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008252:	2200      	movs	r2, #0
 8008254:	61bb      	str	r3, [r7, #24]
 8008256:	61fa      	str	r2, [r7, #28]
 8008258:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800825c:	f7f8 fcf4 	bl	8000c48 <__aeabi_uldivmod>
 8008260:	4602      	mov	r2, r0
 8008262:	460b      	mov	r3, r1
 8008264:	4613      	mov	r3, r2
 8008266:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8008268:	4b0b      	ldr	r3, [pc, #44]	@ (8008298 <HAL_RCC_GetSysClockFreq+0x200>)
 800826a:	685b      	ldr	r3, [r3, #4]
 800826c:	0c1b      	lsrs	r3, r3, #16
 800826e:	f003 0303 	and.w	r3, r3, #3
 8008272:	3301      	adds	r3, #1
 8008274:	005b      	lsls	r3, r3, #1
 8008276:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8008278:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800827a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800827c:	fbb2 f3f3 	udiv	r3, r2, r3
 8008280:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8008282:	e002      	b.n	800828a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008284:	4b05      	ldr	r3, [pc, #20]	@ (800829c <HAL_RCC_GetSysClockFreq+0x204>)
 8008286:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8008288:	bf00      	nop
    }
  }
  return sysclockfreq;
 800828a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800828c:	4618      	mov	r0, r3
 800828e:	3750      	adds	r7, #80	@ 0x50
 8008290:	46bd      	mov	sp, r7
 8008292:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008296:	bf00      	nop
 8008298:	40023800 	.word	0x40023800
 800829c:	00f42400 	.word	0x00f42400
 80082a0:	007a1200 	.word	0x007a1200

080082a4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80082a4:	b480      	push	{r7}
 80082a6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80082a8:	4b03      	ldr	r3, [pc, #12]	@ (80082b8 <HAL_RCC_GetHCLKFreq+0x14>)
 80082aa:	681b      	ldr	r3, [r3, #0]
}
 80082ac:	4618      	mov	r0, r3
 80082ae:	46bd      	mov	sp, r7
 80082b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082b4:	4770      	bx	lr
 80082b6:	bf00      	nop
 80082b8:	2000009c 	.word	0x2000009c

080082bc <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80082bc:	b580      	push	{r7, lr}
 80082be:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80082c0:	f7ff fff0 	bl	80082a4 <HAL_RCC_GetHCLKFreq>
 80082c4:	4602      	mov	r2, r0
 80082c6:	4b05      	ldr	r3, [pc, #20]	@ (80082dc <HAL_RCC_GetPCLK1Freq+0x20>)
 80082c8:	689b      	ldr	r3, [r3, #8]
 80082ca:	0a9b      	lsrs	r3, r3, #10
 80082cc:	f003 0307 	and.w	r3, r3, #7
 80082d0:	4903      	ldr	r1, [pc, #12]	@ (80082e0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80082d2:	5ccb      	ldrb	r3, [r1, r3]
 80082d4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80082d8:	4618      	mov	r0, r3
 80082da:	bd80      	pop	{r7, pc}
 80082dc:	40023800 	.word	0x40023800
 80082e0:	08010bf8 	.word	0x08010bf8

080082e4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80082e4:	b580      	push	{r7, lr}
 80082e6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80082e8:	f7ff ffdc 	bl	80082a4 <HAL_RCC_GetHCLKFreq>
 80082ec:	4602      	mov	r2, r0
 80082ee:	4b05      	ldr	r3, [pc, #20]	@ (8008304 <HAL_RCC_GetPCLK2Freq+0x20>)
 80082f0:	689b      	ldr	r3, [r3, #8]
 80082f2:	0b5b      	lsrs	r3, r3, #13
 80082f4:	f003 0307 	and.w	r3, r3, #7
 80082f8:	4903      	ldr	r1, [pc, #12]	@ (8008308 <HAL_RCC_GetPCLK2Freq+0x24>)
 80082fa:	5ccb      	ldrb	r3, [r1, r3]
 80082fc:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008300:	4618      	mov	r0, r3
 8008302:	bd80      	pop	{r7, pc}
 8008304:	40023800 	.word	0x40023800
 8008308:	08010bf8 	.word	0x08010bf8

0800830c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800830c:	b480      	push	{r7}
 800830e:	b083      	sub	sp, #12
 8008310:	af00      	add	r7, sp, #0
 8008312:	6078      	str	r0, [r7, #4]
 8008314:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	220f      	movs	r2, #15
 800831a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800831c:	4b12      	ldr	r3, [pc, #72]	@ (8008368 <HAL_RCC_GetClockConfig+0x5c>)
 800831e:	689b      	ldr	r3, [r3, #8]
 8008320:	f003 0203 	and.w	r2, r3, #3
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8008328:	4b0f      	ldr	r3, [pc, #60]	@ (8008368 <HAL_RCC_GetClockConfig+0x5c>)
 800832a:	689b      	ldr	r3, [r3, #8]
 800832c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8008330:	687b      	ldr	r3, [r7, #4]
 8008332:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8008334:	4b0c      	ldr	r3, [pc, #48]	@ (8008368 <HAL_RCC_GetClockConfig+0x5c>)
 8008336:	689b      	ldr	r3, [r3, #8]
 8008338:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8008340:	4b09      	ldr	r3, [pc, #36]	@ (8008368 <HAL_RCC_GetClockConfig+0x5c>)
 8008342:	689b      	ldr	r3, [r3, #8]
 8008344:	08db      	lsrs	r3, r3, #3
 8008346:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800834e:	4b07      	ldr	r3, [pc, #28]	@ (800836c <HAL_RCC_GetClockConfig+0x60>)
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	f003 0207 	and.w	r2, r3, #7
 8008356:	683b      	ldr	r3, [r7, #0]
 8008358:	601a      	str	r2, [r3, #0]
}
 800835a:	bf00      	nop
 800835c:	370c      	adds	r7, #12
 800835e:	46bd      	mov	sp, r7
 8008360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008364:	4770      	bx	lr
 8008366:	bf00      	nop
 8008368:	40023800 	.word	0x40023800
 800836c:	40023c00 	.word	0x40023c00

08008370 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008370:	b580      	push	{r7, lr}
 8008372:	b086      	sub	sp, #24
 8008374:	af00      	add	r7, sp, #0
 8008376:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008378:	2300      	movs	r3, #0
 800837a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800837c:	2300      	movs	r3, #0
 800837e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	f003 0301 	and.w	r3, r3, #1
 8008388:	2b00      	cmp	r3, #0
 800838a:	d105      	bne.n	8008398 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8008394:	2b00      	cmp	r3, #0
 8008396:	d035      	beq.n	8008404 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8008398:	4b62      	ldr	r3, [pc, #392]	@ (8008524 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800839a:	2200      	movs	r2, #0
 800839c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800839e:	f7fb fba3 	bl	8003ae8 <HAL_GetTick>
 80083a2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80083a4:	e008      	b.n	80083b8 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80083a6:	f7fb fb9f 	bl	8003ae8 <HAL_GetTick>
 80083aa:	4602      	mov	r2, r0
 80083ac:	697b      	ldr	r3, [r7, #20]
 80083ae:	1ad3      	subs	r3, r2, r3
 80083b0:	2b02      	cmp	r3, #2
 80083b2:	d901      	bls.n	80083b8 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80083b4:	2303      	movs	r3, #3
 80083b6:	e0b0      	b.n	800851a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80083b8:	4b5b      	ldr	r3, [pc, #364]	@ (8008528 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d1f0      	bne.n	80083a6 <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	685b      	ldr	r3, [r3, #4]
 80083c8:	019a      	lsls	r2, r3, #6
 80083ca:	687b      	ldr	r3, [r7, #4]
 80083cc:	689b      	ldr	r3, [r3, #8]
 80083ce:	071b      	lsls	r3, r3, #28
 80083d0:	4955      	ldr	r1, [pc, #340]	@ (8008528 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80083d2:	4313      	orrs	r3, r2
 80083d4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80083d8:	4b52      	ldr	r3, [pc, #328]	@ (8008524 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80083da:	2201      	movs	r2, #1
 80083dc:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80083de:	f7fb fb83 	bl	8003ae8 <HAL_GetTick>
 80083e2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80083e4:	e008      	b.n	80083f8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80083e6:	f7fb fb7f 	bl	8003ae8 <HAL_GetTick>
 80083ea:	4602      	mov	r2, r0
 80083ec:	697b      	ldr	r3, [r7, #20]
 80083ee:	1ad3      	subs	r3, r2, r3
 80083f0:	2b02      	cmp	r3, #2
 80083f2:	d901      	bls.n	80083f8 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80083f4:	2303      	movs	r3, #3
 80083f6:	e090      	b.n	800851a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80083f8:	4b4b      	ldr	r3, [pc, #300]	@ (8008528 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008400:	2b00      	cmp	r3, #0
 8008402:	d0f0      	beq.n	80083e6 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	f003 0302 	and.w	r3, r3, #2
 800840c:	2b00      	cmp	r3, #0
 800840e:	f000 8083 	beq.w	8008518 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8008412:	2300      	movs	r3, #0
 8008414:	60fb      	str	r3, [r7, #12]
 8008416:	4b44      	ldr	r3, [pc, #272]	@ (8008528 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008418:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800841a:	4a43      	ldr	r2, [pc, #268]	@ (8008528 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800841c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008420:	6413      	str	r3, [r2, #64]	@ 0x40
 8008422:	4b41      	ldr	r3, [pc, #260]	@ (8008528 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008424:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008426:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800842a:	60fb      	str	r3, [r7, #12]
 800842c:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800842e:	4b3f      	ldr	r3, [pc, #252]	@ (800852c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	4a3e      	ldr	r2, [pc, #248]	@ (800852c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8008434:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008438:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800843a:	f7fb fb55 	bl	8003ae8 <HAL_GetTick>
 800843e:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8008440:	e008      	b.n	8008454 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008442:	f7fb fb51 	bl	8003ae8 <HAL_GetTick>
 8008446:	4602      	mov	r2, r0
 8008448:	697b      	ldr	r3, [r7, #20]
 800844a:	1ad3      	subs	r3, r2, r3
 800844c:	2b02      	cmp	r3, #2
 800844e:	d901      	bls.n	8008454 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8008450:	2303      	movs	r3, #3
 8008452:	e062      	b.n	800851a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8008454:	4b35      	ldr	r3, [pc, #212]	@ (800852c <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800845c:	2b00      	cmp	r3, #0
 800845e:	d0f0      	beq.n	8008442 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8008460:	4b31      	ldr	r3, [pc, #196]	@ (8008528 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008462:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008464:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008468:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800846a:	693b      	ldr	r3, [r7, #16]
 800846c:	2b00      	cmp	r3, #0
 800846e:	d02f      	beq.n	80084d0 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	68db      	ldr	r3, [r3, #12]
 8008474:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008478:	693a      	ldr	r2, [r7, #16]
 800847a:	429a      	cmp	r2, r3
 800847c:	d028      	beq.n	80084d0 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800847e:	4b2a      	ldr	r3, [pc, #168]	@ (8008528 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008480:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8008482:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008486:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8008488:	4b29      	ldr	r3, [pc, #164]	@ (8008530 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800848a:	2201      	movs	r2, #1
 800848c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800848e:	4b28      	ldr	r3, [pc, #160]	@ (8008530 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8008490:	2200      	movs	r2, #0
 8008492:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8008494:	4a24      	ldr	r2, [pc, #144]	@ (8008528 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008496:	693b      	ldr	r3, [r7, #16]
 8008498:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800849a:	4b23      	ldr	r3, [pc, #140]	@ (8008528 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800849c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800849e:	f003 0301 	and.w	r3, r3, #1
 80084a2:	2b01      	cmp	r3, #1
 80084a4:	d114      	bne.n	80084d0 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80084a6:	f7fb fb1f 	bl	8003ae8 <HAL_GetTick>
 80084aa:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80084ac:	e00a      	b.n	80084c4 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80084ae:	f7fb fb1b 	bl	8003ae8 <HAL_GetTick>
 80084b2:	4602      	mov	r2, r0
 80084b4:	697b      	ldr	r3, [r7, #20]
 80084b6:	1ad3      	subs	r3, r2, r3
 80084b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80084bc:	4293      	cmp	r3, r2
 80084be:	d901      	bls.n	80084c4 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 80084c0:	2303      	movs	r3, #3
 80084c2:	e02a      	b.n	800851a <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80084c4:	4b18      	ldr	r3, [pc, #96]	@ (8008528 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80084c6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80084c8:	f003 0302 	and.w	r3, r3, #2
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d0ee      	beq.n	80084ae <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	68db      	ldr	r3, [r3, #12]
 80084d4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80084d8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80084dc:	d10d      	bne.n	80084fa <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80084de:	4b12      	ldr	r3, [pc, #72]	@ (8008528 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80084e0:	689b      	ldr	r3, [r3, #8]
 80084e2:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	68db      	ldr	r3, [r3, #12]
 80084ea:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80084ee:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80084f2:	490d      	ldr	r1, [pc, #52]	@ (8008528 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80084f4:	4313      	orrs	r3, r2
 80084f6:	608b      	str	r3, [r1, #8]
 80084f8:	e005      	b.n	8008506 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80084fa:	4b0b      	ldr	r3, [pc, #44]	@ (8008528 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80084fc:	689b      	ldr	r3, [r3, #8]
 80084fe:	4a0a      	ldr	r2, [pc, #40]	@ (8008528 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008500:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8008504:	6093      	str	r3, [r2, #8]
 8008506:	4b08      	ldr	r3, [pc, #32]	@ (8008528 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008508:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800850a:	687b      	ldr	r3, [r7, #4]
 800850c:	68db      	ldr	r3, [r3, #12]
 800850e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008512:	4905      	ldr	r1, [pc, #20]	@ (8008528 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008514:	4313      	orrs	r3, r2
 8008516:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 8008518:	2300      	movs	r3, #0
}
 800851a:	4618      	mov	r0, r3
 800851c:	3718      	adds	r7, #24
 800851e:	46bd      	mov	sp, r7
 8008520:	bd80      	pop	{r7, pc}
 8008522:	bf00      	nop
 8008524:	42470068 	.word	0x42470068
 8008528:	40023800 	.word	0x40023800
 800852c:	40007000 	.word	0x40007000
 8008530:	42470e40 	.word	0x42470e40

08008534 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008534:	b580      	push	{r7, lr}
 8008536:	b084      	sub	sp, #16
 8008538:	af00      	add	r7, sp, #0
 800853a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800853c:	2301      	movs	r3, #1
 800853e:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	2b00      	cmp	r3, #0
 8008544:	d101      	bne.n	800854a <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8008546:	2301      	movs	r3, #1
 8008548:	e073      	b.n	8008632 <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	7f5b      	ldrb	r3, [r3, #29]
 800854e:	b2db      	uxtb	r3, r3
 8008550:	2b00      	cmp	r3, #0
 8008552:	d105      	bne.n	8008560 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8008554:	687b      	ldr	r3, [r7, #4]
 8008556:	2200      	movs	r2, #0
 8008558:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800855a:	6878      	ldr	r0, [r7, #4]
 800855c:	f7fb f80c 	bl	8003578 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	2202      	movs	r2, #2
 8008564:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	68db      	ldr	r3, [r3, #12]
 800856c:	f003 0310 	and.w	r3, r3, #16
 8008570:	2b10      	cmp	r3, #16
 8008572:	d055      	beq.n	8008620 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	22ca      	movs	r2, #202	@ 0xca
 800857a:	625a      	str	r2, [r3, #36]	@ 0x24
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	2253      	movs	r2, #83	@ 0x53
 8008582:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8008584:	6878      	ldr	r0, [r7, #4]
 8008586:	f000 fa49 	bl	8008a1c <RTC_EnterInitMode>
 800858a:	4603      	mov	r3, r0
 800858c:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800858e:	7bfb      	ldrb	r3, [r7, #15]
 8008590:	2b00      	cmp	r3, #0
 8008592:	d12c      	bne.n	80085ee <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	689b      	ldr	r3, [r3, #8]
 800859a:	687a      	ldr	r2, [r7, #4]
 800859c:	6812      	ldr	r2, [r2, #0]
 800859e:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80085a2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80085a6:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	681b      	ldr	r3, [r3, #0]
 80085ac:	6899      	ldr	r1, [r3, #8]
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	685a      	ldr	r2, [r3, #4]
 80085b2:	687b      	ldr	r3, [r7, #4]
 80085b4:	691b      	ldr	r3, [r3, #16]
 80085b6:	431a      	orrs	r2, r3
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	695b      	ldr	r3, [r3, #20]
 80085bc:	431a      	orrs	r2, r3
 80085be:	687b      	ldr	r3, [r7, #4]
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	430a      	orrs	r2, r1
 80085c4:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	687a      	ldr	r2, [r7, #4]
 80085cc:	68d2      	ldr	r2, [r2, #12]
 80085ce:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	681b      	ldr	r3, [r3, #0]
 80085d4:	6919      	ldr	r1, [r3, #16]
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	689b      	ldr	r3, [r3, #8]
 80085da:	041a      	lsls	r2, r3, #16
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	681b      	ldr	r3, [r3, #0]
 80085e0:	430a      	orrs	r2, r1
 80085e2:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80085e4:	6878      	ldr	r0, [r7, #4]
 80085e6:	f000 fa50 	bl	8008a8a <RTC_ExitInitMode>
 80085ea:	4603      	mov	r3, r0
 80085ec:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80085ee:	7bfb      	ldrb	r3, [r7, #15]
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d110      	bne.n	8008616 <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	681b      	ldr	r3, [r3, #0]
 80085f8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8008602:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8008604:	687b      	ldr	r3, [r7, #4]
 8008606:	681b      	ldr	r3, [r3, #0]
 8008608:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 800860a:	687b      	ldr	r3, [r7, #4]
 800860c:	699a      	ldr	r2, [r3, #24]
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	430a      	orrs	r2, r1
 8008614:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	22ff      	movs	r2, #255	@ 0xff
 800861c:	625a      	str	r2, [r3, #36]	@ 0x24
 800861e:	e001      	b.n	8008624 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8008620:	2300      	movs	r3, #0
 8008622:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8008624:	7bfb      	ldrb	r3, [r7, #15]
 8008626:	2b00      	cmp	r3, #0
 8008628:	d102      	bne.n	8008630 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	2201      	movs	r2, #1
 800862e:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8008630:	7bfb      	ldrb	r3, [r7, #15]
}
 8008632:	4618      	mov	r0, r3
 8008634:	3710      	adds	r7, #16
 8008636:	46bd      	mov	sp, r7
 8008638:	bd80      	pop	{r7, pc}

0800863a <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800863a:	b590      	push	{r4, r7, lr}
 800863c:	b087      	sub	sp, #28
 800863e:	af00      	add	r7, sp, #0
 8008640:	60f8      	str	r0, [r7, #12]
 8008642:	60b9      	str	r1, [r7, #8]
 8008644:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8008646:	2300      	movs	r3, #0
 8008648:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800864a:	68fb      	ldr	r3, [r7, #12]
 800864c:	7f1b      	ldrb	r3, [r3, #28]
 800864e:	2b01      	cmp	r3, #1
 8008650:	d101      	bne.n	8008656 <HAL_RTC_SetTime+0x1c>
 8008652:	2302      	movs	r3, #2
 8008654:	e087      	b.n	8008766 <HAL_RTC_SetTime+0x12c>
 8008656:	68fb      	ldr	r3, [r7, #12]
 8008658:	2201      	movs	r2, #1
 800865a:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800865c:	68fb      	ldr	r3, [r7, #12]
 800865e:	2202      	movs	r2, #2
 8008660:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	2b00      	cmp	r3, #0
 8008666:	d126      	bne.n	80086b6 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8008668:	68fb      	ldr	r3, [r7, #12]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	689b      	ldr	r3, [r3, #8]
 800866e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008672:	2b00      	cmp	r3, #0
 8008674:	d102      	bne.n	800867c <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8008676:	68bb      	ldr	r3, [r7, #8]
 8008678:	2200      	movs	r2, #0
 800867a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800867c:	68bb      	ldr	r3, [r7, #8]
 800867e:	781b      	ldrb	r3, [r3, #0]
 8008680:	4618      	mov	r0, r3
 8008682:	f000 fa27 	bl	8008ad4 <RTC_ByteToBcd2>
 8008686:	4603      	mov	r3, r0
 8008688:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800868a:	68bb      	ldr	r3, [r7, #8]
 800868c:	785b      	ldrb	r3, [r3, #1]
 800868e:	4618      	mov	r0, r3
 8008690:	f000 fa20 	bl	8008ad4 <RTC_ByteToBcd2>
 8008694:	4603      	mov	r3, r0
 8008696:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8008698:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 800869a:	68bb      	ldr	r3, [r7, #8]
 800869c:	789b      	ldrb	r3, [r3, #2]
 800869e:	4618      	mov	r0, r3
 80086a0:	f000 fa18 	bl	8008ad4 <RTC_ByteToBcd2>
 80086a4:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80086a6:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 80086aa:	68bb      	ldr	r3, [r7, #8]
 80086ac:	78db      	ldrb	r3, [r3, #3]
 80086ae:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80086b0:	4313      	orrs	r3, r2
 80086b2:	617b      	str	r3, [r7, #20]
 80086b4:	e018      	b.n	80086e8 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80086b6:	68fb      	ldr	r3, [r7, #12]
 80086b8:	681b      	ldr	r3, [r3, #0]
 80086ba:	689b      	ldr	r3, [r3, #8]
 80086bc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80086c0:	2b00      	cmp	r3, #0
 80086c2:	d102      	bne.n	80086ca <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80086c4:	68bb      	ldr	r3, [r7, #8]
 80086c6:	2200      	movs	r2, #0
 80086c8:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80086ca:	68bb      	ldr	r3, [r7, #8]
 80086cc:	781b      	ldrb	r3, [r3, #0]
 80086ce:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80086d0:	68bb      	ldr	r3, [r7, #8]
 80086d2:	785b      	ldrb	r3, [r3, #1]
 80086d4:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80086d6:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 80086d8:	68ba      	ldr	r2, [r7, #8]
 80086da:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80086dc:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80086de:	68bb      	ldr	r3, [r7, #8]
 80086e0:	78db      	ldrb	r3, [r3, #3]
 80086e2:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80086e4:	4313      	orrs	r3, r2
 80086e6:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80086e8:	68fb      	ldr	r3, [r7, #12]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	22ca      	movs	r2, #202	@ 0xca
 80086ee:	625a      	str	r2, [r3, #36]	@ 0x24
 80086f0:	68fb      	ldr	r3, [r7, #12]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	2253      	movs	r2, #83	@ 0x53
 80086f6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80086f8:	68f8      	ldr	r0, [r7, #12]
 80086fa:	f000 f98f 	bl	8008a1c <RTC_EnterInitMode>
 80086fe:	4603      	mov	r3, r0
 8008700:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8008702:	7cfb      	ldrb	r3, [r7, #19]
 8008704:	2b00      	cmp	r3, #0
 8008706:	d120      	bne.n	800874a <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 8008708:	68fb      	ldr	r3, [r7, #12]
 800870a:	681a      	ldr	r2, [r3, #0]
 800870c:	697b      	ldr	r3, [r7, #20]
 800870e:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8008712:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8008716:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	681b      	ldr	r3, [r3, #0]
 800871c:	689a      	ldr	r2, [r3, #8]
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8008726:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8008728:	68fb      	ldr	r3, [r7, #12]
 800872a:	681b      	ldr	r3, [r3, #0]
 800872c:	6899      	ldr	r1, [r3, #8]
 800872e:	68bb      	ldr	r3, [r7, #8]
 8008730:	68da      	ldr	r2, [r3, #12]
 8008732:	68bb      	ldr	r3, [r7, #8]
 8008734:	691b      	ldr	r3, [r3, #16]
 8008736:	431a      	orrs	r2, r3
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	430a      	orrs	r2, r1
 800873e:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8008740:	68f8      	ldr	r0, [r7, #12]
 8008742:	f000 f9a2 	bl	8008a8a <RTC_ExitInitMode>
 8008746:	4603      	mov	r3, r0
 8008748:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800874a:	7cfb      	ldrb	r3, [r7, #19]
 800874c:	2b00      	cmp	r3, #0
 800874e:	d102      	bne.n	8008756 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8008750:	68fb      	ldr	r3, [r7, #12]
 8008752:	2201      	movs	r2, #1
 8008754:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008756:	68fb      	ldr	r3, [r7, #12]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	22ff      	movs	r2, #255	@ 0xff
 800875c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800875e:	68fb      	ldr	r3, [r7, #12]
 8008760:	2200      	movs	r2, #0
 8008762:	771a      	strb	r2, [r3, #28]

  return status;
 8008764:	7cfb      	ldrb	r3, [r7, #19]
}
 8008766:	4618      	mov	r0, r3
 8008768:	371c      	adds	r7, #28
 800876a:	46bd      	mov	sp, r7
 800876c:	bd90      	pop	{r4, r7, pc}

0800876e <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800876e:	b580      	push	{r7, lr}
 8008770:	b086      	sub	sp, #24
 8008772:	af00      	add	r7, sp, #0
 8008774:	60f8      	str	r0, [r7, #12]
 8008776:	60b9      	str	r1, [r7, #8]
 8008778:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800877a:	2300      	movs	r3, #0
 800877c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800877e:	68fb      	ldr	r3, [r7, #12]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8008784:	68bb      	ldr	r3, [r7, #8]
 8008786:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	681b      	ldr	r3, [r3, #0]
 800878c:	691b      	ldr	r3, [r3, #16]
 800878e:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8008792:	68bb      	ldr	r3, [r7, #8]
 8008794:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8008796:	68fb      	ldr	r3, [r7, #12]
 8008798:	681b      	ldr	r3, [r3, #0]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 80087a0:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 80087a4:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 80087a6:	697b      	ldr	r3, [r7, #20]
 80087a8:	0c1b      	lsrs	r3, r3, #16
 80087aa:	b2db      	uxtb	r3, r3
 80087ac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80087b0:	b2da      	uxtb	r2, r3
 80087b2:	68bb      	ldr	r3, [r7, #8]
 80087b4:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80087b6:	697b      	ldr	r3, [r7, #20]
 80087b8:	0a1b      	lsrs	r3, r3, #8
 80087ba:	b2db      	uxtb	r3, r3
 80087bc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80087c0:	b2da      	uxtb	r2, r3
 80087c2:	68bb      	ldr	r3, [r7, #8]
 80087c4:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 80087c6:	697b      	ldr	r3, [r7, #20]
 80087c8:	b2db      	uxtb	r3, r3
 80087ca:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80087ce:	b2da      	uxtb	r2, r3
 80087d0:	68bb      	ldr	r3, [r7, #8]
 80087d2:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 80087d4:	697b      	ldr	r3, [r7, #20]
 80087d6:	0d9b      	lsrs	r3, r3, #22
 80087d8:	b2db      	uxtb	r3, r3
 80087da:	f003 0301 	and.w	r3, r3, #1
 80087de:	b2da      	uxtb	r2, r3
 80087e0:	68bb      	ldr	r3, [r7, #8]
 80087e2:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80087e4:	687b      	ldr	r3, [r7, #4]
 80087e6:	2b00      	cmp	r3, #0
 80087e8:	d11a      	bne.n	8008820 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80087ea:	68bb      	ldr	r3, [r7, #8]
 80087ec:	781b      	ldrb	r3, [r3, #0]
 80087ee:	4618      	mov	r0, r3
 80087f0:	f000 f98e 	bl	8008b10 <RTC_Bcd2ToByte>
 80087f4:	4603      	mov	r3, r0
 80087f6:	461a      	mov	r2, r3
 80087f8:	68bb      	ldr	r3, [r7, #8]
 80087fa:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80087fc:	68bb      	ldr	r3, [r7, #8]
 80087fe:	785b      	ldrb	r3, [r3, #1]
 8008800:	4618      	mov	r0, r3
 8008802:	f000 f985 	bl	8008b10 <RTC_Bcd2ToByte>
 8008806:	4603      	mov	r3, r0
 8008808:	461a      	mov	r2, r3
 800880a:	68bb      	ldr	r3, [r7, #8]
 800880c:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 800880e:	68bb      	ldr	r3, [r7, #8]
 8008810:	789b      	ldrb	r3, [r3, #2]
 8008812:	4618      	mov	r0, r3
 8008814:	f000 f97c 	bl	8008b10 <RTC_Bcd2ToByte>
 8008818:	4603      	mov	r3, r0
 800881a:	461a      	mov	r2, r3
 800881c:	68bb      	ldr	r3, [r7, #8]
 800881e:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8008820:	2300      	movs	r3, #0
}
 8008822:	4618      	mov	r0, r3
 8008824:	3718      	adds	r7, #24
 8008826:	46bd      	mov	sp, r7
 8008828:	bd80      	pop	{r7, pc}

0800882a <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800882a:	b590      	push	{r4, r7, lr}
 800882c:	b087      	sub	sp, #28
 800882e:	af00      	add	r7, sp, #0
 8008830:	60f8      	str	r0, [r7, #12]
 8008832:	60b9      	str	r1, [r7, #8]
 8008834:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8008836:	2300      	movs	r3, #0
 8008838:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800883a:	68fb      	ldr	r3, [r7, #12]
 800883c:	7f1b      	ldrb	r3, [r3, #28]
 800883e:	2b01      	cmp	r3, #1
 8008840:	d101      	bne.n	8008846 <HAL_RTC_SetDate+0x1c>
 8008842:	2302      	movs	r3, #2
 8008844:	e071      	b.n	800892a <HAL_RTC_SetDate+0x100>
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	2201      	movs	r2, #1
 800884a:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	2202      	movs	r2, #2
 8008850:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	2b00      	cmp	r3, #0
 8008856:	d10e      	bne.n	8008876 <HAL_RTC_SetDate+0x4c>
 8008858:	68bb      	ldr	r3, [r7, #8]
 800885a:	785b      	ldrb	r3, [r3, #1]
 800885c:	f003 0310 	and.w	r3, r3, #16
 8008860:	2b00      	cmp	r3, #0
 8008862:	d008      	beq.n	8008876 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8008864:	68bb      	ldr	r3, [r7, #8]
 8008866:	785b      	ldrb	r3, [r3, #1]
 8008868:	f023 0310 	bic.w	r3, r3, #16
 800886c:	b2db      	uxtb	r3, r3
 800886e:	330a      	adds	r3, #10
 8008870:	b2da      	uxtb	r2, r3
 8008872:	68bb      	ldr	r3, [r7, #8]
 8008874:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8008876:	687b      	ldr	r3, [r7, #4]
 8008878:	2b00      	cmp	r3, #0
 800887a:	d11c      	bne.n	80088b6 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800887c:	68bb      	ldr	r3, [r7, #8]
 800887e:	78db      	ldrb	r3, [r3, #3]
 8008880:	4618      	mov	r0, r3
 8008882:	f000 f927 	bl	8008ad4 <RTC_ByteToBcd2>
 8008886:	4603      	mov	r3, r0
 8008888:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800888a:	68bb      	ldr	r3, [r7, #8]
 800888c:	785b      	ldrb	r3, [r3, #1]
 800888e:	4618      	mov	r0, r3
 8008890:	f000 f920 	bl	8008ad4 <RTC_ByteToBcd2>
 8008894:	4603      	mov	r3, r0
 8008896:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8008898:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 800889a:	68bb      	ldr	r3, [r7, #8]
 800889c:	789b      	ldrb	r3, [r3, #2]
 800889e:	4618      	mov	r0, r3
 80088a0:	f000 f918 	bl	8008ad4 <RTC_ByteToBcd2>
 80088a4:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80088a6:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 80088aa:	68bb      	ldr	r3, [r7, #8]
 80088ac:	781b      	ldrb	r3, [r3, #0]
 80088ae:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80088b0:	4313      	orrs	r3, r2
 80088b2:	617b      	str	r3, [r7, #20]
 80088b4:	e00e      	b.n	80088d4 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80088b6:	68bb      	ldr	r3, [r7, #8]
 80088b8:	78db      	ldrb	r3, [r3, #3]
 80088ba:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80088bc:	68bb      	ldr	r3, [r7, #8]
 80088be:	785b      	ldrb	r3, [r3, #1]
 80088c0:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80088c2:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 80088c4:	68ba      	ldr	r2, [r7, #8]
 80088c6:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80088c8:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80088ca:	68bb      	ldr	r3, [r7, #8]
 80088cc:	781b      	ldrb	r3, [r3, #0]
 80088ce:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80088d0:	4313      	orrs	r3, r2
 80088d2:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80088d4:	68fb      	ldr	r3, [r7, #12]
 80088d6:	681b      	ldr	r3, [r3, #0]
 80088d8:	22ca      	movs	r2, #202	@ 0xca
 80088da:	625a      	str	r2, [r3, #36]	@ 0x24
 80088dc:	68fb      	ldr	r3, [r7, #12]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	2253      	movs	r2, #83	@ 0x53
 80088e2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80088e4:	68f8      	ldr	r0, [r7, #12]
 80088e6:	f000 f899 	bl	8008a1c <RTC_EnterInitMode>
 80088ea:	4603      	mov	r3, r0
 80088ec:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80088ee:	7cfb      	ldrb	r3, [r7, #19]
 80088f0:	2b00      	cmp	r3, #0
 80088f2:	d10c      	bne.n	800890e <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80088f4:	68fb      	ldr	r3, [r7, #12]
 80088f6:	681a      	ldr	r2, [r3, #0]
 80088f8:	697b      	ldr	r3, [r7, #20]
 80088fa:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80088fe:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8008902:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8008904:	68f8      	ldr	r0, [r7, #12]
 8008906:	f000 f8c0 	bl	8008a8a <RTC_ExitInitMode>
 800890a:	4603      	mov	r3, r0
 800890c:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800890e:	7cfb      	ldrb	r3, [r7, #19]
 8008910:	2b00      	cmp	r3, #0
 8008912:	d102      	bne.n	800891a <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	2201      	movs	r2, #1
 8008918:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800891a:	68fb      	ldr	r3, [r7, #12]
 800891c:	681b      	ldr	r3, [r3, #0]
 800891e:	22ff      	movs	r2, #255	@ 0xff
 8008920:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008922:	68fb      	ldr	r3, [r7, #12]
 8008924:	2200      	movs	r2, #0
 8008926:	771a      	strb	r2, [r3, #28]

  return status;
 8008928:	7cfb      	ldrb	r3, [r7, #19]
}
 800892a:	4618      	mov	r0, r3
 800892c:	371c      	adds	r7, #28
 800892e:	46bd      	mov	sp, r7
 8008930:	bd90      	pop	{r4, r7, pc}

08008932 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8008932:	b580      	push	{r7, lr}
 8008934:	b086      	sub	sp, #24
 8008936:	af00      	add	r7, sp, #0
 8008938:	60f8      	str	r0, [r7, #12]
 800893a:	60b9      	str	r1, [r7, #8]
 800893c:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800893e:	2300      	movs	r3, #0
 8008940:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8008942:	68fb      	ldr	r3, [r7, #12]
 8008944:	681b      	ldr	r3, [r3, #0]
 8008946:	685b      	ldr	r3, [r3, #4]
 8008948:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800894c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8008950:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8008952:	697b      	ldr	r3, [r7, #20]
 8008954:	0c1b      	lsrs	r3, r3, #16
 8008956:	b2da      	uxtb	r2, r3
 8008958:	68bb      	ldr	r3, [r7, #8]
 800895a:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800895c:	697b      	ldr	r3, [r7, #20]
 800895e:	0a1b      	lsrs	r3, r3, #8
 8008960:	b2db      	uxtb	r3, r3
 8008962:	f003 031f 	and.w	r3, r3, #31
 8008966:	b2da      	uxtb	r2, r3
 8008968:	68bb      	ldr	r3, [r7, #8]
 800896a:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800896c:	697b      	ldr	r3, [r7, #20]
 800896e:	b2db      	uxtb	r3, r3
 8008970:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008974:	b2da      	uxtb	r2, r3
 8008976:	68bb      	ldr	r3, [r7, #8]
 8008978:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800897a:	697b      	ldr	r3, [r7, #20]
 800897c:	0b5b      	lsrs	r3, r3, #13
 800897e:	b2db      	uxtb	r3, r3
 8008980:	f003 0307 	and.w	r3, r3, #7
 8008984:	b2da      	uxtb	r2, r3
 8008986:	68bb      	ldr	r3, [r7, #8]
 8008988:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800898a:	687b      	ldr	r3, [r7, #4]
 800898c:	2b00      	cmp	r3, #0
 800898e:	d11a      	bne.n	80089c6 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8008990:	68bb      	ldr	r3, [r7, #8]
 8008992:	78db      	ldrb	r3, [r3, #3]
 8008994:	4618      	mov	r0, r3
 8008996:	f000 f8bb 	bl	8008b10 <RTC_Bcd2ToByte>
 800899a:	4603      	mov	r3, r0
 800899c:	461a      	mov	r2, r3
 800899e:	68bb      	ldr	r3, [r7, #8]
 80089a0:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80089a2:	68bb      	ldr	r3, [r7, #8]
 80089a4:	785b      	ldrb	r3, [r3, #1]
 80089a6:	4618      	mov	r0, r3
 80089a8:	f000 f8b2 	bl	8008b10 <RTC_Bcd2ToByte>
 80089ac:	4603      	mov	r3, r0
 80089ae:	461a      	mov	r2, r3
 80089b0:	68bb      	ldr	r3, [r7, #8]
 80089b2:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80089b4:	68bb      	ldr	r3, [r7, #8]
 80089b6:	789b      	ldrb	r3, [r3, #2]
 80089b8:	4618      	mov	r0, r3
 80089ba:	f000 f8a9 	bl	8008b10 <RTC_Bcd2ToByte>
 80089be:	4603      	mov	r3, r0
 80089c0:	461a      	mov	r2, r3
 80089c2:	68bb      	ldr	r3, [r7, #8]
 80089c4:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80089c6:	2300      	movs	r3, #0
}
 80089c8:	4618      	mov	r0, r3
 80089ca:	3718      	adds	r7, #24
 80089cc:	46bd      	mov	sp, r7
 80089ce:	bd80      	pop	{r7, pc}

080089d0 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80089d0:	b580      	push	{r7, lr}
 80089d2:	b084      	sub	sp, #16
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80089d8:	2300      	movs	r3, #0
 80089da:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 80089dc:	687b      	ldr	r3, [r7, #4]
 80089de:	681b      	ldr	r3, [r3, #0]
 80089e0:	4a0d      	ldr	r2, [pc, #52]	@ (8008a18 <HAL_RTC_WaitForSynchro+0x48>)
 80089e2:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80089e4:	f7fb f880 	bl	8003ae8 <HAL_GetTick>
 80089e8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80089ea:	e009      	b.n	8008a00 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80089ec:	f7fb f87c 	bl	8003ae8 <HAL_GetTick>
 80089f0:	4602      	mov	r2, r0
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	1ad3      	subs	r3, r2, r3
 80089f6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80089fa:	d901      	bls.n	8008a00 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 80089fc:	2303      	movs	r3, #3
 80089fe:	e007      	b.n	8008a10 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8008a00:	687b      	ldr	r3, [r7, #4]
 8008a02:	681b      	ldr	r3, [r3, #0]
 8008a04:	68db      	ldr	r3, [r3, #12]
 8008a06:	f003 0320 	and.w	r3, r3, #32
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d0ee      	beq.n	80089ec <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8008a0e:	2300      	movs	r3, #0
}
 8008a10:	4618      	mov	r0, r3
 8008a12:	3710      	adds	r7, #16
 8008a14:	46bd      	mov	sp, r7
 8008a16:	bd80      	pop	{r7, pc}
 8008a18:	00017f5f 	.word	0x00017f5f

08008a1c <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8008a1c:	b580      	push	{r7, lr}
 8008a1e:	b084      	sub	sp, #16
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008a24:	2300      	movs	r3, #0
 8008a26:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8008a28:	2300      	movs	r3, #0
 8008a2a:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	681b      	ldr	r3, [r3, #0]
 8008a30:	68db      	ldr	r3, [r3, #12]
 8008a32:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d122      	bne.n	8008a80 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	681b      	ldr	r3, [r3, #0]
 8008a3e:	68da      	ldr	r2, [r3, #12]
 8008a40:	687b      	ldr	r3, [r7, #4]
 8008a42:	681b      	ldr	r3, [r3, #0]
 8008a44:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8008a48:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008a4a:	f7fb f84d 	bl	8003ae8 <HAL_GetTick>
 8008a4e:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8008a50:	e00c      	b.n	8008a6c <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008a52:	f7fb f849 	bl	8003ae8 <HAL_GetTick>
 8008a56:	4602      	mov	r2, r0
 8008a58:	68bb      	ldr	r3, [r7, #8]
 8008a5a:	1ad3      	subs	r3, r2, r3
 8008a5c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008a60:	d904      	bls.n	8008a6c <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	2204      	movs	r2, #4
 8008a66:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8008a68:	2301      	movs	r3, #1
 8008a6a:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	68db      	ldr	r3, [r3, #12]
 8008a72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008a76:	2b00      	cmp	r3, #0
 8008a78:	d102      	bne.n	8008a80 <RTC_EnterInitMode+0x64>
 8008a7a:	7bfb      	ldrb	r3, [r7, #15]
 8008a7c:	2b01      	cmp	r3, #1
 8008a7e:	d1e8      	bne.n	8008a52 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8008a80:	7bfb      	ldrb	r3, [r7, #15]
}
 8008a82:	4618      	mov	r0, r3
 8008a84:	3710      	adds	r7, #16
 8008a86:	46bd      	mov	sp, r7
 8008a88:	bd80      	pop	{r7, pc}

08008a8a <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8008a8a:	b580      	push	{r7, lr}
 8008a8c:	b084      	sub	sp, #16
 8008a8e:	af00      	add	r7, sp, #0
 8008a90:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008a92:	2300      	movs	r3, #0
 8008a94:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8008a96:	687b      	ldr	r3, [r7, #4]
 8008a98:	681b      	ldr	r3, [r3, #0]
 8008a9a:	68da      	ldr	r2, [r3, #12]
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008aa4:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	689b      	ldr	r3, [r3, #8]
 8008aac:	f003 0320 	and.w	r3, r3, #32
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d10a      	bne.n	8008aca <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008ab4:	6878      	ldr	r0, [r7, #4]
 8008ab6:	f7ff ff8b 	bl	80089d0 <HAL_RTC_WaitForSynchro>
 8008aba:	4603      	mov	r3, r0
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d004      	beq.n	8008aca <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	2204      	movs	r2, #4
 8008ac4:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8008ac6:	2301      	movs	r3, #1
 8008ac8:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8008aca:	7bfb      	ldrb	r3, [r7, #15]
}
 8008acc:	4618      	mov	r0, r3
 8008ace:	3710      	adds	r7, #16
 8008ad0:	46bd      	mov	sp, r7
 8008ad2:	bd80      	pop	{r7, pc}

08008ad4 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8008ad4:	b480      	push	{r7}
 8008ad6:	b085      	sub	sp, #20
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	4603      	mov	r3, r0
 8008adc:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8008ade:	2300      	movs	r3, #0
 8008ae0:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8008ae2:	e005      	b.n	8008af0 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8008ae4:	68fb      	ldr	r3, [r7, #12]
 8008ae6:	3301      	adds	r3, #1
 8008ae8:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8008aea:	79fb      	ldrb	r3, [r7, #7]
 8008aec:	3b0a      	subs	r3, #10
 8008aee:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8008af0:	79fb      	ldrb	r3, [r7, #7]
 8008af2:	2b09      	cmp	r3, #9
 8008af4:	d8f6      	bhi.n	8008ae4 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	b2db      	uxtb	r3, r3
 8008afa:	011b      	lsls	r3, r3, #4
 8008afc:	b2da      	uxtb	r2, r3
 8008afe:	79fb      	ldrb	r3, [r7, #7]
 8008b00:	4313      	orrs	r3, r2
 8008b02:	b2db      	uxtb	r3, r3
}
 8008b04:	4618      	mov	r0, r3
 8008b06:	3714      	adds	r7, #20
 8008b08:	46bd      	mov	sp, r7
 8008b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b0e:	4770      	bx	lr

08008b10 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8008b10:	b480      	push	{r7}
 8008b12:	b085      	sub	sp, #20
 8008b14:	af00      	add	r7, sp, #0
 8008b16:	4603      	mov	r3, r0
 8008b18:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 8008b1a:	2300      	movs	r3, #0
 8008b1c:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8008b1e:	79fb      	ldrb	r3, [r7, #7]
 8008b20:	091b      	lsrs	r3, r3, #4
 8008b22:	b2db      	uxtb	r3, r3
 8008b24:	461a      	mov	r2, r3
 8008b26:	4613      	mov	r3, r2
 8008b28:	009b      	lsls	r3, r3, #2
 8008b2a:	4413      	add	r3, r2
 8008b2c:	005b      	lsls	r3, r3, #1
 8008b2e:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	b2da      	uxtb	r2, r3
 8008b34:	79fb      	ldrb	r3, [r7, #7]
 8008b36:	f003 030f 	and.w	r3, r3, #15
 8008b3a:	b2db      	uxtb	r3, r3
 8008b3c:	4413      	add	r3, r2
 8008b3e:	b2db      	uxtb	r3, r3
}
 8008b40:	4618      	mov	r0, r3
 8008b42:	3714      	adds	r7, #20
 8008b44:	46bd      	mov	sp, r7
 8008b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b4a:	4770      	bx	lr

08008b4c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008b4c:	b580      	push	{r7, lr}
 8008b4e:	b082      	sub	sp, #8
 8008b50:	af00      	add	r7, sp, #0
 8008b52:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008b54:	687b      	ldr	r3, [r7, #4]
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	d101      	bne.n	8008b5e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008b5a:	2301      	movs	r3, #1
 8008b5c:	e041      	b.n	8008be2 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008b5e:	687b      	ldr	r3, [r7, #4]
 8008b60:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008b64:	b2db      	uxtb	r3, r3
 8008b66:	2b00      	cmp	r3, #0
 8008b68:	d106      	bne.n	8008b78 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008b6a:	687b      	ldr	r3, [r7, #4]
 8008b6c:	2200      	movs	r2, #0
 8008b6e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008b72:	6878      	ldr	r0, [r7, #4]
 8008b74:	f000 f839 	bl	8008bea <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	2202      	movs	r2, #2
 8008b7c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681a      	ldr	r2, [r3, #0]
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	3304      	adds	r3, #4
 8008b88:	4619      	mov	r1, r3
 8008b8a:	4610      	mov	r0, r2
 8008b8c:	f000 f9c0 	bl	8008f10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	2201      	movs	r2, #1
 8008b94:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008b98:	687b      	ldr	r3, [r7, #4]
 8008b9a:	2201      	movs	r2, #1
 8008b9c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008ba0:	687b      	ldr	r3, [r7, #4]
 8008ba2:	2201      	movs	r2, #1
 8008ba4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	2201      	movs	r2, #1
 8008bac:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	2201      	movs	r2, #1
 8008bb4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	2201      	movs	r2, #1
 8008bbc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	2201      	movs	r2, #1
 8008bc4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	2201      	movs	r2, #1
 8008bcc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008bd0:	687b      	ldr	r3, [r7, #4]
 8008bd2:	2201      	movs	r2, #1
 8008bd4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	2201      	movs	r2, #1
 8008bdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008be0:	2300      	movs	r3, #0
}
 8008be2:	4618      	mov	r0, r3
 8008be4:	3708      	adds	r7, #8
 8008be6:	46bd      	mov	sp, r7
 8008be8:	bd80      	pop	{r7, pc}

08008bea <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8008bea:	b480      	push	{r7}
 8008bec:	b083      	sub	sp, #12
 8008bee:	af00      	add	r7, sp, #0
 8008bf0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8008bf2:	bf00      	nop
 8008bf4:	370c      	adds	r7, #12
 8008bf6:	46bd      	mov	sp, r7
 8008bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bfc:	4770      	bx	lr
	...

08008c00 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008c00:	b480      	push	{r7}
 8008c02:	b085      	sub	sp, #20
 8008c04:	af00      	add	r7, sp, #0
 8008c06:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008c0e:	b2db      	uxtb	r3, r3
 8008c10:	2b01      	cmp	r3, #1
 8008c12:	d001      	beq.n	8008c18 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008c14:	2301      	movs	r3, #1
 8008c16:	e04e      	b.n	8008cb6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	2202      	movs	r2, #2
 8008c1c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	681b      	ldr	r3, [r3, #0]
 8008c24:	68da      	ldr	r2, [r3, #12]
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	681b      	ldr	r3, [r3, #0]
 8008c2a:	f042 0201 	orr.w	r2, r2, #1
 8008c2e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	4a23      	ldr	r2, [pc, #140]	@ (8008cc4 <HAL_TIM_Base_Start_IT+0xc4>)
 8008c36:	4293      	cmp	r3, r2
 8008c38:	d022      	beq.n	8008c80 <HAL_TIM_Base_Start_IT+0x80>
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008c42:	d01d      	beq.n	8008c80 <HAL_TIM_Base_Start_IT+0x80>
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	4a1f      	ldr	r2, [pc, #124]	@ (8008cc8 <HAL_TIM_Base_Start_IT+0xc8>)
 8008c4a:	4293      	cmp	r3, r2
 8008c4c:	d018      	beq.n	8008c80 <HAL_TIM_Base_Start_IT+0x80>
 8008c4e:	687b      	ldr	r3, [r7, #4]
 8008c50:	681b      	ldr	r3, [r3, #0]
 8008c52:	4a1e      	ldr	r2, [pc, #120]	@ (8008ccc <HAL_TIM_Base_Start_IT+0xcc>)
 8008c54:	4293      	cmp	r3, r2
 8008c56:	d013      	beq.n	8008c80 <HAL_TIM_Base_Start_IT+0x80>
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	681b      	ldr	r3, [r3, #0]
 8008c5c:	4a1c      	ldr	r2, [pc, #112]	@ (8008cd0 <HAL_TIM_Base_Start_IT+0xd0>)
 8008c5e:	4293      	cmp	r3, r2
 8008c60:	d00e      	beq.n	8008c80 <HAL_TIM_Base_Start_IT+0x80>
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	4a1b      	ldr	r2, [pc, #108]	@ (8008cd4 <HAL_TIM_Base_Start_IT+0xd4>)
 8008c68:	4293      	cmp	r3, r2
 8008c6a:	d009      	beq.n	8008c80 <HAL_TIM_Base_Start_IT+0x80>
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	4a19      	ldr	r2, [pc, #100]	@ (8008cd8 <HAL_TIM_Base_Start_IT+0xd8>)
 8008c72:	4293      	cmp	r3, r2
 8008c74:	d004      	beq.n	8008c80 <HAL_TIM_Base_Start_IT+0x80>
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	4a18      	ldr	r2, [pc, #96]	@ (8008cdc <HAL_TIM_Base_Start_IT+0xdc>)
 8008c7c:	4293      	cmp	r3, r2
 8008c7e:	d111      	bne.n	8008ca4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008c80:	687b      	ldr	r3, [r7, #4]
 8008c82:	681b      	ldr	r3, [r3, #0]
 8008c84:	689b      	ldr	r3, [r3, #8]
 8008c86:	f003 0307 	and.w	r3, r3, #7
 8008c8a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008c8c:	68fb      	ldr	r3, [r7, #12]
 8008c8e:	2b06      	cmp	r3, #6
 8008c90:	d010      	beq.n	8008cb4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	681a      	ldr	r2, [r3, #0]
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	f042 0201 	orr.w	r2, r2, #1
 8008ca0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008ca2:	e007      	b.n	8008cb4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	681a      	ldr	r2, [r3, #0]
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	f042 0201 	orr.w	r2, r2, #1
 8008cb2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008cb4:	2300      	movs	r3, #0
}
 8008cb6:	4618      	mov	r0, r3
 8008cb8:	3714      	adds	r7, #20
 8008cba:	46bd      	mov	sp, r7
 8008cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc0:	4770      	bx	lr
 8008cc2:	bf00      	nop
 8008cc4:	40010000 	.word	0x40010000
 8008cc8:	40000400 	.word	0x40000400
 8008ccc:	40000800 	.word	0x40000800
 8008cd0:	40000c00 	.word	0x40000c00
 8008cd4:	40010400 	.word	0x40010400
 8008cd8:	40014000 	.word	0x40014000
 8008cdc:	40001800 	.word	0x40001800

08008ce0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008ce0:	b580      	push	{r7, lr}
 8008ce2:	b084      	sub	sp, #16
 8008ce4:	af00      	add	r7, sp, #0
 8008ce6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	68db      	ldr	r3, [r3, #12]
 8008cee:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	681b      	ldr	r3, [r3, #0]
 8008cf4:	691b      	ldr	r3, [r3, #16]
 8008cf6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008cf8:	68bb      	ldr	r3, [r7, #8]
 8008cfa:	f003 0302 	and.w	r3, r3, #2
 8008cfe:	2b00      	cmp	r3, #0
 8008d00:	d020      	beq.n	8008d44 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008d02:	68fb      	ldr	r3, [r7, #12]
 8008d04:	f003 0302 	and.w	r3, r3, #2
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	d01b      	beq.n	8008d44 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	f06f 0202 	mvn.w	r2, #2
 8008d14:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	2201      	movs	r2, #1
 8008d1a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	681b      	ldr	r3, [r3, #0]
 8008d20:	699b      	ldr	r3, [r3, #24]
 8008d22:	f003 0303 	and.w	r3, r3, #3
 8008d26:	2b00      	cmp	r3, #0
 8008d28:	d003      	beq.n	8008d32 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008d2a:	6878      	ldr	r0, [r7, #4]
 8008d2c:	f000 f8d2 	bl	8008ed4 <HAL_TIM_IC_CaptureCallback>
 8008d30:	e005      	b.n	8008d3e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008d32:	6878      	ldr	r0, [r7, #4]
 8008d34:	f000 f8c4 	bl	8008ec0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008d38:	6878      	ldr	r0, [r7, #4]
 8008d3a:	f000 f8d5 	bl	8008ee8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	2200      	movs	r2, #0
 8008d42:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008d44:	68bb      	ldr	r3, [r7, #8]
 8008d46:	f003 0304 	and.w	r3, r3, #4
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d020      	beq.n	8008d90 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008d4e:	68fb      	ldr	r3, [r7, #12]
 8008d50:	f003 0304 	and.w	r3, r3, #4
 8008d54:	2b00      	cmp	r3, #0
 8008d56:	d01b      	beq.n	8008d90 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008d58:	687b      	ldr	r3, [r7, #4]
 8008d5a:	681b      	ldr	r3, [r3, #0]
 8008d5c:	f06f 0204 	mvn.w	r2, #4
 8008d60:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	2202      	movs	r2, #2
 8008d66:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	699b      	ldr	r3, [r3, #24]
 8008d6e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008d72:	2b00      	cmp	r3, #0
 8008d74:	d003      	beq.n	8008d7e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008d76:	6878      	ldr	r0, [r7, #4]
 8008d78:	f000 f8ac 	bl	8008ed4 <HAL_TIM_IC_CaptureCallback>
 8008d7c:	e005      	b.n	8008d8a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008d7e:	6878      	ldr	r0, [r7, #4]
 8008d80:	f000 f89e 	bl	8008ec0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008d84:	6878      	ldr	r0, [r7, #4]
 8008d86:	f000 f8af 	bl	8008ee8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	2200      	movs	r2, #0
 8008d8e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008d90:	68bb      	ldr	r3, [r7, #8]
 8008d92:	f003 0308 	and.w	r3, r3, #8
 8008d96:	2b00      	cmp	r3, #0
 8008d98:	d020      	beq.n	8008ddc <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008d9a:	68fb      	ldr	r3, [r7, #12]
 8008d9c:	f003 0308 	and.w	r3, r3, #8
 8008da0:	2b00      	cmp	r3, #0
 8008da2:	d01b      	beq.n	8008ddc <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	f06f 0208 	mvn.w	r2, #8
 8008dac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	2204      	movs	r2, #4
 8008db2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	69db      	ldr	r3, [r3, #28]
 8008dba:	f003 0303 	and.w	r3, r3, #3
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d003      	beq.n	8008dca <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008dc2:	6878      	ldr	r0, [r7, #4]
 8008dc4:	f000 f886 	bl	8008ed4 <HAL_TIM_IC_CaptureCallback>
 8008dc8:	e005      	b.n	8008dd6 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008dca:	6878      	ldr	r0, [r7, #4]
 8008dcc:	f000 f878 	bl	8008ec0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008dd0:	6878      	ldr	r0, [r7, #4]
 8008dd2:	f000 f889 	bl	8008ee8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	2200      	movs	r2, #0
 8008dda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008ddc:	68bb      	ldr	r3, [r7, #8]
 8008dde:	f003 0310 	and.w	r3, r3, #16
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d020      	beq.n	8008e28 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	f003 0310 	and.w	r3, r3, #16
 8008dec:	2b00      	cmp	r3, #0
 8008dee:	d01b      	beq.n	8008e28 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008df0:	687b      	ldr	r3, [r7, #4]
 8008df2:	681b      	ldr	r3, [r3, #0]
 8008df4:	f06f 0210 	mvn.w	r2, #16
 8008df8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008dfa:	687b      	ldr	r3, [r7, #4]
 8008dfc:	2208      	movs	r2, #8
 8008dfe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	69db      	ldr	r3, [r3, #28]
 8008e06:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d003      	beq.n	8008e16 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008e0e:	6878      	ldr	r0, [r7, #4]
 8008e10:	f000 f860 	bl	8008ed4 <HAL_TIM_IC_CaptureCallback>
 8008e14:	e005      	b.n	8008e22 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008e16:	6878      	ldr	r0, [r7, #4]
 8008e18:	f000 f852 	bl	8008ec0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008e1c:	6878      	ldr	r0, [r7, #4]
 8008e1e:	f000 f863 	bl	8008ee8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e22:	687b      	ldr	r3, [r7, #4]
 8008e24:	2200      	movs	r2, #0
 8008e26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008e28:	68bb      	ldr	r3, [r7, #8]
 8008e2a:	f003 0301 	and.w	r3, r3, #1
 8008e2e:	2b00      	cmp	r3, #0
 8008e30:	d00c      	beq.n	8008e4c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008e32:	68fb      	ldr	r3, [r7, #12]
 8008e34:	f003 0301 	and.w	r3, r3, #1
 8008e38:	2b00      	cmp	r3, #0
 8008e3a:	d007      	beq.n	8008e4c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	681b      	ldr	r3, [r3, #0]
 8008e40:	f06f 0201 	mvn.w	r2, #1
 8008e44:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008e46:	6878      	ldr	r0, [r7, #4]
 8008e48:	f7fa fb24 	bl	8003494 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8008e4c:	68bb      	ldr	r3, [r7, #8]
 8008e4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d00c      	beq.n	8008e70 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008e56:	68fb      	ldr	r3, [r7, #12]
 8008e58:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008e5c:	2b00      	cmp	r3, #0
 8008e5e:	d007      	beq.n	8008e70 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8008e68:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008e6a:	6878      	ldr	r0, [r7, #4]
 8008e6c:	f000 f906 	bl	800907c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008e70:	68bb      	ldr	r3, [r7, #8]
 8008e72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008e76:	2b00      	cmp	r3, #0
 8008e78:	d00c      	beq.n	8008e94 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008e7a:	68fb      	ldr	r3, [r7, #12]
 8008e7c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008e80:	2b00      	cmp	r3, #0
 8008e82:	d007      	beq.n	8008e94 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008e84:	687b      	ldr	r3, [r7, #4]
 8008e86:	681b      	ldr	r3, [r3, #0]
 8008e88:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008e8c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008e8e:	6878      	ldr	r0, [r7, #4]
 8008e90:	f000 f834 	bl	8008efc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008e94:	68bb      	ldr	r3, [r7, #8]
 8008e96:	f003 0320 	and.w	r3, r3, #32
 8008e9a:	2b00      	cmp	r3, #0
 8008e9c:	d00c      	beq.n	8008eb8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	f003 0320 	and.w	r3, r3, #32
 8008ea4:	2b00      	cmp	r3, #0
 8008ea6:	d007      	beq.n	8008eb8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	f06f 0220 	mvn.w	r2, #32
 8008eb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008eb2:	6878      	ldr	r0, [r7, #4]
 8008eb4:	f000 f8d8 	bl	8009068 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008eb8:	bf00      	nop
 8008eba:	3710      	adds	r7, #16
 8008ebc:	46bd      	mov	sp, r7
 8008ebe:	bd80      	pop	{r7, pc}

08008ec0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8008ec0:	b480      	push	{r7}
 8008ec2:	b083      	sub	sp, #12
 8008ec4:	af00      	add	r7, sp, #0
 8008ec6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008ec8:	bf00      	nop
 8008eca:	370c      	adds	r7, #12
 8008ecc:	46bd      	mov	sp, r7
 8008ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed2:	4770      	bx	lr

08008ed4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008ed4:	b480      	push	{r7}
 8008ed6:	b083      	sub	sp, #12
 8008ed8:	af00      	add	r7, sp, #0
 8008eda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008edc:	bf00      	nop
 8008ede:	370c      	adds	r7, #12
 8008ee0:	46bd      	mov	sp, r7
 8008ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee6:	4770      	bx	lr

08008ee8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008ee8:	b480      	push	{r7}
 8008eea:	b083      	sub	sp, #12
 8008eec:	af00      	add	r7, sp, #0
 8008eee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008ef0:	bf00      	nop
 8008ef2:	370c      	adds	r7, #12
 8008ef4:	46bd      	mov	sp, r7
 8008ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008efa:	4770      	bx	lr

08008efc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008efc:	b480      	push	{r7}
 8008efe:	b083      	sub	sp, #12
 8008f00:	af00      	add	r7, sp, #0
 8008f02:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008f04:	bf00      	nop
 8008f06:	370c      	adds	r7, #12
 8008f08:	46bd      	mov	sp, r7
 8008f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f0e:	4770      	bx	lr

08008f10 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8008f10:	b480      	push	{r7}
 8008f12:	b085      	sub	sp, #20
 8008f14:	af00      	add	r7, sp, #0
 8008f16:	6078      	str	r0, [r7, #4]
 8008f18:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	681b      	ldr	r3, [r3, #0]
 8008f1e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	4a46      	ldr	r2, [pc, #280]	@ (800903c <TIM_Base_SetConfig+0x12c>)
 8008f24:	4293      	cmp	r3, r2
 8008f26:	d013      	beq.n	8008f50 <TIM_Base_SetConfig+0x40>
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008f2e:	d00f      	beq.n	8008f50 <TIM_Base_SetConfig+0x40>
 8008f30:	687b      	ldr	r3, [r7, #4]
 8008f32:	4a43      	ldr	r2, [pc, #268]	@ (8009040 <TIM_Base_SetConfig+0x130>)
 8008f34:	4293      	cmp	r3, r2
 8008f36:	d00b      	beq.n	8008f50 <TIM_Base_SetConfig+0x40>
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	4a42      	ldr	r2, [pc, #264]	@ (8009044 <TIM_Base_SetConfig+0x134>)
 8008f3c:	4293      	cmp	r3, r2
 8008f3e:	d007      	beq.n	8008f50 <TIM_Base_SetConfig+0x40>
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	4a41      	ldr	r2, [pc, #260]	@ (8009048 <TIM_Base_SetConfig+0x138>)
 8008f44:	4293      	cmp	r3, r2
 8008f46:	d003      	beq.n	8008f50 <TIM_Base_SetConfig+0x40>
 8008f48:	687b      	ldr	r3, [r7, #4]
 8008f4a:	4a40      	ldr	r2, [pc, #256]	@ (800904c <TIM_Base_SetConfig+0x13c>)
 8008f4c:	4293      	cmp	r3, r2
 8008f4e:	d108      	bne.n	8008f62 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008f50:	68fb      	ldr	r3, [r7, #12]
 8008f52:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8008f56:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008f58:	683b      	ldr	r3, [r7, #0]
 8008f5a:	685b      	ldr	r3, [r3, #4]
 8008f5c:	68fa      	ldr	r2, [r7, #12]
 8008f5e:	4313      	orrs	r3, r2
 8008f60:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008f62:	687b      	ldr	r3, [r7, #4]
 8008f64:	4a35      	ldr	r2, [pc, #212]	@ (800903c <TIM_Base_SetConfig+0x12c>)
 8008f66:	4293      	cmp	r3, r2
 8008f68:	d02b      	beq.n	8008fc2 <TIM_Base_SetConfig+0xb2>
 8008f6a:	687b      	ldr	r3, [r7, #4]
 8008f6c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008f70:	d027      	beq.n	8008fc2 <TIM_Base_SetConfig+0xb2>
 8008f72:	687b      	ldr	r3, [r7, #4]
 8008f74:	4a32      	ldr	r2, [pc, #200]	@ (8009040 <TIM_Base_SetConfig+0x130>)
 8008f76:	4293      	cmp	r3, r2
 8008f78:	d023      	beq.n	8008fc2 <TIM_Base_SetConfig+0xb2>
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	4a31      	ldr	r2, [pc, #196]	@ (8009044 <TIM_Base_SetConfig+0x134>)
 8008f7e:	4293      	cmp	r3, r2
 8008f80:	d01f      	beq.n	8008fc2 <TIM_Base_SetConfig+0xb2>
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	4a30      	ldr	r2, [pc, #192]	@ (8009048 <TIM_Base_SetConfig+0x138>)
 8008f86:	4293      	cmp	r3, r2
 8008f88:	d01b      	beq.n	8008fc2 <TIM_Base_SetConfig+0xb2>
 8008f8a:	687b      	ldr	r3, [r7, #4]
 8008f8c:	4a2f      	ldr	r2, [pc, #188]	@ (800904c <TIM_Base_SetConfig+0x13c>)
 8008f8e:	4293      	cmp	r3, r2
 8008f90:	d017      	beq.n	8008fc2 <TIM_Base_SetConfig+0xb2>
 8008f92:	687b      	ldr	r3, [r7, #4]
 8008f94:	4a2e      	ldr	r2, [pc, #184]	@ (8009050 <TIM_Base_SetConfig+0x140>)
 8008f96:	4293      	cmp	r3, r2
 8008f98:	d013      	beq.n	8008fc2 <TIM_Base_SetConfig+0xb2>
 8008f9a:	687b      	ldr	r3, [r7, #4]
 8008f9c:	4a2d      	ldr	r2, [pc, #180]	@ (8009054 <TIM_Base_SetConfig+0x144>)
 8008f9e:	4293      	cmp	r3, r2
 8008fa0:	d00f      	beq.n	8008fc2 <TIM_Base_SetConfig+0xb2>
 8008fa2:	687b      	ldr	r3, [r7, #4]
 8008fa4:	4a2c      	ldr	r2, [pc, #176]	@ (8009058 <TIM_Base_SetConfig+0x148>)
 8008fa6:	4293      	cmp	r3, r2
 8008fa8:	d00b      	beq.n	8008fc2 <TIM_Base_SetConfig+0xb2>
 8008faa:	687b      	ldr	r3, [r7, #4]
 8008fac:	4a2b      	ldr	r2, [pc, #172]	@ (800905c <TIM_Base_SetConfig+0x14c>)
 8008fae:	4293      	cmp	r3, r2
 8008fb0:	d007      	beq.n	8008fc2 <TIM_Base_SetConfig+0xb2>
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	4a2a      	ldr	r2, [pc, #168]	@ (8009060 <TIM_Base_SetConfig+0x150>)
 8008fb6:	4293      	cmp	r3, r2
 8008fb8:	d003      	beq.n	8008fc2 <TIM_Base_SetConfig+0xb2>
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	4a29      	ldr	r2, [pc, #164]	@ (8009064 <TIM_Base_SetConfig+0x154>)
 8008fbe:	4293      	cmp	r3, r2
 8008fc0:	d108      	bne.n	8008fd4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008fc2:	68fb      	ldr	r3, [r7, #12]
 8008fc4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008fc8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8008fca:	683b      	ldr	r3, [r7, #0]
 8008fcc:	68db      	ldr	r3, [r3, #12]
 8008fce:	68fa      	ldr	r2, [r7, #12]
 8008fd0:	4313      	orrs	r3, r2
 8008fd2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008fd4:	68fb      	ldr	r3, [r7, #12]
 8008fd6:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8008fda:	683b      	ldr	r3, [r7, #0]
 8008fdc:	695b      	ldr	r3, [r3, #20]
 8008fde:	4313      	orrs	r3, r2
 8008fe0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008fe2:	687b      	ldr	r3, [r7, #4]
 8008fe4:	68fa      	ldr	r2, [r7, #12]
 8008fe6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008fe8:	683b      	ldr	r3, [r7, #0]
 8008fea:	689a      	ldr	r2, [r3, #8]
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008ff0:	683b      	ldr	r3, [r7, #0]
 8008ff2:	681a      	ldr	r2, [r3, #0]
 8008ff4:	687b      	ldr	r3, [r7, #4]
 8008ff6:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008ff8:	687b      	ldr	r3, [r7, #4]
 8008ffa:	4a10      	ldr	r2, [pc, #64]	@ (800903c <TIM_Base_SetConfig+0x12c>)
 8008ffc:	4293      	cmp	r3, r2
 8008ffe:	d003      	beq.n	8009008 <TIM_Base_SetConfig+0xf8>
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	4a12      	ldr	r2, [pc, #72]	@ (800904c <TIM_Base_SetConfig+0x13c>)
 8009004:	4293      	cmp	r3, r2
 8009006:	d103      	bne.n	8009010 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009008:	683b      	ldr	r3, [r7, #0]
 800900a:	691a      	ldr	r2, [r3, #16]
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	2201      	movs	r2, #1
 8009014:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	691b      	ldr	r3, [r3, #16]
 800901a:	f003 0301 	and.w	r3, r3, #1
 800901e:	2b01      	cmp	r3, #1
 8009020:	d105      	bne.n	800902e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	691b      	ldr	r3, [r3, #16]
 8009026:	f023 0201 	bic.w	r2, r3, #1
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	611a      	str	r2, [r3, #16]
  }
}
 800902e:	bf00      	nop
 8009030:	3714      	adds	r7, #20
 8009032:	46bd      	mov	sp, r7
 8009034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009038:	4770      	bx	lr
 800903a:	bf00      	nop
 800903c:	40010000 	.word	0x40010000
 8009040:	40000400 	.word	0x40000400
 8009044:	40000800 	.word	0x40000800
 8009048:	40000c00 	.word	0x40000c00
 800904c:	40010400 	.word	0x40010400
 8009050:	40014000 	.word	0x40014000
 8009054:	40014400 	.word	0x40014400
 8009058:	40014800 	.word	0x40014800
 800905c:	40001800 	.word	0x40001800
 8009060:	40001c00 	.word	0x40001c00
 8009064:	40002000 	.word	0x40002000

08009068 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009068:	b480      	push	{r7}
 800906a:	b083      	sub	sp, #12
 800906c:	af00      	add	r7, sp, #0
 800906e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009070:	bf00      	nop
 8009072:	370c      	adds	r7, #12
 8009074:	46bd      	mov	sp, r7
 8009076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800907a:	4770      	bx	lr

0800907c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800907c:	b480      	push	{r7}
 800907e:	b083      	sub	sp, #12
 8009080:	af00      	add	r7, sp, #0
 8009082:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009084:	bf00      	nop
 8009086:	370c      	adds	r7, #12
 8009088:	46bd      	mov	sp, r7
 800908a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800908e:	4770      	bx	lr

08009090 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009090:	b580      	push	{r7, lr}
 8009092:	b082      	sub	sp, #8
 8009094:	af00      	add	r7, sp, #0
 8009096:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009098:	687b      	ldr	r3, [r7, #4]
 800909a:	2b00      	cmp	r3, #0
 800909c:	d101      	bne.n	80090a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800909e:	2301      	movs	r3, #1
 80090a0:	e042      	b.n	8009128 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80090a8:	b2db      	uxtb	r3, r3
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d106      	bne.n	80090bc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	2200      	movs	r2, #0
 80090b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80090b6:	6878      	ldr	r0, [r7, #4]
 80090b8:	f7fa fc6e 	bl	8003998 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	2224      	movs	r2, #36	@ 0x24
 80090c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	68da      	ldr	r2, [r3, #12]
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	681b      	ldr	r3, [r3, #0]
 80090ce:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80090d2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80090d4:	6878      	ldr	r0, [r7, #4]
 80090d6:	f000 f973 	bl	80093c0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	681b      	ldr	r3, [r3, #0]
 80090de:	691a      	ldr	r2, [r3, #16]
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80090e8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	695a      	ldr	r2, [r3, #20]
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	681b      	ldr	r3, [r3, #0]
 80090f4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80090f8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	68da      	ldr	r2, [r3, #12]
 8009100:	687b      	ldr	r3, [r7, #4]
 8009102:	681b      	ldr	r3, [r3, #0]
 8009104:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8009108:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800910a:	687b      	ldr	r3, [r7, #4]
 800910c:	2200      	movs	r2, #0
 800910e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8009110:	687b      	ldr	r3, [r7, #4]
 8009112:	2220      	movs	r2, #32
 8009114:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	2220      	movs	r2, #32
 800911c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	2200      	movs	r2, #0
 8009124:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8009126:	2300      	movs	r3, #0
}
 8009128:	4618      	mov	r0, r3
 800912a:	3708      	adds	r7, #8
 800912c:	46bd      	mov	sp, r7
 800912e:	bd80      	pop	{r7, pc}

08009130 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009130:	b580      	push	{r7, lr}
 8009132:	b08a      	sub	sp, #40	@ 0x28
 8009134:	af02      	add	r7, sp, #8
 8009136:	60f8      	str	r0, [r7, #12]
 8009138:	60b9      	str	r1, [r7, #8]
 800913a:	603b      	str	r3, [r7, #0]
 800913c:	4613      	mov	r3, r2
 800913e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8009140:	2300      	movs	r3, #0
 8009142:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009144:	68fb      	ldr	r3, [r7, #12]
 8009146:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800914a:	b2db      	uxtb	r3, r3
 800914c:	2b20      	cmp	r3, #32
 800914e:	d175      	bne.n	800923c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8009150:	68bb      	ldr	r3, [r7, #8]
 8009152:	2b00      	cmp	r3, #0
 8009154:	d002      	beq.n	800915c <HAL_UART_Transmit+0x2c>
 8009156:	88fb      	ldrh	r3, [r7, #6]
 8009158:	2b00      	cmp	r3, #0
 800915a:	d101      	bne.n	8009160 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800915c:	2301      	movs	r3, #1
 800915e:	e06e      	b.n	800923e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009160:	68fb      	ldr	r3, [r7, #12]
 8009162:	2200      	movs	r2, #0
 8009164:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	2221      	movs	r2, #33	@ 0x21
 800916a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800916e:	f7fa fcbb 	bl	8003ae8 <HAL_GetTick>
 8009172:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009174:	68fb      	ldr	r3, [r7, #12]
 8009176:	88fa      	ldrh	r2, [r7, #6]
 8009178:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800917a:	68fb      	ldr	r3, [r7, #12]
 800917c:	88fa      	ldrh	r2, [r7, #6]
 800917e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009180:	68fb      	ldr	r3, [r7, #12]
 8009182:	689b      	ldr	r3, [r3, #8]
 8009184:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8009188:	d108      	bne.n	800919c <HAL_UART_Transmit+0x6c>
 800918a:	68fb      	ldr	r3, [r7, #12]
 800918c:	691b      	ldr	r3, [r3, #16]
 800918e:	2b00      	cmp	r3, #0
 8009190:	d104      	bne.n	800919c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8009192:	2300      	movs	r3, #0
 8009194:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009196:	68bb      	ldr	r3, [r7, #8]
 8009198:	61bb      	str	r3, [r7, #24]
 800919a:	e003      	b.n	80091a4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800919c:	68bb      	ldr	r3, [r7, #8]
 800919e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80091a0:	2300      	movs	r3, #0
 80091a2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80091a4:	e02e      	b.n	8009204 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80091a6:	683b      	ldr	r3, [r7, #0]
 80091a8:	9300      	str	r3, [sp, #0]
 80091aa:	697b      	ldr	r3, [r7, #20]
 80091ac:	2200      	movs	r2, #0
 80091ae:	2180      	movs	r1, #128	@ 0x80
 80091b0:	68f8      	ldr	r0, [r7, #12]
 80091b2:	f000 f848 	bl	8009246 <UART_WaitOnFlagUntilTimeout>
 80091b6:	4603      	mov	r3, r0
 80091b8:	2b00      	cmp	r3, #0
 80091ba:	d005      	beq.n	80091c8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80091bc:	68fb      	ldr	r3, [r7, #12]
 80091be:	2220      	movs	r2, #32
 80091c0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80091c4:	2303      	movs	r3, #3
 80091c6:	e03a      	b.n	800923e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80091c8:	69fb      	ldr	r3, [r7, #28]
 80091ca:	2b00      	cmp	r3, #0
 80091cc:	d10b      	bne.n	80091e6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80091ce:	69bb      	ldr	r3, [r7, #24]
 80091d0:	881b      	ldrh	r3, [r3, #0]
 80091d2:	461a      	mov	r2, r3
 80091d4:	68fb      	ldr	r3, [r7, #12]
 80091d6:	681b      	ldr	r3, [r3, #0]
 80091d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80091dc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80091de:	69bb      	ldr	r3, [r7, #24]
 80091e0:	3302      	adds	r3, #2
 80091e2:	61bb      	str	r3, [r7, #24]
 80091e4:	e007      	b.n	80091f6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80091e6:	69fb      	ldr	r3, [r7, #28]
 80091e8:	781a      	ldrb	r2, [r3, #0]
 80091ea:	68fb      	ldr	r3, [r7, #12]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80091f0:	69fb      	ldr	r3, [r7, #28]
 80091f2:	3301      	adds	r3, #1
 80091f4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80091f6:	68fb      	ldr	r3, [r7, #12]
 80091f8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80091fa:	b29b      	uxth	r3, r3
 80091fc:	3b01      	subs	r3, #1
 80091fe:	b29a      	uxth	r2, r3
 8009200:	68fb      	ldr	r3, [r7, #12]
 8009202:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8009204:	68fb      	ldr	r3, [r7, #12]
 8009206:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8009208:	b29b      	uxth	r3, r3
 800920a:	2b00      	cmp	r3, #0
 800920c:	d1cb      	bne.n	80091a6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800920e:	683b      	ldr	r3, [r7, #0]
 8009210:	9300      	str	r3, [sp, #0]
 8009212:	697b      	ldr	r3, [r7, #20]
 8009214:	2200      	movs	r2, #0
 8009216:	2140      	movs	r1, #64	@ 0x40
 8009218:	68f8      	ldr	r0, [r7, #12]
 800921a:	f000 f814 	bl	8009246 <UART_WaitOnFlagUntilTimeout>
 800921e:	4603      	mov	r3, r0
 8009220:	2b00      	cmp	r3, #0
 8009222:	d005      	beq.n	8009230 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8009224:	68fb      	ldr	r3, [r7, #12]
 8009226:	2220      	movs	r2, #32
 8009228:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800922c:	2303      	movs	r3, #3
 800922e:	e006      	b.n	800923e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009230:	68fb      	ldr	r3, [r7, #12]
 8009232:	2220      	movs	r2, #32
 8009234:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8009238:	2300      	movs	r3, #0
 800923a:	e000      	b.n	800923e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 800923c:	2302      	movs	r3, #2
  }
}
 800923e:	4618      	mov	r0, r3
 8009240:	3720      	adds	r7, #32
 8009242:	46bd      	mov	sp, r7
 8009244:	bd80      	pop	{r7, pc}

08009246 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8009246:	b580      	push	{r7, lr}
 8009248:	b086      	sub	sp, #24
 800924a:	af00      	add	r7, sp, #0
 800924c:	60f8      	str	r0, [r7, #12]
 800924e:	60b9      	str	r1, [r7, #8]
 8009250:	603b      	str	r3, [r7, #0]
 8009252:	4613      	mov	r3, r2
 8009254:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009256:	e03b      	b.n	80092d0 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009258:	6a3b      	ldr	r3, [r7, #32]
 800925a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800925e:	d037      	beq.n	80092d0 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8009260:	f7fa fc42 	bl	8003ae8 <HAL_GetTick>
 8009264:	4602      	mov	r2, r0
 8009266:	683b      	ldr	r3, [r7, #0]
 8009268:	1ad3      	subs	r3, r2, r3
 800926a:	6a3a      	ldr	r2, [r7, #32]
 800926c:	429a      	cmp	r2, r3
 800926e:	d302      	bcc.n	8009276 <UART_WaitOnFlagUntilTimeout+0x30>
 8009270:	6a3b      	ldr	r3, [r7, #32]
 8009272:	2b00      	cmp	r3, #0
 8009274:	d101      	bne.n	800927a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8009276:	2303      	movs	r3, #3
 8009278:	e03a      	b.n	80092f0 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800927a:	68fb      	ldr	r3, [r7, #12]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	68db      	ldr	r3, [r3, #12]
 8009280:	f003 0304 	and.w	r3, r3, #4
 8009284:	2b00      	cmp	r3, #0
 8009286:	d023      	beq.n	80092d0 <UART_WaitOnFlagUntilTimeout+0x8a>
 8009288:	68bb      	ldr	r3, [r7, #8]
 800928a:	2b80      	cmp	r3, #128	@ 0x80
 800928c:	d020      	beq.n	80092d0 <UART_WaitOnFlagUntilTimeout+0x8a>
 800928e:	68bb      	ldr	r3, [r7, #8]
 8009290:	2b40      	cmp	r3, #64	@ 0x40
 8009292:	d01d      	beq.n	80092d0 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	681b      	ldr	r3, [r3, #0]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	f003 0308 	and.w	r3, r3, #8
 800929e:	2b08      	cmp	r3, #8
 80092a0:	d116      	bne.n	80092d0 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80092a2:	2300      	movs	r3, #0
 80092a4:	617b      	str	r3, [r7, #20]
 80092a6:	68fb      	ldr	r3, [r7, #12]
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	617b      	str	r3, [r7, #20]
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	685b      	ldr	r3, [r3, #4]
 80092b4:	617b      	str	r3, [r7, #20]
 80092b6:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80092b8:	68f8      	ldr	r0, [r7, #12]
 80092ba:	f000 f81d 	bl	80092f8 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	2208      	movs	r2, #8
 80092c2:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	2200      	movs	r2, #0
 80092c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80092cc:	2301      	movs	r3, #1
 80092ce:	e00f      	b.n	80092f0 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	681a      	ldr	r2, [r3, #0]
 80092d6:	68bb      	ldr	r3, [r7, #8]
 80092d8:	4013      	ands	r3, r2
 80092da:	68ba      	ldr	r2, [r7, #8]
 80092dc:	429a      	cmp	r2, r3
 80092de:	bf0c      	ite	eq
 80092e0:	2301      	moveq	r3, #1
 80092e2:	2300      	movne	r3, #0
 80092e4:	b2db      	uxtb	r3, r3
 80092e6:	461a      	mov	r2, r3
 80092e8:	79fb      	ldrb	r3, [r7, #7]
 80092ea:	429a      	cmp	r2, r3
 80092ec:	d0b4      	beq.n	8009258 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80092ee:	2300      	movs	r3, #0
}
 80092f0:	4618      	mov	r0, r3
 80092f2:	3718      	adds	r7, #24
 80092f4:	46bd      	mov	sp, r7
 80092f6:	bd80      	pop	{r7, pc}

080092f8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80092f8:	b480      	push	{r7}
 80092fa:	b095      	sub	sp, #84	@ 0x54
 80092fc:	af00      	add	r7, sp, #0
 80092fe:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009300:	687b      	ldr	r3, [r7, #4]
 8009302:	681b      	ldr	r3, [r3, #0]
 8009304:	330c      	adds	r3, #12
 8009306:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009308:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800930a:	e853 3f00 	ldrex	r3, [r3]
 800930e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009310:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009312:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8009316:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009318:	687b      	ldr	r3, [r7, #4]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	330c      	adds	r3, #12
 800931e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009320:	643a      	str	r2, [r7, #64]	@ 0x40
 8009322:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009324:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8009326:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009328:	e841 2300 	strex	r3, r2, [r1]
 800932c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800932e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009330:	2b00      	cmp	r3, #0
 8009332:	d1e5      	bne.n	8009300 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	3314      	adds	r3, #20
 800933a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800933c:	6a3b      	ldr	r3, [r7, #32]
 800933e:	e853 3f00 	ldrex	r3, [r3]
 8009342:	61fb      	str	r3, [r7, #28]
   return(result);
 8009344:	69fb      	ldr	r3, [r7, #28]
 8009346:	f023 0301 	bic.w	r3, r3, #1
 800934a:	64bb      	str	r3, [r7, #72]	@ 0x48
 800934c:	687b      	ldr	r3, [r7, #4]
 800934e:	681b      	ldr	r3, [r3, #0]
 8009350:	3314      	adds	r3, #20
 8009352:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009354:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8009356:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009358:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800935a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800935c:	e841 2300 	strex	r3, r2, [r1]
 8009360:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009362:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009364:	2b00      	cmp	r3, #0
 8009366:	d1e5      	bne.n	8009334 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009368:	687b      	ldr	r3, [r7, #4]
 800936a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800936c:	2b01      	cmp	r3, #1
 800936e:	d119      	bne.n	80093a4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	681b      	ldr	r3, [r3, #0]
 8009374:	330c      	adds	r3, #12
 8009376:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	e853 3f00 	ldrex	r3, [r3]
 800937e:	60bb      	str	r3, [r7, #8]
   return(result);
 8009380:	68bb      	ldr	r3, [r7, #8]
 8009382:	f023 0310 	bic.w	r3, r3, #16
 8009386:	647b      	str	r3, [r7, #68]	@ 0x44
 8009388:	687b      	ldr	r3, [r7, #4]
 800938a:	681b      	ldr	r3, [r3, #0]
 800938c:	330c      	adds	r3, #12
 800938e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009390:	61ba      	str	r2, [r7, #24]
 8009392:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009394:	6979      	ldr	r1, [r7, #20]
 8009396:	69ba      	ldr	r2, [r7, #24]
 8009398:	e841 2300 	strex	r3, r2, [r1]
 800939c:	613b      	str	r3, [r7, #16]
   return(result);
 800939e:	693b      	ldr	r3, [r7, #16]
 80093a0:	2b00      	cmp	r3, #0
 80093a2:	d1e5      	bne.n	8009370 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80093a4:	687b      	ldr	r3, [r7, #4]
 80093a6:	2220      	movs	r2, #32
 80093a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	2200      	movs	r2, #0
 80093b0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80093b2:	bf00      	nop
 80093b4:	3754      	adds	r7, #84	@ 0x54
 80093b6:	46bd      	mov	sp, r7
 80093b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093bc:	4770      	bx	lr
	...

080093c0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80093c0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80093c4:	b0c0      	sub	sp, #256	@ 0x100
 80093c6:	af00      	add	r7, sp, #0
 80093c8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80093cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80093d0:	681b      	ldr	r3, [r3, #0]
 80093d2:	691b      	ldr	r3, [r3, #16]
 80093d4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80093d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80093dc:	68d9      	ldr	r1, [r3, #12]
 80093de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80093e2:	681a      	ldr	r2, [r3, #0]
 80093e4:	ea40 0301 	orr.w	r3, r0, r1
 80093e8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80093ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80093ee:	689a      	ldr	r2, [r3, #8]
 80093f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80093f4:	691b      	ldr	r3, [r3, #16]
 80093f6:	431a      	orrs	r2, r3
 80093f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80093fc:	695b      	ldr	r3, [r3, #20]
 80093fe:	431a      	orrs	r2, r3
 8009400:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009404:	69db      	ldr	r3, [r3, #28]
 8009406:	4313      	orrs	r3, r2
 8009408:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800940c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009410:	681b      	ldr	r3, [r3, #0]
 8009412:	68db      	ldr	r3, [r3, #12]
 8009414:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8009418:	f021 010c 	bic.w	r1, r1, #12
 800941c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009420:	681a      	ldr	r2, [r3, #0]
 8009422:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8009426:	430b      	orrs	r3, r1
 8009428:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800942a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800942e:	681b      	ldr	r3, [r3, #0]
 8009430:	695b      	ldr	r3, [r3, #20]
 8009432:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8009436:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800943a:	6999      	ldr	r1, [r3, #24]
 800943c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009440:	681a      	ldr	r2, [r3, #0]
 8009442:	ea40 0301 	orr.w	r3, r0, r1
 8009446:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009448:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800944c:	681a      	ldr	r2, [r3, #0]
 800944e:	4b8f      	ldr	r3, [pc, #572]	@ (800968c <UART_SetConfig+0x2cc>)
 8009450:	429a      	cmp	r2, r3
 8009452:	d005      	beq.n	8009460 <UART_SetConfig+0xa0>
 8009454:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009458:	681a      	ldr	r2, [r3, #0]
 800945a:	4b8d      	ldr	r3, [pc, #564]	@ (8009690 <UART_SetConfig+0x2d0>)
 800945c:	429a      	cmp	r2, r3
 800945e:	d104      	bne.n	800946a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009460:	f7fe ff40 	bl	80082e4 <HAL_RCC_GetPCLK2Freq>
 8009464:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8009468:	e003      	b.n	8009472 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800946a:	f7fe ff27 	bl	80082bc <HAL_RCC_GetPCLK1Freq>
 800946e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009472:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009476:	69db      	ldr	r3, [r3, #28]
 8009478:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800947c:	f040 810c 	bne.w	8009698 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009480:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009484:	2200      	movs	r2, #0
 8009486:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800948a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800948e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8009492:	4622      	mov	r2, r4
 8009494:	462b      	mov	r3, r5
 8009496:	1891      	adds	r1, r2, r2
 8009498:	65b9      	str	r1, [r7, #88]	@ 0x58
 800949a:	415b      	adcs	r3, r3
 800949c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800949e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80094a2:	4621      	mov	r1, r4
 80094a4:	eb12 0801 	adds.w	r8, r2, r1
 80094a8:	4629      	mov	r1, r5
 80094aa:	eb43 0901 	adc.w	r9, r3, r1
 80094ae:	f04f 0200 	mov.w	r2, #0
 80094b2:	f04f 0300 	mov.w	r3, #0
 80094b6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80094ba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80094be:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80094c2:	4690      	mov	r8, r2
 80094c4:	4699      	mov	r9, r3
 80094c6:	4623      	mov	r3, r4
 80094c8:	eb18 0303 	adds.w	r3, r8, r3
 80094cc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80094d0:	462b      	mov	r3, r5
 80094d2:	eb49 0303 	adc.w	r3, r9, r3
 80094d6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80094da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80094de:	685b      	ldr	r3, [r3, #4]
 80094e0:	2200      	movs	r2, #0
 80094e2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80094e6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80094ea:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80094ee:	460b      	mov	r3, r1
 80094f0:	18db      	adds	r3, r3, r3
 80094f2:	653b      	str	r3, [r7, #80]	@ 0x50
 80094f4:	4613      	mov	r3, r2
 80094f6:	eb42 0303 	adc.w	r3, r2, r3
 80094fa:	657b      	str	r3, [r7, #84]	@ 0x54
 80094fc:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8009500:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8009504:	f7f7 fba0 	bl	8000c48 <__aeabi_uldivmod>
 8009508:	4602      	mov	r2, r0
 800950a:	460b      	mov	r3, r1
 800950c:	4b61      	ldr	r3, [pc, #388]	@ (8009694 <UART_SetConfig+0x2d4>)
 800950e:	fba3 2302 	umull	r2, r3, r3, r2
 8009512:	095b      	lsrs	r3, r3, #5
 8009514:	011c      	lsls	r4, r3, #4
 8009516:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800951a:	2200      	movs	r2, #0
 800951c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009520:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8009524:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8009528:	4642      	mov	r2, r8
 800952a:	464b      	mov	r3, r9
 800952c:	1891      	adds	r1, r2, r2
 800952e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8009530:	415b      	adcs	r3, r3
 8009532:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009534:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8009538:	4641      	mov	r1, r8
 800953a:	eb12 0a01 	adds.w	sl, r2, r1
 800953e:	4649      	mov	r1, r9
 8009540:	eb43 0b01 	adc.w	fp, r3, r1
 8009544:	f04f 0200 	mov.w	r2, #0
 8009548:	f04f 0300 	mov.w	r3, #0
 800954c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009550:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009554:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009558:	4692      	mov	sl, r2
 800955a:	469b      	mov	fp, r3
 800955c:	4643      	mov	r3, r8
 800955e:	eb1a 0303 	adds.w	r3, sl, r3
 8009562:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8009566:	464b      	mov	r3, r9
 8009568:	eb4b 0303 	adc.w	r3, fp, r3
 800956c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8009570:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009574:	685b      	ldr	r3, [r3, #4]
 8009576:	2200      	movs	r2, #0
 8009578:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800957c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8009580:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8009584:	460b      	mov	r3, r1
 8009586:	18db      	adds	r3, r3, r3
 8009588:	643b      	str	r3, [r7, #64]	@ 0x40
 800958a:	4613      	mov	r3, r2
 800958c:	eb42 0303 	adc.w	r3, r2, r3
 8009590:	647b      	str	r3, [r7, #68]	@ 0x44
 8009592:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8009596:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800959a:	f7f7 fb55 	bl	8000c48 <__aeabi_uldivmod>
 800959e:	4602      	mov	r2, r0
 80095a0:	460b      	mov	r3, r1
 80095a2:	4611      	mov	r1, r2
 80095a4:	4b3b      	ldr	r3, [pc, #236]	@ (8009694 <UART_SetConfig+0x2d4>)
 80095a6:	fba3 2301 	umull	r2, r3, r3, r1
 80095aa:	095b      	lsrs	r3, r3, #5
 80095ac:	2264      	movs	r2, #100	@ 0x64
 80095ae:	fb02 f303 	mul.w	r3, r2, r3
 80095b2:	1acb      	subs	r3, r1, r3
 80095b4:	00db      	lsls	r3, r3, #3
 80095b6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80095ba:	4b36      	ldr	r3, [pc, #216]	@ (8009694 <UART_SetConfig+0x2d4>)
 80095bc:	fba3 2302 	umull	r2, r3, r3, r2
 80095c0:	095b      	lsrs	r3, r3, #5
 80095c2:	005b      	lsls	r3, r3, #1
 80095c4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80095c8:	441c      	add	r4, r3
 80095ca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80095ce:	2200      	movs	r2, #0
 80095d0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80095d4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80095d8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80095dc:	4642      	mov	r2, r8
 80095de:	464b      	mov	r3, r9
 80095e0:	1891      	adds	r1, r2, r2
 80095e2:	63b9      	str	r1, [r7, #56]	@ 0x38
 80095e4:	415b      	adcs	r3, r3
 80095e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80095e8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80095ec:	4641      	mov	r1, r8
 80095ee:	1851      	adds	r1, r2, r1
 80095f0:	6339      	str	r1, [r7, #48]	@ 0x30
 80095f2:	4649      	mov	r1, r9
 80095f4:	414b      	adcs	r3, r1
 80095f6:	637b      	str	r3, [r7, #52]	@ 0x34
 80095f8:	f04f 0200 	mov.w	r2, #0
 80095fc:	f04f 0300 	mov.w	r3, #0
 8009600:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8009604:	4659      	mov	r1, fp
 8009606:	00cb      	lsls	r3, r1, #3
 8009608:	4651      	mov	r1, sl
 800960a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800960e:	4651      	mov	r1, sl
 8009610:	00ca      	lsls	r2, r1, #3
 8009612:	4610      	mov	r0, r2
 8009614:	4619      	mov	r1, r3
 8009616:	4603      	mov	r3, r0
 8009618:	4642      	mov	r2, r8
 800961a:	189b      	adds	r3, r3, r2
 800961c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009620:	464b      	mov	r3, r9
 8009622:	460a      	mov	r2, r1
 8009624:	eb42 0303 	adc.w	r3, r2, r3
 8009628:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800962c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009630:	685b      	ldr	r3, [r3, #4]
 8009632:	2200      	movs	r2, #0
 8009634:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8009638:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800963c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8009640:	460b      	mov	r3, r1
 8009642:	18db      	adds	r3, r3, r3
 8009644:	62bb      	str	r3, [r7, #40]	@ 0x28
 8009646:	4613      	mov	r3, r2
 8009648:	eb42 0303 	adc.w	r3, r2, r3
 800964c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800964e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8009652:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8009656:	f7f7 faf7 	bl	8000c48 <__aeabi_uldivmod>
 800965a:	4602      	mov	r2, r0
 800965c:	460b      	mov	r3, r1
 800965e:	4b0d      	ldr	r3, [pc, #52]	@ (8009694 <UART_SetConfig+0x2d4>)
 8009660:	fba3 1302 	umull	r1, r3, r3, r2
 8009664:	095b      	lsrs	r3, r3, #5
 8009666:	2164      	movs	r1, #100	@ 0x64
 8009668:	fb01 f303 	mul.w	r3, r1, r3
 800966c:	1ad3      	subs	r3, r2, r3
 800966e:	00db      	lsls	r3, r3, #3
 8009670:	3332      	adds	r3, #50	@ 0x32
 8009672:	4a08      	ldr	r2, [pc, #32]	@ (8009694 <UART_SetConfig+0x2d4>)
 8009674:	fba2 2303 	umull	r2, r3, r2, r3
 8009678:	095b      	lsrs	r3, r3, #5
 800967a:	f003 0207 	and.w	r2, r3, #7
 800967e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009682:	681b      	ldr	r3, [r3, #0]
 8009684:	4422      	add	r2, r4
 8009686:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009688:	e106      	b.n	8009898 <UART_SetConfig+0x4d8>
 800968a:	bf00      	nop
 800968c:	40011000 	.word	0x40011000
 8009690:	40011400 	.word	0x40011400
 8009694:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009698:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800969c:	2200      	movs	r2, #0
 800969e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80096a2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80096a6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80096aa:	4642      	mov	r2, r8
 80096ac:	464b      	mov	r3, r9
 80096ae:	1891      	adds	r1, r2, r2
 80096b0:	6239      	str	r1, [r7, #32]
 80096b2:	415b      	adcs	r3, r3
 80096b4:	627b      	str	r3, [r7, #36]	@ 0x24
 80096b6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80096ba:	4641      	mov	r1, r8
 80096bc:	1854      	adds	r4, r2, r1
 80096be:	4649      	mov	r1, r9
 80096c0:	eb43 0501 	adc.w	r5, r3, r1
 80096c4:	f04f 0200 	mov.w	r2, #0
 80096c8:	f04f 0300 	mov.w	r3, #0
 80096cc:	00eb      	lsls	r3, r5, #3
 80096ce:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80096d2:	00e2      	lsls	r2, r4, #3
 80096d4:	4614      	mov	r4, r2
 80096d6:	461d      	mov	r5, r3
 80096d8:	4643      	mov	r3, r8
 80096da:	18e3      	adds	r3, r4, r3
 80096dc:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80096e0:	464b      	mov	r3, r9
 80096e2:	eb45 0303 	adc.w	r3, r5, r3
 80096e6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80096ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80096ee:	685b      	ldr	r3, [r3, #4]
 80096f0:	2200      	movs	r2, #0
 80096f2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80096f6:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80096fa:	f04f 0200 	mov.w	r2, #0
 80096fe:	f04f 0300 	mov.w	r3, #0
 8009702:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8009706:	4629      	mov	r1, r5
 8009708:	008b      	lsls	r3, r1, #2
 800970a:	4621      	mov	r1, r4
 800970c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009710:	4621      	mov	r1, r4
 8009712:	008a      	lsls	r2, r1, #2
 8009714:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8009718:	f7f7 fa96 	bl	8000c48 <__aeabi_uldivmod>
 800971c:	4602      	mov	r2, r0
 800971e:	460b      	mov	r3, r1
 8009720:	4b60      	ldr	r3, [pc, #384]	@ (80098a4 <UART_SetConfig+0x4e4>)
 8009722:	fba3 2302 	umull	r2, r3, r3, r2
 8009726:	095b      	lsrs	r3, r3, #5
 8009728:	011c      	lsls	r4, r3, #4
 800972a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800972e:	2200      	movs	r2, #0
 8009730:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009734:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8009738:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800973c:	4642      	mov	r2, r8
 800973e:	464b      	mov	r3, r9
 8009740:	1891      	adds	r1, r2, r2
 8009742:	61b9      	str	r1, [r7, #24]
 8009744:	415b      	adcs	r3, r3
 8009746:	61fb      	str	r3, [r7, #28]
 8009748:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800974c:	4641      	mov	r1, r8
 800974e:	1851      	adds	r1, r2, r1
 8009750:	6139      	str	r1, [r7, #16]
 8009752:	4649      	mov	r1, r9
 8009754:	414b      	adcs	r3, r1
 8009756:	617b      	str	r3, [r7, #20]
 8009758:	f04f 0200 	mov.w	r2, #0
 800975c:	f04f 0300 	mov.w	r3, #0
 8009760:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009764:	4659      	mov	r1, fp
 8009766:	00cb      	lsls	r3, r1, #3
 8009768:	4651      	mov	r1, sl
 800976a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800976e:	4651      	mov	r1, sl
 8009770:	00ca      	lsls	r2, r1, #3
 8009772:	4610      	mov	r0, r2
 8009774:	4619      	mov	r1, r3
 8009776:	4603      	mov	r3, r0
 8009778:	4642      	mov	r2, r8
 800977a:	189b      	adds	r3, r3, r2
 800977c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009780:	464b      	mov	r3, r9
 8009782:	460a      	mov	r2, r1
 8009784:	eb42 0303 	adc.w	r3, r2, r3
 8009788:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800978c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009790:	685b      	ldr	r3, [r3, #4]
 8009792:	2200      	movs	r2, #0
 8009794:	67bb      	str	r3, [r7, #120]	@ 0x78
 8009796:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8009798:	f04f 0200 	mov.w	r2, #0
 800979c:	f04f 0300 	mov.w	r3, #0
 80097a0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80097a4:	4649      	mov	r1, r9
 80097a6:	008b      	lsls	r3, r1, #2
 80097a8:	4641      	mov	r1, r8
 80097aa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80097ae:	4641      	mov	r1, r8
 80097b0:	008a      	lsls	r2, r1, #2
 80097b2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80097b6:	f7f7 fa47 	bl	8000c48 <__aeabi_uldivmod>
 80097ba:	4602      	mov	r2, r0
 80097bc:	460b      	mov	r3, r1
 80097be:	4611      	mov	r1, r2
 80097c0:	4b38      	ldr	r3, [pc, #224]	@ (80098a4 <UART_SetConfig+0x4e4>)
 80097c2:	fba3 2301 	umull	r2, r3, r3, r1
 80097c6:	095b      	lsrs	r3, r3, #5
 80097c8:	2264      	movs	r2, #100	@ 0x64
 80097ca:	fb02 f303 	mul.w	r3, r2, r3
 80097ce:	1acb      	subs	r3, r1, r3
 80097d0:	011b      	lsls	r3, r3, #4
 80097d2:	3332      	adds	r3, #50	@ 0x32
 80097d4:	4a33      	ldr	r2, [pc, #204]	@ (80098a4 <UART_SetConfig+0x4e4>)
 80097d6:	fba2 2303 	umull	r2, r3, r2, r3
 80097da:	095b      	lsrs	r3, r3, #5
 80097dc:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80097e0:	441c      	add	r4, r3
 80097e2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80097e6:	2200      	movs	r2, #0
 80097e8:	673b      	str	r3, [r7, #112]	@ 0x70
 80097ea:	677a      	str	r2, [r7, #116]	@ 0x74
 80097ec:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80097f0:	4642      	mov	r2, r8
 80097f2:	464b      	mov	r3, r9
 80097f4:	1891      	adds	r1, r2, r2
 80097f6:	60b9      	str	r1, [r7, #8]
 80097f8:	415b      	adcs	r3, r3
 80097fa:	60fb      	str	r3, [r7, #12]
 80097fc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009800:	4641      	mov	r1, r8
 8009802:	1851      	adds	r1, r2, r1
 8009804:	6039      	str	r1, [r7, #0]
 8009806:	4649      	mov	r1, r9
 8009808:	414b      	adcs	r3, r1
 800980a:	607b      	str	r3, [r7, #4]
 800980c:	f04f 0200 	mov.w	r2, #0
 8009810:	f04f 0300 	mov.w	r3, #0
 8009814:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009818:	4659      	mov	r1, fp
 800981a:	00cb      	lsls	r3, r1, #3
 800981c:	4651      	mov	r1, sl
 800981e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009822:	4651      	mov	r1, sl
 8009824:	00ca      	lsls	r2, r1, #3
 8009826:	4610      	mov	r0, r2
 8009828:	4619      	mov	r1, r3
 800982a:	4603      	mov	r3, r0
 800982c:	4642      	mov	r2, r8
 800982e:	189b      	adds	r3, r3, r2
 8009830:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009832:	464b      	mov	r3, r9
 8009834:	460a      	mov	r2, r1
 8009836:	eb42 0303 	adc.w	r3, r2, r3
 800983a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800983c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009840:	685b      	ldr	r3, [r3, #4]
 8009842:	2200      	movs	r2, #0
 8009844:	663b      	str	r3, [r7, #96]	@ 0x60
 8009846:	667a      	str	r2, [r7, #100]	@ 0x64
 8009848:	f04f 0200 	mov.w	r2, #0
 800984c:	f04f 0300 	mov.w	r3, #0
 8009850:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8009854:	4649      	mov	r1, r9
 8009856:	008b      	lsls	r3, r1, #2
 8009858:	4641      	mov	r1, r8
 800985a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800985e:	4641      	mov	r1, r8
 8009860:	008a      	lsls	r2, r1, #2
 8009862:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8009866:	f7f7 f9ef 	bl	8000c48 <__aeabi_uldivmod>
 800986a:	4602      	mov	r2, r0
 800986c:	460b      	mov	r3, r1
 800986e:	4b0d      	ldr	r3, [pc, #52]	@ (80098a4 <UART_SetConfig+0x4e4>)
 8009870:	fba3 1302 	umull	r1, r3, r3, r2
 8009874:	095b      	lsrs	r3, r3, #5
 8009876:	2164      	movs	r1, #100	@ 0x64
 8009878:	fb01 f303 	mul.w	r3, r1, r3
 800987c:	1ad3      	subs	r3, r2, r3
 800987e:	011b      	lsls	r3, r3, #4
 8009880:	3332      	adds	r3, #50	@ 0x32
 8009882:	4a08      	ldr	r2, [pc, #32]	@ (80098a4 <UART_SetConfig+0x4e4>)
 8009884:	fba2 2303 	umull	r2, r3, r2, r3
 8009888:	095b      	lsrs	r3, r3, #5
 800988a:	f003 020f 	and.w	r2, r3, #15
 800988e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009892:	681b      	ldr	r3, [r3, #0]
 8009894:	4422      	add	r2, r4
 8009896:	609a      	str	r2, [r3, #8]
}
 8009898:	bf00      	nop
 800989a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800989e:	46bd      	mov	sp, r7
 80098a0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80098a4:	51eb851f 	.word	0x51eb851f

080098a8 <__NVIC_SetPriority>:
{
 80098a8:	b480      	push	{r7}
 80098aa:	b083      	sub	sp, #12
 80098ac:	af00      	add	r7, sp, #0
 80098ae:	4603      	mov	r3, r0
 80098b0:	6039      	str	r1, [r7, #0]
 80098b2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80098b4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80098b8:	2b00      	cmp	r3, #0
 80098ba:	db0a      	blt.n	80098d2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80098bc:	683b      	ldr	r3, [r7, #0]
 80098be:	b2da      	uxtb	r2, r3
 80098c0:	490c      	ldr	r1, [pc, #48]	@ (80098f4 <__NVIC_SetPriority+0x4c>)
 80098c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80098c6:	0112      	lsls	r2, r2, #4
 80098c8:	b2d2      	uxtb	r2, r2
 80098ca:	440b      	add	r3, r1
 80098cc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80098d0:	e00a      	b.n	80098e8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80098d2:	683b      	ldr	r3, [r7, #0]
 80098d4:	b2da      	uxtb	r2, r3
 80098d6:	4908      	ldr	r1, [pc, #32]	@ (80098f8 <__NVIC_SetPriority+0x50>)
 80098d8:	79fb      	ldrb	r3, [r7, #7]
 80098da:	f003 030f 	and.w	r3, r3, #15
 80098de:	3b04      	subs	r3, #4
 80098e0:	0112      	lsls	r2, r2, #4
 80098e2:	b2d2      	uxtb	r2, r2
 80098e4:	440b      	add	r3, r1
 80098e6:	761a      	strb	r2, [r3, #24]
}
 80098e8:	bf00      	nop
 80098ea:	370c      	adds	r7, #12
 80098ec:	46bd      	mov	sp, r7
 80098ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098f2:	4770      	bx	lr
 80098f4:	e000e100 	.word	0xe000e100
 80098f8:	e000ed00 	.word	0xe000ed00

080098fc <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80098fc:	b580      	push	{r7, lr}
 80098fe:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8009900:	4b05      	ldr	r3, [pc, #20]	@ (8009918 <SysTick_Handler+0x1c>)
 8009902:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8009904:	f002 f80c 	bl	800b920 <xTaskGetSchedulerState>
 8009908:	4603      	mov	r3, r0
 800990a:	2b01      	cmp	r3, #1
 800990c:	d001      	beq.n	8009912 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800990e:	f002 ff03 	bl	800c718 <xPortSysTickHandler>
  }
}
 8009912:	bf00      	nop
 8009914:	bd80      	pop	{r7, pc}
 8009916:	bf00      	nop
 8009918:	e000e010 	.word	0xe000e010

0800991c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800991c:	b580      	push	{r7, lr}
 800991e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8009920:	2100      	movs	r1, #0
 8009922:	f06f 0004 	mvn.w	r0, #4
 8009926:	f7ff ffbf 	bl	80098a8 <__NVIC_SetPriority>
#endif
}
 800992a:	bf00      	nop
 800992c:	bd80      	pop	{r7, pc}
	...

08009930 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009930:	b480      	push	{r7}
 8009932:	b083      	sub	sp, #12
 8009934:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009936:	f3ef 8305 	mrs	r3, IPSR
 800993a:	603b      	str	r3, [r7, #0]
  return(result);
 800993c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800993e:	2b00      	cmp	r3, #0
 8009940:	d003      	beq.n	800994a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8009942:	f06f 0305 	mvn.w	r3, #5
 8009946:	607b      	str	r3, [r7, #4]
 8009948:	e00c      	b.n	8009964 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800994a:	4b0a      	ldr	r3, [pc, #40]	@ (8009974 <osKernelInitialize+0x44>)
 800994c:	681b      	ldr	r3, [r3, #0]
 800994e:	2b00      	cmp	r3, #0
 8009950:	d105      	bne.n	800995e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8009952:	4b08      	ldr	r3, [pc, #32]	@ (8009974 <osKernelInitialize+0x44>)
 8009954:	2201      	movs	r2, #1
 8009956:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009958:	2300      	movs	r3, #0
 800995a:	607b      	str	r3, [r7, #4]
 800995c:	e002      	b.n	8009964 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800995e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009962:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009964:	687b      	ldr	r3, [r7, #4]
}
 8009966:	4618      	mov	r0, r3
 8009968:	370c      	adds	r7, #12
 800996a:	46bd      	mov	sp, r7
 800996c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009970:	4770      	bx	lr
 8009972:	bf00      	nop
 8009974:	20000768 	.word	0x20000768

08009978 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8009978:	b580      	push	{r7, lr}
 800997a:	b082      	sub	sp, #8
 800997c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800997e:	f3ef 8305 	mrs	r3, IPSR
 8009982:	603b      	str	r3, [r7, #0]
  return(result);
 8009984:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009986:	2b00      	cmp	r3, #0
 8009988:	d003      	beq.n	8009992 <osKernelStart+0x1a>
    stat = osErrorISR;
 800998a:	f06f 0305 	mvn.w	r3, #5
 800998e:	607b      	str	r3, [r7, #4]
 8009990:	e010      	b.n	80099b4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8009992:	4b0b      	ldr	r3, [pc, #44]	@ (80099c0 <osKernelStart+0x48>)
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	2b01      	cmp	r3, #1
 8009998:	d109      	bne.n	80099ae <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800999a:	f7ff ffbf 	bl	800991c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800999e:	4b08      	ldr	r3, [pc, #32]	@ (80099c0 <osKernelStart+0x48>)
 80099a0:	2202      	movs	r2, #2
 80099a2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80099a4:	f001 fb58 	bl	800b058 <vTaskStartScheduler>
      stat = osOK;
 80099a8:	2300      	movs	r3, #0
 80099aa:	607b      	str	r3, [r7, #4]
 80099ac:	e002      	b.n	80099b4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80099ae:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80099b2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80099b4:	687b      	ldr	r3, [r7, #4]
}
 80099b6:	4618      	mov	r0, r3
 80099b8:	3708      	adds	r7, #8
 80099ba:	46bd      	mov	sp, r7
 80099bc:	bd80      	pop	{r7, pc}
 80099be:	bf00      	nop
 80099c0:	20000768 	.word	0x20000768

080099c4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80099c4:	b580      	push	{r7, lr}
 80099c6:	b08e      	sub	sp, #56	@ 0x38
 80099c8:	af04      	add	r7, sp, #16
 80099ca:	60f8      	str	r0, [r7, #12]
 80099cc:	60b9      	str	r1, [r7, #8]
 80099ce:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80099d0:	2300      	movs	r3, #0
 80099d2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80099d4:	f3ef 8305 	mrs	r3, IPSR
 80099d8:	617b      	str	r3, [r7, #20]
  return(result);
 80099da:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80099dc:	2b00      	cmp	r3, #0
 80099de:	d17e      	bne.n	8009ade <osThreadNew+0x11a>
 80099e0:	68fb      	ldr	r3, [r7, #12]
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d07b      	beq.n	8009ade <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80099e6:	2380      	movs	r3, #128	@ 0x80
 80099e8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80099ea:	2318      	movs	r3, #24
 80099ec:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80099ee:	2300      	movs	r3, #0
 80099f0:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80099f2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80099f6:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80099f8:	687b      	ldr	r3, [r7, #4]
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d045      	beq.n	8009a8a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80099fe:	687b      	ldr	r3, [r7, #4]
 8009a00:	681b      	ldr	r3, [r3, #0]
 8009a02:	2b00      	cmp	r3, #0
 8009a04:	d002      	beq.n	8009a0c <osThreadNew+0x48>
        name = attr->name;
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8009a0c:	687b      	ldr	r3, [r7, #4]
 8009a0e:	699b      	ldr	r3, [r3, #24]
 8009a10:	2b00      	cmp	r3, #0
 8009a12:	d002      	beq.n	8009a1a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	699b      	ldr	r3, [r3, #24]
 8009a18:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8009a1a:	69fb      	ldr	r3, [r7, #28]
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d008      	beq.n	8009a32 <osThreadNew+0x6e>
 8009a20:	69fb      	ldr	r3, [r7, #28]
 8009a22:	2b38      	cmp	r3, #56	@ 0x38
 8009a24:	d805      	bhi.n	8009a32 <osThreadNew+0x6e>
 8009a26:	687b      	ldr	r3, [r7, #4]
 8009a28:	685b      	ldr	r3, [r3, #4]
 8009a2a:	f003 0301 	and.w	r3, r3, #1
 8009a2e:	2b00      	cmp	r3, #0
 8009a30:	d001      	beq.n	8009a36 <osThreadNew+0x72>
        return (NULL);
 8009a32:	2300      	movs	r3, #0
 8009a34:	e054      	b.n	8009ae0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	695b      	ldr	r3, [r3, #20]
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d003      	beq.n	8009a46 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	695b      	ldr	r3, [r3, #20]
 8009a42:	089b      	lsrs	r3, r3, #2
 8009a44:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009a46:	687b      	ldr	r3, [r7, #4]
 8009a48:	689b      	ldr	r3, [r3, #8]
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d00e      	beq.n	8009a6c <osThreadNew+0xa8>
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	68db      	ldr	r3, [r3, #12]
 8009a52:	2ba7      	cmp	r3, #167	@ 0xa7
 8009a54:	d90a      	bls.n	8009a6c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d006      	beq.n	8009a6c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	695b      	ldr	r3, [r3, #20]
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	d002      	beq.n	8009a6c <osThreadNew+0xa8>
        mem = 1;
 8009a66:	2301      	movs	r3, #1
 8009a68:	61bb      	str	r3, [r7, #24]
 8009a6a:	e010      	b.n	8009a8e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009a6c:	687b      	ldr	r3, [r7, #4]
 8009a6e:	689b      	ldr	r3, [r3, #8]
 8009a70:	2b00      	cmp	r3, #0
 8009a72:	d10c      	bne.n	8009a8e <osThreadNew+0xca>
 8009a74:	687b      	ldr	r3, [r7, #4]
 8009a76:	68db      	ldr	r3, [r3, #12]
 8009a78:	2b00      	cmp	r3, #0
 8009a7a:	d108      	bne.n	8009a8e <osThreadNew+0xca>
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	691b      	ldr	r3, [r3, #16]
 8009a80:	2b00      	cmp	r3, #0
 8009a82:	d104      	bne.n	8009a8e <osThreadNew+0xca>
          mem = 0;
 8009a84:	2300      	movs	r3, #0
 8009a86:	61bb      	str	r3, [r7, #24]
 8009a88:	e001      	b.n	8009a8e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8009a8a:	2300      	movs	r3, #0
 8009a8c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009a8e:	69bb      	ldr	r3, [r7, #24]
 8009a90:	2b01      	cmp	r3, #1
 8009a92:	d110      	bne.n	8009ab6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009a94:	687b      	ldr	r3, [r7, #4]
 8009a96:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8009a98:	687a      	ldr	r2, [r7, #4]
 8009a9a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009a9c:	9202      	str	r2, [sp, #8]
 8009a9e:	9301      	str	r3, [sp, #4]
 8009aa0:	69fb      	ldr	r3, [r7, #28]
 8009aa2:	9300      	str	r3, [sp, #0]
 8009aa4:	68bb      	ldr	r3, [r7, #8]
 8009aa6:	6a3a      	ldr	r2, [r7, #32]
 8009aa8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009aaa:	68f8      	ldr	r0, [r7, #12]
 8009aac:	f001 f8e0 	bl	800ac70 <xTaskCreateStatic>
 8009ab0:	4603      	mov	r3, r0
 8009ab2:	613b      	str	r3, [r7, #16]
 8009ab4:	e013      	b.n	8009ade <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8009ab6:	69bb      	ldr	r3, [r7, #24]
 8009ab8:	2b00      	cmp	r3, #0
 8009aba:	d110      	bne.n	8009ade <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009abc:	6a3b      	ldr	r3, [r7, #32]
 8009abe:	b29a      	uxth	r2, r3
 8009ac0:	f107 0310 	add.w	r3, r7, #16
 8009ac4:	9301      	str	r3, [sp, #4]
 8009ac6:	69fb      	ldr	r3, [r7, #28]
 8009ac8:	9300      	str	r3, [sp, #0]
 8009aca:	68bb      	ldr	r3, [r7, #8]
 8009acc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009ace:	68f8      	ldr	r0, [r7, #12]
 8009ad0:	f001 f92e 	bl	800ad30 <xTaskCreate>
 8009ad4:	4603      	mov	r3, r0
 8009ad6:	2b01      	cmp	r3, #1
 8009ad8:	d001      	beq.n	8009ade <osThreadNew+0x11a>
            hTask = NULL;
 8009ada:	2300      	movs	r3, #0
 8009adc:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8009ade:	693b      	ldr	r3, [r7, #16]
}
 8009ae0:	4618      	mov	r0, r3
 8009ae2:	3728      	adds	r7, #40	@ 0x28
 8009ae4:	46bd      	mov	sp, r7
 8009ae6:	bd80      	pop	{r7, pc}

08009ae8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8009ae8:	b580      	push	{r7, lr}
 8009aea:	b084      	sub	sp, #16
 8009aec:	af00      	add	r7, sp, #0
 8009aee:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009af0:	f3ef 8305 	mrs	r3, IPSR
 8009af4:	60bb      	str	r3, [r7, #8]
  return(result);
 8009af6:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009af8:	2b00      	cmp	r3, #0
 8009afa:	d003      	beq.n	8009b04 <osDelay+0x1c>
    stat = osErrorISR;
 8009afc:	f06f 0305 	mvn.w	r3, #5
 8009b00:	60fb      	str	r3, [r7, #12]
 8009b02:	e007      	b.n	8009b14 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8009b04:	2300      	movs	r3, #0
 8009b06:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d002      	beq.n	8009b14 <osDelay+0x2c>
      vTaskDelay(ticks);
 8009b0e:	6878      	ldr	r0, [r7, #4]
 8009b10:	f001 fa6c 	bl	800afec <vTaskDelay>
    }
  }

  return (stat);
 8009b14:	68fb      	ldr	r3, [r7, #12]
}
 8009b16:	4618      	mov	r0, r3
 8009b18:	3710      	adds	r7, #16
 8009b1a:	46bd      	mov	sp, r7
 8009b1c:	bd80      	pop	{r7, pc}

08009b1e <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8009b1e:	b580      	push	{r7, lr}
 8009b20:	b088      	sub	sp, #32
 8009b22:	af00      	add	r7, sp, #0
 8009b24:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8009b26:	2300      	movs	r3, #0
 8009b28:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009b2a:	f3ef 8305 	mrs	r3, IPSR
 8009b2e:	60bb      	str	r3, [r7, #8]
  return(result);
 8009b30:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d174      	bne.n	8009c20 <osMutexNew+0x102>
    if (attr != NULL) {
 8009b36:	687b      	ldr	r3, [r7, #4]
 8009b38:	2b00      	cmp	r3, #0
 8009b3a:	d003      	beq.n	8009b44 <osMutexNew+0x26>
      type = attr->attr_bits;
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	685b      	ldr	r3, [r3, #4]
 8009b40:	61bb      	str	r3, [r7, #24]
 8009b42:	e001      	b.n	8009b48 <osMutexNew+0x2a>
    } else {
      type = 0U;
 8009b44:	2300      	movs	r3, #0
 8009b46:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8009b48:	69bb      	ldr	r3, [r7, #24]
 8009b4a:	f003 0301 	and.w	r3, r3, #1
 8009b4e:	2b00      	cmp	r3, #0
 8009b50:	d002      	beq.n	8009b58 <osMutexNew+0x3a>
      rmtx = 1U;
 8009b52:	2301      	movs	r3, #1
 8009b54:	617b      	str	r3, [r7, #20]
 8009b56:	e001      	b.n	8009b5c <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8009b58:	2300      	movs	r3, #0
 8009b5a:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8009b5c:	69bb      	ldr	r3, [r7, #24]
 8009b5e:	f003 0308 	and.w	r3, r3, #8
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d15c      	bne.n	8009c20 <osMutexNew+0x102>
      mem = -1;
 8009b66:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009b6a:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8009b6c:	687b      	ldr	r3, [r7, #4]
 8009b6e:	2b00      	cmp	r3, #0
 8009b70:	d015      	beq.n	8009b9e <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8009b72:	687b      	ldr	r3, [r7, #4]
 8009b74:	689b      	ldr	r3, [r3, #8]
 8009b76:	2b00      	cmp	r3, #0
 8009b78:	d006      	beq.n	8009b88 <osMutexNew+0x6a>
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	68db      	ldr	r3, [r3, #12]
 8009b7e:	2b4f      	cmp	r3, #79	@ 0x4f
 8009b80:	d902      	bls.n	8009b88 <osMutexNew+0x6a>
          mem = 1;
 8009b82:	2301      	movs	r3, #1
 8009b84:	613b      	str	r3, [r7, #16]
 8009b86:	e00c      	b.n	8009ba2 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	689b      	ldr	r3, [r3, #8]
 8009b8c:	2b00      	cmp	r3, #0
 8009b8e:	d108      	bne.n	8009ba2 <osMutexNew+0x84>
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	68db      	ldr	r3, [r3, #12]
 8009b94:	2b00      	cmp	r3, #0
 8009b96:	d104      	bne.n	8009ba2 <osMutexNew+0x84>
            mem = 0;
 8009b98:	2300      	movs	r3, #0
 8009b9a:	613b      	str	r3, [r7, #16]
 8009b9c:	e001      	b.n	8009ba2 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8009b9e:	2300      	movs	r3, #0
 8009ba0:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8009ba2:	693b      	ldr	r3, [r7, #16]
 8009ba4:	2b01      	cmp	r3, #1
 8009ba6:	d112      	bne.n	8009bce <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8009ba8:	697b      	ldr	r3, [r7, #20]
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d007      	beq.n	8009bbe <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	689b      	ldr	r3, [r3, #8]
 8009bb2:	4619      	mov	r1, r3
 8009bb4:	2004      	movs	r0, #4
 8009bb6:	f000 fa98 	bl	800a0ea <xQueueCreateMutexStatic>
 8009bba:	61f8      	str	r0, [r7, #28]
 8009bbc:	e016      	b.n	8009bec <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	689b      	ldr	r3, [r3, #8]
 8009bc2:	4619      	mov	r1, r3
 8009bc4:	2001      	movs	r0, #1
 8009bc6:	f000 fa90 	bl	800a0ea <xQueueCreateMutexStatic>
 8009bca:	61f8      	str	r0, [r7, #28]
 8009bcc:	e00e      	b.n	8009bec <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8009bce:	693b      	ldr	r3, [r7, #16]
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d10b      	bne.n	8009bec <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8009bd4:	697b      	ldr	r3, [r7, #20]
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d004      	beq.n	8009be4 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8009bda:	2004      	movs	r0, #4
 8009bdc:	f000 fa6d 	bl	800a0ba <xQueueCreateMutex>
 8009be0:	61f8      	str	r0, [r7, #28]
 8009be2:	e003      	b.n	8009bec <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8009be4:	2001      	movs	r0, #1
 8009be6:	f000 fa68 	bl	800a0ba <xQueueCreateMutex>
 8009bea:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8009bec:	69fb      	ldr	r3, [r7, #28]
 8009bee:	2b00      	cmp	r3, #0
 8009bf0:	d00c      	beq.n	8009c0c <osMutexNew+0xee>
        if (attr != NULL) {
 8009bf2:	687b      	ldr	r3, [r7, #4]
 8009bf4:	2b00      	cmp	r3, #0
 8009bf6:	d003      	beq.n	8009c00 <osMutexNew+0xe2>
          name = attr->name;
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	60fb      	str	r3, [r7, #12]
 8009bfe:	e001      	b.n	8009c04 <osMutexNew+0xe6>
        } else {
          name = NULL;
 8009c00:	2300      	movs	r3, #0
 8009c02:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8009c04:	68f9      	ldr	r1, [r7, #12]
 8009c06:	69f8      	ldr	r0, [r7, #28]
 8009c08:	f000 ffd4 	bl	800abb4 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8009c0c:	69fb      	ldr	r3, [r7, #28]
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d006      	beq.n	8009c20 <osMutexNew+0x102>
 8009c12:	697b      	ldr	r3, [r7, #20]
 8009c14:	2b00      	cmp	r3, #0
 8009c16:	d003      	beq.n	8009c20 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8009c18:	69fb      	ldr	r3, [r7, #28]
 8009c1a:	f043 0301 	orr.w	r3, r3, #1
 8009c1e:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8009c20:	69fb      	ldr	r3, [r7, #28]
}
 8009c22:	4618      	mov	r0, r3
 8009c24:	3720      	adds	r7, #32
 8009c26:	46bd      	mov	sp, r7
 8009c28:	bd80      	pop	{r7, pc}
	...

08009c2c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009c2c:	b480      	push	{r7}
 8009c2e:	b085      	sub	sp, #20
 8009c30:	af00      	add	r7, sp, #0
 8009c32:	60f8      	str	r0, [r7, #12]
 8009c34:	60b9      	str	r1, [r7, #8]
 8009c36:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009c38:	68fb      	ldr	r3, [r7, #12]
 8009c3a:	4a07      	ldr	r2, [pc, #28]	@ (8009c58 <vApplicationGetIdleTaskMemory+0x2c>)
 8009c3c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009c3e:	68bb      	ldr	r3, [r7, #8]
 8009c40:	4a06      	ldr	r2, [pc, #24]	@ (8009c5c <vApplicationGetIdleTaskMemory+0x30>)
 8009c42:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	2280      	movs	r2, #128	@ 0x80
 8009c48:	601a      	str	r2, [r3, #0]
}
 8009c4a:	bf00      	nop
 8009c4c:	3714      	adds	r7, #20
 8009c4e:	46bd      	mov	sp, r7
 8009c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c54:	4770      	bx	lr
 8009c56:	bf00      	nop
 8009c58:	2000076c 	.word	0x2000076c
 8009c5c:	20000814 	.word	0x20000814

08009c60 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009c60:	b480      	push	{r7}
 8009c62:	b085      	sub	sp, #20
 8009c64:	af00      	add	r7, sp, #0
 8009c66:	60f8      	str	r0, [r7, #12]
 8009c68:	60b9      	str	r1, [r7, #8]
 8009c6a:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	4a07      	ldr	r2, [pc, #28]	@ (8009c8c <vApplicationGetTimerTaskMemory+0x2c>)
 8009c70:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009c72:	68bb      	ldr	r3, [r7, #8]
 8009c74:	4a06      	ldr	r2, [pc, #24]	@ (8009c90 <vApplicationGetTimerTaskMemory+0x30>)
 8009c76:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009c7e:	601a      	str	r2, [r3, #0]
}
 8009c80:	bf00      	nop
 8009c82:	3714      	adds	r7, #20
 8009c84:	46bd      	mov	sp, r7
 8009c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c8a:	4770      	bx	lr
 8009c8c:	20000a14 	.word	0x20000a14
 8009c90:	20000abc 	.word	0x20000abc

08009c94 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009c94:	b480      	push	{r7}
 8009c96:	b083      	sub	sp, #12
 8009c98:	af00      	add	r7, sp, #0
 8009c9a:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	f103 0208 	add.w	r2, r3, #8
 8009ca2:	687b      	ldr	r3, [r7, #4]
 8009ca4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009cac:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009cae:	687b      	ldr	r3, [r7, #4]
 8009cb0:	f103 0208 	add.w	r2, r3, #8
 8009cb4:	687b      	ldr	r3, [r7, #4]
 8009cb6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009cb8:	687b      	ldr	r3, [r7, #4]
 8009cba:	f103 0208 	add.w	r2, r3, #8
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009cc2:	687b      	ldr	r3, [r7, #4]
 8009cc4:	2200      	movs	r2, #0
 8009cc6:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009cc8:	bf00      	nop
 8009cca:	370c      	adds	r7, #12
 8009ccc:	46bd      	mov	sp, r7
 8009cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cd2:	4770      	bx	lr

08009cd4 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009cd4:	b480      	push	{r7}
 8009cd6:	b083      	sub	sp, #12
 8009cd8:	af00      	add	r7, sp, #0
 8009cda:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	2200      	movs	r2, #0
 8009ce0:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009ce2:	bf00      	nop
 8009ce4:	370c      	adds	r7, #12
 8009ce6:	46bd      	mov	sp, r7
 8009ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cec:	4770      	bx	lr

08009cee <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009cee:	b480      	push	{r7}
 8009cf0:	b085      	sub	sp, #20
 8009cf2:	af00      	add	r7, sp, #0
 8009cf4:	6078      	str	r0, [r7, #4]
 8009cf6:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	685b      	ldr	r3, [r3, #4]
 8009cfc:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009cfe:	683b      	ldr	r3, [r7, #0]
 8009d00:	68fa      	ldr	r2, [r7, #12]
 8009d02:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009d04:	68fb      	ldr	r3, [r7, #12]
 8009d06:	689a      	ldr	r2, [r3, #8]
 8009d08:	683b      	ldr	r3, [r7, #0]
 8009d0a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	689b      	ldr	r3, [r3, #8]
 8009d10:	683a      	ldr	r2, [r7, #0]
 8009d12:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	683a      	ldr	r2, [r7, #0]
 8009d18:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009d1a:	683b      	ldr	r3, [r7, #0]
 8009d1c:	687a      	ldr	r2, [r7, #4]
 8009d1e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009d20:	687b      	ldr	r3, [r7, #4]
 8009d22:	681b      	ldr	r3, [r3, #0]
 8009d24:	1c5a      	adds	r2, r3, #1
 8009d26:	687b      	ldr	r3, [r7, #4]
 8009d28:	601a      	str	r2, [r3, #0]
}
 8009d2a:	bf00      	nop
 8009d2c:	3714      	adds	r7, #20
 8009d2e:	46bd      	mov	sp, r7
 8009d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d34:	4770      	bx	lr

08009d36 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009d36:	b480      	push	{r7}
 8009d38:	b085      	sub	sp, #20
 8009d3a:	af00      	add	r7, sp, #0
 8009d3c:	6078      	str	r0, [r7, #4]
 8009d3e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009d40:	683b      	ldr	r3, [r7, #0]
 8009d42:	681b      	ldr	r3, [r3, #0]
 8009d44:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009d46:	68bb      	ldr	r3, [r7, #8]
 8009d48:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009d4c:	d103      	bne.n	8009d56 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009d4e:	687b      	ldr	r3, [r7, #4]
 8009d50:	691b      	ldr	r3, [r3, #16]
 8009d52:	60fb      	str	r3, [r7, #12]
 8009d54:	e00c      	b.n	8009d70 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009d56:	687b      	ldr	r3, [r7, #4]
 8009d58:	3308      	adds	r3, #8
 8009d5a:	60fb      	str	r3, [r7, #12]
 8009d5c:	e002      	b.n	8009d64 <vListInsert+0x2e>
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	685b      	ldr	r3, [r3, #4]
 8009d62:	60fb      	str	r3, [r7, #12]
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	685b      	ldr	r3, [r3, #4]
 8009d68:	681b      	ldr	r3, [r3, #0]
 8009d6a:	68ba      	ldr	r2, [r7, #8]
 8009d6c:	429a      	cmp	r2, r3
 8009d6e:	d2f6      	bcs.n	8009d5e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009d70:	68fb      	ldr	r3, [r7, #12]
 8009d72:	685a      	ldr	r2, [r3, #4]
 8009d74:	683b      	ldr	r3, [r7, #0]
 8009d76:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009d78:	683b      	ldr	r3, [r7, #0]
 8009d7a:	685b      	ldr	r3, [r3, #4]
 8009d7c:	683a      	ldr	r2, [r7, #0]
 8009d7e:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009d80:	683b      	ldr	r3, [r7, #0]
 8009d82:	68fa      	ldr	r2, [r7, #12]
 8009d84:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	683a      	ldr	r2, [r7, #0]
 8009d8a:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009d8c:	683b      	ldr	r3, [r7, #0]
 8009d8e:	687a      	ldr	r2, [r7, #4]
 8009d90:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009d92:	687b      	ldr	r3, [r7, #4]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	1c5a      	adds	r2, r3, #1
 8009d98:	687b      	ldr	r3, [r7, #4]
 8009d9a:	601a      	str	r2, [r3, #0]
}
 8009d9c:	bf00      	nop
 8009d9e:	3714      	adds	r7, #20
 8009da0:	46bd      	mov	sp, r7
 8009da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009da6:	4770      	bx	lr

08009da8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009da8:	b480      	push	{r7}
 8009daa:	b085      	sub	sp, #20
 8009dac:	af00      	add	r7, sp, #0
 8009dae:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009db0:	687b      	ldr	r3, [r7, #4]
 8009db2:	691b      	ldr	r3, [r3, #16]
 8009db4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009db6:	687b      	ldr	r3, [r7, #4]
 8009db8:	685b      	ldr	r3, [r3, #4]
 8009dba:	687a      	ldr	r2, [r7, #4]
 8009dbc:	6892      	ldr	r2, [r2, #8]
 8009dbe:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009dc0:	687b      	ldr	r3, [r7, #4]
 8009dc2:	689b      	ldr	r3, [r3, #8]
 8009dc4:	687a      	ldr	r2, [r7, #4]
 8009dc6:	6852      	ldr	r2, [r2, #4]
 8009dc8:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009dca:	68fb      	ldr	r3, [r7, #12]
 8009dcc:	685b      	ldr	r3, [r3, #4]
 8009dce:	687a      	ldr	r2, [r7, #4]
 8009dd0:	429a      	cmp	r2, r3
 8009dd2:	d103      	bne.n	8009ddc <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009dd4:	687b      	ldr	r3, [r7, #4]
 8009dd6:	689a      	ldr	r2, [r3, #8]
 8009dd8:	68fb      	ldr	r3, [r7, #12]
 8009dda:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009ddc:	687b      	ldr	r3, [r7, #4]
 8009dde:	2200      	movs	r2, #0
 8009de0:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009de2:	68fb      	ldr	r3, [r7, #12]
 8009de4:	681b      	ldr	r3, [r3, #0]
 8009de6:	1e5a      	subs	r2, r3, #1
 8009de8:	68fb      	ldr	r3, [r7, #12]
 8009dea:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009dec:	68fb      	ldr	r3, [r7, #12]
 8009dee:	681b      	ldr	r3, [r3, #0]
}
 8009df0:	4618      	mov	r0, r3
 8009df2:	3714      	adds	r7, #20
 8009df4:	46bd      	mov	sp, r7
 8009df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dfa:	4770      	bx	lr

08009dfc <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009dfc:	b580      	push	{r7, lr}
 8009dfe:	b084      	sub	sp, #16
 8009e00:	af00      	add	r7, sp, #0
 8009e02:	6078      	str	r0, [r7, #4]
 8009e04:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009e0a:	68fb      	ldr	r3, [r7, #12]
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	d10b      	bne.n	8009e28 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009e10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e14:	f383 8811 	msr	BASEPRI, r3
 8009e18:	f3bf 8f6f 	isb	sy
 8009e1c:	f3bf 8f4f 	dsb	sy
 8009e20:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009e22:	bf00      	nop
 8009e24:	bf00      	nop
 8009e26:	e7fd      	b.n	8009e24 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009e28:	f002 fbe6 	bl	800c5f8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009e2c:	68fb      	ldr	r3, [r7, #12]
 8009e2e:	681a      	ldr	r2, [r3, #0]
 8009e30:	68fb      	ldr	r3, [r7, #12]
 8009e32:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009e34:	68f9      	ldr	r1, [r7, #12]
 8009e36:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8009e38:	fb01 f303 	mul.w	r3, r1, r3
 8009e3c:	441a      	add	r2, r3
 8009e3e:	68fb      	ldr	r3, [r7, #12]
 8009e40:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009e42:	68fb      	ldr	r3, [r7, #12]
 8009e44:	2200      	movs	r2, #0
 8009e46:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	681a      	ldr	r2, [r3, #0]
 8009e4c:	68fb      	ldr	r3, [r7, #12]
 8009e4e:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	681a      	ldr	r2, [r3, #0]
 8009e54:	68fb      	ldr	r3, [r7, #12]
 8009e56:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009e58:	3b01      	subs	r3, #1
 8009e5a:	68f9      	ldr	r1, [r7, #12]
 8009e5c:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8009e5e:	fb01 f303 	mul.w	r3, r1, r3
 8009e62:	441a      	add	r2, r3
 8009e64:	68fb      	ldr	r3, [r7, #12]
 8009e66:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009e68:	68fb      	ldr	r3, [r7, #12]
 8009e6a:	22ff      	movs	r2, #255	@ 0xff
 8009e6c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	22ff      	movs	r2, #255	@ 0xff
 8009e74:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8009e78:	683b      	ldr	r3, [r7, #0]
 8009e7a:	2b00      	cmp	r3, #0
 8009e7c:	d114      	bne.n	8009ea8 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	691b      	ldr	r3, [r3, #16]
 8009e82:	2b00      	cmp	r3, #0
 8009e84:	d01a      	beq.n	8009ebc <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	3310      	adds	r3, #16
 8009e8a:	4618      	mov	r0, r3
 8009e8c:	f001 fb82 	bl	800b594 <xTaskRemoveFromEventList>
 8009e90:	4603      	mov	r3, r0
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d012      	beq.n	8009ebc <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009e96:	4b0d      	ldr	r3, [pc, #52]	@ (8009ecc <xQueueGenericReset+0xd0>)
 8009e98:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009e9c:	601a      	str	r2, [r3, #0]
 8009e9e:	f3bf 8f4f 	dsb	sy
 8009ea2:	f3bf 8f6f 	isb	sy
 8009ea6:	e009      	b.n	8009ebc <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	3310      	adds	r3, #16
 8009eac:	4618      	mov	r0, r3
 8009eae:	f7ff fef1 	bl	8009c94 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009eb2:	68fb      	ldr	r3, [r7, #12]
 8009eb4:	3324      	adds	r3, #36	@ 0x24
 8009eb6:	4618      	mov	r0, r3
 8009eb8:	f7ff feec 	bl	8009c94 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8009ebc:	f002 fbce 	bl	800c65c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8009ec0:	2301      	movs	r3, #1
}
 8009ec2:	4618      	mov	r0, r3
 8009ec4:	3710      	adds	r7, #16
 8009ec6:	46bd      	mov	sp, r7
 8009ec8:	bd80      	pop	{r7, pc}
 8009eca:	bf00      	nop
 8009ecc:	e000ed04 	.word	0xe000ed04

08009ed0 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8009ed0:	b580      	push	{r7, lr}
 8009ed2:	b08e      	sub	sp, #56	@ 0x38
 8009ed4:	af02      	add	r7, sp, #8
 8009ed6:	60f8      	str	r0, [r7, #12]
 8009ed8:	60b9      	str	r1, [r7, #8]
 8009eda:	607a      	str	r2, [r7, #4]
 8009edc:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009ede:	68fb      	ldr	r3, [r7, #12]
 8009ee0:	2b00      	cmp	r3, #0
 8009ee2:	d10b      	bne.n	8009efc <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8009ee4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ee8:	f383 8811 	msr	BASEPRI, r3
 8009eec:	f3bf 8f6f 	isb	sy
 8009ef0:	f3bf 8f4f 	dsb	sy
 8009ef4:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8009ef6:	bf00      	nop
 8009ef8:	bf00      	nop
 8009efa:	e7fd      	b.n	8009ef8 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8009efc:	683b      	ldr	r3, [r7, #0]
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d10b      	bne.n	8009f1a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8009f02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f06:	f383 8811 	msr	BASEPRI, r3
 8009f0a:	f3bf 8f6f 	isb	sy
 8009f0e:	f3bf 8f4f 	dsb	sy
 8009f12:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8009f14:	bf00      	nop
 8009f16:	bf00      	nop
 8009f18:	e7fd      	b.n	8009f16 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	2b00      	cmp	r3, #0
 8009f1e:	d002      	beq.n	8009f26 <xQueueGenericCreateStatic+0x56>
 8009f20:	68bb      	ldr	r3, [r7, #8]
 8009f22:	2b00      	cmp	r3, #0
 8009f24:	d001      	beq.n	8009f2a <xQueueGenericCreateStatic+0x5a>
 8009f26:	2301      	movs	r3, #1
 8009f28:	e000      	b.n	8009f2c <xQueueGenericCreateStatic+0x5c>
 8009f2a:	2300      	movs	r3, #0
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d10b      	bne.n	8009f48 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8009f30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f34:	f383 8811 	msr	BASEPRI, r3
 8009f38:	f3bf 8f6f 	isb	sy
 8009f3c:	f3bf 8f4f 	dsb	sy
 8009f40:	623b      	str	r3, [r7, #32]
}
 8009f42:	bf00      	nop
 8009f44:	bf00      	nop
 8009f46:	e7fd      	b.n	8009f44 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8009f48:	687b      	ldr	r3, [r7, #4]
 8009f4a:	2b00      	cmp	r3, #0
 8009f4c:	d102      	bne.n	8009f54 <xQueueGenericCreateStatic+0x84>
 8009f4e:	68bb      	ldr	r3, [r7, #8]
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d101      	bne.n	8009f58 <xQueueGenericCreateStatic+0x88>
 8009f54:	2301      	movs	r3, #1
 8009f56:	e000      	b.n	8009f5a <xQueueGenericCreateStatic+0x8a>
 8009f58:	2300      	movs	r3, #0
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d10b      	bne.n	8009f76 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8009f5e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f62:	f383 8811 	msr	BASEPRI, r3
 8009f66:	f3bf 8f6f 	isb	sy
 8009f6a:	f3bf 8f4f 	dsb	sy
 8009f6e:	61fb      	str	r3, [r7, #28]
}
 8009f70:	bf00      	nop
 8009f72:	bf00      	nop
 8009f74:	e7fd      	b.n	8009f72 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8009f76:	2350      	movs	r3, #80	@ 0x50
 8009f78:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8009f7a:	697b      	ldr	r3, [r7, #20]
 8009f7c:	2b50      	cmp	r3, #80	@ 0x50
 8009f7e:	d00b      	beq.n	8009f98 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8009f80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f84:	f383 8811 	msr	BASEPRI, r3
 8009f88:	f3bf 8f6f 	isb	sy
 8009f8c:	f3bf 8f4f 	dsb	sy
 8009f90:	61bb      	str	r3, [r7, #24]
}
 8009f92:	bf00      	nop
 8009f94:	bf00      	nop
 8009f96:	e7fd      	b.n	8009f94 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8009f98:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009f9a:	683b      	ldr	r3, [r7, #0]
 8009f9c:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8009f9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009fa0:	2b00      	cmp	r3, #0
 8009fa2:	d00d      	beq.n	8009fc0 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8009fa4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009fa6:	2201      	movs	r2, #1
 8009fa8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8009fac:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8009fb0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009fb2:	9300      	str	r3, [sp, #0]
 8009fb4:	4613      	mov	r3, r2
 8009fb6:	687a      	ldr	r2, [r7, #4]
 8009fb8:	68b9      	ldr	r1, [r7, #8]
 8009fba:	68f8      	ldr	r0, [r7, #12]
 8009fbc:	f000 f840 	bl	800a040 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8009fc0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8009fc2:	4618      	mov	r0, r3
 8009fc4:	3730      	adds	r7, #48	@ 0x30
 8009fc6:	46bd      	mov	sp, r7
 8009fc8:	bd80      	pop	{r7, pc}

08009fca <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8009fca:	b580      	push	{r7, lr}
 8009fcc:	b08a      	sub	sp, #40	@ 0x28
 8009fce:	af02      	add	r7, sp, #8
 8009fd0:	60f8      	str	r0, [r7, #12]
 8009fd2:	60b9      	str	r1, [r7, #8]
 8009fd4:	4613      	mov	r3, r2
 8009fd6:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8009fd8:	68fb      	ldr	r3, [r7, #12]
 8009fda:	2b00      	cmp	r3, #0
 8009fdc:	d10b      	bne.n	8009ff6 <xQueueGenericCreate+0x2c>
	__asm volatile
 8009fde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fe2:	f383 8811 	msr	BASEPRI, r3
 8009fe6:	f3bf 8f6f 	isb	sy
 8009fea:	f3bf 8f4f 	dsb	sy
 8009fee:	613b      	str	r3, [r7, #16]
}
 8009ff0:	bf00      	nop
 8009ff2:	bf00      	nop
 8009ff4:	e7fd      	b.n	8009ff2 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	68ba      	ldr	r2, [r7, #8]
 8009ffa:	fb02 f303 	mul.w	r3, r2, r3
 8009ffe:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800a000:	69fb      	ldr	r3, [r7, #28]
 800a002:	3350      	adds	r3, #80	@ 0x50
 800a004:	4618      	mov	r0, r3
 800a006:	f002 fc19 	bl	800c83c <pvPortMalloc>
 800a00a:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800a00c:	69bb      	ldr	r3, [r7, #24]
 800a00e:	2b00      	cmp	r3, #0
 800a010:	d011      	beq.n	800a036 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800a012:	69bb      	ldr	r3, [r7, #24]
 800a014:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a016:	697b      	ldr	r3, [r7, #20]
 800a018:	3350      	adds	r3, #80	@ 0x50
 800a01a:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800a01c:	69bb      	ldr	r3, [r7, #24]
 800a01e:	2200      	movs	r2, #0
 800a020:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a024:	79fa      	ldrb	r2, [r7, #7]
 800a026:	69bb      	ldr	r3, [r7, #24]
 800a028:	9300      	str	r3, [sp, #0]
 800a02a:	4613      	mov	r3, r2
 800a02c:	697a      	ldr	r2, [r7, #20]
 800a02e:	68b9      	ldr	r1, [r7, #8]
 800a030:	68f8      	ldr	r0, [r7, #12]
 800a032:	f000 f805 	bl	800a040 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a036:	69bb      	ldr	r3, [r7, #24]
	}
 800a038:	4618      	mov	r0, r3
 800a03a:	3720      	adds	r7, #32
 800a03c:	46bd      	mov	sp, r7
 800a03e:	bd80      	pop	{r7, pc}

0800a040 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a040:	b580      	push	{r7, lr}
 800a042:	b084      	sub	sp, #16
 800a044:	af00      	add	r7, sp, #0
 800a046:	60f8      	str	r0, [r7, #12]
 800a048:	60b9      	str	r1, [r7, #8]
 800a04a:	607a      	str	r2, [r7, #4]
 800a04c:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a04e:	68bb      	ldr	r3, [r7, #8]
 800a050:	2b00      	cmp	r3, #0
 800a052:	d103      	bne.n	800a05c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a054:	69bb      	ldr	r3, [r7, #24]
 800a056:	69ba      	ldr	r2, [r7, #24]
 800a058:	601a      	str	r2, [r3, #0]
 800a05a:	e002      	b.n	800a062 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a05c:	69bb      	ldr	r3, [r7, #24]
 800a05e:	687a      	ldr	r2, [r7, #4]
 800a060:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a062:	69bb      	ldr	r3, [r7, #24]
 800a064:	68fa      	ldr	r2, [r7, #12]
 800a066:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a068:	69bb      	ldr	r3, [r7, #24]
 800a06a:	68ba      	ldr	r2, [r7, #8]
 800a06c:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a06e:	2101      	movs	r1, #1
 800a070:	69b8      	ldr	r0, [r7, #24]
 800a072:	f7ff fec3 	bl	8009dfc <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a076:	69bb      	ldr	r3, [r7, #24]
 800a078:	78fa      	ldrb	r2, [r7, #3]
 800a07a:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a07e:	bf00      	nop
 800a080:	3710      	adds	r7, #16
 800a082:	46bd      	mov	sp, r7
 800a084:	bd80      	pop	{r7, pc}

0800a086 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800a086:	b580      	push	{r7, lr}
 800a088:	b082      	sub	sp, #8
 800a08a:	af00      	add	r7, sp, #0
 800a08c:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800a08e:	687b      	ldr	r3, [r7, #4]
 800a090:	2b00      	cmp	r3, #0
 800a092:	d00e      	beq.n	800a0b2 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800a094:	687b      	ldr	r3, [r7, #4]
 800a096:	2200      	movs	r2, #0
 800a098:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800a09a:	687b      	ldr	r3, [r7, #4]
 800a09c:	2200      	movs	r2, #0
 800a09e:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	2200      	movs	r2, #0
 800a0a4:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800a0a6:	2300      	movs	r3, #0
 800a0a8:	2200      	movs	r2, #0
 800a0aa:	2100      	movs	r1, #0
 800a0ac:	6878      	ldr	r0, [r7, #4]
 800a0ae:	f000 f837 	bl	800a120 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800a0b2:	bf00      	nop
 800a0b4:	3708      	adds	r7, #8
 800a0b6:	46bd      	mov	sp, r7
 800a0b8:	bd80      	pop	{r7, pc}

0800a0ba <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800a0ba:	b580      	push	{r7, lr}
 800a0bc:	b086      	sub	sp, #24
 800a0be:	af00      	add	r7, sp, #0
 800a0c0:	4603      	mov	r3, r0
 800a0c2:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800a0c4:	2301      	movs	r3, #1
 800a0c6:	617b      	str	r3, [r7, #20]
 800a0c8:	2300      	movs	r3, #0
 800a0ca:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800a0cc:	79fb      	ldrb	r3, [r7, #7]
 800a0ce:	461a      	mov	r2, r3
 800a0d0:	6939      	ldr	r1, [r7, #16]
 800a0d2:	6978      	ldr	r0, [r7, #20]
 800a0d4:	f7ff ff79 	bl	8009fca <xQueueGenericCreate>
 800a0d8:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800a0da:	68f8      	ldr	r0, [r7, #12]
 800a0dc:	f7ff ffd3 	bl	800a086 <prvInitialiseMutex>

		return xNewQueue;
 800a0e0:	68fb      	ldr	r3, [r7, #12]
	}
 800a0e2:	4618      	mov	r0, r3
 800a0e4:	3718      	adds	r7, #24
 800a0e6:	46bd      	mov	sp, r7
 800a0e8:	bd80      	pop	{r7, pc}

0800a0ea <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800a0ea:	b580      	push	{r7, lr}
 800a0ec:	b088      	sub	sp, #32
 800a0ee:	af02      	add	r7, sp, #8
 800a0f0:	4603      	mov	r3, r0
 800a0f2:	6039      	str	r1, [r7, #0]
 800a0f4:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800a0f6:	2301      	movs	r3, #1
 800a0f8:	617b      	str	r3, [r7, #20]
 800a0fa:	2300      	movs	r3, #0
 800a0fc:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800a0fe:	79fb      	ldrb	r3, [r7, #7]
 800a100:	9300      	str	r3, [sp, #0]
 800a102:	683b      	ldr	r3, [r7, #0]
 800a104:	2200      	movs	r2, #0
 800a106:	6939      	ldr	r1, [r7, #16]
 800a108:	6978      	ldr	r0, [r7, #20]
 800a10a:	f7ff fee1 	bl	8009ed0 <xQueueGenericCreateStatic>
 800a10e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800a110:	68f8      	ldr	r0, [r7, #12]
 800a112:	f7ff ffb8 	bl	800a086 <prvInitialiseMutex>

		return xNewQueue;
 800a116:	68fb      	ldr	r3, [r7, #12]
	}
 800a118:	4618      	mov	r0, r3
 800a11a:	3718      	adds	r7, #24
 800a11c:	46bd      	mov	sp, r7
 800a11e:	bd80      	pop	{r7, pc}

0800a120 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a120:	b580      	push	{r7, lr}
 800a122:	b08e      	sub	sp, #56	@ 0x38
 800a124:	af00      	add	r7, sp, #0
 800a126:	60f8      	str	r0, [r7, #12]
 800a128:	60b9      	str	r1, [r7, #8]
 800a12a:	607a      	str	r2, [r7, #4]
 800a12c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a12e:	2300      	movs	r3, #0
 800a130:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800a136:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d10b      	bne.n	800a154 <xQueueGenericSend+0x34>
	__asm volatile
 800a13c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a140:	f383 8811 	msr	BASEPRI, r3
 800a144:	f3bf 8f6f 	isb	sy
 800a148:	f3bf 8f4f 	dsb	sy
 800a14c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a14e:	bf00      	nop
 800a150:	bf00      	nop
 800a152:	e7fd      	b.n	800a150 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a154:	68bb      	ldr	r3, [r7, #8]
 800a156:	2b00      	cmp	r3, #0
 800a158:	d103      	bne.n	800a162 <xQueueGenericSend+0x42>
 800a15a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a15c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d101      	bne.n	800a166 <xQueueGenericSend+0x46>
 800a162:	2301      	movs	r3, #1
 800a164:	e000      	b.n	800a168 <xQueueGenericSend+0x48>
 800a166:	2300      	movs	r3, #0
 800a168:	2b00      	cmp	r3, #0
 800a16a:	d10b      	bne.n	800a184 <xQueueGenericSend+0x64>
	__asm volatile
 800a16c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a170:	f383 8811 	msr	BASEPRI, r3
 800a174:	f3bf 8f6f 	isb	sy
 800a178:	f3bf 8f4f 	dsb	sy
 800a17c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a17e:	bf00      	nop
 800a180:	bf00      	nop
 800a182:	e7fd      	b.n	800a180 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a184:	683b      	ldr	r3, [r7, #0]
 800a186:	2b02      	cmp	r3, #2
 800a188:	d103      	bne.n	800a192 <xQueueGenericSend+0x72>
 800a18a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a18c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a18e:	2b01      	cmp	r3, #1
 800a190:	d101      	bne.n	800a196 <xQueueGenericSend+0x76>
 800a192:	2301      	movs	r3, #1
 800a194:	e000      	b.n	800a198 <xQueueGenericSend+0x78>
 800a196:	2300      	movs	r3, #0
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d10b      	bne.n	800a1b4 <xQueueGenericSend+0x94>
	__asm volatile
 800a19c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1a0:	f383 8811 	msr	BASEPRI, r3
 800a1a4:	f3bf 8f6f 	isb	sy
 800a1a8:	f3bf 8f4f 	dsb	sy
 800a1ac:	623b      	str	r3, [r7, #32]
}
 800a1ae:	bf00      	nop
 800a1b0:	bf00      	nop
 800a1b2:	e7fd      	b.n	800a1b0 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a1b4:	f001 fbb4 	bl	800b920 <xTaskGetSchedulerState>
 800a1b8:	4603      	mov	r3, r0
 800a1ba:	2b00      	cmp	r3, #0
 800a1bc:	d102      	bne.n	800a1c4 <xQueueGenericSend+0xa4>
 800a1be:	687b      	ldr	r3, [r7, #4]
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d101      	bne.n	800a1c8 <xQueueGenericSend+0xa8>
 800a1c4:	2301      	movs	r3, #1
 800a1c6:	e000      	b.n	800a1ca <xQueueGenericSend+0xaa>
 800a1c8:	2300      	movs	r3, #0
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d10b      	bne.n	800a1e6 <xQueueGenericSend+0xc6>
	__asm volatile
 800a1ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a1d2:	f383 8811 	msr	BASEPRI, r3
 800a1d6:	f3bf 8f6f 	isb	sy
 800a1da:	f3bf 8f4f 	dsb	sy
 800a1de:	61fb      	str	r3, [r7, #28]
}
 800a1e0:	bf00      	nop
 800a1e2:	bf00      	nop
 800a1e4:	e7fd      	b.n	800a1e2 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a1e6:	f002 fa07 	bl	800c5f8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a1ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1ec:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a1ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a1f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a1f2:	429a      	cmp	r2, r3
 800a1f4:	d302      	bcc.n	800a1fc <xQueueGenericSend+0xdc>
 800a1f6:	683b      	ldr	r3, [r7, #0]
 800a1f8:	2b02      	cmp	r3, #2
 800a1fa:	d129      	bne.n	800a250 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a1fc:	683a      	ldr	r2, [r7, #0]
 800a1fe:	68b9      	ldr	r1, [r7, #8]
 800a200:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a202:	f000 fbc7 	bl	800a994 <prvCopyDataToQueue>
 800a206:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a208:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a20a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d010      	beq.n	800a232 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a210:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a212:	3324      	adds	r3, #36	@ 0x24
 800a214:	4618      	mov	r0, r3
 800a216:	f001 f9bd 	bl	800b594 <xTaskRemoveFromEventList>
 800a21a:	4603      	mov	r3, r0
 800a21c:	2b00      	cmp	r3, #0
 800a21e:	d013      	beq.n	800a248 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a220:	4b3f      	ldr	r3, [pc, #252]	@ (800a320 <xQueueGenericSend+0x200>)
 800a222:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a226:	601a      	str	r2, [r3, #0]
 800a228:	f3bf 8f4f 	dsb	sy
 800a22c:	f3bf 8f6f 	isb	sy
 800a230:	e00a      	b.n	800a248 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a232:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a234:	2b00      	cmp	r3, #0
 800a236:	d007      	beq.n	800a248 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a238:	4b39      	ldr	r3, [pc, #228]	@ (800a320 <xQueueGenericSend+0x200>)
 800a23a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a23e:	601a      	str	r2, [r3, #0]
 800a240:	f3bf 8f4f 	dsb	sy
 800a244:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a248:	f002 fa08 	bl	800c65c <vPortExitCritical>
				return pdPASS;
 800a24c:	2301      	movs	r3, #1
 800a24e:	e063      	b.n	800a318 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a250:	687b      	ldr	r3, [r7, #4]
 800a252:	2b00      	cmp	r3, #0
 800a254:	d103      	bne.n	800a25e <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a256:	f002 fa01 	bl	800c65c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a25a:	2300      	movs	r3, #0
 800a25c:	e05c      	b.n	800a318 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a25e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a260:	2b00      	cmp	r3, #0
 800a262:	d106      	bne.n	800a272 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a264:	f107 0314 	add.w	r3, r7, #20
 800a268:	4618      	mov	r0, r3
 800a26a:	f001 f9f7 	bl	800b65c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a26e:	2301      	movs	r3, #1
 800a270:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a272:	f002 f9f3 	bl	800c65c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a276:	f000 ff5f 	bl	800b138 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a27a:	f002 f9bd 	bl	800c5f8 <vPortEnterCritical>
 800a27e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a280:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a284:	b25b      	sxtb	r3, r3
 800a286:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a28a:	d103      	bne.n	800a294 <xQueueGenericSend+0x174>
 800a28c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a28e:	2200      	movs	r2, #0
 800a290:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a294:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a296:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a29a:	b25b      	sxtb	r3, r3
 800a29c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a2a0:	d103      	bne.n	800a2aa <xQueueGenericSend+0x18a>
 800a2a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2a4:	2200      	movs	r2, #0
 800a2a6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a2aa:	f002 f9d7 	bl	800c65c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a2ae:	1d3a      	adds	r2, r7, #4
 800a2b0:	f107 0314 	add.w	r3, r7, #20
 800a2b4:	4611      	mov	r1, r2
 800a2b6:	4618      	mov	r0, r3
 800a2b8:	f001 f9e6 	bl	800b688 <xTaskCheckForTimeOut>
 800a2bc:	4603      	mov	r3, r0
 800a2be:	2b00      	cmp	r3, #0
 800a2c0:	d124      	bne.n	800a30c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a2c2:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a2c4:	f000 fc5e 	bl	800ab84 <prvIsQueueFull>
 800a2c8:	4603      	mov	r3, r0
 800a2ca:	2b00      	cmp	r3, #0
 800a2cc:	d018      	beq.n	800a300 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a2ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2d0:	3310      	adds	r3, #16
 800a2d2:	687a      	ldr	r2, [r7, #4]
 800a2d4:	4611      	mov	r1, r2
 800a2d6:	4618      	mov	r0, r3
 800a2d8:	f001 f90a 	bl	800b4f0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a2dc:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a2de:	f000 fbe9 	bl	800aab4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a2e2:	f000 ff37 	bl	800b154 <xTaskResumeAll>
 800a2e6:	4603      	mov	r3, r0
 800a2e8:	2b00      	cmp	r3, #0
 800a2ea:	f47f af7c 	bne.w	800a1e6 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800a2ee:	4b0c      	ldr	r3, [pc, #48]	@ (800a320 <xQueueGenericSend+0x200>)
 800a2f0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a2f4:	601a      	str	r2, [r3, #0]
 800a2f6:	f3bf 8f4f 	dsb	sy
 800a2fa:	f3bf 8f6f 	isb	sy
 800a2fe:	e772      	b.n	800a1e6 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a300:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a302:	f000 fbd7 	bl	800aab4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a306:	f000 ff25 	bl	800b154 <xTaskResumeAll>
 800a30a:	e76c      	b.n	800a1e6 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a30c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a30e:	f000 fbd1 	bl	800aab4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a312:	f000 ff1f 	bl	800b154 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a316:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a318:	4618      	mov	r0, r3
 800a31a:	3738      	adds	r7, #56	@ 0x38
 800a31c:	46bd      	mov	sp, r7
 800a31e:	bd80      	pop	{r7, pc}
 800a320:	e000ed04 	.word	0xe000ed04

0800a324 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a324:	b580      	push	{r7, lr}
 800a326:	b090      	sub	sp, #64	@ 0x40
 800a328:	af00      	add	r7, sp, #0
 800a32a:	60f8      	str	r0, [r7, #12]
 800a32c:	60b9      	str	r1, [r7, #8]
 800a32e:	607a      	str	r2, [r7, #4]
 800a330:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a332:	68fb      	ldr	r3, [r7, #12]
 800a334:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800a336:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a338:	2b00      	cmp	r3, #0
 800a33a:	d10b      	bne.n	800a354 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800a33c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a340:	f383 8811 	msr	BASEPRI, r3
 800a344:	f3bf 8f6f 	isb	sy
 800a348:	f3bf 8f4f 	dsb	sy
 800a34c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a34e:	bf00      	nop
 800a350:	bf00      	nop
 800a352:	e7fd      	b.n	800a350 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a354:	68bb      	ldr	r3, [r7, #8]
 800a356:	2b00      	cmp	r3, #0
 800a358:	d103      	bne.n	800a362 <xQueueGenericSendFromISR+0x3e>
 800a35a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a35c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a35e:	2b00      	cmp	r3, #0
 800a360:	d101      	bne.n	800a366 <xQueueGenericSendFromISR+0x42>
 800a362:	2301      	movs	r3, #1
 800a364:	e000      	b.n	800a368 <xQueueGenericSendFromISR+0x44>
 800a366:	2300      	movs	r3, #0
 800a368:	2b00      	cmp	r3, #0
 800a36a:	d10b      	bne.n	800a384 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800a36c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a370:	f383 8811 	msr	BASEPRI, r3
 800a374:	f3bf 8f6f 	isb	sy
 800a378:	f3bf 8f4f 	dsb	sy
 800a37c:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a37e:	bf00      	nop
 800a380:	bf00      	nop
 800a382:	e7fd      	b.n	800a380 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a384:	683b      	ldr	r3, [r7, #0]
 800a386:	2b02      	cmp	r3, #2
 800a388:	d103      	bne.n	800a392 <xQueueGenericSendFromISR+0x6e>
 800a38a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a38c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a38e:	2b01      	cmp	r3, #1
 800a390:	d101      	bne.n	800a396 <xQueueGenericSendFromISR+0x72>
 800a392:	2301      	movs	r3, #1
 800a394:	e000      	b.n	800a398 <xQueueGenericSendFromISR+0x74>
 800a396:	2300      	movs	r3, #0
 800a398:	2b00      	cmp	r3, #0
 800a39a:	d10b      	bne.n	800a3b4 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800a39c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3a0:	f383 8811 	msr	BASEPRI, r3
 800a3a4:	f3bf 8f6f 	isb	sy
 800a3a8:	f3bf 8f4f 	dsb	sy
 800a3ac:	623b      	str	r3, [r7, #32]
}
 800a3ae:	bf00      	nop
 800a3b0:	bf00      	nop
 800a3b2:	e7fd      	b.n	800a3b0 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a3b4:	f002 fa00 	bl	800c7b8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a3b8:	f3ef 8211 	mrs	r2, BASEPRI
 800a3bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a3c0:	f383 8811 	msr	BASEPRI, r3
 800a3c4:	f3bf 8f6f 	isb	sy
 800a3c8:	f3bf 8f4f 	dsb	sy
 800a3cc:	61fa      	str	r2, [r7, #28]
 800a3ce:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a3d0:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a3d2:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a3d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3d6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a3d8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a3dc:	429a      	cmp	r2, r3
 800a3de:	d302      	bcc.n	800a3e6 <xQueueGenericSendFromISR+0xc2>
 800a3e0:	683b      	ldr	r3, [r7, #0]
 800a3e2:	2b02      	cmp	r3, #2
 800a3e4:	d12f      	bne.n	800a446 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a3e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3e8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a3ec:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a3f0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a3f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a3f6:	683a      	ldr	r2, [r7, #0]
 800a3f8:	68b9      	ldr	r1, [r7, #8]
 800a3fa:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800a3fc:	f000 faca 	bl	800a994 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a400:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800a404:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a408:	d112      	bne.n	800a430 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a40a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a40c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d016      	beq.n	800a440 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a412:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a414:	3324      	adds	r3, #36	@ 0x24
 800a416:	4618      	mov	r0, r3
 800a418:	f001 f8bc 	bl	800b594 <xTaskRemoveFromEventList>
 800a41c:	4603      	mov	r3, r0
 800a41e:	2b00      	cmp	r3, #0
 800a420:	d00e      	beq.n	800a440 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	2b00      	cmp	r3, #0
 800a426:	d00b      	beq.n	800a440 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a428:	687b      	ldr	r3, [r7, #4]
 800a42a:	2201      	movs	r2, #1
 800a42c:	601a      	str	r2, [r3, #0]
 800a42e:	e007      	b.n	800a440 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a430:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800a434:	3301      	adds	r3, #1
 800a436:	b2db      	uxtb	r3, r3
 800a438:	b25a      	sxtb	r2, r3
 800a43a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a43c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800a440:	2301      	movs	r3, #1
 800a442:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800a444:	e001      	b.n	800a44a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a446:	2300      	movs	r3, #0
 800a448:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a44a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a44c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a44e:	697b      	ldr	r3, [r7, #20]
 800a450:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a454:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a456:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800a458:	4618      	mov	r0, r3
 800a45a:	3740      	adds	r7, #64	@ 0x40
 800a45c:	46bd      	mov	sp, r7
 800a45e:	bd80      	pop	{r7, pc}

0800a460 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a460:	b580      	push	{r7, lr}
 800a462:	b08e      	sub	sp, #56	@ 0x38
 800a464:	af00      	add	r7, sp, #0
 800a466:	6078      	str	r0, [r7, #4]
 800a468:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a46a:	687b      	ldr	r3, [r7, #4]
 800a46c:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800a46e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a470:	2b00      	cmp	r3, #0
 800a472:	d10b      	bne.n	800a48c <xQueueGiveFromISR+0x2c>
	__asm volatile
 800a474:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a478:	f383 8811 	msr	BASEPRI, r3
 800a47c:	f3bf 8f6f 	isb	sy
 800a480:	f3bf 8f4f 	dsb	sy
 800a484:	623b      	str	r3, [r7, #32]
}
 800a486:	bf00      	nop
 800a488:	bf00      	nop
 800a48a:	e7fd      	b.n	800a488 <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a48c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a48e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a490:	2b00      	cmp	r3, #0
 800a492:	d00b      	beq.n	800a4ac <xQueueGiveFromISR+0x4c>
	__asm volatile
 800a494:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a498:	f383 8811 	msr	BASEPRI, r3
 800a49c:	f3bf 8f6f 	isb	sy
 800a4a0:	f3bf 8f4f 	dsb	sy
 800a4a4:	61fb      	str	r3, [r7, #28]
}
 800a4a6:	bf00      	nop
 800a4a8:	bf00      	nop
 800a4aa:	e7fd      	b.n	800a4a8 <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800a4ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	2b00      	cmp	r3, #0
 800a4b2:	d103      	bne.n	800a4bc <xQueueGiveFromISR+0x5c>
 800a4b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a4b6:	689b      	ldr	r3, [r3, #8]
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d101      	bne.n	800a4c0 <xQueueGiveFromISR+0x60>
 800a4bc:	2301      	movs	r3, #1
 800a4be:	e000      	b.n	800a4c2 <xQueueGiveFromISR+0x62>
 800a4c0:	2300      	movs	r3, #0
 800a4c2:	2b00      	cmp	r3, #0
 800a4c4:	d10b      	bne.n	800a4de <xQueueGiveFromISR+0x7e>
	__asm volatile
 800a4c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4ca:	f383 8811 	msr	BASEPRI, r3
 800a4ce:	f3bf 8f6f 	isb	sy
 800a4d2:	f3bf 8f4f 	dsb	sy
 800a4d6:	61bb      	str	r3, [r7, #24]
}
 800a4d8:	bf00      	nop
 800a4da:	bf00      	nop
 800a4dc:	e7fd      	b.n	800a4da <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a4de:	f002 f96b 	bl	800c7b8 <vPortValidateInterruptPriority>
	__asm volatile
 800a4e2:	f3ef 8211 	mrs	r2, BASEPRI
 800a4e6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4ea:	f383 8811 	msr	BASEPRI, r3
 800a4ee:	f3bf 8f6f 	isb	sy
 800a4f2:	f3bf 8f4f 	dsb	sy
 800a4f6:	617a      	str	r2, [r7, #20]
 800a4f8:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800a4fa:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a4fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a4fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a500:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a502:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800a504:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a506:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a508:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a50a:	429a      	cmp	r2, r3
 800a50c:	d22b      	bcs.n	800a566 <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a50e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a510:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a514:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a518:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a51a:	1c5a      	adds	r2, r3, #1
 800a51c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a51e:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a520:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800a524:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a528:	d112      	bne.n	800a550 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a52a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a52c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a52e:	2b00      	cmp	r3, #0
 800a530:	d016      	beq.n	800a560 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a532:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a534:	3324      	adds	r3, #36	@ 0x24
 800a536:	4618      	mov	r0, r3
 800a538:	f001 f82c 	bl	800b594 <xTaskRemoveFromEventList>
 800a53c:	4603      	mov	r3, r0
 800a53e:	2b00      	cmp	r3, #0
 800a540:	d00e      	beq.n	800a560 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a542:	683b      	ldr	r3, [r7, #0]
 800a544:	2b00      	cmp	r3, #0
 800a546:	d00b      	beq.n	800a560 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a548:	683b      	ldr	r3, [r7, #0]
 800a54a:	2201      	movs	r2, #1
 800a54c:	601a      	str	r2, [r3, #0]
 800a54e:	e007      	b.n	800a560 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a550:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a554:	3301      	adds	r3, #1
 800a556:	b2db      	uxtb	r3, r3
 800a558:	b25a      	sxtb	r2, r3
 800a55a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a55c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800a560:	2301      	movs	r3, #1
 800a562:	637b      	str	r3, [r7, #52]	@ 0x34
 800a564:	e001      	b.n	800a56a <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a566:	2300      	movs	r3, #0
 800a568:	637b      	str	r3, [r7, #52]	@ 0x34
 800a56a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a56c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	f383 8811 	msr	BASEPRI, r3
}
 800a574:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a576:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800a578:	4618      	mov	r0, r3
 800a57a:	3738      	adds	r7, #56	@ 0x38
 800a57c:	46bd      	mov	sp, r7
 800a57e:	bd80      	pop	{r7, pc}

0800a580 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a580:	b580      	push	{r7, lr}
 800a582:	b08c      	sub	sp, #48	@ 0x30
 800a584:	af00      	add	r7, sp, #0
 800a586:	60f8      	str	r0, [r7, #12]
 800a588:	60b9      	str	r1, [r7, #8]
 800a58a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a58c:	2300      	movs	r3, #0
 800a58e:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a590:	68fb      	ldr	r3, [r7, #12]
 800a592:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a594:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a596:	2b00      	cmp	r3, #0
 800a598:	d10b      	bne.n	800a5b2 <xQueueReceive+0x32>
	__asm volatile
 800a59a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a59e:	f383 8811 	msr	BASEPRI, r3
 800a5a2:	f3bf 8f6f 	isb	sy
 800a5a6:	f3bf 8f4f 	dsb	sy
 800a5aa:	623b      	str	r3, [r7, #32]
}
 800a5ac:	bf00      	nop
 800a5ae:	bf00      	nop
 800a5b0:	e7fd      	b.n	800a5ae <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a5b2:	68bb      	ldr	r3, [r7, #8]
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d103      	bne.n	800a5c0 <xQueueReceive+0x40>
 800a5b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a5ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d101      	bne.n	800a5c4 <xQueueReceive+0x44>
 800a5c0:	2301      	movs	r3, #1
 800a5c2:	e000      	b.n	800a5c6 <xQueueReceive+0x46>
 800a5c4:	2300      	movs	r3, #0
 800a5c6:	2b00      	cmp	r3, #0
 800a5c8:	d10b      	bne.n	800a5e2 <xQueueReceive+0x62>
	__asm volatile
 800a5ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5ce:	f383 8811 	msr	BASEPRI, r3
 800a5d2:	f3bf 8f6f 	isb	sy
 800a5d6:	f3bf 8f4f 	dsb	sy
 800a5da:	61fb      	str	r3, [r7, #28]
}
 800a5dc:	bf00      	nop
 800a5de:	bf00      	nop
 800a5e0:	e7fd      	b.n	800a5de <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a5e2:	f001 f99d 	bl	800b920 <xTaskGetSchedulerState>
 800a5e6:	4603      	mov	r3, r0
 800a5e8:	2b00      	cmp	r3, #0
 800a5ea:	d102      	bne.n	800a5f2 <xQueueReceive+0x72>
 800a5ec:	687b      	ldr	r3, [r7, #4]
 800a5ee:	2b00      	cmp	r3, #0
 800a5f0:	d101      	bne.n	800a5f6 <xQueueReceive+0x76>
 800a5f2:	2301      	movs	r3, #1
 800a5f4:	e000      	b.n	800a5f8 <xQueueReceive+0x78>
 800a5f6:	2300      	movs	r3, #0
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d10b      	bne.n	800a614 <xQueueReceive+0x94>
	__asm volatile
 800a5fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a600:	f383 8811 	msr	BASEPRI, r3
 800a604:	f3bf 8f6f 	isb	sy
 800a608:	f3bf 8f4f 	dsb	sy
 800a60c:	61bb      	str	r3, [r7, #24]
}
 800a60e:	bf00      	nop
 800a610:	bf00      	nop
 800a612:	e7fd      	b.n	800a610 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a614:	f001 fff0 	bl	800c5f8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a618:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a61a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a61c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a61e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a620:	2b00      	cmp	r3, #0
 800a622:	d01f      	beq.n	800a664 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a624:	68b9      	ldr	r1, [r7, #8]
 800a626:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a628:	f000 fa1e 	bl	800aa68 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a62c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a62e:	1e5a      	subs	r2, r3, #1
 800a630:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a632:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a634:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a636:	691b      	ldr	r3, [r3, #16]
 800a638:	2b00      	cmp	r3, #0
 800a63a:	d00f      	beq.n	800a65c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a63c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a63e:	3310      	adds	r3, #16
 800a640:	4618      	mov	r0, r3
 800a642:	f000 ffa7 	bl	800b594 <xTaskRemoveFromEventList>
 800a646:	4603      	mov	r3, r0
 800a648:	2b00      	cmp	r3, #0
 800a64a:	d007      	beq.n	800a65c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a64c:	4b3c      	ldr	r3, [pc, #240]	@ (800a740 <xQueueReceive+0x1c0>)
 800a64e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a652:	601a      	str	r2, [r3, #0]
 800a654:	f3bf 8f4f 	dsb	sy
 800a658:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a65c:	f001 fffe 	bl	800c65c <vPortExitCritical>
				return pdPASS;
 800a660:	2301      	movs	r3, #1
 800a662:	e069      	b.n	800a738 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	2b00      	cmp	r3, #0
 800a668:	d103      	bne.n	800a672 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a66a:	f001 fff7 	bl	800c65c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a66e:	2300      	movs	r3, #0
 800a670:	e062      	b.n	800a738 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a672:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a674:	2b00      	cmp	r3, #0
 800a676:	d106      	bne.n	800a686 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a678:	f107 0310 	add.w	r3, r7, #16
 800a67c:	4618      	mov	r0, r3
 800a67e:	f000 ffed 	bl	800b65c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a682:	2301      	movs	r3, #1
 800a684:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a686:	f001 ffe9 	bl	800c65c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a68a:	f000 fd55 	bl	800b138 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a68e:	f001 ffb3 	bl	800c5f8 <vPortEnterCritical>
 800a692:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a694:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a698:	b25b      	sxtb	r3, r3
 800a69a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a69e:	d103      	bne.n	800a6a8 <xQueueReceive+0x128>
 800a6a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6a2:	2200      	movs	r2, #0
 800a6a4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a6a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6aa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a6ae:	b25b      	sxtb	r3, r3
 800a6b0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a6b4:	d103      	bne.n	800a6be <xQueueReceive+0x13e>
 800a6b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6b8:	2200      	movs	r2, #0
 800a6ba:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a6be:	f001 ffcd 	bl	800c65c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a6c2:	1d3a      	adds	r2, r7, #4
 800a6c4:	f107 0310 	add.w	r3, r7, #16
 800a6c8:	4611      	mov	r1, r2
 800a6ca:	4618      	mov	r0, r3
 800a6cc:	f000 ffdc 	bl	800b688 <xTaskCheckForTimeOut>
 800a6d0:	4603      	mov	r3, r0
 800a6d2:	2b00      	cmp	r3, #0
 800a6d4:	d123      	bne.n	800a71e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a6d6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a6d8:	f000 fa3e 	bl	800ab58 <prvIsQueueEmpty>
 800a6dc:	4603      	mov	r3, r0
 800a6de:	2b00      	cmp	r3, #0
 800a6e0:	d017      	beq.n	800a712 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a6e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6e4:	3324      	adds	r3, #36	@ 0x24
 800a6e6:	687a      	ldr	r2, [r7, #4]
 800a6e8:	4611      	mov	r1, r2
 800a6ea:	4618      	mov	r0, r3
 800a6ec:	f000 ff00 	bl	800b4f0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a6f0:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a6f2:	f000 f9df 	bl	800aab4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a6f6:	f000 fd2d 	bl	800b154 <xTaskResumeAll>
 800a6fa:	4603      	mov	r3, r0
 800a6fc:	2b00      	cmp	r3, #0
 800a6fe:	d189      	bne.n	800a614 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800a700:	4b0f      	ldr	r3, [pc, #60]	@ (800a740 <xQueueReceive+0x1c0>)
 800a702:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a706:	601a      	str	r2, [r3, #0]
 800a708:	f3bf 8f4f 	dsb	sy
 800a70c:	f3bf 8f6f 	isb	sy
 800a710:	e780      	b.n	800a614 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a712:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a714:	f000 f9ce 	bl	800aab4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a718:	f000 fd1c 	bl	800b154 <xTaskResumeAll>
 800a71c:	e77a      	b.n	800a614 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a71e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a720:	f000 f9c8 	bl	800aab4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a724:	f000 fd16 	bl	800b154 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a728:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a72a:	f000 fa15 	bl	800ab58 <prvIsQueueEmpty>
 800a72e:	4603      	mov	r3, r0
 800a730:	2b00      	cmp	r3, #0
 800a732:	f43f af6f 	beq.w	800a614 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a736:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a738:	4618      	mov	r0, r3
 800a73a:	3730      	adds	r7, #48	@ 0x30
 800a73c:	46bd      	mov	sp, r7
 800a73e:	bd80      	pop	{r7, pc}
 800a740:	e000ed04 	.word	0xe000ed04

0800a744 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800a744:	b580      	push	{r7, lr}
 800a746:	b08e      	sub	sp, #56	@ 0x38
 800a748:	af00      	add	r7, sp, #0
 800a74a:	6078      	str	r0, [r7, #4]
 800a74c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800a74e:	2300      	movs	r3, #0
 800a750:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800a756:	2300      	movs	r3, #0
 800a758:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a75a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a75c:	2b00      	cmp	r3, #0
 800a75e:	d10b      	bne.n	800a778 <xQueueSemaphoreTake+0x34>
	__asm volatile
 800a760:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a764:	f383 8811 	msr	BASEPRI, r3
 800a768:	f3bf 8f6f 	isb	sy
 800a76c:	f3bf 8f4f 	dsb	sy
 800a770:	623b      	str	r3, [r7, #32]
}
 800a772:	bf00      	nop
 800a774:	bf00      	nop
 800a776:	e7fd      	b.n	800a774 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a778:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a77a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d00b      	beq.n	800a798 <xQueueSemaphoreTake+0x54>
	__asm volatile
 800a780:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a784:	f383 8811 	msr	BASEPRI, r3
 800a788:	f3bf 8f6f 	isb	sy
 800a78c:	f3bf 8f4f 	dsb	sy
 800a790:	61fb      	str	r3, [r7, #28]
}
 800a792:	bf00      	nop
 800a794:	bf00      	nop
 800a796:	e7fd      	b.n	800a794 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a798:	f001 f8c2 	bl	800b920 <xTaskGetSchedulerState>
 800a79c:	4603      	mov	r3, r0
 800a79e:	2b00      	cmp	r3, #0
 800a7a0:	d102      	bne.n	800a7a8 <xQueueSemaphoreTake+0x64>
 800a7a2:	683b      	ldr	r3, [r7, #0]
 800a7a4:	2b00      	cmp	r3, #0
 800a7a6:	d101      	bne.n	800a7ac <xQueueSemaphoreTake+0x68>
 800a7a8:	2301      	movs	r3, #1
 800a7aa:	e000      	b.n	800a7ae <xQueueSemaphoreTake+0x6a>
 800a7ac:	2300      	movs	r3, #0
 800a7ae:	2b00      	cmp	r3, #0
 800a7b0:	d10b      	bne.n	800a7ca <xQueueSemaphoreTake+0x86>
	__asm volatile
 800a7b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7b6:	f383 8811 	msr	BASEPRI, r3
 800a7ba:	f3bf 8f6f 	isb	sy
 800a7be:	f3bf 8f4f 	dsb	sy
 800a7c2:	61bb      	str	r3, [r7, #24]
}
 800a7c4:	bf00      	nop
 800a7c6:	bf00      	nop
 800a7c8:	e7fd      	b.n	800a7c6 <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a7ca:	f001 ff15 	bl	800c5f8 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800a7ce:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a7d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a7d2:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800a7d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d024      	beq.n	800a824 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800a7da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7dc:	1e5a      	subs	r2, r3, #1
 800a7de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a7e0:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a7e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a7e4:	681b      	ldr	r3, [r3, #0]
 800a7e6:	2b00      	cmp	r3, #0
 800a7e8:	d104      	bne.n	800a7f4 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800a7ea:	f001 fa13 	bl	800bc14 <pvTaskIncrementMutexHeldCount>
 800a7ee:	4602      	mov	r2, r0
 800a7f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a7f2:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a7f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a7f6:	691b      	ldr	r3, [r3, #16]
 800a7f8:	2b00      	cmp	r3, #0
 800a7fa:	d00f      	beq.n	800a81c <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a7fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a7fe:	3310      	adds	r3, #16
 800a800:	4618      	mov	r0, r3
 800a802:	f000 fec7 	bl	800b594 <xTaskRemoveFromEventList>
 800a806:	4603      	mov	r3, r0
 800a808:	2b00      	cmp	r3, #0
 800a80a:	d007      	beq.n	800a81c <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a80c:	4b54      	ldr	r3, [pc, #336]	@ (800a960 <xQueueSemaphoreTake+0x21c>)
 800a80e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a812:	601a      	str	r2, [r3, #0]
 800a814:	f3bf 8f4f 	dsb	sy
 800a818:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a81c:	f001 ff1e 	bl	800c65c <vPortExitCritical>
				return pdPASS;
 800a820:	2301      	movs	r3, #1
 800a822:	e098      	b.n	800a956 <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a824:	683b      	ldr	r3, [r7, #0]
 800a826:	2b00      	cmp	r3, #0
 800a828:	d112      	bne.n	800a850 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800a82a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d00b      	beq.n	800a848 <xQueueSemaphoreTake+0x104>
	__asm volatile
 800a830:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a834:	f383 8811 	msr	BASEPRI, r3
 800a838:	f3bf 8f6f 	isb	sy
 800a83c:	f3bf 8f4f 	dsb	sy
 800a840:	617b      	str	r3, [r7, #20]
}
 800a842:	bf00      	nop
 800a844:	bf00      	nop
 800a846:	e7fd      	b.n	800a844 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800a848:	f001 ff08 	bl	800c65c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a84c:	2300      	movs	r3, #0
 800a84e:	e082      	b.n	800a956 <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a850:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a852:	2b00      	cmp	r3, #0
 800a854:	d106      	bne.n	800a864 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a856:	f107 030c 	add.w	r3, r7, #12
 800a85a:	4618      	mov	r0, r3
 800a85c:	f000 fefe 	bl	800b65c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a860:	2301      	movs	r3, #1
 800a862:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a864:	f001 fefa 	bl	800c65c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a868:	f000 fc66 	bl	800b138 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a86c:	f001 fec4 	bl	800c5f8 <vPortEnterCritical>
 800a870:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a872:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a876:	b25b      	sxtb	r3, r3
 800a878:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a87c:	d103      	bne.n	800a886 <xQueueSemaphoreTake+0x142>
 800a87e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a880:	2200      	movs	r2, #0
 800a882:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a886:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a888:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a88c:	b25b      	sxtb	r3, r3
 800a88e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a892:	d103      	bne.n	800a89c <xQueueSemaphoreTake+0x158>
 800a894:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a896:	2200      	movs	r2, #0
 800a898:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a89c:	f001 fede 	bl	800c65c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a8a0:	463a      	mov	r2, r7
 800a8a2:	f107 030c 	add.w	r3, r7, #12
 800a8a6:	4611      	mov	r1, r2
 800a8a8:	4618      	mov	r0, r3
 800a8aa:	f000 feed 	bl	800b688 <xTaskCheckForTimeOut>
 800a8ae:	4603      	mov	r3, r0
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d132      	bne.n	800a91a <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a8b4:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a8b6:	f000 f94f 	bl	800ab58 <prvIsQueueEmpty>
 800a8ba:	4603      	mov	r3, r0
 800a8bc:	2b00      	cmp	r3, #0
 800a8be:	d026      	beq.n	800a90e <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a8c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a8c2:	681b      	ldr	r3, [r3, #0]
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d109      	bne.n	800a8dc <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800a8c8:	f001 fe96 	bl	800c5f8 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a8cc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a8ce:	689b      	ldr	r3, [r3, #8]
 800a8d0:	4618      	mov	r0, r3
 800a8d2:	f001 f843 	bl	800b95c <xTaskPriorityInherit>
 800a8d6:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800a8d8:	f001 fec0 	bl	800c65c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a8dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a8de:	3324      	adds	r3, #36	@ 0x24
 800a8e0:	683a      	ldr	r2, [r7, #0]
 800a8e2:	4611      	mov	r1, r2
 800a8e4:	4618      	mov	r0, r3
 800a8e6:	f000 fe03 	bl	800b4f0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a8ea:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a8ec:	f000 f8e2 	bl	800aab4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a8f0:	f000 fc30 	bl	800b154 <xTaskResumeAll>
 800a8f4:	4603      	mov	r3, r0
 800a8f6:	2b00      	cmp	r3, #0
 800a8f8:	f47f af67 	bne.w	800a7ca <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800a8fc:	4b18      	ldr	r3, [pc, #96]	@ (800a960 <xQueueSemaphoreTake+0x21c>)
 800a8fe:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a902:	601a      	str	r2, [r3, #0]
 800a904:	f3bf 8f4f 	dsb	sy
 800a908:	f3bf 8f6f 	isb	sy
 800a90c:	e75d      	b.n	800a7ca <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800a90e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a910:	f000 f8d0 	bl	800aab4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a914:	f000 fc1e 	bl	800b154 <xTaskResumeAll>
 800a918:	e757      	b.n	800a7ca <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800a91a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a91c:	f000 f8ca 	bl	800aab4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a920:	f000 fc18 	bl	800b154 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a924:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a926:	f000 f917 	bl	800ab58 <prvIsQueueEmpty>
 800a92a:	4603      	mov	r3, r0
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	f43f af4c 	beq.w	800a7ca <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800a932:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a934:	2b00      	cmp	r3, #0
 800a936:	d00d      	beq.n	800a954 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800a938:	f001 fe5e 	bl	800c5f8 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800a93c:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a93e:	f000 f811 	bl	800a964 <prvGetDisinheritPriorityAfterTimeout>
 800a942:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800a944:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a946:	689b      	ldr	r3, [r3, #8]
 800a948:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800a94a:	4618      	mov	r0, r3
 800a94c:	f001 f8de 	bl	800bb0c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800a950:	f001 fe84 	bl	800c65c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a954:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a956:	4618      	mov	r0, r3
 800a958:	3738      	adds	r7, #56	@ 0x38
 800a95a:	46bd      	mov	sp, r7
 800a95c:	bd80      	pop	{r7, pc}
 800a95e:	bf00      	nop
 800a960:	e000ed04 	.word	0xe000ed04

0800a964 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800a964:	b480      	push	{r7}
 800a966:	b085      	sub	sp, #20
 800a968:	af00      	add	r7, sp, #0
 800a96a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800a96c:	687b      	ldr	r3, [r7, #4]
 800a96e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a970:	2b00      	cmp	r3, #0
 800a972:	d006      	beq.n	800a982 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a978:	681b      	ldr	r3, [r3, #0]
 800a97a:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800a97e:	60fb      	str	r3, [r7, #12]
 800a980:	e001      	b.n	800a986 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800a982:	2300      	movs	r3, #0
 800a984:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800a986:	68fb      	ldr	r3, [r7, #12]
	}
 800a988:	4618      	mov	r0, r3
 800a98a:	3714      	adds	r7, #20
 800a98c:	46bd      	mov	sp, r7
 800a98e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a992:	4770      	bx	lr

0800a994 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800a994:	b580      	push	{r7, lr}
 800a996:	b086      	sub	sp, #24
 800a998:	af00      	add	r7, sp, #0
 800a99a:	60f8      	str	r0, [r7, #12]
 800a99c:	60b9      	str	r1, [r7, #8]
 800a99e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800a9a0:	2300      	movs	r3, #0
 800a9a2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a9a4:	68fb      	ldr	r3, [r7, #12]
 800a9a6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a9a8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800a9aa:	68fb      	ldr	r3, [r7, #12]
 800a9ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a9ae:	2b00      	cmp	r3, #0
 800a9b0:	d10d      	bne.n	800a9ce <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a9b2:	68fb      	ldr	r3, [r7, #12]
 800a9b4:	681b      	ldr	r3, [r3, #0]
 800a9b6:	2b00      	cmp	r3, #0
 800a9b8:	d14d      	bne.n	800aa56 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800a9ba:	68fb      	ldr	r3, [r7, #12]
 800a9bc:	689b      	ldr	r3, [r3, #8]
 800a9be:	4618      	mov	r0, r3
 800a9c0:	f001 f834 	bl	800ba2c <xTaskPriorityDisinherit>
 800a9c4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800a9c6:	68fb      	ldr	r3, [r7, #12]
 800a9c8:	2200      	movs	r2, #0
 800a9ca:	609a      	str	r2, [r3, #8]
 800a9cc:	e043      	b.n	800aa56 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800a9ce:	687b      	ldr	r3, [r7, #4]
 800a9d0:	2b00      	cmp	r3, #0
 800a9d2:	d119      	bne.n	800aa08 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	6858      	ldr	r0, [r3, #4]
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a9dc:	461a      	mov	r2, r3
 800a9de:	68b9      	ldr	r1, [r7, #8]
 800a9e0:	f003 f885 	bl	800daee <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	685a      	ldr	r2, [r3, #4]
 800a9e8:	68fb      	ldr	r3, [r7, #12]
 800a9ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a9ec:	441a      	add	r2, r3
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	685a      	ldr	r2, [r3, #4]
 800a9f6:	68fb      	ldr	r3, [r7, #12]
 800a9f8:	689b      	ldr	r3, [r3, #8]
 800a9fa:	429a      	cmp	r2, r3
 800a9fc:	d32b      	bcc.n	800aa56 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800a9fe:	68fb      	ldr	r3, [r7, #12]
 800aa00:	681a      	ldr	r2, [r3, #0]
 800aa02:	68fb      	ldr	r3, [r7, #12]
 800aa04:	605a      	str	r2, [r3, #4]
 800aa06:	e026      	b.n	800aa56 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800aa08:	68fb      	ldr	r3, [r7, #12]
 800aa0a:	68d8      	ldr	r0, [r3, #12]
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aa10:	461a      	mov	r2, r3
 800aa12:	68b9      	ldr	r1, [r7, #8]
 800aa14:	f003 f86b 	bl	800daee <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800aa18:	68fb      	ldr	r3, [r7, #12]
 800aa1a:	68da      	ldr	r2, [r3, #12]
 800aa1c:	68fb      	ldr	r3, [r7, #12]
 800aa1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aa20:	425b      	negs	r3, r3
 800aa22:	441a      	add	r2, r3
 800aa24:	68fb      	ldr	r3, [r7, #12]
 800aa26:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800aa28:	68fb      	ldr	r3, [r7, #12]
 800aa2a:	68da      	ldr	r2, [r3, #12]
 800aa2c:	68fb      	ldr	r3, [r7, #12]
 800aa2e:	681b      	ldr	r3, [r3, #0]
 800aa30:	429a      	cmp	r2, r3
 800aa32:	d207      	bcs.n	800aa44 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800aa34:	68fb      	ldr	r3, [r7, #12]
 800aa36:	689a      	ldr	r2, [r3, #8]
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aa3c:	425b      	negs	r3, r3
 800aa3e:	441a      	add	r2, r3
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800aa44:	687b      	ldr	r3, [r7, #4]
 800aa46:	2b02      	cmp	r3, #2
 800aa48:	d105      	bne.n	800aa56 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800aa4a:	693b      	ldr	r3, [r7, #16]
 800aa4c:	2b00      	cmp	r3, #0
 800aa4e:	d002      	beq.n	800aa56 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800aa50:	693b      	ldr	r3, [r7, #16]
 800aa52:	3b01      	subs	r3, #1
 800aa54:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800aa56:	693b      	ldr	r3, [r7, #16]
 800aa58:	1c5a      	adds	r2, r3, #1
 800aa5a:	68fb      	ldr	r3, [r7, #12]
 800aa5c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800aa5e:	697b      	ldr	r3, [r7, #20]
}
 800aa60:	4618      	mov	r0, r3
 800aa62:	3718      	adds	r7, #24
 800aa64:	46bd      	mov	sp, r7
 800aa66:	bd80      	pop	{r7, pc}

0800aa68 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800aa68:	b580      	push	{r7, lr}
 800aa6a:	b082      	sub	sp, #8
 800aa6c:	af00      	add	r7, sp, #0
 800aa6e:	6078      	str	r0, [r7, #4]
 800aa70:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d018      	beq.n	800aaac <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800aa7a:	687b      	ldr	r3, [r7, #4]
 800aa7c:	68da      	ldr	r2, [r3, #12]
 800aa7e:	687b      	ldr	r3, [r7, #4]
 800aa80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aa82:	441a      	add	r2, r3
 800aa84:	687b      	ldr	r3, [r7, #4]
 800aa86:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	68da      	ldr	r2, [r3, #12]
 800aa8c:	687b      	ldr	r3, [r7, #4]
 800aa8e:	689b      	ldr	r3, [r3, #8]
 800aa90:	429a      	cmp	r2, r3
 800aa92:	d303      	bcc.n	800aa9c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800aa94:	687b      	ldr	r3, [r7, #4]
 800aa96:	681a      	ldr	r2, [r3, #0]
 800aa98:	687b      	ldr	r3, [r7, #4]
 800aa9a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	68d9      	ldr	r1, [r3, #12]
 800aaa0:	687b      	ldr	r3, [r7, #4]
 800aaa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aaa4:	461a      	mov	r2, r3
 800aaa6:	6838      	ldr	r0, [r7, #0]
 800aaa8:	f003 f821 	bl	800daee <memcpy>
	}
}
 800aaac:	bf00      	nop
 800aaae:	3708      	adds	r7, #8
 800aab0:	46bd      	mov	sp, r7
 800aab2:	bd80      	pop	{r7, pc}

0800aab4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800aab4:	b580      	push	{r7, lr}
 800aab6:	b084      	sub	sp, #16
 800aab8:	af00      	add	r7, sp, #0
 800aaba:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800aabc:	f001 fd9c 	bl	800c5f8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800aac0:	687b      	ldr	r3, [r7, #4]
 800aac2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800aac6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800aac8:	e011      	b.n	800aaee <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800aaca:	687b      	ldr	r3, [r7, #4]
 800aacc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aace:	2b00      	cmp	r3, #0
 800aad0:	d012      	beq.n	800aaf8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800aad2:	687b      	ldr	r3, [r7, #4]
 800aad4:	3324      	adds	r3, #36	@ 0x24
 800aad6:	4618      	mov	r0, r3
 800aad8:	f000 fd5c 	bl	800b594 <xTaskRemoveFromEventList>
 800aadc:	4603      	mov	r3, r0
 800aade:	2b00      	cmp	r3, #0
 800aae0:	d001      	beq.n	800aae6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800aae2:	f000 fe35 	bl	800b750 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800aae6:	7bfb      	ldrb	r3, [r7, #15]
 800aae8:	3b01      	subs	r3, #1
 800aaea:	b2db      	uxtb	r3, r3
 800aaec:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800aaee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	dce9      	bgt.n	800aaca <prvUnlockQueue+0x16>
 800aaf6:	e000      	b.n	800aafa <prvUnlockQueue+0x46>
					break;
 800aaf8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800aafa:	687b      	ldr	r3, [r7, #4]
 800aafc:	22ff      	movs	r2, #255	@ 0xff
 800aafe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800ab02:	f001 fdab 	bl	800c65c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800ab06:	f001 fd77 	bl	800c5f8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800ab0a:	687b      	ldr	r3, [r7, #4]
 800ab0c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ab10:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ab12:	e011      	b.n	800ab38 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ab14:	687b      	ldr	r3, [r7, #4]
 800ab16:	691b      	ldr	r3, [r3, #16]
 800ab18:	2b00      	cmp	r3, #0
 800ab1a:	d012      	beq.n	800ab42 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ab1c:	687b      	ldr	r3, [r7, #4]
 800ab1e:	3310      	adds	r3, #16
 800ab20:	4618      	mov	r0, r3
 800ab22:	f000 fd37 	bl	800b594 <xTaskRemoveFromEventList>
 800ab26:	4603      	mov	r3, r0
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d001      	beq.n	800ab30 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800ab2c:	f000 fe10 	bl	800b750 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800ab30:	7bbb      	ldrb	r3, [r7, #14]
 800ab32:	3b01      	subs	r3, #1
 800ab34:	b2db      	uxtb	r3, r3
 800ab36:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ab38:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ab3c:	2b00      	cmp	r3, #0
 800ab3e:	dce9      	bgt.n	800ab14 <prvUnlockQueue+0x60>
 800ab40:	e000      	b.n	800ab44 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800ab42:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800ab44:	687b      	ldr	r3, [r7, #4]
 800ab46:	22ff      	movs	r2, #255	@ 0xff
 800ab48:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800ab4c:	f001 fd86 	bl	800c65c <vPortExitCritical>
}
 800ab50:	bf00      	nop
 800ab52:	3710      	adds	r7, #16
 800ab54:	46bd      	mov	sp, r7
 800ab56:	bd80      	pop	{r7, pc}

0800ab58 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800ab58:	b580      	push	{r7, lr}
 800ab5a:	b084      	sub	sp, #16
 800ab5c:	af00      	add	r7, sp, #0
 800ab5e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ab60:	f001 fd4a 	bl	800c5f8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d102      	bne.n	800ab72 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800ab6c:	2301      	movs	r3, #1
 800ab6e:	60fb      	str	r3, [r7, #12]
 800ab70:	e001      	b.n	800ab76 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800ab72:	2300      	movs	r3, #0
 800ab74:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ab76:	f001 fd71 	bl	800c65c <vPortExitCritical>

	return xReturn;
 800ab7a:	68fb      	ldr	r3, [r7, #12]
}
 800ab7c:	4618      	mov	r0, r3
 800ab7e:	3710      	adds	r7, #16
 800ab80:	46bd      	mov	sp, r7
 800ab82:	bd80      	pop	{r7, pc}

0800ab84 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800ab84:	b580      	push	{r7, lr}
 800ab86:	b084      	sub	sp, #16
 800ab88:	af00      	add	r7, sp, #0
 800ab8a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ab8c:	f001 fd34 	bl	800c5f8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800ab90:	687b      	ldr	r3, [r7, #4]
 800ab92:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ab94:	687b      	ldr	r3, [r7, #4]
 800ab96:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ab98:	429a      	cmp	r2, r3
 800ab9a:	d102      	bne.n	800aba2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800ab9c:	2301      	movs	r3, #1
 800ab9e:	60fb      	str	r3, [r7, #12]
 800aba0:	e001      	b.n	800aba6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800aba2:	2300      	movs	r3, #0
 800aba4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800aba6:	f001 fd59 	bl	800c65c <vPortExitCritical>

	return xReturn;
 800abaa:	68fb      	ldr	r3, [r7, #12]
}
 800abac:	4618      	mov	r0, r3
 800abae:	3710      	adds	r7, #16
 800abb0:	46bd      	mov	sp, r7
 800abb2:	bd80      	pop	{r7, pc}

0800abb4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800abb4:	b480      	push	{r7}
 800abb6:	b085      	sub	sp, #20
 800abb8:	af00      	add	r7, sp, #0
 800abba:	6078      	str	r0, [r7, #4]
 800abbc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800abbe:	2300      	movs	r3, #0
 800abc0:	60fb      	str	r3, [r7, #12]
 800abc2:	e014      	b.n	800abee <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800abc4:	4a0f      	ldr	r2, [pc, #60]	@ (800ac04 <vQueueAddToRegistry+0x50>)
 800abc6:	68fb      	ldr	r3, [r7, #12]
 800abc8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800abcc:	2b00      	cmp	r3, #0
 800abce:	d10b      	bne.n	800abe8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800abd0:	490c      	ldr	r1, [pc, #48]	@ (800ac04 <vQueueAddToRegistry+0x50>)
 800abd2:	68fb      	ldr	r3, [r7, #12]
 800abd4:	683a      	ldr	r2, [r7, #0]
 800abd6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800abda:	4a0a      	ldr	r2, [pc, #40]	@ (800ac04 <vQueueAddToRegistry+0x50>)
 800abdc:	68fb      	ldr	r3, [r7, #12]
 800abde:	00db      	lsls	r3, r3, #3
 800abe0:	4413      	add	r3, r2
 800abe2:	687a      	ldr	r2, [r7, #4]
 800abe4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800abe6:	e006      	b.n	800abf6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800abe8:	68fb      	ldr	r3, [r7, #12]
 800abea:	3301      	adds	r3, #1
 800abec:	60fb      	str	r3, [r7, #12]
 800abee:	68fb      	ldr	r3, [r7, #12]
 800abf0:	2b07      	cmp	r3, #7
 800abf2:	d9e7      	bls.n	800abc4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800abf4:	bf00      	nop
 800abf6:	bf00      	nop
 800abf8:	3714      	adds	r7, #20
 800abfa:	46bd      	mov	sp, r7
 800abfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac00:	4770      	bx	lr
 800ac02:	bf00      	nop
 800ac04:	20000ebc 	.word	0x20000ebc

0800ac08 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ac08:	b580      	push	{r7, lr}
 800ac0a:	b086      	sub	sp, #24
 800ac0c:	af00      	add	r7, sp, #0
 800ac0e:	60f8      	str	r0, [r7, #12]
 800ac10:	60b9      	str	r1, [r7, #8]
 800ac12:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800ac18:	f001 fcee 	bl	800c5f8 <vPortEnterCritical>
 800ac1c:	697b      	ldr	r3, [r7, #20]
 800ac1e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ac22:	b25b      	sxtb	r3, r3
 800ac24:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ac28:	d103      	bne.n	800ac32 <vQueueWaitForMessageRestricted+0x2a>
 800ac2a:	697b      	ldr	r3, [r7, #20]
 800ac2c:	2200      	movs	r2, #0
 800ac2e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ac32:	697b      	ldr	r3, [r7, #20]
 800ac34:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ac38:	b25b      	sxtb	r3, r3
 800ac3a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ac3e:	d103      	bne.n	800ac48 <vQueueWaitForMessageRestricted+0x40>
 800ac40:	697b      	ldr	r3, [r7, #20]
 800ac42:	2200      	movs	r2, #0
 800ac44:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ac48:	f001 fd08 	bl	800c65c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800ac4c:	697b      	ldr	r3, [r7, #20]
 800ac4e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d106      	bne.n	800ac62 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800ac54:	697b      	ldr	r3, [r7, #20]
 800ac56:	3324      	adds	r3, #36	@ 0x24
 800ac58:	687a      	ldr	r2, [r7, #4]
 800ac5a:	68b9      	ldr	r1, [r7, #8]
 800ac5c:	4618      	mov	r0, r3
 800ac5e:	f000 fc6d 	bl	800b53c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800ac62:	6978      	ldr	r0, [r7, #20]
 800ac64:	f7ff ff26 	bl	800aab4 <prvUnlockQueue>
	}
 800ac68:	bf00      	nop
 800ac6a:	3718      	adds	r7, #24
 800ac6c:	46bd      	mov	sp, r7
 800ac6e:	bd80      	pop	{r7, pc}

0800ac70 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800ac70:	b580      	push	{r7, lr}
 800ac72:	b08e      	sub	sp, #56	@ 0x38
 800ac74:	af04      	add	r7, sp, #16
 800ac76:	60f8      	str	r0, [r7, #12]
 800ac78:	60b9      	str	r1, [r7, #8]
 800ac7a:	607a      	str	r2, [r7, #4]
 800ac7c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800ac7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	d10b      	bne.n	800ac9c <xTaskCreateStatic+0x2c>
	__asm volatile
 800ac84:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ac88:	f383 8811 	msr	BASEPRI, r3
 800ac8c:	f3bf 8f6f 	isb	sy
 800ac90:	f3bf 8f4f 	dsb	sy
 800ac94:	623b      	str	r3, [r7, #32]
}
 800ac96:	bf00      	nop
 800ac98:	bf00      	nop
 800ac9a:	e7fd      	b.n	800ac98 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800ac9c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ac9e:	2b00      	cmp	r3, #0
 800aca0:	d10b      	bne.n	800acba <xTaskCreateStatic+0x4a>
	__asm volatile
 800aca2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aca6:	f383 8811 	msr	BASEPRI, r3
 800acaa:	f3bf 8f6f 	isb	sy
 800acae:	f3bf 8f4f 	dsb	sy
 800acb2:	61fb      	str	r3, [r7, #28]
}
 800acb4:	bf00      	nop
 800acb6:	bf00      	nop
 800acb8:	e7fd      	b.n	800acb6 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800acba:	23a8      	movs	r3, #168	@ 0xa8
 800acbc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800acbe:	693b      	ldr	r3, [r7, #16]
 800acc0:	2ba8      	cmp	r3, #168	@ 0xa8
 800acc2:	d00b      	beq.n	800acdc <xTaskCreateStatic+0x6c>
	__asm volatile
 800acc4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800acc8:	f383 8811 	msr	BASEPRI, r3
 800accc:	f3bf 8f6f 	isb	sy
 800acd0:	f3bf 8f4f 	dsb	sy
 800acd4:	61bb      	str	r3, [r7, #24]
}
 800acd6:	bf00      	nop
 800acd8:	bf00      	nop
 800acda:	e7fd      	b.n	800acd8 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800acdc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800acde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ace0:	2b00      	cmp	r3, #0
 800ace2:	d01e      	beq.n	800ad22 <xTaskCreateStatic+0xb2>
 800ace4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ace6:	2b00      	cmp	r3, #0
 800ace8:	d01b      	beq.n	800ad22 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800acea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800acec:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800acee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acf0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800acf2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800acf4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800acf6:	2202      	movs	r2, #2
 800acf8:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800acfc:	2300      	movs	r3, #0
 800acfe:	9303      	str	r3, [sp, #12]
 800ad00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ad02:	9302      	str	r3, [sp, #8]
 800ad04:	f107 0314 	add.w	r3, r7, #20
 800ad08:	9301      	str	r3, [sp, #4]
 800ad0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ad0c:	9300      	str	r3, [sp, #0]
 800ad0e:	683b      	ldr	r3, [r7, #0]
 800ad10:	687a      	ldr	r2, [r7, #4]
 800ad12:	68b9      	ldr	r1, [r7, #8]
 800ad14:	68f8      	ldr	r0, [r7, #12]
 800ad16:	f000 f851 	bl	800adbc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ad1a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ad1c:	f000 f8f6 	bl	800af0c <prvAddNewTaskToReadyList>
 800ad20:	e001      	b.n	800ad26 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800ad22:	2300      	movs	r3, #0
 800ad24:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800ad26:	697b      	ldr	r3, [r7, #20]
	}
 800ad28:	4618      	mov	r0, r3
 800ad2a:	3728      	adds	r7, #40	@ 0x28
 800ad2c:	46bd      	mov	sp, r7
 800ad2e:	bd80      	pop	{r7, pc}

0800ad30 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800ad30:	b580      	push	{r7, lr}
 800ad32:	b08c      	sub	sp, #48	@ 0x30
 800ad34:	af04      	add	r7, sp, #16
 800ad36:	60f8      	str	r0, [r7, #12]
 800ad38:	60b9      	str	r1, [r7, #8]
 800ad3a:	603b      	str	r3, [r7, #0]
 800ad3c:	4613      	mov	r3, r2
 800ad3e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800ad40:	88fb      	ldrh	r3, [r7, #6]
 800ad42:	009b      	lsls	r3, r3, #2
 800ad44:	4618      	mov	r0, r3
 800ad46:	f001 fd79 	bl	800c83c <pvPortMalloc>
 800ad4a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800ad4c:	697b      	ldr	r3, [r7, #20]
 800ad4e:	2b00      	cmp	r3, #0
 800ad50:	d00e      	beq.n	800ad70 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800ad52:	20a8      	movs	r0, #168	@ 0xa8
 800ad54:	f001 fd72 	bl	800c83c <pvPortMalloc>
 800ad58:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800ad5a:	69fb      	ldr	r3, [r7, #28]
 800ad5c:	2b00      	cmp	r3, #0
 800ad5e:	d003      	beq.n	800ad68 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800ad60:	69fb      	ldr	r3, [r7, #28]
 800ad62:	697a      	ldr	r2, [r7, #20]
 800ad64:	631a      	str	r2, [r3, #48]	@ 0x30
 800ad66:	e005      	b.n	800ad74 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800ad68:	6978      	ldr	r0, [r7, #20]
 800ad6a:	f001 fe35 	bl	800c9d8 <vPortFree>
 800ad6e:	e001      	b.n	800ad74 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800ad70:	2300      	movs	r3, #0
 800ad72:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800ad74:	69fb      	ldr	r3, [r7, #28]
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d017      	beq.n	800adaa <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800ad7a:	69fb      	ldr	r3, [r7, #28]
 800ad7c:	2200      	movs	r2, #0
 800ad7e:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800ad82:	88fa      	ldrh	r2, [r7, #6]
 800ad84:	2300      	movs	r3, #0
 800ad86:	9303      	str	r3, [sp, #12]
 800ad88:	69fb      	ldr	r3, [r7, #28]
 800ad8a:	9302      	str	r3, [sp, #8]
 800ad8c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800ad8e:	9301      	str	r3, [sp, #4]
 800ad90:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ad92:	9300      	str	r3, [sp, #0]
 800ad94:	683b      	ldr	r3, [r7, #0]
 800ad96:	68b9      	ldr	r1, [r7, #8]
 800ad98:	68f8      	ldr	r0, [r7, #12]
 800ad9a:	f000 f80f 	bl	800adbc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ad9e:	69f8      	ldr	r0, [r7, #28]
 800ada0:	f000 f8b4 	bl	800af0c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800ada4:	2301      	movs	r3, #1
 800ada6:	61bb      	str	r3, [r7, #24]
 800ada8:	e002      	b.n	800adb0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800adaa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800adae:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800adb0:	69bb      	ldr	r3, [r7, #24]
	}
 800adb2:	4618      	mov	r0, r3
 800adb4:	3720      	adds	r7, #32
 800adb6:	46bd      	mov	sp, r7
 800adb8:	bd80      	pop	{r7, pc}
	...

0800adbc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800adbc:	b580      	push	{r7, lr}
 800adbe:	b088      	sub	sp, #32
 800adc0:	af00      	add	r7, sp, #0
 800adc2:	60f8      	str	r0, [r7, #12]
 800adc4:	60b9      	str	r1, [r7, #8]
 800adc6:	607a      	str	r2, [r7, #4]
 800adc8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800adca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800adcc:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800adce:	687b      	ldr	r3, [r7, #4]
 800add0:	009b      	lsls	r3, r3, #2
 800add2:	461a      	mov	r2, r3
 800add4:	21a5      	movs	r1, #165	@ 0xa5
 800add6:	f002 fdb5 	bl	800d944 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800adda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800addc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800adde:	687b      	ldr	r3, [r7, #4]
 800ade0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800ade4:	3b01      	subs	r3, #1
 800ade6:	009b      	lsls	r3, r3, #2
 800ade8:	4413      	add	r3, r2
 800adea:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800adec:	69bb      	ldr	r3, [r7, #24]
 800adee:	f023 0307 	bic.w	r3, r3, #7
 800adf2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800adf4:	69bb      	ldr	r3, [r7, #24]
 800adf6:	f003 0307 	and.w	r3, r3, #7
 800adfa:	2b00      	cmp	r3, #0
 800adfc:	d00b      	beq.n	800ae16 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800adfe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae02:	f383 8811 	msr	BASEPRI, r3
 800ae06:	f3bf 8f6f 	isb	sy
 800ae0a:	f3bf 8f4f 	dsb	sy
 800ae0e:	617b      	str	r3, [r7, #20]
}
 800ae10:	bf00      	nop
 800ae12:	bf00      	nop
 800ae14:	e7fd      	b.n	800ae12 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800ae16:	68bb      	ldr	r3, [r7, #8]
 800ae18:	2b00      	cmp	r3, #0
 800ae1a:	d01f      	beq.n	800ae5c <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ae1c:	2300      	movs	r3, #0
 800ae1e:	61fb      	str	r3, [r7, #28]
 800ae20:	e012      	b.n	800ae48 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ae22:	68ba      	ldr	r2, [r7, #8]
 800ae24:	69fb      	ldr	r3, [r7, #28]
 800ae26:	4413      	add	r3, r2
 800ae28:	7819      	ldrb	r1, [r3, #0]
 800ae2a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ae2c:	69fb      	ldr	r3, [r7, #28]
 800ae2e:	4413      	add	r3, r2
 800ae30:	3334      	adds	r3, #52	@ 0x34
 800ae32:	460a      	mov	r2, r1
 800ae34:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800ae36:	68ba      	ldr	r2, [r7, #8]
 800ae38:	69fb      	ldr	r3, [r7, #28]
 800ae3a:	4413      	add	r3, r2
 800ae3c:	781b      	ldrb	r3, [r3, #0]
 800ae3e:	2b00      	cmp	r3, #0
 800ae40:	d006      	beq.n	800ae50 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ae42:	69fb      	ldr	r3, [r7, #28]
 800ae44:	3301      	adds	r3, #1
 800ae46:	61fb      	str	r3, [r7, #28]
 800ae48:	69fb      	ldr	r3, [r7, #28]
 800ae4a:	2b0f      	cmp	r3, #15
 800ae4c:	d9e9      	bls.n	800ae22 <prvInitialiseNewTask+0x66>
 800ae4e:	e000      	b.n	800ae52 <prvInitialiseNewTask+0x96>
			{
				break;
 800ae50:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ae52:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae54:	2200      	movs	r2, #0
 800ae56:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800ae5a:	e003      	b.n	800ae64 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800ae5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae5e:	2200      	movs	r2, #0
 800ae60:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ae64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae66:	2b37      	cmp	r3, #55	@ 0x37
 800ae68:	d901      	bls.n	800ae6e <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800ae6a:	2337      	movs	r3, #55	@ 0x37
 800ae6c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800ae6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae70:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ae72:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800ae74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae76:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800ae78:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800ae7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae7c:	2200      	movs	r2, #0
 800ae7e:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800ae80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae82:	3304      	adds	r3, #4
 800ae84:	4618      	mov	r0, r3
 800ae86:	f7fe ff25 	bl	8009cd4 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800ae8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae8c:	3318      	adds	r3, #24
 800ae8e:	4618      	mov	r0, r3
 800ae90:	f7fe ff20 	bl	8009cd4 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800ae94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae96:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800ae98:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ae9a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800ae9c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800aea0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aea2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800aea4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aea6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800aea8:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800aeaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aeac:	2200      	movs	r2, #0
 800aeae:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800aeb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aeb4:	2200      	movs	r2, #0
 800aeb6:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800aeba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aebc:	3354      	adds	r3, #84	@ 0x54
 800aebe:	224c      	movs	r2, #76	@ 0x4c
 800aec0:	2100      	movs	r1, #0
 800aec2:	4618      	mov	r0, r3
 800aec4:	f002 fd3e 	bl	800d944 <memset>
 800aec8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aeca:	4a0d      	ldr	r2, [pc, #52]	@ (800af00 <prvInitialiseNewTask+0x144>)
 800aecc:	659a      	str	r2, [r3, #88]	@ 0x58
 800aece:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aed0:	4a0c      	ldr	r2, [pc, #48]	@ (800af04 <prvInitialiseNewTask+0x148>)
 800aed2:	65da      	str	r2, [r3, #92]	@ 0x5c
 800aed4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aed6:	4a0c      	ldr	r2, [pc, #48]	@ (800af08 <prvInitialiseNewTask+0x14c>)
 800aed8:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800aeda:	683a      	ldr	r2, [r7, #0]
 800aedc:	68f9      	ldr	r1, [r7, #12]
 800aede:	69b8      	ldr	r0, [r7, #24]
 800aee0:	f001 fa5a 	bl	800c398 <pxPortInitialiseStack>
 800aee4:	4602      	mov	r2, r0
 800aee6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aee8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800aeea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d002      	beq.n	800aef6 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800aef0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aef2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800aef4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800aef6:	bf00      	nop
 800aef8:	3720      	adds	r7, #32
 800aefa:	46bd      	mov	sp, r7
 800aefc:	bd80      	pop	{r7, pc}
 800aefe:	bf00      	nop
 800af00:	20005150 	.word	0x20005150
 800af04:	200051b8 	.word	0x200051b8
 800af08:	20005220 	.word	0x20005220

0800af0c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800af0c:	b580      	push	{r7, lr}
 800af0e:	b082      	sub	sp, #8
 800af10:	af00      	add	r7, sp, #0
 800af12:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800af14:	f001 fb70 	bl	800c5f8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800af18:	4b2d      	ldr	r3, [pc, #180]	@ (800afd0 <prvAddNewTaskToReadyList+0xc4>)
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	3301      	adds	r3, #1
 800af1e:	4a2c      	ldr	r2, [pc, #176]	@ (800afd0 <prvAddNewTaskToReadyList+0xc4>)
 800af20:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800af22:	4b2c      	ldr	r3, [pc, #176]	@ (800afd4 <prvAddNewTaskToReadyList+0xc8>)
 800af24:	681b      	ldr	r3, [r3, #0]
 800af26:	2b00      	cmp	r3, #0
 800af28:	d109      	bne.n	800af3e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800af2a:	4a2a      	ldr	r2, [pc, #168]	@ (800afd4 <prvAddNewTaskToReadyList+0xc8>)
 800af2c:	687b      	ldr	r3, [r7, #4]
 800af2e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800af30:	4b27      	ldr	r3, [pc, #156]	@ (800afd0 <prvAddNewTaskToReadyList+0xc4>)
 800af32:	681b      	ldr	r3, [r3, #0]
 800af34:	2b01      	cmp	r3, #1
 800af36:	d110      	bne.n	800af5a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800af38:	f000 fc2e 	bl	800b798 <prvInitialiseTaskLists>
 800af3c:	e00d      	b.n	800af5a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800af3e:	4b26      	ldr	r3, [pc, #152]	@ (800afd8 <prvAddNewTaskToReadyList+0xcc>)
 800af40:	681b      	ldr	r3, [r3, #0]
 800af42:	2b00      	cmp	r3, #0
 800af44:	d109      	bne.n	800af5a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800af46:	4b23      	ldr	r3, [pc, #140]	@ (800afd4 <prvAddNewTaskToReadyList+0xc8>)
 800af48:	681b      	ldr	r3, [r3, #0]
 800af4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800af4c:	687b      	ldr	r3, [r7, #4]
 800af4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af50:	429a      	cmp	r2, r3
 800af52:	d802      	bhi.n	800af5a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800af54:	4a1f      	ldr	r2, [pc, #124]	@ (800afd4 <prvAddNewTaskToReadyList+0xc8>)
 800af56:	687b      	ldr	r3, [r7, #4]
 800af58:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800af5a:	4b20      	ldr	r3, [pc, #128]	@ (800afdc <prvAddNewTaskToReadyList+0xd0>)
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	3301      	adds	r3, #1
 800af60:	4a1e      	ldr	r2, [pc, #120]	@ (800afdc <prvAddNewTaskToReadyList+0xd0>)
 800af62:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800af64:	4b1d      	ldr	r3, [pc, #116]	@ (800afdc <prvAddNewTaskToReadyList+0xd0>)
 800af66:	681a      	ldr	r2, [r3, #0]
 800af68:	687b      	ldr	r3, [r7, #4]
 800af6a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800af6c:	687b      	ldr	r3, [r7, #4]
 800af6e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800af70:	4b1b      	ldr	r3, [pc, #108]	@ (800afe0 <prvAddNewTaskToReadyList+0xd4>)
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	429a      	cmp	r2, r3
 800af76:	d903      	bls.n	800af80 <prvAddNewTaskToReadyList+0x74>
 800af78:	687b      	ldr	r3, [r7, #4]
 800af7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800af7c:	4a18      	ldr	r2, [pc, #96]	@ (800afe0 <prvAddNewTaskToReadyList+0xd4>)
 800af7e:	6013      	str	r3, [r2, #0]
 800af80:	687b      	ldr	r3, [r7, #4]
 800af82:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800af84:	4613      	mov	r3, r2
 800af86:	009b      	lsls	r3, r3, #2
 800af88:	4413      	add	r3, r2
 800af8a:	009b      	lsls	r3, r3, #2
 800af8c:	4a15      	ldr	r2, [pc, #84]	@ (800afe4 <prvAddNewTaskToReadyList+0xd8>)
 800af8e:	441a      	add	r2, r3
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	3304      	adds	r3, #4
 800af94:	4619      	mov	r1, r3
 800af96:	4610      	mov	r0, r2
 800af98:	f7fe fea9 	bl	8009cee <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800af9c:	f001 fb5e 	bl	800c65c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800afa0:	4b0d      	ldr	r3, [pc, #52]	@ (800afd8 <prvAddNewTaskToReadyList+0xcc>)
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	2b00      	cmp	r3, #0
 800afa6:	d00e      	beq.n	800afc6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800afa8:	4b0a      	ldr	r3, [pc, #40]	@ (800afd4 <prvAddNewTaskToReadyList+0xc8>)
 800afaa:	681b      	ldr	r3, [r3, #0]
 800afac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800afae:	687b      	ldr	r3, [r7, #4]
 800afb0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800afb2:	429a      	cmp	r2, r3
 800afb4:	d207      	bcs.n	800afc6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800afb6:	4b0c      	ldr	r3, [pc, #48]	@ (800afe8 <prvAddNewTaskToReadyList+0xdc>)
 800afb8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800afbc:	601a      	str	r2, [r3, #0]
 800afbe:	f3bf 8f4f 	dsb	sy
 800afc2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800afc6:	bf00      	nop
 800afc8:	3708      	adds	r7, #8
 800afca:	46bd      	mov	sp, r7
 800afcc:	bd80      	pop	{r7, pc}
 800afce:	bf00      	nop
 800afd0:	200013d0 	.word	0x200013d0
 800afd4:	20000efc 	.word	0x20000efc
 800afd8:	200013dc 	.word	0x200013dc
 800afdc:	200013ec 	.word	0x200013ec
 800afe0:	200013d8 	.word	0x200013d8
 800afe4:	20000f00 	.word	0x20000f00
 800afe8:	e000ed04 	.word	0xe000ed04

0800afec <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800afec:	b580      	push	{r7, lr}
 800afee:	b084      	sub	sp, #16
 800aff0:	af00      	add	r7, sp, #0
 800aff2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800aff4:	2300      	movs	r3, #0
 800aff6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800aff8:	687b      	ldr	r3, [r7, #4]
 800affa:	2b00      	cmp	r3, #0
 800affc:	d018      	beq.n	800b030 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800affe:	4b14      	ldr	r3, [pc, #80]	@ (800b050 <vTaskDelay+0x64>)
 800b000:	681b      	ldr	r3, [r3, #0]
 800b002:	2b00      	cmp	r3, #0
 800b004:	d00b      	beq.n	800b01e <vTaskDelay+0x32>
	__asm volatile
 800b006:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b00a:	f383 8811 	msr	BASEPRI, r3
 800b00e:	f3bf 8f6f 	isb	sy
 800b012:	f3bf 8f4f 	dsb	sy
 800b016:	60bb      	str	r3, [r7, #8]
}
 800b018:	bf00      	nop
 800b01a:	bf00      	nop
 800b01c:	e7fd      	b.n	800b01a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b01e:	f000 f88b 	bl	800b138 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b022:	2100      	movs	r1, #0
 800b024:	6878      	ldr	r0, [r7, #4]
 800b026:	f000 fe09 	bl	800bc3c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b02a:	f000 f893 	bl	800b154 <xTaskResumeAll>
 800b02e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b030:	68fb      	ldr	r3, [r7, #12]
 800b032:	2b00      	cmp	r3, #0
 800b034:	d107      	bne.n	800b046 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800b036:	4b07      	ldr	r3, [pc, #28]	@ (800b054 <vTaskDelay+0x68>)
 800b038:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b03c:	601a      	str	r2, [r3, #0]
 800b03e:	f3bf 8f4f 	dsb	sy
 800b042:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b046:	bf00      	nop
 800b048:	3710      	adds	r7, #16
 800b04a:	46bd      	mov	sp, r7
 800b04c:	bd80      	pop	{r7, pc}
 800b04e:	bf00      	nop
 800b050:	200013f8 	.word	0x200013f8
 800b054:	e000ed04 	.word	0xe000ed04

0800b058 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b058:	b580      	push	{r7, lr}
 800b05a:	b08a      	sub	sp, #40	@ 0x28
 800b05c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b05e:	2300      	movs	r3, #0
 800b060:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b062:	2300      	movs	r3, #0
 800b064:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b066:	463a      	mov	r2, r7
 800b068:	1d39      	adds	r1, r7, #4
 800b06a:	f107 0308 	add.w	r3, r7, #8
 800b06e:	4618      	mov	r0, r3
 800b070:	f7fe fddc 	bl	8009c2c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b074:	6839      	ldr	r1, [r7, #0]
 800b076:	687b      	ldr	r3, [r7, #4]
 800b078:	68ba      	ldr	r2, [r7, #8]
 800b07a:	9202      	str	r2, [sp, #8]
 800b07c:	9301      	str	r3, [sp, #4]
 800b07e:	2300      	movs	r3, #0
 800b080:	9300      	str	r3, [sp, #0]
 800b082:	2300      	movs	r3, #0
 800b084:	460a      	mov	r2, r1
 800b086:	4924      	ldr	r1, [pc, #144]	@ (800b118 <vTaskStartScheduler+0xc0>)
 800b088:	4824      	ldr	r0, [pc, #144]	@ (800b11c <vTaskStartScheduler+0xc4>)
 800b08a:	f7ff fdf1 	bl	800ac70 <xTaskCreateStatic>
 800b08e:	4603      	mov	r3, r0
 800b090:	4a23      	ldr	r2, [pc, #140]	@ (800b120 <vTaskStartScheduler+0xc8>)
 800b092:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b094:	4b22      	ldr	r3, [pc, #136]	@ (800b120 <vTaskStartScheduler+0xc8>)
 800b096:	681b      	ldr	r3, [r3, #0]
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d002      	beq.n	800b0a2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b09c:	2301      	movs	r3, #1
 800b09e:	617b      	str	r3, [r7, #20]
 800b0a0:	e001      	b.n	800b0a6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b0a2:	2300      	movs	r3, #0
 800b0a4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b0a6:	697b      	ldr	r3, [r7, #20]
 800b0a8:	2b01      	cmp	r3, #1
 800b0aa:	d102      	bne.n	800b0b2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b0ac:	f000 fe1a 	bl	800bce4 <xTimerCreateTimerTask>
 800b0b0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b0b2:	697b      	ldr	r3, [r7, #20]
 800b0b4:	2b01      	cmp	r3, #1
 800b0b6:	d11b      	bne.n	800b0f0 <vTaskStartScheduler+0x98>
	__asm volatile
 800b0b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b0bc:	f383 8811 	msr	BASEPRI, r3
 800b0c0:	f3bf 8f6f 	isb	sy
 800b0c4:	f3bf 8f4f 	dsb	sy
 800b0c8:	613b      	str	r3, [r7, #16]
}
 800b0ca:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b0cc:	4b15      	ldr	r3, [pc, #84]	@ (800b124 <vTaskStartScheduler+0xcc>)
 800b0ce:	681b      	ldr	r3, [r3, #0]
 800b0d0:	3354      	adds	r3, #84	@ 0x54
 800b0d2:	4a15      	ldr	r2, [pc, #84]	@ (800b128 <vTaskStartScheduler+0xd0>)
 800b0d4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b0d6:	4b15      	ldr	r3, [pc, #84]	@ (800b12c <vTaskStartScheduler+0xd4>)
 800b0d8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b0dc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b0de:	4b14      	ldr	r3, [pc, #80]	@ (800b130 <vTaskStartScheduler+0xd8>)
 800b0e0:	2201      	movs	r2, #1
 800b0e2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b0e4:	4b13      	ldr	r3, [pc, #76]	@ (800b134 <vTaskStartScheduler+0xdc>)
 800b0e6:	2200      	movs	r2, #0
 800b0e8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b0ea:	f001 f9e1 	bl	800c4b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b0ee:	e00f      	b.n	800b110 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b0f0:	697b      	ldr	r3, [r7, #20]
 800b0f2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b0f6:	d10b      	bne.n	800b110 <vTaskStartScheduler+0xb8>
	__asm volatile
 800b0f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b0fc:	f383 8811 	msr	BASEPRI, r3
 800b100:	f3bf 8f6f 	isb	sy
 800b104:	f3bf 8f4f 	dsb	sy
 800b108:	60fb      	str	r3, [r7, #12]
}
 800b10a:	bf00      	nop
 800b10c:	bf00      	nop
 800b10e:	e7fd      	b.n	800b10c <vTaskStartScheduler+0xb4>
}
 800b110:	bf00      	nop
 800b112:	3718      	adds	r7, #24
 800b114:	46bd      	mov	sp, r7
 800b116:	bd80      	pop	{r7, pc}
 800b118:	0801036c 	.word	0x0801036c
 800b11c:	0800b769 	.word	0x0800b769
 800b120:	200013f4 	.word	0x200013f4
 800b124:	20000efc 	.word	0x20000efc
 800b128:	200000b8 	.word	0x200000b8
 800b12c:	200013f0 	.word	0x200013f0
 800b130:	200013dc 	.word	0x200013dc
 800b134:	200013d4 	.word	0x200013d4

0800b138 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b138:	b480      	push	{r7}
 800b13a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b13c:	4b04      	ldr	r3, [pc, #16]	@ (800b150 <vTaskSuspendAll+0x18>)
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	3301      	adds	r3, #1
 800b142:	4a03      	ldr	r2, [pc, #12]	@ (800b150 <vTaskSuspendAll+0x18>)
 800b144:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b146:	bf00      	nop
 800b148:	46bd      	mov	sp, r7
 800b14a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b14e:	4770      	bx	lr
 800b150:	200013f8 	.word	0x200013f8

0800b154 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b154:	b580      	push	{r7, lr}
 800b156:	b084      	sub	sp, #16
 800b158:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b15a:	2300      	movs	r3, #0
 800b15c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b15e:	2300      	movs	r3, #0
 800b160:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b162:	4b42      	ldr	r3, [pc, #264]	@ (800b26c <xTaskResumeAll+0x118>)
 800b164:	681b      	ldr	r3, [r3, #0]
 800b166:	2b00      	cmp	r3, #0
 800b168:	d10b      	bne.n	800b182 <xTaskResumeAll+0x2e>
	__asm volatile
 800b16a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b16e:	f383 8811 	msr	BASEPRI, r3
 800b172:	f3bf 8f6f 	isb	sy
 800b176:	f3bf 8f4f 	dsb	sy
 800b17a:	603b      	str	r3, [r7, #0]
}
 800b17c:	bf00      	nop
 800b17e:	bf00      	nop
 800b180:	e7fd      	b.n	800b17e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b182:	f001 fa39 	bl	800c5f8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b186:	4b39      	ldr	r3, [pc, #228]	@ (800b26c <xTaskResumeAll+0x118>)
 800b188:	681b      	ldr	r3, [r3, #0]
 800b18a:	3b01      	subs	r3, #1
 800b18c:	4a37      	ldr	r2, [pc, #220]	@ (800b26c <xTaskResumeAll+0x118>)
 800b18e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b190:	4b36      	ldr	r3, [pc, #216]	@ (800b26c <xTaskResumeAll+0x118>)
 800b192:	681b      	ldr	r3, [r3, #0]
 800b194:	2b00      	cmp	r3, #0
 800b196:	d162      	bne.n	800b25e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b198:	4b35      	ldr	r3, [pc, #212]	@ (800b270 <xTaskResumeAll+0x11c>)
 800b19a:	681b      	ldr	r3, [r3, #0]
 800b19c:	2b00      	cmp	r3, #0
 800b19e:	d05e      	beq.n	800b25e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b1a0:	e02f      	b.n	800b202 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b1a2:	4b34      	ldr	r3, [pc, #208]	@ (800b274 <xTaskResumeAll+0x120>)
 800b1a4:	68db      	ldr	r3, [r3, #12]
 800b1a6:	68db      	ldr	r3, [r3, #12]
 800b1a8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b1aa:	68fb      	ldr	r3, [r7, #12]
 800b1ac:	3318      	adds	r3, #24
 800b1ae:	4618      	mov	r0, r3
 800b1b0:	f7fe fdfa 	bl	8009da8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b1b4:	68fb      	ldr	r3, [r7, #12]
 800b1b6:	3304      	adds	r3, #4
 800b1b8:	4618      	mov	r0, r3
 800b1ba:	f7fe fdf5 	bl	8009da8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b1be:	68fb      	ldr	r3, [r7, #12]
 800b1c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b1c2:	4b2d      	ldr	r3, [pc, #180]	@ (800b278 <xTaskResumeAll+0x124>)
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	429a      	cmp	r2, r3
 800b1c8:	d903      	bls.n	800b1d2 <xTaskResumeAll+0x7e>
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b1ce:	4a2a      	ldr	r2, [pc, #168]	@ (800b278 <xTaskResumeAll+0x124>)
 800b1d0:	6013      	str	r3, [r2, #0]
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b1d6:	4613      	mov	r3, r2
 800b1d8:	009b      	lsls	r3, r3, #2
 800b1da:	4413      	add	r3, r2
 800b1dc:	009b      	lsls	r3, r3, #2
 800b1de:	4a27      	ldr	r2, [pc, #156]	@ (800b27c <xTaskResumeAll+0x128>)
 800b1e0:	441a      	add	r2, r3
 800b1e2:	68fb      	ldr	r3, [r7, #12]
 800b1e4:	3304      	adds	r3, #4
 800b1e6:	4619      	mov	r1, r3
 800b1e8:	4610      	mov	r0, r2
 800b1ea:	f7fe fd80 	bl	8009cee <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b1ee:	68fb      	ldr	r3, [r7, #12]
 800b1f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b1f2:	4b23      	ldr	r3, [pc, #140]	@ (800b280 <xTaskResumeAll+0x12c>)
 800b1f4:	681b      	ldr	r3, [r3, #0]
 800b1f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b1f8:	429a      	cmp	r2, r3
 800b1fa:	d302      	bcc.n	800b202 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800b1fc:	4b21      	ldr	r3, [pc, #132]	@ (800b284 <xTaskResumeAll+0x130>)
 800b1fe:	2201      	movs	r2, #1
 800b200:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b202:	4b1c      	ldr	r3, [pc, #112]	@ (800b274 <xTaskResumeAll+0x120>)
 800b204:	681b      	ldr	r3, [r3, #0]
 800b206:	2b00      	cmp	r3, #0
 800b208:	d1cb      	bne.n	800b1a2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d001      	beq.n	800b214 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b210:	f000 fb66 	bl	800b8e0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b214:	4b1c      	ldr	r3, [pc, #112]	@ (800b288 <xTaskResumeAll+0x134>)
 800b216:	681b      	ldr	r3, [r3, #0]
 800b218:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b21a:	687b      	ldr	r3, [r7, #4]
 800b21c:	2b00      	cmp	r3, #0
 800b21e:	d010      	beq.n	800b242 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b220:	f000 f846 	bl	800b2b0 <xTaskIncrementTick>
 800b224:	4603      	mov	r3, r0
 800b226:	2b00      	cmp	r3, #0
 800b228:	d002      	beq.n	800b230 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800b22a:	4b16      	ldr	r3, [pc, #88]	@ (800b284 <xTaskResumeAll+0x130>)
 800b22c:	2201      	movs	r2, #1
 800b22e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b230:	687b      	ldr	r3, [r7, #4]
 800b232:	3b01      	subs	r3, #1
 800b234:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	2b00      	cmp	r3, #0
 800b23a:	d1f1      	bne.n	800b220 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800b23c:	4b12      	ldr	r3, [pc, #72]	@ (800b288 <xTaskResumeAll+0x134>)
 800b23e:	2200      	movs	r2, #0
 800b240:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b242:	4b10      	ldr	r3, [pc, #64]	@ (800b284 <xTaskResumeAll+0x130>)
 800b244:	681b      	ldr	r3, [r3, #0]
 800b246:	2b00      	cmp	r3, #0
 800b248:	d009      	beq.n	800b25e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b24a:	2301      	movs	r3, #1
 800b24c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b24e:	4b0f      	ldr	r3, [pc, #60]	@ (800b28c <xTaskResumeAll+0x138>)
 800b250:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b254:	601a      	str	r2, [r3, #0]
 800b256:	f3bf 8f4f 	dsb	sy
 800b25a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b25e:	f001 f9fd 	bl	800c65c <vPortExitCritical>

	return xAlreadyYielded;
 800b262:	68bb      	ldr	r3, [r7, #8]
}
 800b264:	4618      	mov	r0, r3
 800b266:	3710      	adds	r7, #16
 800b268:	46bd      	mov	sp, r7
 800b26a:	bd80      	pop	{r7, pc}
 800b26c:	200013f8 	.word	0x200013f8
 800b270:	200013d0 	.word	0x200013d0
 800b274:	20001390 	.word	0x20001390
 800b278:	200013d8 	.word	0x200013d8
 800b27c:	20000f00 	.word	0x20000f00
 800b280:	20000efc 	.word	0x20000efc
 800b284:	200013e4 	.word	0x200013e4
 800b288:	200013e0 	.word	0x200013e0
 800b28c:	e000ed04 	.word	0xe000ed04

0800b290 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b290:	b480      	push	{r7}
 800b292:	b083      	sub	sp, #12
 800b294:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b296:	4b05      	ldr	r3, [pc, #20]	@ (800b2ac <xTaskGetTickCount+0x1c>)
 800b298:	681b      	ldr	r3, [r3, #0]
 800b29a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b29c:	687b      	ldr	r3, [r7, #4]
}
 800b29e:	4618      	mov	r0, r3
 800b2a0:	370c      	adds	r7, #12
 800b2a2:	46bd      	mov	sp, r7
 800b2a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b2a8:	4770      	bx	lr
 800b2aa:	bf00      	nop
 800b2ac:	200013d4 	.word	0x200013d4

0800b2b0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b2b0:	b580      	push	{r7, lr}
 800b2b2:	b086      	sub	sp, #24
 800b2b4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b2b6:	2300      	movs	r3, #0
 800b2b8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b2ba:	4b4f      	ldr	r3, [pc, #316]	@ (800b3f8 <xTaskIncrementTick+0x148>)
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	2b00      	cmp	r3, #0
 800b2c0:	f040 8090 	bne.w	800b3e4 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b2c4:	4b4d      	ldr	r3, [pc, #308]	@ (800b3fc <xTaskIncrementTick+0x14c>)
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	3301      	adds	r3, #1
 800b2ca:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b2cc:	4a4b      	ldr	r2, [pc, #300]	@ (800b3fc <xTaskIncrementTick+0x14c>)
 800b2ce:	693b      	ldr	r3, [r7, #16]
 800b2d0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b2d2:	693b      	ldr	r3, [r7, #16]
 800b2d4:	2b00      	cmp	r3, #0
 800b2d6:	d121      	bne.n	800b31c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800b2d8:	4b49      	ldr	r3, [pc, #292]	@ (800b400 <xTaskIncrementTick+0x150>)
 800b2da:	681b      	ldr	r3, [r3, #0]
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d00b      	beq.n	800b2fa <xTaskIncrementTick+0x4a>
	__asm volatile
 800b2e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2e6:	f383 8811 	msr	BASEPRI, r3
 800b2ea:	f3bf 8f6f 	isb	sy
 800b2ee:	f3bf 8f4f 	dsb	sy
 800b2f2:	603b      	str	r3, [r7, #0]
}
 800b2f4:	bf00      	nop
 800b2f6:	bf00      	nop
 800b2f8:	e7fd      	b.n	800b2f6 <xTaskIncrementTick+0x46>
 800b2fa:	4b41      	ldr	r3, [pc, #260]	@ (800b400 <xTaskIncrementTick+0x150>)
 800b2fc:	681b      	ldr	r3, [r3, #0]
 800b2fe:	60fb      	str	r3, [r7, #12]
 800b300:	4b40      	ldr	r3, [pc, #256]	@ (800b404 <xTaskIncrementTick+0x154>)
 800b302:	681b      	ldr	r3, [r3, #0]
 800b304:	4a3e      	ldr	r2, [pc, #248]	@ (800b400 <xTaskIncrementTick+0x150>)
 800b306:	6013      	str	r3, [r2, #0]
 800b308:	4a3e      	ldr	r2, [pc, #248]	@ (800b404 <xTaskIncrementTick+0x154>)
 800b30a:	68fb      	ldr	r3, [r7, #12]
 800b30c:	6013      	str	r3, [r2, #0]
 800b30e:	4b3e      	ldr	r3, [pc, #248]	@ (800b408 <xTaskIncrementTick+0x158>)
 800b310:	681b      	ldr	r3, [r3, #0]
 800b312:	3301      	adds	r3, #1
 800b314:	4a3c      	ldr	r2, [pc, #240]	@ (800b408 <xTaskIncrementTick+0x158>)
 800b316:	6013      	str	r3, [r2, #0]
 800b318:	f000 fae2 	bl	800b8e0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b31c:	4b3b      	ldr	r3, [pc, #236]	@ (800b40c <xTaskIncrementTick+0x15c>)
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	693a      	ldr	r2, [r7, #16]
 800b322:	429a      	cmp	r2, r3
 800b324:	d349      	bcc.n	800b3ba <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b326:	4b36      	ldr	r3, [pc, #216]	@ (800b400 <xTaskIncrementTick+0x150>)
 800b328:	681b      	ldr	r3, [r3, #0]
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	2b00      	cmp	r3, #0
 800b32e:	d104      	bne.n	800b33a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b330:	4b36      	ldr	r3, [pc, #216]	@ (800b40c <xTaskIncrementTick+0x15c>)
 800b332:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b336:	601a      	str	r2, [r3, #0]
					break;
 800b338:	e03f      	b.n	800b3ba <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b33a:	4b31      	ldr	r3, [pc, #196]	@ (800b400 <xTaskIncrementTick+0x150>)
 800b33c:	681b      	ldr	r3, [r3, #0]
 800b33e:	68db      	ldr	r3, [r3, #12]
 800b340:	68db      	ldr	r3, [r3, #12]
 800b342:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b344:	68bb      	ldr	r3, [r7, #8]
 800b346:	685b      	ldr	r3, [r3, #4]
 800b348:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b34a:	693a      	ldr	r2, [r7, #16]
 800b34c:	687b      	ldr	r3, [r7, #4]
 800b34e:	429a      	cmp	r2, r3
 800b350:	d203      	bcs.n	800b35a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b352:	4a2e      	ldr	r2, [pc, #184]	@ (800b40c <xTaskIncrementTick+0x15c>)
 800b354:	687b      	ldr	r3, [r7, #4]
 800b356:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b358:	e02f      	b.n	800b3ba <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b35a:	68bb      	ldr	r3, [r7, #8]
 800b35c:	3304      	adds	r3, #4
 800b35e:	4618      	mov	r0, r3
 800b360:	f7fe fd22 	bl	8009da8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b364:	68bb      	ldr	r3, [r7, #8]
 800b366:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b368:	2b00      	cmp	r3, #0
 800b36a:	d004      	beq.n	800b376 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b36c:	68bb      	ldr	r3, [r7, #8]
 800b36e:	3318      	adds	r3, #24
 800b370:	4618      	mov	r0, r3
 800b372:	f7fe fd19 	bl	8009da8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b376:	68bb      	ldr	r3, [r7, #8]
 800b378:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b37a:	4b25      	ldr	r3, [pc, #148]	@ (800b410 <xTaskIncrementTick+0x160>)
 800b37c:	681b      	ldr	r3, [r3, #0]
 800b37e:	429a      	cmp	r2, r3
 800b380:	d903      	bls.n	800b38a <xTaskIncrementTick+0xda>
 800b382:	68bb      	ldr	r3, [r7, #8]
 800b384:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b386:	4a22      	ldr	r2, [pc, #136]	@ (800b410 <xTaskIncrementTick+0x160>)
 800b388:	6013      	str	r3, [r2, #0]
 800b38a:	68bb      	ldr	r3, [r7, #8]
 800b38c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b38e:	4613      	mov	r3, r2
 800b390:	009b      	lsls	r3, r3, #2
 800b392:	4413      	add	r3, r2
 800b394:	009b      	lsls	r3, r3, #2
 800b396:	4a1f      	ldr	r2, [pc, #124]	@ (800b414 <xTaskIncrementTick+0x164>)
 800b398:	441a      	add	r2, r3
 800b39a:	68bb      	ldr	r3, [r7, #8]
 800b39c:	3304      	adds	r3, #4
 800b39e:	4619      	mov	r1, r3
 800b3a0:	4610      	mov	r0, r2
 800b3a2:	f7fe fca4 	bl	8009cee <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b3a6:	68bb      	ldr	r3, [r7, #8]
 800b3a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b3aa:	4b1b      	ldr	r3, [pc, #108]	@ (800b418 <xTaskIncrementTick+0x168>)
 800b3ac:	681b      	ldr	r3, [r3, #0]
 800b3ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b3b0:	429a      	cmp	r2, r3
 800b3b2:	d3b8      	bcc.n	800b326 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800b3b4:	2301      	movs	r3, #1
 800b3b6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b3b8:	e7b5      	b.n	800b326 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b3ba:	4b17      	ldr	r3, [pc, #92]	@ (800b418 <xTaskIncrementTick+0x168>)
 800b3bc:	681b      	ldr	r3, [r3, #0]
 800b3be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b3c0:	4914      	ldr	r1, [pc, #80]	@ (800b414 <xTaskIncrementTick+0x164>)
 800b3c2:	4613      	mov	r3, r2
 800b3c4:	009b      	lsls	r3, r3, #2
 800b3c6:	4413      	add	r3, r2
 800b3c8:	009b      	lsls	r3, r3, #2
 800b3ca:	440b      	add	r3, r1
 800b3cc:	681b      	ldr	r3, [r3, #0]
 800b3ce:	2b01      	cmp	r3, #1
 800b3d0:	d901      	bls.n	800b3d6 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800b3d2:	2301      	movs	r3, #1
 800b3d4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b3d6:	4b11      	ldr	r3, [pc, #68]	@ (800b41c <xTaskIncrementTick+0x16c>)
 800b3d8:	681b      	ldr	r3, [r3, #0]
 800b3da:	2b00      	cmp	r3, #0
 800b3dc:	d007      	beq.n	800b3ee <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800b3de:	2301      	movs	r3, #1
 800b3e0:	617b      	str	r3, [r7, #20]
 800b3e2:	e004      	b.n	800b3ee <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b3e4:	4b0e      	ldr	r3, [pc, #56]	@ (800b420 <xTaskIncrementTick+0x170>)
 800b3e6:	681b      	ldr	r3, [r3, #0]
 800b3e8:	3301      	adds	r3, #1
 800b3ea:	4a0d      	ldr	r2, [pc, #52]	@ (800b420 <xTaskIncrementTick+0x170>)
 800b3ec:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b3ee:	697b      	ldr	r3, [r7, #20]
}
 800b3f0:	4618      	mov	r0, r3
 800b3f2:	3718      	adds	r7, #24
 800b3f4:	46bd      	mov	sp, r7
 800b3f6:	bd80      	pop	{r7, pc}
 800b3f8:	200013f8 	.word	0x200013f8
 800b3fc:	200013d4 	.word	0x200013d4
 800b400:	20001388 	.word	0x20001388
 800b404:	2000138c 	.word	0x2000138c
 800b408:	200013e8 	.word	0x200013e8
 800b40c:	200013f0 	.word	0x200013f0
 800b410:	200013d8 	.word	0x200013d8
 800b414:	20000f00 	.word	0x20000f00
 800b418:	20000efc 	.word	0x20000efc
 800b41c:	200013e4 	.word	0x200013e4
 800b420:	200013e0 	.word	0x200013e0

0800b424 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b424:	b480      	push	{r7}
 800b426:	b085      	sub	sp, #20
 800b428:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b42a:	4b2b      	ldr	r3, [pc, #172]	@ (800b4d8 <vTaskSwitchContext+0xb4>)
 800b42c:	681b      	ldr	r3, [r3, #0]
 800b42e:	2b00      	cmp	r3, #0
 800b430:	d003      	beq.n	800b43a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b432:	4b2a      	ldr	r3, [pc, #168]	@ (800b4dc <vTaskSwitchContext+0xb8>)
 800b434:	2201      	movs	r2, #1
 800b436:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b438:	e047      	b.n	800b4ca <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800b43a:	4b28      	ldr	r3, [pc, #160]	@ (800b4dc <vTaskSwitchContext+0xb8>)
 800b43c:	2200      	movs	r2, #0
 800b43e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b440:	4b27      	ldr	r3, [pc, #156]	@ (800b4e0 <vTaskSwitchContext+0xbc>)
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	60fb      	str	r3, [r7, #12]
 800b446:	e011      	b.n	800b46c <vTaskSwitchContext+0x48>
 800b448:	68fb      	ldr	r3, [r7, #12]
 800b44a:	2b00      	cmp	r3, #0
 800b44c:	d10b      	bne.n	800b466 <vTaskSwitchContext+0x42>
	__asm volatile
 800b44e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b452:	f383 8811 	msr	BASEPRI, r3
 800b456:	f3bf 8f6f 	isb	sy
 800b45a:	f3bf 8f4f 	dsb	sy
 800b45e:	607b      	str	r3, [r7, #4]
}
 800b460:	bf00      	nop
 800b462:	bf00      	nop
 800b464:	e7fd      	b.n	800b462 <vTaskSwitchContext+0x3e>
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	3b01      	subs	r3, #1
 800b46a:	60fb      	str	r3, [r7, #12]
 800b46c:	491d      	ldr	r1, [pc, #116]	@ (800b4e4 <vTaskSwitchContext+0xc0>)
 800b46e:	68fa      	ldr	r2, [r7, #12]
 800b470:	4613      	mov	r3, r2
 800b472:	009b      	lsls	r3, r3, #2
 800b474:	4413      	add	r3, r2
 800b476:	009b      	lsls	r3, r3, #2
 800b478:	440b      	add	r3, r1
 800b47a:	681b      	ldr	r3, [r3, #0]
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	d0e3      	beq.n	800b448 <vTaskSwitchContext+0x24>
 800b480:	68fa      	ldr	r2, [r7, #12]
 800b482:	4613      	mov	r3, r2
 800b484:	009b      	lsls	r3, r3, #2
 800b486:	4413      	add	r3, r2
 800b488:	009b      	lsls	r3, r3, #2
 800b48a:	4a16      	ldr	r2, [pc, #88]	@ (800b4e4 <vTaskSwitchContext+0xc0>)
 800b48c:	4413      	add	r3, r2
 800b48e:	60bb      	str	r3, [r7, #8]
 800b490:	68bb      	ldr	r3, [r7, #8]
 800b492:	685b      	ldr	r3, [r3, #4]
 800b494:	685a      	ldr	r2, [r3, #4]
 800b496:	68bb      	ldr	r3, [r7, #8]
 800b498:	605a      	str	r2, [r3, #4]
 800b49a:	68bb      	ldr	r3, [r7, #8]
 800b49c:	685a      	ldr	r2, [r3, #4]
 800b49e:	68bb      	ldr	r3, [r7, #8]
 800b4a0:	3308      	adds	r3, #8
 800b4a2:	429a      	cmp	r2, r3
 800b4a4:	d104      	bne.n	800b4b0 <vTaskSwitchContext+0x8c>
 800b4a6:	68bb      	ldr	r3, [r7, #8]
 800b4a8:	685b      	ldr	r3, [r3, #4]
 800b4aa:	685a      	ldr	r2, [r3, #4]
 800b4ac:	68bb      	ldr	r3, [r7, #8]
 800b4ae:	605a      	str	r2, [r3, #4]
 800b4b0:	68bb      	ldr	r3, [r7, #8]
 800b4b2:	685b      	ldr	r3, [r3, #4]
 800b4b4:	68db      	ldr	r3, [r3, #12]
 800b4b6:	4a0c      	ldr	r2, [pc, #48]	@ (800b4e8 <vTaskSwitchContext+0xc4>)
 800b4b8:	6013      	str	r3, [r2, #0]
 800b4ba:	4a09      	ldr	r2, [pc, #36]	@ (800b4e0 <vTaskSwitchContext+0xbc>)
 800b4bc:	68fb      	ldr	r3, [r7, #12]
 800b4be:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b4c0:	4b09      	ldr	r3, [pc, #36]	@ (800b4e8 <vTaskSwitchContext+0xc4>)
 800b4c2:	681b      	ldr	r3, [r3, #0]
 800b4c4:	3354      	adds	r3, #84	@ 0x54
 800b4c6:	4a09      	ldr	r2, [pc, #36]	@ (800b4ec <vTaskSwitchContext+0xc8>)
 800b4c8:	6013      	str	r3, [r2, #0]
}
 800b4ca:	bf00      	nop
 800b4cc:	3714      	adds	r7, #20
 800b4ce:	46bd      	mov	sp, r7
 800b4d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b4d4:	4770      	bx	lr
 800b4d6:	bf00      	nop
 800b4d8:	200013f8 	.word	0x200013f8
 800b4dc:	200013e4 	.word	0x200013e4
 800b4e0:	200013d8 	.word	0x200013d8
 800b4e4:	20000f00 	.word	0x20000f00
 800b4e8:	20000efc 	.word	0x20000efc
 800b4ec:	200000b8 	.word	0x200000b8

0800b4f0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b4f0:	b580      	push	{r7, lr}
 800b4f2:	b084      	sub	sp, #16
 800b4f4:	af00      	add	r7, sp, #0
 800b4f6:	6078      	str	r0, [r7, #4]
 800b4f8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d10b      	bne.n	800b518 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800b500:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b504:	f383 8811 	msr	BASEPRI, r3
 800b508:	f3bf 8f6f 	isb	sy
 800b50c:	f3bf 8f4f 	dsb	sy
 800b510:	60fb      	str	r3, [r7, #12]
}
 800b512:	bf00      	nop
 800b514:	bf00      	nop
 800b516:	e7fd      	b.n	800b514 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b518:	4b07      	ldr	r3, [pc, #28]	@ (800b538 <vTaskPlaceOnEventList+0x48>)
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	3318      	adds	r3, #24
 800b51e:	4619      	mov	r1, r3
 800b520:	6878      	ldr	r0, [r7, #4]
 800b522:	f7fe fc08 	bl	8009d36 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b526:	2101      	movs	r1, #1
 800b528:	6838      	ldr	r0, [r7, #0]
 800b52a:	f000 fb87 	bl	800bc3c <prvAddCurrentTaskToDelayedList>
}
 800b52e:	bf00      	nop
 800b530:	3710      	adds	r7, #16
 800b532:	46bd      	mov	sp, r7
 800b534:	bd80      	pop	{r7, pc}
 800b536:	bf00      	nop
 800b538:	20000efc 	.word	0x20000efc

0800b53c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b53c:	b580      	push	{r7, lr}
 800b53e:	b086      	sub	sp, #24
 800b540:	af00      	add	r7, sp, #0
 800b542:	60f8      	str	r0, [r7, #12]
 800b544:	60b9      	str	r1, [r7, #8]
 800b546:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b548:	68fb      	ldr	r3, [r7, #12]
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d10b      	bne.n	800b566 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800b54e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b552:	f383 8811 	msr	BASEPRI, r3
 800b556:	f3bf 8f6f 	isb	sy
 800b55a:	f3bf 8f4f 	dsb	sy
 800b55e:	617b      	str	r3, [r7, #20]
}
 800b560:	bf00      	nop
 800b562:	bf00      	nop
 800b564:	e7fd      	b.n	800b562 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b566:	4b0a      	ldr	r3, [pc, #40]	@ (800b590 <vTaskPlaceOnEventListRestricted+0x54>)
 800b568:	681b      	ldr	r3, [r3, #0]
 800b56a:	3318      	adds	r3, #24
 800b56c:	4619      	mov	r1, r3
 800b56e:	68f8      	ldr	r0, [r7, #12]
 800b570:	f7fe fbbd 	bl	8009cee <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b574:	687b      	ldr	r3, [r7, #4]
 800b576:	2b00      	cmp	r3, #0
 800b578:	d002      	beq.n	800b580 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800b57a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b57e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b580:	6879      	ldr	r1, [r7, #4]
 800b582:	68b8      	ldr	r0, [r7, #8]
 800b584:	f000 fb5a 	bl	800bc3c <prvAddCurrentTaskToDelayedList>
	}
 800b588:	bf00      	nop
 800b58a:	3718      	adds	r7, #24
 800b58c:	46bd      	mov	sp, r7
 800b58e:	bd80      	pop	{r7, pc}
 800b590:	20000efc 	.word	0x20000efc

0800b594 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b594:	b580      	push	{r7, lr}
 800b596:	b086      	sub	sp, #24
 800b598:	af00      	add	r7, sp, #0
 800b59a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	68db      	ldr	r3, [r3, #12]
 800b5a0:	68db      	ldr	r3, [r3, #12]
 800b5a2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b5a4:	693b      	ldr	r3, [r7, #16]
 800b5a6:	2b00      	cmp	r3, #0
 800b5a8:	d10b      	bne.n	800b5c2 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800b5aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b5ae:	f383 8811 	msr	BASEPRI, r3
 800b5b2:	f3bf 8f6f 	isb	sy
 800b5b6:	f3bf 8f4f 	dsb	sy
 800b5ba:	60fb      	str	r3, [r7, #12]
}
 800b5bc:	bf00      	nop
 800b5be:	bf00      	nop
 800b5c0:	e7fd      	b.n	800b5be <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b5c2:	693b      	ldr	r3, [r7, #16]
 800b5c4:	3318      	adds	r3, #24
 800b5c6:	4618      	mov	r0, r3
 800b5c8:	f7fe fbee 	bl	8009da8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b5cc:	4b1d      	ldr	r3, [pc, #116]	@ (800b644 <xTaskRemoveFromEventList+0xb0>)
 800b5ce:	681b      	ldr	r3, [r3, #0]
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d11d      	bne.n	800b610 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b5d4:	693b      	ldr	r3, [r7, #16]
 800b5d6:	3304      	adds	r3, #4
 800b5d8:	4618      	mov	r0, r3
 800b5da:	f7fe fbe5 	bl	8009da8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b5de:	693b      	ldr	r3, [r7, #16]
 800b5e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b5e2:	4b19      	ldr	r3, [pc, #100]	@ (800b648 <xTaskRemoveFromEventList+0xb4>)
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	429a      	cmp	r2, r3
 800b5e8:	d903      	bls.n	800b5f2 <xTaskRemoveFromEventList+0x5e>
 800b5ea:	693b      	ldr	r3, [r7, #16]
 800b5ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b5ee:	4a16      	ldr	r2, [pc, #88]	@ (800b648 <xTaskRemoveFromEventList+0xb4>)
 800b5f0:	6013      	str	r3, [r2, #0]
 800b5f2:	693b      	ldr	r3, [r7, #16]
 800b5f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b5f6:	4613      	mov	r3, r2
 800b5f8:	009b      	lsls	r3, r3, #2
 800b5fa:	4413      	add	r3, r2
 800b5fc:	009b      	lsls	r3, r3, #2
 800b5fe:	4a13      	ldr	r2, [pc, #76]	@ (800b64c <xTaskRemoveFromEventList+0xb8>)
 800b600:	441a      	add	r2, r3
 800b602:	693b      	ldr	r3, [r7, #16]
 800b604:	3304      	adds	r3, #4
 800b606:	4619      	mov	r1, r3
 800b608:	4610      	mov	r0, r2
 800b60a:	f7fe fb70 	bl	8009cee <vListInsertEnd>
 800b60e:	e005      	b.n	800b61c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b610:	693b      	ldr	r3, [r7, #16]
 800b612:	3318      	adds	r3, #24
 800b614:	4619      	mov	r1, r3
 800b616:	480e      	ldr	r0, [pc, #56]	@ (800b650 <xTaskRemoveFromEventList+0xbc>)
 800b618:	f7fe fb69 	bl	8009cee <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b61c:	693b      	ldr	r3, [r7, #16]
 800b61e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b620:	4b0c      	ldr	r3, [pc, #48]	@ (800b654 <xTaskRemoveFromEventList+0xc0>)
 800b622:	681b      	ldr	r3, [r3, #0]
 800b624:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b626:	429a      	cmp	r2, r3
 800b628:	d905      	bls.n	800b636 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b62a:	2301      	movs	r3, #1
 800b62c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b62e:	4b0a      	ldr	r3, [pc, #40]	@ (800b658 <xTaskRemoveFromEventList+0xc4>)
 800b630:	2201      	movs	r2, #1
 800b632:	601a      	str	r2, [r3, #0]
 800b634:	e001      	b.n	800b63a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800b636:	2300      	movs	r3, #0
 800b638:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b63a:	697b      	ldr	r3, [r7, #20]
}
 800b63c:	4618      	mov	r0, r3
 800b63e:	3718      	adds	r7, #24
 800b640:	46bd      	mov	sp, r7
 800b642:	bd80      	pop	{r7, pc}
 800b644:	200013f8 	.word	0x200013f8
 800b648:	200013d8 	.word	0x200013d8
 800b64c:	20000f00 	.word	0x20000f00
 800b650:	20001390 	.word	0x20001390
 800b654:	20000efc 	.word	0x20000efc
 800b658:	200013e4 	.word	0x200013e4

0800b65c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b65c:	b480      	push	{r7}
 800b65e:	b083      	sub	sp, #12
 800b660:	af00      	add	r7, sp, #0
 800b662:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b664:	4b06      	ldr	r3, [pc, #24]	@ (800b680 <vTaskInternalSetTimeOutState+0x24>)
 800b666:	681a      	ldr	r2, [r3, #0]
 800b668:	687b      	ldr	r3, [r7, #4]
 800b66a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b66c:	4b05      	ldr	r3, [pc, #20]	@ (800b684 <vTaskInternalSetTimeOutState+0x28>)
 800b66e:	681a      	ldr	r2, [r3, #0]
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	605a      	str	r2, [r3, #4]
}
 800b674:	bf00      	nop
 800b676:	370c      	adds	r7, #12
 800b678:	46bd      	mov	sp, r7
 800b67a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b67e:	4770      	bx	lr
 800b680:	200013e8 	.word	0x200013e8
 800b684:	200013d4 	.word	0x200013d4

0800b688 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b688:	b580      	push	{r7, lr}
 800b68a:	b088      	sub	sp, #32
 800b68c:	af00      	add	r7, sp, #0
 800b68e:	6078      	str	r0, [r7, #4]
 800b690:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	2b00      	cmp	r3, #0
 800b696:	d10b      	bne.n	800b6b0 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800b698:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b69c:	f383 8811 	msr	BASEPRI, r3
 800b6a0:	f3bf 8f6f 	isb	sy
 800b6a4:	f3bf 8f4f 	dsb	sy
 800b6a8:	613b      	str	r3, [r7, #16]
}
 800b6aa:	bf00      	nop
 800b6ac:	bf00      	nop
 800b6ae:	e7fd      	b.n	800b6ac <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b6b0:	683b      	ldr	r3, [r7, #0]
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	d10b      	bne.n	800b6ce <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800b6b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b6ba:	f383 8811 	msr	BASEPRI, r3
 800b6be:	f3bf 8f6f 	isb	sy
 800b6c2:	f3bf 8f4f 	dsb	sy
 800b6c6:	60fb      	str	r3, [r7, #12]
}
 800b6c8:	bf00      	nop
 800b6ca:	bf00      	nop
 800b6cc:	e7fd      	b.n	800b6ca <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800b6ce:	f000 ff93 	bl	800c5f8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b6d2:	4b1d      	ldr	r3, [pc, #116]	@ (800b748 <xTaskCheckForTimeOut+0xc0>)
 800b6d4:	681b      	ldr	r3, [r3, #0]
 800b6d6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b6d8:	687b      	ldr	r3, [r7, #4]
 800b6da:	685b      	ldr	r3, [r3, #4]
 800b6dc:	69ba      	ldr	r2, [r7, #24]
 800b6de:	1ad3      	subs	r3, r2, r3
 800b6e0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b6e2:	683b      	ldr	r3, [r7, #0]
 800b6e4:	681b      	ldr	r3, [r3, #0]
 800b6e6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b6ea:	d102      	bne.n	800b6f2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b6ec:	2300      	movs	r3, #0
 800b6ee:	61fb      	str	r3, [r7, #28]
 800b6f0:	e023      	b.n	800b73a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	681a      	ldr	r2, [r3, #0]
 800b6f6:	4b15      	ldr	r3, [pc, #84]	@ (800b74c <xTaskCheckForTimeOut+0xc4>)
 800b6f8:	681b      	ldr	r3, [r3, #0]
 800b6fa:	429a      	cmp	r2, r3
 800b6fc:	d007      	beq.n	800b70e <xTaskCheckForTimeOut+0x86>
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	685b      	ldr	r3, [r3, #4]
 800b702:	69ba      	ldr	r2, [r7, #24]
 800b704:	429a      	cmp	r2, r3
 800b706:	d302      	bcc.n	800b70e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b708:	2301      	movs	r3, #1
 800b70a:	61fb      	str	r3, [r7, #28]
 800b70c:	e015      	b.n	800b73a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b70e:	683b      	ldr	r3, [r7, #0]
 800b710:	681b      	ldr	r3, [r3, #0]
 800b712:	697a      	ldr	r2, [r7, #20]
 800b714:	429a      	cmp	r2, r3
 800b716:	d20b      	bcs.n	800b730 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b718:	683b      	ldr	r3, [r7, #0]
 800b71a:	681a      	ldr	r2, [r3, #0]
 800b71c:	697b      	ldr	r3, [r7, #20]
 800b71e:	1ad2      	subs	r2, r2, r3
 800b720:	683b      	ldr	r3, [r7, #0]
 800b722:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b724:	6878      	ldr	r0, [r7, #4]
 800b726:	f7ff ff99 	bl	800b65c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b72a:	2300      	movs	r3, #0
 800b72c:	61fb      	str	r3, [r7, #28]
 800b72e:	e004      	b.n	800b73a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800b730:	683b      	ldr	r3, [r7, #0]
 800b732:	2200      	movs	r2, #0
 800b734:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b736:	2301      	movs	r3, #1
 800b738:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b73a:	f000 ff8f 	bl	800c65c <vPortExitCritical>

	return xReturn;
 800b73e:	69fb      	ldr	r3, [r7, #28]
}
 800b740:	4618      	mov	r0, r3
 800b742:	3720      	adds	r7, #32
 800b744:	46bd      	mov	sp, r7
 800b746:	bd80      	pop	{r7, pc}
 800b748:	200013d4 	.word	0x200013d4
 800b74c:	200013e8 	.word	0x200013e8

0800b750 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b750:	b480      	push	{r7}
 800b752:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b754:	4b03      	ldr	r3, [pc, #12]	@ (800b764 <vTaskMissedYield+0x14>)
 800b756:	2201      	movs	r2, #1
 800b758:	601a      	str	r2, [r3, #0]
}
 800b75a:	bf00      	nop
 800b75c:	46bd      	mov	sp, r7
 800b75e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b762:	4770      	bx	lr
 800b764:	200013e4 	.word	0x200013e4

0800b768 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b768:	b580      	push	{r7, lr}
 800b76a:	b082      	sub	sp, #8
 800b76c:	af00      	add	r7, sp, #0
 800b76e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b770:	f000 f852 	bl	800b818 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b774:	4b06      	ldr	r3, [pc, #24]	@ (800b790 <prvIdleTask+0x28>)
 800b776:	681b      	ldr	r3, [r3, #0]
 800b778:	2b01      	cmp	r3, #1
 800b77a:	d9f9      	bls.n	800b770 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b77c:	4b05      	ldr	r3, [pc, #20]	@ (800b794 <prvIdleTask+0x2c>)
 800b77e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b782:	601a      	str	r2, [r3, #0]
 800b784:	f3bf 8f4f 	dsb	sy
 800b788:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b78c:	e7f0      	b.n	800b770 <prvIdleTask+0x8>
 800b78e:	bf00      	nop
 800b790:	20000f00 	.word	0x20000f00
 800b794:	e000ed04 	.word	0xe000ed04

0800b798 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b798:	b580      	push	{r7, lr}
 800b79a:	b082      	sub	sp, #8
 800b79c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b79e:	2300      	movs	r3, #0
 800b7a0:	607b      	str	r3, [r7, #4]
 800b7a2:	e00c      	b.n	800b7be <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b7a4:	687a      	ldr	r2, [r7, #4]
 800b7a6:	4613      	mov	r3, r2
 800b7a8:	009b      	lsls	r3, r3, #2
 800b7aa:	4413      	add	r3, r2
 800b7ac:	009b      	lsls	r3, r3, #2
 800b7ae:	4a12      	ldr	r2, [pc, #72]	@ (800b7f8 <prvInitialiseTaskLists+0x60>)
 800b7b0:	4413      	add	r3, r2
 800b7b2:	4618      	mov	r0, r3
 800b7b4:	f7fe fa6e 	bl	8009c94 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b7b8:	687b      	ldr	r3, [r7, #4]
 800b7ba:	3301      	adds	r3, #1
 800b7bc:	607b      	str	r3, [r7, #4]
 800b7be:	687b      	ldr	r3, [r7, #4]
 800b7c0:	2b37      	cmp	r3, #55	@ 0x37
 800b7c2:	d9ef      	bls.n	800b7a4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b7c4:	480d      	ldr	r0, [pc, #52]	@ (800b7fc <prvInitialiseTaskLists+0x64>)
 800b7c6:	f7fe fa65 	bl	8009c94 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b7ca:	480d      	ldr	r0, [pc, #52]	@ (800b800 <prvInitialiseTaskLists+0x68>)
 800b7cc:	f7fe fa62 	bl	8009c94 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b7d0:	480c      	ldr	r0, [pc, #48]	@ (800b804 <prvInitialiseTaskLists+0x6c>)
 800b7d2:	f7fe fa5f 	bl	8009c94 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b7d6:	480c      	ldr	r0, [pc, #48]	@ (800b808 <prvInitialiseTaskLists+0x70>)
 800b7d8:	f7fe fa5c 	bl	8009c94 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b7dc:	480b      	ldr	r0, [pc, #44]	@ (800b80c <prvInitialiseTaskLists+0x74>)
 800b7de:	f7fe fa59 	bl	8009c94 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b7e2:	4b0b      	ldr	r3, [pc, #44]	@ (800b810 <prvInitialiseTaskLists+0x78>)
 800b7e4:	4a05      	ldr	r2, [pc, #20]	@ (800b7fc <prvInitialiseTaskLists+0x64>)
 800b7e6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b7e8:	4b0a      	ldr	r3, [pc, #40]	@ (800b814 <prvInitialiseTaskLists+0x7c>)
 800b7ea:	4a05      	ldr	r2, [pc, #20]	@ (800b800 <prvInitialiseTaskLists+0x68>)
 800b7ec:	601a      	str	r2, [r3, #0]
}
 800b7ee:	bf00      	nop
 800b7f0:	3708      	adds	r7, #8
 800b7f2:	46bd      	mov	sp, r7
 800b7f4:	bd80      	pop	{r7, pc}
 800b7f6:	bf00      	nop
 800b7f8:	20000f00 	.word	0x20000f00
 800b7fc:	20001360 	.word	0x20001360
 800b800:	20001374 	.word	0x20001374
 800b804:	20001390 	.word	0x20001390
 800b808:	200013a4 	.word	0x200013a4
 800b80c:	200013bc 	.word	0x200013bc
 800b810:	20001388 	.word	0x20001388
 800b814:	2000138c 	.word	0x2000138c

0800b818 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b818:	b580      	push	{r7, lr}
 800b81a:	b082      	sub	sp, #8
 800b81c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b81e:	e019      	b.n	800b854 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b820:	f000 feea 	bl	800c5f8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b824:	4b10      	ldr	r3, [pc, #64]	@ (800b868 <prvCheckTasksWaitingTermination+0x50>)
 800b826:	68db      	ldr	r3, [r3, #12]
 800b828:	68db      	ldr	r3, [r3, #12]
 800b82a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	3304      	adds	r3, #4
 800b830:	4618      	mov	r0, r3
 800b832:	f7fe fab9 	bl	8009da8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b836:	4b0d      	ldr	r3, [pc, #52]	@ (800b86c <prvCheckTasksWaitingTermination+0x54>)
 800b838:	681b      	ldr	r3, [r3, #0]
 800b83a:	3b01      	subs	r3, #1
 800b83c:	4a0b      	ldr	r2, [pc, #44]	@ (800b86c <prvCheckTasksWaitingTermination+0x54>)
 800b83e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b840:	4b0b      	ldr	r3, [pc, #44]	@ (800b870 <prvCheckTasksWaitingTermination+0x58>)
 800b842:	681b      	ldr	r3, [r3, #0]
 800b844:	3b01      	subs	r3, #1
 800b846:	4a0a      	ldr	r2, [pc, #40]	@ (800b870 <prvCheckTasksWaitingTermination+0x58>)
 800b848:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b84a:	f000 ff07 	bl	800c65c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b84e:	6878      	ldr	r0, [r7, #4]
 800b850:	f000 f810 	bl	800b874 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b854:	4b06      	ldr	r3, [pc, #24]	@ (800b870 <prvCheckTasksWaitingTermination+0x58>)
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	2b00      	cmp	r3, #0
 800b85a:	d1e1      	bne.n	800b820 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b85c:	bf00      	nop
 800b85e:	bf00      	nop
 800b860:	3708      	adds	r7, #8
 800b862:	46bd      	mov	sp, r7
 800b864:	bd80      	pop	{r7, pc}
 800b866:	bf00      	nop
 800b868:	200013a4 	.word	0x200013a4
 800b86c:	200013d0 	.word	0x200013d0
 800b870:	200013b8 	.word	0x200013b8

0800b874 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b874:	b580      	push	{r7, lr}
 800b876:	b084      	sub	sp, #16
 800b878:	af00      	add	r7, sp, #0
 800b87a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800b87c:	687b      	ldr	r3, [r7, #4]
 800b87e:	3354      	adds	r3, #84	@ 0x54
 800b880:	4618      	mov	r0, r3
 800b882:	f002 f87b 	bl	800d97c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b886:	687b      	ldr	r3, [r7, #4]
 800b888:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800b88c:	2b00      	cmp	r3, #0
 800b88e:	d108      	bne.n	800b8a2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b894:	4618      	mov	r0, r3
 800b896:	f001 f89f 	bl	800c9d8 <vPortFree>
				vPortFree( pxTCB );
 800b89a:	6878      	ldr	r0, [r7, #4]
 800b89c:	f001 f89c 	bl	800c9d8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b8a0:	e019      	b.n	800b8d6 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b8a2:	687b      	ldr	r3, [r7, #4]
 800b8a4:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800b8a8:	2b01      	cmp	r3, #1
 800b8aa:	d103      	bne.n	800b8b4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800b8ac:	6878      	ldr	r0, [r7, #4]
 800b8ae:	f001 f893 	bl	800c9d8 <vPortFree>
	}
 800b8b2:	e010      	b.n	800b8d6 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b8b4:	687b      	ldr	r3, [r7, #4]
 800b8b6:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800b8ba:	2b02      	cmp	r3, #2
 800b8bc:	d00b      	beq.n	800b8d6 <prvDeleteTCB+0x62>
	__asm volatile
 800b8be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b8c2:	f383 8811 	msr	BASEPRI, r3
 800b8c6:	f3bf 8f6f 	isb	sy
 800b8ca:	f3bf 8f4f 	dsb	sy
 800b8ce:	60fb      	str	r3, [r7, #12]
}
 800b8d0:	bf00      	nop
 800b8d2:	bf00      	nop
 800b8d4:	e7fd      	b.n	800b8d2 <prvDeleteTCB+0x5e>
	}
 800b8d6:	bf00      	nop
 800b8d8:	3710      	adds	r7, #16
 800b8da:	46bd      	mov	sp, r7
 800b8dc:	bd80      	pop	{r7, pc}
	...

0800b8e0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800b8e0:	b480      	push	{r7}
 800b8e2:	b083      	sub	sp, #12
 800b8e4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b8e6:	4b0c      	ldr	r3, [pc, #48]	@ (800b918 <prvResetNextTaskUnblockTime+0x38>)
 800b8e8:	681b      	ldr	r3, [r3, #0]
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	2b00      	cmp	r3, #0
 800b8ee:	d104      	bne.n	800b8fa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800b8f0:	4b0a      	ldr	r3, [pc, #40]	@ (800b91c <prvResetNextTaskUnblockTime+0x3c>)
 800b8f2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b8f6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800b8f8:	e008      	b.n	800b90c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b8fa:	4b07      	ldr	r3, [pc, #28]	@ (800b918 <prvResetNextTaskUnblockTime+0x38>)
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	68db      	ldr	r3, [r3, #12]
 800b900:	68db      	ldr	r3, [r3, #12]
 800b902:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800b904:	687b      	ldr	r3, [r7, #4]
 800b906:	685b      	ldr	r3, [r3, #4]
 800b908:	4a04      	ldr	r2, [pc, #16]	@ (800b91c <prvResetNextTaskUnblockTime+0x3c>)
 800b90a:	6013      	str	r3, [r2, #0]
}
 800b90c:	bf00      	nop
 800b90e:	370c      	adds	r7, #12
 800b910:	46bd      	mov	sp, r7
 800b912:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b916:	4770      	bx	lr
 800b918:	20001388 	.word	0x20001388
 800b91c:	200013f0 	.word	0x200013f0

0800b920 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800b920:	b480      	push	{r7}
 800b922:	b083      	sub	sp, #12
 800b924:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800b926:	4b0b      	ldr	r3, [pc, #44]	@ (800b954 <xTaskGetSchedulerState+0x34>)
 800b928:	681b      	ldr	r3, [r3, #0]
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	d102      	bne.n	800b934 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800b92e:	2301      	movs	r3, #1
 800b930:	607b      	str	r3, [r7, #4]
 800b932:	e008      	b.n	800b946 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b934:	4b08      	ldr	r3, [pc, #32]	@ (800b958 <xTaskGetSchedulerState+0x38>)
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	2b00      	cmp	r3, #0
 800b93a:	d102      	bne.n	800b942 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800b93c:	2302      	movs	r3, #2
 800b93e:	607b      	str	r3, [r7, #4]
 800b940:	e001      	b.n	800b946 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800b942:	2300      	movs	r3, #0
 800b944:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800b946:	687b      	ldr	r3, [r7, #4]
	}
 800b948:	4618      	mov	r0, r3
 800b94a:	370c      	adds	r7, #12
 800b94c:	46bd      	mov	sp, r7
 800b94e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b952:	4770      	bx	lr
 800b954:	200013dc 	.word	0x200013dc
 800b958:	200013f8 	.word	0x200013f8

0800b95c <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800b95c:	b580      	push	{r7, lr}
 800b95e:	b084      	sub	sp, #16
 800b960:	af00      	add	r7, sp, #0
 800b962:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800b964:	687b      	ldr	r3, [r7, #4]
 800b966:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800b968:	2300      	movs	r3, #0
 800b96a:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800b96c:	687b      	ldr	r3, [r7, #4]
 800b96e:	2b00      	cmp	r3, #0
 800b970:	d051      	beq.n	800ba16 <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800b972:	68bb      	ldr	r3, [r7, #8]
 800b974:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b976:	4b2a      	ldr	r3, [pc, #168]	@ (800ba20 <xTaskPriorityInherit+0xc4>)
 800b978:	681b      	ldr	r3, [r3, #0]
 800b97a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b97c:	429a      	cmp	r2, r3
 800b97e:	d241      	bcs.n	800ba04 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800b980:	68bb      	ldr	r3, [r7, #8]
 800b982:	699b      	ldr	r3, [r3, #24]
 800b984:	2b00      	cmp	r3, #0
 800b986:	db06      	blt.n	800b996 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b988:	4b25      	ldr	r3, [pc, #148]	@ (800ba20 <xTaskPriorityInherit+0xc4>)
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b98e:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800b992:	68bb      	ldr	r3, [r7, #8]
 800b994:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800b996:	68bb      	ldr	r3, [r7, #8]
 800b998:	6959      	ldr	r1, [r3, #20]
 800b99a:	68bb      	ldr	r3, [r7, #8]
 800b99c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b99e:	4613      	mov	r3, r2
 800b9a0:	009b      	lsls	r3, r3, #2
 800b9a2:	4413      	add	r3, r2
 800b9a4:	009b      	lsls	r3, r3, #2
 800b9a6:	4a1f      	ldr	r2, [pc, #124]	@ (800ba24 <xTaskPriorityInherit+0xc8>)
 800b9a8:	4413      	add	r3, r2
 800b9aa:	4299      	cmp	r1, r3
 800b9ac:	d122      	bne.n	800b9f4 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800b9ae:	68bb      	ldr	r3, [r7, #8]
 800b9b0:	3304      	adds	r3, #4
 800b9b2:	4618      	mov	r0, r3
 800b9b4:	f7fe f9f8 	bl	8009da8 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b9b8:	4b19      	ldr	r3, [pc, #100]	@ (800ba20 <xTaskPriorityInherit+0xc4>)
 800b9ba:	681b      	ldr	r3, [r3, #0]
 800b9bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b9be:	68bb      	ldr	r3, [r7, #8]
 800b9c0:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800b9c2:	68bb      	ldr	r3, [r7, #8]
 800b9c4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b9c6:	4b18      	ldr	r3, [pc, #96]	@ (800ba28 <xTaskPriorityInherit+0xcc>)
 800b9c8:	681b      	ldr	r3, [r3, #0]
 800b9ca:	429a      	cmp	r2, r3
 800b9cc:	d903      	bls.n	800b9d6 <xTaskPriorityInherit+0x7a>
 800b9ce:	68bb      	ldr	r3, [r7, #8]
 800b9d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b9d2:	4a15      	ldr	r2, [pc, #84]	@ (800ba28 <xTaskPriorityInherit+0xcc>)
 800b9d4:	6013      	str	r3, [r2, #0]
 800b9d6:	68bb      	ldr	r3, [r7, #8]
 800b9d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b9da:	4613      	mov	r3, r2
 800b9dc:	009b      	lsls	r3, r3, #2
 800b9de:	4413      	add	r3, r2
 800b9e0:	009b      	lsls	r3, r3, #2
 800b9e2:	4a10      	ldr	r2, [pc, #64]	@ (800ba24 <xTaskPriorityInherit+0xc8>)
 800b9e4:	441a      	add	r2, r3
 800b9e6:	68bb      	ldr	r3, [r7, #8]
 800b9e8:	3304      	adds	r3, #4
 800b9ea:	4619      	mov	r1, r3
 800b9ec:	4610      	mov	r0, r2
 800b9ee:	f7fe f97e 	bl	8009cee <vListInsertEnd>
 800b9f2:	e004      	b.n	800b9fe <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800b9f4:	4b0a      	ldr	r3, [pc, #40]	@ (800ba20 <xTaskPriorityInherit+0xc4>)
 800b9f6:	681b      	ldr	r3, [r3, #0]
 800b9f8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b9fa:	68bb      	ldr	r3, [r7, #8]
 800b9fc:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800b9fe:	2301      	movs	r3, #1
 800ba00:	60fb      	str	r3, [r7, #12]
 800ba02:	e008      	b.n	800ba16 <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800ba04:	68bb      	ldr	r3, [r7, #8]
 800ba06:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800ba08:	4b05      	ldr	r3, [pc, #20]	@ (800ba20 <xTaskPriorityInherit+0xc4>)
 800ba0a:	681b      	ldr	r3, [r3, #0]
 800ba0c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ba0e:	429a      	cmp	r2, r3
 800ba10:	d201      	bcs.n	800ba16 <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800ba12:	2301      	movs	r3, #1
 800ba14:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800ba16:	68fb      	ldr	r3, [r7, #12]
	}
 800ba18:	4618      	mov	r0, r3
 800ba1a:	3710      	adds	r7, #16
 800ba1c:	46bd      	mov	sp, r7
 800ba1e:	bd80      	pop	{r7, pc}
 800ba20:	20000efc 	.word	0x20000efc
 800ba24:	20000f00 	.word	0x20000f00
 800ba28:	200013d8 	.word	0x200013d8

0800ba2c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800ba2c:	b580      	push	{r7, lr}
 800ba2e:	b086      	sub	sp, #24
 800ba30:	af00      	add	r7, sp, #0
 800ba32:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800ba38:	2300      	movs	r3, #0
 800ba3a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d058      	beq.n	800baf4 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800ba42:	4b2f      	ldr	r3, [pc, #188]	@ (800bb00 <xTaskPriorityDisinherit+0xd4>)
 800ba44:	681b      	ldr	r3, [r3, #0]
 800ba46:	693a      	ldr	r2, [r7, #16]
 800ba48:	429a      	cmp	r2, r3
 800ba4a:	d00b      	beq.n	800ba64 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800ba4c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba50:	f383 8811 	msr	BASEPRI, r3
 800ba54:	f3bf 8f6f 	isb	sy
 800ba58:	f3bf 8f4f 	dsb	sy
 800ba5c:	60fb      	str	r3, [r7, #12]
}
 800ba5e:	bf00      	nop
 800ba60:	bf00      	nop
 800ba62:	e7fd      	b.n	800ba60 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800ba64:	693b      	ldr	r3, [r7, #16]
 800ba66:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ba68:	2b00      	cmp	r3, #0
 800ba6a:	d10b      	bne.n	800ba84 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800ba6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba70:	f383 8811 	msr	BASEPRI, r3
 800ba74:	f3bf 8f6f 	isb	sy
 800ba78:	f3bf 8f4f 	dsb	sy
 800ba7c:	60bb      	str	r3, [r7, #8]
}
 800ba7e:	bf00      	nop
 800ba80:	bf00      	nop
 800ba82:	e7fd      	b.n	800ba80 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800ba84:	693b      	ldr	r3, [r7, #16]
 800ba86:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ba88:	1e5a      	subs	r2, r3, #1
 800ba8a:	693b      	ldr	r3, [r7, #16]
 800ba8c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800ba8e:	693b      	ldr	r3, [r7, #16]
 800ba90:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800ba92:	693b      	ldr	r3, [r7, #16]
 800ba94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800ba96:	429a      	cmp	r2, r3
 800ba98:	d02c      	beq.n	800baf4 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800ba9a:	693b      	ldr	r3, [r7, #16]
 800ba9c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800ba9e:	2b00      	cmp	r3, #0
 800baa0:	d128      	bne.n	800baf4 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800baa2:	693b      	ldr	r3, [r7, #16]
 800baa4:	3304      	adds	r3, #4
 800baa6:	4618      	mov	r0, r3
 800baa8:	f7fe f97e 	bl	8009da8 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800baac:	693b      	ldr	r3, [r7, #16]
 800baae:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800bab0:	693b      	ldr	r3, [r7, #16]
 800bab2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bab4:	693b      	ldr	r3, [r7, #16]
 800bab6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bab8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800babc:	693b      	ldr	r3, [r7, #16]
 800babe:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800bac0:	693b      	ldr	r3, [r7, #16]
 800bac2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bac4:	4b0f      	ldr	r3, [pc, #60]	@ (800bb04 <xTaskPriorityDisinherit+0xd8>)
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	429a      	cmp	r2, r3
 800baca:	d903      	bls.n	800bad4 <xTaskPriorityDisinherit+0xa8>
 800bacc:	693b      	ldr	r3, [r7, #16]
 800bace:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bad0:	4a0c      	ldr	r2, [pc, #48]	@ (800bb04 <xTaskPriorityDisinherit+0xd8>)
 800bad2:	6013      	str	r3, [r2, #0]
 800bad4:	693b      	ldr	r3, [r7, #16]
 800bad6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bad8:	4613      	mov	r3, r2
 800bada:	009b      	lsls	r3, r3, #2
 800badc:	4413      	add	r3, r2
 800bade:	009b      	lsls	r3, r3, #2
 800bae0:	4a09      	ldr	r2, [pc, #36]	@ (800bb08 <xTaskPriorityDisinherit+0xdc>)
 800bae2:	441a      	add	r2, r3
 800bae4:	693b      	ldr	r3, [r7, #16]
 800bae6:	3304      	adds	r3, #4
 800bae8:	4619      	mov	r1, r3
 800baea:	4610      	mov	r0, r2
 800baec:	f7fe f8ff 	bl	8009cee <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800baf0:	2301      	movs	r3, #1
 800baf2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800baf4:	697b      	ldr	r3, [r7, #20]
	}
 800baf6:	4618      	mov	r0, r3
 800baf8:	3718      	adds	r7, #24
 800bafa:	46bd      	mov	sp, r7
 800bafc:	bd80      	pop	{r7, pc}
 800bafe:	bf00      	nop
 800bb00:	20000efc 	.word	0x20000efc
 800bb04:	200013d8 	.word	0x200013d8
 800bb08:	20000f00 	.word	0x20000f00

0800bb0c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800bb0c:	b580      	push	{r7, lr}
 800bb0e:	b088      	sub	sp, #32
 800bb10:	af00      	add	r7, sp, #0
 800bb12:	6078      	str	r0, [r7, #4]
 800bb14:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800bb1a:	2301      	movs	r3, #1
 800bb1c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	d06c      	beq.n	800bbfe <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800bb24:	69bb      	ldr	r3, [r7, #24]
 800bb26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d10b      	bne.n	800bb44 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800bb2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb30:	f383 8811 	msr	BASEPRI, r3
 800bb34:	f3bf 8f6f 	isb	sy
 800bb38:	f3bf 8f4f 	dsb	sy
 800bb3c:	60fb      	str	r3, [r7, #12]
}
 800bb3e:	bf00      	nop
 800bb40:	bf00      	nop
 800bb42:	e7fd      	b.n	800bb40 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800bb44:	69bb      	ldr	r3, [r7, #24]
 800bb46:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bb48:	683a      	ldr	r2, [r7, #0]
 800bb4a:	429a      	cmp	r2, r3
 800bb4c:	d902      	bls.n	800bb54 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800bb4e:	683b      	ldr	r3, [r7, #0]
 800bb50:	61fb      	str	r3, [r7, #28]
 800bb52:	e002      	b.n	800bb5a <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800bb54:	69bb      	ldr	r3, [r7, #24]
 800bb56:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bb58:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800bb5a:	69bb      	ldr	r3, [r7, #24]
 800bb5c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb5e:	69fa      	ldr	r2, [r7, #28]
 800bb60:	429a      	cmp	r2, r3
 800bb62:	d04c      	beq.n	800bbfe <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800bb64:	69bb      	ldr	r3, [r7, #24]
 800bb66:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bb68:	697a      	ldr	r2, [r7, #20]
 800bb6a:	429a      	cmp	r2, r3
 800bb6c:	d147      	bne.n	800bbfe <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800bb6e:	4b26      	ldr	r3, [pc, #152]	@ (800bc08 <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800bb70:	681b      	ldr	r3, [r3, #0]
 800bb72:	69ba      	ldr	r2, [r7, #24]
 800bb74:	429a      	cmp	r2, r3
 800bb76:	d10b      	bne.n	800bb90 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800bb78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb7c:	f383 8811 	msr	BASEPRI, r3
 800bb80:	f3bf 8f6f 	isb	sy
 800bb84:	f3bf 8f4f 	dsb	sy
 800bb88:	60bb      	str	r3, [r7, #8]
}
 800bb8a:	bf00      	nop
 800bb8c:	bf00      	nop
 800bb8e:	e7fd      	b.n	800bb8c <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800bb90:	69bb      	ldr	r3, [r7, #24]
 800bb92:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb94:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800bb96:	69bb      	ldr	r3, [r7, #24]
 800bb98:	69fa      	ldr	r2, [r7, #28]
 800bb9a:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800bb9c:	69bb      	ldr	r3, [r7, #24]
 800bb9e:	699b      	ldr	r3, [r3, #24]
 800bba0:	2b00      	cmp	r3, #0
 800bba2:	db04      	blt.n	800bbae <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bba4:	69fb      	ldr	r3, [r7, #28]
 800bba6:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800bbaa:	69bb      	ldr	r3, [r7, #24]
 800bbac:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800bbae:	69bb      	ldr	r3, [r7, #24]
 800bbb0:	6959      	ldr	r1, [r3, #20]
 800bbb2:	693a      	ldr	r2, [r7, #16]
 800bbb4:	4613      	mov	r3, r2
 800bbb6:	009b      	lsls	r3, r3, #2
 800bbb8:	4413      	add	r3, r2
 800bbba:	009b      	lsls	r3, r3, #2
 800bbbc:	4a13      	ldr	r2, [pc, #76]	@ (800bc0c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800bbbe:	4413      	add	r3, r2
 800bbc0:	4299      	cmp	r1, r3
 800bbc2:	d11c      	bne.n	800bbfe <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bbc4:	69bb      	ldr	r3, [r7, #24]
 800bbc6:	3304      	adds	r3, #4
 800bbc8:	4618      	mov	r0, r3
 800bbca:	f7fe f8ed 	bl	8009da8 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800bbce:	69bb      	ldr	r3, [r7, #24]
 800bbd0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bbd2:	4b0f      	ldr	r3, [pc, #60]	@ (800bc10 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800bbd4:	681b      	ldr	r3, [r3, #0]
 800bbd6:	429a      	cmp	r2, r3
 800bbd8:	d903      	bls.n	800bbe2 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800bbda:	69bb      	ldr	r3, [r7, #24]
 800bbdc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bbde:	4a0c      	ldr	r2, [pc, #48]	@ (800bc10 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800bbe0:	6013      	str	r3, [r2, #0]
 800bbe2:	69bb      	ldr	r3, [r7, #24]
 800bbe4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bbe6:	4613      	mov	r3, r2
 800bbe8:	009b      	lsls	r3, r3, #2
 800bbea:	4413      	add	r3, r2
 800bbec:	009b      	lsls	r3, r3, #2
 800bbee:	4a07      	ldr	r2, [pc, #28]	@ (800bc0c <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800bbf0:	441a      	add	r2, r3
 800bbf2:	69bb      	ldr	r3, [r7, #24]
 800bbf4:	3304      	adds	r3, #4
 800bbf6:	4619      	mov	r1, r3
 800bbf8:	4610      	mov	r0, r2
 800bbfa:	f7fe f878 	bl	8009cee <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800bbfe:	bf00      	nop
 800bc00:	3720      	adds	r7, #32
 800bc02:	46bd      	mov	sp, r7
 800bc04:	bd80      	pop	{r7, pc}
 800bc06:	bf00      	nop
 800bc08:	20000efc 	.word	0x20000efc
 800bc0c:	20000f00 	.word	0x20000f00
 800bc10:	200013d8 	.word	0x200013d8

0800bc14 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800bc14:	b480      	push	{r7}
 800bc16:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800bc18:	4b07      	ldr	r3, [pc, #28]	@ (800bc38 <pvTaskIncrementMutexHeldCount+0x24>)
 800bc1a:	681b      	ldr	r3, [r3, #0]
 800bc1c:	2b00      	cmp	r3, #0
 800bc1e:	d004      	beq.n	800bc2a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800bc20:	4b05      	ldr	r3, [pc, #20]	@ (800bc38 <pvTaskIncrementMutexHeldCount+0x24>)
 800bc22:	681b      	ldr	r3, [r3, #0]
 800bc24:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800bc26:	3201      	adds	r2, #1
 800bc28:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800bc2a:	4b03      	ldr	r3, [pc, #12]	@ (800bc38 <pvTaskIncrementMutexHeldCount+0x24>)
 800bc2c:	681b      	ldr	r3, [r3, #0]
	}
 800bc2e:	4618      	mov	r0, r3
 800bc30:	46bd      	mov	sp, r7
 800bc32:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc36:	4770      	bx	lr
 800bc38:	20000efc 	.word	0x20000efc

0800bc3c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800bc3c:	b580      	push	{r7, lr}
 800bc3e:	b084      	sub	sp, #16
 800bc40:	af00      	add	r7, sp, #0
 800bc42:	6078      	str	r0, [r7, #4]
 800bc44:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800bc46:	4b21      	ldr	r3, [pc, #132]	@ (800bccc <prvAddCurrentTaskToDelayedList+0x90>)
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bc4c:	4b20      	ldr	r3, [pc, #128]	@ (800bcd0 <prvAddCurrentTaskToDelayedList+0x94>)
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	3304      	adds	r3, #4
 800bc52:	4618      	mov	r0, r3
 800bc54:	f7fe f8a8 	bl	8009da8 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800bc5e:	d10a      	bne.n	800bc76 <prvAddCurrentTaskToDelayedList+0x3a>
 800bc60:	683b      	ldr	r3, [r7, #0]
 800bc62:	2b00      	cmp	r3, #0
 800bc64:	d007      	beq.n	800bc76 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bc66:	4b1a      	ldr	r3, [pc, #104]	@ (800bcd0 <prvAddCurrentTaskToDelayedList+0x94>)
 800bc68:	681b      	ldr	r3, [r3, #0]
 800bc6a:	3304      	adds	r3, #4
 800bc6c:	4619      	mov	r1, r3
 800bc6e:	4819      	ldr	r0, [pc, #100]	@ (800bcd4 <prvAddCurrentTaskToDelayedList+0x98>)
 800bc70:	f7fe f83d 	bl	8009cee <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800bc74:	e026      	b.n	800bcc4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800bc76:	68fa      	ldr	r2, [r7, #12]
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	4413      	add	r3, r2
 800bc7c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800bc7e:	4b14      	ldr	r3, [pc, #80]	@ (800bcd0 <prvAddCurrentTaskToDelayedList+0x94>)
 800bc80:	681b      	ldr	r3, [r3, #0]
 800bc82:	68ba      	ldr	r2, [r7, #8]
 800bc84:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800bc86:	68ba      	ldr	r2, [r7, #8]
 800bc88:	68fb      	ldr	r3, [r7, #12]
 800bc8a:	429a      	cmp	r2, r3
 800bc8c:	d209      	bcs.n	800bca2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bc8e:	4b12      	ldr	r3, [pc, #72]	@ (800bcd8 <prvAddCurrentTaskToDelayedList+0x9c>)
 800bc90:	681a      	ldr	r2, [r3, #0]
 800bc92:	4b0f      	ldr	r3, [pc, #60]	@ (800bcd0 <prvAddCurrentTaskToDelayedList+0x94>)
 800bc94:	681b      	ldr	r3, [r3, #0]
 800bc96:	3304      	adds	r3, #4
 800bc98:	4619      	mov	r1, r3
 800bc9a:	4610      	mov	r0, r2
 800bc9c:	f7fe f84b 	bl	8009d36 <vListInsert>
}
 800bca0:	e010      	b.n	800bcc4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bca2:	4b0e      	ldr	r3, [pc, #56]	@ (800bcdc <prvAddCurrentTaskToDelayedList+0xa0>)
 800bca4:	681a      	ldr	r2, [r3, #0]
 800bca6:	4b0a      	ldr	r3, [pc, #40]	@ (800bcd0 <prvAddCurrentTaskToDelayedList+0x94>)
 800bca8:	681b      	ldr	r3, [r3, #0]
 800bcaa:	3304      	adds	r3, #4
 800bcac:	4619      	mov	r1, r3
 800bcae:	4610      	mov	r0, r2
 800bcb0:	f7fe f841 	bl	8009d36 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800bcb4:	4b0a      	ldr	r3, [pc, #40]	@ (800bce0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	68ba      	ldr	r2, [r7, #8]
 800bcba:	429a      	cmp	r2, r3
 800bcbc:	d202      	bcs.n	800bcc4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800bcbe:	4a08      	ldr	r2, [pc, #32]	@ (800bce0 <prvAddCurrentTaskToDelayedList+0xa4>)
 800bcc0:	68bb      	ldr	r3, [r7, #8]
 800bcc2:	6013      	str	r3, [r2, #0]
}
 800bcc4:	bf00      	nop
 800bcc6:	3710      	adds	r7, #16
 800bcc8:	46bd      	mov	sp, r7
 800bcca:	bd80      	pop	{r7, pc}
 800bccc:	200013d4 	.word	0x200013d4
 800bcd0:	20000efc 	.word	0x20000efc
 800bcd4:	200013bc 	.word	0x200013bc
 800bcd8:	2000138c 	.word	0x2000138c
 800bcdc:	20001388 	.word	0x20001388
 800bce0:	200013f0 	.word	0x200013f0

0800bce4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800bce4:	b580      	push	{r7, lr}
 800bce6:	b08a      	sub	sp, #40	@ 0x28
 800bce8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800bcea:	2300      	movs	r3, #0
 800bcec:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800bcee:	f000 fb13 	bl	800c318 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800bcf2:	4b1d      	ldr	r3, [pc, #116]	@ (800bd68 <xTimerCreateTimerTask+0x84>)
 800bcf4:	681b      	ldr	r3, [r3, #0]
 800bcf6:	2b00      	cmp	r3, #0
 800bcf8:	d021      	beq.n	800bd3e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800bcfa:	2300      	movs	r3, #0
 800bcfc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800bcfe:	2300      	movs	r3, #0
 800bd00:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800bd02:	1d3a      	adds	r2, r7, #4
 800bd04:	f107 0108 	add.w	r1, r7, #8
 800bd08:	f107 030c 	add.w	r3, r7, #12
 800bd0c:	4618      	mov	r0, r3
 800bd0e:	f7fd ffa7 	bl	8009c60 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800bd12:	6879      	ldr	r1, [r7, #4]
 800bd14:	68bb      	ldr	r3, [r7, #8]
 800bd16:	68fa      	ldr	r2, [r7, #12]
 800bd18:	9202      	str	r2, [sp, #8]
 800bd1a:	9301      	str	r3, [sp, #4]
 800bd1c:	2302      	movs	r3, #2
 800bd1e:	9300      	str	r3, [sp, #0]
 800bd20:	2300      	movs	r3, #0
 800bd22:	460a      	mov	r2, r1
 800bd24:	4911      	ldr	r1, [pc, #68]	@ (800bd6c <xTimerCreateTimerTask+0x88>)
 800bd26:	4812      	ldr	r0, [pc, #72]	@ (800bd70 <xTimerCreateTimerTask+0x8c>)
 800bd28:	f7fe ffa2 	bl	800ac70 <xTaskCreateStatic>
 800bd2c:	4603      	mov	r3, r0
 800bd2e:	4a11      	ldr	r2, [pc, #68]	@ (800bd74 <xTimerCreateTimerTask+0x90>)
 800bd30:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800bd32:	4b10      	ldr	r3, [pc, #64]	@ (800bd74 <xTimerCreateTimerTask+0x90>)
 800bd34:	681b      	ldr	r3, [r3, #0]
 800bd36:	2b00      	cmp	r3, #0
 800bd38:	d001      	beq.n	800bd3e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800bd3a:	2301      	movs	r3, #1
 800bd3c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800bd3e:	697b      	ldr	r3, [r7, #20]
 800bd40:	2b00      	cmp	r3, #0
 800bd42:	d10b      	bne.n	800bd5c <xTimerCreateTimerTask+0x78>
	__asm volatile
 800bd44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd48:	f383 8811 	msr	BASEPRI, r3
 800bd4c:	f3bf 8f6f 	isb	sy
 800bd50:	f3bf 8f4f 	dsb	sy
 800bd54:	613b      	str	r3, [r7, #16]
}
 800bd56:	bf00      	nop
 800bd58:	bf00      	nop
 800bd5a:	e7fd      	b.n	800bd58 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800bd5c:	697b      	ldr	r3, [r7, #20]
}
 800bd5e:	4618      	mov	r0, r3
 800bd60:	3718      	adds	r7, #24
 800bd62:	46bd      	mov	sp, r7
 800bd64:	bd80      	pop	{r7, pc}
 800bd66:	bf00      	nop
 800bd68:	2000142c 	.word	0x2000142c
 800bd6c:	08010374 	.word	0x08010374
 800bd70:	0800beb1 	.word	0x0800beb1
 800bd74:	20001430 	.word	0x20001430

0800bd78 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800bd78:	b580      	push	{r7, lr}
 800bd7a:	b08a      	sub	sp, #40	@ 0x28
 800bd7c:	af00      	add	r7, sp, #0
 800bd7e:	60f8      	str	r0, [r7, #12]
 800bd80:	60b9      	str	r1, [r7, #8]
 800bd82:	607a      	str	r2, [r7, #4]
 800bd84:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800bd86:	2300      	movs	r3, #0
 800bd88:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800bd8a:	68fb      	ldr	r3, [r7, #12]
 800bd8c:	2b00      	cmp	r3, #0
 800bd8e:	d10b      	bne.n	800bda8 <xTimerGenericCommand+0x30>
	__asm volatile
 800bd90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bd94:	f383 8811 	msr	BASEPRI, r3
 800bd98:	f3bf 8f6f 	isb	sy
 800bd9c:	f3bf 8f4f 	dsb	sy
 800bda0:	623b      	str	r3, [r7, #32]
}
 800bda2:	bf00      	nop
 800bda4:	bf00      	nop
 800bda6:	e7fd      	b.n	800bda4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800bda8:	4b19      	ldr	r3, [pc, #100]	@ (800be10 <xTimerGenericCommand+0x98>)
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	2b00      	cmp	r3, #0
 800bdae:	d02a      	beq.n	800be06 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800bdb0:	68bb      	ldr	r3, [r7, #8]
 800bdb2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800bdb8:	68fb      	ldr	r3, [r7, #12]
 800bdba:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800bdbc:	68bb      	ldr	r3, [r7, #8]
 800bdbe:	2b05      	cmp	r3, #5
 800bdc0:	dc18      	bgt.n	800bdf4 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800bdc2:	f7ff fdad 	bl	800b920 <xTaskGetSchedulerState>
 800bdc6:	4603      	mov	r3, r0
 800bdc8:	2b02      	cmp	r3, #2
 800bdca:	d109      	bne.n	800bde0 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800bdcc:	4b10      	ldr	r3, [pc, #64]	@ (800be10 <xTimerGenericCommand+0x98>)
 800bdce:	6818      	ldr	r0, [r3, #0]
 800bdd0:	f107 0110 	add.w	r1, r7, #16
 800bdd4:	2300      	movs	r3, #0
 800bdd6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bdd8:	f7fe f9a2 	bl	800a120 <xQueueGenericSend>
 800bddc:	6278      	str	r0, [r7, #36]	@ 0x24
 800bdde:	e012      	b.n	800be06 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800bde0:	4b0b      	ldr	r3, [pc, #44]	@ (800be10 <xTimerGenericCommand+0x98>)
 800bde2:	6818      	ldr	r0, [r3, #0]
 800bde4:	f107 0110 	add.w	r1, r7, #16
 800bde8:	2300      	movs	r3, #0
 800bdea:	2200      	movs	r2, #0
 800bdec:	f7fe f998 	bl	800a120 <xQueueGenericSend>
 800bdf0:	6278      	str	r0, [r7, #36]	@ 0x24
 800bdf2:	e008      	b.n	800be06 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800bdf4:	4b06      	ldr	r3, [pc, #24]	@ (800be10 <xTimerGenericCommand+0x98>)
 800bdf6:	6818      	ldr	r0, [r3, #0]
 800bdf8:	f107 0110 	add.w	r1, r7, #16
 800bdfc:	2300      	movs	r3, #0
 800bdfe:	683a      	ldr	r2, [r7, #0]
 800be00:	f7fe fa90 	bl	800a324 <xQueueGenericSendFromISR>
 800be04:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800be06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800be08:	4618      	mov	r0, r3
 800be0a:	3728      	adds	r7, #40	@ 0x28
 800be0c:	46bd      	mov	sp, r7
 800be0e:	bd80      	pop	{r7, pc}
 800be10:	2000142c 	.word	0x2000142c

0800be14 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800be14:	b580      	push	{r7, lr}
 800be16:	b088      	sub	sp, #32
 800be18:	af02      	add	r7, sp, #8
 800be1a:	6078      	str	r0, [r7, #4]
 800be1c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800be1e:	4b23      	ldr	r3, [pc, #140]	@ (800beac <prvProcessExpiredTimer+0x98>)
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	68db      	ldr	r3, [r3, #12]
 800be24:	68db      	ldr	r3, [r3, #12]
 800be26:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800be28:	697b      	ldr	r3, [r7, #20]
 800be2a:	3304      	adds	r3, #4
 800be2c:	4618      	mov	r0, r3
 800be2e:	f7fd ffbb 	bl	8009da8 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800be32:	697b      	ldr	r3, [r7, #20]
 800be34:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800be38:	f003 0304 	and.w	r3, r3, #4
 800be3c:	2b00      	cmp	r3, #0
 800be3e:	d023      	beq.n	800be88 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800be40:	697b      	ldr	r3, [r7, #20]
 800be42:	699a      	ldr	r2, [r3, #24]
 800be44:	687b      	ldr	r3, [r7, #4]
 800be46:	18d1      	adds	r1, r2, r3
 800be48:	687b      	ldr	r3, [r7, #4]
 800be4a:	683a      	ldr	r2, [r7, #0]
 800be4c:	6978      	ldr	r0, [r7, #20]
 800be4e:	f000 f8d5 	bl	800bffc <prvInsertTimerInActiveList>
 800be52:	4603      	mov	r3, r0
 800be54:	2b00      	cmp	r3, #0
 800be56:	d020      	beq.n	800be9a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800be58:	2300      	movs	r3, #0
 800be5a:	9300      	str	r3, [sp, #0]
 800be5c:	2300      	movs	r3, #0
 800be5e:	687a      	ldr	r2, [r7, #4]
 800be60:	2100      	movs	r1, #0
 800be62:	6978      	ldr	r0, [r7, #20]
 800be64:	f7ff ff88 	bl	800bd78 <xTimerGenericCommand>
 800be68:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800be6a:	693b      	ldr	r3, [r7, #16]
 800be6c:	2b00      	cmp	r3, #0
 800be6e:	d114      	bne.n	800be9a <prvProcessExpiredTimer+0x86>
	__asm volatile
 800be70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be74:	f383 8811 	msr	BASEPRI, r3
 800be78:	f3bf 8f6f 	isb	sy
 800be7c:	f3bf 8f4f 	dsb	sy
 800be80:	60fb      	str	r3, [r7, #12]
}
 800be82:	bf00      	nop
 800be84:	bf00      	nop
 800be86:	e7fd      	b.n	800be84 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800be88:	697b      	ldr	r3, [r7, #20]
 800be8a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800be8e:	f023 0301 	bic.w	r3, r3, #1
 800be92:	b2da      	uxtb	r2, r3
 800be94:	697b      	ldr	r3, [r7, #20]
 800be96:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800be9a:	697b      	ldr	r3, [r7, #20]
 800be9c:	6a1b      	ldr	r3, [r3, #32]
 800be9e:	6978      	ldr	r0, [r7, #20]
 800bea0:	4798      	blx	r3
}
 800bea2:	bf00      	nop
 800bea4:	3718      	adds	r7, #24
 800bea6:	46bd      	mov	sp, r7
 800bea8:	bd80      	pop	{r7, pc}
 800beaa:	bf00      	nop
 800beac:	20001424 	.word	0x20001424

0800beb0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800beb0:	b580      	push	{r7, lr}
 800beb2:	b084      	sub	sp, #16
 800beb4:	af00      	add	r7, sp, #0
 800beb6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800beb8:	f107 0308 	add.w	r3, r7, #8
 800bebc:	4618      	mov	r0, r3
 800bebe:	f000 f859 	bl	800bf74 <prvGetNextExpireTime>
 800bec2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800bec4:	68bb      	ldr	r3, [r7, #8]
 800bec6:	4619      	mov	r1, r3
 800bec8:	68f8      	ldr	r0, [r7, #12]
 800beca:	f000 f805 	bl	800bed8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800bece:	f000 f8d7 	bl	800c080 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bed2:	bf00      	nop
 800bed4:	e7f0      	b.n	800beb8 <prvTimerTask+0x8>
	...

0800bed8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800bed8:	b580      	push	{r7, lr}
 800beda:	b084      	sub	sp, #16
 800bedc:	af00      	add	r7, sp, #0
 800bede:	6078      	str	r0, [r7, #4]
 800bee0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800bee2:	f7ff f929 	bl	800b138 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800bee6:	f107 0308 	add.w	r3, r7, #8
 800beea:	4618      	mov	r0, r3
 800beec:	f000 f866 	bl	800bfbc <prvSampleTimeNow>
 800bef0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800bef2:	68bb      	ldr	r3, [r7, #8]
 800bef4:	2b00      	cmp	r3, #0
 800bef6:	d130      	bne.n	800bf5a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800bef8:	683b      	ldr	r3, [r7, #0]
 800befa:	2b00      	cmp	r3, #0
 800befc:	d10a      	bne.n	800bf14 <prvProcessTimerOrBlockTask+0x3c>
 800befe:	687a      	ldr	r2, [r7, #4]
 800bf00:	68fb      	ldr	r3, [r7, #12]
 800bf02:	429a      	cmp	r2, r3
 800bf04:	d806      	bhi.n	800bf14 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800bf06:	f7ff f925 	bl	800b154 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800bf0a:	68f9      	ldr	r1, [r7, #12]
 800bf0c:	6878      	ldr	r0, [r7, #4]
 800bf0e:	f7ff ff81 	bl	800be14 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800bf12:	e024      	b.n	800bf5e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800bf14:	683b      	ldr	r3, [r7, #0]
 800bf16:	2b00      	cmp	r3, #0
 800bf18:	d008      	beq.n	800bf2c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800bf1a:	4b13      	ldr	r3, [pc, #76]	@ (800bf68 <prvProcessTimerOrBlockTask+0x90>)
 800bf1c:	681b      	ldr	r3, [r3, #0]
 800bf1e:	681b      	ldr	r3, [r3, #0]
 800bf20:	2b00      	cmp	r3, #0
 800bf22:	d101      	bne.n	800bf28 <prvProcessTimerOrBlockTask+0x50>
 800bf24:	2301      	movs	r3, #1
 800bf26:	e000      	b.n	800bf2a <prvProcessTimerOrBlockTask+0x52>
 800bf28:	2300      	movs	r3, #0
 800bf2a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800bf2c:	4b0f      	ldr	r3, [pc, #60]	@ (800bf6c <prvProcessTimerOrBlockTask+0x94>)
 800bf2e:	6818      	ldr	r0, [r3, #0]
 800bf30:	687a      	ldr	r2, [r7, #4]
 800bf32:	68fb      	ldr	r3, [r7, #12]
 800bf34:	1ad3      	subs	r3, r2, r3
 800bf36:	683a      	ldr	r2, [r7, #0]
 800bf38:	4619      	mov	r1, r3
 800bf3a:	f7fe fe65 	bl	800ac08 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800bf3e:	f7ff f909 	bl	800b154 <xTaskResumeAll>
 800bf42:	4603      	mov	r3, r0
 800bf44:	2b00      	cmp	r3, #0
 800bf46:	d10a      	bne.n	800bf5e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800bf48:	4b09      	ldr	r3, [pc, #36]	@ (800bf70 <prvProcessTimerOrBlockTask+0x98>)
 800bf4a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800bf4e:	601a      	str	r2, [r3, #0]
 800bf50:	f3bf 8f4f 	dsb	sy
 800bf54:	f3bf 8f6f 	isb	sy
}
 800bf58:	e001      	b.n	800bf5e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800bf5a:	f7ff f8fb 	bl	800b154 <xTaskResumeAll>
}
 800bf5e:	bf00      	nop
 800bf60:	3710      	adds	r7, #16
 800bf62:	46bd      	mov	sp, r7
 800bf64:	bd80      	pop	{r7, pc}
 800bf66:	bf00      	nop
 800bf68:	20001428 	.word	0x20001428
 800bf6c:	2000142c 	.word	0x2000142c
 800bf70:	e000ed04 	.word	0xe000ed04

0800bf74 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800bf74:	b480      	push	{r7}
 800bf76:	b085      	sub	sp, #20
 800bf78:	af00      	add	r7, sp, #0
 800bf7a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800bf7c:	4b0e      	ldr	r3, [pc, #56]	@ (800bfb8 <prvGetNextExpireTime+0x44>)
 800bf7e:	681b      	ldr	r3, [r3, #0]
 800bf80:	681b      	ldr	r3, [r3, #0]
 800bf82:	2b00      	cmp	r3, #0
 800bf84:	d101      	bne.n	800bf8a <prvGetNextExpireTime+0x16>
 800bf86:	2201      	movs	r2, #1
 800bf88:	e000      	b.n	800bf8c <prvGetNextExpireTime+0x18>
 800bf8a:	2200      	movs	r2, #0
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800bf90:	687b      	ldr	r3, [r7, #4]
 800bf92:	681b      	ldr	r3, [r3, #0]
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	d105      	bne.n	800bfa4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800bf98:	4b07      	ldr	r3, [pc, #28]	@ (800bfb8 <prvGetNextExpireTime+0x44>)
 800bf9a:	681b      	ldr	r3, [r3, #0]
 800bf9c:	68db      	ldr	r3, [r3, #12]
 800bf9e:	681b      	ldr	r3, [r3, #0]
 800bfa0:	60fb      	str	r3, [r7, #12]
 800bfa2:	e001      	b.n	800bfa8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800bfa4:	2300      	movs	r3, #0
 800bfa6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800bfa8:	68fb      	ldr	r3, [r7, #12]
}
 800bfaa:	4618      	mov	r0, r3
 800bfac:	3714      	adds	r7, #20
 800bfae:	46bd      	mov	sp, r7
 800bfb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bfb4:	4770      	bx	lr
 800bfb6:	bf00      	nop
 800bfb8:	20001424 	.word	0x20001424

0800bfbc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800bfbc:	b580      	push	{r7, lr}
 800bfbe:	b084      	sub	sp, #16
 800bfc0:	af00      	add	r7, sp, #0
 800bfc2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800bfc4:	f7ff f964 	bl	800b290 <xTaskGetTickCount>
 800bfc8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800bfca:	4b0b      	ldr	r3, [pc, #44]	@ (800bff8 <prvSampleTimeNow+0x3c>)
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	68fa      	ldr	r2, [r7, #12]
 800bfd0:	429a      	cmp	r2, r3
 800bfd2:	d205      	bcs.n	800bfe0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800bfd4:	f000 f93a 	bl	800c24c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800bfd8:	687b      	ldr	r3, [r7, #4]
 800bfda:	2201      	movs	r2, #1
 800bfdc:	601a      	str	r2, [r3, #0]
 800bfde:	e002      	b.n	800bfe6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	2200      	movs	r2, #0
 800bfe4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800bfe6:	4a04      	ldr	r2, [pc, #16]	@ (800bff8 <prvSampleTimeNow+0x3c>)
 800bfe8:	68fb      	ldr	r3, [r7, #12]
 800bfea:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800bfec:	68fb      	ldr	r3, [r7, #12]
}
 800bfee:	4618      	mov	r0, r3
 800bff0:	3710      	adds	r7, #16
 800bff2:	46bd      	mov	sp, r7
 800bff4:	bd80      	pop	{r7, pc}
 800bff6:	bf00      	nop
 800bff8:	20001434 	.word	0x20001434

0800bffc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800bffc:	b580      	push	{r7, lr}
 800bffe:	b086      	sub	sp, #24
 800c000:	af00      	add	r7, sp, #0
 800c002:	60f8      	str	r0, [r7, #12]
 800c004:	60b9      	str	r1, [r7, #8]
 800c006:	607a      	str	r2, [r7, #4]
 800c008:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c00a:	2300      	movs	r3, #0
 800c00c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c00e:	68fb      	ldr	r3, [r7, #12]
 800c010:	68ba      	ldr	r2, [r7, #8]
 800c012:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c014:	68fb      	ldr	r3, [r7, #12]
 800c016:	68fa      	ldr	r2, [r7, #12]
 800c018:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c01a:	68ba      	ldr	r2, [r7, #8]
 800c01c:	687b      	ldr	r3, [r7, #4]
 800c01e:	429a      	cmp	r2, r3
 800c020:	d812      	bhi.n	800c048 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c022:	687a      	ldr	r2, [r7, #4]
 800c024:	683b      	ldr	r3, [r7, #0]
 800c026:	1ad2      	subs	r2, r2, r3
 800c028:	68fb      	ldr	r3, [r7, #12]
 800c02a:	699b      	ldr	r3, [r3, #24]
 800c02c:	429a      	cmp	r2, r3
 800c02e:	d302      	bcc.n	800c036 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c030:	2301      	movs	r3, #1
 800c032:	617b      	str	r3, [r7, #20]
 800c034:	e01b      	b.n	800c06e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c036:	4b10      	ldr	r3, [pc, #64]	@ (800c078 <prvInsertTimerInActiveList+0x7c>)
 800c038:	681a      	ldr	r2, [r3, #0]
 800c03a:	68fb      	ldr	r3, [r7, #12]
 800c03c:	3304      	adds	r3, #4
 800c03e:	4619      	mov	r1, r3
 800c040:	4610      	mov	r0, r2
 800c042:	f7fd fe78 	bl	8009d36 <vListInsert>
 800c046:	e012      	b.n	800c06e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c048:	687a      	ldr	r2, [r7, #4]
 800c04a:	683b      	ldr	r3, [r7, #0]
 800c04c:	429a      	cmp	r2, r3
 800c04e:	d206      	bcs.n	800c05e <prvInsertTimerInActiveList+0x62>
 800c050:	68ba      	ldr	r2, [r7, #8]
 800c052:	683b      	ldr	r3, [r7, #0]
 800c054:	429a      	cmp	r2, r3
 800c056:	d302      	bcc.n	800c05e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c058:	2301      	movs	r3, #1
 800c05a:	617b      	str	r3, [r7, #20]
 800c05c:	e007      	b.n	800c06e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c05e:	4b07      	ldr	r3, [pc, #28]	@ (800c07c <prvInsertTimerInActiveList+0x80>)
 800c060:	681a      	ldr	r2, [r3, #0]
 800c062:	68fb      	ldr	r3, [r7, #12]
 800c064:	3304      	adds	r3, #4
 800c066:	4619      	mov	r1, r3
 800c068:	4610      	mov	r0, r2
 800c06a:	f7fd fe64 	bl	8009d36 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c06e:	697b      	ldr	r3, [r7, #20]
}
 800c070:	4618      	mov	r0, r3
 800c072:	3718      	adds	r7, #24
 800c074:	46bd      	mov	sp, r7
 800c076:	bd80      	pop	{r7, pc}
 800c078:	20001428 	.word	0x20001428
 800c07c:	20001424 	.word	0x20001424

0800c080 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c080:	b580      	push	{r7, lr}
 800c082:	b08e      	sub	sp, #56	@ 0x38
 800c084:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c086:	e0ce      	b.n	800c226 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	2b00      	cmp	r3, #0
 800c08c:	da19      	bge.n	800c0c2 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c08e:	1d3b      	adds	r3, r7, #4
 800c090:	3304      	adds	r3, #4
 800c092:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800c094:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c096:	2b00      	cmp	r3, #0
 800c098:	d10b      	bne.n	800c0b2 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800c09a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c09e:	f383 8811 	msr	BASEPRI, r3
 800c0a2:	f3bf 8f6f 	isb	sy
 800c0a6:	f3bf 8f4f 	dsb	sy
 800c0aa:	61fb      	str	r3, [r7, #28]
}
 800c0ac:	bf00      	nop
 800c0ae:	bf00      	nop
 800c0b0:	e7fd      	b.n	800c0ae <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c0b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c0b4:	681b      	ldr	r3, [r3, #0]
 800c0b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c0b8:	6850      	ldr	r0, [r2, #4]
 800c0ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c0bc:	6892      	ldr	r2, [r2, #8]
 800c0be:	4611      	mov	r1, r2
 800c0c0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	f2c0 80ae 	blt.w	800c226 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c0ca:	68fb      	ldr	r3, [r7, #12]
 800c0cc:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c0ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c0d0:	695b      	ldr	r3, [r3, #20]
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	d004      	beq.n	800c0e0 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c0d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c0d8:	3304      	adds	r3, #4
 800c0da:	4618      	mov	r0, r3
 800c0dc:	f7fd fe64 	bl	8009da8 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c0e0:	463b      	mov	r3, r7
 800c0e2:	4618      	mov	r0, r3
 800c0e4:	f7ff ff6a 	bl	800bfbc <prvSampleTimeNow>
 800c0e8:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	2b09      	cmp	r3, #9
 800c0ee:	f200 8097 	bhi.w	800c220 <prvProcessReceivedCommands+0x1a0>
 800c0f2:	a201      	add	r2, pc, #4	@ (adr r2, 800c0f8 <prvProcessReceivedCommands+0x78>)
 800c0f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c0f8:	0800c121 	.word	0x0800c121
 800c0fc:	0800c121 	.word	0x0800c121
 800c100:	0800c121 	.word	0x0800c121
 800c104:	0800c197 	.word	0x0800c197
 800c108:	0800c1ab 	.word	0x0800c1ab
 800c10c:	0800c1f7 	.word	0x0800c1f7
 800c110:	0800c121 	.word	0x0800c121
 800c114:	0800c121 	.word	0x0800c121
 800c118:	0800c197 	.word	0x0800c197
 800c11c:	0800c1ab 	.word	0x0800c1ab
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c120:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c122:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c126:	f043 0301 	orr.w	r3, r3, #1
 800c12a:	b2da      	uxtb	r2, r3
 800c12c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c12e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c132:	68ba      	ldr	r2, [r7, #8]
 800c134:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c136:	699b      	ldr	r3, [r3, #24]
 800c138:	18d1      	adds	r1, r2, r3
 800c13a:	68bb      	ldr	r3, [r7, #8]
 800c13c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c13e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c140:	f7ff ff5c 	bl	800bffc <prvInsertTimerInActiveList>
 800c144:	4603      	mov	r3, r0
 800c146:	2b00      	cmp	r3, #0
 800c148:	d06c      	beq.n	800c224 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c14a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c14c:	6a1b      	ldr	r3, [r3, #32]
 800c14e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c150:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c152:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c154:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c158:	f003 0304 	and.w	r3, r3, #4
 800c15c:	2b00      	cmp	r3, #0
 800c15e:	d061      	beq.n	800c224 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c160:	68ba      	ldr	r2, [r7, #8]
 800c162:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c164:	699b      	ldr	r3, [r3, #24]
 800c166:	441a      	add	r2, r3
 800c168:	2300      	movs	r3, #0
 800c16a:	9300      	str	r3, [sp, #0]
 800c16c:	2300      	movs	r3, #0
 800c16e:	2100      	movs	r1, #0
 800c170:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c172:	f7ff fe01 	bl	800bd78 <xTimerGenericCommand>
 800c176:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c178:	6a3b      	ldr	r3, [r7, #32]
 800c17a:	2b00      	cmp	r3, #0
 800c17c:	d152      	bne.n	800c224 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800c17e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c182:	f383 8811 	msr	BASEPRI, r3
 800c186:	f3bf 8f6f 	isb	sy
 800c18a:	f3bf 8f4f 	dsb	sy
 800c18e:	61bb      	str	r3, [r7, #24]
}
 800c190:	bf00      	nop
 800c192:	bf00      	nop
 800c194:	e7fd      	b.n	800c192 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c196:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c198:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c19c:	f023 0301 	bic.w	r3, r3, #1
 800c1a0:	b2da      	uxtb	r2, r3
 800c1a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c1a4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800c1a8:	e03d      	b.n	800c226 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c1aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c1ac:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c1b0:	f043 0301 	orr.w	r3, r3, #1
 800c1b4:	b2da      	uxtb	r2, r3
 800c1b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c1b8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c1bc:	68ba      	ldr	r2, [r7, #8]
 800c1be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c1c0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c1c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c1c4:	699b      	ldr	r3, [r3, #24]
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	d10b      	bne.n	800c1e2 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800c1ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c1ce:	f383 8811 	msr	BASEPRI, r3
 800c1d2:	f3bf 8f6f 	isb	sy
 800c1d6:	f3bf 8f4f 	dsb	sy
 800c1da:	617b      	str	r3, [r7, #20]
}
 800c1dc:	bf00      	nop
 800c1de:	bf00      	nop
 800c1e0:	e7fd      	b.n	800c1de <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c1e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c1e4:	699a      	ldr	r2, [r3, #24]
 800c1e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1e8:	18d1      	adds	r1, r2, r3
 800c1ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c1ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c1ee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c1f0:	f7ff ff04 	bl	800bffc <prvInsertTimerInActiveList>
					break;
 800c1f4:	e017      	b.n	800c226 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c1f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c1f8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c1fc:	f003 0302 	and.w	r3, r3, #2
 800c200:	2b00      	cmp	r3, #0
 800c202:	d103      	bne.n	800c20c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800c204:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c206:	f000 fbe7 	bl	800c9d8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c20a:	e00c      	b.n	800c226 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c20c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c20e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c212:	f023 0301 	bic.w	r3, r3, #1
 800c216:	b2da      	uxtb	r2, r3
 800c218:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c21a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800c21e:	e002      	b.n	800c226 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800c220:	bf00      	nop
 800c222:	e000      	b.n	800c226 <prvProcessReceivedCommands+0x1a6>
					break;
 800c224:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c226:	4b08      	ldr	r3, [pc, #32]	@ (800c248 <prvProcessReceivedCommands+0x1c8>)
 800c228:	681b      	ldr	r3, [r3, #0]
 800c22a:	1d39      	adds	r1, r7, #4
 800c22c:	2200      	movs	r2, #0
 800c22e:	4618      	mov	r0, r3
 800c230:	f7fe f9a6 	bl	800a580 <xQueueReceive>
 800c234:	4603      	mov	r3, r0
 800c236:	2b00      	cmp	r3, #0
 800c238:	f47f af26 	bne.w	800c088 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800c23c:	bf00      	nop
 800c23e:	bf00      	nop
 800c240:	3730      	adds	r7, #48	@ 0x30
 800c242:	46bd      	mov	sp, r7
 800c244:	bd80      	pop	{r7, pc}
 800c246:	bf00      	nop
 800c248:	2000142c 	.word	0x2000142c

0800c24c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c24c:	b580      	push	{r7, lr}
 800c24e:	b088      	sub	sp, #32
 800c250:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c252:	e049      	b.n	800c2e8 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c254:	4b2e      	ldr	r3, [pc, #184]	@ (800c310 <prvSwitchTimerLists+0xc4>)
 800c256:	681b      	ldr	r3, [r3, #0]
 800c258:	68db      	ldr	r3, [r3, #12]
 800c25a:	681b      	ldr	r3, [r3, #0]
 800c25c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c25e:	4b2c      	ldr	r3, [pc, #176]	@ (800c310 <prvSwitchTimerLists+0xc4>)
 800c260:	681b      	ldr	r3, [r3, #0]
 800c262:	68db      	ldr	r3, [r3, #12]
 800c264:	68db      	ldr	r3, [r3, #12]
 800c266:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c268:	68fb      	ldr	r3, [r7, #12]
 800c26a:	3304      	adds	r3, #4
 800c26c:	4618      	mov	r0, r3
 800c26e:	f7fd fd9b 	bl	8009da8 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c272:	68fb      	ldr	r3, [r7, #12]
 800c274:	6a1b      	ldr	r3, [r3, #32]
 800c276:	68f8      	ldr	r0, [r7, #12]
 800c278:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c27a:	68fb      	ldr	r3, [r7, #12]
 800c27c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c280:	f003 0304 	and.w	r3, r3, #4
 800c284:	2b00      	cmp	r3, #0
 800c286:	d02f      	beq.n	800c2e8 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c288:	68fb      	ldr	r3, [r7, #12]
 800c28a:	699b      	ldr	r3, [r3, #24]
 800c28c:	693a      	ldr	r2, [r7, #16]
 800c28e:	4413      	add	r3, r2
 800c290:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c292:	68ba      	ldr	r2, [r7, #8]
 800c294:	693b      	ldr	r3, [r7, #16]
 800c296:	429a      	cmp	r2, r3
 800c298:	d90e      	bls.n	800c2b8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c29a:	68fb      	ldr	r3, [r7, #12]
 800c29c:	68ba      	ldr	r2, [r7, #8]
 800c29e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c2a0:	68fb      	ldr	r3, [r7, #12]
 800c2a2:	68fa      	ldr	r2, [r7, #12]
 800c2a4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c2a6:	4b1a      	ldr	r3, [pc, #104]	@ (800c310 <prvSwitchTimerLists+0xc4>)
 800c2a8:	681a      	ldr	r2, [r3, #0]
 800c2aa:	68fb      	ldr	r3, [r7, #12]
 800c2ac:	3304      	adds	r3, #4
 800c2ae:	4619      	mov	r1, r3
 800c2b0:	4610      	mov	r0, r2
 800c2b2:	f7fd fd40 	bl	8009d36 <vListInsert>
 800c2b6:	e017      	b.n	800c2e8 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c2b8:	2300      	movs	r3, #0
 800c2ba:	9300      	str	r3, [sp, #0]
 800c2bc:	2300      	movs	r3, #0
 800c2be:	693a      	ldr	r2, [r7, #16]
 800c2c0:	2100      	movs	r1, #0
 800c2c2:	68f8      	ldr	r0, [r7, #12]
 800c2c4:	f7ff fd58 	bl	800bd78 <xTimerGenericCommand>
 800c2c8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c2ca:	687b      	ldr	r3, [r7, #4]
 800c2cc:	2b00      	cmp	r3, #0
 800c2ce:	d10b      	bne.n	800c2e8 <prvSwitchTimerLists+0x9c>
	__asm volatile
 800c2d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c2d4:	f383 8811 	msr	BASEPRI, r3
 800c2d8:	f3bf 8f6f 	isb	sy
 800c2dc:	f3bf 8f4f 	dsb	sy
 800c2e0:	603b      	str	r3, [r7, #0]
}
 800c2e2:	bf00      	nop
 800c2e4:	bf00      	nop
 800c2e6:	e7fd      	b.n	800c2e4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c2e8:	4b09      	ldr	r3, [pc, #36]	@ (800c310 <prvSwitchTimerLists+0xc4>)
 800c2ea:	681b      	ldr	r3, [r3, #0]
 800c2ec:	681b      	ldr	r3, [r3, #0]
 800c2ee:	2b00      	cmp	r3, #0
 800c2f0:	d1b0      	bne.n	800c254 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c2f2:	4b07      	ldr	r3, [pc, #28]	@ (800c310 <prvSwitchTimerLists+0xc4>)
 800c2f4:	681b      	ldr	r3, [r3, #0]
 800c2f6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c2f8:	4b06      	ldr	r3, [pc, #24]	@ (800c314 <prvSwitchTimerLists+0xc8>)
 800c2fa:	681b      	ldr	r3, [r3, #0]
 800c2fc:	4a04      	ldr	r2, [pc, #16]	@ (800c310 <prvSwitchTimerLists+0xc4>)
 800c2fe:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c300:	4a04      	ldr	r2, [pc, #16]	@ (800c314 <prvSwitchTimerLists+0xc8>)
 800c302:	697b      	ldr	r3, [r7, #20]
 800c304:	6013      	str	r3, [r2, #0]
}
 800c306:	bf00      	nop
 800c308:	3718      	adds	r7, #24
 800c30a:	46bd      	mov	sp, r7
 800c30c:	bd80      	pop	{r7, pc}
 800c30e:	bf00      	nop
 800c310:	20001424 	.word	0x20001424
 800c314:	20001428 	.word	0x20001428

0800c318 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c318:	b580      	push	{r7, lr}
 800c31a:	b082      	sub	sp, #8
 800c31c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c31e:	f000 f96b 	bl	800c5f8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c322:	4b15      	ldr	r3, [pc, #84]	@ (800c378 <prvCheckForValidListAndQueue+0x60>)
 800c324:	681b      	ldr	r3, [r3, #0]
 800c326:	2b00      	cmp	r3, #0
 800c328:	d120      	bne.n	800c36c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c32a:	4814      	ldr	r0, [pc, #80]	@ (800c37c <prvCheckForValidListAndQueue+0x64>)
 800c32c:	f7fd fcb2 	bl	8009c94 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c330:	4813      	ldr	r0, [pc, #76]	@ (800c380 <prvCheckForValidListAndQueue+0x68>)
 800c332:	f7fd fcaf 	bl	8009c94 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c336:	4b13      	ldr	r3, [pc, #76]	@ (800c384 <prvCheckForValidListAndQueue+0x6c>)
 800c338:	4a10      	ldr	r2, [pc, #64]	@ (800c37c <prvCheckForValidListAndQueue+0x64>)
 800c33a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c33c:	4b12      	ldr	r3, [pc, #72]	@ (800c388 <prvCheckForValidListAndQueue+0x70>)
 800c33e:	4a10      	ldr	r2, [pc, #64]	@ (800c380 <prvCheckForValidListAndQueue+0x68>)
 800c340:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c342:	2300      	movs	r3, #0
 800c344:	9300      	str	r3, [sp, #0]
 800c346:	4b11      	ldr	r3, [pc, #68]	@ (800c38c <prvCheckForValidListAndQueue+0x74>)
 800c348:	4a11      	ldr	r2, [pc, #68]	@ (800c390 <prvCheckForValidListAndQueue+0x78>)
 800c34a:	2110      	movs	r1, #16
 800c34c:	200a      	movs	r0, #10
 800c34e:	f7fd fdbf 	bl	8009ed0 <xQueueGenericCreateStatic>
 800c352:	4603      	mov	r3, r0
 800c354:	4a08      	ldr	r2, [pc, #32]	@ (800c378 <prvCheckForValidListAndQueue+0x60>)
 800c356:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c358:	4b07      	ldr	r3, [pc, #28]	@ (800c378 <prvCheckForValidListAndQueue+0x60>)
 800c35a:	681b      	ldr	r3, [r3, #0]
 800c35c:	2b00      	cmp	r3, #0
 800c35e:	d005      	beq.n	800c36c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c360:	4b05      	ldr	r3, [pc, #20]	@ (800c378 <prvCheckForValidListAndQueue+0x60>)
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	490b      	ldr	r1, [pc, #44]	@ (800c394 <prvCheckForValidListAndQueue+0x7c>)
 800c366:	4618      	mov	r0, r3
 800c368:	f7fe fc24 	bl	800abb4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c36c:	f000 f976 	bl	800c65c <vPortExitCritical>
}
 800c370:	bf00      	nop
 800c372:	46bd      	mov	sp, r7
 800c374:	bd80      	pop	{r7, pc}
 800c376:	bf00      	nop
 800c378:	2000142c 	.word	0x2000142c
 800c37c:	200013fc 	.word	0x200013fc
 800c380:	20001410 	.word	0x20001410
 800c384:	20001424 	.word	0x20001424
 800c388:	20001428 	.word	0x20001428
 800c38c:	200014d8 	.word	0x200014d8
 800c390:	20001438 	.word	0x20001438
 800c394:	0801037c 	.word	0x0801037c

0800c398 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c398:	b480      	push	{r7}
 800c39a:	b085      	sub	sp, #20
 800c39c:	af00      	add	r7, sp, #0
 800c39e:	60f8      	str	r0, [r7, #12]
 800c3a0:	60b9      	str	r1, [r7, #8]
 800c3a2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c3a4:	68fb      	ldr	r3, [r7, #12]
 800c3a6:	3b04      	subs	r3, #4
 800c3a8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c3aa:	68fb      	ldr	r3, [r7, #12]
 800c3ac:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800c3b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c3b2:	68fb      	ldr	r3, [r7, #12]
 800c3b4:	3b04      	subs	r3, #4
 800c3b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c3b8:	68bb      	ldr	r3, [r7, #8]
 800c3ba:	f023 0201 	bic.w	r2, r3, #1
 800c3be:	68fb      	ldr	r3, [r7, #12]
 800c3c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c3c2:	68fb      	ldr	r3, [r7, #12]
 800c3c4:	3b04      	subs	r3, #4
 800c3c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c3c8:	4a0c      	ldr	r2, [pc, #48]	@ (800c3fc <pxPortInitialiseStack+0x64>)
 800c3ca:	68fb      	ldr	r3, [r7, #12]
 800c3cc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c3ce:	68fb      	ldr	r3, [r7, #12]
 800c3d0:	3b14      	subs	r3, #20
 800c3d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c3d4:	687a      	ldr	r2, [r7, #4]
 800c3d6:	68fb      	ldr	r3, [r7, #12]
 800c3d8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c3da:	68fb      	ldr	r3, [r7, #12]
 800c3dc:	3b04      	subs	r3, #4
 800c3de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c3e0:	68fb      	ldr	r3, [r7, #12]
 800c3e2:	f06f 0202 	mvn.w	r2, #2
 800c3e6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c3e8:	68fb      	ldr	r3, [r7, #12]
 800c3ea:	3b20      	subs	r3, #32
 800c3ec:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c3ee:	68fb      	ldr	r3, [r7, #12]
}
 800c3f0:	4618      	mov	r0, r3
 800c3f2:	3714      	adds	r7, #20
 800c3f4:	46bd      	mov	sp, r7
 800c3f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3fa:	4770      	bx	lr
 800c3fc:	0800c401 	.word	0x0800c401

0800c400 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c400:	b480      	push	{r7}
 800c402:	b085      	sub	sp, #20
 800c404:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c406:	2300      	movs	r3, #0
 800c408:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c40a:	4b13      	ldr	r3, [pc, #76]	@ (800c458 <prvTaskExitError+0x58>)
 800c40c:	681b      	ldr	r3, [r3, #0]
 800c40e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c412:	d00b      	beq.n	800c42c <prvTaskExitError+0x2c>
	__asm volatile
 800c414:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c418:	f383 8811 	msr	BASEPRI, r3
 800c41c:	f3bf 8f6f 	isb	sy
 800c420:	f3bf 8f4f 	dsb	sy
 800c424:	60fb      	str	r3, [r7, #12]
}
 800c426:	bf00      	nop
 800c428:	bf00      	nop
 800c42a:	e7fd      	b.n	800c428 <prvTaskExitError+0x28>
	__asm volatile
 800c42c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c430:	f383 8811 	msr	BASEPRI, r3
 800c434:	f3bf 8f6f 	isb	sy
 800c438:	f3bf 8f4f 	dsb	sy
 800c43c:	60bb      	str	r3, [r7, #8]
}
 800c43e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c440:	bf00      	nop
 800c442:	687b      	ldr	r3, [r7, #4]
 800c444:	2b00      	cmp	r3, #0
 800c446:	d0fc      	beq.n	800c442 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c448:	bf00      	nop
 800c44a:	bf00      	nop
 800c44c:	3714      	adds	r7, #20
 800c44e:	46bd      	mov	sp, r7
 800c450:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c454:	4770      	bx	lr
 800c456:	bf00      	nop
 800c458:	200000a8 	.word	0x200000a8
 800c45c:	00000000 	.word	0x00000000

0800c460 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c460:	4b07      	ldr	r3, [pc, #28]	@ (800c480 <pxCurrentTCBConst2>)
 800c462:	6819      	ldr	r1, [r3, #0]
 800c464:	6808      	ldr	r0, [r1, #0]
 800c466:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c46a:	f380 8809 	msr	PSP, r0
 800c46e:	f3bf 8f6f 	isb	sy
 800c472:	f04f 0000 	mov.w	r0, #0
 800c476:	f380 8811 	msr	BASEPRI, r0
 800c47a:	4770      	bx	lr
 800c47c:	f3af 8000 	nop.w

0800c480 <pxCurrentTCBConst2>:
 800c480:	20000efc 	.word	0x20000efc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c484:	bf00      	nop
 800c486:	bf00      	nop

0800c488 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c488:	4808      	ldr	r0, [pc, #32]	@ (800c4ac <prvPortStartFirstTask+0x24>)
 800c48a:	6800      	ldr	r0, [r0, #0]
 800c48c:	6800      	ldr	r0, [r0, #0]
 800c48e:	f380 8808 	msr	MSP, r0
 800c492:	f04f 0000 	mov.w	r0, #0
 800c496:	f380 8814 	msr	CONTROL, r0
 800c49a:	b662      	cpsie	i
 800c49c:	b661      	cpsie	f
 800c49e:	f3bf 8f4f 	dsb	sy
 800c4a2:	f3bf 8f6f 	isb	sy
 800c4a6:	df00      	svc	0
 800c4a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c4aa:	bf00      	nop
 800c4ac:	e000ed08 	.word	0xe000ed08

0800c4b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c4b0:	b580      	push	{r7, lr}
 800c4b2:	b086      	sub	sp, #24
 800c4b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c4b6:	4b47      	ldr	r3, [pc, #284]	@ (800c5d4 <xPortStartScheduler+0x124>)
 800c4b8:	681b      	ldr	r3, [r3, #0]
 800c4ba:	4a47      	ldr	r2, [pc, #284]	@ (800c5d8 <xPortStartScheduler+0x128>)
 800c4bc:	4293      	cmp	r3, r2
 800c4be:	d10b      	bne.n	800c4d8 <xPortStartScheduler+0x28>
	__asm volatile
 800c4c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c4c4:	f383 8811 	msr	BASEPRI, r3
 800c4c8:	f3bf 8f6f 	isb	sy
 800c4cc:	f3bf 8f4f 	dsb	sy
 800c4d0:	613b      	str	r3, [r7, #16]
}
 800c4d2:	bf00      	nop
 800c4d4:	bf00      	nop
 800c4d6:	e7fd      	b.n	800c4d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c4d8:	4b3e      	ldr	r3, [pc, #248]	@ (800c5d4 <xPortStartScheduler+0x124>)
 800c4da:	681b      	ldr	r3, [r3, #0]
 800c4dc:	4a3f      	ldr	r2, [pc, #252]	@ (800c5dc <xPortStartScheduler+0x12c>)
 800c4de:	4293      	cmp	r3, r2
 800c4e0:	d10b      	bne.n	800c4fa <xPortStartScheduler+0x4a>
	__asm volatile
 800c4e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c4e6:	f383 8811 	msr	BASEPRI, r3
 800c4ea:	f3bf 8f6f 	isb	sy
 800c4ee:	f3bf 8f4f 	dsb	sy
 800c4f2:	60fb      	str	r3, [r7, #12]
}
 800c4f4:	bf00      	nop
 800c4f6:	bf00      	nop
 800c4f8:	e7fd      	b.n	800c4f6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c4fa:	4b39      	ldr	r3, [pc, #228]	@ (800c5e0 <xPortStartScheduler+0x130>)
 800c4fc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c4fe:	697b      	ldr	r3, [r7, #20]
 800c500:	781b      	ldrb	r3, [r3, #0]
 800c502:	b2db      	uxtb	r3, r3
 800c504:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c506:	697b      	ldr	r3, [r7, #20]
 800c508:	22ff      	movs	r2, #255	@ 0xff
 800c50a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c50c:	697b      	ldr	r3, [r7, #20]
 800c50e:	781b      	ldrb	r3, [r3, #0]
 800c510:	b2db      	uxtb	r3, r3
 800c512:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c514:	78fb      	ldrb	r3, [r7, #3]
 800c516:	b2db      	uxtb	r3, r3
 800c518:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800c51c:	b2da      	uxtb	r2, r3
 800c51e:	4b31      	ldr	r3, [pc, #196]	@ (800c5e4 <xPortStartScheduler+0x134>)
 800c520:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c522:	4b31      	ldr	r3, [pc, #196]	@ (800c5e8 <xPortStartScheduler+0x138>)
 800c524:	2207      	movs	r2, #7
 800c526:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c528:	e009      	b.n	800c53e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800c52a:	4b2f      	ldr	r3, [pc, #188]	@ (800c5e8 <xPortStartScheduler+0x138>)
 800c52c:	681b      	ldr	r3, [r3, #0]
 800c52e:	3b01      	subs	r3, #1
 800c530:	4a2d      	ldr	r2, [pc, #180]	@ (800c5e8 <xPortStartScheduler+0x138>)
 800c532:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c534:	78fb      	ldrb	r3, [r7, #3]
 800c536:	b2db      	uxtb	r3, r3
 800c538:	005b      	lsls	r3, r3, #1
 800c53a:	b2db      	uxtb	r3, r3
 800c53c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c53e:	78fb      	ldrb	r3, [r7, #3]
 800c540:	b2db      	uxtb	r3, r3
 800c542:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c546:	2b80      	cmp	r3, #128	@ 0x80
 800c548:	d0ef      	beq.n	800c52a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c54a:	4b27      	ldr	r3, [pc, #156]	@ (800c5e8 <xPortStartScheduler+0x138>)
 800c54c:	681b      	ldr	r3, [r3, #0]
 800c54e:	f1c3 0307 	rsb	r3, r3, #7
 800c552:	2b04      	cmp	r3, #4
 800c554:	d00b      	beq.n	800c56e <xPortStartScheduler+0xbe>
	__asm volatile
 800c556:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c55a:	f383 8811 	msr	BASEPRI, r3
 800c55e:	f3bf 8f6f 	isb	sy
 800c562:	f3bf 8f4f 	dsb	sy
 800c566:	60bb      	str	r3, [r7, #8]
}
 800c568:	bf00      	nop
 800c56a:	bf00      	nop
 800c56c:	e7fd      	b.n	800c56a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c56e:	4b1e      	ldr	r3, [pc, #120]	@ (800c5e8 <xPortStartScheduler+0x138>)
 800c570:	681b      	ldr	r3, [r3, #0]
 800c572:	021b      	lsls	r3, r3, #8
 800c574:	4a1c      	ldr	r2, [pc, #112]	@ (800c5e8 <xPortStartScheduler+0x138>)
 800c576:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c578:	4b1b      	ldr	r3, [pc, #108]	@ (800c5e8 <xPortStartScheduler+0x138>)
 800c57a:	681b      	ldr	r3, [r3, #0]
 800c57c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800c580:	4a19      	ldr	r2, [pc, #100]	@ (800c5e8 <xPortStartScheduler+0x138>)
 800c582:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c584:	687b      	ldr	r3, [r7, #4]
 800c586:	b2da      	uxtb	r2, r3
 800c588:	697b      	ldr	r3, [r7, #20]
 800c58a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c58c:	4b17      	ldr	r3, [pc, #92]	@ (800c5ec <xPortStartScheduler+0x13c>)
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	4a16      	ldr	r2, [pc, #88]	@ (800c5ec <xPortStartScheduler+0x13c>)
 800c592:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800c596:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c598:	4b14      	ldr	r3, [pc, #80]	@ (800c5ec <xPortStartScheduler+0x13c>)
 800c59a:	681b      	ldr	r3, [r3, #0]
 800c59c:	4a13      	ldr	r2, [pc, #76]	@ (800c5ec <xPortStartScheduler+0x13c>)
 800c59e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800c5a2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c5a4:	f000 f8da 	bl	800c75c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c5a8:	4b11      	ldr	r3, [pc, #68]	@ (800c5f0 <xPortStartScheduler+0x140>)
 800c5aa:	2200      	movs	r2, #0
 800c5ac:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c5ae:	f000 f8f9 	bl	800c7a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c5b2:	4b10      	ldr	r3, [pc, #64]	@ (800c5f4 <xPortStartScheduler+0x144>)
 800c5b4:	681b      	ldr	r3, [r3, #0]
 800c5b6:	4a0f      	ldr	r2, [pc, #60]	@ (800c5f4 <xPortStartScheduler+0x144>)
 800c5b8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800c5bc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c5be:	f7ff ff63 	bl	800c488 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c5c2:	f7fe ff2f 	bl	800b424 <vTaskSwitchContext>
	prvTaskExitError();
 800c5c6:	f7ff ff1b 	bl	800c400 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c5ca:	2300      	movs	r3, #0
}
 800c5cc:	4618      	mov	r0, r3
 800c5ce:	3718      	adds	r7, #24
 800c5d0:	46bd      	mov	sp, r7
 800c5d2:	bd80      	pop	{r7, pc}
 800c5d4:	e000ed00 	.word	0xe000ed00
 800c5d8:	410fc271 	.word	0x410fc271
 800c5dc:	410fc270 	.word	0x410fc270
 800c5e0:	e000e400 	.word	0xe000e400
 800c5e4:	20001528 	.word	0x20001528
 800c5e8:	2000152c 	.word	0x2000152c
 800c5ec:	e000ed20 	.word	0xe000ed20
 800c5f0:	200000a8 	.word	0x200000a8
 800c5f4:	e000ef34 	.word	0xe000ef34

0800c5f8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c5f8:	b480      	push	{r7}
 800c5fa:	b083      	sub	sp, #12
 800c5fc:	af00      	add	r7, sp, #0
	__asm volatile
 800c5fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c602:	f383 8811 	msr	BASEPRI, r3
 800c606:	f3bf 8f6f 	isb	sy
 800c60a:	f3bf 8f4f 	dsb	sy
 800c60e:	607b      	str	r3, [r7, #4]
}
 800c610:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c612:	4b10      	ldr	r3, [pc, #64]	@ (800c654 <vPortEnterCritical+0x5c>)
 800c614:	681b      	ldr	r3, [r3, #0]
 800c616:	3301      	adds	r3, #1
 800c618:	4a0e      	ldr	r2, [pc, #56]	@ (800c654 <vPortEnterCritical+0x5c>)
 800c61a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c61c:	4b0d      	ldr	r3, [pc, #52]	@ (800c654 <vPortEnterCritical+0x5c>)
 800c61e:	681b      	ldr	r3, [r3, #0]
 800c620:	2b01      	cmp	r3, #1
 800c622:	d110      	bne.n	800c646 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c624:	4b0c      	ldr	r3, [pc, #48]	@ (800c658 <vPortEnterCritical+0x60>)
 800c626:	681b      	ldr	r3, [r3, #0]
 800c628:	b2db      	uxtb	r3, r3
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	d00b      	beq.n	800c646 <vPortEnterCritical+0x4e>
	__asm volatile
 800c62e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c632:	f383 8811 	msr	BASEPRI, r3
 800c636:	f3bf 8f6f 	isb	sy
 800c63a:	f3bf 8f4f 	dsb	sy
 800c63e:	603b      	str	r3, [r7, #0]
}
 800c640:	bf00      	nop
 800c642:	bf00      	nop
 800c644:	e7fd      	b.n	800c642 <vPortEnterCritical+0x4a>
	}
}
 800c646:	bf00      	nop
 800c648:	370c      	adds	r7, #12
 800c64a:	46bd      	mov	sp, r7
 800c64c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c650:	4770      	bx	lr
 800c652:	bf00      	nop
 800c654:	200000a8 	.word	0x200000a8
 800c658:	e000ed04 	.word	0xe000ed04

0800c65c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c65c:	b480      	push	{r7}
 800c65e:	b083      	sub	sp, #12
 800c660:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c662:	4b12      	ldr	r3, [pc, #72]	@ (800c6ac <vPortExitCritical+0x50>)
 800c664:	681b      	ldr	r3, [r3, #0]
 800c666:	2b00      	cmp	r3, #0
 800c668:	d10b      	bne.n	800c682 <vPortExitCritical+0x26>
	__asm volatile
 800c66a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c66e:	f383 8811 	msr	BASEPRI, r3
 800c672:	f3bf 8f6f 	isb	sy
 800c676:	f3bf 8f4f 	dsb	sy
 800c67a:	607b      	str	r3, [r7, #4]
}
 800c67c:	bf00      	nop
 800c67e:	bf00      	nop
 800c680:	e7fd      	b.n	800c67e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c682:	4b0a      	ldr	r3, [pc, #40]	@ (800c6ac <vPortExitCritical+0x50>)
 800c684:	681b      	ldr	r3, [r3, #0]
 800c686:	3b01      	subs	r3, #1
 800c688:	4a08      	ldr	r2, [pc, #32]	@ (800c6ac <vPortExitCritical+0x50>)
 800c68a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c68c:	4b07      	ldr	r3, [pc, #28]	@ (800c6ac <vPortExitCritical+0x50>)
 800c68e:	681b      	ldr	r3, [r3, #0]
 800c690:	2b00      	cmp	r3, #0
 800c692:	d105      	bne.n	800c6a0 <vPortExitCritical+0x44>
 800c694:	2300      	movs	r3, #0
 800c696:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c698:	683b      	ldr	r3, [r7, #0]
 800c69a:	f383 8811 	msr	BASEPRI, r3
}
 800c69e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c6a0:	bf00      	nop
 800c6a2:	370c      	adds	r7, #12
 800c6a4:	46bd      	mov	sp, r7
 800c6a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6aa:	4770      	bx	lr
 800c6ac:	200000a8 	.word	0x200000a8

0800c6b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c6b0:	f3ef 8009 	mrs	r0, PSP
 800c6b4:	f3bf 8f6f 	isb	sy
 800c6b8:	4b15      	ldr	r3, [pc, #84]	@ (800c710 <pxCurrentTCBConst>)
 800c6ba:	681a      	ldr	r2, [r3, #0]
 800c6bc:	f01e 0f10 	tst.w	lr, #16
 800c6c0:	bf08      	it	eq
 800c6c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c6c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6ca:	6010      	str	r0, [r2, #0]
 800c6cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c6d0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800c6d4:	f380 8811 	msr	BASEPRI, r0
 800c6d8:	f3bf 8f4f 	dsb	sy
 800c6dc:	f3bf 8f6f 	isb	sy
 800c6e0:	f7fe fea0 	bl	800b424 <vTaskSwitchContext>
 800c6e4:	f04f 0000 	mov.w	r0, #0
 800c6e8:	f380 8811 	msr	BASEPRI, r0
 800c6ec:	bc09      	pop	{r0, r3}
 800c6ee:	6819      	ldr	r1, [r3, #0]
 800c6f0:	6808      	ldr	r0, [r1, #0]
 800c6f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c6f6:	f01e 0f10 	tst.w	lr, #16
 800c6fa:	bf08      	it	eq
 800c6fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c700:	f380 8809 	msr	PSP, r0
 800c704:	f3bf 8f6f 	isb	sy
 800c708:	4770      	bx	lr
 800c70a:	bf00      	nop
 800c70c:	f3af 8000 	nop.w

0800c710 <pxCurrentTCBConst>:
 800c710:	20000efc 	.word	0x20000efc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c714:	bf00      	nop
 800c716:	bf00      	nop

0800c718 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c718:	b580      	push	{r7, lr}
 800c71a:	b082      	sub	sp, #8
 800c71c:	af00      	add	r7, sp, #0
	__asm volatile
 800c71e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c722:	f383 8811 	msr	BASEPRI, r3
 800c726:	f3bf 8f6f 	isb	sy
 800c72a:	f3bf 8f4f 	dsb	sy
 800c72e:	607b      	str	r3, [r7, #4]
}
 800c730:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c732:	f7fe fdbd 	bl	800b2b0 <xTaskIncrementTick>
 800c736:	4603      	mov	r3, r0
 800c738:	2b00      	cmp	r3, #0
 800c73a:	d003      	beq.n	800c744 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c73c:	4b06      	ldr	r3, [pc, #24]	@ (800c758 <xPortSysTickHandler+0x40>)
 800c73e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c742:	601a      	str	r2, [r3, #0]
 800c744:	2300      	movs	r3, #0
 800c746:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c748:	683b      	ldr	r3, [r7, #0]
 800c74a:	f383 8811 	msr	BASEPRI, r3
}
 800c74e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c750:	bf00      	nop
 800c752:	3708      	adds	r7, #8
 800c754:	46bd      	mov	sp, r7
 800c756:	bd80      	pop	{r7, pc}
 800c758:	e000ed04 	.word	0xe000ed04

0800c75c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c75c:	b480      	push	{r7}
 800c75e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c760:	4b0b      	ldr	r3, [pc, #44]	@ (800c790 <vPortSetupTimerInterrupt+0x34>)
 800c762:	2200      	movs	r2, #0
 800c764:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c766:	4b0b      	ldr	r3, [pc, #44]	@ (800c794 <vPortSetupTimerInterrupt+0x38>)
 800c768:	2200      	movs	r2, #0
 800c76a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c76c:	4b0a      	ldr	r3, [pc, #40]	@ (800c798 <vPortSetupTimerInterrupt+0x3c>)
 800c76e:	681b      	ldr	r3, [r3, #0]
 800c770:	4a0a      	ldr	r2, [pc, #40]	@ (800c79c <vPortSetupTimerInterrupt+0x40>)
 800c772:	fba2 2303 	umull	r2, r3, r2, r3
 800c776:	099b      	lsrs	r3, r3, #6
 800c778:	4a09      	ldr	r2, [pc, #36]	@ (800c7a0 <vPortSetupTimerInterrupt+0x44>)
 800c77a:	3b01      	subs	r3, #1
 800c77c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c77e:	4b04      	ldr	r3, [pc, #16]	@ (800c790 <vPortSetupTimerInterrupt+0x34>)
 800c780:	2207      	movs	r2, #7
 800c782:	601a      	str	r2, [r3, #0]
}
 800c784:	bf00      	nop
 800c786:	46bd      	mov	sp, r7
 800c788:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c78c:	4770      	bx	lr
 800c78e:	bf00      	nop
 800c790:	e000e010 	.word	0xe000e010
 800c794:	e000e018 	.word	0xe000e018
 800c798:	2000009c 	.word	0x2000009c
 800c79c:	10624dd3 	.word	0x10624dd3
 800c7a0:	e000e014 	.word	0xe000e014

0800c7a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c7a4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800c7b4 <vPortEnableVFP+0x10>
 800c7a8:	6801      	ldr	r1, [r0, #0]
 800c7aa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800c7ae:	6001      	str	r1, [r0, #0]
 800c7b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c7b2:	bf00      	nop
 800c7b4:	e000ed88 	.word	0xe000ed88

0800c7b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c7b8:	b480      	push	{r7}
 800c7ba:	b085      	sub	sp, #20
 800c7bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c7be:	f3ef 8305 	mrs	r3, IPSR
 800c7c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c7c4:	68fb      	ldr	r3, [r7, #12]
 800c7c6:	2b0f      	cmp	r3, #15
 800c7c8:	d915      	bls.n	800c7f6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c7ca:	4a18      	ldr	r2, [pc, #96]	@ (800c82c <vPortValidateInterruptPriority+0x74>)
 800c7cc:	68fb      	ldr	r3, [r7, #12]
 800c7ce:	4413      	add	r3, r2
 800c7d0:	781b      	ldrb	r3, [r3, #0]
 800c7d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c7d4:	4b16      	ldr	r3, [pc, #88]	@ (800c830 <vPortValidateInterruptPriority+0x78>)
 800c7d6:	781b      	ldrb	r3, [r3, #0]
 800c7d8:	7afa      	ldrb	r2, [r7, #11]
 800c7da:	429a      	cmp	r2, r3
 800c7dc:	d20b      	bcs.n	800c7f6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800c7de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c7e2:	f383 8811 	msr	BASEPRI, r3
 800c7e6:	f3bf 8f6f 	isb	sy
 800c7ea:	f3bf 8f4f 	dsb	sy
 800c7ee:	607b      	str	r3, [r7, #4]
}
 800c7f0:	bf00      	nop
 800c7f2:	bf00      	nop
 800c7f4:	e7fd      	b.n	800c7f2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c7f6:	4b0f      	ldr	r3, [pc, #60]	@ (800c834 <vPortValidateInterruptPriority+0x7c>)
 800c7f8:	681b      	ldr	r3, [r3, #0]
 800c7fa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800c7fe:	4b0e      	ldr	r3, [pc, #56]	@ (800c838 <vPortValidateInterruptPriority+0x80>)
 800c800:	681b      	ldr	r3, [r3, #0]
 800c802:	429a      	cmp	r2, r3
 800c804:	d90b      	bls.n	800c81e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800c806:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c80a:	f383 8811 	msr	BASEPRI, r3
 800c80e:	f3bf 8f6f 	isb	sy
 800c812:	f3bf 8f4f 	dsb	sy
 800c816:	603b      	str	r3, [r7, #0]
}
 800c818:	bf00      	nop
 800c81a:	bf00      	nop
 800c81c:	e7fd      	b.n	800c81a <vPortValidateInterruptPriority+0x62>
	}
 800c81e:	bf00      	nop
 800c820:	3714      	adds	r7, #20
 800c822:	46bd      	mov	sp, r7
 800c824:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c828:	4770      	bx	lr
 800c82a:	bf00      	nop
 800c82c:	e000e3f0 	.word	0xe000e3f0
 800c830:	20001528 	.word	0x20001528
 800c834:	e000ed0c 	.word	0xe000ed0c
 800c838:	2000152c 	.word	0x2000152c

0800c83c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c83c:	b580      	push	{r7, lr}
 800c83e:	b08a      	sub	sp, #40	@ 0x28
 800c840:	af00      	add	r7, sp, #0
 800c842:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c844:	2300      	movs	r3, #0
 800c846:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c848:	f7fe fc76 	bl	800b138 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c84c:	4b5c      	ldr	r3, [pc, #368]	@ (800c9c0 <pvPortMalloc+0x184>)
 800c84e:	681b      	ldr	r3, [r3, #0]
 800c850:	2b00      	cmp	r3, #0
 800c852:	d101      	bne.n	800c858 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c854:	f000 f924 	bl	800caa0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c858:	4b5a      	ldr	r3, [pc, #360]	@ (800c9c4 <pvPortMalloc+0x188>)
 800c85a:	681a      	ldr	r2, [r3, #0]
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	4013      	ands	r3, r2
 800c860:	2b00      	cmp	r3, #0
 800c862:	f040 8095 	bne.w	800c990 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	2b00      	cmp	r3, #0
 800c86a:	d01e      	beq.n	800c8aa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800c86c:	2208      	movs	r2, #8
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	4413      	add	r3, r2
 800c872:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c874:	687b      	ldr	r3, [r7, #4]
 800c876:	f003 0307 	and.w	r3, r3, #7
 800c87a:	2b00      	cmp	r3, #0
 800c87c:	d015      	beq.n	800c8aa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c87e:	687b      	ldr	r3, [r7, #4]
 800c880:	f023 0307 	bic.w	r3, r3, #7
 800c884:	3308      	adds	r3, #8
 800c886:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c888:	687b      	ldr	r3, [r7, #4]
 800c88a:	f003 0307 	and.w	r3, r3, #7
 800c88e:	2b00      	cmp	r3, #0
 800c890:	d00b      	beq.n	800c8aa <pvPortMalloc+0x6e>
	__asm volatile
 800c892:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c896:	f383 8811 	msr	BASEPRI, r3
 800c89a:	f3bf 8f6f 	isb	sy
 800c89e:	f3bf 8f4f 	dsb	sy
 800c8a2:	617b      	str	r3, [r7, #20]
}
 800c8a4:	bf00      	nop
 800c8a6:	bf00      	nop
 800c8a8:	e7fd      	b.n	800c8a6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c8aa:	687b      	ldr	r3, [r7, #4]
 800c8ac:	2b00      	cmp	r3, #0
 800c8ae:	d06f      	beq.n	800c990 <pvPortMalloc+0x154>
 800c8b0:	4b45      	ldr	r3, [pc, #276]	@ (800c9c8 <pvPortMalloc+0x18c>)
 800c8b2:	681b      	ldr	r3, [r3, #0]
 800c8b4:	687a      	ldr	r2, [r7, #4]
 800c8b6:	429a      	cmp	r2, r3
 800c8b8:	d86a      	bhi.n	800c990 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c8ba:	4b44      	ldr	r3, [pc, #272]	@ (800c9cc <pvPortMalloc+0x190>)
 800c8bc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c8be:	4b43      	ldr	r3, [pc, #268]	@ (800c9cc <pvPortMalloc+0x190>)
 800c8c0:	681b      	ldr	r3, [r3, #0]
 800c8c2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c8c4:	e004      	b.n	800c8d0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800c8c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8c8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800c8ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8cc:	681b      	ldr	r3, [r3, #0]
 800c8ce:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800c8d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8d2:	685b      	ldr	r3, [r3, #4]
 800c8d4:	687a      	ldr	r2, [r7, #4]
 800c8d6:	429a      	cmp	r2, r3
 800c8d8:	d903      	bls.n	800c8e2 <pvPortMalloc+0xa6>
 800c8da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8dc:	681b      	ldr	r3, [r3, #0]
 800c8de:	2b00      	cmp	r3, #0
 800c8e0:	d1f1      	bne.n	800c8c6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800c8e2:	4b37      	ldr	r3, [pc, #220]	@ (800c9c0 <pvPortMalloc+0x184>)
 800c8e4:	681b      	ldr	r3, [r3, #0]
 800c8e6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c8e8:	429a      	cmp	r2, r3
 800c8ea:	d051      	beq.n	800c990 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800c8ec:	6a3b      	ldr	r3, [r7, #32]
 800c8ee:	681b      	ldr	r3, [r3, #0]
 800c8f0:	2208      	movs	r2, #8
 800c8f2:	4413      	add	r3, r2
 800c8f4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800c8f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c8f8:	681a      	ldr	r2, [r3, #0]
 800c8fa:	6a3b      	ldr	r3, [r7, #32]
 800c8fc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800c8fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c900:	685a      	ldr	r2, [r3, #4]
 800c902:	687b      	ldr	r3, [r7, #4]
 800c904:	1ad2      	subs	r2, r2, r3
 800c906:	2308      	movs	r3, #8
 800c908:	005b      	lsls	r3, r3, #1
 800c90a:	429a      	cmp	r2, r3
 800c90c:	d920      	bls.n	800c950 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800c90e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c910:	687b      	ldr	r3, [r7, #4]
 800c912:	4413      	add	r3, r2
 800c914:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c916:	69bb      	ldr	r3, [r7, #24]
 800c918:	f003 0307 	and.w	r3, r3, #7
 800c91c:	2b00      	cmp	r3, #0
 800c91e:	d00b      	beq.n	800c938 <pvPortMalloc+0xfc>
	__asm volatile
 800c920:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c924:	f383 8811 	msr	BASEPRI, r3
 800c928:	f3bf 8f6f 	isb	sy
 800c92c:	f3bf 8f4f 	dsb	sy
 800c930:	613b      	str	r3, [r7, #16]
}
 800c932:	bf00      	nop
 800c934:	bf00      	nop
 800c936:	e7fd      	b.n	800c934 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800c938:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c93a:	685a      	ldr	r2, [r3, #4]
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	1ad2      	subs	r2, r2, r3
 800c940:	69bb      	ldr	r3, [r7, #24]
 800c942:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800c944:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c946:	687a      	ldr	r2, [r7, #4]
 800c948:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800c94a:	69b8      	ldr	r0, [r7, #24]
 800c94c:	f000 f90a 	bl	800cb64 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800c950:	4b1d      	ldr	r3, [pc, #116]	@ (800c9c8 <pvPortMalloc+0x18c>)
 800c952:	681a      	ldr	r2, [r3, #0]
 800c954:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c956:	685b      	ldr	r3, [r3, #4]
 800c958:	1ad3      	subs	r3, r2, r3
 800c95a:	4a1b      	ldr	r2, [pc, #108]	@ (800c9c8 <pvPortMalloc+0x18c>)
 800c95c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800c95e:	4b1a      	ldr	r3, [pc, #104]	@ (800c9c8 <pvPortMalloc+0x18c>)
 800c960:	681a      	ldr	r2, [r3, #0]
 800c962:	4b1b      	ldr	r3, [pc, #108]	@ (800c9d0 <pvPortMalloc+0x194>)
 800c964:	681b      	ldr	r3, [r3, #0]
 800c966:	429a      	cmp	r2, r3
 800c968:	d203      	bcs.n	800c972 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800c96a:	4b17      	ldr	r3, [pc, #92]	@ (800c9c8 <pvPortMalloc+0x18c>)
 800c96c:	681b      	ldr	r3, [r3, #0]
 800c96e:	4a18      	ldr	r2, [pc, #96]	@ (800c9d0 <pvPortMalloc+0x194>)
 800c970:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800c972:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c974:	685a      	ldr	r2, [r3, #4]
 800c976:	4b13      	ldr	r3, [pc, #76]	@ (800c9c4 <pvPortMalloc+0x188>)
 800c978:	681b      	ldr	r3, [r3, #0]
 800c97a:	431a      	orrs	r2, r3
 800c97c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c97e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800c980:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c982:	2200      	movs	r2, #0
 800c984:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800c986:	4b13      	ldr	r3, [pc, #76]	@ (800c9d4 <pvPortMalloc+0x198>)
 800c988:	681b      	ldr	r3, [r3, #0]
 800c98a:	3301      	adds	r3, #1
 800c98c:	4a11      	ldr	r2, [pc, #68]	@ (800c9d4 <pvPortMalloc+0x198>)
 800c98e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800c990:	f7fe fbe0 	bl	800b154 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800c994:	69fb      	ldr	r3, [r7, #28]
 800c996:	f003 0307 	and.w	r3, r3, #7
 800c99a:	2b00      	cmp	r3, #0
 800c99c:	d00b      	beq.n	800c9b6 <pvPortMalloc+0x17a>
	__asm volatile
 800c99e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c9a2:	f383 8811 	msr	BASEPRI, r3
 800c9a6:	f3bf 8f6f 	isb	sy
 800c9aa:	f3bf 8f4f 	dsb	sy
 800c9ae:	60fb      	str	r3, [r7, #12]
}
 800c9b0:	bf00      	nop
 800c9b2:	bf00      	nop
 800c9b4:	e7fd      	b.n	800c9b2 <pvPortMalloc+0x176>
	return pvReturn;
 800c9b6:	69fb      	ldr	r3, [r7, #28]
}
 800c9b8:	4618      	mov	r0, r3
 800c9ba:	3728      	adds	r7, #40	@ 0x28
 800c9bc:	46bd      	mov	sp, r7
 800c9be:	bd80      	pop	{r7, pc}
 800c9c0:	20005138 	.word	0x20005138
 800c9c4:	2000514c 	.word	0x2000514c
 800c9c8:	2000513c 	.word	0x2000513c
 800c9cc:	20005130 	.word	0x20005130
 800c9d0:	20005140 	.word	0x20005140
 800c9d4:	20005144 	.word	0x20005144

0800c9d8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800c9d8:	b580      	push	{r7, lr}
 800c9da:	b086      	sub	sp, #24
 800c9dc:	af00      	add	r7, sp, #0
 800c9de:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800c9e0:	687b      	ldr	r3, [r7, #4]
 800c9e2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800c9e4:	687b      	ldr	r3, [r7, #4]
 800c9e6:	2b00      	cmp	r3, #0
 800c9e8:	d04f      	beq.n	800ca8a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800c9ea:	2308      	movs	r3, #8
 800c9ec:	425b      	negs	r3, r3
 800c9ee:	697a      	ldr	r2, [r7, #20]
 800c9f0:	4413      	add	r3, r2
 800c9f2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800c9f4:	697b      	ldr	r3, [r7, #20]
 800c9f6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800c9f8:	693b      	ldr	r3, [r7, #16]
 800c9fa:	685a      	ldr	r2, [r3, #4]
 800c9fc:	4b25      	ldr	r3, [pc, #148]	@ (800ca94 <vPortFree+0xbc>)
 800c9fe:	681b      	ldr	r3, [r3, #0]
 800ca00:	4013      	ands	r3, r2
 800ca02:	2b00      	cmp	r3, #0
 800ca04:	d10b      	bne.n	800ca1e <vPortFree+0x46>
	__asm volatile
 800ca06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca0a:	f383 8811 	msr	BASEPRI, r3
 800ca0e:	f3bf 8f6f 	isb	sy
 800ca12:	f3bf 8f4f 	dsb	sy
 800ca16:	60fb      	str	r3, [r7, #12]
}
 800ca18:	bf00      	nop
 800ca1a:	bf00      	nop
 800ca1c:	e7fd      	b.n	800ca1a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800ca1e:	693b      	ldr	r3, [r7, #16]
 800ca20:	681b      	ldr	r3, [r3, #0]
 800ca22:	2b00      	cmp	r3, #0
 800ca24:	d00b      	beq.n	800ca3e <vPortFree+0x66>
	__asm volatile
 800ca26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca2a:	f383 8811 	msr	BASEPRI, r3
 800ca2e:	f3bf 8f6f 	isb	sy
 800ca32:	f3bf 8f4f 	dsb	sy
 800ca36:	60bb      	str	r3, [r7, #8]
}
 800ca38:	bf00      	nop
 800ca3a:	bf00      	nop
 800ca3c:	e7fd      	b.n	800ca3a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800ca3e:	693b      	ldr	r3, [r7, #16]
 800ca40:	685a      	ldr	r2, [r3, #4]
 800ca42:	4b14      	ldr	r3, [pc, #80]	@ (800ca94 <vPortFree+0xbc>)
 800ca44:	681b      	ldr	r3, [r3, #0]
 800ca46:	4013      	ands	r3, r2
 800ca48:	2b00      	cmp	r3, #0
 800ca4a:	d01e      	beq.n	800ca8a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800ca4c:	693b      	ldr	r3, [r7, #16]
 800ca4e:	681b      	ldr	r3, [r3, #0]
 800ca50:	2b00      	cmp	r3, #0
 800ca52:	d11a      	bne.n	800ca8a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800ca54:	693b      	ldr	r3, [r7, #16]
 800ca56:	685a      	ldr	r2, [r3, #4]
 800ca58:	4b0e      	ldr	r3, [pc, #56]	@ (800ca94 <vPortFree+0xbc>)
 800ca5a:	681b      	ldr	r3, [r3, #0]
 800ca5c:	43db      	mvns	r3, r3
 800ca5e:	401a      	ands	r2, r3
 800ca60:	693b      	ldr	r3, [r7, #16]
 800ca62:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800ca64:	f7fe fb68 	bl	800b138 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800ca68:	693b      	ldr	r3, [r7, #16]
 800ca6a:	685a      	ldr	r2, [r3, #4]
 800ca6c:	4b0a      	ldr	r3, [pc, #40]	@ (800ca98 <vPortFree+0xc0>)
 800ca6e:	681b      	ldr	r3, [r3, #0]
 800ca70:	4413      	add	r3, r2
 800ca72:	4a09      	ldr	r2, [pc, #36]	@ (800ca98 <vPortFree+0xc0>)
 800ca74:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800ca76:	6938      	ldr	r0, [r7, #16]
 800ca78:	f000 f874 	bl	800cb64 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800ca7c:	4b07      	ldr	r3, [pc, #28]	@ (800ca9c <vPortFree+0xc4>)
 800ca7e:	681b      	ldr	r3, [r3, #0]
 800ca80:	3301      	adds	r3, #1
 800ca82:	4a06      	ldr	r2, [pc, #24]	@ (800ca9c <vPortFree+0xc4>)
 800ca84:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800ca86:	f7fe fb65 	bl	800b154 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ca8a:	bf00      	nop
 800ca8c:	3718      	adds	r7, #24
 800ca8e:	46bd      	mov	sp, r7
 800ca90:	bd80      	pop	{r7, pc}
 800ca92:	bf00      	nop
 800ca94:	2000514c 	.word	0x2000514c
 800ca98:	2000513c 	.word	0x2000513c
 800ca9c:	20005148 	.word	0x20005148

0800caa0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800caa0:	b480      	push	{r7}
 800caa2:	b085      	sub	sp, #20
 800caa4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800caa6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800caaa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800caac:	4b27      	ldr	r3, [pc, #156]	@ (800cb4c <prvHeapInit+0xac>)
 800caae:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800cab0:	68fb      	ldr	r3, [r7, #12]
 800cab2:	f003 0307 	and.w	r3, r3, #7
 800cab6:	2b00      	cmp	r3, #0
 800cab8:	d00c      	beq.n	800cad4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800caba:	68fb      	ldr	r3, [r7, #12]
 800cabc:	3307      	adds	r3, #7
 800cabe:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cac0:	68fb      	ldr	r3, [r7, #12]
 800cac2:	f023 0307 	bic.w	r3, r3, #7
 800cac6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800cac8:	68ba      	ldr	r2, [r7, #8]
 800caca:	68fb      	ldr	r3, [r7, #12]
 800cacc:	1ad3      	subs	r3, r2, r3
 800cace:	4a1f      	ldr	r2, [pc, #124]	@ (800cb4c <prvHeapInit+0xac>)
 800cad0:	4413      	add	r3, r2
 800cad2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800cad4:	68fb      	ldr	r3, [r7, #12]
 800cad6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800cad8:	4a1d      	ldr	r2, [pc, #116]	@ (800cb50 <prvHeapInit+0xb0>)
 800cada:	687b      	ldr	r3, [r7, #4]
 800cadc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800cade:	4b1c      	ldr	r3, [pc, #112]	@ (800cb50 <prvHeapInit+0xb0>)
 800cae0:	2200      	movs	r2, #0
 800cae2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	68ba      	ldr	r2, [r7, #8]
 800cae8:	4413      	add	r3, r2
 800caea:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800caec:	2208      	movs	r2, #8
 800caee:	68fb      	ldr	r3, [r7, #12]
 800caf0:	1a9b      	subs	r3, r3, r2
 800caf2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800caf4:	68fb      	ldr	r3, [r7, #12]
 800caf6:	f023 0307 	bic.w	r3, r3, #7
 800cafa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800cafc:	68fb      	ldr	r3, [r7, #12]
 800cafe:	4a15      	ldr	r2, [pc, #84]	@ (800cb54 <prvHeapInit+0xb4>)
 800cb00:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800cb02:	4b14      	ldr	r3, [pc, #80]	@ (800cb54 <prvHeapInit+0xb4>)
 800cb04:	681b      	ldr	r3, [r3, #0]
 800cb06:	2200      	movs	r2, #0
 800cb08:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800cb0a:	4b12      	ldr	r3, [pc, #72]	@ (800cb54 <prvHeapInit+0xb4>)
 800cb0c:	681b      	ldr	r3, [r3, #0]
 800cb0e:	2200      	movs	r2, #0
 800cb10:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800cb12:	687b      	ldr	r3, [r7, #4]
 800cb14:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800cb16:	683b      	ldr	r3, [r7, #0]
 800cb18:	68fa      	ldr	r2, [r7, #12]
 800cb1a:	1ad2      	subs	r2, r2, r3
 800cb1c:	683b      	ldr	r3, [r7, #0]
 800cb1e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800cb20:	4b0c      	ldr	r3, [pc, #48]	@ (800cb54 <prvHeapInit+0xb4>)
 800cb22:	681a      	ldr	r2, [r3, #0]
 800cb24:	683b      	ldr	r3, [r7, #0]
 800cb26:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cb28:	683b      	ldr	r3, [r7, #0]
 800cb2a:	685b      	ldr	r3, [r3, #4]
 800cb2c:	4a0a      	ldr	r2, [pc, #40]	@ (800cb58 <prvHeapInit+0xb8>)
 800cb2e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cb30:	683b      	ldr	r3, [r7, #0]
 800cb32:	685b      	ldr	r3, [r3, #4]
 800cb34:	4a09      	ldr	r2, [pc, #36]	@ (800cb5c <prvHeapInit+0xbc>)
 800cb36:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800cb38:	4b09      	ldr	r3, [pc, #36]	@ (800cb60 <prvHeapInit+0xc0>)
 800cb3a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800cb3e:	601a      	str	r2, [r3, #0]
}
 800cb40:	bf00      	nop
 800cb42:	3714      	adds	r7, #20
 800cb44:	46bd      	mov	sp, r7
 800cb46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb4a:	4770      	bx	lr
 800cb4c:	20001530 	.word	0x20001530
 800cb50:	20005130 	.word	0x20005130
 800cb54:	20005138 	.word	0x20005138
 800cb58:	20005140 	.word	0x20005140
 800cb5c:	2000513c 	.word	0x2000513c
 800cb60:	2000514c 	.word	0x2000514c

0800cb64 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800cb64:	b480      	push	{r7}
 800cb66:	b085      	sub	sp, #20
 800cb68:	af00      	add	r7, sp, #0
 800cb6a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800cb6c:	4b28      	ldr	r3, [pc, #160]	@ (800cc10 <prvInsertBlockIntoFreeList+0xac>)
 800cb6e:	60fb      	str	r3, [r7, #12]
 800cb70:	e002      	b.n	800cb78 <prvInsertBlockIntoFreeList+0x14>
 800cb72:	68fb      	ldr	r3, [r7, #12]
 800cb74:	681b      	ldr	r3, [r3, #0]
 800cb76:	60fb      	str	r3, [r7, #12]
 800cb78:	68fb      	ldr	r3, [r7, #12]
 800cb7a:	681b      	ldr	r3, [r3, #0]
 800cb7c:	687a      	ldr	r2, [r7, #4]
 800cb7e:	429a      	cmp	r2, r3
 800cb80:	d8f7      	bhi.n	800cb72 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800cb82:	68fb      	ldr	r3, [r7, #12]
 800cb84:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800cb86:	68fb      	ldr	r3, [r7, #12]
 800cb88:	685b      	ldr	r3, [r3, #4]
 800cb8a:	68ba      	ldr	r2, [r7, #8]
 800cb8c:	4413      	add	r3, r2
 800cb8e:	687a      	ldr	r2, [r7, #4]
 800cb90:	429a      	cmp	r2, r3
 800cb92:	d108      	bne.n	800cba6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800cb94:	68fb      	ldr	r3, [r7, #12]
 800cb96:	685a      	ldr	r2, [r3, #4]
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	685b      	ldr	r3, [r3, #4]
 800cb9c:	441a      	add	r2, r3
 800cb9e:	68fb      	ldr	r3, [r7, #12]
 800cba0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800cba2:	68fb      	ldr	r3, [r7, #12]
 800cba4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800cbaa:	687b      	ldr	r3, [r7, #4]
 800cbac:	685b      	ldr	r3, [r3, #4]
 800cbae:	68ba      	ldr	r2, [r7, #8]
 800cbb0:	441a      	add	r2, r3
 800cbb2:	68fb      	ldr	r3, [r7, #12]
 800cbb4:	681b      	ldr	r3, [r3, #0]
 800cbb6:	429a      	cmp	r2, r3
 800cbb8:	d118      	bne.n	800cbec <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800cbba:	68fb      	ldr	r3, [r7, #12]
 800cbbc:	681a      	ldr	r2, [r3, #0]
 800cbbe:	4b15      	ldr	r3, [pc, #84]	@ (800cc14 <prvInsertBlockIntoFreeList+0xb0>)
 800cbc0:	681b      	ldr	r3, [r3, #0]
 800cbc2:	429a      	cmp	r2, r3
 800cbc4:	d00d      	beq.n	800cbe2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800cbc6:	687b      	ldr	r3, [r7, #4]
 800cbc8:	685a      	ldr	r2, [r3, #4]
 800cbca:	68fb      	ldr	r3, [r7, #12]
 800cbcc:	681b      	ldr	r3, [r3, #0]
 800cbce:	685b      	ldr	r3, [r3, #4]
 800cbd0:	441a      	add	r2, r3
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800cbd6:	68fb      	ldr	r3, [r7, #12]
 800cbd8:	681b      	ldr	r3, [r3, #0]
 800cbda:	681a      	ldr	r2, [r3, #0]
 800cbdc:	687b      	ldr	r3, [r7, #4]
 800cbde:	601a      	str	r2, [r3, #0]
 800cbe0:	e008      	b.n	800cbf4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800cbe2:	4b0c      	ldr	r3, [pc, #48]	@ (800cc14 <prvInsertBlockIntoFreeList+0xb0>)
 800cbe4:	681a      	ldr	r2, [r3, #0]
 800cbe6:	687b      	ldr	r3, [r7, #4]
 800cbe8:	601a      	str	r2, [r3, #0]
 800cbea:	e003      	b.n	800cbf4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800cbec:	68fb      	ldr	r3, [r7, #12]
 800cbee:	681a      	ldr	r2, [r3, #0]
 800cbf0:	687b      	ldr	r3, [r7, #4]
 800cbf2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800cbf4:	68fa      	ldr	r2, [r7, #12]
 800cbf6:	687b      	ldr	r3, [r7, #4]
 800cbf8:	429a      	cmp	r2, r3
 800cbfa:	d002      	beq.n	800cc02 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800cbfc:	68fb      	ldr	r3, [r7, #12]
 800cbfe:	687a      	ldr	r2, [r7, #4]
 800cc00:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cc02:	bf00      	nop
 800cc04:	3714      	adds	r7, #20
 800cc06:	46bd      	mov	sp, r7
 800cc08:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc0c:	4770      	bx	lr
 800cc0e:	bf00      	nop
 800cc10:	20005130 	.word	0x20005130
 800cc14:	20005138 	.word	0x20005138

0800cc18 <__cvt>:
 800cc18:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cc1c:	ec57 6b10 	vmov	r6, r7, d0
 800cc20:	2f00      	cmp	r7, #0
 800cc22:	460c      	mov	r4, r1
 800cc24:	4619      	mov	r1, r3
 800cc26:	463b      	mov	r3, r7
 800cc28:	bfbb      	ittet	lt
 800cc2a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800cc2e:	461f      	movlt	r7, r3
 800cc30:	2300      	movge	r3, #0
 800cc32:	232d      	movlt	r3, #45	@ 0x2d
 800cc34:	700b      	strb	r3, [r1, #0]
 800cc36:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800cc38:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800cc3c:	4691      	mov	r9, r2
 800cc3e:	f023 0820 	bic.w	r8, r3, #32
 800cc42:	bfbc      	itt	lt
 800cc44:	4632      	movlt	r2, r6
 800cc46:	4616      	movlt	r6, r2
 800cc48:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800cc4c:	d005      	beq.n	800cc5a <__cvt+0x42>
 800cc4e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800cc52:	d100      	bne.n	800cc56 <__cvt+0x3e>
 800cc54:	3401      	adds	r4, #1
 800cc56:	2102      	movs	r1, #2
 800cc58:	e000      	b.n	800cc5c <__cvt+0x44>
 800cc5a:	2103      	movs	r1, #3
 800cc5c:	ab03      	add	r3, sp, #12
 800cc5e:	9301      	str	r3, [sp, #4]
 800cc60:	ab02      	add	r3, sp, #8
 800cc62:	9300      	str	r3, [sp, #0]
 800cc64:	ec47 6b10 	vmov	d0, r6, r7
 800cc68:	4653      	mov	r3, sl
 800cc6a:	4622      	mov	r2, r4
 800cc6c:	f000 ffd8 	bl	800dc20 <_dtoa_r>
 800cc70:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800cc74:	4605      	mov	r5, r0
 800cc76:	d119      	bne.n	800ccac <__cvt+0x94>
 800cc78:	f019 0f01 	tst.w	r9, #1
 800cc7c:	d00e      	beq.n	800cc9c <__cvt+0x84>
 800cc7e:	eb00 0904 	add.w	r9, r0, r4
 800cc82:	2200      	movs	r2, #0
 800cc84:	2300      	movs	r3, #0
 800cc86:	4630      	mov	r0, r6
 800cc88:	4639      	mov	r1, r7
 800cc8a:	f7f3 ff1d 	bl	8000ac8 <__aeabi_dcmpeq>
 800cc8e:	b108      	cbz	r0, 800cc94 <__cvt+0x7c>
 800cc90:	f8cd 900c 	str.w	r9, [sp, #12]
 800cc94:	2230      	movs	r2, #48	@ 0x30
 800cc96:	9b03      	ldr	r3, [sp, #12]
 800cc98:	454b      	cmp	r3, r9
 800cc9a:	d31e      	bcc.n	800ccda <__cvt+0xc2>
 800cc9c:	9b03      	ldr	r3, [sp, #12]
 800cc9e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cca0:	1b5b      	subs	r3, r3, r5
 800cca2:	4628      	mov	r0, r5
 800cca4:	6013      	str	r3, [r2, #0]
 800cca6:	b004      	add	sp, #16
 800cca8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ccac:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800ccb0:	eb00 0904 	add.w	r9, r0, r4
 800ccb4:	d1e5      	bne.n	800cc82 <__cvt+0x6a>
 800ccb6:	7803      	ldrb	r3, [r0, #0]
 800ccb8:	2b30      	cmp	r3, #48	@ 0x30
 800ccba:	d10a      	bne.n	800ccd2 <__cvt+0xba>
 800ccbc:	2200      	movs	r2, #0
 800ccbe:	2300      	movs	r3, #0
 800ccc0:	4630      	mov	r0, r6
 800ccc2:	4639      	mov	r1, r7
 800ccc4:	f7f3 ff00 	bl	8000ac8 <__aeabi_dcmpeq>
 800ccc8:	b918      	cbnz	r0, 800ccd2 <__cvt+0xba>
 800ccca:	f1c4 0401 	rsb	r4, r4, #1
 800ccce:	f8ca 4000 	str.w	r4, [sl]
 800ccd2:	f8da 3000 	ldr.w	r3, [sl]
 800ccd6:	4499      	add	r9, r3
 800ccd8:	e7d3      	b.n	800cc82 <__cvt+0x6a>
 800ccda:	1c59      	adds	r1, r3, #1
 800ccdc:	9103      	str	r1, [sp, #12]
 800ccde:	701a      	strb	r2, [r3, #0]
 800cce0:	e7d9      	b.n	800cc96 <__cvt+0x7e>

0800cce2 <__exponent>:
 800cce2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800cce4:	2900      	cmp	r1, #0
 800cce6:	bfba      	itte	lt
 800cce8:	4249      	neglt	r1, r1
 800ccea:	232d      	movlt	r3, #45	@ 0x2d
 800ccec:	232b      	movge	r3, #43	@ 0x2b
 800ccee:	2909      	cmp	r1, #9
 800ccf0:	7002      	strb	r2, [r0, #0]
 800ccf2:	7043      	strb	r3, [r0, #1]
 800ccf4:	dd29      	ble.n	800cd4a <__exponent+0x68>
 800ccf6:	f10d 0307 	add.w	r3, sp, #7
 800ccfa:	461d      	mov	r5, r3
 800ccfc:	270a      	movs	r7, #10
 800ccfe:	461a      	mov	r2, r3
 800cd00:	fbb1 f6f7 	udiv	r6, r1, r7
 800cd04:	fb07 1416 	mls	r4, r7, r6, r1
 800cd08:	3430      	adds	r4, #48	@ 0x30
 800cd0a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800cd0e:	460c      	mov	r4, r1
 800cd10:	2c63      	cmp	r4, #99	@ 0x63
 800cd12:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800cd16:	4631      	mov	r1, r6
 800cd18:	dcf1      	bgt.n	800ccfe <__exponent+0x1c>
 800cd1a:	3130      	adds	r1, #48	@ 0x30
 800cd1c:	1e94      	subs	r4, r2, #2
 800cd1e:	f803 1c01 	strb.w	r1, [r3, #-1]
 800cd22:	1c41      	adds	r1, r0, #1
 800cd24:	4623      	mov	r3, r4
 800cd26:	42ab      	cmp	r3, r5
 800cd28:	d30a      	bcc.n	800cd40 <__exponent+0x5e>
 800cd2a:	f10d 0309 	add.w	r3, sp, #9
 800cd2e:	1a9b      	subs	r3, r3, r2
 800cd30:	42ac      	cmp	r4, r5
 800cd32:	bf88      	it	hi
 800cd34:	2300      	movhi	r3, #0
 800cd36:	3302      	adds	r3, #2
 800cd38:	4403      	add	r3, r0
 800cd3a:	1a18      	subs	r0, r3, r0
 800cd3c:	b003      	add	sp, #12
 800cd3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800cd40:	f813 6b01 	ldrb.w	r6, [r3], #1
 800cd44:	f801 6f01 	strb.w	r6, [r1, #1]!
 800cd48:	e7ed      	b.n	800cd26 <__exponent+0x44>
 800cd4a:	2330      	movs	r3, #48	@ 0x30
 800cd4c:	3130      	adds	r1, #48	@ 0x30
 800cd4e:	7083      	strb	r3, [r0, #2]
 800cd50:	70c1      	strb	r1, [r0, #3]
 800cd52:	1d03      	adds	r3, r0, #4
 800cd54:	e7f1      	b.n	800cd3a <__exponent+0x58>
	...

0800cd58 <_printf_float>:
 800cd58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd5c:	b08d      	sub	sp, #52	@ 0x34
 800cd5e:	460c      	mov	r4, r1
 800cd60:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800cd64:	4616      	mov	r6, r2
 800cd66:	461f      	mov	r7, r3
 800cd68:	4605      	mov	r5, r0
 800cd6a:	f000 fdf3 	bl	800d954 <_localeconv_r>
 800cd6e:	6803      	ldr	r3, [r0, #0]
 800cd70:	9304      	str	r3, [sp, #16]
 800cd72:	4618      	mov	r0, r3
 800cd74:	f7f3 fa7c 	bl	8000270 <strlen>
 800cd78:	2300      	movs	r3, #0
 800cd7a:	930a      	str	r3, [sp, #40]	@ 0x28
 800cd7c:	f8d8 3000 	ldr.w	r3, [r8]
 800cd80:	9005      	str	r0, [sp, #20]
 800cd82:	3307      	adds	r3, #7
 800cd84:	f023 0307 	bic.w	r3, r3, #7
 800cd88:	f103 0208 	add.w	r2, r3, #8
 800cd8c:	f894 a018 	ldrb.w	sl, [r4, #24]
 800cd90:	f8d4 b000 	ldr.w	fp, [r4]
 800cd94:	f8c8 2000 	str.w	r2, [r8]
 800cd98:	e9d3 8900 	ldrd	r8, r9, [r3]
 800cd9c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800cda0:	9307      	str	r3, [sp, #28]
 800cda2:	f8cd 8018 	str.w	r8, [sp, #24]
 800cda6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800cdaa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cdae:	4b9c      	ldr	r3, [pc, #624]	@ (800d020 <_printf_float+0x2c8>)
 800cdb0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800cdb4:	f7f3 feba 	bl	8000b2c <__aeabi_dcmpun>
 800cdb8:	bb70      	cbnz	r0, 800ce18 <_printf_float+0xc0>
 800cdba:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cdbe:	4b98      	ldr	r3, [pc, #608]	@ (800d020 <_printf_float+0x2c8>)
 800cdc0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800cdc4:	f7f3 fe94 	bl	8000af0 <__aeabi_dcmple>
 800cdc8:	bb30      	cbnz	r0, 800ce18 <_printf_float+0xc0>
 800cdca:	2200      	movs	r2, #0
 800cdcc:	2300      	movs	r3, #0
 800cdce:	4640      	mov	r0, r8
 800cdd0:	4649      	mov	r1, r9
 800cdd2:	f7f3 fe83 	bl	8000adc <__aeabi_dcmplt>
 800cdd6:	b110      	cbz	r0, 800cdde <_printf_float+0x86>
 800cdd8:	232d      	movs	r3, #45	@ 0x2d
 800cdda:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cdde:	4a91      	ldr	r2, [pc, #580]	@ (800d024 <_printf_float+0x2cc>)
 800cde0:	4b91      	ldr	r3, [pc, #580]	@ (800d028 <_printf_float+0x2d0>)
 800cde2:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800cde6:	bf94      	ite	ls
 800cde8:	4690      	movls	r8, r2
 800cdea:	4698      	movhi	r8, r3
 800cdec:	2303      	movs	r3, #3
 800cdee:	6123      	str	r3, [r4, #16]
 800cdf0:	f02b 0304 	bic.w	r3, fp, #4
 800cdf4:	6023      	str	r3, [r4, #0]
 800cdf6:	f04f 0900 	mov.w	r9, #0
 800cdfa:	9700      	str	r7, [sp, #0]
 800cdfc:	4633      	mov	r3, r6
 800cdfe:	aa0b      	add	r2, sp, #44	@ 0x2c
 800ce00:	4621      	mov	r1, r4
 800ce02:	4628      	mov	r0, r5
 800ce04:	f000 f9d2 	bl	800d1ac <_printf_common>
 800ce08:	3001      	adds	r0, #1
 800ce0a:	f040 808d 	bne.w	800cf28 <_printf_float+0x1d0>
 800ce0e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ce12:	b00d      	add	sp, #52	@ 0x34
 800ce14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce18:	4642      	mov	r2, r8
 800ce1a:	464b      	mov	r3, r9
 800ce1c:	4640      	mov	r0, r8
 800ce1e:	4649      	mov	r1, r9
 800ce20:	f7f3 fe84 	bl	8000b2c <__aeabi_dcmpun>
 800ce24:	b140      	cbz	r0, 800ce38 <_printf_float+0xe0>
 800ce26:	464b      	mov	r3, r9
 800ce28:	2b00      	cmp	r3, #0
 800ce2a:	bfbc      	itt	lt
 800ce2c:	232d      	movlt	r3, #45	@ 0x2d
 800ce2e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800ce32:	4a7e      	ldr	r2, [pc, #504]	@ (800d02c <_printf_float+0x2d4>)
 800ce34:	4b7e      	ldr	r3, [pc, #504]	@ (800d030 <_printf_float+0x2d8>)
 800ce36:	e7d4      	b.n	800cde2 <_printf_float+0x8a>
 800ce38:	6863      	ldr	r3, [r4, #4]
 800ce3a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800ce3e:	9206      	str	r2, [sp, #24]
 800ce40:	1c5a      	adds	r2, r3, #1
 800ce42:	d13b      	bne.n	800cebc <_printf_float+0x164>
 800ce44:	2306      	movs	r3, #6
 800ce46:	6063      	str	r3, [r4, #4]
 800ce48:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800ce4c:	2300      	movs	r3, #0
 800ce4e:	6022      	str	r2, [r4, #0]
 800ce50:	9303      	str	r3, [sp, #12]
 800ce52:	ab0a      	add	r3, sp, #40	@ 0x28
 800ce54:	e9cd a301 	strd	sl, r3, [sp, #4]
 800ce58:	ab09      	add	r3, sp, #36	@ 0x24
 800ce5a:	9300      	str	r3, [sp, #0]
 800ce5c:	6861      	ldr	r1, [r4, #4]
 800ce5e:	ec49 8b10 	vmov	d0, r8, r9
 800ce62:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800ce66:	4628      	mov	r0, r5
 800ce68:	f7ff fed6 	bl	800cc18 <__cvt>
 800ce6c:	9b06      	ldr	r3, [sp, #24]
 800ce6e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800ce70:	2b47      	cmp	r3, #71	@ 0x47
 800ce72:	4680      	mov	r8, r0
 800ce74:	d129      	bne.n	800ceca <_printf_float+0x172>
 800ce76:	1cc8      	adds	r0, r1, #3
 800ce78:	db02      	blt.n	800ce80 <_printf_float+0x128>
 800ce7a:	6863      	ldr	r3, [r4, #4]
 800ce7c:	4299      	cmp	r1, r3
 800ce7e:	dd41      	ble.n	800cf04 <_printf_float+0x1ac>
 800ce80:	f1aa 0a02 	sub.w	sl, sl, #2
 800ce84:	fa5f fa8a 	uxtb.w	sl, sl
 800ce88:	3901      	subs	r1, #1
 800ce8a:	4652      	mov	r2, sl
 800ce8c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800ce90:	9109      	str	r1, [sp, #36]	@ 0x24
 800ce92:	f7ff ff26 	bl	800cce2 <__exponent>
 800ce96:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800ce98:	1813      	adds	r3, r2, r0
 800ce9a:	2a01      	cmp	r2, #1
 800ce9c:	4681      	mov	r9, r0
 800ce9e:	6123      	str	r3, [r4, #16]
 800cea0:	dc02      	bgt.n	800cea8 <_printf_float+0x150>
 800cea2:	6822      	ldr	r2, [r4, #0]
 800cea4:	07d2      	lsls	r2, r2, #31
 800cea6:	d501      	bpl.n	800ceac <_printf_float+0x154>
 800cea8:	3301      	adds	r3, #1
 800ceaa:	6123      	str	r3, [r4, #16]
 800ceac:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800ceb0:	2b00      	cmp	r3, #0
 800ceb2:	d0a2      	beq.n	800cdfa <_printf_float+0xa2>
 800ceb4:	232d      	movs	r3, #45	@ 0x2d
 800ceb6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ceba:	e79e      	b.n	800cdfa <_printf_float+0xa2>
 800cebc:	9a06      	ldr	r2, [sp, #24]
 800cebe:	2a47      	cmp	r2, #71	@ 0x47
 800cec0:	d1c2      	bne.n	800ce48 <_printf_float+0xf0>
 800cec2:	2b00      	cmp	r3, #0
 800cec4:	d1c0      	bne.n	800ce48 <_printf_float+0xf0>
 800cec6:	2301      	movs	r3, #1
 800cec8:	e7bd      	b.n	800ce46 <_printf_float+0xee>
 800ceca:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800cece:	d9db      	bls.n	800ce88 <_printf_float+0x130>
 800ced0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800ced4:	d118      	bne.n	800cf08 <_printf_float+0x1b0>
 800ced6:	2900      	cmp	r1, #0
 800ced8:	6863      	ldr	r3, [r4, #4]
 800ceda:	dd0b      	ble.n	800cef4 <_printf_float+0x19c>
 800cedc:	6121      	str	r1, [r4, #16]
 800cede:	b913      	cbnz	r3, 800cee6 <_printf_float+0x18e>
 800cee0:	6822      	ldr	r2, [r4, #0]
 800cee2:	07d0      	lsls	r0, r2, #31
 800cee4:	d502      	bpl.n	800ceec <_printf_float+0x194>
 800cee6:	3301      	adds	r3, #1
 800cee8:	440b      	add	r3, r1
 800ceea:	6123      	str	r3, [r4, #16]
 800ceec:	65a1      	str	r1, [r4, #88]	@ 0x58
 800ceee:	f04f 0900 	mov.w	r9, #0
 800cef2:	e7db      	b.n	800ceac <_printf_float+0x154>
 800cef4:	b913      	cbnz	r3, 800cefc <_printf_float+0x1a4>
 800cef6:	6822      	ldr	r2, [r4, #0]
 800cef8:	07d2      	lsls	r2, r2, #31
 800cefa:	d501      	bpl.n	800cf00 <_printf_float+0x1a8>
 800cefc:	3302      	adds	r3, #2
 800cefe:	e7f4      	b.n	800ceea <_printf_float+0x192>
 800cf00:	2301      	movs	r3, #1
 800cf02:	e7f2      	b.n	800ceea <_printf_float+0x192>
 800cf04:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800cf08:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800cf0a:	4299      	cmp	r1, r3
 800cf0c:	db05      	blt.n	800cf1a <_printf_float+0x1c2>
 800cf0e:	6823      	ldr	r3, [r4, #0]
 800cf10:	6121      	str	r1, [r4, #16]
 800cf12:	07d8      	lsls	r0, r3, #31
 800cf14:	d5ea      	bpl.n	800ceec <_printf_float+0x194>
 800cf16:	1c4b      	adds	r3, r1, #1
 800cf18:	e7e7      	b.n	800ceea <_printf_float+0x192>
 800cf1a:	2900      	cmp	r1, #0
 800cf1c:	bfd4      	ite	le
 800cf1e:	f1c1 0202 	rsble	r2, r1, #2
 800cf22:	2201      	movgt	r2, #1
 800cf24:	4413      	add	r3, r2
 800cf26:	e7e0      	b.n	800ceea <_printf_float+0x192>
 800cf28:	6823      	ldr	r3, [r4, #0]
 800cf2a:	055a      	lsls	r2, r3, #21
 800cf2c:	d407      	bmi.n	800cf3e <_printf_float+0x1e6>
 800cf2e:	6923      	ldr	r3, [r4, #16]
 800cf30:	4642      	mov	r2, r8
 800cf32:	4631      	mov	r1, r6
 800cf34:	4628      	mov	r0, r5
 800cf36:	47b8      	blx	r7
 800cf38:	3001      	adds	r0, #1
 800cf3a:	d12b      	bne.n	800cf94 <_printf_float+0x23c>
 800cf3c:	e767      	b.n	800ce0e <_printf_float+0xb6>
 800cf3e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800cf42:	f240 80dd 	bls.w	800d100 <_printf_float+0x3a8>
 800cf46:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800cf4a:	2200      	movs	r2, #0
 800cf4c:	2300      	movs	r3, #0
 800cf4e:	f7f3 fdbb 	bl	8000ac8 <__aeabi_dcmpeq>
 800cf52:	2800      	cmp	r0, #0
 800cf54:	d033      	beq.n	800cfbe <_printf_float+0x266>
 800cf56:	4a37      	ldr	r2, [pc, #220]	@ (800d034 <_printf_float+0x2dc>)
 800cf58:	2301      	movs	r3, #1
 800cf5a:	4631      	mov	r1, r6
 800cf5c:	4628      	mov	r0, r5
 800cf5e:	47b8      	blx	r7
 800cf60:	3001      	adds	r0, #1
 800cf62:	f43f af54 	beq.w	800ce0e <_printf_float+0xb6>
 800cf66:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800cf6a:	4543      	cmp	r3, r8
 800cf6c:	db02      	blt.n	800cf74 <_printf_float+0x21c>
 800cf6e:	6823      	ldr	r3, [r4, #0]
 800cf70:	07d8      	lsls	r0, r3, #31
 800cf72:	d50f      	bpl.n	800cf94 <_printf_float+0x23c>
 800cf74:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cf78:	4631      	mov	r1, r6
 800cf7a:	4628      	mov	r0, r5
 800cf7c:	47b8      	blx	r7
 800cf7e:	3001      	adds	r0, #1
 800cf80:	f43f af45 	beq.w	800ce0e <_printf_float+0xb6>
 800cf84:	f04f 0900 	mov.w	r9, #0
 800cf88:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800cf8c:	f104 0a1a 	add.w	sl, r4, #26
 800cf90:	45c8      	cmp	r8, r9
 800cf92:	dc09      	bgt.n	800cfa8 <_printf_float+0x250>
 800cf94:	6823      	ldr	r3, [r4, #0]
 800cf96:	079b      	lsls	r3, r3, #30
 800cf98:	f100 8103 	bmi.w	800d1a2 <_printf_float+0x44a>
 800cf9c:	68e0      	ldr	r0, [r4, #12]
 800cf9e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800cfa0:	4298      	cmp	r0, r3
 800cfa2:	bfb8      	it	lt
 800cfa4:	4618      	movlt	r0, r3
 800cfa6:	e734      	b.n	800ce12 <_printf_float+0xba>
 800cfa8:	2301      	movs	r3, #1
 800cfaa:	4652      	mov	r2, sl
 800cfac:	4631      	mov	r1, r6
 800cfae:	4628      	mov	r0, r5
 800cfb0:	47b8      	blx	r7
 800cfb2:	3001      	adds	r0, #1
 800cfb4:	f43f af2b 	beq.w	800ce0e <_printf_float+0xb6>
 800cfb8:	f109 0901 	add.w	r9, r9, #1
 800cfbc:	e7e8      	b.n	800cf90 <_printf_float+0x238>
 800cfbe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cfc0:	2b00      	cmp	r3, #0
 800cfc2:	dc39      	bgt.n	800d038 <_printf_float+0x2e0>
 800cfc4:	4a1b      	ldr	r2, [pc, #108]	@ (800d034 <_printf_float+0x2dc>)
 800cfc6:	2301      	movs	r3, #1
 800cfc8:	4631      	mov	r1, r6
 800cfca:	4628      	mov	r0, r5
 800cfcc:	47b8      	blx	r7
 800cfce:	3001      	adds	r0, #1
 800cfd0:	f43f af1d 	beq.w	800ce0e <_printf_float+0xb6>
 800cfd4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800cfd8:	ea59 0303 	orrs.w	r3, r9, r3
 800cfdc:	d102      	bne.n	800cfe4 <_printf_float+0x28c>
 800cfde:	6823      	ldr	r3, [r4, #0]
 800cfe0:	07d9      	lsls	r1, r3, #31
 800cfe2:	d5d7      	bpl.n	800cf94 <_printf_float+0x23c>
 800cfe4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800cfe8:	4631      	mov	r1, r6
 800cfea:	4628      	mov	r0, r5
 800cfec:	47b8      	blx	r7
 800cfee:	3001      	adds	r0, #1
 800cff0:	f43f af0d 	beq.w	800ce0e <_printf_float+0xb6>
 800cff4:	f04f 0a00 	mov.w	sl, #0
 800cff8:	f104 0b1a 	add.w	fp, r4, #26
 800cffc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800cffe:	425b      	negs	r3, r3
 800d000:	4553      	cmp	r3, sl
 800d002:	dc01      	bgt.n	800d008 <_printf_float+0x2b0>
 800d004:	464b      	mov	r3, r9
 800d006:	e793      	b.n	800cf30 <_printf_float+0x1d8>
 800d008:	2301      	movs	r3, #1
 800d00a:	465a      	mov	r2, fp
 800d00c:	4631      	mov	r1, r6
 800d00e:	4628      	mov	r0, r5
 800d010:	47b8      	blx	r7
 800d012:	3001      	adds	r0, #1
 800d014:	f43f aefb 	beq.w	800ce0e <_printf_float+0xb6>
 800d018:	f10a 0a01 	add.w	sl, sl, #1
 800d01c:	e7ee      	b.n	800cffc <_printf_float+0x2a4>
 800d01e:	bf00      	nop
 800d020:	7fefffff 	.word	0x7fefffff
 800d024:	08010c08 	.word	0x08010c08
 800d028:	08010c0c 	.word	0x08010c0c
 800d02c:	08010c10 	.word	0x08010c10
 800d030:	08010c14 	.word	0x08010c14
 800d034:	08010c18 	.word	0x08010c18
 800d038:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800d03a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800d03e:	4553      	cmp	r3, sl
 800d040:	bfa8      	it	ge
 800d042:	4653      	movge	r3, sl
 800d044:	2b00      	cmp	r3, #0
 800d046:	4699      	mov	r9, r3
 800d048:	dc36      	bgt.n	800d0b8 <_printf_float+0x360>
 800d04a:	f04f 0b00 	mov.w	fp, #0
 800d04e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d052:	f104 021a 	add.w	r2, r4, #26
 800d056:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800d058:	9306      	str	r3, [sp, #24]
 800d05a:	eba3 0309 	sub.w	r3, r3, r9
 800d05e:	455b      	cmp	r3, fp
 800d060:	dc31      	bgt.n	800d0c6 <_printf_float+0x36e>
 800d062:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d064:	459a      	cmp	sl, r3
 800d066:	dc3a      	bgt.n	800d0de <_printf_float+0x386>
 800d068:	6823      	ldr	r3, [r4, #0]
 800d06a:	07da      	lsls	r2, r3, #31
 800d06c:	d437      	bmi.n	800d0de <_printf_float+0x386>
 800d06e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d070:	ebaa 0903 	sub.w	r9, sl, r3
 800d074:	9b06      	ldr	r3, [sp, #24]
 800d076:	ebaa 0303 	sub.w	r3, sl, r3
 800d07a:	4599      	cmp	r9, r3
 800d07c:	bfa8      	it	ge
 800d07e:	4699      	movge	r9, r3
 800d080:	f1b9 0f00 	cmp.w	r9, #0
 800d084:	dc33      	bgt.n	800d0ee <_printf_float+0x396>
 800d086:	f04f 0800 	mov.w	r8, #0
 800d08a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d08e:	f104 0b1a 	add.w	fp, r4, #26
 800d092:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d094:	ebaa 0303 	sub.w	r3, sl, r3
 800d098:	eba3 0309 	sub.w	r3, r3, r9
 800d09c:	4543      	cmp	r3, r8
 800d09e:	f77f af79 	ble.w	800cf94 <_printf_float+0x23c>
 800d0a2:	2301      	movs	r3, #1
 800d0a4:	465a      	mov	r2, fp
 800d0a6:	4631      	mov	r1, r6
 800d0a8:	4628      	mov	r0, r5
 800d0aa:	47b8      	blx	r7
 800d0ac:	3001      	adds	r0, #1
 800d0ae:	f43f aeae 	beq.w	800ce0e <_printf_float+0xb6>
 800d0b2:	f108 0801 	add.w	r8, r8, #1
 800d0b6:	e7ec      	b.n	800d092 <_printf_float+0x33a>
 800d0b8:	4642      	mov	r2, r8
 800d0ba:	4631      	mov	r1, r6
 800d0bc:	4628      	mov	r0, r5
 800d0be:	47b8      	blx	r7
 800d0c0:	3001      	adds	r0, #1
 800d0c2:	d1c2      	bne.n	800d04a <_printf_float+0x2f2>
 800d0c4:	e6a3      	b.n	800ce0e <_printf_float+0xb6>
 800d0c6:	2301      	movs	r3, #1
 800d0c8:	4631      	mov	r1, r6
 800d0ca:	4628      	mov	r0, r5
 800d0cc:	9206      	str	r2, [sp, #24]
 800d0ce:	47b8      	blx	r7
 800d0d0:	3001      	adds	r0, #1
 800d0d2:	f43f ae9c 	beq.w	800ce0e <_printf_float+0xb6>
 800d0d6:	9a06      	ldr	r2, [sp, #24]
 800d0d8:	f10b 0b01 	add.w	fp, fp, #1
 800d0dc:	e7bb      	b.n	800d056 <_printf_float+0x2fe>
 800d0de:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d0e2:	4631      	mov	r1, r6
 800d0e4:	4628      	mov	r0, r5
 800d0e6:	47b8      	blx	r7
 800d0e8:	3001      	adds	r0, #1
 800d0ea:	d1c0      	bne.n	800d06e <_printf_float+0x316>
 800d0ec:	e68f      	b.n	800ce0e <_printf_float+0xb6>
 800d0ee:	9a06      	ldr	r2, [sp, #24]
 800d0f0:	464b      	mov	r3, r9
 800d0f2:	4442      	add	r2, r8
 800d0f4:	4631      	mov	r1, r6
 800d0f6:	4628      	mov	r0, r5
 800d0f8:	47b8      	blx	r7
 800d0fa:	3001      	adds	r0, #1
 800d0fc:	d1c3      	bne.n	800d086 <_printf_float+0x32e>
 800d0fe:	e686      	b.n	800ce0e <_printf_float+0xb6>
 800d100:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800d104:	f1ba 0f01 	cmp.w	sl, #1
 800d108:	dc01      	bgt.n	800d10e <_printf_float+0x3b6>
 800d10a:	07db      	lsls	r3, r3, #31
 800d10c:	d536      	bpl.n	800d17c <_printf_float+0x424>
 800d10e:	2301      	movs	r3, #1
 800d110:	4642      	mov	r2, r8
 800d112:	4631      	mov	r1, r6
 800d114:	4628      	mov	r0, r5
 800d116:	47b8      	blx	r7
 800d118:	3001      	adds	r0, #1
 800d11a:	f43f ae78 	beq.w	800ce0e <_printf_float+0xb6>
 800d11e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d122:	4631      	mov	r1, r6
 800d124:	4628      	mov	r0, r5
 800d126:	47b8      	blx	r7
 800d128:	3001      	adds	r0, #1
 800d12a:	f43f ae70 	beq.w	800ce0e <_printf_float+0xb6>
 800d12e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800d132:	2200      	movs	r2, #0
 800d134:	2300      	movs	r3, #0
 800d136:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800d13a:	f7f3 fcc5 	bl	8000ac8 <__aeabi_dcmpeq>
 800d13e:	b9c0      	cbnz	r0, 800d172 <_printf_float+0x41a>
 800d140:	4653      	mov	r3, sl
 800d142:	f108 0201 	add.w	r2, r8, #1
 800d146:	4631      	mov	r1, r6
 800d148:	4628      	mov	r0, r5
 800d14a:	47b8      	blx	r7
 800d14c:	3001      	adds	r0, #1
 800d14e:	d10c      	bne.n	800d16a <_printf_float+0x412>
 800d150:	e65d      	b.n	800ce0e <_printf_float+0xb6>
 800d152:	2301      	movs	r3, #1
 800d154:	465a      	mov	r2, fp
 800d156:	4631      	mov	r1, r6
 800d158:	4628      	mov	r0, r5
 800d15a:	47b8      	blx	r7
 800d15c:	3001      	adds	r0, #1
 800d15e:	f43f ae56 	beq.w	800ce0e <_printf_float+0xb6>
 800d162:	f108 0801 	add.w	r8, r8, #1
 800d166:	45d0      	cmp	r8, sl
 800d168:	dbf3      	blt.n	800d152 <_printf_float+0x3fa>
 800d16a:	464b      	mov	r3, r9
 800d16c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800d170:	e6df      	b.n	800cf32 <_printf_float+0x1da>
 800d172:	f04f 0800 	mov.w	r8, #0
 800d176:	f104 0b1a 	add.w	fp, r4, #26
 800d17a:	e7f4      	b.n	800d166 <_printf_float+0x40e>
 800d17c:	2301      	movs	r3, #1
 800d17e:	4642      	mov	r2, r8
 800d180:	e7e1      	b.n	800d146 <_printf_float+0x3ee>
 800d182:	2301      	movs	r3, #1
 800d184:	464a      	mov	r2, r9
 800d186:	4631      	mov	r1, r6
 800d188:	4628      	mov	r0, r5
 800d18a:	47b8      	blx	r7
 800d18c:	3001      	adds	r0, #1
 800d18e:	f43f ae3e 	beq.w	800ce0e <_printf_float+0xb6>
 800d192:	f108 0801 	add.w	r8, r8, #1
 800d196:	68e3      	ldr	r3, [r4, #12]
 800d198:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d19a:	1a5b      	subs	r3, r3, r1
 800d19c:	4543      	cmp	r3, r8
 800d19e:	dcf0      	bgt.n	800d182 <_printf_float+0x42a>
 800d1a0:	e6fc      	b.n	800cf9c <_printf_float+0x244>
 800d1a2:	f04f 0800 	mov.w	r8, #0
 800d1a6:	f104 0919 	add.w	r9, r4, #25
 800d1aa:	e7f4      	b.n	800d196 <_printf_float+0x43e>

0800d1ac <_printf_common>:
 800d1ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d1b0:	4616      	mov	r6, r2
 800d1b2:	4698      	mov	r8, r3
 800d1b4:	688a      	ldr	r2, [r1, #8]
 800d1b6:	690b      	ldr	r3, [r1, #16]
 800d1b8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d1bc:	4293      	cmp	r3, r2
 800d1be:	bfb8      	it	lt
 800d1c0:	4613      	movlt	r3, r2
 800d1c2:	6033      	str	r3, [r6, #0]
 800d1c4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d1c8:	4607      	mov	r7, r0
 800d1ca:	460c      	mov	r4, r1
 800d1cc:	b10a      	cbz	r2, 800d1d2 <_printf_common+0x26>
 800d1ce:	3301      	adds	r3, #1
 800d1d0:	6033      	str	r3, [r6, #0]
 800d1d2:	6823      	ldr	r3, [r4, #0]
 800d1d4:	0699      	lsls	r1, r3, #26
 800d1d6:	bf42      	ittt	mi
 800d1d8:	6833      	ldrmi	r3, [r6, #0]
 800d1da:	3302      	addmi	r3, #2
 800d1dc:	6033      	strmi	r3, [r6, #0]
 800d1de:	6825      	ldr	r5, [r4, #0]
 800d1e0:	f015 0506 	ands.w	r5, r5, #6
 800d1e4:	d106      	bne.n	800d1f4 <_printf_common+0x48>
 800d1e6:	f104 0a19 	add.w	sl, r4, #25
 800d1ea:	68e3      	ldr	r3, [r4, #12]
 800d1ec:	6832      	ldr	r2, [r6, #0]
 800d1ee:	1a9b      	subs	r3, r3, r2
 800d1f0:	42ab      	cmp	r3, r5
 800d1f2:	dc26      	bgt.n	800d242 <_printf_common+0x96>
 800d1f4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800d1f8:	6822      	ldr	r2, [r4, #0]
 800d1fa:	3b00      	subs	r3, #0
 800d1fc:	bf18      	it	ne
 800d1fe:	2301      	movne	r3, #1
 800d200:	0692      	lsls	r2, r2, #26
 800d202:	d42b      	bmi.n	800d25c <_printf_common+0xb0>
 800d204:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d208:	4641      	mov	r1, r8
 800d20a:	4638      	mov	r0, r7
 800d20c:	47c8      	blx	r9
 800d20e:	3001      	adds	r0, #1
 800d210:	d01e      	beq.n	800d250 <_printf_common+0xa4>
 800d212:	6823      	ldr	r3, [r4, #0]
 800d214:	6922      	ldr	r2, [r4, #16]
 800d216:	f003 0306 	and.w	r3, r3, #6
 800d21a:	2b04      	cmp	r3, #4
 800d21c:	bf02      	ittt	eq
 800d21e:	68e5      	ldreq	r5, [r4, #12]
 800d220:	6833      	ldreq	r3, [r6, #0]
 800d222:	1aed      	subeq	r5, r5, r3
 800d224:	68a3      	ldr	r3, [r4, #8]
 800d226:	bf0c      	ite	eq
 800d228:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d22c:	2500      	movne	r5, #0
 800d22e:	4293      	cmp	r3, r2
 800d230:	bfc4      	itt	gt
 800d232:	1a9b      	subgt	r3, r3, r2
 800d234:	18ed      	addgt	r5, r5, r3
 800d236:	2600      	movs	r6, #0
 800d238:	341a      	adds	r4, #26
 800d23a:	42b5      	cmp	r5, r6
 800d23c:	d11a      	bne.n	800d274 <_printf_common+0xc8>
 800d23e:	2000      	movs	r0, #0
 800d240:	e008      	b.n	800d254 <_printf_common+0xa8>
 800d242:	2301      	movs	r3, #1
 800d244:	4652      	mov	r2, sl
 800d246:	4641      	mov	r1, r8
 800d248:	4638      	mov	r0, r7
 800d24a:	47c8      	blx	r9
 800d24c:	3001      	adds	r0, #1
 800d24e:	d103      	bne.n	800d258 <_printf_common+0xac>
 800d250:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d254:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d258:	3501      	adds	r5, #1
 800d25a:	e7c6      	b.n	800d1ea <_printf_common+0x3e>
 800d25c:	18e1      	adds	r1, r4, r3
 800d25e:	1c5a      	adds	r2, r3, #1
 800d260:	2030      	movs	r0, #48	@ 0x30
 800d262:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800d266:	4422      	add	r2, r4
 800d268:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800d26c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800d270:	3302      	adds	r3, #2
 800d272:	e7c7      	b.n	800d204 <_printf_common+0x58>
 800d274:	2301      	movs	r3, #1
 800d276:	4622      	mov	r2, r4
 800d278:	4641      	mov	r1, r8
 800d27a:	4638      	mov	r0, r7
 800d27c:	47c8      	blx	r9
 800d27e:	3001      	adds	r0, #1
 800d280:	d0e6      	beq.n	800d250 <_printf_common+0xa4>
 800d282:	3601      	adds	r6, #1
 800d284:	e7d9      	b.n	800d23a <_printf_common+0x8e>
	...

0800d288 <_printf_i>:
 800d288:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d28c:	7e0f      	ldrb	r7, [r1, #24]
 800d28e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d290:	2f78      	cmp	r7, #120	@ 0x78
 800d292:	4691      	mov	r9, r2
 800d294:	4680      	mov	r8, r0
 800d296:	460c      	mov	r4, r1
 800d298:	469a      	mov	sl, r3
 800d29a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800d29e:	d807      	bhi.n	800d2b0 <_printf_i+0x28>
 800d2a0:	2f62      	cmp	r7, #98	@ 0x62
 800d2a2:	d80a      	bhi.n	800d2ba <_printf_i+0x32>
 800d2a4:	2f00      	cmp	r7, #0
 800d2a6:	f000 80d2 	beq.w	800d44e <_printf_i+0x1c6>
 800d2aa:	2f58      	cmp	r7, #88	@ 0x58
 800d2ac:	f000 80b9 	beq.w	800d422 <_printf_i+0x19a>
 800d2b0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d2b4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800d2b8:	e03a      	b.n	800d330 <_printf_i+0xa8>
 800d2ba:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800d2be:	2b15      	cmp	r3, #21
 800d2c0:	d8f6      	bhi.n	800d2b0 <_printf_i+0x28>
 800d2c2:	a101      	add	r1, pc, #4	@ (adr r1, 800d2c8 <_printf_i+0x40>)
 800d2c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d2c8:	0800d321 	.word	0x0800d321
 800d2cc:	0800d335 	.word	0x0800d335
 800d2d0:	0800d2b1 	.word	0x0800d2b1
 800d2d4:	0800d2b1 	.word	0x0800d2b1
 800d2d8:	0800d2b1 	.word	0x0800d2b1
 800d2dc:	0800d2b1 	.word	0x0800d2b1
 800d2e0:	0800d335 	.word	0x0800d335
 800d2e4:	0800d2b1 	.word	0x0800d2b1
 800d2e8:	0800d2b1 	.word	0x0800d2b1
 800d2ec:	0800d2b1 	.word	0x0800d2b1
 800d2f0:	0800d2b1 	.word	0x0800d2b1
 800d2f4:	0800d435 	.word	0x0800d435
 800d2f8:	0800d35f 	.word	0x0800d35f
 800d2fc:	0800d3ef 	.word	0x0800d3ef
 800d300:	0800d2b1 	.word	0x0800d2b1
 800d304:	0800d2b1 	.word	0x0800d2b1
 800d308:	0800d457 	.word	0x0800d457
 800d30c:	0800d2b1 	.word	0x0800d2b1
 800d310:	0800d35f 	.word	0x0800d35f
 800d314:	0800d2b1 	.word	0x0800d2b1
 800d318:	0800d2b1 	.word	0x0800d2b1
 800d31c:	0800d3f7 	.word	0x0800d3f7
 800d320:	6833      	ldr	r3, [r6, #0]
 800d322:	1d1a      	adds	r2, r3, #4
 800d324:	681b      	ldr	r3, [r3, #0]
 800d326:	6032      	str	r2, [r6, #0]
 800d328:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d32c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800d330:	2301      	movs	r3, #1
 800d332:	e09d      	b.n	800d470 <_printf_i+0x1e8>
 800d334:	6833      	ldr	r3, [r6, #0]
 800d336:	6820      	ldr	r0, [r4, #0]
 800d338:	1d19      	adds	r1, r3, #4
 800d33a:	6031      	str	r1, [r6, #0]
 800d33c:	0606      	lsls	r6, r0, #24
 800d33e:	d501      	bpl.n	800d344 <_printf_i+0xbc>
 800d340:	681d      	ldr	r5, [r3, #0]
 800d342:	e003      	b.n	800d34c <_printf_i+0xc4>
 800d344:	0645      	lsls	r5, r0, #25
 800d346:	d5fb      	bpl.n	800d340 <_printf_i+0xb8>
 800d348:	f9b3 5000 	ldrsh.w	r5, [r3]
 800d34c:	2d00      	cmp	r5, #0
 800d34e:	da03      	bge.n	800d358 <_printf_i+0xd0>
 800d350:	232d      	movs	r3, #45	@ 0x2d
 800d352:	426d      	negs	r5, r5
 800d354:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d358:	4859      	ldr	r0, [pc, #356]	@ (800d4c0 <_printf_i+0x238>)
 800d35a:	230a      	movs	r3, #10
 800d35c:	e011      	b.n	800d382 <_printf_i+0xfa>
 800d35e:	6821      	ldr	r1, [r4, #0]
 800d360:	6833      	ldr	r3, [r6, #0]
 800d362:	0608      	lsls	r0, r1, #24
 800d364:	f853 5b04 	ldr.w	r5, [r3], #4
 800d368:	d402      	bmi.n	800d370 <_printf_i+0xe8>
 800d36a:	0649      	lsls	r1, r1, #25
 800d36c:	bf48      	it	mi
 800d36e:	b2ad      	uxthmi	r5, r5
 800d370:	2f6f      	cmp	r7, #111	@ 0x6f
 800d372:	4853      	ldr	r0, [pc, #332]	@ (800d4c0 <_printf_i+0x238>)
 800d374:	6033      	str	r3, [r6, #0]
 800d376:	bf14      	ite	ne
 800d378:	230a      	movne	r3, #10
 800d37a:	2308      	moveq	r3, #8
 800d37c:	2100      	movs	r1, #0
 800d37e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800d382:	6866      	ldr	r6, [r4, #4]
 800d384:	60a6      	str	r6, [r4, #8]
 800d386:	2e00      	cmp	r6, #0
 800d388:	bfa2      	ittt	ge
 800d38a:	6821      	ldrge	r1, [r4, #0]
 800d38c:	f021 0104 	bicge.w	r1, r1, #4
 800d390:	6021      	strge	r1, [r4, #0]
 800d392:	b90d      	cbnz	r5, 800d398 <_printf_i+0x110>
 800d394:	2e00      	cmp	r6, #0
 800d396:	d04b      	beq.n	800d430 <_printf_i+0x1a8>
 800d398:	4616      	mov	r6, r2
 800d39a:	fbb5 f1f3 	udiv	r1, r5, r3
 800d39e:	fb03 5711 	mls	r7, r3, r1, r5
 800d3a2:	5dc7      	ldrb	r7, [r0, r7]
 800d3a4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d3a8:	462f      	mov	r7, r5
 800d3aa:	42bb      	cmp	r3, r7
 800d3ac:	460d      	mov	r5, r1
 800d3ae:	d9f4      	bls.n	800d39a <_printf_i+0x112>
 800d3b0:	2b08      	cmp	r3, #8
 800d3b2:	d10b      	bne.n	800d3cc <_printf_i+0x144>
 800d3b4:	6823      	ldr	r3, [r4, #0]
 800d3b6:	07df      	lsls	r7, r3, #31
 800d3b8:	d508      	bpl.n	800d3cc <_printf_i+0x144>
 800d3ba:	6923      	ldr	r3, [r4, #16]
 800d3bc:	6861      	ldr	r1, [r4, #4]
 800d3be:	4299      	cmp	r1, r3
 800d3c0:	bfde      	ittt	le
 800d3c2:	2330      	movle	r3, #48	@ 0x30
 800d3c4:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d3c8:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800d3cc:	1b92      	subs	r2, r2, r6
 800d3ce:	6122      	str	r2, [r4, #16]
 800d3d0:	f8cd a000 	str.w	sl, [sp]
 800d3d4:	464b      	mov	r3, r9
 800d3d6:	aa03      	add	r2, sp, #12
 800d3d8:	4621      	mov	r1, r4
 800d3da:	4640      	mov	r0, r8
 800d3dc:	f7ff fee6 	bl	800d1ac <_printf_common>
 800d3e0:	3001      	adds	r0, #1
 800d3e2:	d14a      	bne.n	800d47a <_printf_i+0x1f2>
 800d3e4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d3e8:	b004      	add	sp, #16
 800d3ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d3ee:	6823      	ldr	r3, [r4, #0]
 800d3f0:	f043 0320 	orr.w	r3, r3, #32
 800d3f4:	6023      	str	r3, [r4, #0]
 800d3f6:	4833      	ldr	r0, [pc, #204]	@ (800d4c4 <_printf_i+0x23c>)
 800d3f8:	2778      	movs	r7, #120	@ 0x78
 800d3fa:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800d3fe:	6823      	ldr	r3, [r4, #0]
 800d400:	6831      	ldr	r1, [r6, #0]
 800d402:	061f      	lsls	r7, r3, #24
 800d404:	f851 5b04 	ldr.w	r5, [r1], #4
 800d408:	d402      	bmi.n	800d410 <_printf_i+0x188>
 800d40a:	065f      	lsls	r7, r3, #25
 800d40c:	bf48      	it	mi
 800d40e:	b2ad      	uxthmi	r5, r5
 800d410:	6031      	str	r1, [r6, #0]
 800d412:	07d9      	lsls	r1, r3, #31
 800d414:	bf44      	itt	mi
 800d416:	f043 0320 	orrmi.w	r3, r3, #32
 800d41a:	6023      	strmi	r3, [r4, #0]
 800d41c:	b11d      	cbz	r5, 800d426 <_printf_i+0x19e>
 800d41e:	2310      	movs	r3, #16
 800d420:	e7ac      	b.n	800d37c <_printf_i+0xf4>
 800d422:	4827      	ldr	r0, [pc, #156]	@ (800d4c0 <_printf_i+0x238>)
 800d424:	e7e9      	b.n	800d3fa <_printf_i+0x172>
 800d426:	6823      	ldr	r3, [r4, #0]
 800d428:	f023 0320 	bic.w	r3, r3, #32
 800d42c:	6023      	str	r3, [r4, #0]
 800d42e:	e7f6      	b.n	800d41e <_printf_i+0x196>
 800d430:	4616      	mov	r6, r2
 800d432:	e7bd      	b.n	800d3b0 <_printf_i+0x128>
 800d434:	6833      	ldr	r3, [r6, #0]
 800d436:	6825      	ldr	r5, [r4, #0]
 800d438:	6961      	ldr	r1, [r4, #20]
 800d43a:	1d18      	adds	r0, r3, #4
 800d43c:	6030      	str	r0, [r6, #0]
 800d43e:	062e      	lsls	r6, r5, #24
 800d440:	681b      	ldr	r3, [r3, #0]
 800d442:	d501      	bpl.n	800d448 <_printf_i+0x1c0>
 800d444:	6019      	str	r1, [r3, #0]
 800d446:	e002      	b.n	800d44e <_printf_i+0x1c6>
 800d448:	0668      	lsls	r0, r5, #25
 800d44a:	d5fb      	bpl.n	800d444 <_printf_i+0x1bc>
 800d44c:	8019      	strh	r1, [r3, #0]
 800d44e:	2300      	movs	r3, #0
 800d450:	6123      	str	r3, [r4, #16]
 800d452:	4616      	mov	r6, r2
 800d454:	e7bc      	b.n	800d3d0 <_printf_i+0x148>
 800d456:	6833      	ldr	r3, [r6, #0]
 800d458:	1d1a      	adds	r2, r3, #4
 800d45a:	6032      	str	r2, [r6, #0]
 800d45c:	681e      	ldr	r6, [r3, #0]
 800d45e:	6862      	ldr	r2, [r4, #4]
 800d460:	2100      	movs	r1, #0
 800d462:	4630      	mov	r0, r6
 800d464:	f7f2 feb4 	bl	80001d0 <memchr>
 800d468:	b108      	cbz	r0, 800d46e <_printf_i+0x1e6>
 800d46a:	1b80      	subs	r0, r0, r6
 800d46c:	6060      	str	r0, [r4, #4]
 800d46e:	6863      	ldr	r3, [r4, #4]
 800d470:	6123      	str	r3, [r4, #16]
 800d472:	2300      	movs	r3, #0
 800d474:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d478:	e7aa      	b.n	800d3d0 <_printf_i+0x148>
 800d47a:	6923      	ldr	r3, [r4, #16]
 800d47c:	4632      	mov	r2, r6
 800d47e:	4649      	mov	r1, r9
 800d480:	4640      	mov	r0, r8
 800d482:	47d0      	blx	sl
 800d484:	3001      	adds	r0, #1
 800d486:	d0ad      	beq.n	800d3e4 <_printf_i+0x15c>
 800d488:	6823      	ldr	r3, [r4, #0]
 800d48a:	079b      	lsls	r3, r3, #30
 800d48c:	d413      	bmi.n	800d4b6 <_printf_i+0x22e>
 800d48e:	68e0      	ldr	r0, [r4, #12]
 800d490:	9b03      	ldr	r3, [sp, #12]
 800d492:	4298      	cmp	r0, r3
 800d494:	bfb8      	it	lt
 800d496:	4618      	movlt	r0, r3
 800d498:	e7a6      	b.n	800d3e8 <_printf_i+0x160>
 800d49a:	2301      	movs	r3, #1
 800d49c:	4632      	mov	r2, r6
 800d49e:	4649      	mov	r1, r9
 800d4a0:	4640      	mov	r0, r8
 800d4a2:	47d0      	blx	sl
 800d4a4:	3001      	adds	r0, #1
 800d4a6:	d09d      	beq.n	800d3e4 <_printf_i+0x15c>
 800d4a8:	3501      	adds	r5, #1
 800d4aa:	68e3      	ldr	r3, [r4, #12]
 800d4ac:	9903      	ldr	r1, [sp, #12]
 800d4ae:	1a5b      	subs	r3, r3, r1
 800d4b0:	42ab      	cmp	r3, r5
 800d4b2:	dcf2      	bgt.n	800d49a <_printf_i+0x212>
 800d4b4:	e7eb      	b.n	800d48e <_printf_i+0x206>
 800d4b6:	2500      	movs	r5, #0
 800d4b8:	f104 0619 	add.w	r6, r4, #25
 800d4bc:	e7f5      	b.n	800d4aa <_printf_i+0x222>
 800d4be:	bf00      	nop
 800d4c0:	08010c1a 	.word	0x08010c1a
 800d4c4:	08010c2b 	.word	0x08010c2b

0800d4c8 <std>:
 800d4c8:	2300      	movs	r3, #0
 800d4ca:	b510      	push	{r4, lr}
 800d4cc:	4604      	mov	r4, r0
 800d4ce:	e9c0 3300 	strd	r3, r3, [r0]
 800d4d2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d4d6:	6083      	str	r3, [r0, #8]
 800d4d8:	8181      	strh	r1, [r0, #12]
 800d4da:	6643      	str	r3, [r0, #100]	@ 0x64
 800d4dc:	81c2      	strh	r2, [r0, #14]
 800d4de:	6183      	str	r3, [r0, #24]
 800d4e0:	4619      	mov	r1, r3
 800d4e2:	2208      	movs	r2, #8
 800d4e4:	305c      	adds	r0, #92	@ 0x5c
 800d4e6:	f000 fa2d 	bl	800d944 <memset>
 800d4ea:	4b0d      	ldr	r3, [pc, #52]	@ (800d520 <std+0x58>)
 800d4ec:	6263      	str	r3, [r4, #36]	@ 0x24
 800d4ee:	4b0d      	ldr	r3, [pc, #52]	@ (800d524 <std+0x5c>)
 800d4f0:	62a3      	str	r3, [r4, #40]	@ 0x28
 800d4f2:	4b0d      	ldr	r3, [pc, #52]	@ (800d528 <std+0x60>)
 800d4f4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800d4f6:	4b0d      	ldr	r3, [pc, #52]	@ (800d52c <std+0x64>)
 800d4f8:	6323      	str	r3, [r4, #48]	@ 0x30
 800d4fa:	4b0d      	ldr	r3, [pc, #52]	@ (800d530 <std+0x68>)
 800d4fc:	6224      	str	r4, [r4, #32]
 800d4fe:	429c      	cmp	r4, r3
 800d500:	d006      	beq.n	800d510 <std+0x48>
 800d502:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800d506:	4294      	cmp	r4, r2
 800d508:	d002      	beq.n	800d510 <std+0x48>
 800d50a:	33d0      	adds	r3, #208	@ 0xd0
 800d50c:	429c      	cmp	r4, r3
 800d50e:	d105      	bne.n	800d51c <std+0x54>
 800d510:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800d514:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d518:	f000 bae6 	b.w	800dae8 <__retarget_lock_init_recursive>
 800d51c:	bd10      	pop	{r4, pc}
 800d51e:	bf00      	nop
 800d520:	0800d795 	.word	0x0800d795
 800d524:	0800d7b7 	.word	0x0800d7b7
 800d528:	0800d7ef 	.word	0x0800d7ef
 800d52c:	0800d813 	.word	0x0800d813
 800d530:	20005150 	.word	0x20005150

0800d534 <stdio_exit_handler>:
 800d534:	4a02      	ldr	r2, [pc, #8]	@ (800d540 <stdio_exit_handler+0xc>)
 800d536:	4903      	ldr	r1, [pc, #12]	@ (800d544 <stdio_exit_handler+0x10>)
 800d538:	4803      	ldr	r0, [pc, #12]	@ (800d548 <stdio_exit_handler+0x14>)
 800d53a:	f000 b869 	b.w	800d610 <_fwalk_sglue>
 800d53e:	bf00      	nop
 800d540:	200000ac 	.word	0x200000ac
 800d544:	0800f6e9 	.word	0x0800f6e9
 800d548:	200000bc 	.word	0x200000bc

0800d54c <cleanup_stdio>:
 800d54c:	6841      	ldr	r1, [r0, #4]
 800d54e:	4b0c      	ldr	r3, [pc, #48]	@ (800d580 <cleanup_stdio+0x34>)
 800d550:	4299      	cmp	r1, r3
 800d552:	b510      	push	{r4, lr}
 800d554:	4604      	mov	r4, r0
 800d556:	d001      	beq.n	800d55c <cleanup_stdio+0x10>
 800d558:	f002 f8c6 	bl	800f6e8 <_fflush_r>
 800d55c:	68a1      	ldr	r1, [r4, #8]
 800d55e:	4b09      	ldr	r3, [pc, #36]	@ (800d584 <cleanup_stdio+0x38>)
 800d560:	4299      	cmp	r1, r3
 800d562:	d002      	beq.n	800d56a <cleanup_stdio+0x1e>
 800d564:	4620      	mov	r0, r4
 800d566:	f002 f8bf 	bl	800f6e8 <_fflush_r>
 800d56a:	68e1      	ldr	r1, [r4, #12]
 800d56c:	4b06      	ldr	r3, [pc, #24]	@ (800d588 <cleanup_stdio+0x3c>)
 800d56e:	4299      	cmp	r1, r3
 800d570:	d004      	beq.n	800d57c <cleanup_stdio+0x30>
 800d572:	4620      	mov	r0, r4
 800d574:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d578:	f002 b8b6 	b.w	800f6e8 <_fflush_r>
 800d57c:	bd10      	pop	{r4, pc}
 800d57e:	bf00      	nop
 800d580:	20005150 	.word	0x20005150
 800d584:	200051b8 	.word	0x200051b8
 800d588:	20005220 	.word	0x20005220

0800d58c <global_stdio_init.part.0>:
 800d58c:	b510      	push	{r4, lr}
 800d58e:	4b0b      	ldr	r3, [pc, #44]	@ (800d5bc <global_stdio_init.part.0+0x30>)
 800d590:	4c0b      	ldr	r4, [pc, #44]	@ (800d5c0 <global_stdio_init.part.0+0x34>)
 800d592:	4a0c      	ldr	r2, [pc, #48]	@ (800d5c4 <global_stdio_init.part.0+0x38>)
 800d594:	601a      	str	r2, [r3, #0]
 800d596:	4620      	mov	r0, r4
 800d598:	2200      	movs	r2, #0
 800d59a:	2104      	movs	r1, #4
 800d59c:	f7ff ff94 	bl	800d4c8 <std>
 800d5a0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800d5a4:	2201      	movs	r2, #1
 800d5a6:	2109      	movs	r1, #9
 800d5a8:	f7ff ff8e 	bl	800d4c8 <std>
 800d5ac:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800d5b0:	2202      	movs	r2, #2
 800d5b2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d5b6:	2112      	movs	r1, #18
 800d5b8:	f7ff bf86 	b.w	800d4c8 <std>
 800d5bc:	20005288 	.word	0x20005288
 800d5c0:	20005150 	.word	0x20005150
 800d5c4:	0800d535 	.word	0x0800d535

0800d5c8 <__sfp_lock_acquire>:
 800d5c8:	4801      	ldr	r0, [pc, #4]	@ (800d5d0 <__sfp_lock_acquire+0x8>)
 800d5ca:	f000 ba8e 	b.w	800daea <__retarget_lock_acquire_recursive>
 800d5ce:	bf00      	nop
 800d5d0:	20005291 	.word	0x20005291

0800d5d4 <__sfp_lock_release>:
 800d5d4:	4801      	ldr	r0, [pc, #4]	@ (800d5dc <__sfp_lock_release+0x8>)
 800d5d6:	f000 ba89 	b.w	800daec <__retarget_lock_release_recursive>
 800d5da:	bf00      	nop
 800d5dc:	20005291 	.word	0x20005291

0800d5e0 <__sinit>:
 800d5e0:	b510      	push	{r4, lr}
 800d5e2:	4604      	mov	r4, r0
 800d5e4:	f7ff fff0 	bl	800d5c8 <__sfp_lock_acquire>
 800d5e8:	6a23      	ldr	r3, [r4, #32]
 800d5ea:	b11b      	cbz	r3, 800d5f4 <__sinit+0x14>
 800d5ec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d5f0:	f7ff bff0 	b.w	800d5d4 <__sfp_lock_release>
 800d5f4:	4b04      	ldr	r3, [pc, #16]	@ (800d608 <__sinit+0x28>)
 800d5f6:	6223      	str	r3, [r4, #32]
 800d5f8:	4b04      	ldr	r3, [pc, #16]	@ (800d60c <__sinit+0x2c>)
 800d5fa:	681b      	ldr	r3, [r3, #0]
 800d5fc:	2b00      	cmp	r3, #0
 800d5fe:	d1f5      	bne.n	800d5ec <__sinit+0xc>
 800d600:	f7ff ffc4 	bl	800d58c <global_stdio_init.part.0>
 800d604:	e7f2      	b.n	800d5ec <__sinit+0xc>
 800d606:	bf00      	nop
 800d608:	0800d54d 	.word	0x0800d54d
 800d60c:	20005288 	.word	0x20005288

0800d610 <_fwalk_sglue>:
 800d610:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d614:	4607      	mov	r7, r0
 800d616:	4688      	mov	r8, r1
 800d618:	4614      	mov	r4, r2
 800d61a:	2600      	movs	r6, #0
 800d61c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d620:	f1b9 0901 	subs.w	r9, r9, #1
 800d624:	d505      	bpl.n	800d632 <_fwalk_sglue+0x22>
 800d626:	6824      	ldr	r4, [r4, #0]
 800d628:	2c00      	cmp	r4, #0
 800d62a:	d1f7      	bne.n	800d61c <_fwalk_sglue+0xc>
 800d62c:	4630      	mov	r0, r6
 800d62e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d632:	89ab      	ldrh	r3, [r5, #12]
 800d634:	2b01      	cmp	r3, #1
 800d636:	d907      	bls.n	800d648 <_fwalk_sglue+0x38>
 800d638:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d63c:	3301      	adds	r3, #1
 800d63e:	d003      	beq.n	800d648 <_fwalk_sglue+0x38>
 800d640:	4629      	mov	r1, r5
 800d642:	4638      	mov	r0, r7
 800d644:	47c0      	blx	r8
 800d646:	4306      	orrs	r6, r0
 800d648:	3568      	adds	r5, #104	@ 0x68
 800d64a:	e7e9      	b.n	800d620 <_fwalk_sglue+0x10>

0800d64c <iprintf>:
 800d64c:	b40f      	push	{r0, r1, r2, r3}
 800d64e:	b507      	push	{r0, r1, r2, lr}
 800d650:	4906      	ldr	r1, [pc, #24]	@ (800d66c <iprintf+0x20>)
 800d652:	ab04      	add	r3, sp, #16
 800d654:	6808      	ldr	r0, [r1, #0]
 800d656:	f853 2b04 	ldr.w	r2, [r3], #4
 800d65a:	6881      	ldr	r1, [r0, #8]
 800d65c:	9301      	str	r3, [sp, #4]
 800d65e:	f001 fea7 	bl	800f3b0 <_vfiprintf_r>
 800d662:	b003      	add	sp, #12
 800d664:	f85d eb04 	ldr.w	lr, [sp], #4
 800d668:	b004      	add	sp, #16
 800d66a:	4770      	bx	lr
 800d66c:	200000b8 	.word	0x200000b8

0800d670 <_puts_r>:
 800d670:	6a03      	ldr	r3, [r0, #32]
 800d672:	b570      	push	{r4, r5, r6, lr}
 800d674:	6884      	ldr	r4, [r0, #8]
 800d676:	4605      	mov	r5, r0
 800d678:	460e      	mov	r6, r1
 800d67a:	b90b      	cbnz	r3, 800d680 <_puts_r+0x10>
 800d67c:	f7ff ffb0 	bl	800d5e0 <__sinit>
 800d680:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d682:	07db      	lsls	r3, r3, #31
 800d684:	d405      	bmi.n	800d692 <_puts_r+0x22>
 800d686:	89a3      	ldrh	r3, [r4, #12]
 800d688:	0598      	lsls	r0, r3, #22
 800d68a:	d402      	bmi.n	800d692 <_puts_r+0x22>
 800d68c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d68e:	f000 fa2c 	bl	800daea <__retarget_lock_acquire_recursive>
 800d692:	89a3      	ldrh	r3, [r4, #12]
 800d694:	0719      	lsls	r1, r3, #28
 800d696:	d502      	bpl.n	800d69e <_puts_r+0x2e>
 800d698:	6923      	ldr	r3, [r4, #16]
 800d69a:	2b00      	cmp	r3, #0
 800d69c:	d135      	bne.n	800d70a <_puts_r+0x9a>
 800d69e:	4621      	mov	r1, r4
 800d6a0:	4628      	mov	r0, r5
 800d6a2:	f000 f8f9 	bl	800d898 <__swsetup_r>
 800d6a6:	b380      	cbz	r0, 800d70a <_puts_r+0x9a>
 800d6a8:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800d6ac:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d6ae:	07da      	lsls	r2, r3, #31
 800d6b0:	d405      	bmi.n	800d6be <_puts_r+0x4e>
 800d6b2:	89a3      	ldrh	r3, [r4, #12]
 800d6b4:	059b      	lsls	r3, r3, #22
 800d6b6:	d402      	bmi.n	800d6be <_puts_r+0x4e>
 800d6b8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d6ba:	f000 fa17 	bl	800daec <__retarget_lock_release_recursive>
 800d6be:	4628      	mov	r0, r5
 800d6c0:	bd70      	pop	{r4, r5, r6, pc}
 800d6c2:	2b00      	cmp	r3, #0
 800d6c4:	da04      	bge.n	800d6d0 <_puts_r+0x60>
 800d6c6:	69a2      	ldr	r2, [r4, #24]
 800d6c8:	429a      	cmp	r2, r3
 800d6ca:	dc17      	bgt.n	800d6fc <_puts_r+0x8c>
 800d6cc:	290a      	cmp	r1, #10
 800d6ce:	d015      	beq.n	800d6fc <_puts_r+0x8c>
 800d6d0:	6823      	ldr	r3, [r4, #0]
 800d6d2:	1c5a      	adds	r2, r3, #1
 800d6d4:	6022      	str	r2, [r4, #0]
 800d6d6:	7019      	strb	r1, [r3, #0]
 800d6d8:	68a3      	ldr	r3, [r4, #8]
 800d6da:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800d6de:	3b01      	subs	r3, #1
 800d6e0:	60a3      	str	r3, [r4, #8]
 800d6e2:	2900      	cmp	r1, #0
 800d6e4:	d1ed      	bne.n	800d6c2 <_puts_r+0x52>
 800d6e6:	2b00      	cmp	r3, #0
 800d6e8:	da11      	bge.n	800d70e <_puts_r+0x9e>
 800d6ea:	4622      	mov	r2, r4
 800d6ec:	210a      	movs	r1, #10
 800d6ee:	4628      	mov	r0, r5
 800d6f0:	f000 f893 	bl	800d81a <__swbuf_r>
 800d6f4:	3001      	adds	r0, #1
 800d6f6:	d0d7      	beq.n	800d6a8 <_puts_r+0x38>
 800d6f8:	250a      	movs	r5, #10
 800d6fa:	e7d7      	b.n	800d6ac <_puts_r+0x3c>
 800d6fc:	4622      	mov	r2, r4
 800d6fe:	4628      	mov	r0, r5
 800d700:	f000 f88b 	bl	800d81a <__swbuf_r>
 800d704:	3001      	adds	r0, #1
 800d706:	d1e7      	bne.n	800d6d8 <_puts_r+0x68>
 800d708:	e7ce      	b.n	800d6a8 <_puts_r+0x38>
 800d70a:	3e01      	subs	r6, #1
 800d70c:	e7e4      	b.n	800d6d8 <_puts_r+0x68>
 800d70e:	6823      	ldr	r3, [r4, #0]
 800d710:	1c5a      	adds	r2, r3, #1
 800d712:	6022      	str	r2, [r4, #0]
 800d714:	220a      	movs	r2, #10
 800d716:	701a      	strb	r2, [r3, #0]
 800d718:	e7ee      	b.n	800d6f8 <_puts_r+0x88>
	...

0800d71c <puts>:
 800d71c:	4b02      	ldr	r3, [pc, #8]	@ (800d728 <puts+0xc>)
 800d71e:	4601      	mov	r1, r0
 800d720:	6818      	ldr	r0, [r3, #0]
 800d722:	f7ff bfa5 	b.w	800d670 <_puts_r>
 800d726:	bf00      	nop
 800d728:	200000b8 	.word	0x200000b8

0800d72c <sniprintf>:
 800d72c:	b40c      	push	{r2, r3}
 800d72e:	b530      	push	{r4, r5, lr}
 800d730:	4b17      	ldr	r3, [pc, #92]	@ (800d790 <sniprintf+0x64>)
 800d732:	1e0c      	subs	r4, r1, #0
 800d734:	681d      	ldr	r5, [r3, #0]
 800d736:	b09d      	sub	sp, #116	@ 0x74
 800d738:	da08      	bge.n	800d74c <sniprintf+0x20>
 800d73a:	238b      	movs	r3, #139	@ 0x8b
 800d73c:	602b      	str	r3, [r5, #0]
 800d73e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d742:	b01d      	add	sp, #116	@ 0x74
 800d744:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d748:	b002      	add	sp, #8
 800d74a:	4770      	bx	lr
 800d74c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800d750:	f8ad 3014 	strh.w	r3, [sp, #20]
 800d754:	bf14      	ite	ne
 800d756:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 800d75a:	4623      	moveq	r3, r4
 800d75c:	9304      	str	r3, [sp, #16]
 800d75e:	9307      	str	r3, [sp, #28]
 800d760:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d764:	9002      	str	r0, [sp, #8]
 800d766:	9006      	str	r0, [sp, #24]
 800d768:	f8ad 3016 	strh.w	r3, [sp, #22]
 800d76c:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800d76e:	ab21      	add	r3, sp, #132	@ 0x84
 800d770:	a902      	add	r1, sp, #8
 800d772:	4628      	mov	r0, r5
 800d774:	9301      	str	r3, [sp, #4]
 800d776:	f001 fcf5 	bl	800f164 <_svfiprintf_r>
 800d77a:	1c43      	adds	r3, r0, #1
 800d77c:	bfbc      	itt	lt
 800d77e:	238b      	movlt	r3, #139	@ 0x8b
 800d780:	602b      	strlt	r3, [r5, #0]
 800d782:	2c00      	cmp	r4, #0
 800d784:	d0dd      	beq.n	800d742 <sniprintf+0x16>
 800d786:	9b02      	ldr	r3, [sp, #8]
 800d788:	2200      	movs	r2, #0
 800d78a:	701a      	strb	r2, [r3, #0]
 800d78c:	e7d9      	b.n	800d742 <sniprintf+0x16>
 800d78e:	bf00      	nop
 800d790:	200000b8 	.word	0x200000b8

0800d794 <__sread>:
 800d794:	b510      	push	{r4, lr}
 800d796:	460c      	mov	r4, r1
 800d798:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d79c:	f000 f956 	bl	800da4c <_read_r>
 800d7a0:	2800      	cmp	r0, #0
 800d7a2:	bfab      	itete	ge
 800d7a4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800d7a6:	89a3      	ldrhlt	r3, [r4, #12]
 800d7a8:	181b      	addge	r3, r3, r0
 800d7aa:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800d7ae:	bfac      	ite	ge
 800d7b0:	6563      	strge	r3, [r4, #84]	@ 0x54
 800d7b2:	81a3      	strhlt	r3, [r4, #12]
 800d7b4:	bd10      	pop	{r4, pc}

0800d7b6 <__swrite>:
 800d7b6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d7ba:	461f      	mov	r7, r3
 800d7bc:	898b      	ldrh	r3, [r1, #12]
 800d7be:	05db      	lsls	r3, r3, #23
 800d7c0:	4605      	mov	r5, r0
 800d7c2:	460c      	mov	r4, r1
 800d7c4:	4616      	mov	r6, r2
 800d7c6:	d505      	bpl.n	800d7d4 <__swrite+0x1e>
 800d7c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d7cc:	2302      	movs	r3, #2
 800d7ce:	2200      	movs	r2, #0
 800d7d0:	f000 f92a 	bl	800da28 <_lseek_r>
 800d7d4:	89a3      	ldrh	r3, [r4, #12]
 800d7d6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d7da:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d7de:	81a3      	strh	r3, [r4, #12]
 800d7e0:	4632      	mov	r2, r6
 800d7e2:	463b      	mov	r3, r7
 800d7e4:	4628      	mov	r0, r5
 800d7e6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d7ea:	f000 b941 	b.w	800da70 <_write_r>

0800d7ee <__sseek>:
 800d7ee:	b510      	push	{r4, lr}
 800d7f0:	460c      	mov	r4, r1
 800d7f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d7f6:	f000 f917 	bl	800da28 <_lseek_r>
 800d7fa:	1c43      	adds	r3, r0, #1
 800d7fc:	89a3      	ldrh	r3, [r4, #12]
 800d7fe:	bf15      	itete	ne
 800d800:	6560      	strne	r0, [r4, #84]	@ 0x54
 800d802:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800d806:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800d80a:	81a3      	strheq	r3, [r4, #12]
 800d80c:	bf18      	it	ne
 800d80e:	81a3      	strhne	r3, [r4, #12]
 800d810:	bd10      	pop	{r4, pc}

0800d812 <__sclose>:
 800d812:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d816:	f000 b8a1 	b.w	800d95c <_close_r>

0800d81a <__swbuf_r>:
 800d81a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d81c:	460e      	mov	r6, r1
 800d81e:	4614      	mov	r4, r2
 800d820:	4605      	mov	r5, r0
 800d822:	b118      	cbz	r0, 800d82c <__swbuf_r+0x12>
 800d824:	6a03      	ldr	r3, [r0, #32]
 800d826:	b90b      	cbnz	r3, 800d82c <__swbuf_r+0x12>
 800d828:	f7ff feda 	bl	800d5e0 <__sinit>
 800d82c:	69a3      	ldr	r3, [r4, #24]
 800d82e:	60a3      	str	r3, [r4, #8]
 800d830:	89a3      	ldrh	r3, [r4, #12]
 800d832:	071a      	lsls	r2, r3, #28
 800d834:	d501      	bpl.n	800d83a <__swbuf_r+0x20>
 800d836:	6923      	ldr	r3, [r4, #16]
 800d838:	b943      	cbnz	r3, 800d84c <__swbuf_r+0x32>
 800d83a:	4621      	mov	r1, r4
 800d83c:	4628      	mov	r0, r5
 800d83e:	f000 f82b 	bl	800d898 <__swsetup_r>
 800d842:	b118      	cbz	r0, 800d84c <__swbuf_r+0x32>
 800d844:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800d848:	4638      	mov	r0, r7
 800d84a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d84c:	6823      	ldr	r3, [r4, #0]
 800d84e:	6922      	ldr	r2, [r4, #16]
 800d850:	1a98      	subs	r0, r3, r2
 800d852:	6963      	ldr	r3, [r4, #20]
 800d854:	b2f6      	uxtb	r6, r6
 800d856:	4283      	cmp	r3, r0
 800d858:	4637      	mov	r7, r6
 800d85a:	dc05      	bgt.n	800d868 <__swbuf_r+0x4e>
 800d85c:	4621      	mov	r1, r4
 800d85e:	4628      	mov	r0, r5
 800d860:	f001 ff42 	bl	800f6e8 <_fflush_r>
 800d864:	2800      	cmp	r0, #0
 800d866:	d1ed      	bne.n	800d844 <__swbuf_r+0x2a>
 800d868:	68a3      	ldr	r3, [r4, #8]
 800d86a:	3b01      	subs	r3, #1
 800d86c:	60a3      	str	r3, [r4, #8]
 800d86e:	6823      	ldr	r3, [r4, #0]
 800d870:	1c5a      	adds	r2, r3, #1
 800d872:	6022      	str	r2, [r4, #0]
 800d874:	701e      	strb	r6, [r3, #0]
 800d876:	6962      	ldr	r2, [r4, #20]
 800d878:	1c43      	adds	r3, r0, #1
 800d87a:	429a      	cmp	r2, r3
 800d87c:	d004      	beq.n	800d888 <__swbuf_r+0x6e>
 800d87e:	89a3      	ldrh	r3, [r4, #12]
 800d880:	07db      	lsls	r3, r3, #31
 800d882:	d5e1      	bpl.n	800d848 <__swbuf_r+0x2e>
 800d884:	2e0a      	cmp	r6, #10
 800d886:	d1df      	bne.n	800d848 <__swbuf_r+0x2e>
 800d888:	4621      	mov	r1, r4
 800d88a:	4628      	mov	r0, r5
 800d88c:	f001 ff2c 	bl	800f6e8 <_fflush_r>
 800d890:	2800      	cmp	r0, #0
 800d892:	d0d9      	beq.n	800d848 <__swbuf_r+0x2e>
 800d894:	e7d6      	b.n	800d844 <__swbuf_r+0x2a>
	...

0800d898 <__swsetup_r>:
 800d898:	b538      	push	{r3, r4, r5, lr}
 800d89a:	4b29      	ldr	r3, [pc, #164]	@ (800d940 <__swsetup_r+0xa8>)
 800d89c:	4605      	mov	r5, r0
 800d89e:	6818      	ldr	r0, [r3, #0]
 800d8a0:	460c      	mov	r4, r1
 800d8a2:	b118      	cbz	r0, 800d8ac <__swsetup_r+0x14>
 800d8a4:	6a03      	ldr	r3, [r0, #32]
 800d8a6:	b90b      	cbnz	r3, 800d8ac <__swsetup_r+0x14>
 800d8a8:	f7ff fe9a 	bl	800d5e0 <__sinit>
 800d8ac:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d8b0:	0719      	lsls	r1, r3, #28
 800d8b2:	d422      	bmi.n	800d8fa <__swsetup_r+0x62>
 800d8b4:	06da      	lsls	r2, r3, #27
 800d8b6:	d407      	bmi.n	800d8c8 <__swsetup_r+0x30>
 800d8b8:	2209      	movs	r2, #9
 800d8ba:	602a      	str	r2, [r5, #0]
 800d8bc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d8c0:	81a3      	strh	r3, [r4, #12]
 800d8c2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d8c6:	e033      	b.n	800d930 <__swsetup_r+0x98>
 800d8c8:	0758      	lsls	r0, r3, #29
 800d8ca:	d512      	bpl.n	800d8f2 <__swsetup_r+0x5a>
 800d8cc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d8ce:	b141      	cbz	r1, 800d8e2 <__swsetup_r+0x4a>
 800d8d0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d8d4:	4299      	cmp	r1, r3
 800d8d6:	d002      	beq.n	800d8de <__swsetup_r+0x46>
 800d8d8:	4628      	mov	r0, r5
 800d8da:	f000 ff65 	bl	800e7a8 <_free_r>
 800d8de:	2300      	movs	r3, #0
 800d8e0:	6363      	str	r3, [r4, #52]	@ 0x34
 800d8e2:	89a3      	ldrh	r3, [r4, #12]
 800d8e4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800d8e8:	81a3      	strh	r3, [r4, #12]
 800d8ea:	2300      	movs	r3, #0
 800d8ec:	6063      	str	r3, [r4, #4]
 800d8ee:	6923      	ldr	r3, [r4, #16]
 800d8f0:	6023      	str	r3, [r4, #0]
 800d8f2:	89a3      	ldrh	r3, [r4, #12]
 800d8f4:	f043 0308 	orr.w	r3, r3, #8
 800d8f8:	81a3      	strh	r3, [r4, #12]
 800d8fa:	6923      	ldr	r3, [r4, #16]
 800d8fc:	b94b      	cbnz	r3, 800d912 <__swsetup_r+0x7a>
 800d8fe:	89a3      	ldrh	r3, [r4, #12]
 800d900:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800d904:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800d908:	d003      	beq.n	800d912 <__swsetup_r+0x7a>
 800d90a:	4621      	mov	r1, r4
 800d90c:	4628      	mov	r0, r5
 800d90e:	f001 ff39 	bl	800f784 <__smakebuf_r>
 800d912:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d916:	f013 0201 	ands.w	r2, r3, #1
 800d91a:	d00a      	beq.n	800d932 <__swsetup_r+0x9a>
 800d91c:	2200      	movs	r2, #0
 800d91e:	60a2      	str	r2, [r4, #8]
 800d920:	6962      	ldr	r2, [r4, #20]
 800d922:	4252      	negs	r2, r2
 800d924:	61a2      	str	r2, [r4, #24]
 800d926:	6922      	ldr	r2, [r4, #16]
 800d928:	b942      	cbnz	r2, 800d93c <__swsetup_r+0xa4>
 800d92a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800d92e:	d1c5      	bne.n	800d8bc <__swsetup_r+0x24>
 800d930:	bd38      	pop	{r3, r4, r5, pc}
 800d932:	0799      	lsls	r1, r3, #30
 800d934:	bf58      	it	pl
 800d936:	6962      	ldrpl	r2, [r4, #20]
 800d938:	60a2      	str	r2, [r4, #8]
 800d93a:	e7f4      	b.n	800d926 <__swsetup_r+0x8e>
 800d93c:	2000      	movs	r0, #0
 800d93e:	e7f7      	b.n	800d930 <__swsetup_r+0x98>
 800d940:	200000b8 	.word	0x200000b8

0800d944 <memset>:
 800d944:	4402      	add	r2, r0
 800d946:	4603      	mov	r3, r0
 800d948:	4293      	cmp	r3, r2
 800d94a:	d100      	bne.n	800d94e <memset+0xa>
 800d94c:	4770      	bx	lr
 800d94e:	f803 1b01 	strb.w	r1, [r3], #1
 800d952:	e7f9      	b.n	800d948 <memset+0x4>

0800d954 <_localeconv_r>:
 800d954:	4800      	ldr	r0, [pc, #0]	@ (800d958 <_localeconv_r+0x4>)
 800d956:	4770      	bx	lr
 800d958:	200001f8 	.word	0x200001f8

0800d95c <_close_r>:
 800d95c:	b538      	push	{r3, r4, r5, lr}
 800d95e:	4d06      	ldr	r5, [pc, #24]	@ (800d978 <_close_r+0x1c>)
 800d960:	2300      	movs	r3, #0
 800d962:	4604      	mov	r4, r0
 800d964:	4608      	mov	r0, r1
 800d966:	602b      	str	r3, [r5, #0]
 800d968:	f7f5 ff70 	bl	800384c <_close>
 800d96c:	1c43      	adds	r3, r0, #1
 800d96e:	d102      	bne.n	800d976 <_close_r+0x1a>
 800d970:	682b      	ldr	r3, [r5, #0]
 800d972:	b103      	cbz	r3, 800d976 <_close_r+0x1a>
 800d974:	6023      	str	r3, [r4, #0]
 800d976:	bd38      	pop	{r3, r4, r5, pc}
 800d978:	2000528c 	.word	0x2000528c

0800d97c <_reclaim_reent>:
 800d97c:	4b29      	ldr	r3, [pc, #164]	@ (800da24 <_reclaim_reent+0xa8>)
 800d97e:	681b      	ldr	r3, [r3, #0]
 800d980:	4283      	cmp	r3, r0
 800d982:	b570      	push	{r4, r5, r6, lr}
 800d984:	4604      	mov	r4, r0
 800d986:	d04b      	beq.n	800da20 <_reclaim_reent+0xa4>
 800d988:	69c3      	ldr	r3, [r0, #28]
 800d98a:	b1ab      	cbz	r3, 800d9b8 <_reclaim_reent+0x3c>
 800d98c:	68db      	ldr	r3, [r3, #12]
 800d98e:	b16b      	cbz	r3, 800d9ac <_reclaim_reent+0x30>
 800d990:	2500      	movs	r5, #0
 800d992:	69e3      	ldr	r3, [r4, #28]
 800d994:	68db      	ldr	r3, [r3, #12]
 800d996:	5959      	ldr	r1, [r3, r5]
 800d998:	2900      	cmp	r1, #0
 800d99a:	d13b      	bne.n	800da14 <_reclaim_reent+0x98>
 800d99c:	3504      	adds	r5, #4
 800d99e:	2d80      	cmp	r5, #128	@ 0x80
 800d9a0:	d1f7      	bne.n	800d992 <_reclaim_reent+0x16>
 800d9a2:	69e3      	ldr	r3, [r4, #28]
 800d9a4:	4620      	mov	r0, r4
 800d9a6:	68d9      	ldr	r1, [r3, #12]
 800d9a8:	f000 fefe 	bl	800e7a8 <_free_r>
 800d9ac:	69e3      	ldr	r3, [r4, #28]
 800d9ae:	6819      	ldr	r1, [r3, #0]
 800d9b0:	b111      	cbz	r1, 800d9b8 <_reclaim_reent+0x3c>
 800d9b2:	4620      	mov	r0, r4
 800d9b4:	f000 fef8 	bl	800e7a8 <_free_r>
 800d9b8:	6961      	ldr	r1, [r4, #20]
 800d9ba:	b111      	cbz	r1, 800d9c2 <_reclaim_reent+0x46>
 800d9bc:	4620      	mov	r0, r4
 800d9be:	f000 fef3 	bl	800e7a8 <_free_r>
 800d9c2:	69e1      	ldr	r1, [r4, #28]
 800d9c4:	b111      	cbz	r1, 800d9cc <_reclaim_reent+0x50>
 800d9c6:	4620      	mov	r0, r4
 800d9c8:	f000 feee 	bl	800e7a8 <_free_r>
 800d9cc:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800d9ce:	b111      	cbz	r1, 800d9d6 <_reclaim_reent+0x5a>
 800d9d0:	4620      	mov	r0, r4
 800d9d2:	f000 fee9 	bl	800e7a8 <_free_r>
 800d9d6:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d9d8:	b111      	cbz	r1, 800d9e0 <_reclaim_reent+0x64>
 800d9da:	4620      	mov	r0, r4
 800d9dc:	f000 fee4 	bl	800e7a8 <_free_r>
 800d9e0:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800d9e2:	b111      	cbz	r1, 800d9ea <_reclaim_reent+0x6e>
 800d9e4:	4620      	mov	r0, r4
 800d9e6:	f000 fedf 	bl	800e7a8 <_free_r>
 800d9ea:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800d9ec:	b111      	cbz	r1, 800d9f4 <_reclaim_reent+0x78>
 800d9ee:	4620      	mov	r0, r4
 800d9f0:	f000 feda 	bl	800e7a8 <_free_r>
 800d9f4:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800d9f6:	b111      	cbz	r1, 800d9fe <_reclaim_reent+0x82>
 800d9f8:	4620      	mov	r0, r4
 800d9fa:	f000 fed5 	bl	800e7a8 <_free_r>
 800d9fe:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800da00:	b111      	cbz	r1, 800da08 <_reclaim_reent+0x8c>
 800da02:	4620      	mov	r0, r4
 800da04:	f000 fed0 	bl	800e7a8 <_free_r>
 800da08:	6a23      	ldr	r3, [r4, #32]
 800da0a:	b14b      	cbz	r3, 800da20 <_reclaim_reent+0xa4>
 800da0c:	4620      	mov	r0, r4
 800da0e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800da12:	4718      	bx	r3
 800da14:	680e      	ldr	r6, [r1, #0]
 800da16:	4620      	mov	r0, r4
 800da18:	f000 fec6 	bl	800e7a8 <_free_r>
 800da1c:	4631      	mov	r1, r6
 800da1e:	e7bb      	b.n	800d998 <_reclaim_reent+0x1c>
 800da20:	bd70      	pop	{r4, r5, r6, pc}
 800da22:	bf00      	nop
 800da24:	200000b8 	.word	0x200000b8

0800da28 <_lseek_r>:
 800da28:	b538      	push	{r3, r4, r5, lr}
 800da2a:	4d07      	ldr	r5, [pc, #28]	@ (800da48 <_lseek_r+0x20>)
 800da2c:	4604      	mov	r4, r0
 800da2e:	4608      	mov	r0, r1
 800da30:	4611      	mov	r1, r2
 800da32:	2200      	movs	r2, #0
 800da34:	602a      	str	r2, [r5, #0]
 800da36:	461a      	mov	r2, r3
 800da38:	f7f5 ff2f 	bl	800389a <_lseek>
 800da3c:	1c43      	adds	r3, r0, #1
 800da3e:	d102      	bne.n	800da46 <_lseek_r+0x1e>
 800da40:	682b      	ldr	r3, [r5, #0]
 800da42:	b103      	cbz	r3, 800da46 <_lseek_r+0x1e>
 800da44:	6023      	str	r3, [r4, #0]
 800da46:	bd38      	pop	{r3, r4, r5, pc}
 800da48:	2000528c 	.word	0x2000528c

0800da4c <_read_r>:
 800da4c:	b538      	push	{r3, r4, r5, lr}
 800da4e:	4d07      	ldr	r5, [pc, #28]	@ (800da6c <_read_r+0x20>)
 800da50:	4604      	mov	r4, r0
 800da52:	4608      	mov	r0, r1
 800da54:	4611      	mov	r1, r2
 800da56:	2200      	movs	r2, #0
 800da58:	602a      	str	r2, [r5, #0]
 800da5a:	461a      	mov	r2, r3
 800da5c:	f7f5 febd 	bl	80037da <_read>
 800da60:	1c43      	adds	r3, r0, #1
 800da62:	d102      	bne.n	800da6a <_read_r+0x1e>
 800da64:	682b      	ldr	r3, [r5, #0]
 800da66:	b103      	cbz	r3, 800da6a <_read_r+0x1e>
 800da68:	6023      	str	r3, [r4, #0]
 800da6a:	bd38      	pop	{r3, r4, r5, pc}
 800da6c:	2000528c 	.word	0x2000528c

0800da70 <_write_r>:
 800da70:	b538      	push	{r3, r4, r5, lr}
 800da72:	4d07      	ldr	r5, [pc, #28]	@ (800da90 <_write_r+0x20>)
 800da74:	4604      	mov	r4, r0
 800da76:	4608      	mov	r0, r1
 800da78:	4611      	mov	r1, r2
 800da7a:	2200      	movs	r2, #0
 800da7c:	602a      	str	r2, [r5, #0]
 800da7e:	461a      	mov	r2, r3
 800da80:	f7f5 fec8 	bl	8003814 <_write>
 800da84:	1c43      	adds	r3, r0, #1
 800da86:	d102      	bne.n	800da8e <_write_r+0x1e>
 800da88:	682b      	ldr	r3, [r5, #0]
 800da8a:	b103      	cbz	r3, 800da8e <_write_r+0x1e>
 800da8c:	6023      	str	r3, [r4, #0]
 800da8e:	bd38      	pop	{r3, r4, r5, pc}
 800da90:	2000528c 	.word	0x2000528c

0800da94 <__errno>:
 800da94:	4b01      	ldr	r3, [pc, #4]	@ (800da9c <__errno+0x8>)
 800da96:	6818      	ldr	r0, [r3, #0]
 800da98:	4770      	bx	lr
 800da9a:	bf00      	nop
 800da9c:	200000b8 	.word	0x200000b8

0800daa0 <__libc_init_array>:
 800daa0:	b570      	push	{r4, r5, r6, lr}
 800daa2:	4d0d      	ldr	r5, [pc, #52]	@ (800dad8 <__libc_init_array+0x38>)
 800daa4:	4c0d      	ldr	r4, [pc, #52]	@ (800dadc <__libc_init_array+0x3c>)
 800daa6:	1b64      	subs	r4, r4, r5
 800daa8:	10a4      	asrs	r4, r4, #2
 800daaa:	2600      	movs	r6, #0
 800daac:	42a6      	cmp	r6, r4
 800daae:	d109      	bne.n	800dac4 <__libc_init_array+0x24>
 800dab0:	4d0b      	ldr	r5, [pc, #44]	@ (800dae0 <__libc_init_array+0x40>)
 800dab2:	4c0c      	ldr	r4, [pc, #48]	@ (800dae4 <__libc_init_array+0x44>)
 800dab4:	f002 fb46 	bl	8010144 <_init>
 800dab8:	1b64      	subs	r4, r4, r5
 800daba:	10a4      	asrs	r4, r4, #2
 800dabc:	2600      	movs	r6, #0
 800dabe:	42a6      	cmp	r6, r4
 800dac0:	d105      	bne.n	800dace <__libc_init_array+0x2e>
 800dac2:	bd70      	pop	{r4, r5, r6, pc}
 800dac4:	f855 3b04 	ldr.w	r3, [r5], #4
 800dac8:	4798      	blx	r3
 800daca:	3601      	adds	r6, #1
 800dacc:	e7ee      	b.n	800daac <__libc_init_array+0xc>
 800dace:	f855 3b04 	ldr.w	r3, [r5], #4
 800dad2:	4798      	blx	r3
 800dad4:	3601      	adds	r6, #1
 800dad6:	e7f2      	b.n	800dabe <__libc_init_array+0x1e>
 800dad8:	08010ff0 	.word	0x08010ff0
 800dadc:	08010ff0 	.word	0x08010ff0
 800dae0:	08010ff0 	.word	0x08010ff0
 800dae4:	08010ff4 	.word	0x08010ff4

0800dae8 <__retarget_lock_init_recursive>:
 800dae8:	4770      	bx	lr

0800daea <__retarget_lock_acquire_recursive>:
 800daea:	4770      	bx	lr

0800daec <__retarget_lock_release_recursive>:
 800daec:	4770      	bx	lr

0800daee <memcpy>:
 800daee:	440a      	add	r2, r1
 800daf0:	4291      	cmp	r1, r2
 800daf2:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800daf6:	d100      	bne.n	800dafa <memcpy+0xc>
 800daf8:	4770      	bx	lr
 800dafa:	b510      	push	{r4, lr}
 800dafc:	f811 4b01 	ldrb.w	r4, [r1], #1
 800db00:	f803 4f01 	strb.w	r4, [r3, #1]!
 800db04:	4291      	cmp	r1, r2
 800db06:	d1f9      	bne.n	800dafc <memcpy+0xe>
 800db08:	bd10      	pop	{r4, pc}

0800db0a <quorem>:
 800db0a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db0e:	6903      	ldr	r3, [r0, #16]
 800db10:	690c      	ldr	r4, [r1, #16]
 800db12:	42a3      	cmp	r3, r4
 800db14:	4607      	mov	r7, r0
 800db16:	db7e      	blt.n	800dc16 <quorem+0x10c>
 800db18:	3c01      	subs	r4, #1
 800db1a:	f101 0814 	add.w	r8, r1, #20
 800db1e:	00a3      	lsls	r3, r4, #2
 800db20:	f100 0514 	add.w	r5, r0, #20
 800db24:	9300      	str	r3, [sp, #0]
 800db26:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800db2a:	9301      	str	r3, [sp, #4]
 800db2c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800db30:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800db34:	3301      	adds	r3, #1
 800db36:	429a      	cmp	r2, r3
 800db38:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800db3c:	fbb2 f6f3 	udiv	r6, r2, r3
 800db40:	d32e      	bcc.n	800dba0 <quorem+0x96>
 800db42:	f04f 0a00 	mov.w	sl, #0
 800db46:	46c4      	mov	ip, r8
 800db48:	46ae      	mov	lr, r5
 800db4a:	46d3      	mov	fp, sl
 800db4c:	f85c 3b04 	ldr.w	r3, [ip], #4
 800db50:	b298      	uxth	r0, r3
 800db52:	fb06 a000 	mla	r0, r6, r0, sl
 800db56:	0c02      	lsrs	r2, r0, #16
 800db58:	0c1b      	lsrs	r3, r3, #16
 800db5a:	fb06 2303 	mla	r3, r6, r3, r2
 800db5e:	f8de 2000 	ldr.w	r2, [lr]
 800db62:	b280      	uxth	r0, r0
 800db64:	b292      	uxth	r2, r2
 800db66:	1a12      	subs	r2, r2, r0
 800db68:	445a      	add	r2, fp
 800db6a:	f8de 0000 	ldr.w	r0, [lr]
 800db6e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800db72:	b29b      	uxth	r3, r3
 800db74:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800db78:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800db7c:	b292      	uxth	r2, r2
 800db7e:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800db82:	45e1      	cmp	r9, ip
 800db84:	f84e 2b04 	str.w	r2, [lr], #4
 800db88:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800db8c:	d2de      	bcs.n	800db4c <quorem+0x42>
 800db8e:	9b00      	ldr	r3, [sp, #0]
 800db90:	58eb      	ldr	r3, [r5, r3]
 800db92:	b92b      	cbnz	r3, 800dba0 <quorem+0x96>
 800db94:	9b01      	ldr	r3, [sp, #4]
 800db96:	3b04      	subs	r3, #4
 800db98:	429d      	cmp	r5, r3
 800db9a:	461a      	mov	r2, r3
 800db9c:	d32f      	bcc.n	800dbfe <quorem+0xf4>
 800db9e:	613c      	str	r4, [r7, #16]
 800dba0:	4638      	mov	r0, r7
 800dba2:	f001 f97b 	bl	800ee9c <__mcmp>
 800dba6:	2800      	cmp	r0, #0
 800dba8:	db25      	blt.n	800dbf6 <quorem+0xec>
 800dbaa:	4629      	mov	r1, r5
 800dbac:	2000      	movs	r0, #0
 800dbae:	f858 2b04 	ldr.w	r2, [r8], #4
 800dbb2:	f8d1 c000 	ldr.w	ip, [r1]
 800dbb6:	fa1f fe82 	uxth.w	lr, r2
 800dbba:	fa1f f38c 	uxth.w	r3, ip
 800dbbe:	eba3 030e 	sub.w	r3, r3, lr
 800dbc2:	4403      	add	r3, r0
 800dbc4:	0c12      	lsrs	r2, r2, #16
 800dbc6:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800dbca:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800dbce:	b29b      	uxth	r3, r3
 800dbd0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800dbd4:	45c1      	cmp	r9, r8
 800dbd6:	f841 3b04 	str.w	r3, [r1], #4
 800dbda:	ea4f 4022 	mov.w	r0, r2, asr #16
 800dbde:	d2e6      	bcs.n	800dbae <quorem+0xa4>
 800dbe0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800dbe4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800dbe8:	b922      	cbnz	r2, 800dbf4 <quorem+0xea>
 800dbea:	3b04      	subs	r3, #4
 800dbec:	429d      	cmp	r5, r3
 800dbee:	461a      	mov	r2, r3
 800dbf0:	d30b      	bcc.n	800dc0a <quorem+0x100>
 800dbf2:	613c      	str	r4, [r7, #16]
 800dbf4:	3601      	adds	r6, #1
 800dbf6:	4630      	mov	r0, r6
 800dbf8:	b003      	add	sp, #12
 800dbfa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dbfe:	6812      	ldr	r2, [r2, #0]
 800dc00:	3b04      	subs	r3, #4
 800dc02:	2a00      	cmp	r2, #0
 800dc04:	d1cb      	bne.n	800db9e <quorem+0x94>
 800dc06:	3c01      	subs	r4, #1
 800dc08:	e7c6      	b.n	800db98 <quorem+0x8e>
 800dc0a:	6812      	ldr	r2, [r2, #0]
 800dc0c:	3b04      	subs	r3, #4
 800dc0e:	2a00      	cmp	r2, #0
 800dc10:	d1ef      	bne.n	800dbf2 <quorem+0xe8>
 800dc12:	3c01      	subs	r4, #1
 800dc14:	e7ea      	b.n	800dbec <quorem+0xe2>
 800dc16:	2000      	movs	r0, #0
 800dc18:	e7ee      	b.n	800dbf8 <quorem+0xee>
 800dc1a:	0000      	movs	r0, r0
 800dc1c:	0000      	movs	r0, r0
	...

0800dc20 <_dtoa_r>:
 800dc20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc24:	69c7      	ldr	r7, [r0, #28]
 800dc26:	b099      	sub	sp, #100	@ 0x64
 800dc28:	ed8d 0b02 	vstr	d0, [sp, #8]
 800dc2c:	ec55 4b10 	vmov	r4, r5, d0
 800dc30:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800dc32:	9109      	str	r1, [sp, #36]	@ 0x24
 800dc34:	4683      	mov	fp, r0
 800dc36:	920e      	str	r2, [sp, #56]	@ 0x38
 800dc38:	9313      	str	r3, [sp, #76]	@ 0x4c
 800dc3a:	b97f      	cbnz	r7, 800dc5c <_dtoa_r+0x3c>
 800dc3c:	2010      	movs	r0, #16
 800dc3e:	f000 fdfd 	bl	800e83c <malloc>
 800dc42:	4602      	mov	r2, r0
 800dc44:	f8cb 001c 	str.w	r0, [fp, #28]
 800dc48:	b920      	cbnz	r0, 800dc54 <_dtoa_r+0x34>
 800dc4a:	4ba7      	ldr	r3, [pc, #668]	@ (800dee8 <_dtoa_r+0x2c8>)
 800dc4c:	21ef      	movs	r1, #239	@ 0xef
 800dc4e:	48a7      	ldr	r0, [pc, #668]	@ (800deec <_dtoa_r+0x2cc>)
 800dc50:	f001 fe20 	bl	800f894 <__assert_func>
 800dc54:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800dc58:	6007      	str	r7, [r0, #0]
 800dc5a:	60c7      	str	r7, [r0, #12]
 800dc5c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800dc60:	6819      	ldr	r1, [r3, #0]
 800dc62:	b159      	cbz	r1, 800dc7c <_dtoa_r+0x5c>
 800dc64:	685a      	ldr	r2, [r3, #4]
 800dc66:	604a      	str	r2, [r1, #4]
 800dc68:	2301      	movs	r3, #1
 800dc6a:	4093      	lsls	r3, r2
 800dc6c:	608b      	str	r3, [r1, #8]
 800dc6e:	4658      	mov	r0, fp
 800dc70:	f000 feda 	bl	800ea28 <_Bfree>
 800dc74:	f8db 301c 	ldr.w	r3, [fp, #28]
 800dc78:	2200      	movs	r2, #0
 800dc7a:	601a      	str	r2, [r3, #0]
 800dc7c:	1e2b      	subs	r3, r5, #0
 800dc7e:	bfb9      	ittee	lt
 800dc80:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800dc84:	9303      	strlt	r3, [sp, #12]
 800dc86:	2300      	movge	r3, #0
 800dc88:	6033      	strge	r3, [r6, #0]
 800dc8a:	9f03      	ldr	r7, [sp, #12]
 800dc8c:	4b98      	ldr	r3, [pc, #608]	@ (800def0 <_dtoa_r+0x2d0>)
 800dc8e:	bfbc      	itt	lt
 800dc90:	2201      	movlt	r2, #1
 800dc92:	6032      	strlt	r2, [r6, #0]
 800dc94:	43bb      	bics	r3, r7
 800dc96:	d112      	bne.n	800dcbe <_dtoa_r+0x9e>
 800dc98:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800dc9a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800dc9e:	6013      	str	r3, [r2, #0]
 800dca0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800dca4:	4323      	orrs	r3, r4
 800dca6:	f000 854d 	beq.w	800e744 <_dtoa_r+0xb24>
 800dcaa:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800dcac:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800df04 <_dtoa_r+0x2e4>
 800dcb0:	2b00      	cmp	r3, #0
 800dcb2:	f000 854f 	beq.w	800e754 <_dtoa_r+0xb34>
 800dcb6:	f10a 0303 	add.w	r3, sl, #3
 800dcba:	f000 bd49 	b.w	800e750 <_dtoa_r+0xb30>
 800dcbe:	ed9d 7b02 	vldr	d7, [sp, #8]
 800dcc2:	2200      	movs	r2, #0
 800dcc4:	ec51 0b17 	vmov	r0, r1, d7
 800dcc8:	2300      	movs	r3, #0
 800dcca:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800dcce:	f7f2 fefb 	bl	8000ac8 <__aeabi_dcmpeq>
 800dcd2:	4680      	mov	r8, r0
 800dcd4:	b158      	cbz	r0, 800dcee <_dtoa_r+0xce>
 800dcd6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800dcd8:	2301      	movs	r3, #1
 800dcda:	6013      	str	r3, [r2, #0]
 800dcdc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800dcde:	b113      	cbz	r3, 800dce6 <_dtoa_r+0xc6>
 800dce0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800dce2:	4b84      	ldr	r3, [pc, #528]	@ (800def4 <_dtoa_r+0x2d4>)
 800dce4:	6013      	str	r3, [r2, #0]
 800dce6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800df08 <_dtoa_r+0x2e8>
 800dcea:	f000 bd33 	b.w	800e754 <_dtoa_r+0xb34>
 800dcee:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800dcf2:	aa16      	add	r2, sp, #88	@ 0x58
 800dcf4:	a917      	add	r1, sp, #92	@ 0x5c
 800dcf6:	4658      	mov	r0, fp
 800dcf8:	f001 f980 	bl	800effc <__d2b>
 800dcfc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800dd00:	4681      	mov	r9, r0
 800dd02:	2e00      	cmp	r6, #0
 800dd04:	d077      	beq.n	800ddf6 <_dtoa_r+0x1d6>
 800dd06:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800dd08:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800dd0c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800dd10:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800dd14:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800dd18:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800dd1c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800dd20:	4619      	mov	r1, r3
 800dd22:	2200      	movs	r2, #0
 800dd24:	4b74      	ldr	r3, [pc, #464]	@ (800def8 <_dtoa_r+0x2d8>)
 800dd26:	f7f2 faaf 	bl	8000288 <__aeabi_dsub>
 800dd2a:	a369      	add	r3, pc, #420	@ (adr r3, 800ded0 <_dtoa_r+0x2b0>)
 800dd2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd30:	f7f2 fc62 	bl	80005f8 <__aeabi_dmul>
 800dd34:	a368      	add	r3, pc, #416	@ (adr r3, 800ded8 <_dtoa_r+0x2b8>)
 800dd36:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd3a:	f7f2 faa7 	bl	800028c <__adddf3>
 800dd3e:	4604      	mov	r4, r0
 800dd40:	4630      	mov	r0, r6
 800dd42:	460d      	mov	r5, r1
 800dd44:	f7f2 fbee 	bl	8000524 <__aeabi_i2d>
 800dd48:	a365      	add	r3, pc, #404	@ (adr r3, 800dee0 <_dtoa_r+0x2c0>)
 800dd4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd4e:	f7f2 fc53 	bl	80005f8 <__aeabi_dmul>
 800dd52:	4602      	mov	r2, r0
 800dd54:	460b      	mov	r3, r1
 800dd56:	4620      	mov	r0, r4
 800dd58:	4629      	mov	r1, r5
 800dd5a:	f7f2 fa97 	bl	800028c <__adddf3>
 800dd5e:	4604      	mov	r4, r0
 800dd60:	460d      	mov	r5, r1
 800dd62:	f7f2 fef9 	bl	8000b58 <__aeabi_d2iz>
 800dd66:	2200      	movs	r2, #0
 800dd68:	4607      	mov	r7, r0
 800dd6a:	2300      	movs	r3, #0
 800dd6c:	4620      	mov	r0, r4
 800dd6e:	4629      	mov	r1, r5
 800dd70:	f7f2 feb4 	bl	8000adc <__aeabi_dcmplt>
 800dd74:	b140      	cbz	r0, 800dd88 <_dtoa_r+0x168>
 800dd76:	4638      	mov	r0, r7
 800dd78:	f7f2 fbd4 	bl	8000524 <__aeabi_i2d>
 800dd7c:	4622      	mov	r2, r4
 800dd7e:	462b      	mov	r3, r5
 800dd80:	f7f2 fea2 	bl	8000ac8 <__aeabi_dcmpeq>
 800dd84:	b900      	cbnz	r0, 800dd88 <_dtoa_r+0x168>
 800dd86:	3f01      	subs	r7, #1
 800dd88:	2f16      	cmp	r7, #22
 800dd8a:	d851      	bhi.n	800de30 <_dtoa_r+0x210>
 800dd8c:	4b5b      	ldr	r3, [pc, #364]	@ (800defc <_dtoa_r+0x2dc>)
 800dd8e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800dd92:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd96:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800dd9a:	f7f2 fe9f 	bl	8000adc <__aeabi_dcmplt>
 800dd9e:	2800      	cmp	r0, #0
 800dda0:	d048      	beq.n	800de34 <_dtoa_r+0x214>
 800dda2:	3f01      	subs	r7, #1
 800dda4:	2300      	movs	r3, #0
 800dda6:	9312      	str	r3, [sp, #72]	@ 0x48
 800dda8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800ddaa:	1b9b      	subs	r3, r3, r6
 800ddac:	1e5a      	subs	r2, r3, #1
 800ddae:	bf44      	itt	mi
 800ddb0:	f1c3 0801 	rsbmi	r8, r3, #1
 800ddb4:	2300      	movmi	r3, #0
 800ddb6:	9208      	str	r2, [sp, #32]
 800ddb8:	bf54      	ite	pl
 800ddba:	f04f 0800 	movpl.w	r8, #0
 800ddbe:	9308      	strmi	r3, [sp, #32]
 800ddc0:	2f00      	cmp	r7, #0
 800ddc2:	db39      	blt.n	800de38 <_dtoa_r+0x218>
 800ddc4:	9b08      	ldr	r3, [sp, #32]
 800ddc6:	970f      	str	r7, [sp, #60]	@ 0x3c
 800ddc8:	443b      	add	r3, r7
 800ddca:	9308      	str	r3, [sp, #32]
 800ddcc:	2300      	movs	r3, #0
 800ddce:	930a      	str	r3, [sp, #40]	@ 0x28
 800ddd0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800ddd2:	2b09      	cmp	r3, #9
 800ddd4:	d864      	bhi.n	800dea0 <_dtoa_r+0x280>
 800ddd6:	2b05      	cmp	r3, #5
 800ddd8:	bfc4      	itt	gt
 800ddda:	3b04      	subgt	r3, #4
 800dddc:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800ddde:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800dde0:	f1a3 0302 	sub.w	r3, r3, #2
 800dde4:	bfcc      	ite	gt
 800dde6:	2400      	movgt	r4, #0
 800dde8:	2401      	movle	r4, #1
 800ddea:	2b03      	cmp	r3, #3
 800ddec:	d863      	bhi.n	800deb6 <_dtoa_r+0x296>
 800ddee:	e8df f003 	tbb	[pc, r3]
 800ddf2:	372a      	.short	0x372a
 800ddf4:	5535      	.short	0x5535
 800ddf6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800ddfa:	441e      	add	r6, r3
 800ddfc:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800de00:	2b20      	cmp	r3, #32
 800de02:	bfc1      	itttt	gt
 800de04:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800de08:	409f      	lslgt	r7, r3
 800de0a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800de0e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800de12:	bfd6      	itet	le
 800de14:	f1c3 0320 	rsble	r3, r3, #32
 800de18:	ea47 0003 	orrgt.w	r0, r7, r3
 800de1c:	fa04 f003 	lslle.w	r0, r4, r3
 800de20:	f7f2 fb70 	bl	8000504 <__aeabi_ui2d>
 800de24:	2201      	movs	r2, #1
 800de26:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800de2a:	3e01      	subs	r6, #1
 800de2c:	9214      	str	r2, [sp, #80]	@ 0x50
 800de2e:	e777      	b.n	800dd20 <_dtoa_r+0x100>
 800de30:	2301      	movs	r3, #1
 800de32:	e7b8      	b.n	800dda6 <_dtoa_r+0x186>
 800de34:	9012      	str	r0, [sp, #72]	@ 0x48
 800de36:	e7b7      	b.n	800dda8 <_dtoa_r+0x188>
 800de38:	427b      	negs	r3, r7
 800de3a:	930a      	str	r3, [sp, #40]	@ 0x28
 800de3c:	2300      	movs	r3, #0
 800de3e:	eba8 0807 	sub.w	r8, r8, r7
 800de42:	930f      	str	r3, [sp, #60]	@ 0x3c
 800de44:	e7c4      	b.n	800ddd0 <_dtoa_r+0x1b0>
 800de46:	2300      	movs	r3, #0
 800de48:	930b      	str	r3, [sp, #44]	@ 0x2c
 800de4a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800de4c:	2b00      	cmp	r3, #0
 800de4e:	dc35      	bgt.n	800debc <_dtoa_r+0x29c>
 800de50:	2301      	movs	r3, #1
 800de52:	9300      	str	r3, [sp, #0]
 800de54:	9307      	str	r3, [sp, #28]
 800de56:	461a      	mov	r2, r3
 800de58:	920e      	str	r2, [sp, #56]	@ 0x38
 800de5a:	e00b      	b.n	800de74 <_dtoa_r+0x254>
 800de5c:	2301      	movs	r3, #1
 800de5e:	e7f3      	b.n	800de48 <_dtoa_r+0x228>
 800de60:	2300      	movs	r3, #0
 800de62:	930b      	str	r3, [sp, #44]	@ 0x2c
 800de64:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800de66:	18fb      	adds	r3, r7, r3
 800de68:	9300      	str	r3, [sp, #0]
 800de6a:	3301      	adds	r3, #1
 800de6c:	2b01      	cmp	r3, #1
 800de6e:	9307      	str	r3, [sp, #28]
 800de70:	bfb8      	it	lt
 800de72:	2301      	movlt	r3, #1
 800de74:	f8db 001c 	ldr.w	r0, [fp, #28]
 800de78:	2100      	movs	r1, #0
 800de7a:	2204      	movs	r2, #4
 800de7c:	f102 0514 	add.w	r5, r2, #20
 800de80:	429d      	cmp	r5, r3
 800de82:	d91f      	bls.n	800dec4 <_dtoa_r+0x2a4>
 800de84:	6041      	str	r1, [r0, #4]
 800de86:	4658      	mov	r0, fp
 800de88:	f000 fd8e 	bl	800e9a8 <_Balloc>
 800de8c:	4682      	mov	sl, r0
 800de8e:	2800      	cmp	r0, #0
 800de90:	d13c      	bne.n	800df0c <_dtoa_r+0x2ec>
 800de92:	4b1b      	ldr	r3, [pc, #108]	@ (800df00 <_dtoa_r+0x2e0>)
 800de94:	4602      	mov	r2, r0
 800de96:	f240 11af 	movw	r1, #431	@ 0x1af
 800de9a:	e6d8      	b.n	800dc4e <_dtoa_r+0x2e>
 800de9c:	2301      	movs	r3, #1
 800de9e:	e7e0      	b.n	800de62 <_dtoa_r+0x242>
 800dea0:	2401      	movs	r4, #1
 800dea2:	2300      	movs	r3, #0
 800dea4:	9309      	str	r3, [sp, #36]	@ 0x24
 800dea6:	940b      	str	r4, [sp, #44]	@ 0x2c
 800dea8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800deac:	9300      	str	r3, [sp, #0]
 800deae:	9307      	str	r3, [sp, #28]
 800deb0:	2200      	movs	r2, #0
 800deb2:	2312      	movs	r3, #18
 800deb4:	e7d0      	b.n	800de58 <_dtoa_r+0x238>
 800deb6:	2301      	movs	r3, #1
 800deb8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800deba:	e7f5      	b.n	800dea8 <_dtoa_r+0x288>
 800debc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800debe:	9300      	str	r3, [sp, #0]
 800dec0:	9307      	str	r3, [sp, #28]
 800dec2:	e7d7      	b.n	800de74 <_dtoa_r+0x254>
 800dec4:	3101      	adds	r1, #1
 800dec6:	0052      	lsls	r2, r2, #1
 800dec8:	e7d8      	b.n	800de7c <_dtoa_r+0x25c>
 800deca:	bf00      	nop
 800decc:	f3af 8000 	nop.w
 800ded0:	636f4361 	.word	0x636f4361
 800ded4:	3fd287a7 	.word	0x3fd287a7
 800ded8:	8b60c8b3 	.word	0x8b60c8b3
 800dedc:	3fc68a28 	.word	0x3fc68a28
 800dee0:	509f79fb 	.word	0x509f79fb
 800dee4:	3fd34413 	.word	0x3fd34413
 800dee8:	08010c49 	.word	0x08010c49
 800deec:	08010c60 	.word	0x08010c60
 800def0:	7ff00000 	.word	0x7ff00000
 800def4:	08010c19 	.word	0x08010c19
 800def8:	3ff80000 	.word	0x3ff80000
 800defc:	08010d58 	.word	0x08010d58
 800df00:	08010cb8 	.word	0x08010cb8
 800df04:	08010c45 	.word	0x08010c45
 800df08:	08010c18 	.word	0x08010c18
 800df0c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800df10:	6018      	str	r0, [r3, #0]
 800df12:	9b07      	ldr	r3, [sp, #28]
 800df14:	2b0e      	cmp	r3, #14
 800df16:	f200 80a4 	bhi.w	800e062 <_dtoa_r+0x442>
 800df1a:	2c00      	cmp	r4, #0
 800df1c:	f000 80a1 	beq.w	800e062 <_dtoa_r+0x442>
 800df20:	2f00      	cmp	r7, #0
 800df22:	dd33      	ble.n	800df8c <_dtoa_r+0x36c>
 800df24:	4bad      	ldr	r3, [pc, #692]	@ (800e1dc <_dtoa_r+0x5bc>)
 800df26:	f007 020f 	and.w	r2, r7, #15
 800df2a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800df2e:	ed93 7b00 	vldr	d7, [r3]
 800df32:	05f8      	lsls	r0, r7, #23
 800df34:	ed8d 7b04 	vstr	d7, [sp, #16]
 800df38:	ea4f 1427 	mov.w	r4, r7, asr #4
 800df3c:	d516      	bpl.n	800df6c <_dtoa_r+0x34c>
 800df3e:	4ba8      	ldr	r3, [pc, #672]	@ (800e1e0 <_dtoa_r+0x5c0>)
 800df40:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800df44:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800df48:	f7f2 fc80 	bl	800084c <__aeabi_ddiv>
 800df4c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800df50:	f004 040f 	and.w	r4, r4, #15
 800df54:	2603      	movs	r6, #3
 800df56:	4da2      	ldr	r5, [pc, #648]	@ (800e1e0 <_dtoa_r+0x5c0>)
 800df58:	b954      	cbnz	r4, 800df70 <_dtoa_r+0x350>
 800df5a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800df5e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800df62:	f7f2 fc73 	bl	800084c <__aeabi_ddiv>
 800df66:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800df6a:	e028      	b.n	800dfbe <_dtoa_r+0x39e>
 800df6c:	2602      	movs	r6, #2
 800df6e:	e7f2      	b.n	800df56 <_dtoa_r+0x336>
 800df70:	07e1      	lsls	r1, r4, #31
 800df72:	d508      	bpl.n	800df86 <_dtoa_r+0x366>
 800df74:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800df78:	e9d5 2300 	ldrd	r2, r3, [r5]
 800df7c:	f7f2 fb3c 	bl	80005f8 <__aeabi_dmul>
 800df80:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800df84:	3601      	adds	r6, #1
 800df86:	1064      	asrs	r4, r4, #1
 800df88:	3508      	adds	r5, #8
 800df8a:	e7e5      	b.n	800df58 <_dtoa_r+0x338>
 800df8c:	f000 80d2 	beq.w	800e134 <_dtoa_r+0x514>
 800df90:	427c      	negs	r4, r7
 800df92:	4b92      	ldr	r3, [pc, #584]	@ (800e1dc <_dtoa_r+0x5bc>)
 800df94:	4d92      	ldr	r5, [pc, #584]	@ (800e1e0 <_dtoa_r+0x5c0>)
 800df96:	f004 020f 	and.w	r2, r4, #15
 800df9a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800df9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dfa2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800dfa6:	f7f2 fb27 	bl	80005f8 <__aeabi_dmul>
 800dfaa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dfae:	1124      	asrs	r4, r4, #4
 800dfb0:	2300      	movs	r3, #0
 800dfb2:	2602      	movs	r6, #2
 800dfb4:	2c00      	cmp	r4, #0
 800dfb6:	f040 80b2 	bne.w	800e11e <_dtoa_r+0x4fe>
 800dfba:	2b00      	cmp	r3, #0
 800dfbc:	d1d3      	bne.n	800df66 <_dtoa_r+0x346>
 800dfbe:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800dfc0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800dfc4:	2b00      	cmp	r3, #0
 800dfc6:	f000 80b7 	beq.w	800e138 <_dtoa_r+0x518>
 800dfca:	4b86      	ldr	r3, [pc, #536]	@ (800e1e4 <_dtoa_r+0x5c4>)
 800dfcc:	2200      	movs	r2, #0
 800dfce:	4620      	mov	r0, r4
 800dfd0:	4629      	mov	r1, r5
 800dfd2:	f7f2 fd83 	bl	8000adc <__aeabi_dcmplt>
 800dfd6:	2800      	cmp	r0, #0
 800dfd8:	f000 80ae 	beq.w	800e138 <_dtoa_r+0x518>
 800dfdc:	9b07      	ldr	r3, [sp, #28]
 800dfde:	2b00      	cmp	r3, #0
 800dfe0:	f000 80aa 	beq.w	800e138 <_dtoa_r+0x518>
 800dfe4:	9b00      	ldr	r3, [sp, #0]
 800dfe6:	2b00      	cmp	r3, #0
 800dfe8:	dd37      	ble.n	800e05a <_dtoa_r+0x43a>
 800dfea:	1e7b      	subs	r3, r7, #1
 800dfec:	9304      	str	r3, [sp, #16]
 800dfee:	4620      	mov	r0, r4
 800dff0:	4b7d      	ldr	r3, [pc, #500]	@ (800e1e8 <_dtoa_r+0x5c8>)
 800dff2:	2200      	movs	r2, #0
 800dff4:	4629      	mov	r1, r5
 800dff6:	f7f2 faff 	bl	80005f8 <__aeabi_dmul>
 800dffa:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800dffe:	9c00      	ldr	r4, [sp, #0]
 800e000:	3601      	adds	r6, #1
 800e002:	4630      	mov	r0, r6
 800e004:	f7f2 fa8e 	bl	8000524 <__aeabi_i2d>
 800e008:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e00c:	f7f2 faf4 	bl	80005f8 <__aeabi_dmul>
 800e010:	4b76      	ldr	r3, [pc, #472]	@ (800e1ec <_dtoa_r+0x5cc>)
 800e012:	2200      	movs	r2, #0
 800e014:	f7f2 f93a 	bl	800028c <__adddf3>
 800e018:	4605      	mov	r5, r0
 800e01a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800e01e:	2c00      	cmp	r4, #0
 800e020:	f040 808d 	bne.w	800e13e <_dtoa_r+0x51e>
 800e024:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e028:	4b71      	ldr	r3, [pc, #452]	@ (800e1f0 <_dtoa_r+0x5d0>)
 800e02a:	2200      	movs	r2, #0
 800e02c:	f7f2 f92c 	bl	8000288 <__aeabi_dsub>
 800e030:	4602      	mov	r2, r0
 800e032:	460b      	mov	r3, r1
 800e034:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e038:	462a      	mov	r2, r5
 800e03a:	4633      	mov	r3, r6
 800e03c:	f7f2 fd6c 	bl	8000b18 <__aeabi_dcmpgt>
 800e040:	2800      	cmp	r0, #0
 800e042:	f040 828b 	bne.w	800e55c <_dtoa_r+0x93c>
 800e046:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e04a:	462a      	mov	r2, r5
 800e04c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800e050:	f7f2 fd44 	bl	8000adc <__aeabi_dcmplt>
 800e054:	2800      	cmp	r0, #0
 800e056:	f040 8128 	bne.w	800e2aa <_dtoa_r+0x68a>
 800e05a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800e05e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800e062:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800e064:	2b00      	cmp	r3, #0
 800e066:	f2c0 815a 	blt.w	800e31e <_dtoa_r+0x6fe>
 800e06a:	2f0e      	cmp	r7, #14
 800e06c:	f300 8157 	bgt.w	800e31e <_dtoa_r+0x6fe>
 800e070:	4b5a      	ldr	r3, [pc, #360]	@ (800e1dc <_dtoa_r+0x5bc>)
 800e072:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e076:	ed93 7b00 	vldr	d7, [r3]
 800e07a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e07c:	2b00      	cmp	r3, #0
 800e07e:	ed8d 7b00 	vstr	d7, [sp]
 800e082:	da03      	bge.n	800e08c <_dtoa_r+0x46c>
 800e084:	9b07      	ldr	r3, [sp, #28]
 800e086:	2b00      	cmp	r3, #0
 800e088:	f340 8101 	ble.w	800e28e <_dtoa_r+0x66e>
 800e08c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800e090:	4656      	mov	r6, sl
 800e092:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e096:	4620      	mov	r0, r4
 800e098:	4629      	mov	r1, r5
 800e09a:	f7f2 fbd7 	bl	800084c <__aeabi_ddiv>
 800e09e:	f7f2 fd5b 	bl	8000b58 <__aeabi_d2iz>
 800e0a2:	4680      	mov	r8, r0
 800e0a4:	f7f2 fa3e 	bl	8000524 <__aeabi_i2d>
 800e0a8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e0ac:	f7f2 faa4 	bl	80005f8 <__aeabi_dmul>
 800e0b0:	4602      	mov	r2, r0
 800e0b2:	460b      	mov	r3, r1
 800e0b4:	4620      	mov	r0, r4
 800e0b6:	4629      	mov	r1, r5
 800e0b8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800e0bc:	f7f2 f8e4 	bl	8000288 <__aeabi_dsub>
 800e0c0:	f806 4b01 	strb.w	r4, [r6], #1
 800e0c4:	9d07      	ldr	r5, [sp, #28]
 800e0c6:	eba6 040a 	sub.w	r4, r6, sl
 800e0ca:	42a5      	cmp	r5, r4
 800e0cc:	4602      	mov	r2, r0
 800e0ce:	460b      	mov	r3, r1
 800e0d0:	f040 8117 	bne.w	800e302 <_dtoa_r+0x6e2>
 800e0d4:	f7f2 f8da 	bl	800028c <__adddf3>
 800e0d8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e0dc:	4604      	mov	r4, r0
 800e0de:	460d      	mov	r5, r1
 800e0e0:	f7f2 fd1a 	bl	8000b18 <__aeabi_dcmpgt>
 800e0e4:	2800      	cmp	r0, #0
 800e0e6:	f040 80f9 	bne.w	800e2dc <_dtoa_r+0x6bc>
 800e0ea:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e0ee:	4620      	mov	r0, r4
 800e0f0:	4629      	mov	r1, r5
 800e0f2:	f7f2 fce9 	bl	8000ac8 <__aeabi_dcmpeq>
 800e0f6:	b118      	cbz	r0, 800e100 <_dtoa_r+0x4e0>
 800e0f8:	f018 0f01 	tst.w	r8, #1
 800e0fc:	f040 80ee 	bne.w	800e2dc <_dtoa_r+0x6bc>
 800e100:	4649      	mov	r1, r9
 800e102:	4658      	mov	r0, fp
 800e104:	f000 fc90 	bl	800ea28 <_Bfree>
 800e108:	2300      	movs	r3, #0
 800e10a:	7033      	strb	r3, [r6, #0]
 800e10c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800e10e:	3701      	adds	r7, #1
 800e110:	601f      	str	r7, [r3, #0]
 800e112:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e114:	2b00      	cmp	r3, #0
 800e116:	f000 831d 	beq.w	800e754 <_dtoa_r+0xb34>
 800e11a:	601e      	str	r6, [r3, #0]
 800e11c:	e31a      	b.n	800e754 <_dtoa_r+0xb34>
 800e11e:	07e2      	lsls	r2, r4, #31
 800e120:	d505      	bpl.n	800e12e <_dtoa_r+0x50e>
 800e122:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e126:	f7f2 fa67 	bl	80005f8 <__aeabi_dmul>
 800e12a:	3601      	adds	r6, #1
 800e12c:	2301      	movs	r3, #1
 800e12e:	1064      	asrs	r4, r4, #1
 800e130:	3508      	adds	r5, #8
 800e132:	e73f      	b.n	800dfb4 <_dtoa_r+0x394>
 800e134:	2602      	movs	r6, #2
 800e136:	e742      	b.n	800dfbe <_dtoa_r+0x39e>
 800e138:	9c07      	ldr	r4, [sp, #28]
 800e13a:	9704      	str	r7, [sp, #16]
 800e13c:	e761      	b.n	800e002 <_dtoa_r+0x3e2>
 800e13e:	4b27      	ldr	r3, [pc, #156]	@ (800e1dc <_dtoa_r+0x5bc>)
 800e140:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e142:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e146:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800e14a:	4454      	add	r4, sl
 800e14c:	2900      	cmp	r1, #0
 800e14e:	d053      	beq.n	800e1f8 <_dtoa_r+0x5d8>
 800e150:	4928      	ldr	r1, [pc, #160]	@ (800e1f4 <_dtoa_r+0x5d4>)
 800e152:	2000      	movs	r0, #0
 800e154:	f7f2 fb7a 	bl	800084c <__aeabi_ddiv>
 800e158:	4633      	mov	r3, r6
 800e15a:	462a      	mov	r2, r5
 800e15c:	f7f2 f894 	bl	8000288 <__aeabi_dsub>
 800e160:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800e164:	4656      	mov	r6, sl
 800e166:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e16a:	f7f2 fcf5 	bl	8000b58 <__aeabi_d2iz>
 800e16e:	4605      	mov	r5, r0
 800e170:	f7f2 f9d8 	bl	8000524 <__aeabi_i2d>
 800e174:	4602      	mov	r2, r0
 800e176:	460b      	mov	r3, r1
 800e178:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e17c:	f7f2 f884 	bl	8000288 <__aeabi_dsub>
 800e180:	3530      	adds	r5, #48	@ 0x30
 800e182:	4602      	mov	r2, r0
 800e184:	460b      	mov	r3, r1
 800e186:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e18a:	f806 5b01 	strb.w	r5, [r6], #1
 800e18e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800e192:	f7f2 fca3 	bl	8000adc <__aeabi_dcmplt>
 800e196:	2800      	cmp	r0, #0
 800e198:	d171      	bne.n	800e27e <_dtoa_r+0x65e>
 800e19a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e19e:	4911      	ldr	r1, [pc, #68]	@ (800e1e4 <_dtoa_r+0x5c4>)
 800e1a0:	2000      	movs	r0, #0
 800e1a2:	f7f2 f871 	bl	8000288 <__aeabi_dsub>
 800e1a6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800e1aa:	f7f2 fc97 	bl	8000adc <__aeabi_dcmplt>
 800e1ae:	2800      	cmp	r0, #0
 800e1b0:	f040 8095 	bne.w	800e2de <_dtoa_r+0x6be>
 800e1b4:	42a6      	cmp	r6, r4
 800e1b6:	f43f af50 	beq.w	800e05a <_dtoa_r+0x43a>
 800e1ba:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800e1be:	4b0a      	ldr	r3, [pc, #40]	@ (800e1e8 <_dtoa_r+0x5c8>)
 800e1c0:	2200      	movs	r2, #0
 800e1c2:	f7f2 fa19 	bl	80005f8 <__aeabi_dmul>
 800e1c6:	4b08      	ldr	r3, [pc, #32]	@ (800e1e8 <_dtoa_r+0x5c8>)
 800e1c8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800e1cc:	2200      	movs	r2, #0
 800e1ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e1d2:	f7f2 fa11 	bl	80005f8 <__aeabi_dmul>
 800e1d6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e1da:	e7c4      	b.n	800e166 <_dtoa_r+0x546>
 800e1dc:	08010d58 	.word	0x08010d58
 800e1e0:	08010d30 	.word	0x08010d30
 800e1e4:	3ff00000 	.word	0x3ff00000
 800e1e8:	40240000 	.word	0x40240000
 800e1ec:	401c0000 	.word	0x401c0000
 800e1f0:	40140000 	.word	0x40140000
 800e1f4:	3fe00000 	.word	0x3fe00000
 800e1f8:	4631      	mov	r1, r6
 800e1fa:	4628      	mov	r0, r5
 800e1fc:	f7f2 f9fc 	bl	80005f8 <__aeabi_dmul>
 800e200:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800e204:	9415      	str	r4, [sp, #84]	@ 0x54
 800e206:	4656      	mov	r6, sl
 800e208:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e20c:	f7f2 fca4 	bl	8000b58 <__aeabi_d2iz>
 800e210:	4605      	mov	r5, r0
 800e212:	f7f2 f987 	bl	8000524 <__aeabi_i2d>
 800e216:	4602      	mov	r2, r0
 800e218:	460b      	mov	r3, r1
 800e21a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e21e:	f7f2 f833 	bl	8000288 <__aeabi_dsub>
 800e222:	3530      	adds	r5, #48	@ 0x30
 800e224:	f806 5b01 	strb.w	r5, [r6], #1
 800e228:	4602      	mov	r2, r0
 800e22a:	460b      	mov	r3, r1
 800e22c:	42a6      	cmp	r6, r4
 800e22e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e232:	f04f 0200 	mov.w	r2, #0
 800e236:	d124      	bne.n	800e282 <_dtoa_r+0x662>
 800e238:	4bac      	ldr	r3, [pc, #688]	@ (800e4ec <_dtoa_r+0x8cc>)
 800e23a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800e23e:	f7f2 f825 	bl	800028c <__adddf3>
 800e242:	4602      	mov	r2, r0
 800e244:	460b      	mov	r3, r1
 800e246:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e24a:	f7f2 fc65 	bl	8000b18 <__aeabi_dcmpgt>
 800e24e:	2800      	cmp	r0, #0
 800e250:	d145      	bne.n	800e2de <_dtoa_r+0x6be>
 800e252:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800e256:	49a5      	ldr	r1, [pc, #660]	@ (800e4ec <_dtoa_r+0x8cc>)
 800e258:	2000      	movs	r0, #0
 800e25a:	f7f2 f815 	bl	8000288 <__aeabi_dsub>
 800e25e:	4602      	mov	r2, r0
 800e260:	460b      	mov	r3, r1
 800e262:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e266:	f7f2 fc39 	bl	8000adc <__aeabi_dcmplt>
 800e26a:	2800      	cmp	r0, #0
 800e26c:	f43f aef5 	beq.w	800e05a <_dtoa_r+0x43a>
 800e270:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800e272:	1e73      	subs	r3, r6, #1
 800e274:	9315      	str	r3, [sp, #84]	@ 0x54
 800e276:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800e27a:	2b30      	cmp	r3, #48	@ 0x30
 800e27c:	d0f8      	beq.n	800e270 <_dtoa_r+0x650>
 800e27e:	9f04      	ldr	r7, [sp, #16]
 800e280:	e73e      	b.n	800e100 <_dtoa_r+0x4e0>
 800e282:	4b9b      	ldr	r3, [pc, #620]	@ (800e4f0 <_dtoa_r+0x8d0>)
 800e284:	f7f2 f9b8 	bl	80005f8 <__aeabi_dmul>
 800e288:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e28c:	e7bc      	b.n	800e208 <_dtoa_r+0x5e8>
 800e28e:	d10c      	bne.n	800e2aa <_dtoa_r+0x68a>
 800e290:	4b98      	ldr	r3, [pc, #608]	@ (800e4f4 <_dtoa_r+0x8d4>)
 800e292:	2200      	movs	r2, #0
 800e294:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e298:	f7f2 f9ae 	bl	80005f8 <__aeabi_dmul>
 800e29c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e2a0:	f7f2 fc30 	bl	8000b04 <__aeabi_dcmpge>
 800e2a4:	2800      	cmp	r0, #0
 800e2a6:	f000 8157 	beq.w	800e558 <_dtoa_r+0x938>
 800e2aa:	2400      	movs	r4, #0
 800e2ac:	4625      	mov	r5, r4
 800e2ae:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e2b0:	43db      	mvns	r3, r3
 800e2b2:	9304      	str	r3, [sp, #16]
 800e2b4:	4656      	mov	r6, sl
 800e2b6:	2700      	movs	r7, #0
 800e2b8:	4621      	mov	r1, r4
 800e2ba:	4658      	mov	r0, fp
 800e2bc:	f000 fbb4 	bl	800ea28 <_Bfree>
 800e2c0:	2d00      	cmp	r5, #0
 800e2c2:	d0dc      	beq.n	800e27e <_dtoa_r+0x65e>
 800e2c4:	b12f      	cbz	r7, 800e2d2 <_dtoa_r+0x6b2>
 800e2c6:	42af      	cmp	r7, r5
 800e2c8:	d003      	beq.n	800e2d2 <_dtoa_r+0x6b2>
 800e2ca:	4639      	mov	r1, r7
 800e2cc:	4658      	mov	r0, fp
 800e2ce:	f000 fbab 	bl	800ea28 <_Bfree>
 800e2d2:	4629      	mov	r1, r5
 800e2d4:	4658      	mov	r0, fp
 800e2d6:	f000 fba7 	bl	800ea28 <_Bfree>
 800e2da:	e7d0      	b.n	800e27e <_dtoa_r+0x65e>
 800e2dc:	9704      	str	r7, [sp, #16]
 800e2de:	4633      	mov	r3, r6
 800e2e0:	461e      	mov	r6, r3
 800e2e2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e2e6:	2a39      	cmp	r2, #57	@ 0x39
 800e2e8:	d107      	bne.n	800e2fa <_dtoa_r+0x6da>
 800e2ea:	459a      	cmp	sl, r3
 800e2ec:	d1f8      	bne.n	800e2e0 <_dtoa_r+0x6c0>
 800e2ee:	9a04      	ldr	r2, [sp, #16]
 800e2f0:	3201      	adds	r2, #1
 800e2f2:	9204      	str	r2, [sp, #16]
 800e2f4:	2230      	movs	r2, #48	@ 0x30
 800e2f6:	f88a 2000 	strb.w	r2, [sl]
 800e2fa:	781a      	ldrb	r2, [r3, #0]
 800e2fc:	3201      	adds	r2, #1
 800e2fe:	701a      	strb	r2, [r3, #0]
 800e300:	e7bd      	b.n	800e27e <_dtoa_r+0x65e>
 800e302:	4b7b      	ldr	r3, [pc, #492]	@ (800e4f0 <_dtoa_r+0x8d0>)
 800e304:	2200      	movs	r2, #0
 800e306:	f7f2 f977 	bl	80005f8 <__aeabi_dmul>
 800e30a:	2200      	movs	r2, #0
 800e30c:	2300      	movs	r3, #0
 800e30e:	4604      	mov	r4, r0
 800e310:	460d      	mov	r5, r1
 800e312:	f7f2 fbd9 	bl	8000ac8 <__aeabi_dcmpeq>
 800e316:	2800      	cmp	r0, #0
 800e318:	f43f aebb 	beq.w	800e092 <_dtoa_r+0x472>
 800e31c:	e6f0      	b.n	800e100 <_dtoa_r+0x4e0>
 800e31e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800e320:	2a00      	cmp	r2, #0
 800e322:	f000 80db 	beq.w	800e4dc <_dtoa_r+0x8bc>
 800e326:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e328:	2a01      	cmp	r2, #1
 800e32a:	f300 80bf 	bgt.w	800e4ac <_dtoa_r+0x88c>
 800e32e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800e330:	2a00      	cmp	r2, #0
 800e332:	f000 80b7 	beq.w	800e4a4 <_dtoa_r+0x884>
 800e336:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800e33a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800e33c:	4646      	mov	r6, r8
 800e33e:	9a08      	ldr	r2, [sp, #32]
 800e340:	2101      	movs	r1, #1
 800e342:	441a      	add	r2, r3
 800e344:	4658      	mov	r0, fp
 800e346:	4498      	add	r8, r3
 800e348:	9208      	str	r2, [sp, #32]
 800e34a:	f000 fc21 	bl	800eb90 <__i2b>
 800e34e:	4605      	mov	r5, r0
 800e350:	b15e      	cbz	r6, 800e36a <_dtoa_r+0x74a>
 800e352:	9b08      	ldr	r3, [sp, #32]
 800e354:	2b00      	cmp	r3, #0
 800e356:	dd08      	ble.n	800e36a <_dtoa_r+0x74a>
 800e358:	42b3      	cmp	r3, r6
 800e35a:	9a08      	ldr	r2, [sp, #32]
 800e35c:	bfa8      	it	ge
 800e35e:	4633      	movge	r3, r6
 800e360:	eba8 0803 	sub.w	r8, r8, r3
 800e364:	1af6      	subs	r6, r6, r3
 800e366:	1ad3      	subs	r3, r2, r3
 800e368:	9308      	str	r3, [sp, #32]
 800e36a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e36c:	b1f3      	cbz	r3, 800e3ac <_dtoa_r+0x78c>
 800e36e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e370:	2b00      	cmp	r3, #0
 800e372:	f000 80b7 	beq.w	800e4e4 <_dtoa_r+0x8c4>
 800e376:	b18c      	cbz	r4, 800e39c <_dtoa_r+0x77c>
 800e378:	4629      	mov	r1, r5
 800e37a:	4622      	mov	r2, r4
 800e37c:	4658      	mov	r0, fp
 800e37e:	f000 fcc7 	bl	800ed10 <__pow5mult>
 800e382:	464a      	mov	r2, r9
 800e384:	4601      	mov	r1, r0
 800e386:	4605      	mov	r5, r0
 800e388:	4658      	mov	r0, fp
 800e38a:	f000 fc17 	bl	800ebbc <__multiply>
 800e38e:	4649      	mov	r1, r9
 800e390:	9004      	str	r0, [sp, #16]
 800e392:	4658      	mov	r0, fp
 800e394:	f000 fb48 	bl	800ea28 <_Bfree>
 800e398:	9b04      	ldr	r3, [sp, #16]
 800e39a:	4699      	mov	r9, r3
 800e39c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e39e:	1b1a      	subs	r2, r3, r4
 800e3a0:	d004      	beq.n	800e3ac <_dtoa_r+0x78c>
 800e3a2:	4649      	mov	r1, r9
 800e3a4:	4658      	mov	r0, fp
 800e3a6:	f000 fcb3 	bl	800ed10 <__pow5mult>
 800e3aa:	4681      	mov	r9, r0
 800e3ac:	2101      	movs	r1, #1
 800e3ae:	4658      	mov	r0, fp
 800e3b0:	f000 fbee 	bl	800eb90 <__i2b>
 800e3b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e3b6:	4604      	mov	r4, r0
 800e3b8:	2b00      	cmp	r3, #0
 800e3ba:	f000 81cf 	beq.w	800e75c <_dtoa_r+0xb3c>
 800e3be:	461a      	mov	r2, r3
 800e3c0:	4601      	mov	r1, r0
 800e3c2:	4658      	mov	r0, fp
 800e3c4:	f000 fca4 	bl	800ed10 <__pow5mult>
 800e3c8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e3ca:	2b01      	cmp	r3, #1
 800e3cc:	4604      	mov	r4, r0
 800e3ce:	f300 8095 	bgt.w	800e4fc <_dtoa_r+0x8dc>
 800e3d2:	9b02      	ldr	r3, [sp, #8]
 800e3d4:	2b00      	cmp	r3, #0
 800e3d6:	f040 8087 	bne.w	800e4e8 <_dtoa_r+0x8c8>
 800e3da:	9b03      	ldr	r3, [sp, #12]
 800e3dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e3e0:	2b00      	cmp	r3, #0
 800e3e2:	f040 8089 	bne.w	800e4f8 <_dtoa_r+0x8d8>
 800e3e6:	9b03      	ldr	r3, [sp, #12]
 800e3e8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800e3ec:	0d1b      	lsrs	r3, r3, #20
 800e3ee:	051b      	lsls	r3, r3, #20
 800e3f0:	b12b      	cbz	r3, 800e3fe <_dtoa_r+0x7de>
 800e3f2:	9b08      	ldr	r3, [sp, #32]
 800e3f4:	3301      	adds	r3, #1
 800e3f6:	9308      	str	r3, [sp, #32]
 800e3f8:	f108 0801 	add.w	r8, r8, #1
 800e3fc:	2301      	movs	r3, #1
 800e3fe:	930a      	str	r3, [sp, #40]	@ 0x28
 800e400:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e402:	2b00      	cmp	r3, #0
 800e404:	f000 81b0 	beq.w	800e768 <_dtoa_r+0xb48>
 800e408:	6923      	ldr	r3, [r4, #16]
 800e40a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e40e:	6918      	ldr	r0, [r3, #16]
 800e410:	f000 fb72 	bl	800eaf8 <__hi0bits>
 800e414:	f1c0 0020 	rsb	r0, r0, #32
 800e418:	9b08      	ldr	r3, [sp, #32]
 800e41a:	4418      	add	r0, r3
 800e41c:	f010 001f 	ands.w	r0, r0, #31
 800e420:	d077      	beq.n	800e512 <_dtoa_r+0x8f2>
 800e422:	f1c0 0320 	rsb	r3, r0, #32
 800e426:	2b04      	cmp	r3, #4
 800e428:	dd6b      	ble.n	800e502 <_dtoa_r+0x8e2>
 800e42a:	9b08      	ldr	r3, [sp, #32]
 800e42c:	f1c0 001c 	rsb	r0, r0, #28
 800e430:	4403      	add	r3, r0
 800e432:	4480      	add	r8, r0
 800e434:	4406      	add	r6, r0
 800e436:	9308      	str	r3, [sp, #32]
 800e438:	f1b8 0f00 	cmp.w	r8, #0
 800e43c:	dd05      	ble.n	800e44a <_dtoa_r+0x82a>
 800e43e:	4649      	mov	r1, r9
 800e440:	4642      	mov	r2, r8
 800e442:	4658      	mov	r0, fp
 800e444:	f000 fcbe 	bl	800edc4 <__lshift>
 800e448:	4681      	mov	r9, r0
 800e44a:	9b08      	ldr	r3, [sp, #32]
 800e44c:	2b00      	cmp	r3, #0
 800e44e:	dd05      	ble.n	800e45c <_dtoa_r+0x83c>
 800e450:	4621      	mov	r1, r4
 800e452:	461a      	mov	r2, r3
 800e454:	4658      	mov	r0, fp
 800e456:	f000 fcb5 	bl	800edc4 <__lshift>
 800e45a:	4604      	mov	r4, r0
 800e45c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800e45e:	2b00      	cmp	r3, #0
 800e460:	d059      	beq.n	800e516 <_dtoa_r+0x8f6>
 800e462:	4621      	mov	r1, r4
 800e464:	4648      	mov	r0, r9
 800e466:	f000 fd19 	bl	800ee9c <__mcmp>
 800e46a:	2800      	cmp	r0, #0
 800e46c:	da53      	bge.n	800e516 <_dtoa_r+0x8f6>
 800e46e:	1e7b      	subs	r3, r7, #1
 800e470:	9304      	str	r3, [sp, #16]
 800e472:	4649      	mov	r1, r9
 800e474:	2300      	movs	r3, #0
 800e476:	220a      	movs	r2, #10
 800e478:	4658      	mov	r0, fp
 800e47a:	f000 faf7 	bl	800ea6c <__multadd>
 800e47e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e480:	4681      	mov	r9, r0
 800e482:	2b00      	cmp	r3, #0
 800e484:	f000 8172 	beq.w	800e76c <_dtoa_r+0xb4c>
 800e488:	2300      	movs	r3, #0
 800e48a:	4629      	mov	r1, r5
 800e48c:	220a      	movs	r2, #10
 800e48e:	4658      	mov	r0, fp
 800e490:	f000 faec 	bl	800ea6c <__multadd>
 800e494:	9b00      	ldr	r3, [sp, #0]
 800e496:	2b00      	cmp	r3, #0
 800e498:	4605      	mov	r5, r0
 800e49a:	dc67      	bgt.n	800e56c <_dtoa_r+0x94c>
 800e49c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e49e:	2b02      	cmp	r3, #2
 800e4a0:	dc41      	bgt.n	800e526 <_dtoa_r+0x906>
 800e4a2:	e063      	b.n	800e56c <_dtoa_r+0x94c>
 800e4a4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800e4a6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800e4aa:	e746      	b.n	800e33a <_dtoa_r+0x71a>
 800e4ac:	9b07      	ldr	r3, [sp, #28]
 800e4ae:	1e5c      	subs	r4, r3, #1
 800e4b0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e4b2:	42a3      	cmp	r3, r4
 800e4b4:	bfbf      	itttt	lt
 800e4b6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800e4b8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800e4ba:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800e4bc:	1ae3      	sublt	r3, r4, r3
 800e4be:	bfb4      	ite	lt
 800e4c0:	18d2      	addlt	r2, r2, r3
 800e4c2:	1b1c      	subge	r4, r3, r4
 800e4c4:	9b07      	ldr	r3, [sp, #28]
 800e4c6:	bfbc      	itt	lt
 800e4c8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800e4ca:	2400      	movlt	r4, #0
 800e4cc:	2b00      	cmp	r3, #0
 800e4ce:	bfb5      	itete	lt
 800e4d0:	eba8 0603 	sublt.w	r6, r8, r3
 800e4d4:	9b07      	ldrge	r3, [sp, #28]
 800e4d6:	2300      	movlt	r3, #0
 800e4d8:	4646      	movge	r6, r8
 800e4da:	e730      	b.n	800e33e <_dtoa_r+0x71e>
 800e4dc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800e4de:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800e4e0:	4646      	mov	r6, r8
 800e4e2:	e735      	b.n	800e350 <_dtoa_r+0x730>
 800e4e4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e4e6:	e75c      	b.n	800e3a2 <_dtoa_r+0x782>
 800e4e8:	2300      	movs	r3, #0
 800e4ea:	e788      	b.n	800e3fe <_dtoa_r+0x7de>
 800e4ec:	3fe00000 	.word	0x3fe00000
 800e4f0:	40240000 	.word	0x40240000
 800e4f4:	40140000 	.word	0x40140000
 800e4f8:	9b02      	ldr	r3, [sp, #8]
 800e4fa:	e780      	b.n	800e3fe <_dtoa_r+0x7de>
 800e4fc:	2300      	movs	r3, #0
 800e4fe:	930a      	str	r3, [sp, #40]	@ 0x28
 800e500:	e782      	b.n	800e408 <_dtoa_r+0x7e8>
 800e502:	d099      	beq.n	800e438 <_dtoa_r+0x818>
 800e504:	9a08      	ldr	r2, [sp, #32]
 800e506:	331c      	adds	r3, #28
 800e508:	441a      	add	r2, r3
 800e50a:	4498      	add	r8, r3
 800e50c:	441e      	add	r6, r3
 800e50e:	9208      	str	r2, [sp, #32]
 800e510:	e792      	b.n	800e438 <_dtoa_r+0x818>
 800e512:	4603      	mov	r3, r0
 800e514:	e7f6      	b.n	800e504 <_dtoa_r+0x8e4>
 800e516:	9b07      	ldr	r3, [sp, #28]
 800e518:	9704      	str	r7, [sp, #16]
 800e51a:	2b00      	cmp	r3, #0
 800e51c:	dc20      	bgt.n	800e560 <_dtoa_r+0x940>
 800e51e:	9300      	str	r3, [sp, #0]
 800e520:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e522:	2b02      	cmp	r3, #2
 800e524:	dd1e      	ble.n	800e564 <_dtoa_r+0x944>
 800e526:	9b00      	ldr	r3, [sp, #0]
 800e528:	2b00      	cmp	r3, #0
 800e52a:	f47f aec0 	bne.w	800e2ae <_dtoa_r+0x68e>
 800e52e:	4621      	mov	r1, r4
 800e530:	2205      	movs	r2, #5
 800e532:	4658      	mov	r0, fp
 800e534:	f000 fa9a 	bl	800ea6c <__multadd>
 800e538:	4601      	mov	r1, r0
 800e53a:	4604      	mov	r4, r0
 800e53c:	4648      	mov	r0, r9
 800e53e:	f000 fcad 	bl	800ee9c <__mcmp>
 800e542:	2800      	cmp	r0, #0
 800e544:	f77f aeb3 	ble.w	800e2ae <_dtoa_r+0x68e>
 800e548:	4656      	mov	r6, sl
 800e54a:	2331      	movs	r3, #49	@ 0x31
 800e54c:	f806 3b01 	strb.w	r3, [r6], #1
 800e550:	9b04      	ldr	r3, [sp, #16]
 800e552:	3301      	adds	r3, #1
 800e554:	9304      	str	r3, [sp, #16]
 800e556:	e6ae      	b.n	800e2b6 <_dtoa_r+0x696>
 800e558:	9c07      	ldr	r4, [sp, #28]
 800e55a:	9704      	str	r7, [sp, #16]
 800e55c:	4625      	mov	r5, r4
 800e55e:	e7f3      	b.n	800e548 <_dtoa_r+0x928>
 800e560:	9b07      	ldr	r3, [sp, #28]
 800e562:	9300      	str	r3, [sp, #0]
 800e564:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e566:	2b00      	cmp	r3, #0
 800e568:	f000 8104 	beq.w	800e774 <_dtoa_r+0xb54>
 800e56c:	2e00      	cmp	r6, #0
 800e56e:	dd05      	ble.n	800e57c <_dtoa_r+0x95c>
 800e570:	4629      	mov	r1, r5
 800e572:	4632      	mov	r2, r6
 800e574:	4658      	mov	r0, fp
 800e576:	f000 fc25 	bl	800edc4 <__lshift>
 800e57a:	4605      	mov	r5, r0
 800e57c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e57e:	2b00      	cmp	r3, #0
 800e580:	d05a      	beq.n	800e638 <_dtoa_r+0xa18>
 800e582:	6869      	ldr	r1, [r5, #4]
 800e584:	4658      	mov	r0, fp
 800e586:	f000 fa0f 	bl	800e9a8 <_Balloc>
 800e58a:	4606      	mov	r6, r0
 800e58c:	b928      	cbnz	r0, 800e59a <_dtoa_r+0x97a>
 800e58e:	4b84      	ldr	r3, [pc, #528]	@ (800e7a0 <_dtoa_r+0xb80>)
 800e590:	4602      	mov	r2, r0
 800e592:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800e596:	f7ff bb5a 	b.w	800dc4e <_dtoa_r+0x2e>
 800e59a:	692a      	ldr	r2, [r5, #16]
 800e59c:	3202      	adds	r2, #2
 800e59e:	0092      	lsls	r2, r2, #2
 800e5a0:	f105 010c 	add.w	r1, r5, #12
 800e5a4:	300c      	adds	r0, #12
 800e5a6:	f7ff faa2 	bl	800daee <memcpy>
 800e5aa:	2201      	movs	r2, #1
 800e5ac:	4631      	mov	r1, r6
 800e5ae:	4658      	mov	r0, fp
 800e5b0:	f000 fc08 	bl	800edc4 <__lshift>
 800e5b4:	f10a 0301 	add.w	r3, sl, #1
 800e5b8:	9307      	str	r3, [sp, #28]
 800e5ba:	9b00      	ldr	r3, [sp, #0]
 800e5bc:	4453      	add	r3, sl
 800e5be:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e5c0:	9b02      	ldr	r3, [sp, #8]
 800e5c2:	f003 0301 	and.w	r3, r3, #1
 800e5c6:	462f      	mov	r7, r5
 800e5c8:	930a      	str	r3, [sp, #40]	@ 0x28
 800e5ca:	4605      	mov	r5, r0
 800e5cc:	9b07      	ldr	r3, [sp, #28]
 800e5ce:	4621      	mov	r1, r4
 800e5d0:	3b01      	subs	r3, #1
 800e5d2:	4648      	mov	r0, r9
 800e5d4:	9300      	str	r3, [sp, #0]
 800e5d6:	f7ff fa98 	bl	800db0a <quorem>
 800e5da:	4639      	mov	r1, r7
 800e5dc:	9002      	str	r0, [sp, #8]
 800e5de:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800e5e2:	4648      	mov	r0, r9
 800e5e4:	f000 fc5a 	bl	800ee9c <__mcmp>
 800e5e8:	462a      	mov	r2, r5
 800e5ea:	9008      	str	r0, [sp, #32]
 800e5ec:	4621      	mov	r1, r4
 800e5ee:	4658      	mov	r0, fp
 800e5f0:	f000 fc70 	bl	800eed4 <__mdiff>
 800e5f4:	68c2      	ldr	r2, [r0, #12]
 800e5f6:	4606      	mov	r6, r0
 800e5f8:	bb02      	cbnz	r2, 800e63c <_dtoa_r+0xa1c>
 800e5fa:	4601      	mov	r1, r0
 800e5fc:	4648      	mov	r0, r9
 800e5fe:	f000 fc4d 	bl	800ee9c <__mcmp>
 800e602:	4602      	mov	r2, r0
 800e604:	4631      	mov	r1, r6
 800e606:	4658      	mov	r0, fp
 800e608:	920e      	str	r2, [sp, #56]	@ 0x38
 800e60a:	f000 fa0d 	bl	800ea28 <_Bfree>
 800e60e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e610:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e612:	9e07      	ldr	r6, [sp, #28]
 800e614:	ea43 0102 	orr.w	r1, r3, r2
 800e618:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e61a:	4319      	orrs	r1, r3
 800e61c:	d110      	bne.n	800e640 <_dtoa_r+0xa20>
 800e61e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800e622:	d029      	beq.n	800e678 <_dtoa_r+0xa58>
 800e624:	9b08      	ldr	r3, [sp, #32]
 800e626:	2b00      	cmp	r3, #0
 800e628:	dd02      	ble.n	800e630 <_dtoa_r+0xa10>
 800e62a:	9b02      	ldr	r3, [sp, #8]
 800e62c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800e630:	9b00      	ldr	r3, [sp, #0]
 800e632:	f883 8000 	strb.w	r8, [r3]
 800e636:	e63f      	b.n	800e2b8 <_dtoa_r+0x698>
 800e638:	4628      	mov	r0, r5
 800e63a:	e7bb      	b.n	800e5b4 <_dtoa_r+0x994>
 800e63c:	2201      	movs	r2, #1
 800e63e:	e7e1      	b.n	800e604 <_dtoa_r+0x9e4>
 800e640:	9b08      	ldr	r3, [sp, #32]
 800e642:	2b00      	cmp	r3, #0
 800e644:	db04      	blt.n	800e650 <_dtoa_r+0xa30>
 800e646:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e648:	430b      	orrs	r3, r1
 800e64a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800e64c:	430b      	orrs	r3, r1
 800e64e:	d120      	bne.n	800e692 <_dtoa_r+0xa72>
 800e650:	2a00      	cmp	r2, #0
 800e652:	dded      	ble.n	800e630 <_dtoa_r+0xa10>
 800e654:	4649      	mov	r1, r9
 800e656:	2201      	movs	r2, #1
 800e658:	4658      	mov	r0, fp
 800e65a:	f000 fbb3 	bl	800edc4 <__lshift>
 800e65e:	4621      	mov	r1, r4
 800e660:	4681      	mov	r9, r0
 800e662:	f000 fc1b 	bl	800ee9c <__mcmp>
 800e666:	2800      	cmp	r0, #0
 800e668:	dc03      	bgt.n	800e672 <_dtoa_r+0xa52>
 800e66a:	d1e1      	bne.n	800e630 <_dtoa_r+0xa10>
 800e66c:	f018 0f01 	tst.w	r8, #1
 800e670:	d0de      	beq.n	800e630 <_dtoa_r+0xa10>
 800e672:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800e676:	d1d8      	bne.n	800e62a <_dtoa_r+0xa0a>
 800e678:	9a00      	ldr	r2, [sp, #0]
 800e67a:	2339      	movs	r3, #57	@ 0x39
 800e67c:	7013      	strb	r3, [r2, #0]
 800e67e:	4633      	mov	r3, r6
 800e680:	461e      	mov	r6, r3
 800e682:	3b01      	subs	r3, #1
 800e684:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800e688:	2a39      	cmp	r2, #57	@ 0x39
 800e68a:	d052      	beq.n	800e732 <_dtoa_r+0xb12>
 800e68c:	3201      	adds	r2, #1
 800e68e:	701a      	strb	r2, [r3, #0]
 800e690:	e612      	b.n	800e2b8 <_dtoa_r+0x698>
 800e692:	2a00      	cmp	r2, #0
 800e694:	dd07      	ble.n	800e6a6 <_dtoa_r+0xa86>
 800e696:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800e69a:	d0ed      	beq.n	800e678 <_dtoa_r+0xa58>
 800e69c:	9a00      	ldr	r2, [sp, #0]
 800e69e:	f108 0301 	add.w	r3, r8, #1
 800e6a2:	7013      	strb	r3, [r2, #0]
 800e6a4:	e608      	b.n	800e2b8 <_dtoa_r+0x698>
 800e6a6:	9b07      	ldr	r3, [sp, #28]
 800e6a8:	9a07      	ldr	r2, [sp, #28]
 800e6aa:	f803 8c01 	strb.w	r8, [r3, #-1]
 800e6ae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e6b0:	4293      	cmp	r3, r2
 800e6b2:	d028      	beq.n	800e706 <_dtoa_r+0xae6>
 800e6b4:	4649      	mov	r1, r9
 800e6b6:	2300      	movs	r3, #0
 800e6b8:	220a      	movs	r2, #10
 800e6ba:	4658      	mov	r0, fp
 800e6bc:	f000 f9d6 	bl	800ea6c <__multadd>
 800e6c0:	42af      	cmp	r7, r5
 800e6c2:	4681      	mov	r9, r0
 800e6c4:	f04f 0300 	mov.w	r3, #0
 800e6c8:	f04f 020a 	mov.w	r2, #10
 800e6cc:	4639      	mov	r1, r7
 800e6ce:	4658      	mov	r0, fp
 800e6d0:	d107      	bne.n	800e6e2 <_dtoa_r+0xac2>
 800e6d2:	f000 f9cb 	bl	800ea6c <__multadd>
 800e6d6:	4607      	mov	r7, r0
 800e6d8:	4605      	mov	r5, r0
 800e6da:	9b07      	ldr	r3, [sp, #28]
 800e6dc:	3301      	adds	r3, #1
 800e6de:	9307      	str	r3, [sp, #28]
 800e6e0:	e774      	b.n	800e5cc <_dtoa_r+0x9ac>
 800e6e2:	f000 f9c3 	bl	800ea6c <__multadd>
 800e6e6:	4629      	mov	r1, r5
 800e6e8:	4607      	mov	r7, r0
 800e6ea:	2300      	movs	r3, #0
 800e6ec:	220a      	movs	r2, #10
 800e6ee:	4658      	mov	r0, fp
 800e6f0:	f000 f9bc 	bl	800ea6c <__multadd>
 800e6f4:	4605      	mov	r5, r0
 800e6f6:	e7f0      	b.n	800e6da <_dtoa_r+0xaba>
 800e6f8:	9b00      	ldr	r3, [sp, #0]
 800e6fa:	2b00      	cmp	r3, #0
 800e6fc:	bfcc      	ite	gt
 800e6fe:	461e      	movgt	r6, r3
 800e700:	2601      	movle	r6, #1
 800e702:	4456      	add	r6, sl
 800e704:	2700      	movs	r7, #0
 800e706:	4649      	mov	r1, r9
 800e708:	2201      	movs	r2, #1
 800e70a:	4658      	mov	r0, fp
 800e70c:	f000 fb5a 	bl	800edc4 <__lshift>
 800e710:	4621      	mov	r1, r4
 800e712:	4681      	mov	r9, r0
 800e714:	f000 fbc2 	bl	800ee9c <__mcmp>
 800e718:	2800      	cmp	r0, #0
 800e71a:	dcb0      	bgt.n	800e67e <_dtoa_r+0xa5e>
 800e71c:	d102      	bne.n	800e724 <_dtoa_r+0xb04>
 800e71e:	f018 0f01 	tst.w	r8, #1
 800e722:	d1ac      	bne.n	800e67e <_dtoa_r+0xa5e>
 800e724:	4633      	mov	r3, r6
 800e726:	461e      	mov	r6, r3
 800e728:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e72c:	2a30      	cmp	r2, #48	@ 0x30
 800e72e:	d0fa      	beq.n	800e726 <_dtoa_r+0xb06>
 800e730:	e5c2      	b.n	800e2b8 <_dtoa_r+0x698>
 800e732:	459a      	cmp	sl, r3
 800e734:	d1a4      	bne.n	800e680 <_dtoa_r+0xa60>
 800e736:	9b04      	ldr	r3, [sp, #16]
 800e738:	3301      	adds	r3, #1
 800e73a:	9304      	str	r3, [sp, #16]
 800e73c:	2331      	movs	r3, #49	@ 0x31
 800e73e:	f88a 3000 	strb.w	r3, [sl]
 800e742:	e5b9      	b.n	800e2b8 <_dtoa_r+0x698>
 800e744:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e746:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800e7a4 <_dtoa_r+0xb84>
 800e74a:	b11b      	cbz	r3, 800e754 <_dtoa_r+0xb34>
 800e74c:	f10a 0308 	add.w	r3, sl, #8
 800e750:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800e752:	6013      	str	r3, [r2, #0]
 800e754:	4650      	mov	r0, sl
 800e756:	b019      	add	sp, #100	@ 0x64
 800e758:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e75c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e75e:	2b01      	cmp	r3, #1
 800e760:	f77f ae37 	ble.w	800e3d2 <_dtoa_r+0x7b2>
 800e764:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e766:	930a      	str	r3, [sp, #40]	@ 0x28
 800e768:	2001      	movs	r0, #1
 800e76a:	e655      	b.n	800e418 <_dtoa_r+0x7f8>
 800e76c:	9b00      	ldr	r3, [sp, #0]
 800e76e:	2b00      	cmp	r3, #0
 800e770:	f77f aed6 	ble.w	800e520 <_dtoa_r+0x900>
 800e774:	4656      	mov	r6, sl
 800e776:	4621      	mov	r1, r4
 800e778:	4648      	mov	r0, r9
 800e77a:	f7ff f9c6 	bl	800db0a <quorem>
 800e77e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800e782:	f806 8b01 	strb.w	r8, [r6], #1
 800e786:	9b00      	ldr	r3, [sp, #0]
 800e788:	eba6 020a 	sub.w	r2, r6, sl
 800e78c:	4293      	cmp	r3, r2
 800e78e:	ddb3      	ble.n	800e6f8 <_dtoa_r+0xad8>
 800e790:	4649      	mov	r1, r9
 800e792:	2300      	movs	r3, #0
 800e794:	220a      	movs	r2, #10
 800e796:	4658      	mov	r0, fp
 800e798:	f000 f968 	bl	800ea6c <__multadd>
 800e79c:	4681      	mov	r9, r0
 800e79e:	e7ea      	b.n	800e776 <_dtoa_r+0xb56>
 800e7a0:	08010cb8 	.word	0x08010cb8
 800e7a4:	08010c3c 	.word	0x08010c3c

0800e7a8 <_free_r>:
 800e7a8:	b538      	push	{r3, r4, r5, lr}
 800e7aa:	4605      	mov	r5, r0
 800e7ac:	2900      	cmp	r1, #0
 800e7ae:	d041      	beq.n	800e834 <_free_r+0x8c>
 800e7b0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e7b4:	1f0c      	subs	r4, r1, #4
 800e7b6:	2b00      	cmp	r3, #0
 800e7b8:	bfb8      	it	lt
 800e7ba:	18e4      	addlt	r4, r4, r3
 800e7bc:	f000 f8e8 	bl	800e990 <__malloc_lock>
 800e7c0:	4a1d      	ldr	r2, [pc, #116]	@ (800e838 <_free_r+0x90>)
 800e7c2:	6813      	ldr	r3, [r2, #0]
 800e7c4:	b933      	cbnz	r3, 800e7d4 <_free_r+0x2c>
 800e7c6:	6063      	str	r3, [r4, #4]
 800e7c8:	6014      	str	r4, [r2, #0]
 800e7ca:	4628      	mov	r0, r5
 800e7cc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e7d0:	f000 b8e4 	b.w	800e99c <__malloc_unlock>
 800e7d4:	42a3      	cmp	r3, r4
 800e7d6:	d908      	bls.n	800e7ea <_free_r+0x42>
 800e7d8:	6820      	ldr	r0, [r4, #0]
 800e7da:	1821      	adds	r1, r4, r0
 800e7dc:	428b      	cmp	r3, r1
 800e7de:	bf01      	itttt	eq
 800e7e0:	6819      	ldreq	r1, [r3, #0]
 800e7e2:	685b      	ldreq	r3, [r3, #4]
 800e7e4:	1809      	addeq	r1, r1, r0
 800e7e6:	6021      	streq	r1, [r4, #0]
 800e7e8:	e7ed      	b.n	800e7c6 <_free_r+0x1e>
 800e7ea:	461a      	mov	r2, r3
 800e7ec:	685b      	ldr	r3, [r3, #4]
 800e7ee:	b10b      	cbz	r3, 800e7f4 <_free_r+0x4c>
 800e7f0:	42a3      	cmp	r3, r4
 800e7f2:	d9fa      	bls.n	800e7ea <_free_r+0x42>
 800e7f4:	6811      	ldr	r1, [r2, #0]
 800e7f6:	1850      	adds	r0, r2, r1
 800e7f8:	42a0      	cmp	r0, r4
 800e7fa:	d10b      	bne.n	800e814 <_free_r+0x6c>
 800e7fc:	6820      	ldr	r0, [r4, #0]
 800e7fe:	4401      	add	r1, r0
 800e800:	1850      	adds	r0, r2, r1
 800e802:	4283      	cmp	r3, r0
 800e804:	6011      	str	r1, [r2, #0]
 800e806:	d1e0      	bne.n	800e7ca <_free_r+0x22>
 800e808:	6818      	ldr	r0, [r3, #0]
 800e80a:	685b      	ldr	r3, [r3, #4]
 800e80c:	6053      	str	r3, [r2, #4]
 800e80e:	4408      	add	r0, r1
 800e810:	6010      	str	r0, [r2, #0]
 800e812:	e7da      	b.n	800e7ca <_free_r+0x22>
 800e814:	d902      	bls.n	800e81c <_free_r+0x74>
 800e816:	230c      	movs	r3, #12
 800e818:	602b      	str	r3, [r5, #0]
 800e81a:	e7d6      	b.n	800e7ca <_free_r+0x22>
 800e81c:	6820      	ldr	r0, [r4, #0]
 800e81e:	1821      	adds	r1, r4, r0
 800e820:	428b      	cmp	r3, r1
 800e822:	bf04      	itt	eq
 800e824:	6819      	ldreq	r1, [r3, #0]
 800e826:	685b      	ldreq	r3, [r3, #4]
 800e828:	6063      	str	r3, [r4, #4]
 800e82a:	bf04      	itt	eq
 800e82c:	1809      	addeq	r1, r1, r0
 800e82e:	6021      	streq	r1, [r4, #0]
 800e830:	6054      	str	r4, [r2, #4]
 800e832:	e7ca      	b.n	800e7ca <_free_r+0x22>
 800e834:	bd38      	pop	{r3, r4, r5, pc}
 800e836:	bf00      	nop
 800e838:	20005298 	.word	0x20005298

0800e83c <malloc>:
 800e83c:	4b02      	ldr	r3, [pc, #8]	@ (800e848 <malloc+0xc>)
 800e83e:	4601      	mov	r1, r0
 800e840:	6818      	ldr	r0, [r3, #0]
 800e842:	f000 b825 	b.w	800e890 <_malloc_r>
 800e846:	bf00      	nop
 800e848:	200000b8 	.word	0x200000b8

0800e84c <sbrk_aligned>:
 800e84c:	b570      	push	{r4, r5, r6, lr}
 800e84e:	4e0f      	ldr	r6, [pc, #60]	@ (800e88c <sbrk_aligned+0x40>)
 800e850:	460c      	mov	r4, r1
 800e852:	6831      	ldr	r1, [r6, #0]
 800e854:	4605      	mov	r5, r0
 800e856:	b911      	cbnz	r1, 800e85e <sbrk_aligned+0x12>
 800e858:	f001 f80c 	bl	800f874 <_sbrk_r>
 800e85c:	6030      	str	r0, [r6, #0]
 800e85e:	4621      	mov	r1, r4
 800e860:	4628      	mov	r0, r5
 800e862:	f001 f807 	bl	800f874 <_sbrk_r>
 800e866:	1c43      	adds	r3, r0, #1
 800e868:	d103      	bne.n	800e872 <sbrk_aligned+0x26>
 800e86a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800e86e:	4620      	mov	r0, r4
 800e870:	bd70      	pop	{r4, r5, r6, pc}
 800e872:	1cc4      	adds	r4, r0, #3
 800e874:	f024 0403 	bic.w	r4, r4, #3
 800e878:	42a0      	cmp	r0, r4
 800e87a:	d0f8      	beq.n	800e86e <sbrk_aligned+0x22>
 800e87c:	1a21      	subs	r1, r4, r0
 800e87e:	4628      	mov	r0, r5
 800e880:	f000 fff8 	bl	800f874 <_sbrk_r>
 800e884:	3001      	adds	r0, #1
 800e886:	d1f2      	bne.n	800e86e <sbrk_aligned+0x22>
 800e888:	e7ef      	b.n	800e86a <sbrk_aligned+0x1e>
 800e88a:	bf00      	nop
 800e88c:	20005294 	.word	0x20005294

0800e890 <_malloc_r>:
 800e890:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e894:	1ccd      	adds	r5, r1, #3
 800e896:	f025 0503 	bic.w	r5, r5, #3
 800e89a:	3508      	adds	r5, #8
 800e89c:	2d0c      	cmp	r5, #12
 800e89e:	bf38      	it	cc
 800e8a0:	250c      	movcc	r5, #12
 800e8a2:	2d00      	cmp	r5, #0
 800e8a4:	4606      	mov	r6, r0
 800e8a6:	db01      	blt.n	800e8ac <_malloc_r+0x1c>
 800e8a8:	42a9      	cmp	r1, r5
 800e8aa:	d904      	bls.n	800e8b6 <_malloc_r+0x26>
 800e8ac:	230c      	movs	r3, #12
 800e8ae:	6033      	str	r3, [r6, #0]
 800e8b0:	2000      	movs	r0, #0
 800e8b2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e8b6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800e98c <_malloc_r+0xfc>
 800e8ba:	f000 f869 	bl	800e990 <__malloc_lock>
 800e8be:	f8d8 3000 	ldr.w	r3, [r8]
 800e8c2:	461c      	mov	r4, r3
 800e8c4:	bb44      	cbnz	r4, 800e918 <_malloc_r+0x88>
 800e8c6:	4629      	mov	r1, r5
 800e8c8:	4630      	mov	r0, r6
 800e8ca:	f7ff ffbf 	bl	800e84c <sbrk_aligned>
 800e8ce:	1c43      	adds	r3, r0, #1
 800e8d0:	4604      	mov	r4, r0
 800e8d2:	d158      	bne.n	800e986 <_malloc_r+0xf6>
 800e8d4:	f8d8 4000 	ldr.w	r4, [r8]
 800e8d8:	4627      	mov	r7, r4
 800e8da:	2f00      	cmp	r7, #0
 800e8dc:	d143      	bne.n	800e966 <_malloc_r+0xd6>
 800e8de:	2c00      	cmp	r4, #0
 800e8e0:	d04b      	beq.n	800e97a <_malloc_r+0xea>
 800e8e2:	6823      	ldr	r3, [r4, #0]
 800e8e4:	4639      	mov	r1, r7
 800e8e6:	4630      	mov	r0, r6
 800e8e8:	eb04 0903 	add.w	r9, r4, r3
 800e8ec:	f000 ffc2 	bl	800f874 <_sbrk_r>
 800e8f0:	4581      	cmp	r9, r0
 800e8f2:	d142      	bne.n	800e97a <_malloc_r+0xea>
 800e8f4:	6821      	ldr	r1, [r4, #0]
 800e8f6:	1a6d      	subs	r5, r5, r1
 800e8f8:	4629      	mov	r1, r5
 800e8fa:	4630      	mov	r0, r6
 800e8fc:	f7ff ffa6 	bl	800e84c <sbrk_aligned>
 800e900:	3001      	adds	r0, #1
 800e902:	d03a      	beq.n	800e97a <_malloc_r+0xea>
 800e904:	6823      	ldr	r3, [r4, #0]
 800e906:	442b      	add	r3, r5
 800e908:	6023      	str	r3, [r4, #0]
 800e90a:	f8d8 3000 	ldr.w	r3, [r8]
 800e90e:	685a      	ldr	r2, [r3, #4]
 800e910:	bb62      	cbnz	r2, 800e96c <_malloc_r+0xdc>
 800e912:	f8c8 7000 	str.w	r7, [r8]
 800e916:	e00f      	b.n	800e938 <_malloc_r+0xa8>
 800e918:	6822      	ldr	r2, [r4, #0]
 800e91a:	1b52      	subs	r2, r2, r5
 800e91c:	d420      	bmi.n	800e960 <_malloc_r+0xd0>
 800e91e:	2a0b      	cmp	r2, #11
 800e920:	d917      	bls.n	800e952 <_malloc_r+0xc2>
 800e922:	1961      	adds	r1, r4, r5
 800e924:	42a3      	cmp	r3, r4
 800e926:	6025      	str	r5, [r4, #0]
 800e928:	bf18      	it	ne
 800e92a:	6059      	strne	r1, [r3, #4]
 800e92c:	6863      	ldr	r3, [r4, #4]
 800e92e:	bf08      	it	eq
 800e930:	f8c8 1000 	streq.w	r1, [r8]
 800e934:	5162      	str	r2, [r4, r5]
 800e936:	604b      	str	r3, [r1, #4]
 800e938:	4630      	mov	r0, r6
 800e93a:	f000 f82f 	bl	800e99c <__malloc_unlock>
 800e93e:	f104 000b 	add.w	r0, r4, #11
 800e942:	1d23      	adds	r3, r4, #4
 800e944:	f020 0007 	bic.w	r0, r0, #7
 800e948:	1ac2      	subs	r2, r0, r3
 800e94a:	bf1c      	itt	ne
 800e94c:	1a1b      	subne	r3, r3, r0
 800e94e:	50a3      	strne	r3, [r4, r2]
 800e950:	e7af      	b.n	800e8b2 <_malloc_r+0x22>
 800e952:	6862      	ldr	r2, [r4, #4]
 800e954:	42a3      	cmp	r3, r4
 800e956:	bf0c      	ite	eq
 800e958:	f8c8 2000 	streq.w	r2, [r8]
 800e95c:	605a      	strne	r2, [r3, #4]
 800e95e:	e7eb      	b.n	800e938 <_malloc_r+0xa8>
 800e960:	4623      	mov	r3, r4
 800e962:	6864      	ldr	r4, [r4, #4]
 800e964:	e7ae      	b.n	800e8c4 <_malloc_r+0x34>
 800e966:	463c      	mov	r4, r7
 800e968:	687f      	ldr	r7, [r7, #4]
 800e96a:	e7b6      	b.n	800e8da <_malloc_r+0x4a>
 800e96c:	461a      	mov	r2, r3
 800e96e:	685b      	ldr	r3, [r3, #4]
 800e970:	42a3      	cmp	r3, r4
 800e972:	d1fb      	bne.n	800e96c <_malloc_r+0xdc>
 800e974:	2300      	movs	r3, #0
 800e976:	6053      	str	r3, [r2, #4]
 800e978:	e7de      	b.n	800e938 <_malloc_r+0xa8>
 800e97a:	230c      	movs	r3, #12
 800e97c:	6033      	str	r3, [r6, #0]
 800e97e:	4630      	mov	r0, r6
 800e980:	f000 f80c 	bl	800e99c <__malloc_unlock>
 800e984:	e794      	b.n	800e8b0 <_malloc_r+0x20>
 800e986:	6005      	str	r5, [r0, #0]
 800e988:	e7d6      	b.n	800e938 <_malloc_r+0xa8>
 800e98a:	bf00      	nop
 800e98c:	20005298 	.word	0x20005298

0800e990 <__malloc_lock>:
 800e990:	4801      	ldr	r0, [pc, #4]	@ (800e998 <__malloc_lock+0x8>)
 800e992:	f7ff b8aa 	b.w	800daea <__retarget_lock_acquire_recursive>
 800e996:	bf00      	nop
 800e998:	20005290 	.word	0x20005290

0800e99c <__malloc_unlock>:
 800e99c:	4801      	ldr	r0, [pc, #4]	@ (800e9a4 <__malloc_unlock+0x8>)
 800e99e:	f7ff b8a5 	b.w	800daec <__retarget_lock_release_recursive>
 800e9a2:	bf00      	nop
 800e9a4:	20005290 	.word	0x20005290

0800e9a8 <_Balloc>:
 800e9a8:	b570      	push	{r4, r5, r6, lr}
 800e9aa:	69c6      	ldr	r6, [r0, #28]
 800e9ac:	4604      	mov	r4, r0
 800e9ae:	460d      	mov	r5, r1
 800e9b0:	b976      	cbnz	r6, 800e9d0 <_Balloc+0x28>
 800e9b2:	2010      	movs	r0, #16
 800e9b4:	f7ff ff42 	bl	800e83c <malloc>
 800e9b8:	4602      	mov	r2, r0
 800e9ba:	61e0      	str	r0, [r4, #28]
 800e9bc:	b920      	cbnz	r0, 800e9c8 <_Balloc+0x20>
 800e9be:	4b18      	ldr	r3, [pc, #96]	@ (800ea20 <_Balloc+0x78>)
 800e9c0:	4818      	ldr	r0, [pc, #96]	@ (800ea24 <_Balloc+0x7c>)
 800e9c2:	216b      	movs	r1, #107	@ 0x6b
 800e9c4:	f000 ff66 	bl	800f894 <__assert_func>
 800e9c8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800e9cc:	6006      	str	r6, [r0, #0]
 800e9ce:	60c6      	str	r6, [r0, #12]
 800e9d0:	69e6      	ldr	r6, [r4, #28]
 800e9d2:	68f3      	ldr	r3, [r6, #12]
 800e9d4:	b183      	cbz	r3, 800e9f8 <_Balloc+0x50>
 800e9d6:	69e3      	ldr	r3, [r4, #28]
 800e9d8:	68db      	ldr	r3, [r3, #12]
 800e9da:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800e9de:	b9b8      	cbnz	r0, 800ea10 <_Balloc+0x68>
 800e9e0:	2101      	movs	r1, #1
 800e9e2:	fa01 f605 	lsl.w	r6, r1, r5
 800e9e6:	1d72      	adds	r2, r6, #5
 800e9e8:	0092      	lsls	r2, r2, #2
 800e9ea:	4620      	mov	r0, r4
 800e9ec:	f000 ff70 	bl	800f8d0 <_calloc_r>
 800e9f0:	b160      	cbz	r0, 800ea0c <_Balloc+0x64>
 800e9f2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800e9f6:	e00e      	b.n	800ea16 <_Balloc+0x6e>
 800e9f8:	2221      	movs	r2, #33	@ 0x21
 800e9fa:	2104      	movs	r1, #4
 800e9fc:	4620      	mov	r0, r4
 800e9fe:	f000 ff67 	bl	800f8d0 <_calloc_r>
 800ea02:	69e3      	ldr	r3, [r4, #28]
 800ea04:	60f0      	str	r0, [r6, #12]
 800ea06:	68db      	ldr	r3, [r3, #12]
 800ea08:	2b00      	cmp	r3, #0
 800ea0a:	d1e4      	bne.n	800e9d6 <_Balloc+0x2e>
 800ea0c:	2000      	movs	r0, #0
 800ea0e:	bd70      	pop	{r4, r5, r6, pc}
 800ea10:	6802      	ldr	r2, [r0, #0]
 800ea12:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800ea16:	2300      	movs	r3, #0
 800ea18:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800ea1c:	e7f7      	b.n	800ea0e <_Balloc+0x66>
 800ea1e:	bf00      	nop
 800ea20:	08010c49 	.word	0x08010c49
 800ea24:	08010cc9 	.word	0x08010cc9

0800ea28 <_Bfree>:
 800ea28:	b570      	push	{r4, r5, r6, lr}
 800ea2a:	69c6      	ldr	r6, [r0, #28]
 800ea2c:	4605      	mov	r5, r0
 800ea2e:	460c      	mov	r4, r1
 800ea30:	b976      	cbnz	r6, 800ea50 <_Bfree+0x28>
 800ea32:	2010      	movs	r0, #16
 800ea34:	f7ff ff02 	bl	800e83c <malloc>
 800ea38:	4602      	mov	r2, r0
 800ea3a:	61e8      	str	r0, [r5, #28]
 800ea3c:	b920      	cbnz	r0, 800ea48 <_Bfree+0x20>
 800ea3e:	4b09      	ldr	r3, [pc, #36]	@ (800ea64 <_Bfree+0x3c>)
 800ea40:	4809      	ldr	r0, [pc, #36]	@ (800ea68 <_Bfree+0x40>)
 800ea42:	218f      	movs	r1, #143	@ 0x8f
 800ea44:	f000 ff26 	bl	800f894 <__assert_func>
 800ea48:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ea4c:	6006      	str	r6, [r0, #0]
 800ea4e:	60c6      	str	r6, [r0, #12]
 800ea50:	b13c      	cbz	r4, 800ea62 <_Bfree+0x3a>
 800ea52:	69eb      	ldr	r3, [r5, #28]
 800ea54:	6862      	ldr	r2, [r4, #4]
 800ea56:	68db      	ldr	r3, [r3, #12]
 800ea58:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ea5c:	6021      	str	r1, [r4, #0]
 800ea5e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ea62:	bd70      	pop	{r4, r5, r6, pc}
 800ea64:	08010c49 	.word	0x08010c49
 800ea68:	08010cc9 	.word	0x08010cc9

0800ea6c <__multadd>:
 800ea6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ea70:	690d      	ldr	r5, [r1, #16]
 800ea72:	4607      	mov	r7, r0
 800ea74:	460c      	mov	r4, r1
 800ea76:	461e      	mov	r6, r3
 800ea78:	f101 0c14 	add.w	ip, r1, #20
 800ea7c:	2000      	movs	r0, #0
 800ea7e:	f8dc 3000 	ldr.w	r3, [ip]
 800ea82:	b299      	uxth	r1, r3
 800ea84:	fb02 6101 	mla	r1, r2, r1, r6
 800ea88:	0c1e      	lsrs	r6, r3, #16
 800ea8a:	0c0b      	lsrs	r3, r1, #16
 800ea8c:	fb02 3306 	mla	r3, r2, r6, r3
 800ea90:	b289      	uxth	r1, r1
 800ea92:	3001      	adds	r0, #1
 800ea94:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ea98:	4285      	cmp	r5, r0
 800ea9a:	f84c 1b04 	str.w	r1, [ip], #4
 800ea9e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800eaa2:	dcec      	bgt.n	800ea7e <__multadd+0x12>
 800eaa4:	b30e      	cbz	r6, 800eaea <__multadd+0x7e>
 800eaa6:	68a3      	ldr	r3, [r4, #8]
 800eaa8:	42ab      	cmp	r3, r5
 800eaaa:	dc19      	bgt.n	800eae0 <__multadd+0x74>
 800eaac:	6861      	ldr	r1, [r4, #4]
 800eaae:	4638      	mov	r0, r7
 800eab0:	3101      	adds	r1, #1
 800eab2:	f7ff ff79 	bl	800e9a8 <_Balloc>
 800eab6:	4680      	mov	r8, r0
 800eab8:	b928      	cbnz	r0, 800eac6 <__multadd+0x5a>
 800eaba:	4602      	mov	r2, r0
 800eabc:	4b0c      	ldr	r3, [pc, #48]	@ (800eaf0 <__multadd+0x84>)
 800eabe:	480d      	ldr	r0, [pc, #52]	@ (800eaf4 <__multadd+0x88>)
 800eac0:	21ba      	movs	r1, #186	@ 0xba
 800eac2:	f000 fee7 	bl	800f894 <__assert_func>
 800eac6:	6922      	ldr	r2, [r4, #16]
 800eac8:	3202      	adds	r2, #2
 800eaca:	f104 010c 	add.w	r1, r4, #12
 800eace:	0092      	lsls	r2, r2, #2
 800ead0:	300c      	adds	r0, #12
 800ead2:	f7ff f80c 	bl	800daee <memcpy>
 800ead6:	4621      	mov	r1, r4
 800ead8:	4638      	mov	r0, r7
 800eada:	f7ff ffa5 	bl	800ea28 <_Bfree>
 800eade:	4644      	mov	r4, r8
 800eae0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800eae4:	3501      	adds	r5, #1
 800eae6:	615e      	str	r6, [r3, #20]
 800eae8:	6125      	str	r5, [r4, #16]
 800eaea:	4620      	mov	r0, r4
 800eaec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800eaf0:	08010cb8 	.word	0x08010cb8
 800eaf4:	08010cc9 	.word	0x08010cc9

0800eaf8 <__hi0bits>:
 800eaf8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800eafc:	4603      	mov	r3, r0
 800eafe:	bf36      	itet	cc
 800eb00:	0403      	lslcc	r3, r0, #16
 800eb02:	2000      	movcs	r0, #0
 800eb04:	2010      	movcc	r0, #16
 800eb06:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800eb0a:	bf3c      	itt	cc
 800eb0c:	021b      	lslcc	r3, r3, #8
 800eb0e:	3008      	addcc	r0, #8
 800eb10:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800eb14:	bf3c      	itt	cc
 800eb16:	011b      	lslcc	r3, r3, #4
 800eb18:	3004      	addcc	r0, #4
 800eb1a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800eb1e:	bf3c      	itt	cc
 800eb20:	009b      	lslcc	r3, r3, #2
 800eb22:	3002      	addcc	r0, #2
 800eb24:	2b00      	cmp	r3, #0
 800eb26:	db05      	blt.n	800eb34 <__hi0bits+0x3c>
 800eb28:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800eb2c:	f100 0001 	add.w	r0, r0, #1
 800eb30:	bf08      	it	eq
 800eb32:	2020      	moveq	r0, #32
 800eb34:	4770      	bx	lr

0800eb36 <__lo0bits>:
 800eb36:	6803      	ldr	r3, [r0, #0]
 800eb38:	4602      	mov	r2, r0
 800eb3a:	f013 0007 	ands.w	r0, r3, #7
 800eb3e:	d00b      	beq.n	800eb58 <__lo0bits+0x22>
 800eb40:	07d9      	lsls	r1, r3, #31
 800eb42:	d421      	bmi.n	800eb88 <__lo0bits+0x52>
 800eb44:	0798      	lsls	r0, r3, #30
 800eb46:	bf49      	itett	mi
 800eb48:	085b      	lsrmi	r3, r3, #1
 800eb4a:	089b      	lsrpl	r3, r3, #2
 800eb4c:	2001      	movmi	r0, #1
 800eb4e:	6013      	strmi	r3, [r2, #0]
 800eb50:	bf5c      	itt	pl
 800eb52:	6013      	strpl	r3, [r2, #0]
 800eb54:	2002      	movpl	r0, #2
 800eb56:	4770      	bx	lr
 800eb58:	b299      	uxth	r1, r3
 800eb5a:	b909      	cbnz	r1, 800eb60 <__lo0bits+0x2a>
 800eb5c:	0c1b      	lsrs	r3, r3, #16
 800eb5e:	2010      	movs	r0, #16
 800eb60:	b2d9      	uxtb	r1, r3
 800eb62:	b909      	cbnz	r1, 800eb68 <__lo0bits+0x32>
 800eb64:	3008      	adds	r0, #8
 800eb66:	0a1b      	lsrs	r3, r3, #8
 800eb68:	0719      	lsls	r1, r3, #28
 800eb6a:	bf04      	itt	eq
 800eb6c:	091b      	lsreq	r3, r3, #4
 800eb6e:	3004      	addeq	r0, #4
 800eb70:	0799      	lsls	r1, r3, #30
 800eb72:	bf04      	itt	eq
 800eb74:	089b      	lsreq	r3, r3, #2
 800eb76:	3002      	addeq	r0, #2
 800eb78:	07d9      	lsls	r1, r3, #31
 800eb7a:	d403      	bmi.n	800eb84 <__lo0bits+0x4e>
 800eb7c:	085b      	lsrs	r3, r3, #1
 800eb7e:	f100 0001 	add.w	r0, r0, #1
 800eb82:	d003      	beq.n	800eb8c <__lo0bits+0x56>
 800eb84:	6013      	str	r3, [r2, #0]
 800eb86:	4770      	bx	lr
 800eb88:	2000      	movs	r0, #0
 800eb8a:	4770      	bx	lr
 800eb8c:	2020      	movs	r0, #32
 800eb8e:	4770      	bx	lr

0800eb90 <__i2b>:
 800eb90:	b510      	push	{r4, lr}
 800eb92:	460c      	mov	r4, r1
 800eb94:	2101      	movs	r1, #1
 800eb96:	f7ff ff07 	bl	800e9a8 <_Balloc>
 800eb9a:	4602      	mov	r2, r0
 800eb9c:	b928      	cbnz	r0, 800ebaa <__i2b+0x1a>
 800eb9e:	4b05      	ldr	r3, [pc, #20]	@ (800ebb4 <__i2b+0x24>)
 800eba0:	4805      	ldr	r0, [pc, #20]	@ (800ebb8 <__i2b+0x28>)
 800eba2:	f240 1145 	movw	r1, #325	@ 0x145
 800eba6:	f000 fe75 	bl	800f894 <__assert_func>
 800ebaa:	2301      	movs	r3, #1
 800ebac:	6144      	str	r4, [r0, #20]
 800ebae:	6103      	str	r3, [r0, #16]
 800ebb0:	bd10      	pop	{r4, pc}
 800ebb2:	bf00      	nop
 800ebb4:	08010cb8 	.word	0x08010cb8
 800ebb8:	08010cc9 	.word	0x08010cc9

0800ebbc <__multiply>:
 800ebbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ebc0:	4614      	mov	r4, r2
 800ebc2:	690a      	ldr	r2, [r1, #16]
 800ebc4:	6923      	ldr	r3, [r4, #16]
 800ebc6:	429a      	cmp	r2, r3
 800ebc8:	bfa8      	it	ge
 800ebca:	4623      	movge	r3, r4
 800ebcc:	460f      	mov	r7, r1
 800ebce:	bfa4      	itt	ge
 800ebd0:	460c      	movge	r4, r1
 800ebd2:	461f      	movge	r7, r3
 800ebd4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800ebd8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800ebdc:	68a3      	ldr	r3, [r4, #8]
 800ebde:	6861      	ldr	r1, [r4, #4]
 800ebe0:	eb0a 0609 	add.w	r6, sl, r9
 800ebe4:	42b3      	cmp	r3, r6
 800ebe6:	b085      	sub	sp, #20
 800ebe8:	bfb8      	it	lt
 800ebea:	3101      	addlt	r1, #1
 800ebec:	f7ff fedc 	bl	800e9a8 <_Balloc>
 800ebf0:	b930      	cbnz	r0, 800ec00 <__multiply+0x44>
 800ebf2:	4602      	mov	r2, r0
 800ebf4:	4b44      	ldr	r3, [pc, #272]	@ (800ed08 <__multiply+0x14c>)
 800ebf6:	4845      	ldr	r0, [pc, #276]	@ (800ed0c <__multiply+0x150>)
 800ebf8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800ebfc:	f000 fe4a 	bl	800f894 <__assert_func>
 800ec00:	f100 0514 	add.w	r5, r0, #20
 800ec04:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ec08:	462b      	mov	r3, r5
 800ec0a:	2200      	movs	r2, #0
 800ec0c:	4543      	cmp	r3, r8
 800ec0e:	d321      	bcc.n	800ec54 <__multiply+0x98>
 800ec10:	f107 0114 	add.w	r1, r7, #20
 800ec14:	f104 0214 	add.w	r2, r4, #20
 800ec18:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800ec1c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800ec20:	9302      	str	r3, [sp, #8]
 800ec22:	1b13      	subs	r3, r2, r4
 800ec24:	3b15      	subs	r3, #21
 800ec26:	f023 0303 	bic.w	r3, r3, #3
 800ec2a:	3304      	adds	r3, #4
 800ec2c:	f104 0715 	add.w	r7, r4, #21
 800ec30:	42ba      	cmp	r2, r7
 800ec32:	bf38      	it	cc
 800ec34:	2304      	movcc	r3, #4
 800ec36:	9301      	str	r3, [sp, #4]
 800ec38:	9b02      	ldr	r3, [sp, #8]
 800ec3a:	9103      	str	r1, [sp, #12]
 800ec3c:	428b      	cmp	r3, r1
 800ec3e:	d80c      	bhi.n	800ec5a <__multiply+0x9e>
 800ec40:	2e00      	cmp	r6, #0
 800ec42:	dd03      	ble.n	800ec4c <__multiply+0x90>
 800ec44:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ec48:	2b00      	cmp	r3, #0
 800ec4a:	d05b      	beq.n	800ed04 <__multiply+0x148>
 800ec4c:	6106      	str	r6, [r0, #16]
 800ec4e:	b005      	add	sp, #20
 800ec50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ec54:	f843 2b04 	str.w	r2, [r3], #4
 800ec58:	e7d8      	b.n	800ec0c <__multiply+0x50>
 800ec5a:	f8b1 a000 	ldrh.w	sl, [r1]
 800ec5e:	f1ba 0f00 	cmp.w	sl, #0
 800ec62:	d024      	beq.n	800ecae <__multiply+0xf2>
 800ec64:	f104 0e14 	add.w	lr, r4, #20
 800ec68:	46a9      	mov	r9, r5
 800ec6a:	f04f 0c00 	mov.w	ip, #0
 800ec6e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ec72:	f8d9 3000 	ldr.w	r3, [r9]
 800ec76:	fa1f fb87 	uxth.w	fp, r7
 800ec7a:	b29b      	uxth	r3, r3
 800ec7c:	fb0a 330b 	mla	r3, sl, fp, r3
 800ec80:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800ec84:	f8d9 7000 	ldr.w	r7, [r9]
 800ec88:	4463      	add	r3, ip
 800ec8a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800ec8e:	fb0a c70b 	mla	r7, sl, fp, ip
 800ec92:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800ec96:	b29b      	uxth	r3, r3
 800ec98:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800ec9c:	4572      	cmp	r2, lr
 800ec9e:	f849 3b04 	str.w	r3, [r9], #4
 800eca2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800eca6:	d8e2      	bhi.n	800ec6e <__multiply+0xb2>
 800eca8:	9b01      	ldr	r3, [sp, #4]
 800ecaa:	f845 c003 	str.w	ip, [r5, r3]
 800ecae:	9b03      	ldr	r3, [sp, #12]
 800ecb0:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800ecb4:	3104      	adds	r1, #4
 800ecb6:	f1b9 0f00 	cmp.w	r9, #0
 800ecba:	d021      	beq.n	800ed00 <__multiply+0x144>
 800ecbc:	682b      	ldr	r3, [r5, #0]
 800ecbe:	f104 0c14 	add.w	ip, r4, #20
 800ecc2:	46ae      	mov	lr, r5
 800ecc4:	f04f 0a00 	mov.w	sl, #0
 800ecc8:	f8bc b000 	ldrh.w	fp, [ip]
 800eccc:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800ecd0:	fb09 770b 	mla	r7, r9, fp, r7
 800ecd4:	4457      	add	r7, sl
 800ecd6:	b29b      	uxth	r3, r3
 800ecd8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800ecdc:	f84e 3b04 	str.w	r3, [lr], #4
 800ece0:	f85c 3b04 	ldr.w	r3, [ip], #4
 800ece4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ece8:	f8be 3000 	ldrh.w	r3, [lr]
 800ecec:	fb09 330a 	mla	r3, r9, sl, r3
 800ecf0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800ecf4:	4562      	cmp	r2, ip
 800ecf6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ecfa:	d8e5      	bhi.n	800ecc8 <__multiply+0x10c>
 800ecfc:	9f01      	ldr	r7, [sp, #4]
 800ecfe:	51eb      	str	r3, [r5, r7]
 800ed00:	3504      	adds	r5, #4
 800ed02:	e799      	b.n	800ec38 <__multiply+0x7c>
 800ed04:	3e01      	subs	r6, #1
 800ed06:	e79b      	b.n	800ec40 <__multiply+0x84>
 800ed08:	08010cb8 	.word	0x08010cb8
 800ed0c:	08010cc9 	.word	0x08010cc9

0800ed10 <__pow5mult>:
 800ed10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ed14:	4615      	mov	r5, r2
 800ed16:	f012 0203 	ands.w	r2, r2, #3
 800ed1a:	4607      	mov	r7, r0
 800ed1c:	460e      	mov	r6, r1
 800ed1e:	d007      	beq.n	800ed30 <__pow5mult+0x20>
 800ed20:	4c25      	ldr	r4, [pc, #148]	@ (800edb8 <__pow5mult+0xa8>)
 800ed22:	3a01      	subs	r2, #1
 800ed24:	2300      	movs	r3, #0
 800ed26:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ed2a:	f7ff fe9f 	bl	800ea6c <__multadd>
 800ed2e:	4606      	mov	r6, r0
 800ed30:	10ad      	asrs	r5, r5, #2
 800ed32:	d03d      	beq.n	800edb0 <__pow5mult+0xa0>
 800ed34:	69fc      	ldr	r4, [r7, #28]
 800ed36:	b97c      	cbnz	r4, 800ed58 <__pow5mult+0x48>
 800ed38:	2010      	movs	r0, #16
 800ed3a:	f7ff fd7f 	bl	800e83c <malloc>
 800ed3e:	4602      	mov	r2, r0
 800ed40:	61f8      	str	r0, [r7, #28]
 800ed42:	b928      	cbnz	r0, 800ed50 <__pow5mult+0x40>
 800ed44:	4b1d      	ldr	r3, [pc, #116]	@ (800edbc <__pow5mult+0xac>)
 800ed46:	481e      	ldr	r0, [pc, #120]	@ (800edc0 <__pow5mult+0xb0>)
 800ed48:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800ed4c:	f000 fda2 	bl	800f894 <__assert_func>
 800ed50:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ed54:	6004      	str	r4, [r0, #0]
 800ed56:	60c4      	str	r4, [r0, #12]
 800ed58:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800ed5c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800ed60:	b94c      	cbnz	r4, 800ed76 <__pow5mult+0x66>
 800ed62:	f240 2171 	movw	r1, #625	@ 0x271
 800ed66:	4638      	mov	r0, r7
 800ed68:	f7ff ff12 	bl	800eb90 <__i2b>
 800ed6c:	2300      	movs	r3, #0
 800ed6e:	f8c8 0008 	str.w	r0, [r8, #8]
 800ed72:	4604      	mov	r4, r0
 800ed74:	6003      	str	r3, [r0, #0]
 800ed76:	f04f 0900 	mov.w	r9, #0
 800ed7a:	07eb      	lsls	r3, r5, #31
 800ed7c:	d50a      	bpl.n	800ed94 <__pow5mult+0x84>
 800ed7e:	4631      	mov	r1, r6
 800ed80:	4622      	mov	r2, r4
 800ed82:	4638      	mov	r0, r7
 800ed84:	f7ff ff1a 	bl	800ebbc <__multiply>
 800ed88:	4631      	mov	r1, r6
 800ed8a:	4680      	mov	r8, r0
 800ed8c:	4638      	mov	r0, r7
 800ed8e:	f7ff fe4b 	bl	800ea28 <_Bfree>
 800ed92:	4646      	mov	r6, r8
 800ed94:	106d      	asrs	r5, r5, #1
 800ed96:	d00b      	beq.n	800edb0 <__pow5mult+0xa0>
 800ed98:	6820      	ldr	r0, [r4, #0]
 800ed9a:	b938      	cbnz	r0, 800edac <__pow5mult+0x9c>
 800ed9c:	4622      	mov	r2, r4
 800ed9e:	4621      	mov	r1, r4
 800eda0:	4638      	mov	r0, r7
 800eda2:	f7ff ff0b 	bl	800ebbc <__multiply>
 800eda6:	6020      	str	r0, [r4, #0]
 800eda8:	f8c0 9000 	str.w	r9, [r0]
 800edac:	4604      	mov	r4, r0
 800edae:	e7e4      	b.n	800ed7a <__pow5mult+0x6a>
 800edb0:	4630      	mov	r0, r6
 800edb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800edb6:	bf00      	nop
 800edb8:	08010d24 	.word	0x08010d24
 800edbc:	08010c49 	.word	0x08010c49
 800edc0:	08010cc9 	.word	0x08010cc9

0800edc4 <__lshift>:
 800edc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800edc8:	460c      	mov	r4, r1
 800edca:	6849      	ldr	r1, [r1, #4]
 800edcc:	6923      	ldr	r3, [r4, #16]
 800edce:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800edd2:	68a3      	ldr	r3, [r4, #8]
 800edd4:	4607      	mov	r7, r0
 800edd6:	4691      	mov	r9, r2
 800edd8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800eddc:	f108 0601 	add.w	r6, r8, #1
 800ede0:	42b3      	cmp	r3, r6
 800ede2:	db0b      	blt.n	800edfc <__lshift+0x38>
 800ede4:	4638      	mov	r0, r7
 800ede6:	f7ff fddf 	bl	800e9a8 <_Balloc>
 800edea:	4605      	mov	r5, r0
 800edec:	b948      	cbnz	r0, 800ee02 <__lshift+0x3e>
 800edee:	4602      	mov	r2, r0
 800edf0:	4b28      	ldr	r3, [pc, #160]	@ (800ee94 <__lshift+0xd0>)
 800edf2:	4829      	ldr	r0, [pc, #164]	@ (800ee98 <__lshift+0xd4>)
 800edf4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800edf8:	f000 fd4c 	bl	800f894 <__assert_func>
 800edfc:	3101      	adds	r1, #1
 800edfe:	005b      	lsls	r3, r3, #1
 800ee00:	e7ee      	b.n	800ede0 <__lshift+0x1c>
 800ee02:	2300      	movs	r3, #0
 800ee04:	f100 0114 	add.w	r1, r0, #20
 800ee08:	f100 0210 	add.w	r2, r0, #16
 800ee0c:	4618      	mov	r0, r3
 800ee0e:	4553      	cmp	r3, sl
 800ee10:	db33      	blt.n	800ee7a <__lshift+0xb6>
 800ee12:	6920      	ldr	r0, [r4, #16]
 800ee14:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ee18:	f104 0314 	add.w	r3, r4, #20
 800ee1c:	f019 091f 	ands.w	r9, r9, #31
 800ee20:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ee24:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ee28:	d02b      	beq.n	800ee82 <__lshift+0xbe>
 800ee2a:	f1c9 0e20 	rsb	lr, r9, #32
 800ee2e:	468a      	mov	sl, r1
 800ee30:	2200      	movs	r2, #0
 800ee32:	6818      	ldr	r0, [r3, #0]
 800ee34:	fa00 f009 	lsl.w	r0, r0, r9
 800ee38:	4310      	orrs	r0, r2
 800ee3a:	f84a 0b04 	str.w	r0, [sl], #4
 800ee3e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ee42:	459c      	cmp	ip, r3
 800ee44:	fa22 f20e 	lsr.w	r2, r2, lr
 800ee48:	d8f3      	bhi.n	800ee32 <__lshift+0x6e>
 800ee4a:	ebac 0304 	sub.w	r3, ip, r4
 800ee4e:	3b15      	subs	r3, #21
 800ee50:	f023 0303 	bic.w	r3, r3, #3
 800ee54:	3304      	adds	r3, #4
 800ee56:	f104 0015 	add.w	r0, r4, #21
 800ee5a:	4584      	cmp	ip, r0
 800ee5c:	bf38      	it	cc
 800ee5e:	2304      	movcc	r3, #4
 800ee60:	50ca      	str	r2, [r1, r3]
 800ee62:	b10a      	cbz	r2, 800ee68 <__lshift+0xa4>
 800ee64:	f108 0602 	add.w	r6, r8, #2
 800ee68:	3e01      	subs	r6, #1
 800ee6a:	4638      	mov	r0, r7
 800ee6c:	612e      	str	r6, [r5, #16]
 800ee6e:	4621      	mov	r1, r4
 800ee70:	f7ff fdda 	bl	800ea28 <_Bfree>
 800ee74:	4628      	mov	r0, r5
 800ee76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ee7a:	f842 0f04 	str.w	r0, [r2, #4]!
 800ee7e:	3301      	adds	r3, #1
 800ee80:	e7c5      	b.n	800ee0e <__lshift+0x4a>
 800ee82:	3904      	subs	r1, #4
 800ee84:	f853 2b04 	ldr.w	r2, [r3], #4
 800ee88:	f841 2f04 	str.w	r2, [r1, #4]!
 800ee8c:	459c      	cmp	ip, r3
 800ee8e:	d8f9      	bhi.n	800ee84 <__lshift+0xc0>
 800ee90:	e7ea      	b.n	800ee68 <__lshift+0xa4>
 800ee92:	bf00      	nop
 800ee94:	08010cb8 	.word	0x08010cb8
 800ee98:	08010cc9 	.word	0x08010cc9

0800ee9c <__mcmp>:
 800ee9c:	690a      	ldr	r2, [r1, #16]
 800ee9e:	4603      	mov	r3, r0
 800eea0:	6900      	ldr	r0, [r0, #16]
 800eea2:	1a80      	subs	r0, r0, r2
 800eea4:	b530      	push	{r4, r5, lr}
 800eea6:	d10e      	bne.n	800eec6 <__mcmp+0x2a>
 800eea8:	3314      	adds	r3, #20
 800eeaa:	3114      	adds	r1, #20
 800eeac:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800eeb0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800eeb4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800eeb8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800eebc:	4295      	cmp	r5, r2
 800eebe:	d003      	beq.n	800eec8 <__mcmp+0x2c>
 800eec0:	d205      	bcs.n	800eece <__mcmp+0x32>
 800eec2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800eec6:	bd30      	pop	{r4, r5, pc}
 800eec8:	42a3      	cmp	r3, r4
 800eeca:	d3f3      	bcc.n	800eeb4 <__mcmp+0x18>
 800eecc:	e7fb      	b.n	800eec6 <__mcmp+0x2a>
 800eece:	2001      	movs	r0, #1
 800eed0:	e7f9      	b.n	800eec6 <__mcmp+0x2a>
	...

0800eed4 <__mdiff>:
 800eed4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eed8:	4689      	mov	r9, r1
 800eeda:	4606      	mov	r6, r0
 800eedc:	4611      	mov	r1, r2
 800eede:	4648      	mov	r0, r9
 800eee0:	4614      	mov	r4, r2
 800eee2:	f7ff ffdb 	bl	800ee9c <__mcmp>
 800eee6:	1e05      	subs	r5, r0, #0
 800eee8:	d112      	bne.n	800ef10 <__mdiff+0x3c>
 800eeea:	4629      	mov	r1, r5
 800eeec:	4630      	mov	r0, r6
 800eeee:	f7ff fd5b 	bl	800e9a8 <_Balloc>
 800eef2:	4602      	mov	r2, r0
 800eef4:	b928      	cbnz	r0, 800ef02 <__mdiff+0x2e>
 800eef6:	4b3f      	ldr	r3, [pc, #252]	@ (800eff4 <__mdiff+0x120>)
 800eef8:	f240 2137 	movw	r1, #567	@ 0x237
 800eefc:	483e      	ldr	r0, [pc, #248]	@ (800eff8 <__mdiff+0x124>)
 800eefe:	f000 fcc9 	bl	800f894 <__assert_func>
 800ef02:	2301      	movs	r3, #1
 800ef04:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ef08:	4610      	mov	r0, r2
 800ef0a:	b003      	add	sp, #12
 800ef0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ef10:	bfbc      	itt	lt
 800ef12:	464b      	movlt	r3, r9
 800ef14:	46a1      	movlt	r9, r4
 800ef16:	4630      	mov	r0, r6
 800ef18:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800ef1c:	bfba      	itte	lt
 800ef1e:	461c      	movlt	r4, r3
 800ef20:	2501      	movlt	r5, #1
 800ef22:	2500      	movge	r5, #0
 800ef24:	f7ff fd40 	bl	800e9a8 <_Balloc>
 800ef28:	4602      	mov	r2, r0
 800ef2a:	b918      	cbnz	r0, 800ef34 <__mdiff+0x60>
 800ef2c:	4b31      	ldr	r3, [pc, #196]	@ (800eff4 <__mdiff+0x120>)
 800ef2e:	f240 2145 	movw	r1, #581	@ 0x245
 800ef32:	e7e3      	b.n	800eefc <__mdiff+0x28>
 800ef34:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800ef38:	6926      	ldr	r6, [r4, #16]
 800ef3a:	60c5      	str	r5, [r0, #12]
 800ef3c:	f109 0310 	add.w	r3, r9, #16
 800ef40:	f109 0514 	add.w	r5, r9, #20
 800ef44:	f104 0e14 	add.w	lr, r4, #20
 800ef48:	f100 0b14 	add.w	fp, r0, #20
 800ef4c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800ef50:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800ef54:	9301      	str	r3, [sp, #4]
 800ef56:	46d9      	mov	r9, fp
 800ef58:	f04f 0c00 	mov.w	ip, #0
 800ef5c:	9b01      	ldr	r3, [sp, #4]
 800ef5e:	f85e 0b04 	ldr.w	r0, [lr], #4
 800ef62:	f853 af04 	ldr.w	sl, [r3, #4]!
 800ef66:	9301      	str	r3, [sp, #4]
 800ef68:	fa1f f38a 	uxth.w	r3, sl
 800ef6c:	4619      	mov	r1, r3
 800ef6e:	b283      	uxth	r3, r0
 800ef70:	1acb      	subs	r3, r1, r3
 800ef72:	0c00      	lsrs	r0, r0, #16
 800ef74:	4463      	add	r3, ip
 800ef76:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800ef7a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800ef7e:	b29b      	uxth	r3, r3
 800ef80:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800ef84:	4576      	cmp	r6, lr
 800ef86:	f849 3b04 	str.w	r3, [r9], #4
 800ef8a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800ef8e:	d8e5      	bhi.n	800ef5c <__mdiff+0x88>
 800ef90:	1b33      	subs	r3, r6, r4
 800ef92:	3b15      	subs	r3, #21
 800ef94:	f023 0303 	bic.w	r3, r3, #3
 800ef98:	3415      	adds	r4, #21
 800ef9a:	3304      	adds	r3, #4
 800ef9c:	42a6      	cmp	r6, r4
 800ef9e:	bf38      	it	cc
 800efa0:	2304      	movcc	r3, #4
 800efa2:	441d      	add	r5, r3
 800efa4:	445b      	add	r3, fp
 800efa6:	461e      	mov	r6, r3
 800efa8:	462c      	mov	r4, r5
 800efaa:	4544      	cmp	r4, r8
 800efac:	d30e      	bcc.n	800efcc <__mdiff+0xf8>
 800efae:	f108 0103 	add.w	r1, r8, #3
 800efb2:	1b49      	subs	r1, r1, r5
 800efb4:	f021 0103 	bic.w	r1, r1, #3
 800efb8:	3d03      	subs	r5, #3
 800efba:	45a8      	cmp	r8, r5
 800efbc:	bf38      	it	cc
 800efbe:	2100      	movcc	r1, #0
 800efc0:	440b      	add	r3, r1
 800efc2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800efc6:	b191      	cbz	r1, 800efee <__mdiff+0x11a>
 800efc8:	6117      	str	r7, [r2, #16]
 800efca:	e79d      	b.n	800ef08 <__mdiff+0x34>
 800efcc:	f854 1b04 	ldr.w	r1, [r4], #4
 800efd0:	46e6      	mov	lr, ip
 800efd2:	0c08      	lsrs	r0, r1, #16
 800efd4:	fa1c fc81 	uxtah	ip, ip, r1
 800efd8:	4471      	add	r1, lr
 800efda:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800efde:	b289      	uxth	r1, r1
 800efe0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800efe4:	f846 1b04 	str.w	r1, [r6], #4
 800efe8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800efec:	e7dd      	b.n	800efaa <__mdiff+0xd6>
 800efee:	3f01      	subs	r7, #1
 800eff0:	e7e7      	b.n	800efc2 <__mdiff+0xee>
 800eff2:	bf00      	nop
 800eff4:	08010cb8 	.word	0x08010cb8
 800eff8:	08010cc9 	.word	0x08010cc9

0800effc <__d2b>:
 800effc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f000:	460f      	mov	r7, r1
 800f002:	2101      	movs	r1, #1
 800f004:	ec59 8b10 	vmov	r8, r9, d0
 800f008:	4616      	mov	r6, r2
 800f00a:	f7ff fccd 	bl	800e9a8 <_Balloc>
 800f00e:	4604      	mov	r4, r0
 800f010:	b930      	cbnz	r0, 800f020 <__d2b+0x24>
 800f012:	4602      	mov	r2, r0
 800f014:	4b23      	ldr	r3, [pc, #140]	@ (800f0a4 <__d2b+0xa8>)
 800f016:	4824      	ldr	r0, [pc, #144]	@ (800f0a8 <__d2b+0xac>)
 800f018:	f240 310f 	movw	r1, #783	@ 0x30f
 800f01c:	f000 fc3a 	bl	800f894 <__assert_func>
 800f020:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800f024:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f028:	b10d      	cbz	r5, 800f02e <__d2b+0x32>
 800f02a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800f02e:	9301      	str	r3, [sp, #4]
 800f030:	f1b8 0300 	subs.w	r3, r8, #0
 800f034:	d023      	beq.n	800f07e <__d2b+0x82>
 800f036:	4668      	mov	r0, sp
 800f038:	9300      	str	r3, [sp, #0]
 800f03a:	f7ff fd7c 	bl	800eb36 <__lo0bits>
 800f03e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800f042:	b1d0      	cbz	r0, 800f07a <__d2b+0x7e>
 800f044:	f1c0 0320 	rsb	r3, r0, #32
 800f048:	fa02 f303 	lsl.w	r3, r2, r3
 800f04c:	430b      	orrs	r3, r1
 800f04e:	40c2      	lsrs	r2, r0
 800f050:	6163      	str	r3, [r4, #20]
 800f052:	9201      	str	r2, [sp, #4]
 800f054:	9b01      	ldr	r3, [sp, #4]
 800f056:	61a3      	str	r3, [r4, #24]
 800f058:	2b00      	cmp	r3, #0
 800f05a:	bf0c      	ite	eq
 800f05c:	2201      	moveq	r2, #1
 800f05e:	2202      	movne	r2, #2
 800f060:	6122      	str	r2, [r4, #16]
 800f062:	b1a5      	cbz	r5, 800f08e <__d2b+0x92>
 800f064:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800f068:	4405      	add	r5, r0
 800f06a:	603d      	str	r5, [r7, #0]
 800f06c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800f070:	6030      	str	r0, [r6, #0]
 800f072:	4620      	mov	r0, r4
 800f074:	b003      	add	sp, #12
 800f076:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f07a:	6161      	str	r1, [r4, #20]
 800f07c:	e7ea      	b.n	800f054 <__d2b+0x58>
 800f07e:	a801      	add	r0, sp, #4
 800f080:	f7ff fd59 	bl	800eb36 <__lo0bits>
 800f084:	9b01      	ldr	r3, [sp, #4]
 800f086:	6163      	str	r3, [r4, #20]
 800f088:	3020      	adds	r0, #32
 800f08a:	2201      	movs	r2, #1
 800f08c:	e7e8      	b.n	800f060 <__d2b+0x64>
 800f08e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f092:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800f096:	6038      	str	r0, [r7, #0]
 800f098:	6918      	ldr	r0, [r3, #16]
 800f09a:	f7ff fd2d 	bl	800eaf8 <__hi0bits>
 800f09e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800f0a2:	e7e5      	b.n	800f070 <__d2b+0x74>
 800f0a4:	08010cb8 	.word	0x08010cb8
 800f0a8:	08010cc9 	.word	0x08010cc9

0800f0ac <__ssputs_r>:
 800f0ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f0b0:	688e      	ldr	r6, [r1, #8]
 800f0b2:	461f      	mov	r7, r3
 800f0b4:	42be      	cmp	r6, r7
 800f0b6:	680b      	ldr	r3, [r1, #0]
 800f0b8:	4682      	mov	sl, r0
 800f0ba:	460c      	mov	r4, r1
 800f0bc:	4690      	mov	r8, r2
 800f0be:	d82d      	bhi.n	800f11c <__ssputs_r+0x70>
 800f0c0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f0c4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800f0c8:	d026      	beq.n	800f118 <__ssputs_r+0x6c>
 800f0ca:	6965      	ldr	r5, [r4, #20]
 800f0cc:	6909      	ldr	r1, [r1, #16]
 800f0ce:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f0d2:	eba3 0901 	sub.w	r9, r3, r1
 800f0d6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f0da:	1c7b      	adds	r3, r7, #1
 800f0dc:	444b      	add	r3, r9
 800f0de:	106d      	asrs	r5, r5, #1
 800f0e0:	429d      	cmp	r5, r3
 800f0e2:	bf38      	it	cc
 800f0e4:	461d      	movcc	r5, r3
 800f0e6:	0553      	lsls	r3, r2, #21
 800f0e8:	d527      	bpl.n	800f13a <__ssputs_r+0x8e>
 800f0ea:	4629      	mov	r1, r5
 800f0ec:	f7ff fbd0 	bl	800e890 <_malloc_r>
 800f0f0:	4606      	mov	r6, r0
 800f0f2:	b360      	cbz	r0, 800f14e <__ssputs_r+0xa2>
 800f0f4:	6921      	ldr	r1, [r4, #16]
 800f0f6:	464a      	mov	r2, r9
 800f0f8:	f7fe fcf9 	bl	800daee <memcpy>
 800f0fc:	89a3      	ldrh	r3, [r4, #12]
 800f0fe:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800f102:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f106:	81a3      	strh	r3, [r4, #12]
 800f108:	6126      	str	r6, [r4, #16]
 800f10a:	6165      	str	r5, [r4, #20]
 800f10c:	444e      	add	r6, r9
 800f10e:	eba5 0509 	sub.w	r5, r5, r9
 800f112:	6026      	str	r6, [r4, #0]
 800f114:	60a5      	str	r5, [r4, #8]
 800f116:	463e      	mov	r6, r7
 800f118:	42be      	cmp	r6, r7
 800f11a:	d900      	bls.n	800f11e <__ssputs_r+0x72>
 800f11c:	463e      	mov	r6, r7
 800f11e:	6820      	ldr	r0, [r4, #0]
 800f120:	4632      	mov	r2, r6
 800f122:	4641      	mov	r1, r8
 800f124:	f000 fb6a 	bl	800f7fc <memmove>
 800f128:	68a3      	ldr	r3, [r4, #8]
 800f12a:	1b9b      	subs	r3, r3, r6
 800f12c:	60a3      	str	r3, [r4, #8]
 800f12e:	6823      	ldr	r3, [r4, #0]
 800f130:	4433      	add	r3, r6
 800f132:	6023      	str	r3, [r4, #0]
 800f134:	2000      	movs	r0, #0
 800f136:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f13a:	462a      	mov	r2, r5
 800f13c:	f000 fbee 	bl	800f91c <_realloc_r>
 800f140:	4606      	mov	r6, r0
 800f142:	2800      	cmp	r0, #0
 800f144:	d1e0      	bne.n	800f108 <__ssputs_r+0x5c>
 800f146:	6921      	ldr	r1, [r4, #16]
 800f148:	4650      	mov	r0, sl
 800f14a:	f7ff fb2d 	bl	800e7a8 <_free_r>
 800f14e:	230c      	movs	r3, #12
 800f150:	f8ca 3000 	str.w	r3, [sl]
 800f154:	89a3      	ldrh	r3, [r4, #12]
 800f156:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f15a:	81a3      	strh	r3, [r4, #12]
 800f15c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f160:	e7e9      	b.n	800f136 <__ssputs_r+0x8a>
	...

0800f164 <_svfiprintf_r>:
 800f164:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f168:	4698      	mov	r8, r3
 800f16a:	898b      	ldrh	r3, [r1, #12]
 800f16c:	061b      	lsls	r3, r3, #24
 800f16e:	b09d      	sub	sp, #116	@ 0x74
 800f170:	4607      	mov	r7, r0
 800f172:	460d      	mov	r5, r1
 800f174:	4614      	mov	r4, r2
 800f176:	d510      	bpl.n	800f19a <_svfiprintf_r+0x36>
 800f178:	690b      	ldr	r3, [r1, #16]
 800f17a:	b973      	cbnz	r3, 800f19a <_svfiprintf_r+0x36>
 800f17c:	2140      	movs	r1, #64	@ 0x40
 800f17e:	f7ff fb87 	bl	800e890 <_malloc_r>
 800f182:	6028      	str	r0, [r5, #0]
 800f184:	6128      	str	r0, [r5, #16]
 800f186:	b930      	cbnz	r0, 800f196 <_svfiprintf_r+0x32>
 800f188:	230c      	movs	r3, #12
 800f18a:	603b      	str	r3, [r7, #0]
 800f18c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f190:	b01d      	add	sp, #116	@ 0x74
 800f192:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f196:	2340      	movs	r3, #64	@ 0x40
 800f198:	616b      	str	r3, [r5, #20]
 800f19a:	2300      	movs	r3, #0
 800f19c:	9309      	str	r3, [sp, #36]	@ 0x24
 800f19e:	2320      	movs	r3, #32
 800f1a0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f1a4:	f8cd 800c 	str.w	r8, [sp, #12]
 800f1a8:	2330      	movs	r3, #48	@ 0x30
 800f1aa:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800f348 <_svfiprintf_r+0x1e4>
 800f1ae:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f1b2:	f04f 0901 	mov.w	r9, #1
 800f1b6:	4623      	mov	r3, r4
 800f1b8:	469a      	mov	sl, r3
 800f1ba:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f1be:	b10a      	cbz	r2, 800f1c4 <_svfiprintf_r+0x60>
 800f1c0:	2a25      	cmp	r2, #37	@ 0x25
 800f1c2:	d1f9      	bne.n	800f1b8 <_svfiprintf_r+0x54>
 800f1c4:	ebba 0b04 	subs.w	fp, sl, r4
 800f1c8:	d00b      	beq.n	800f1e2 <_svfiprintf_r+0x7e>
 800f1ca:	465b      	mov	r3, fp
 800f1cc:	4622      	mov	r2, r4
 800f1ce:	4629      	mov	r1, r5
 800f1d0:	4638      	mov	r0, r7
 800f1d2:	f7ff ff6b 	bl	800f0ac <__ssputs_r>
 800f1d6:	3001      	adds	r0, #1
 800f1d8:	f000 80a7 	beq.w	800f32a <_svfiprintf_r+0x1c6>
 800f1dc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f1de:	445a      	add	r2, fp
 800f1e0:	9209      	str	r2, [sp, #36]	@ 0x24
 800f1e2:	f89a 3000 	ldrb.w	r3, [sl]
 800f1e6:	2b00      	cmp	r3, #0
 800f1e8:	f000 809f 	beq.w	800f32a <_svfiprintf_r+0x1c6>
 800f1ec:	2300      	movs	r3, #0
 800f1ee:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800f1f2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f1f6:	f10a 0a01 	add.w	sl, sl, #1
 800f1fa:	9304      	str	r3, [sp, #16]
 800f1fc:	9307      	str	r3, [sp, #28]
 800f1fe:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f202:	931a      	str	r3, [sp, #104]	@ 0x68
 800f204:	4654      	mov	r4, sl
 800f206:	2205      	movs	r2, #5
 800f208:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f20c:	484e      	ldr	r0, [pc, #312]	@ (800f348 <_svfiprintf_r+0x1e4>)
 800f20e:	f7f0 ffdf 	bl	80001d0 <memchr>
 800f212:	9a04      	ldr	r2, [sp, #16]
 800f214:	b9d8      	cbnz	r0, 800f24e <_svfiprintf_r+0xea>
 800f216:	06d0      	lsls	r0, r2, #27
 800f218:	bf44      	itt	mi
 800f21a:	2320      	movmi	r3, #32
 800f21c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f220:	0711      	lsls	r1, r2, #28
 800f222:	bf44      	itt	mi
 800f224:	232b      	movmi	r3, #43	@ 0x2b
 800f226:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f22a:	f89a 3000 	ldrb.w	r3, [sl]
 800f22e:	2b2a      	cmp	r3, #42	@ 0x2a
 800f230:	d015      	beq.n	800f25e <_svfiprintf_r+0xfa>
 800f232:	9a07      	ldr	r2, [sp, #28]
 800f234:	4654      	mov	r4, sl
 800f236:	2000      	movs	r0, #0
 800f238:	f04f 0c0a 	mov.w	ip, #10
 800f23c:	4621      	mov	r1, r4
 800f23e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f242:	3b30      	subs	r3, #48	@ 0x30
 800f244:	2b09      	cmp	r3, #9
 800f246:	d94b      	bls.n	800f2e0 <_svfiprintf_r+0x17c>
 800f248:	b1b0      	cbz	r0, 800f278 <_svfiprintf_r+0x114>
 800f24a:	9207      	str	r2, [sp, #28]
 800f24c:	e014      	b.n	800f278 <_svfiprintf_r+0x114>
 800f24e:	eba0 0308 	sub.w	r3, r0, r8
 800f252:	fa09 f303 	lsl.w	r3, r9, r3
 800f256:	4313      	orrs	r3, r2
 800f258:	9304      	str	r3, [sp, #16]
 800f25a:	46a2      	mov	sl, r4
 800f25c:	e7d2      	b.n	800f204 <_svfiprintf_r+0xa0>
 800f25e:	9b03      	ldr	r3, [sp, #12]
 800f260:	1d19      	adds	r1, r3, #4
 800f262:	681b      	ldr	r3, [r3, #0]
 800f264:	9103      	str	r1, [sp, #12]
 800f266:	2b00      	cmp	r3, #0
 800f268:	bfbb      	ittet	lt
 800f26a:	425b      	neglt	r3, r3
 800f26c:	f042 0202 	orrlt.w	r2, r2, #2
 800f270:	9307      	strge	r3, [sp, #28]
 800f272:	9307      	strlt	r3, [sp, #28]
 800f274:	bfb8      	it	lt
 800f276:	9204      	strlt	r2, [sp, #16]
 800f278:	7823      	ldrb	r3, [r4, #0]
 800f27a:	2b2e      	cmp	r3, #46	@ 0x2e
 800f27c:	d10a      	bne.n	800f294 <_svfiprintf_r+0x130>
 800f27e:	7863      	ldrb	r3, [r4, #1]
 800f280:	2b2a      	cmp	r3, #42	@ 0x2a
 800f282:	d132      	bne.n	800f2ea <_svfiprintf_r+0x186>
 800f284:	9b03      	ldr	r3, [sp, #12]
 800f286:	1d1a      	adds	r2, r3, #4
 800f288:	681b      	ldr	r3, [r3, #0]
 800f28a:	9203      	str	r2, [sp, #12]
 800f28c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f290:	3402      	adds	r4, #2
 800f292:	9305      	str	r3, [sp, #20]
 800f294:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800f358 <_svfiprintf_r+0x1f4>
 800f298:	7821      	ldrb	r1, [r4, #0]
 800f29a:	2203      	movs	r2, #3
 800f29c:	4650      	mov	r0, sl
 800f29e:	f7f0 ff97 	bl	80001d0 <memchr>
 800f2a2:	b138      	cbz	r0, 800f2b4 <_svfiprintf_r+0x150>
 800f2a4:	9b04      	ldr	r3, [sp, #16]
 800f2a6:	eba0 000a 	sub.w	r0, r0, sl
 800f2aa:	2240      	movs	r2, #64	@ 0x40
 800f2ac:	4082      	lsls	r2, r0
 800f2ae:	4313      	orrs	r3, r2
 800f2b0:	3401      	adds	r4, #1
 800f2b2:	9304      	str	r3, [sp, #16]
 800f2b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f2b8:	4824      	ldr	r0, [pc, #144]	@ (800f34c <_svfiprintf_r+0x1e8>)
 800f2ba:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f2be:	2206      	movs	r2, #6
 800f2c0:	f7f0 ff86 	bl	80001d0 <memchr>
 800f2c4:	2800      	cmp	r0, #0
 800f2c6:	d036      	beq.n	800f336 <_svfiprintf_r+0x1d2>
 800f2c8:	4b21      	ldr	r3, [pc, #132]	@ (800f350 <_svfiprintf_r+0x1ec>)
 800f2ca:	bb1b      	cbnz	r3, 800f314 <_svfiprintf_r+0x1b0>
 800f2cc:	9b03      	ldr	r3, [sp, #12]
 800f2ce:	3307      	adds	r3, #7
 800f2d0:	f023 0307 	bic.w	r3, r3, #7
 800f2d4:	3308      	adds	r3, #8
 800f2d6:	9303      	str	r3, [sp, #12]
 800f2d8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f2da:	4433      	add	r3, r6
 800f2dc:	9309      	str	r3, [sp, #36]	@ 0x24
 800f2de:	e76a      	b.n	800f1b6 <_svfiprintf_r+0x52>
 800f2e0:	fb0c 3202 	mla	r2, ip, r2, r3
 800f2e4:	460c      	mov	r4, r1
 800f2e6:	2001      	movs	r0, #1
 800f2e8:	e7a8      	b.n	800f23c <_svfiprintf_r+0xd8>
 800f2ea:	2300      	movs	r3, #0
 800f2ec:	3401      	adds	r4, #1
 800f2ee:	9305      	str	r3, [sp, #20]
 800f2f0:	4619      	mov	r1, r3
 800f2f2:	f04f 0c0a 	mov.w	ip, #10
 800f2f6:	4620      	mov	r0, r4
 800f2f8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f2fc:	3a30      	subs	r2, #48	@ 0x30
 800f2fe:	2a09      	cmp	r2, #9
 800f300:	d903      	bls.n	800f30a <_svfiprintf_r+0x1a6>
 800f302:	2b00      	cmp	r3, #0
 800f304:	d0c6      	beq.n	800f294 <_svfiprintf_r+0x130>
 800f306:	9105      	str	r1, [sp, #20]
 800f308:	e7c4      	b.n	800f294 <_svfiprintf_r+0x130>
 800f30a:	fb0c 2101 	mla	r1, ip, r1, r2
 800f30e:	4604      	mov	r4, r0
 800f310:	2301      	movs	r3, #1
 800f312:	e7f0      	b.n	800f2f6 <_svfiprintf_r+0x192>
 800f314:	ab03      	add	r3, sp, #12
 800f316:	9300      	str	r3, [sp, #0]
 800f318:	462a      	mov	r2, r5
 800f31a:	4b0e      	ldr	r3, [pc, #56]	@ (800f354 <_svfiprintf_r+0x1f0>)
 800f31c:	a904      	add	r1, sp, #16
 800f31e:	4638      	mov	r0, r7
 800f320:	f7fd fd1a 	bl	800cd58 <_printf_float>
 800f324:	1c42      	adds	r2, r0, #1
 800f326:	4606      	mov	r6, r0
 800f328:	d1d6      	bne.n	800f2d8 <_svfiprintf_r+0x174>
 800f32a:	89ab      	ldrh	r3, [r5, #12]
 800f32c:	065b      	lsls	r3, r3, #25
 800f32e:	f53f af2d 	bmi.w	800f18c <_svfiprintf_r+0x28>
 800f332:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f334:	e72c      	b.n	800f190 <_svfiprintf_r+0x2c>
 800f336:	ab03      	add	r3, sp, #12
 800f338:	9300      	str	r3, [sp, #0]
 800f33a:	462a      	mov	r2, r5
 800f33c:	4b05      	ldr	r3, [pc, #20]	@ (800f354 <_svfiprintf_r+0x1f0>)
 800f33e:	a904      	add	r1, sp, #16
 800f340:	4638      	mov	r0, r7
 800f342:	f7fd ffa1 	bl	800d288 <_printf_i>
 800f346:	e7ed      	b.n	800f324 <_svfiprintf_r+0x1c0>
 800f348:	08010e20 	.word	0x08010e20
 800f34c:	08010e2a 	.word	0x08010e2a
 800f350:	0800cd59 	.word	0x0800cd59
 800f354:	0800f0ad 	.word	0x0800f0ad
 800f358:	08010e26 	.word	0x08010e26

0800f35c <__sfputc_r>:
 800f35c:	6893      	ldr	r3, [r2, #8]
 800f35e:	3b01      	subs	r3, #1
 800f360:	2b00      	cmp	r3, #0
 800f362:	b410      	push	{r4}
 800f364:	6093      	str	r3, [r2, #8]
 800f366:	da08      	bge.n	800f37a <__sfputc_r+0x1e>
 800f368:	6994      	ldr	r4, [r2, #24]
 800f36a:	42a3      	cmp	r3, r4
 800f36c:	db01      	blt.n	800f372 <__sfputc_r+0x16>
 800f36e:	290a      	cmp	r1, #10
 800f370:	d103      	bne.n	800f37a <__sfputc_r+0x1e>
 800f372:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f376:	f7fe ba50 	b.w	800d81a <__swbuf_r>
 800f37a:	6813      	ldr	r3, [r2, #0]
 800f37c:	1c58      	adds	r0, r3, #1
 800f37e:	6010      	str	r0, [r2, #0]
 800f380:	7019      	strb	r1, [r3, #0]
 800f382:	4608      	mov	r0, r1
 800f384:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f388:	4770      	bx	lr

0800f38a <__sfputs_r>:
 800f38a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f38c:	4606      	mov	r6, r0
 800f38e:	460f      	mov	r7, r1
 800f390:	4614      	mov	r4, r2
 800f392:	18d5      	adds	r5, r2, r3
 800f394:	42ac      	cmp	r4, r5
 800f396:	d101      	bne.n	800f39c <__sfputs_r+0x12>
 800f398:	2000      	movs	r0, #0
 800f39a:	e007      	b.n	800f3ac <__sfputs_r+0x22>
 800f39c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f3a0:	463a      	mov	r2, r7
 800f3a2:	4630      	mov	r0, r6
 800f3a4:	f7ff ffda 	bl	800f35c <__sfputc_r>
 800f3a8:	1c43      	adds	r3, r0, #1
 800f3aa:	d1f3      	bne.n	800f394 <__sfputs_r+0xa>
 800f3ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f3b0 <_vfiprintf_r>:
 800f3b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f3b4:	460d      	mov	r5, r1
 800f3b6:	b09d      	sub	sp, #116	@ 0x74
 800f3b8:	4614      	mov	r4, r2
 800f3ba:	4698      	mov	r8, r3
 800f3bc:	4606      	mov	r6, r0
 800f3be:	b118      	cbz	r0, 800f3c8 <_vfiprintf_r+0x18>
 800f3c0:	6a03      	ldr	r3, [r0, #32]
 800f3c2:	b90b      	cbnz	r3, 800f3c8 <_vfiprintf_r+0x18>
 800f3c4:	f7fe f90c 	bl	800d5e0 <__sinit>
 800f3c8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f3ca:	07d9      	lsls	r1, r3, #31
 800f3cc:	d405      	bmi.n	800f3da <_vfiprintf_r+0x2a>
 800f3ce:	89ab      	ldrh	r3, [r5, #12]
 800f3d0:	059a      	lsls	r2, r3, #22
 800f3d2:	d402      	bmi.n	800f3da <_vfiprintf_r+0x2a>
 800f3d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f3d6:	f7fe fb88 	bl	800daea <__retarget_lock_acquire_recursive>
 800f3da:	89ab      	ldrh	r3, [r5, #12]
 800f3dc:	071b      	lsls	r3, r3, #28
 800f3de:	d501      	bpl.n	800f3e4 <_vfiprintf_r+0x34>
 800f3e0:	692b      	ldr	r3, [r5, #16]
 800f3e2:	b99b      	cbnz	r3, 800f40c <_vfiprintf_r+0x5c>
 800f3e4:	4629      	mov	r1, r5
 800f3e6:	4630      	mov	r0, r6
 800f3e8:	f7fe fa56 	bl	800d898 <__swsetup_r>
 800f3ec:	b170      	cbz	r0, 800f40c <_vfiprintf_r+0x5c>
 800f3ee:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f3f0:	07dc      	lsls	r4, r3, #31
 800f3f2:	d504      	bpl.n	800f3fe <_vfiprintf_r+0x4e>
 800f3f4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f3f8:	b01d      	add	sp, #116	@ 0x74
 800f3fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f3fe:	89ab      	ldrh	r3, [r5, #12]
 800f400:	0598      	lsls	r0, r3, #22
 800f402:	d4f7      	bmi.n	800f3f4 <_vfiprintf_r+0x44>
 800f404:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f406:	f7fe fb71 	bl	800daec <__retarget_lock_release_recursive>
 800f40a:	e7f3      	b.n	800f3f4 <_vfiprintf_r+0x44>
 800f40c:	2300      	movs	r3, #0
 800f40e:	9309      	str	r3, [sp, #36]	@ 0x24
 800f410:	2320      	movs	r3, #32
 800f412:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f416:	f8cd 800c 	str.w	r8, [sp, #12]
 800f41a:	2330      	movs	r3, #48	@ 0x30
 800f41c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800f5cc <_vfiprintf_r+0x21c>
 800f420:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f424:	f04f 0901 	mov.w	r9, #1
 800f428:	4623      	mov	r3, r4
 800f42a:	469a      	mov	sl, r3
 800f42c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f430:	b10a      	cbz	r2, 800f436 <_vfiprintf_r+0x86>
 800f432:	2a25      	cmp	r2, #37	@ 0x25
 800f434:	d1f9      	bne.n	800f42a <_vfiprintf_r+0x7a>
 800f436:	ebba 0b04 	subs.w	fp, sl, r4
 800f43a:	d00b      	beq.n	800f454 <_vfiprintf_r+0xa4>
 800f43c:	465b      	mov	r3, fp
 800f43e:	4622      	mov	r2, r4
 800f440:	4629      	mov	r1, r5
 800f442:	4630      	mov	r0, r6
 800f444:	f7ff ffa1 	bl	800f38a <__sfputs_r>
 800f448:	3001      	adds	r0, #1
 800f44a:	f000 80a7 	beq.w	800f59c <_vfiprintf_r+0x1ec>
 800f44e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f450:	445a      	add	r2, fp
 800f452:	9209      	str	r2, [sp, #36]	@ 0x24
 800f454:	f89a 3000 	ldrb.w	r3, [sl]
 800f458:	2b00      	cmp	r3, #0
 800f45a:	f000 809f 	beq.w	800f59c <_vfiprintf_r+0x1ec>
 800f45e:	2300      	movs	r3, #0
 800f460:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800f464:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f468:	f10a 0a01 	add.w	sl, sl, #1
 800f46c:	9304      	str	r3, [sp, #16]
 800f46e:	9307      	str	r3, [sp, #28]
 800f470:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f474:	931a      	str	r3, [sp, #104]	@ 0x68
 800f476:	4654      	mov	r4, sl
 800f478:	2205      	movs	r2, #5
 800f47a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f47e:	4853      	ldr	r0, [pc, #332]	@ (800f5cc <_vfiprintf_r+0x21c>)
 800f480:	f7f0 fea6 	bl	80001d0 <memchr>
 800f484:	9a04      	ldr	r2, [sp, #16]
 800f486:	b9d8      	cbnz	r0, 800f4c0 <_vfiprintf_r+0x110>
 800f488:	06d1      	lsls	r1, r2, #27
 800f48a:	bf44      	itt	mi
 800f48c:	2320      	movmi	r3, #32
 800f48e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f492:	0713      	lsls	r3, r2, #28
 800f494:	bf44      	itt	mi
 800f496:	232b      	movmi	r3, #43	@ 0x2b
 800f498:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f49c:	f89a 3000 	ldrb.w	r3, [sl]
 800f4a0:	2b2a      	cmp	r3, #42	@ 0x2a
 800f4a2:	d015      	beq.n	800f4d0 <_vfiprintf_r+0x120>
 800f4a4:	9a07      	ldr	r2, [sp, #28]
 800f4a6:	4654      	mov	r4, sl
 800f4a8:	2000      	movs	r0, #0
 800f4aa:	f04f 0c0a 	mov.w	ip, #10
 800f4ae:	4621      	mov	r1, r4
 800f4b0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f4b4:	3b30      	subs	r3, #48	@ 0x30
 800f4b6:	2b09      	cmp	r3, #9
 800f4b8:	d94b      	bls.n	800f552 <_vfiprintf_r+0x1a2>
 800f4ba:	b1b0      	cbz	r0, 800f4ea <_vfiprintf_r+0x13a>
 800f4bc:	9207      	str	r2, [sp, #28]
 800f4be:	e014      	b.n	800f4ea <_vfiprintf_r+0x13a>
 800f4c0:	eba0 0308 	sub.w	r3, r0, r8
 800f4c4:	fa09 f303 	lsl.w	r3, r9, r3
 800f4c8:	4313      	orrs	r3, r2
 800f4ca:	9304      	str	r3, [sp, #16]
 800f4cc:	46a2      	mov	sl, r4
 800f4ce:	e7d2      	b.n	800f476 <_vfiprintf_r+0xc6>
 800f4d0:	9b03      	ldr	r3, [sp, #12]
 800f4d2:	1d19      	adds	r1, r3, #4
 800f4d4:	681b      	ldr	r3, [r3, #0]
 800f4d6:	9103      	str	r1, [sp, #12]
 800f4d8:	2b00      	cmp	r3, #0
 800f4da:	bfbb      	ittet	lt
 800f4dc:	425b      	neglt	r3, r3
 800f4de:	f042 0202 	orrlt.w	r2, r2, #2
 800f4e2:	9307      	strge	r3, [sp, #28]
 800f4e4:	9307      	strlt	r3, [sp, #28]
 800f4e6:	bfb8      	it	lt
 800f4e8:	9204      	strlt	r2, [sp, #16]
 800f4ea:	7823      	ldrb	r3, [r4, #0]
 800f4ec:	2b2e      	cmp	r3, #46	@ 0x2e
 800f4ee:	d10a      	bne.n	800f506 <_vfiprintf_r+0x156>
 800f4f0:	7863      	ldrb	r3, [r4, #1]
 800f4f2:	2b2a      	cmp	r3, #42	@ 0x2a
 800f4f4:	d132      	bne.n	800f55c <_vfiprintf_r+0x1ac>
 800f4f6:	9b03      	ldr	r3, [sp, #12]
 800f4f8:	1d1a      	adds	r2, r3, #4
 800f4fa:	681b      	ldr	r3, [r3, #0]
 800f4fc:	9203      	str	r2, [sp, #12]
 800f4fe:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f502:	3402      	adds	r4, #2
 800f504:	9305      	str	r3, [sp, #20]
 800f506:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800f5dc <_vfiprintf_r+0x22c>
 800f50a:	7821      	ldrb	r1, [r4, #0]
 800f50c:	2203      	movs	r2, #3
 800f50e:	4650      	mov	r0, sl
 800f510:	f7f0 fe5e 	bl	80001d0 <memchr>
 800f514:	b138      	cbz	r0, 800f526 <_vfiprintf_r+0x176>
 800f516:	9b04      	ldr	r3, [sp, #16]
 800f518:	eba0 000a 	sub.w	r0, r0, sl
 800f51c:	2240      	movs	r2, #64	@ 0x40
 800f51e:	4082      	lsls	r2, r0
 800f520:	4313      	orrs	r3, r2
 800f522:	3401      	adds	r4, #1
 800f524:	9304      	str	r3, [sp, #16]
 800f526:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f52a:	4829      	ldr	r0, [pc, #164]	@ (800f5d0 <_vfiprintf_r+0x220>)
 800f52c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f530:	2206      	movs	r2, #6
 800f532:	f7f0 fe4d 	bl	80001d0 <memchr>
 800f536:	2800      	cmp	r0, #0
 800f538:	d03f      	beq.n	800f5ba <_vfiprintf_r+0x20a>
 800f53a:	4b26      	ldr	r3, [pc, #152]	@ (800f5d4 <_vfiprintf_r+0x224>)
 800f53c:	bb1b      	cbnz	r3, 800f586 <_vfiprintf_r+0x1d6>
 800f53e:	9b03      	ldr	r3, [sp, #12]
 800f540:	3307      	adds	r3, #7
 800f542:	f023 0307 	bic.w	r3, r3, #7
 800f546:	3308      	adds	r3, #8
 800f548:	9303      	str	r3, [sp, #12]
 800f54a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f54c:	443b      	add	r3, r7
 800f54e:	9309      	str	r3, [sp, #36]	@ 0x24
 800f550:	e76a      	b.n	800f428 <_vfiprintf_r+0x78>
 800f552:	fb0c 3202 	mla	r2, ip, r2, r3
 800f556:	460c      	mov	r4, r1
 800f558:	2001      	movs	r0, #1
 800f55a:	e7a8      	b.n	800f4ae <_vfiprintf_r+0xfe>
 800f55c:	2300      	movs	r3, #0
 800f55e:	3401      	adds	r4, #1
 800f560:	9305      	str	r3, [sp, #20]
 800f562:	4619      	mov	r1, r3
 800f564:	f04f 0c0a 	mov.w	ip, #10
 800f568:	4620      	mov	r0, r4
 800f56a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f56e:	3a30      	subs	r2, #48	@ 0x30
 800f570:	2a09      	cmp	r2, #9
 800f572:	d903      	bls.n	800f57c <_vfiprintf_r+0x1cc>
 800f574:	2b00      	cmp	r3, #0
 800f576:	d0c6      	beq.n	800f506 <_vfiprintf_r+0x156>
 800f578:	9105      	str	r1, [sp, #20]
 800f57a:	e7c4      	b.n	800f506 <_vfiprintf_r+0x156>
 800f57c:	fb0c 2101 	mla	r1, ip, r1, r2
 800f580:	4604      	mov	r4, r0
 800f582:	2301      	movs	r3, #1
 800f584:	e7f0      	b.n	800f568 <_vfiprintf_r+0x1b8>
 800f586:	ab03      	add	r3, sp, #12
 800f588:	9300      	str	r3, [sp, #0]
 800f58a:	462a      	mov	r2, r5
 800f58c:	4b12      	ldr	r3, [pc, #72]	@ (800f5d8 <_vfiprintf_r+0x228>)
 800f58e:	a904      	add	r1, sp, #16
 800f590:	4630      	mov	r0, r6
 800f592:	f7fd fbe1 	bl	800cd58 <_printf_float>
 800f596:	4607      	mov	r7, r0
 800f598:	1c78      	adds	r0, r7, #1
 800f59a:	d1d6      	bne.n	800f54a <_vfiprintf_r+0x19a>
 800f59c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f59e:	07d9      	lsls	r1, r3, #31
 800f5a0:	d405      	bmi.n	800f5ae <_vfiprintf_r+0x1fe>
 800f5a2:	89ab      	ldrh	r3, [r5, #12]
 800f5a4:	059a      	lsls	r2, r3, #22
 800f5a6:	d402      	bmi.n	800f5ae <_vfiprintf_r+0x1fe>
 800f5a8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f5aa:	f7fe fa9f 	bl	800daec <__retarget_lock_release_recursive>
 800f5ae:	89ab      	ldrh	r3, [r5, #12]
 800f5b0:	065b      	lsls	r3, r3, #25
 800f5b2:	f53f af1f 	bmi.w	800f3f4 <_vfiprintf_r+0x44>
 800f5b6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f5b8:	e71e      	b.n	800f3f8 <_vfiprintf_r+0x48>
 800f5ba:	ab03      	add	r3, sp, #12
 800f5bc:	9300      	str	r3, [sp, #0]
 800f5be:	462a      	mov	r2, r5
 800f5c0:	4b05      	ldr	r3, [pc, #20]	@ (800f5d8 <_vfiprintf_r+0x228>)
 800f5c2:	a904      	add	r1, sp, #16
 800f5c4:	4630      	mov	r0, r6
 800f5c6:	f7fd fe5f 	bl	800d288 <_printf_i>
 800f5ca:	e7e4      	b.n	800f596 <_vfiprintf_r+0x1e6>
 800f5cc:	08010e20 	.word	0x08010e20
 800f5d0:	08010e2a 	.word	0x08010e2a
 800f5d4:	0800cd59 	.word	0x0800cd59
 800f5d8:	0800f38b 	.word	0x0800f38b
 800f5dc:	08010e26 	.word	0x08010e26

0800f5e0 <__sflush_r>:
 800f5e0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f5e4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f5e8:	0716      	lsls	r6, r2, #28
 800f5ea:	4605      	mov	r5, r0
 800f5ec:	460c      	mov	r4, r1
 800f5ee:	d454      	bmi.n	800f69a <__sflush_r+0xba>
 800f5f0:	684b      	ldr	r3, [r1, #4]
 800f5f2:	2b00      	cmp	r3, #0
 800f5f4:	dc02      	bgt.n	800f5fc <__sflush_r+0x1c>
 800f5f6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800f5f8:	2b00      	cmp	r3, #0
 800f5fa:	dd48      	ble.n	800f68e <__sflush_r+0xae>
 800f5fc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f5fe:	2e00      	cmp	r6, #0
 800f600:	d045      	beq.n	800f68e <__sflush_r+0xae>
 800f602:	2300      	movs	r3, #0
 800f604:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800f608:	682f      	ldr	r7, [r5, #0]
 800f60a:	6a21      	ldr	r1, [r4, #32]
 800f60c:	602b      	str	r3, [r5, #0]
 800f60e:	d030      	beq.n	800f672 <__sflush_r+0x92>
 800f610:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800f612:	89a3      	ldrh	r3, [r4, #12]
 800f614:	0759      	lsls	r1, r3, #29
 800f616:	d505      	bpl.n	800f624 <__sflush_r+0x44>
 800f618:	6863      	ldr	r3, [r4, #4]
 800f61a:	1ad2      	subs	r2, r2, r3
 800f61c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800f61e:	b10b      	cbz	r3, 800f624 <__sflush_r+0x44>
 800f620:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800f622:	1ad2      	subs	r2, r2, r3
 800f624:	2300      	movs	r3, #0
 800f626:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f628:	6a21      	ldr	r1, [r4, #32]
 800f62a:	4628      	mov	r0, r5
 800f62c:	47b0      	blx	r6
 800f62e:	1c43      	adds	r3, r0, #1
 800f630:	89a3      	ldrh	r3, [r4, #12]
 800f632:	d106      	bne.n	800f642 <__sflush_r+0x62>
 800f634:	6829      	ldr	r1, [r5, #0]
 800f636:	291d      	cmp	r1, #29
 800f638:	d82b      	bhi.n	800f692 <__sflush_r+0xb2>
 800f63a:	4a2a      	ldr	r2, [pc, #168]	@ (800f6e4 <__sflush_r+0x104>)
 800f63c:	410a      	asrs	r2, r1
 800f63e:	07d6      	lsls	r6, r2, #31
 800f640:	d427      	bmi.n	800f692 <__sflush_r+0xb2>
 800f642:	2200      	movs	r2, #0
 800f644:	6062      	str	r2, [r4, #4]
 800f646:	04d9      	lsls	r1, r3, #19
 800f648:	6922      	ldr	r2, [r4, #16]
 800f64a:	6022      	str	r2, [r4, #0]
 800f64c:	d504      	bpl.n	800f658 <__sflush_r+0x78>
 800f64e:	1c42      	adds	r2, r0, #1
 800f650:	d101      	bne.n	800f656 <__sflush_r+0x76>
 800f652:	682b      	ldr	r3, [r5, #0]
 800f654:	b903      	cbnz	r3, 800f658 <__sflush_r+0x78>
 800f656:	6560      	str	r0, [r4, #84]	@ 0x54
 800f658:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f65a:	602f      	str	r7, [r5, #0]
 800f65c:	b1b9      	cbz	r1, 800f68e <__sflush_r+0xae>
 800f65e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f662:	4299      	cmp	r1, r3
 800f664:	d002      	beq.n	800f66c <__sflush_r+0x8c>
 800f666:	4628      	mov	r0, r5
 800f668:	f7ff f89e 	bl	800e7a8 <_free_r>
 800f66c:	2300      	movs	r3, #0
 800f66e:	6363      	str	r3, [r4, #52]	@ 0x34
 800f670:	e00d      	b.n	800f68e <__sflush_r+0xae>
 800f672:	2301      	movs	r3, #1
 800f674:	4628      	mov	r0, r5
 800f676:	47b0      	blx	r6
 800f678:	4602      	mov	r2, r0
 800f67a:	1c50      	adds	r0, r2, #1
 800f67c:	d1c9      	bne.n	800f612 <__sflush_r+0x32>
 800f67e:	682b      	ldr	r3, [r5, #0]
 800f680:	2b00      	cmp	r3, #0
 800f682:	d0c6      	beq.n	800f612 <__sflush_r+0x32>
 800f684:	2b1d      	cmp	r3, #29
 800f686:	d001      	beq.n	800f68c <__sflush_r+0xac>
 800f688:	2b16      	cmp	r3, #22
 800f68a:	d11e      	bne.n	800f6ca <__sflush_r+0xea>
 800f68c:	602f      	str	r7, [r5, #0]
 800f68e:	2000      	movs	r0, #0
 800f690:	e022      	b.n	800f6d8 <__sflush_r+0xf8>
 800f692:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f696:	b21b      	sxth	r3, r3
 800f698:	e01b      	b.n	800f6d2 <__sflush_r+0xf2>
 800f69a:	690f      	ldr	r7, [r1, #16]
 800f69c:	2f00      	cmp	r7, #0
 800f69e:	d0f6      	beq.n	800f68e <__sflush_r+0xae>
 800f6a0:	0793      	lsls	r3, r2, #30
 800f6a2:	680e      	ldr	r6, [r1, #0]
 800f6a4:	bf08      	it	eq
 800f6a6:	694b      	ldreq	r3, [r1, #20]
 800f6a8:	600f      	str	r7, [r1, #0]
 800f6aa:	bf18      	it	ne
 800f6ac:	2300      	movne	r3, #0
 800f6ae:	eba6 0807 	sub.w	r8, r6, r7
 800f6b2:	608b      	str	r3, [r1, #8]
 800f6b4:	f1b8 0f00 	cmp.w	r8, #0
 800f6b8:	dde9      	ble.n	800f68e <__sflush_r+0xae>
 800f6ba:	6a21      	ldr	r1, [r4, #32]
 800f6bc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800f6be:	4643      	mov	r3, r8
 800f6c0:	463a      	mov	r2, r7
 800f6c2:	4628      	mov	r0, r5
 800f6c4:	47b0      	blx	r6
 800f6c6:	2800      	cmp	r0, #0
 800f6c8:	dc08      	bgt.n	800f6dc <__sflush_r+0xfc>
 800f6ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f6ce:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f6d2:	81a3      	strh	r3, [r4, #12]
 800f6d4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f6d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f6dc:	4407      	add	r7, r0
 800f6de:	eba8 0800 	sub.w	r8, r8, r0
 800f6e2:	e7e7      	b.n	800f6b4 <__sflush_r+0xd4>
 800f6e4:	dfbffffe 	.word	0xdfbffffe

0800f6e8 <_fflush_r>:
 800f6e8:	b538      	push	{r3, r4, r5, lr}
 800f6ea:	690b      	ldr	r3, [r1, #16]
 800f6ec:	4605      	mov	r5, r0
 800f6ee:	460c      	mov	r4, r1
 800f6f0:	b913      	cbnz	r3, 800f6f8 <_fflush_r+0x10>
 800f6f2:	2500      	movs	r5, #0
 800f6f4:	4628      	mov	r0, r5
 800f6f6:	bd38      	pop	{r3, r4, r5, pc}
 800f6f8:	b118      	cbz	r0, 800f702 <_fflush_r+0x1a>
 800f6fa:	6a03      	ldr	r3, [r0, #32]
 800f6fc:	b90b      	cbnz	r3, 800f702 <_fflush_r+0x1a>
 800f6fe:	f7fd ff6f 	bl	800d5e0 <__sinit>
 800f702:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f706:	2b00      	cmp	r3, #0
 800f708:	d0f3      	beq.n	800f6f2 <_fflush_r+0xa>
 800f70a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800f70c:	07d0      	lsls	r0, r2, #31
 800f70e:	d404      	bmi.n	800f71a <_fflush_r+0x32>
 800f710:	0599      	lsls	r1, r3, #22
 800f712:	d402      	bmi.n	800f71a <_fflush_r+0x32>
 800f714:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f716:	f7fe f9e8 	bl	800daea <__retarget_lock_acquire_recursive>
 800f71a:	4628      	mov	r0, r5
 800f71c:	4621      	mov	r1, r4
 800f71e:	f7ff ff5f 	bl	800f5e0 <__sflush_r>
 800f722:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f724:	07da      	lsls	r2, r3, #31
 800f726:	4605      	mov	r5, r0
 800f728:	d4e4      	bmi.n	800f6f4 <_fflush_r+0xc>
 800f72a:	89a3      	ldrh	r3, [r4, #12]
 800f72c:	059b      	lsls	r3, r3, #22
 800f72e:	d4e1      	bmi.n	800f6f4 <_fflush_r+0xc>
 800f730:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f732:	f7fe f9db 	bl	800daec <__retarget_lock_release_recursive>
 800f736:	e7dd      	b.n	800f6f4 <_fflush_r+0xc>

0800f738 <__swhatbuf_r>:
 800f738:	b570      	push	{r4, r5, r6, lr}
 800f73a:	460c      	mov	r4, r1
 800f73c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f740:	2900      	cmp	r1, #0
 800f742:	b096      	sub	sp, #88	@ 0x58
 800f744:	4615      	mov	r5, r2
 800f746:	461e      	mov	r6, r3
 800f748:	da0d      	bge.n	800f766 <__swhatbuf_r+0x2e>
 800f74a:	89a3      	ldrh	r3, [r4, #12]
 800f74c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800f750:	f04f 0100 	mov.w	r1, #0
 800f754:	bf14      	ite	ne
 800f756:	2340      	movne	r3, #64	@ 0x40
 800f758:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800f75c:	2000      	movs	r0, #0
 800f75e:	6031      	str	r1, [r6, #0]
 800f760:	602b      	str	r3, [r5, #0]
 800f762:	b016      	add	sp, #88	@ 0x58
 800f764:	bd70      	pop	{r4, r5, r6, pc}
 800f766:	466a      	mov	r2, sp
 800f768:	f000 f862 	bl	800f830 <_fstat_r>
 800f76c:	2800      	cmp	r0, #0
 800f76e:	dbec      	blt.n	800f74a <__swhatbuf_r+0x12>
 800f770:	9901      	ldr	r1, [sp, #4]
 800f772:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800f776:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800f77a:	4259      	negs	r1, r3
 800f77c:	4159      	adcs	r1, r3
 800f77e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f782:	e7eb      	b.n	800f75c <__swhatbuf_r+0x24>

0800f784 <__smakebuf_r>:
 800f784:	898b      	ldrh	r3, [r1, #12]
 800f786:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f788:	079d      	lsls	r5, r3, #30
 800f78a:	4606      	mov	r6, r0
 800f78c:	460c      	mov	r4, r1
 800f78e:	d507      	bpl.n	800f7a0 <__smakebuf_r+0x1c>
 800f790:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800f794:	6023      	str	r3, [r4, #0]
 800f796:	6123      	str	r3, [r4, #16]
 800f798:	2301      	movs	r3, #1
 800f79a:	6163      	str	r3, [r4, #20]
 800f79c:	b003      	add	sp, #12
 800f79e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f7a0:	ab01      	add	r3, sp, #4
 800f7a2:	466a      	mov	r2, sp
 800f7a4:	f7ff ffc8 	bl	800f738 <__swhatbuf_r>
 800f7a8:	9f00      	ldr	r7, [sp, #0]
 800f7aa:	4605      	mov	r5, r0
 800f7ac:	4639      	mov	r1, r7
 800f7ae:	4630      	mov	r0, r6
 800f7b0:	f7ff f86e 	bl	800e890 <_malloc_r>
 800f7b4:	b948      	cbnz	r0, 800f7ca <__smakebuf_r+0x46>
 800f7b6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f7ba:	059a      	lsls	r2, r3, #22
 800f7bc:	d4ee      	bmi.n	800f79c <__smakebuf_r+0x18>
 800f7be:	f023 0303 	bic.w	r3, r3, #3
 800f7c2:	f043 0302 	orr.w	r3, r3, #2
 800f7c6:	81a3      	strh	r3, [r4, #12]
 800f7c8:	e7e2      	b.n	800f790 <__smakebuf_r+0xc>
 800f7ca:	89a3      	ldrh	r3, [r4, #12]
 800f7cc:	6020      	str	r0, [r4, #0]
 800f7ce:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f7d2:	81a3      	strh	r3, [r4, #12]
 800f7d4:	9b01      	ldr	r3, [sp, #4]
 800f7d6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800f7da:	b15b      	cbz	r3, 800f7f4 <__smakebuf_r+0x70>
 800f7dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f7e0:	4630      	mov	r0, r6
 800f7e2:	f000 f837 	bl	800f854 <_isatty_r>
 800f7e6:	b128      	cbz	r0, 800f7f4 <__smakebuf_r+0x70>
 800f7e8:	89a3      	ldrh	r3, [r4, #12]
 800f7ea:	f023 0303 	bic.w	r3, r3, #3
 800f7ee:	f043 0301 	orr.w	r3, r3, #1
 800f7f2:	81a3      	strh	r3, [r4, #12]
 800f7f4:	89a3      	ldrh	r3, [r4, #12]
 800f7f6:	431d      	orrs	r5, r3
 800f7f8:	81a5      	strh	r5, [r4, #12]
 800f7fa:	e7cf      	b.n	800f79c <__smakebuf_r+0x18>

0800f7fc <memmove>:
 800f7fc:	4288      	cmp	r0, r1
 800f7fe:	b510      	push	{r4, lr}
 800f800:	eb01 0402 	add.w	r4, r1, r2
 800f804:	d902      	bls.n	800f80c <memmove+0x10>
 800f806:	4284      	cmp	r4, r0
 800f808:	4623      	mov	r3, r4
 800f80a:	d807      	bhi.n	800f81c <memmove+0x20>
 800f80c:	1e43      	subs	r3, r0, #1
 800f80e:	42a1      	cmp	r1, r4
 800f810:	d008      	beq.n	800f824 <memmove+0x28>
 800f812:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f816:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f81a:	e7f8      	b.n	800f80e <memmove+0x12>
 800f81c:	4402      	add	r2, r0
 800f81e:	4601      	mov	r1, r0
 800f820:	428a      	cmp	r2, r1
 800f822:	d100      	bne.n	800f826 <memmove+0x2a>
 800f824:	bd10      	pop	{r4, pc}
 800f826:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f82a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f82e:	e7f7      	b.n	800f820 <memmove+0x24>

0800f830 <_fstat_r>:
 800f830:	b538      	push	{r3, r4, r5, lr}
 800f832:	4d07      	ldr	r5, [pc, #28]	@ (800f850 <_fstat_r+0x20>)
 800f834:	2300      	movs	r3, #0
 800f836:	4604      	mov	r4, r0
 800f838:	4608      	mov	r0, r1
 800f83a:	4611      	mov	r1, r2
 800f83c:	602b      	str	r3, [r5, #0]
 800f83e:	f7f4 f811 	bl	8003864 <_fstat>
 800f842:	1c43      	adds	r3, r0, #1
 800f844:	d102      	bne.n	800f84c <_fstat_r+0x1c>
 800f846:	682b      	ldr	r3, [r5, #0]
 800f848:	b103      	cbz	r3, 800f84c <_fstat_r+0x1c>
 800f84a:	6023      	str	r3, [r4, #0]
 800f84c:	bd38      	pop	{r3, r4, r5, pc}
 800f84e:	bf00      	nop
 800f850:	2000528c 	.word	0x2000528c

0800f854 <_isatty_r>:
 800f854:	b538      	push	{r3, r4, r5, lr}
 800f856:	4d06      	ldr	r5, [pc, #24]	@ (800f870 <_isatty_r+0x1c>)
 800f858:	2300      	movs	r3, #0
 800f85a:	4604      	mov	r4, r0
 800f85c:	4608      	mov	r0, r1
 800f85e:	602b      	str	r3, [r5, #0]
 800f860:	f7f4 f810 	bl	8003884 <_isatty>
 800f864:	1c43      	adds	r3, r0, #1
 800f866:	d102      	bne.n	800f86e <_isatty_r+0x1a>
 800f868:	682b      	ldr	r3, [r5, #0]
 800f86a:	b103      	cbz	r3, 800f86e <_isatty_r+0x1a>
 800f86c:	6023      	str	r3, [r4, #0]
 800f86e:	bd38      	pop	{r3, r4, r5, pc}
 800f870:	2000528c 	.word	0x2000528c

0800f874 <_sbrk_r>:
 800f874:	b538      	push	{r3, r4, r5, lr}
 800f876:	4d06      	ldr	r5, [pc, #24]	@ (800f890 <_sbrk_r+0x1c>)
 800f878:	2300      	movs	r3, #0
 800f87a:	4604      	mov	r4, r0
 800f87c:	4608      	mov	r0, r1
 800f87e:	602b      	str	r3, [r5, #0]
 800f880:	f7f4 f818 	bl	80038b4 <_sbrk>
 800f884:	1c43      	adds	r3, r0, #1
 800f886:	d102      	bne.n	800f88e <_sbrk_r+0x1a>
 800f888:	682b      	ldr	r3, [r5, #0]
 800f88a:	b103      	cbz	r3, 800f88e <_sbrk_r+0x1a>
 800f88c:	6023      	str	r3, [r4, #0]
 800f88e:	bd38      	pop	{r3, r4, r5, pc}
 800f890:	2000528c 	.word	0x2000528c

0800f894 <__assert_func>:
 800f894:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f896:	4614      	mov	r4, r2
 800f898:	461a      	mov	r2, r3
 800f89a:	4b09      	ldr	r3, [pc, #36]	@ (800f8c0 <__assert_func+0x2c>)
 800f89c:	681b      	ldr	r3, [r3, #0]
 800f89e:	4605      	mov	r5, r0
 800f8a0:	68d8      	ldr	r0, [r3, #12]
 800f8a2:	b954      	cbnz	r4, 800f8ba <__assert_func+0x26>
 800f8a4:	4b07      	ldr	r3, [pc, #28]	@ (800f8c4 <__assert_func+0x30>)
 800f8a6:	461c      	mov	r4, r3
 800f8a8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f8ac:	9100      	str	r1, [sp, #0]
 800f8ae:	462b      	mov	r3, r5
 800f8b0:	4905      	ldr	r1, [pc, #20]	@ (800f8c8 <__assert_func+0x34>)
 800f8b2:	f000 f86f 	bl	800f994 <fiprintf>
 800f8b6:	f000 f87f 	bl	800f9b8 <abort>
 800f8ba:	4b04      	ldr	r3, [pc, #16]	@ (800f8cc <__assert_func+0x38>)
 800f8bc:	e7f4      	b.n	800f8a8 <__assert_func+0x14>
 800f8be:	bf00      	nop
 800f8c0:	200000b8 	.word	0x200000b8
 800f8c4:	08010e76 	.word	0x08010e76
 800f8c8:	08010e48 	.word	0x08010e48
 800f8cc:	08010e3b 	.word	0x08010e3b

0800f8d0 <_calloc_r>:
 800f8d0:	b570      	push	{r4, r5, r6, lr}
 800f8d2:	fba1 5402 	umull	r5, r4, r1, r2
 800f8d6:	b93c      	cbnz	r4, 800f8e8 <_calloc_r+0x18>
 800f8d8:	4629      	mov	r1, r5
 800f8da:	f7fe ffd9 	bl	800e890 <_malloc_r>
 800f8de:	4606      	mov	r6, r0
 800f8e0:	b928      	cbnz	r0, 800f8ee <_calloc_r+0x1e>
 800f8e2:	2600      	movs	r6, #0
 800f8e4:	4630      	mov	r0, r6
 800f8e6:	bd70      	pop	{r4, r5, r6, pc}
 800f8e8:	220c      	movs	r2, #12
 800f8ea:	6002      	str	r2, [r0, #0]
 800f8ec:	e7f9      	b.n	800f8e2 <_calloc_r+0x12>
 800f8ee:	462a      	mov	r2, r5
 800f8f0:	4621      	mov	r1, r4
 800f8f2:	f7fe f827 	bl	800d944 <memset>
 800f8f6:	e7f5      	b.n	800f8e4 <_calloc_r+0x14>

0800f8f8 <__ascii_mbtowc>:
 800f8f8:	b082      	sub	sp, #8
 800f8fa:	b901      	cbnz	r1, 800f8fe <__ascii_mbtowc+0x6>
 800f8fc:	a901      	add	r1, sp, #4
 800f8fe:	b142      	cbz	r2, 800f912 <__ascii_mbtowc+0x1a>
 800f900:	b14b      	cbz	r3, 800f916 <__ascii_mbtowc+0x1e>
 800f902:	7813      	ldrb	r3, [r2, #0]
 800f904:	600b      	str	r3, [r1, #0]
 800f906:	7812      	ldrb	r2, [r2, #0]
 800f908:	1e10      	subs	r0, r2, #0
 800f90a:	bf18      	it	ne
 800f90c:	2001      	movne	r0, #1
 800f90e:	b002      	add	sp, #8
 800f910:	4770      	bx	lr
 800f912:	4610      	mov	r0, r2
 800f914:	e7fb      	b.n	800f90e <__ascii_mbtowc+0x16>
 800f916:	f06f 0001 	mvn.w	r0, #1
 800f91a:	e7f8      	b.n	800f90e <__ascii_mbtowc+0x16>

0800f91c <_realloc_r>:
 800f91c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f920:	4680      	mov	r8, r0
 800f922:	4615      	mov	r5, r2
 800f924:	460c      	mov	r4, r1
 800f926:	b921      	cbnz	r1, 800f932 <_realloc_r+0x16>
 800f928:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f92c:	4611      	mov	r1, r2
 800f92e:	f7fe bfaf 	b.w	800e890 <_malloc_r>
 800f932:	b92a      	cbnz	r2, 800f940 <_realloc_r+0x24>
 800f934:	f7fe ff38 	bl	800e7a8 <_free_r>
 800f938:	2400      	movs	r4, #0
 800f93a:	4620      	mov	r0, r4
 800f93c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f940:	f000 f841 	bl	800f9c6 <_malloc_usable_size_r>
 800f944:	4285      	cmp	r5, r0
 800f946:	4606      	mov	r6, r0
 800f948:	d802      	bhi.n	800f950 <_realloc_r+0x34>
 800f94a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800f94e:	d8f4      	bhi.n	800f93a <_realloc_r+0x1e>
 800f950:	4629      	mov	r1, r5
 800f952:	4640      	mov	r0, r8
 800f954:	f7fe ff9c 	bl	800e890 <_malloc_r>
 800f958:	4607      	mov	r7, r0
 800f95a:	2800      	cmp	r0, #0
 800f95c:	d0ec      	beq.n	800f938 <_realloc_r+0x1c>
 800f95e:	42b5      	cmp	r5, r6
 800f960:	462a      	mov	r2, r5
 800f962:	4621      	mov	r1, r4
 800f964:	bf28      	it	cs
 800f966:	4632      	movcs	r2, r6
 800f968:	f7fe f8c1 	bl	800daee <memcpy>
 800f96c:	4621      	mov	r1, r4
 800f96e:	4640      	mov	r0, r8
 800f970:	f7fe ff1a 	bl	800e7a8 <_free_r>
 800f974:	463c      	mov	r4, r7
 800f976:	e7e0      	b.n	800f93a <_realloc_r+0x1e>

0800f978 <__ascii_wctomb>:
 800f978:	4603      	mov	r3, r0
 800f97a:	4608      	mov	r0, r1
 800f97c:	b141      	cbz	r1, 800f990 <__ascii_wctomb+0x18>
 800f97e:	2aff      	cmp	r2, #255	@ 0xff
 800f980:	d904      	bls.n	800f98c <__ascii_wctomb+0x14>
 800f982:	228a      	movs	r2, #138	@ 0x8a
 800f984:	601a      	str	r2, [r3, #0]
 800f986:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f98a:	4770      	bx	lr
 800f98c:	700a      	strb	r2, [r1, #0]
 800f98e:	2001      	movs	r0, #1
 800f990:	4770      	bx	lr
	...

0800f994 <fiprintf>:
 800f994:	b40e      	push	{r1, r2, r3}
 800f996:	b503      	push	{r0, r1, lr}
 800f998:	4601      	mov	r1, r0
 800f99a:	ab03      	add	r3, sp, #12
 800f99c:	4805      	ldr	r0, [pc, #20]	@ (800f9b4 <fiprintf+0x20>)
 800f99e:	f853 2b04 	ldr.w	r2, [r3], #4
 800f9a2:	6800      	ldr	r0, [r0, #0]
 800f9a4:	9301      	str	r3, [sp, #4]
 800f9a6:	f7ff fd03 	bl	800f3b0 <_vfiprintf_r>
 800f9aa:	b002      	add	sp, #8
 800f9ac:	f85d eb04 	ldr.w	lr, [sp], #4
 800f9b0:	b003      	add	sp, #12
 800f9b2:	4770      	bx	lr
 800f9b4:	200000b8 	.word	0x200000b8

0800f9b8 <abort>:
 800f9b8:	b508      	push	{r3, lr}
 800f9ba:	2006      	movs	r0, #6
 800f9bc:	f000 f834 	bl	800fa28 <raise>
 800f9c0:	2001      	movs	r0, #1
 800f9c2:	f7f3 feff 	bl	80037c4 <_exit>

0800f9c6 <_malloc_usable_size_r>:
 800f9c6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f9ca:	1f18      	subs	r0, r3, #4
 800f9cc:	2b00      	cmp	r3, #0
 800f9ce:	bfbc      	itt	lt
 800f9d0:	580b      	ldrlt	r3, [r1, r0]
 800f9d2:	18c0      	addlt	r0, r0, r3
 800f9d4:	4770      	bx	lr

0800f9d6 <_raise_r>:
 800f9d6:	291f      	cmp	r1, #31
 800f9d8:	b538      	push	{r3, r4, r5, lr}
 800f9da:	4605      	mov	r5, r0
 800f9dc:	460c      	mov	r4, r1
 800f9de:	d904      	bls.n	800f9ea <_raise_r+0x14>
 800f9e0:	2316      	movs	r3, #22
 800f9e2:	6003      	str	r3, [r0, #0]
 800f9e4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f9e8:	bd38      	pop	{r3, r4, r5, pc}
 800f9ea:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800f9ec:	b112      	cbz	r2, 800f9f4 <_raise_r+0x1e>
 800f9ee:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f9f2:	b94b      	cbnz	r3, 800fa08 <_raise_r+0x32>
 800f9f4:	4628      	mov	r0, r5
 800f9f6:	f000 f831 	bl	800fa5c <_getpid_r>
 800f9fa:	4622      	mov	r2, r4
 800f9fc:	4601      	mov	r1, r0
 800f9fe:	4628      	mov	r0, r5
 800fa00:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fa04:	f000 b818 	b.w	800fa38 <_kill_r>
 800fa08:	2b01      	cmp	r3, #1
 800fa0a:	d00a      	beq.n	800fa22 <_raise_r+0x4c>
 800fa0c:	1c59      	adds	r1, r3, #1
 800fa0e:	d103      	bne.n	800fa18 <_raise_r+0x42>
 800fa10:	2316      	movs	r3, #22
 800fa12:	6003      	str	r3, [r0, #0]
 800fa14:	2001      	movs	r0, #1
 800fa16:	e7e7      	b.n	800f9e8 <_raise_r+0x12>
 800fa18:	2100      	movs	r1, #0
 800fa1a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800fa1e:	4620      	mov	r0, r4
 800fa20:	4798      	blx	r3
 800fa22:	2000      	movs	r0, #0
 800fa24:	e7e0      	b.n	800f9e8 <_raise_r+0x12>
	...

0800fa28 <raise>:
 800fa28:	4b02      	ldr	r3, [pc, #8]	@ (800fa34 <raise+0xc>)
 800fa2a:	4601      	mov	r1, r0
 800fa2c:	6818      	ldr	r0, [r3, #0]
 800fa2e:	f7ff bfd2 	b.w	800f9d6 <_raise_r>
 800fa32:	bf00      	nop
 800fa34:	200000b8 	.word	0x200000b8

0800fa38 <_kill_r>:
 800fa38:	b538      	push	{r3, r4, r5, lr}
 800fa3a:	4d07      	ldr	r5, [pc, #28]	@ (800fa58 <_kill_r+0x20>)
 800fa3c:	2300      	movs	r3, #0
 800fa3e:	4604      	mov	r4, r0
 800fa40:	4608      	mov	r0, r1
 800fa42:	4611      	mov	r1, r2
 800fa44:	602b      	str	r3, [r5, #0]
 800fa46:	f7f3 fead 	bl	80037a4 <_kill>
 800fa4a:	1c43      	adds	r3, r0, #1
 800fa4c:	d102      	bne.n	800fa54 <_kill_r+0x1c>
 800fa4e:	682b      	ldr	r3, [r5, #0]
 800fa50:	b103      	cbz	r3, 800fa54 <_kill_r+0x1c>
 800fa52:	6023      	str	r3, [r4, #0]
 800fa54:	bd38      	pop	{r3, r4, r5, pc}
 800fa56:	bf00      	nop
 800fa58:	2000528c 	.word	0x2000528c

0800fa5c <_getpid_r>:
 800fa5c:	f7f3 be9a 	b.w	8003794 <_getpid>

0800fa60 <atan2>:
 800fa60:	f000 baaa 	b.w	800ffb8 <__ieee754_atan2>

0800fa64 <sqrt>:
 800fa64:	b538      	push	{r3, r4, r5, lr}
 800fa66:	ed2d 8b02 	vpush	{d8}
 800fa6a:	ec55 4b10 	vmov	r4, r5, d0
 800fa6e:	f000 f9c7 	bl	800fe00 <__ieee754_sqrt>
 800fa72:	4622      	mov	r2, r4
 800fa74:	462b      	mov	r3, r5
 800fa76:	4620      	mov	r0, r4
 800fa78:	4629      	mov	r1, r5
 800fa7a:	eeb0 8a40 	vmov.f32	s16, s0
 800fa7e:	eef0 8a60 	vmov.f32	s17, s1
 800fa82:	f7f1 f853 	bl	8000b2c <__aeabi_dcmpun>
 800fa86:	b990      	cbnz	r0, 800faae <sqrt+0x4a>
 800fa88:	2200      	movs	r2, #0
 800fa8a:	2300      	movs	r3, #0
 800fa8c:	4620      	mov	r0, r4
 800fa8e:	4629      	mov	r1, r5
 800fa90:	f7f1 f824 	bl	8000adc <__aeabi_dcmplt>
 800fa94:	b158      	cbz	r0, 800faae <sqrt+0x4a>
 800fa96:	f7fd fffd 	bl	800da94 <__errno>
 800fa9a:	2321      	movs	r3, #33	@ 0x21
 800fa9c:	6003      	str	r3, [r0, #0]
 800fa9e:	2200      	movs	r2, #0
 800faa0:	2300      	movs	r3, #0
 800faa2:	4610      	mov	r0, r2
 800faa4:	4619      	mov	r1, r3
 800faa6:	f7f0 fed1 	bl	800084c <__aeabi_ddiv>
 800faaa:	ec41 0b18 	vmov	d8, r0, r1
 800faae:	eeb0 0a48 	vmov.f32	s0, s16
 800fab2:	eef0 0a68 	vmov.f32	s1, s17
 800fab6:	ecbd 8b02 	vpop	{d8}
 800faba:	bd38      	pop	{r3, r4, r5, pc}
 800fabc:	0000      	movs	r0, r0
	...

0800fac0 <atan>:
 800fac0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fac4:	ec55 4b10 	vmov	r4, r5, d0
 800fac8:	4bbf      	ldr	r3, [pc, #764]	@ (800fdc8 <atan+0x308>)
 800faca:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 800face:	429e      	cmp	r6, r3
 800fad0:	46ab      	mov	fp, r5
 800fad2:	d918      	bls.n	800fb06 <atan+0x46>
 800fad4:	4bbd      	ldr	r3, [pc, #756]	@ (800fdcc <atan+0x30c>)
 800fad6:	429e      	cmp	r6, r3
 800fad8:	d801      	bhi.n	800fade <atan+0x1e>
 800fada:	d109      	bne.n	800faf0 <atan+0x30>
 800fadc:	b144      	cbz	r4, 800faf0 <atan+0x30>
 800fade:	4622      	mov	r2, r4
 800fae0:	462b      	mov	r3, r5
 800fae2:	4620      	mov	r0, r4
 800fae4:	4629      	mov	r1, r5
 800fae6:	f7f0 fbd1 	bl	800028c <__adddf3>
 800faea:	4604      	mov	r4, r0
 800faec:	460d      	mov	r5, r1
 800faee:	e006      	b.n	800fafe <atan+0x3e>
 800faf0:	f1bb 0f00 	cmp.w	fp, #0
 800faf4:	f340 812b 	ble.w	800fd4e <atan+0x28e>
 800faf8:	a597      	add	r5, pc, #604	@ (adr r5, 800fd58 <atan+0x298>)
 800fafa:	e9d5 4500 	ldrd	r4, r5, [r5]
 800fafe:	ec45 4b10 	vmov	d0, r4, r5
 800fb02:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fb06:	4bb2      	ldr	r3, [pc, #712]	@ (800fdd0 <atan+0x310>)
 800fb08:	429e      	cmp	r6, r3
 800fb0a:	d813      	bhi.n	800fb34 <atan+0x74>
 800fb0c:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 800fb10:	429e      	cmp	r6, r3
 800fb12:	d80c      	bhi.n	800fb2e <atan+0x6e>
 800fb14:	a392      	add	r3, pc, #584	@ (adr r3, 800fd60 <atan+0x2a0>)
 800fb16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fb1a:	4620      	mov	r0, r4
 800fb1c:	4629      	mov	r1, r5
 800fb1e:	f7f0 fbb5 	bl	800028c <__adddf3>
 800fb22:	4bac      	ldr	r3, [pc, #688]	@ (800fdd4 <atan+0x314>)
 800fb24:	2200      	movs	r2, #0
 800fb26:	f7f0 fff7 	bl	8000b18 <__aeabi_dcmpgt>
 800fb2a:	2800      	cmp	r0, #0
 800fb2c:	d1e7      	bne.n	800fafe <atan+0x3e>
 800fb2e:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800fb32:	e029      	b.n	800fb88 <atan+0xc8>
 800fb34:	f000 f95c 	bl	800fdf0 <fabs>
 800fb38:	4ba7      	ldr	r3, [pc, #668]	@ (800fdd8 <atan+0x318>)
 800fb3a:	429e      	cmp	r6, r3
 800fb3c:	ec55 4b10 	vmov	r4, r5, d0
 800fb40:	f200 80bc 	bhi.w	800fcbc <atan+0x1fc>
 800fb44:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 800fb48:	429e      	cmp	r6, r3
 800fb4a:	f200 809e 	bhi.w	800fc8a <atan+0x1ca>
 800fb4e:	4622      	mov	r2, r4
 800fb50:	462b      	mov	r3, r5
 800fb52:	4620      	mov	r0, r4
 800fb54:	4629      	mov	r1, r5
 800fb56:	f7f0 fb99 	bl	800028c <__adddf3>
 800fb5a:	4b9e      	ldr	r3, [pc, #632]	@ (800fdd4 <atan+0x314>)
 800fb5c:	2200      	movs	r2, #0
 800fb5e:	f7f0 fb93 	bl	8000288 <__aeabi_dsub>
 800fb62:	2200      	movs	r2, #0
 800fb64:	4606      	mov	r6, r0
 800fb66:	460f      	mov	r7, r1
 800fb68:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800fb6c:	4620      	mov	r0, r4
 800fb6e:	4629      	mov	r1, r5
 800fb70:	f7f0 fb8c 	bl	800028c <__adddf3>
 800fb74:	4602      	mov	r2, r0
 800fb76:	460b      	mov	r3, r1
 800fb78:	4630      	mov	r0, r6
 800fb7a:	4639      	mov	r1, r7
 800fb7c:	f7f0 fe66 	bl	800084c <__aeabi_ddiv>
 800fb80:	f04f 0a00 	mov.w	sl, #0
 800fb84:	4604      	mov	r4, r0
 800fb86:	460d      	mov	r5, r1
 800fb88:	4622      	mov	r2, r4
 800fb8a:	462b      	mov	r3, r5
 800fb8c:	4620      	mov	r0, r4
 800fb8e:	4629      	mov	r1, r5
 800fb90:	f7f0 fd32 	bl	80005f8 <__aeabi_dmul>
 800fb94:	4602      	mov	r2, r0
 800fb96:	460b      	mov	r3, r1
 800fb98:	4680      	mov	r8, r0
 800fb9a:	4689      	mov	r9, r1
 800fb9c:	f7f0 fd2c 	bl	80005f8 <__aeabi_dmul>
 800fba0:	a371      	add	r3, pc, #452	@ (adr r3, 800fd68 <atan+0x2a8>)
 800fba2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fba6:	4606      	mov	r6, r0
 800fba8:	460f      	mov	r7, r1
 800fbaa:	f7f0 fd25 	bl	80005f8 <__aeabi_dmul>
 800fbae:	a370      	add	r3, pc, #448	@ (adr r3, 800fd70 <atan+0x2b0>)
 800fbb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbb4:	f7f0 fb6a 	bl	800028c <__adddf3>
 800fbb8:	4632      	mov	r2, r6
 800fbba:	463b      	mov	r3, r7
 800fbbc:	f7f0 fd1c 	bl	80005f8 <__aeabi_dmul>
 800fbc0:	a36d      	add	r3, pc, #436	@ (adr r3, 800fd78 <atan+0x2b8>)
 800fbc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbc6:	f7f0 fb61 	bl	800028c <__adddf3>
 800fbca:	4632      	mov	r2, r6
 800fbcc:	463b      	mov	r3, r7
 800fbce:	f7f0 fd13 	bl	80005f8 <__aeabi_dmul>
 800fbd2:	a36b      	add	r3, pc, #428	@ (adr r3, 800fd80 <atan+0x2c0>)
 800fbd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbd8:	f7f0 fb58 	bl	800028c <__adddf3>
 800fbdc:	4632      	mov	r2, r6
 800fbde:	463b      	mov	r3, r7
 800fbe0:	f7f0 fd0a 	bl	80005f8 <__aeabi_dmul>
 800fbe4:	a368      	add	r3, pc, #416	@ (adr r3, 800fd88 <atan+0x2c8>)
 800fbe6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbea:	f7f0 fb4f 	bl	800028c <__adddf3>
 800fbee:	4632      	mov	r2, r6
 800fbf0:	463b      	mov	r3, r7
 800fbf2:	f7f0 fd01 	bl	80005f8 <__aeabi_dmul>
 800fbf6:	a366      	add	r3, pc, #408	@ (adr r3, 800fd90 <atan+0x2d0>)
 800fbf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fbfc:	f7f0 fb46 	bl	800028c <__adddf3>
 800fc00:	4642      	mov	r2, r8
 800fc02:	464b      	mov	r3, r9
 800fc04:	f7f0 fcf8 	bl	80005f8 <__aeabi_dmul>
 800fc08:	a363      	add	r3, pc, #396	@ (adr r3, 800fd98 <atan+0x2d8>)
 800fc0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc0e:	4680      	mov	r8, r0
 800fc10:	4689      	mov	r9, r1
 800fc12:	4630      	mov	r0, r6
 800fc14:	4639      	mov	r1, r7
 800fc16:	f7f0 fcef 	bl	80005f8 <__aeabi_dmul>
 800fc1a:	a361      	add	r3, pc, #388	@ (adr r3, 800fda0 <atan+0x2e0>)
 800fc1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc20:	f7f0 fb32 	bl	8000288 <__aeabi_dsub>
 800fc24:	4632      	mov	r2, r6
 800fc26:	463b      	mov	r3, r7
 800fc28:	f7f0 fce6 	bl	80005f8 <__aeabi_dmul>
 800fc2c:	a35e      	add	r3, pc, #376	@ (adr r3, 800fda8 <atan+0x2e8>)
 800fc2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc32:	f7f0 fb29 	bl	8000288 <__aeabi_dsub>
 800fc36:	4632      	mov	r2, r6
 800fc38:	463b      	mov	r3, r7
 800fc3a:	f7f0 fcdd 	bl	80005f8 <__aeabi_dmul>
 800fc3e:	a35c      	add	r3, pc, #368	@ (adr r3, 800fdb0 <atan+0x2f0>)
 800fc40:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc44:	f7f0 fb20 	bl	8000288 <__aeabi_dsub>
 800fc48:	4632      	mov	r2, r6
 800fc4a:	463b      	mov	r3, r7
 800fc4c:	f7f0 fcd4 	bl	80005f8 <__aeabi_dmul>
 800fc50:	a359      	add	r3, pc, #356	@ (adr r3, 800fdb8 <atan+0x2f8>)
 800fc52:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fc56:	f7f0 fb17 	bl	8000288 <__aeabi_dsub>
 800fc5a:	4632      	mov	r2, r6
 800fc5c:	463b      	mov	r3, r7
 800fc5e:	f7f0 fccb 	bl	80005f8 <__aeabi_dmul>
 800fc62:	4602      	mov	r2, r0
 800fc64:	460b      	mov	r3, r1
 800fc66:	4640      	mov	r0, r8
 800fc68:	4649      	mov	r1, r9
 800fc6a:	f7f0 fb0f 	bl	800028c <__adddf3>
 800fc6e:	4622      	mov	r2, r4
 800fc70:	462b      	mov	r3, r5
 800fc72:	f7f0 fcc1 	bl	80005f8 <__aeabi_dmul>
 800fc76:	f1ba 3fff 	cmp.w	sl, #4294967295	@ 0xffffffff
 800fc7a:	4602      	mov	r2, r0
 800fc7c:	460b      	mov	r3, r1
 800fc7e:	d148      	bne.n	800fd12 <atan+0x252>
 800fc80:	4620      	mov	r0, r4
 800fc82:	4629      	mov	r1, r5
 800fc84:	f7f0 fb00 	bl	8000288 <__aeabi_dsub>
 800fc88:	e72f      	b.n	800faea <atan+0x2a>
 800fc8a:	4b52      	ldr	r3, [pc, #328]	@ (800fdd4 <atan+0x314>)
 800fc8c:	2200      	movs	r2, #0
 800fc8e:	4620      	mov	r0, r4
 800fc90:	4629      	mov	r1, r5
 800fc92:	f7f0 faf9 	bl	8000288 <__aeabi_dsub>
 800fc96:	4b4f      	ldr	r3, [pc, #316]	@ (800fdd4 <atan+0x314>)
 800fc98:	4606      	mov	r6, r0
 800fc9a:	460f      	mov	r7, r1
 800fc9c:	2200      	movs	r2, #0
 800fc9e:	4620      	mov	r0, r4
 800fca0:	4629      	mov	r1, r5
 800fca2:	f7f0 faf3 	bl	800028c <__adddf3>
 800fca6:	4602      	mov	r2, r0
 800fca8:	460b      	mov	r3, r1
 800fcaa:	4630      	mov	r0, r6
 800fcac:	4639      	mov	r1, r7
 800fcae:	f7f0 fdcd 	bl	800084c <__aeabi_ddiv>
 800fcb2:	f04f 0a01 	mov.w	sl, #1
 800fcb6:	4604      	mov	r4, r0
 800fcb8:	460d      	mov	r5, r1
 800fcba:	e765      	b.n	800fb88 <atan+0xc8>
 800fcbc:	4b47      	ldr	r3, [pc, #284]	@ (800fddc <atan+0x31c>)
 800fcbe:	429e      	cmp	r6, r3
 800fcc0:	d21c      	bcs.n	800fcfc <atan+0x23c>
 800fcc2:	4b47      	ldr	r3, [pc, #284]	@ (800fde0 <atan+0x320>)
 800fcc4:	2200      	movs	r2, #0
 800fcc6:	4620      	mov	r0, r4
 800fcc8:	4629      	mov	r1, r5
 800fcca:	f7f0 fadd 	bl	8000288 <__aeabi_dsub>
 800fcce:	4b44      	ldr	r3, [pc, #272]	@ (800fde0 <atan+0x320>)
 800fcd0:	4606      	mov	r6, r0
 800fcd2:	460f      	mov	r7, r1
 800fcd4:	2200      	movs	r2, #0
 800fcd6:	4620      	mov	r0, r4
 800fcd8:	4629      	mov	r1, r5
 800fcda:	f7f0 fc8d 	bl	80005f8 <__aeabi_dmul>
 800fcde:	4b3d      	ldr	r3, [pc, #244]	@ (800fdd4 <atan+0x314>)
 800fce0:	2200      	movs	r2, #0
 800fce2:	f7f0 fad3 	bl	800028c <__adddf3>
 800fce6:	4602      	mov	r2, r0
 800fce8:	460b      	mov	r3, r1
 800fcea:	4630      	mov	r0, r6
 800fcec:	4639      	mov	r1, r7
 800fcee:	f7f0 fdad 	bl	800084c <__aeabi_ddiv>
 800fcf2:	f04f 0a02 	mov.w	sl, #2
 800fcf6:	4604      	mov	r4, r0
 800fcf8:	460d      	mov	r5, r1
 800fcfa:	e745      	b.n	800fb88 <atan+0xc8>
 800fcfc:	4622      	mov	r2, r4
 800fcfe:	462b      	mov	r3, r5
 800fd00:	4938      	ldr	r1, [pc, #224]	@ (800fde4 <atan+0x324>)
 800fd02:	2000      	movs	r0, #0
 800fd04:	f7f0 fda2 	bl	800084c <__aeabi_ddiv>
 800fd08:	f04f 0a03 	mov.w	sl, #3
 800fd0c:	4604      	mov	r4, r0
 800fd0e:	460d      	mov	r5, r1
 800fd10:	e73a      	b.n	800fb88 <atan+0xc8>
 800fd12:	4b35      	ldr	r3, [pc, #212]	@ (800fde8 <atan+0x328>)
 800fd14:	4e35      	ldr	r6, [pc, #212]	@ (800fdec <atan+0x32c>)
 800fd16:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800fd1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fd1e:	f7f0 fab3 	bl	8000288 <__aeabi_dsub>
 800fd22:	4622      	mov	r2, r4
 800fd24:	462b      	mov	r3, r5
 800fd26:	f7f0 faaf 	bl	8000288 <__aeabi_dsub>
 800fd2a:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800fd2e:	4602      	mov	r2, r0
 800fd30:	460b      	mov	r3, r1
 800fd32:	e9d6 0100 	ldrd	r0, r1, [r6]
 800fd36:	f7f0 faa7 	bl	8000288 <__aeabi_dsub>
 800fd3a:	f1bb 0f00 	cmp.w	fp, #0
 800fd3e:	4604      	mov	r4, r0
 800fd40:	460d      	mov	r5, r1
 800fd42:	f6bf aedc 	bge.w	800fafe <atan+0x3e>
 800fd46:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800fd4a:	461d      	mov	r5, r3
 800fd4c:	e6d7      	b.n	800fafe <atan+0x3e>
 800fd4e:	a51c      	add	r5, pc, #112	@ (adr r5, 800fdc0 <atan+0x300>)
 800fd50:	e9d5 4500 	ldrd	r4, r5, [r5]
 800fd54:	e6d3      	b.n	800fafe <atan+0x3e>
 800fd56:	bf00      	nop
 800fd58:	54442d18 	.word	0x54442d18
 800fd5c:	3ff921fb 	.word	0x3ff921fb
 800fd60:	8800759c 	.word	0x8800759c
 800fd64:	7e37e43c 	.word	0x7e37e43c
 800fd68:	e322da11 	.word	0xe322da11
 800fd6c:	3f90ad3a 	.word	0x3f90ad3a
 800fd70:	24760deb 	.word	0x24760deb
 800fd74:	3fa97b4b 	.word	0x3fa97b4b
 800fd78:	a0d03d51 	.word	0xa0d03d51
 800fd7c:	3fb10d66 	.word	0x3fb10d66
 800fd80:	c54c206e 	.word	0xc54c206e
 800fd84:	3fb745cd 	.word	0x3fb745cd
 800fd88:	920083ff 	.word	0x920083ff
 800fd8c:	3fc24924 	.word	0x3fc24924
 800fd90:	5555550d 	.word	0x5555550d
 800fd94:	3fd55555 	.word	0x3fd55555
 800fd98:	2c6a6c2f 	.word	0x2c6a6c2f
 800fd9c:	bfa2b444 	.word	0xbfa2b444
 800fda0:	52defd9a 	.word	0x52defd9a
 800fda4:	3fadde2d 	.word	0x3fadde2d
 800fda8:	af749a6d 	.word	0xaf749a6d
 800fdac:	3fb3b0f2 	.word	0x3fb3b0f2
 800fdb0:	fe231671 	.word	0xfe231671
 800fdb4:	3fbc71c6 	.word	0x3fbc71c6
 800fdb8:	9998ebc4 	.word	0x9998ebc4
 800fdbc:	3fc99999 	.word	0x3fc99999
 800fdc0:	54442d18 	.word	0x54442d18
 800fdc4:	bff921fb 	.word	0xbff921fb
 800fdc8:	440fffff 	.word	0x440fffff
 800fdcc:	7ff00000 	.word	0x7ff00000
 800fdd0:	3fdbffff 	.word	0x3fdbffff
 800fdd4:	3ff00000 	.word	0x3ff00000
 800fdd8:	3ff2ffff 	.word	0x3ff2ffff
 800fddc:	40038000 	.word	0x40038000
 800fde0:	3ff80000 	.word	0x3ff80000
 800fde4:	bff00000 	.word	0xbff00000
 800fde8:	08010f78 	.word	0x08010f78
 800fdec:	08010f98 	.word	0x08010f98

0800fdf0 <fabs>:
 800fdf0:	ec51 0b10 	vmov	r0, r1, d0
 800fdf4:	4602      	mov	r2, r0
 800fdf6:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800fdfa:	ec43 2b10 	vmov	d0, r2, r3
 800fdfe:	4770      	bx	lr

0800fe00 <__ieee754_sqrt>:
 800fe00:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fe04:	4a68      	ldr	r2, [pc, #416]	@ (800ffa8 <__ieee754_sqrt+0x1a8>)
 800fe06:	ec55 4b10 	vmov	r4, r5, d0
 800fe0a:	43aa      	bics	r2, r5
 800fe0c:	462b      	mov	r3, r5
 800fe0e:	4621      	mov	r1, r4
 800fe10:	d110      	bne.n	800fe34 <__ieee754_sqrt+0x34>
 800fe12:	4622      	mov	r2, r4
 800fe14:	4620      	mov	r0, r4
 800fe16:	4629      	mov	r1, r5
 800fe18:	f7f0 fbee 	bl	80005f8 <__aeabi_dmul>
 800fe1c:	4602      	mov	r2, r0
 800fe1e:	460b      	mov	r3, r1
 800fe20:	4620      	mov	r0, r4
 800fe22:	4629      	mov	r1, r5
 800fe24:	f7f0 fa32 	bl	800028c <__adddf3>
 800fe28:	4604      	mov	r4, r0
 800fe2a:	460d      	mov	r5, r1
 800fe2c:	ec45 4b10 	vmov	d0, r4, r5
 800fe30:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fe34:	2d00      	cmp	r5, #0
 800fe36:	dc0e      	bgt.n	800fe56 <__ieee754_sqrt+0x56>
 800fe38:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800fe3c:	4322      	orrs	r2, r4
 800fe3e:	d0f5      	beq.n	800fe2c <__ieee754_sqrt+0x2c>
 800fe40:	b19d      	cbz	r5, 800fe6a <__ieee754_sqrt+0x6a>
 800fe42:	4622      	mov	r2, r4
 800fe44:	4620      	mov	r0, r4
 800fe46:	4629      	mov	r1, r5
 800fe48:	f7f0 fa1e 	bl	8000288 <__aeabi_dsub>
 800fe4c:	4602      	mov	r2, r0
 800fe4e:	460b      	mov	r3, r1
 800fe50:	f7f0 fcfc 	bl	800084c <__aeabi_ddiv>
 800fe54:	e7e8      	b.n	800fe28 <__ieee754_sqrt+0x28>
 800fe56:	152a      	asrs	r2, r5, #20
 800fe58:	d115      	bne.n	800fe86 <__ieee754_sqrt+0x86>
 800fe5a:	2000      	movs	r0, #0
 800fe5c:	e009      	b.n	800fe72 <__ieee754_sqrt+0x72>
 800fe5e:	0acb      	lsrs	r3, r1, #11
 800fe60:	3a15      	subs	r2, #21
 800fe62:	0549      	lsls	r1, r1, #21
 800fe64:	2b00      	cmp	r3, #0
 800fe66:	d0fa      	beq.n	800fe5e <__ieee754_sqrt+0x5e>
 800fe68:	e7f7      	b.n	800fe5a <__ieee754_sqrt+0x5a>
 800fe6a:	462a      	mov	r2, r5
 800fe6c:	e7fa      	b.n	800fe64 <__ieee754_sqrt+0x64>
 800fe6e:	005b      	lsls	r3, r3, #1
 800fe70:	3001      	adds	r0, #1
 800fe72:	02dc      	lsls	r4, r3, #11
 800fe74:	d5fb      	bpl.n	800fe6e <__ieee754_sqrt+0x6e>
 800fe76:	1e44      	subs	r4, r0, #1
 800fe78:	1b12      	subs	r2, r2, r4
 800fe7a:	f1c0 0420 	rsb	r4, r0, #32
 800fe7e:	fa21 f404 	lsr.w	r4, r1, r4
 800fe82:	4323      	orrs	r3, r4
 800fe84:	4081      	lsls	r1, r0
 800fe86:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800fe8a:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800fe8e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800fe92:	07d2      	lsls	r2, r2, #31
 800fe94:	bf5c      	itt	pl
 800fe96:	005b      	lslpl	r3, r3, #1
 800fe98:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800fe9c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800fea0:	bf58      	it	pl
 800fea2:	0049      	lslpl	r1, r1, #1
 800fea4:	2600      	movs	r6, #0
 800fea6:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800feaa:	106d      	asrs	r5, r5, #1
 800feac:	0049      	lsls	r1, r1, #1
 800feae:	2016      	movs	r0, #22
 800feb0:	4632      	mov	r2, r6
 800feb2:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800feb6:	1917      	adds	r7, r2, r4
 800feb8:	429f      	cmp	r7, r3
 800feba:	bfde      	ittt	le
 800febc:	193a      	addle	r2, r7, r4
 800febe:	1bdb      	suble	r3, r3, r7
 800fec0:	1936      	addle	r6, r6, r4
 800fec2:	0fcf      	lsrs	r7, r1, #31
 800fec4:	3801      	subs	r0, #1
 800fec6:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800feca:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800fece:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800fed2:	d1f0      	bne.n	800feb6 <__ieee754_sqrt+0xb6>
 800fed4:	4604      	mov	r4, r0
 800fed6:	2720      	movs	r7, #32
 800fed8:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800fedc:	429a      	cmp	r2, r3
 800fede:	eb00 0e0c 	add.w	lr, r0, ip
 800fee2:	db02      	blt.n	800feea <__ieee754_sqrt+0xea>
 800fee4:	d113      	bne.n	800ff0e <__ieee754_sqrt+0x10e>
 800fee6:	458e      	cmp	lr, r1
 800fee8:	d811      	bhi.n	800ff0e <__ieee754_sqrt+0x10e>
 800feea:	f1be 0f00 	cmp.w	lr, #0
 800feee:	eb0e 000c 	add.w	r0, lr, ip
 800fef2:	da42      	bge.n	800ff7a <__ieee754_sqrt+0x17a>
 800fef4:	2800      	cmp	r0, #0
 800fef6:	db40      	blt.n	800ff7a <__ieee754_sqrt+0x17a>
 800fef8:	f102 0801 	add.w	r8, r2, #1
 800fefc:	1a9b      	subs	r3, r3, r2
 800fefe:	458e      	cmp	lr, r1
 800ff00:	bf88      	it	hi
 800ff02:	f103 33ff 	addhi.w	r3, r3, #4294967295	@ 0xffffffff
 800ff06:	eba1 010e 	sub.w	r1, r1, lr
 800ff0a:	4464      	add	r4, ip
 800ff0c:	4642      	mov	r2, r8
 800ff0e:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800ff12:	3f01      	subs	r7, #1
 800ff14:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800ff18:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800ff1c:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800ff20:	d1dc      	bne.n	800fedc <__ieee754_sqrt+0xdc>
 800ff22:	4319      	orrs	r1, r3
 800ff24:	d01b      	beq.n	800ff5e <__ieee754_sqrt+0x15e>
 800ff26:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800ffac <__ieee754_sqrt+0x1ac>
 800ff2a:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800ffb0 <__ieee754_sqrt+0x1b0>
 800ff2e:	e9da 0100 	ldrd	r0, r1, [sl]
 800ff32:	e9db 2300 	ldrd	r2, r3, [fp]
 800ff36:	f7f0 f9a7 	bl	8000288 <__aeabi_dsub>
 800ff3a:	e9da 8900 	ldrd	r8, r9, [sl]
 800ff3e:	4602      	mov	r2, r0
 800ff40:	460b      	mov	r3, r1
 800ff42:	4640      	mov	r0, r8
 800ff44:	4649      	mov	r1, r9
 800ff46:	f7f0 fdd3 	bl	8000af0 <__aeabi_dcmple>
 800ff4a:	b140      	cbz	r0, 800ff5e <__ieee754_sqrt+0x15e>
 800ff4c:	f1b4 3fff 	cmp.w	r4, #4294967295	@ 0xffffffff
 800ff50:	e9da 0100 	ldrd	r0, r1, [sl]
 800ff54:	e9db 2300 	ldrd	r2, r3, [fp]
 800ff58:	d111      	bne.n	800ff7e <__ieee754_sqrt+0x17e>
 800ff5a:	3601      	adds	r6, #1
 800ff5c:	463c      	mov	r4, r7
 800ff5e:	1072      	asrs	r2, r6, #1
 800ff60:	0863      	lsrs	r3, r4, #1
 800ff62:	07f1      	lsls	r1, r6, #31
 800ff64:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800ff68:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800ff6c:	bf48      	it	mi
 800ff6e:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800ff72:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800ff76:	4618      	mov	r0, r3
 800ff78:	e756      	b.n	800fe28 <__ieee754_sqrt+0x28>
 800ff7a:	4690      	mov	r8, r2
 800ff7c:	e7be      	b.n	800fefc <__ieee754_sqrt+0xfc>
 800ff7e:	f7f0 f985 	bl	800028c <__adddf3>
 800ff82:	e9da 8900 	ldrd	r8, r9, [sl]
 800ff86:	4602      	mov	r2, r0
 800ff88:	460b      	mov	r3, r1
 800ff8a:	4640      	mov	r0, r8
 800ff8c:	4649      	mov	r1, r9
 800ff8e:	f7f0 fda5 	bl	8000adc <__aeabi_dcmplt>
 800ff92:	b120      	cbz	r0, 800ff9e <__ieee754_sqrt+0x19e>
 800ff94:	1ca0      	adds	r0, r4, #2
 800ff96:	bf08      	it	eq
 800ff98:	3601      	addeq	r6, #1
 800ff9a:	3402      	adds	r4, #2
 800ff9c:	e7df      	b.n	800ff5e <__ieee754_sqrt+0x15e>
 800ff9e:	1c63      	adds	r3, r4, #1
 800ffa0:	f023 0401 	bic.w	r4, r3, #1
 800ffa4:	e7db      	b.n	800ff5e <__ieee754_sqrt+0x15e>
 800ffa6:	bf00      	nop
 800ffa8:	7ff00000 	.word	0x7ff00000
 800ffac:	20000280 	.word	0x20000280
 800ffb0:	20000278 	.word	0x20000278
 800ffb4:	00000000 	.word	0x00000000

0800ffb8 <__ieee754_atan2>:
 800ffb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ffbc:	ec57 6b11 	vmov	r6, r7, d1
 800ffc0:	4273      	negs	r3, r6
 800ffc2:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 8010140 <__ieee754_atan2+0x188>
 800ffc6:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 800ffca:	4333      	orrs	r3, r6
 800ffcc:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800ffd0:	4543      	cmp	r3, r8
 800ffd2:	ec51 0b10 	vmov	r0, r1, d0
 800ffd6:	4635      	mov	r5, r6
 800ffd8:	d809      	bhi.n	800ffee <__ieee754_atan2+0x36>
 800ffda:	4244      	negs	r4, r0
 800ffdc:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800ffe0:	4304      	orrs	r4, r0
 800ffe2:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800ffe6:	4544      	cmp	r4, r8
 800ffe8:	468e      	mov	lr, r1
 800ffea:	4681      	mov	r9, r0
 800ffec:	d907      	bls.n	800fffe <__ieee754_atan2+0x46>
 800ffee:	4632      	mov	r2, r6
 800fff0:	463b      	mov	r3, r7
 800fff2:	f7f0 f94b 	bl	800028c <__adddf3>
 800fff6:	ec41 0b10 	vmov	d0, r0, r1
 800fffa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fffe:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 8010002:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 8010006:	4334      	orrs	r4, r6
 8010008:	d103      	bne.n	8010012 <__ieee754_atan2+0x5a>
 801000a:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801000e:	f7ff bd57 	b.w	800fac0 <atan>
 8010012:	17bc      	asrs	r4, r7, #30
 8010014:	f004 0402 	and.w	r4, r4, #2
 8010018:	ea53 0909 	orrs.w	r9, r3, r9
 801001c:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 8010020:	d107      	bne.n	8010032 <__ieee754_atan2+0x7a>
 8010022:	2c02      	cmp	r4, #2
 8010024:	d05f      	beq.n	80100e6 <__ieee754_atan2+0x12e>
 8010026:	2c03      	cmp	r4, #3
 8010028:	d1e5      	bne.n	800fff6 <__ieee754_atan2+0x3e>
 801002a:	a141      	add	r1, pc, #260	@ (adr r1, 8010130 <__ieee754_atan2+0x178>)
 801002c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010030:	e7e1      	b.n	800fff6 <__ieee754_atan2+0x3e>
 8010032:	4315      	orrs	r5, r2
 8010034:	d106      	bne.n	8010044 <__ieee754_atan2+0x8c>
 8010036:	f1be 0f00 	cmp.w	lr, #0
 801003a:	da5f      	bge.n	80100fc <__ieee754_atan2+0x144>
 801003c:	a13e      	add	r1, pc, #248	@ (adr r1, 8010138 <__ieee754_atan2+0x180>)
 801003e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010042:	e7d8      	b.n	800fff6 <__ieee754_atan2+0x3e>
 8010044:	4542      	cmp	r2, r8
 8010046:	d10f      	bne.n	8010068 <__ieee754_atan2+0xb0>
 8010048:	4293      	cmp	r3, r2
 801004a:	f104 34ff 	add.w	r4, r4, #4294967295	@ 0xffffffff
 801004e:	d107      	bne.n	8010060 <__ieee754_atan2+0xa8>
 8010050:	2c02      	cmp	r4, #2
 8010052:	d84c      	bhi.n	80100ee <__ieee754_atan2+0x136>
 8010054:	4b34      	ldr	r3, [pc, #208]	@ (8010128 <__ieee754_atan2+0x170>)
 8010056:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 801005a:	e9d3 0100 	ldrd	r0, r1, [r3]
 801005e:	e7ca      	b.n	800fff6 <__ieee754_atan2+0x3e>
 8010060:	2c02      	cmp	r4, #2
 8010062:	d848      	bhi.n	80100f6 <__ieee754_atan2+0x13e>
 8010064:	4b31      	ldr	r3, [pc, #196]	@ (801012c <__ieee754_atan2+0x174>)
 8010066:	e7f6      	b.n	8010056 <__ieee754_atan2+0x9e>
 8010068:	4543      	cmp	r3, r8
 801006a:	d0e4      	beq.n	8010036 <__ieee754_atan2+0x7e>
 801006c:	1a9b      	subs	r3, r3, r2
 801006e:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 8010072:	ea4f 5223 	mov.w	r2, r3, asr #20
 8010076:	da1e      	bge.n	80100b6 <__ieee754_atan2+0xfe>
 8010078:	2f00      	cmp	r7, #0
 801007a:	da01      	bge.n	8010080 <__ieee754_atan2+0xc8>
 801007c:	323c      	adds	r2, #60	@ 0x3c
 801007e:	db1e      	blt.n	80100be <__ieee754_atan2+0x106>
 8010080:	4632      	mov	r2, r6
 8010082:	463b      	mov	r3, r7
 8010084:	f7f0 fbe2 	bl	800084c <__aeabi_ddiv>
 8010088:	ec41 0b10 	vmov	d0, r0, r1
 801008c:	f7ff feb0 	bl	800fdf0 <fabs>
 8010090:	f7ff fd16 	bl	800fac0 <atan>
 8010094:	ec51 0b10 	vmov	r0, r1, d0
 8010098:	2c01      	cmp	r4, #1
 801009a:	d013      	beq.n	80100c4 <__ieee754_atan2+0x10c>
 801009c:	2c02      	cmp	r4, #2
 801009e:	d015      	beq.n	80100cc <__ieee754_atan2+0x114>
 80100a0:	2c00      	cmp	r4, #0
 80100a2:	d0a8      	beq.n	800fff6 <__ieee754_atan2+0x3e>
 80100a4:	a318      	add	r3, pc, #96	@ (adr r3, 8010108 <__ieee754_atan2+0x150>)
 80100a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100aa:	f7f0 f8ed 	bl	8000288 <__aeabi_dsub>
 80100ae:	a318      	add	r3, pc, #96	@ (adr r3, 8010110 <__ieee754_atan2+0x158>)
 80100b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100b4:	e014      	b.n	80100e0 <__ieee754_atan2+0x128>
 80100b6:	a118      	add	r1, pc, #96	@ (adr r1, 8010118 <__ieee754_atan2+0x160>)
 80100b8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80100bc:	e7ec      	b.n	8010098 <__ieee754_atan2+0xe0>
 80100be:	2000      	movs	r0, #0
 80100c0:	2100      	movs	r1, #0
 80100c2:	e7e9      	b.n	8010098 <__ieee754_atan2+0xe0>
 80100c4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80100c8:	4619      	mov	r1, r3
 80100ca:	e794      	b.n	800fff6 <__ieee754_atan2+0x3e>
 80100cc:	a30e      	add	r3, pc, #56	@ (adr r3, 8010108 <__ieee754_atan2+0x150>)
 80100ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80100d2:	f7f0 f8d9 	bl	8000288 <__aeabi_dsub>
 80100d6:	4602      	mov	r2, r0
 80100d8:	460b      	mov	r3, r1
 80100da:	a10d      	add	r1, pc, #52	@ (adr r1, 8010110 <__ieee754_atan2+0x158>)
 80100dc:	e9d1 0100 	ldrd	r0, r1, [r1]
 80100e0:	f7f0 f8d2 	bl	8000288 <__aeabi_dsub>
 80100e4:	e787      	b.n	800fff6 <__ieee754_atan2+0x3e>
 80100e6:	a10a      	add	r1, pc, #40	@ (adr r1, 8010110 <__ieee754_atan2+0x158>)
 80100e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80100ec:	e783      	b.n	800fff6 <__ieee754_atan2+0x3e>
 80100ee:	a10c      	add	r1, pc, #48	@ (adr r1, 8010120 <__ieee754_atan2+0x168>)
 80100f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80100f4:	e77f      	b.n	800fff6 <__ieee754_atan2+0x3e>
 80100f6:	2000      	movs	r0, #0
 80100f8:	2100      	movs	r1, #0
 80100fa:	e77c      	b.n	800fff6 <__ieee754_atan2+0x3e>
 80100fc:	a106      	add	r1, pc, #24	@ (adr r1, 8010118 <__ieee754_atan2+0x160>)
 80100fe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8010102:	e778      	b.n	800fff6 <__ieee754_atan2+0x3e>
 8010104:	f3af 8000 	nop.w
 8010108:	33145c07 	.word	0x33145c07
 801010c:	3ca1a626 	.word	0x3ca1a626
 8010110:	54442d18 	.word	0x54442d18
 8010114:	400921fb 	.word	0x400921fb
 8010118:	54442d18 	.word	0x54442d18
 801011c:	3ff921fb 	.word	0x3ff921fb
 8010120:	54442d18 	.word	0x54442d18
 8010124:	3fe921fb 	.word	0x3fe921fb
 8010128:	08010fd0 	.word	0x08010fd0
 801012c:	08010fb8 	.word	0x08010fb8
 8010130:	54442d18 	.word	0x54442d18
 8010134:	c00921fb 	.word	0xc00921fb
 8010138:	54442d18 	.word	0x54442d18
 801013c:	bff921fb 	.word	0xbff921fb
 8010140:	7ff00000 	.word	0x7ff00000

08010144 <_init>:
 8010144:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010146:	bf00      	nop
 8010148:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801014a:	bc08      	pop	{r3}
 801014c:	469e      	mov	lr, r3
 801014e:	4770      	bx	lr

08010150 <_fini>:
 8010150:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8010152:	bf00      	nop
 8010154:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8010156:	bc08      	pop	{r3}
 8010158:	469e      	mov	lr, r3
 801015a:	4770      	bx	lr
