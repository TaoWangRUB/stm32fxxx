
F405.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ff30  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000010b8  080100c0  080100c0  000110c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08011178  08011178  000131f8  2**0
                  CONTENTS
  4 .ARM          00000008  08011178  08011178  00012178  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08011180  08011180  000131f8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08011180  08011180  00012180  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08011184  08011184  00012184  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f8  20000000  08011188  00013000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000131f8  2**0
                  CONTENTS
 10 .bss          00004fd4  200001f8  200001f8  000131f8  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200051cc  200051cc  000131f8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000131f8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0002342e  00000000  00000000  00013228  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00005399  00000000  00000000  00036656  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001cf8  00000000  00000000  0003b9f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001662  00000000  00000000  0003d6e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00026399  00000000  00000000  0003ed4a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00025744  00000000  00000000  000650e3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d831f  00000000  00000000  0008a827  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00162b46  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00008b78  00000000  00000000  00162b8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000058  00000000  00000000  0016b704  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f8 	.word	0x200001f8
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080100a8 	.word	0x080100a8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001fc 	.word	0x200001fc
 80001cc:	080100a8 	.word	0x080100a8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_ldivmod>:
 8000c48:	b97b      	cbnz	r3, 8000c6a <__aeabi_ldivmod+0x22>
 8000c4a:	b972      	cbnz	r2, 8000c6a <__aeabi_ldivmod+0x22>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bfbe      	ittt	lt
 8000c50:	2000      	movlt	r0, #0
 8000c52:	f04f 4100 	movlt.w	r1, #2147483648	@ 0x80000000
 8000c56:	e006      	blt.n	8000c66 <__aeabi_ldivmod+0x1e>
 8000c58:	bf08      	it	eq
 8000c5a:	2800      	cmpeq	r0, #0
 8000c5c:	bf1c      	itt	ne
 8000c5e:	f06f 4100 	mvnne.w	r1, #2147483648	@ 0x80000000
 8000c62:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000c66:	f000 b9b5 	b.w	8000fd4 <__aeabi_idiv0>
 8000c6a:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c6e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c72:	2900      	cmp	r1, #0
 8000c74:	db09      	blt.n	8000c8a <__aeabi_ldivmod+0x42>
 8000c76:	2b00      	cmp	r3, #0
 8000c78:	db1a      	blt.n	8000cb0 <__aeabi_ldivmod+0x68>
 8000c7a:	f000 f84d 	bl	8000d18 <__udivmoddi4>
 8000c7e:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c82:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c86:	b004      	add	sp, #16
 8000c88:	4770      	bx	lr
 8000c8a:	4240      	negs	r0, r0
 8000c8c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	db1b      	blt.n	8000ccc <__aeabi_ldivmod+0x84>
 8000c94:	f000 f840 	bl	8000d18 <__udivmoddi4>
 8000c98:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c9c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ca0:	b004      	add	sp, #16
 8000ca2:	4240      	negs	r0, r0
 8000ca4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ca8:	4252      	negs	r2, r2
 8000caa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cae:	4770      	bx	lr
 8000cb0:	4252      	negs	r2, r2
 8000cb2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cb6:	f000 f82f 	bl	8000d18 <__udivmoddi4>
 8000cba:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cbe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc2:	b004      	add	sp, #16
 8000cc4:	4240      	negs	r0, r0
 8000cc6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cca:	4770      	bx	lr
 8000ccc:	4252      	negs	r2, r2
 8000cce:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000cd2:	f000 f821 	bl	8000d18 <__udivmoddi4>
 8000cd6:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cda:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cde:	b004      	add	sp, #16
 8000ce0:	4252      	negs	r2, r2
 8000ce2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000ce6:	4770      	bx	lr

08000ce8 <__aeabi_uldivmod>:
 8000ce8:	b953      	cbnz	r3, 8000d00 <__aeabi_uldivmod+0x18>
 8000cea:	b94a      	cbnz	r2, 8000d00 <__aeabi_uldivmod+0x18>
 8000cec:	2900      	cmp	r1, #0
 8000cee:	bf08      	it	eq
 8000cf0:	2800      	cmpeq	r0, #0
 8000cf2:	bf1c      	itt	ne
 8000cf4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000cf8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000cfc:	f000 b96a 	b.w	8000fd4 <__aeabi_idiv0>
 8000d00:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d08:	f000 f806 	bl	8000d18 <__udivmoddi4>
 8000d0c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d14:	b004      	add	sp, #16
 8000d16:	4770      	bx	lr

08000d18 <__udivmoddi4>:
 8000d18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d1c:	9d08      	ldr	r5, [sp, #32]
 8000d1e:	460c      	mov	r4, r1
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d14e      	bne.n	8000dc2 <__udivmoddi4+0xaa>
 8000d24:	4694      	mov	ip, r2
 8000d26:	458c      	cmp	ip, r1
 8000d28:	4686      	mov	lr, r0
 8000d2a:	fab2 f282 	clz	r2, r2
 8000d2e:	d962      	bls.n	8000df6 <__udivmoddi4+0xde>
 8000d30:	b14a      	cbz	r2, 8000d46 <__udivmoddi4+0x2e>
 8000d32:	f1c2 0320 	rsb	r3, r2, #32
 8000d36:	4091      	lsls	r1, r2
 8000d38:	fa20 f303 	lsr.w	r3, r0, r3
 8000d3c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d40:	4319      	orrs	r1, r3
 8000d42:	fa00 fe02 	lsl.w	lr, r0, r2
 8000d46:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d4a:	fa1f f68c 	uxth.w	r6, ip
 8000d4e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000d52:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d56:	fb07 1114 	mls	r1, r7, r4, r1
 8000d5a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d5e:	fb04 f106 	mul.w	r1, r4, r6
 8000d62:	4299      	cmp	r1, r3
 8000d64:	d90a      	bls.n	8000d7c <__udivmoddi4+0x64>
 8000d66:	eb1c 0303 	adds.w	r3, ip, r3
 8000d6a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000d6e:	f080 8112 	bcs.w	8000f96 <__udivmoddi4+0x27e>
 8000d72:	4299      	cmp	r1, r3
 8000d74:	f240 810f 	bls.w	8000f96 <__udivmoddi4+0x27e>
 8000d78:	3c02      	subs	r4, #2
 8000d7a:	4463      	add	r3, ip
 8000d7c:	1a59      	subs	r1, r3, r1
 8000d7e:	fa1f f38e 	uxth.w	r3, lr
 8000d82:	fbb1 f0f7 	udiv	r0, r1, r7
 8000d86:	fb07 1110 	mls	r1, r7, r0, r1
 8000d8a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d8e:	fb00 f606 	mul.w	r6, r0, r6
 8000d92:	429e      	cmp	r6, r3
 8000d94:	d90a      	bls.n	8000dac <__udivmoddi4+0x94>
 8000d96:	eb1c 0303 	adds.w	r3, ip, r3
 8000d9a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000d9e:	f080 80fc 	bcs.w	8000f9a <__udivmoddi4+0x282>
 8000da2:	429e      	cmp	r6, r3
 8000da4:	f240 80f9 	bls.w	8000f9a <__udivmoddi4+0x282>
 8000da8:	4463      	add	r3, ip
 8000daa:	3802      	subs	r0, #2
 8000dac:	1b9b      	subs	r3, r3, r6
 8000dae:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000db2:	2100      	movs	r1, #0
 8000db4:	b11d      	cbz	r5, 8000dbe <__udivmoddi4+0xa6>
 8000db6:	40d3      	lsrs	r3, r2
 8000db8:	2200      	movs	r2, #0
 8000dba:	e9c5 3200 	strd	r3, r2, [r5]
 8000dbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dc2:	428b      	cmp	r3, r1
 8000dc4:	d905      	bls.n	8000dd2 <__udivmoddi4+0xba>
 8000dc6:	b10d      	cbz	r5, 8000dcc <__udivmoddi4+0xb4>
 8000dc8:	e9c5 0100 	strd	r0, r1, [r5]
 8000dcc:	2100      	movs	r1, #0
 8000dce:	4608      	mov	r0, r1
 8000dd0:	e7f5      	b.n	8000dbe <__udivmoddi4+0xa6>
 8000dd2:	fab3 f183 	clz	r1, r3
 8000dd6:	2900      	cmp	r1, #0
 8000dd8:	d146      	bne.n	8000e68 <__udivmoddi4+0x150>
 8000dda:	42a3      	cmp	r3, r4
 8000ddc:	d302      	bcc.n	8000de4 <__udivmoddi4+0xcc>
 8000dde:	4290      	cmp	r0, r2
 8000de0:	f0c0 80f0 	bcc.w	8000fc4 <__udivmoddi4+0x2ac>
 8000de4:	1a86      	subs	r6, r0, r2
 8000de6:	eb64 0303 	sbc.w	r3, r4, r3
 8000dea:	2001      	movs	r0, #1
 8000dec:	2d00      	cmp	r5, #0
 8000dee:	d0e6      	beq.n	8000dbe <__udivmoddi4+0xa6>
 8000df0:	e9c5 6300 	strd	r6, r3, [r5]
 8000df4:	e7e3      	b.n	8000dbe <__udivmoddi4+0xa6>
 8000df6:	2a00      	cmp	r2, #0
 8000df8:	f040 8090 	bne.w	8000f1c <__udivmoddi4+0x204>
 8000dfc:	eba1 040c 	sub.w	r4, r1, ip
 8000e00:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000e04:	fa1f f78c 	uxth.w	r7, ip
 8000e08:	2101      	movs	r1, #1
 8000e0a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000e0e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000e12:	fb08 4416 	mls	r4, r8, r6, r4
 8000e16:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e1a:	fb07 f006 	mul.w	r0, r7, r6
 8000e1e:	4298      	cmp	r0, r3
 8000e20:	d908      	bls.n	8000e34 <__udivmoddi4+0x11c>
 8000e22:	eb1c 0303 	adds.w	r3, ip, r3
 8000e26:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000e2a:	d202      	bcs.n	8000e32 <__udivmoddi4+0x11a>
 8000e2c:	4298      	cmp	r0, r3
 8000e2e:	f200 80cd 	bhi.w	8000fcc <__udivmoddi4+0x2b4>
 8000e32:	4626      	mov	r6, r4
 8000e34:	1a1c      	subs	r4, r3, r0
 8000e36:	fa1f f38e 	uxth.w	r3, lr
 8000e3a:	fbb4 f0f8 	udiv	r0, r4, r8
 8000e3e:	fb08 4410 	mls	r4, r8, r0, r4
 8000e42:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000e46:	fb00 f707 	mul.w	r7, r0, r7
 8000e4a:	429f      	cmp	r7, r3
 8000e4c:	d908      	bls.n	8000e60 <__udivmoddi4+0x148>
 8000e4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000e52:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000e56:	d202      	bcs.n	8000e5e <__udivmoddi4+0x146>
 8000e58:	429f      	cmp	r7, r3
 8000e5a:	f200 80b0 	bhi.w	8000fbe <__udivmoddi4+0x2a6>
 8000e5e:	4620      	mov	r0, r4
 8000e60:	1bdb      	subs	r3, r3, r7
 8000e62:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e66:	e7a5      	b.n	8000db4 <__udivmoddi4+0x9c>
 8000e68:	f1c1 0620 	rsb	r6, r1, #32
 8000e6c:	408b      	lsls	r3, r1
 8000e6e:	fa22 f706 	lsr.w	r7, r2, r6
 8000e72:	431f      	orrs	r7, r3
 8000e74:	fa20 fc06 	lsr.w	ip, r0, r6
 8000e78:	fa04 f301 	lsl.w	r3, r4, r1
 8000e7c:	ea43 030c 	orr.w	r3, r3, ip
 8000e80:	40f4      	lsrs	r4, r6
 8000e82:	fa00 f801 	lsl.w	r8, r0, r1
 8000e86:	0c38      	lsrs	r0, r7, #16
 8000e88:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000e8c:	fbb4 fef0 	udiv	lr, r4, r0
 8000e90:	fa1f fc87 	uxth.w	ip, r7
 8000e94:	fb00 441e 	mls	r4, r0, lr, r4
 8000e98:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e9c:	fb0e f90c 	mul.w	r9, lr, ip
 8000ea0:	45a1      	cmp	r9, r4
 8000ea2:	fa02 f201 	lsl.w	r2, r2, r1
 8000ea6:	d90a      	bls.n	8000ebe <__udivmoddi4+0x1a6>
 8000ea8:	193c      	adds	r4, r7, r4
 8000eaa:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8000eae:	f080 8084 	bcs.w	8000fba <__udivmoddi4+0x2a2>
 8000eb2:	45a1      	cmp	r9, r4
 8000eb4:	f240 8081 	bls.w	8000fba <__udivmoddi4+0x2a2>
 8000eb8:	f1ae 0e02 	sub.w	lr, lr, #2
 8000ebc:	443c      	add	r4, r7
 8000ebe:	eba4 0409 	sub.w	r4, r4, r9
 8000ec2:	fa1f f983 	uxth.w	r9, r3
 8000ec6:	fbb4 f3f0 	udiv	r3, r4, r0
 8000eca:	fb00 4413 	mls	r4, r0, r3, r4
 8000ece:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000ed2:	fb03 fc0c 	mul.w	ip, r3, ip
 8000ed6:	45a4      	cmp	ip, r4
 8000ed8:	d907      	bls.n	8000eea <__udivmoddi4+0x1d2>
 8000eda:	193c      	adds	r4, r7, r4
 8000edc:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000ee0:	d267      	bcs.n	8000fb2 <__udivmoddi4+0x29a>
 8000ee2:	45a4      	cmp	ip, r4
 8000ee4:	d965      	bls.n	8000fb2 <__udivmoddi4+0x29a>
 8000ee6:	3b02      	subs	r3, #2
 8000ee8:	443c      	add	r4, r7
 8000eea:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000eee:	fba0 9302 	umull	r9, r3, r0, r2
 8000ef2:	eba4 040c 	sub.w	r4, r4, ip
 8000ef6:	429c      	cmp	r4, r3
 8000ef8:	46ce      	mov	lr, r9
 8000efa:	469c      	mov	ip, r3
 8000efc:	d351      	bcc.n	8000fa2 <__udivmoddi4+0x28a>
 8000efe:	d04e      	beq.n	8000f9e <__udivmoddi4+0x286>
 8000f00:	b155      	cbz	r5, 8000f18 <__udivmoddi4+0x200>
 8000f02:	ebb8 030e 	subs.w	r3, r8, lr
 8000f06:	eb64 040c 	sbc.w	r4, r4, ip
 8000f0a:	fa04 f606 	lsl.w	r6, r4, r6
 8000f0e:	40cb      	lsrs	r3, r1
 8000f10:	431e      	orrs	r6, r3
 8000f12:	40cc      	lsrs	r4, r1
 8000f14:	e9c5 6400 	strd	r6, r4, [r5]
 8000f18:	2100      	movs	r1, #0
 8000f1a:	e750      	b.n	8000dbe <__udivmoddi4+0xa6>
 8000f1c:	f1c2 0320 	rsb	r3, r2, #32
 8000f20:	fa20 f103 	lsr.w	r1, r0, r3
 8000f24:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f28:	fa24 f303 	lsr.w	r3, r4, r3
 8000f2c:	4094      	lsls	r4, r2
 8000f2e:	430c      	orrs	r4, r1
 8000f30:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000f34:	fa00 fe02 	lsl.w	lr, r0, r2
 8000f38:	fa1f f78c 	uxth.w	r7, ip
 8000f3c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000f40:	fb08 3110 	mls	r1, r8, r0, r3
 8000f44:	0c23      	lsrs	r3, r4, #16
 8000f46:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f4a:	fb00 f107 	mul.w	r1, r0, r7
 8000f4e:	4299      	cmp	r1, r3
 8000f50:	d908      	bls.n	8000f64 <__udivmoddi4+0x24c>
 8000f52:	eb1c 0303 	adds.w	r3, ip, r3
 8000f56:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8000f5a:	d22c      	bcs.n	8000fb6 <__udivmoddi4+0x29e>
 8000f5c:	4299      	cmp	r1, r3
 8000f5e:	d92a      	bls.n	8000fb6 <__udivmoddi4+0x29e>
 8000f60:	3802      	subs	r0, #2
 8000f62:	4463      	add	r3, ip
 8000f64:	1a5b      	subs	r3, r3, r1
 8000f66:	b2a4      	uxth	r4, r4
 8000f68:	fbb3 f1f8 	udiv	r1, r3, r8
 8000f6c:	fb08 3311 	mls	r3, r8, r1, r3
 8000f70:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000f74:	fb01 f307 	mul.w	r3, r1, r7
 8000f78:	42a3      	cmp	r3, r4
 8000f7a:	d908      	bls.n	8000f8e <__udivmoddi4+0x276>
 8000f7c:	eb1c 0404 	adds.w	r4, ip, r4
 8000f80:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000f84:	d213      	bcs.n	8000fae <__udivmoddi4+0x296>
 8000f86:	42a3      	cmp	r3, r4
 8000f88:	d911      	bls.n	8000fae <__udivmoddi4+0x296>
 8000f8a:	3902      	subs	r1, #2
 8000f8c:	4464      	add	r4, ip
 8000f8e:	1ae4      	subs	r4, r4, r3
 8000f90:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f94:	e739      	b.n	8000e0a <__udivmoddi4+0xf2>
 8000f96:	4604      	mov	r4, r0
 8000f98:	e6f0      	b.n	8000d7c <__udivmoddi4+0x64>
 8000f9a:	4608      	mov	r0, r1
 8000f9c:	e706      	b.n	8000dac <__udivmoddi4+0x94>
 8000f9e:	45c8      	cmp	r8, r9
 8000fa0:	d2ae      	bcs.n	8000f00 <__udivmoddi4+0x1e8>
 8000fa2:	ebb9 0e02 	subs.w	lr, r9, r2
 8000fa6:	eb63 0c07 	sbc.w	ip, r3, r7
 8000faa:	3801      	subs	r0, #1
 8000fac:	e7a8      	b.n	8000f00 <__udivmoddi4+0x1e8>
 8000fae:	4631      	mov	r1, r6
 8000fb0:	e7ed      	b.n	8000f8e <__udivmoddi4+0x276>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	e799      	b.n	8000eea <__udivmoddi4+0x1d2>
 8000fb6:	4630      	mov	r0, r6
 8000fb8:	e7d4      	b.n	8000f64 <__udivmoddi4+0x24c>
 8000fba:	46d6      	mov	lr, sl
 8000fbc:	e77f      	b.n	8000ebe <__udivmoddi4+0x1a6>
 8000fbe:	4463      	add	r3, ip
 8000fc0:	3802      	subs	r0, #2
 8000fc2:	e74d      	b.n	8000e60 <__udivmoddi4+0x148>
 8000fc4:	4606      	mov	r6, r0
 8000fc6:	4623      	mov	r3, r4
 8000fc8:	4608      	mov	r0, r1
 8000fca:	e70f      	b.n	8000dec <__udivmoddi4+0xd4>
 8000fcc:	3e02      	subs	r6, #2
 8000fce:	4463      	add	r3, ip
 8000fd0:	e730      	b.n	8000e34 <__udivmoddi4+0x11c>
 8000fd2:	bf00      	nop

08000fd4 <__aeabi_idiv0>:
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop

08000fd8 <BMP280_ReadRegister>:

#include "bmp280.h"
#include "i2c.h"

// Helper functions
static HAL_StatusTypeDef BMP280_ReadRegister(uint8_t reg, uint8_t *data, uint16_t length) {
 8000fd8:	b580      	push	{r7, lr}
 8000fda:	b086      	sub	sp, #24
 8000fdc:	af04      	add	r7, sp, #16
 8000fde:	4603      	mov	r3, r0
 8000fe0:	6039      	str	r1, [r7, #0]
 8000fe2:	71fb      	strb	r3, [r7, #7]
 8000fe4:	4613      	mov	r3, r2
 8000fe6:	80bb      	strh	r3, [r7, #4]
    return HAL_I2C_Mem_Read(&hi2c1, BMP280_I2C_ADDR, reg, I2C_MEMADD_SIZE_8BIT, data, length, HAL_MAX_DELAY);
 8000fe8:	79fb      	ldrb	r3, [r7, #7]
 8000fea:	b29a      	uxth	r2, r3
 8000fec:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8000ff0:	9302      	str	r3, [sp, #8]
 8000ff2:	88bb      	ldrh	r3, [r7, #4]
 8000ff4:	9301      	str	r3, [sp, #4]
 8000ff6:	683b      	ldr	r3, [r7, #0]
 8000ff8:	9300      	str	r3, [sp, #0]
 8000ffa:	2301      	movs	r3, #1
 8000ffc:	21ee      	movs	r1, #238	@ 0xee
 8000ffe:	4804      	ldr	r0, [pc, #16]	@ (8001010 <BMP280_ReadRegister+0x38>)
 8001000:	f003 ff0e 	bl	8004e20 <HAL_I2C_Mem_Read>
 8001004:	4603      	mov	r3, r0
}
 8001006:	4618      	mov	r0, r3
 8001008:	3708      	adds	r7, #8
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	20000444 	.word	0x20000444

08001014 <BMP280_WriteRegister>:

static HAL_StatusTypeDef BMP280_WriteRegister(uint8_t reg, uint8_t value) {
 8001014:	b580      	push	{r7, lr}
 8001016:	b086      	sub	sp, #24
 8001018:	af04      	add	r7, sp, #16
 800101a:	4603      	mov	r3, r0
 800101c:	460a      	mov	r2, r1
 800101e:	71fb      	strb	r3, [r7, #7]
 8001020:	4613      	mov	r3, r2
 8001022:	71bb      	strb	r3, [r7, #6]
    return HAL_I2C_Mem_Write(&hi2c1, BMP280_I2C_ADDR, reg, I2C_MEMADD_SIZE_8BIT, &value, 1, HAL_MAX_DELAY);
 8001024:	79fb      	ldrb	r3, [r7, #7]
 8001026:	b29a      	uxth	r2, r3
 8001028:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800102c:	9302      	str	r3, [sp, #8]
 800102e:	2301      	movs	r3, #1
 8001030:	9301      	str	r3, [sp, #4]
 8001032:	1dbb      	adds	r3, r7, #6
 8001034:	9300      	str	r3, [sp, #0]
 8001036:	2301      	movs	r3, #1
 8001038:	21ee      	movs	r1, #238	@ 0xee
 800103a:	4804      	ldr	r0, [pc, #16]	@ (800104c <BMP280_WriteRegister+0x38>)
 800103c:	f003 fdf6 	bl	8004c2c <HAL_I2C_Mem_Write>
 8001040:	4603      	mov	r3, r0
}
 8001042:	4618      	mov	r0, r3
 8001044:	3708      	adds	r7, #8
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
 800104a:	bf00      	nop
 800104c:	20000444 	.word	0x20000444

08001050 <BMP280_Init>:

// BMP280 Initialization
uint8_t BMP280_Init(BMP280_t *bmp) {
 8001050:	b580      	push	{r7, lr}
 8001052:	b08a      	sub	sp, #40	@ 0x28
 8001054:	af00      	add	r7, sp, #0
 8001056:	6078      	str	r0, [r7, #4]
    uint8_t id;
    uint8_t config[2];

    // Read the BMP280 ID
    if (BMP280_ReadRegister(BMP280_REG_ID, &id, 1) != HAL_OK) {
 8001058:	f107 0327 	add.w	r3, r7, #39	@ 0x27
 800105c:	2201      	movs	r2, #1
 800105e:	4619      	mov	r1, r3
 8001060:	20d0      	movs	r0, #208	@ 0xd0
 8001062:	f7ff ffb9 	bl	8000fd8 <BMP280_ReadRegister>
 8001066:	4603      	mov	r3, r0
 8001068:	2b00      	cmp	r3, #0
 800106a:	d001      	beq.n	8001070 <BMP280_Init+0x20>
        return HAL_ERROR;
 800106c:	2301      	movs	r3, #1
 800106e:	e0aa      	b.n	80011c6 <BMP280_Init+0x176>
    }
    if (id != 0x58) {
 8001070:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001074:	2b58      	cmp	r3, #88	@ 0x58
 8001076:	d001      	beq.n	800107c <BMP280_Init+0x2c>
        return HAL_ERROR; // BMP280 ID mismatch
 8001078:	2301      	movs	r3, #1
 800107a:	e0a4      	b.n	80011c6 <BMP280_Init+0x176>
    }

    // Reset the sensor
    if (BMP280_WriteRegister(BMP280_REG_RESET, 0xB6) != HAL_OK) {
 800107c:	21b6      	movs	r1, #182	@ 0xb6
 800107e:	20e0      	movs	r0, #224	@ 0xe0
 8001080:	f7ff ffc8 	bl	8001014 <BMP280_WriteRegister>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d001      	beq.n	800108e <BMP280_Init+0x3e>
        return HAL_ERROR;
 800108a:	2301      	movs	r3, #1
 800108c:	e09b      	b.n	80011c6 <BMP280_Init+0x176>
    }
    HAL_Delay(100);
 800108e:	2064      	movs	r0, #100	@ 0x64
 8001090:	f002 fdd8 	bl	8003c44 <HAL_Delay>

    // Read calibration data
    uint8_t calib[BMP280_CALIB_LENGTH];
    if (BMP280_ReadRegister(BMP280_CALIB_START, calib, BMP280_CALIB_LENGTH) != HAL_OK) {
 8001094:	f107 030c 	add.w	r3, r7, #12
 8001098:	2218      	movs	r2, #24
 800109a:	4619      	mov	r1, r3
 800109c:	2088      	movs	r0, #136	@ 0x88
 800109e:	f7ff ff9b 	bl	8000fd8 <BMP280_ReadRegister>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d001      	beq.n	80010ac <BMP280_Init+0x5c>
        return HAL_ERROR;
 80010a8:	2301      	movs	r3, #1
 80010aa:	e08c      	b.n	80011c6 <BMP280_Init+0x176>
    }

    // Parse calibration data
    bmp->calib.dig_T1 = (uint16_t)(calib[1] << 8 | calib[0]);
 80010ac:	7b7b      	ldrb	r3, [r7, #13]
 80010ae:	021b      	lsls	r3, r3, #8
 80010b0:	b21a      	sxth	r2, r3
 80010b2:	7b3b      	ldrb	r3, [r7, #12]
 80010b4:	b21b      	sxth	r3, r3
 80010b6:	4313      	orrs	r3, r2
 80010b8:	b21b      	sxth	r3, r3
 80010ba:	b29a      	uxth	r2, r3
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	801a      	strh	r2, [r3, #0]
    bmp->calib.dig_T2 = (int16_t)(calib[3] << 8 | calib[2]);
 80010c0:	7bfb      	ldrb	r3, [r7, #15]
 80010c2:	021b      	lsls	r3, r3, #8
 80010c4:	b21a      	sxth	r2, r3
 80010c6:	7bbb      	ldrb	r3, [r7, #14]
 80010c8:	b21b      	sxth	r3, r3
 80010ca:	4313      	orrs	r3, r2
 80010cc:	b21a      	sxth	r2, r3
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	805a      	strh	r2, [r3, #2]
    bmp->calib.dig_T3 = (int16_t)(calib[5] << 8 | calib[4]);
 80010d2:	7c7b      	ldrb	r3, [r7, #17]
 80010d4:	021b      	lsls	r3, r3, #8
 80010d6:	b21a      	sxth	r2, r3
 80010d8:	7c3b      	ldrb	r3, [r7, #16]
 80010da:	b21b      	sxth	r3, r3
 80010dc:	4313      	orrs	r3, r2
 80010de:	b21a      	sxth	r2, r3
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	809a      	strh	r2, [r3, #4]

    bmp->calib.dig_P1 = (uint16_t)(calib[7] << 8 | calib[6]);
 80010e4:	7cfb      	ldrb	r3, [r7, #19]
 80010e6:	021b      	lsls	r3, r3, #8
 80010e8:	b21a      	sxth	r2, r3
 80010ea:	7cbb      	ldrb	r3, [r7, #18]
 80010ec:	b21b      	sxth	r3, r3
 80010ee:	4313      	orrs	r3, r2
 80010f0:	b21b      	sxth	r3, r3
 80010f2:	b29a      	uxth	r2, r3
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	80da      	strh	r2, [r3, #6]
    bmp->calib.dig_P2 = (int16_t)(calib[9] << 8 | calib[8]);
 80010f8:	7d7b      	ldrb	r3, [r7, #21]
 80010fa:	021b      	lsls	r3, r3, #8
 80010fc:	b21a      	sxth	r2, r3
 80010fe:	7d3b      	ldrb	r3, [r7, #20]
 8001100:	b21b      	sxth	r3, r3
 8001102:	4313      	orrs	r3, r2
 8001104:	b21a      	sxth	r2, r3
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	811a      	strh	r2, [r3, #8]
    bmp->calib.dig_P3 = (int16_t)(calib[11] << 8 | calib[10]);
 800110a:	7dfb      	ldrb	r3, [r7, #23]
 800110c:	021b      	lsls	r3, r3, #8
 800110e:	b21a      	sxth	r2, r3
 8001110:	7dbb      	ldrb	r3, [r7, #22]
 8001112:	b21b      	sxth	r3, r3
 8001114:	4313      	orrs	r3, r2
 8001116:	b21a      	sxth	r2, r3
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	815a      	strh	r2, [r3, #10]
    bmp->calib.dig_P4 = (int16_t)(calib[13] << 8 | calib[12]);
 800111c:	7e7b      	ldrb	r3, [r7, #25]
 800111e:	021b      	lsls	r3, r3, #8
 8001120:	b21a      	sxth	r2, r3
 8001122:	7e3b      	ldrb	r3, [r7, #24]
 8001124:	b21b      	sxth	r3, r3
 8001126:	4313      	orrs	r3, r2
 8001128:	b21a      	sxth	r2, r3
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	819a      	strh	r2, [r3, #12]
    bmp->calib.dig_P5 = (int16_t)(calib[15] << 8 | calib[14]);
 800112e:	7efb      	ldrb	r3, [r7, #27]
 8001130:	021b      	lsls	r3, r3, #8
 8001132:	b21a      	sxth	r2, r3
 8001134:	7ebb      	ldrb	r3, [r7, #26]
 8001136:	b21b      	sxth	r3, r3
 8001138:	4313      	orrs	r3, r2
 800113a:	b21a      	sxth	r2, r3
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	81da      	strh	r2, [r3, #14]
    bmp->calib.dig_P6 = (int16_t)(calib[17] << 8 | calib[16]);
 8001140:	7f7b      	ldrb	r3, [r7, #29]
 8001142:	021b      	lsls	r3, r3, #8
 8001144:	b21a      	sxth	r2, r3
 8001146:	7f3b      	ldrb	r3, [r7, #28]
 8001148:	b21b      	sxth	r3, r3
 800114a:	4313      	orrs	r3, r2
 800114c:	b21a      	sxth	r2, r3
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	821a      	strh	r2, [r3, #16]
    bmp->calib.dig_P7 = (int16_t)(calib[19] << 8 | calib[18]);
 8001152:	7ffb      	ldrb	r3, [r7, #31]
 8001154:	021b      	lsls	r3, r3, #8
 8001156:	b21a      	sxth	r2, r3
 8001158:	7fbb      	ldrb	r3, [r7, #30]
 800115a:	b21b      	sxth	r3, r3
 800115c:	4313      	orrs	r3, r2
 800115e:	b21a      	sxth	r2, r3
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	825a      	strh	r2, [r3, #18]
    bmp->calib.dig_P8 = (int16_t)(calib[21] << 8 | calib[20]);
 8001164:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8001168:	021b      	lsls	r3, r3, #8
 800116a:	b21a      	sxth	r2, r3
 800116c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001170:	b21b      	sxth	r3, r3
 8001172:	4313      	orrs	r3, r2
 8001174:	b21a      	sxth	r2, r3
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	829a      	strh	r2, [r3, #20]
    bmp->calib.dig_P9 = (int16_t)(calib[23] << 8 | calib[22]);
 800117a:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800117e:	021b      	lsls	r3, r3, #8
 8001180:	b21a      	sxth	r2, r3
 8001182:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 8001186:	b21b      	sxth	r3, r3
 8001188:	4313      	orrs	r3, r2
 800118a:	b21a      	sxth	r2, r3
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	82da      	strh	r2, [r3, #22]

    // Set oversampling and power mode
    config[0] = BMP280_OSRS_T | BMP280_OSRS_P | BMP280_MODE_NORMAL;
 8001190:	2327      	movs	r3, #39	@ 0x27
 8001192:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    config[1] = 0xA0; // Standby time 1000ms, filter off
 8001196:	23a0      	movs	r3, #160	@ 0xa0
 8001198:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
    if (BMP280_WriteRegister(BMP280_REG_CTRL_MEAS, config[0]) != HAL_OK ||
 800119c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80011a0:	4619      	mov	r1, r3
 80011a2:	20f4      	movs	r0, #244	@ 0xf4
 80011a4:	f7ff ff36 	bl	8001014 <BMP280_WriteRegister>
 80011a8:	4603      	mov	r3, r0
 80011aa:	2b00      	cmp	r3, #0
 80011ac:	d108      	bne.n	80011c0 <BMP280_Init+0x170>
        BMP280_WriteRegister(BMP280_REG_CONFIG, config[1]) != HAL_OK) {
 80011ae:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80011b2:	4619      	mov	r1, r3
 80011b4:	20f5      	movs	r0, #245	@ 0xf5
 80011b6:	f7ff ff2d 	bl	8001014 <BMP280_WriteRegister>
 80011ba:	4603      	mov	r3, r0
    if (BMP280_WriteRegister(BMP280_REG_CTRL_MEAS, config[0]) != HAL_OK ||
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d001      	beq.n	80011c4 <BMP280_Init+0x174>
        return HAL_ERROR;
 80011c0:	2301      	movs	r3, #1
 80011c2:	e000      	b.n	80011c6 <BMP280_Init+0x176>
    }

    return HAL_OK;
 80011c4:	2300      	movs	r3, #0
}
 80011c6:	4618      	mov	r0, r3
 80011c8:	3728      	adds	r7, #40	@ 0x28
 80011ca:	46bd      	mov	sp, r7
 80011cc:	bd80      	pop	{r7, pc}

080011ce <BMP280_CompensateTemperature>:

// BMP280 Temperature Compensation
static int32_t BMP280_CompensateTemperature(BMP280_t *bmp, int32_t adc_T) {
 80011ce:	b480      	push	{r7}
 80011d0:	b085      	sub	sp, #20
 80011d2:	af00      	add	r7, sp, #0
 80011d4:	6078      	str	r0, [r7, #4]
 80011d6:	6039      	str	r1, [r7, #0]
    int32_t var1, var2;
    var1 = (((adc_T >> 3) - ((int32_t)bmp->calib.dig_T1 << 1)) * ((int32_t)bmp->calib.dig_T2)) >> 11;
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	10da      	asrs	r2, r3, #3
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	881b      	ldrh	r3, [r3, #0]
 80011e0:	005b      	lsls	r3, r3, #1
 80011e2:	1ad3      	subs	r3, r2, r3
 80011e4:	687a      	ldr	r2, [r7, #4]
 80011e6:	f9b2 2002 	ldrsh.w	r2, [r2, #2]
 80011ea:	fb02 f303 	mul.w	r3, r2, r3
 80011ee:	12db      	asrs	r3, r3, #11
 80011f0:	60fb      	str	r3, [r7, #12]
    var2 = (((((adc_T >> 4) - ((int32_t)bmp->calib.dig_T1)) * ((adc_T >> 4) - ((int32_t)bmp->calib.dig_T1))) >> 12) * ((int32_t)bmp->calib.dig_T3)) >> 14;
 80011f2:	683b      	ldr	r3, [r7, #0]
 80011f4:	111b      	asrs	r3, r3, #4
 80011f6:	687a      	ldr	r2, [r7, #4]
 80011f8:	8812      	ldrh	r2, [r2, #0]
 80011fa:	1a9b      	subs	r3, r3, r2
 80011fc:	683a      	ldr	r2, [r7, #0]
 80011fe:	1112      	asrs	r2, r2, #4
 8001200:	6879      	ldr	r1, [r7, #4]
 8001202:	8809      	ldrh	r1, [r1, #0]
 8001204:	1a52      	subs	r2, r2, r1
 8001206:	fb02 f303 	mul.w	r3, r2, r3
 800120a:	131b      	asrs	r3, r3, #12
 800120c:	687a      	ldr	r2, [r7, #4]
 800120e:	f9b2 2004 	ldrsh.w	r2, [r2, #4]
 8001212:	fb02 f303 	mul.w	r3, r2, r3
 8001216:	139b      	asrs	r3, r3, #14
 8001218:	60bb      	str	r3, [r7, #8]
    bmp->t_fine = var1 + var2;
 800121a:	68fa      	ldr	r2, [r7, #12]
 800121c:	68bb      	ldr	r3, [r7, #8]
 800121e:	441a      	add	r2, r3
 8001220:	687b      	ldr	r3, [r7, #4]
 8001222:	619a      	str	r2, [r3, #24]
    return (bmp->t_fine * 5 + 128) >> 8;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	699a      	ldr	r2, [r3, #24]
 8001228:	4613      	mov	r3, r2
 800122a:	009b      	lsls	r3, r3, #2
 800122c:	4413      	add	r3, r2
 800122e:	3380      	adds	r3, #128	@ 0x80
 8001230:	121b      	asrs	r3, r3, #8
}
 8001232:	4618      	mov	r0, r3
 8001234:	3714      	adds	r7, #20
 8001236:	46bd      	mov	sp, r7
 8001238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123c:	4770      	bx	lr

0800123e <BMP280_CompensatePressure>:

// BMP280 Pressure Compensation
static uint32_t BMP280_CompensatePressure(BMP280_t *bmp, int32_t adc_P) {
 800123e:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001242:	b0ca      	sub	sp, #296	@ 0x128
 8001244:	af00      	add	r7, sp, #0
 8001246:	f8c7 010c 	str.w	r0, [r7, #268]	@ 0x10c
 800124a:	f8c7 1108 	str.w	r1, [r7, #264]	@ 0x108
    int64_t var1, var2, p;
    var1 = ((int64_t)bmp->t_fine) - 128000;
 800124e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001252:	699b      	ldr	r3, [r3, #24]
 8001254:	17da      	asrs	r2, r3, #31
 8001256:	461c      	mov	r4, r3
 8001258:	4615      	mov	r5, r2
 800125a:	f5b4 3afa 	subs.w	sl, r4, #128000	@ 0x1f400
 800125e:	f145 3bff 	adc.w	fp, r5, #4294967295	@ 0xffffffff
 8001262:	e9c7 ab48 	strd	sl, fp, [r7, #288]	@ 0x120
    var2 = var1 * var1 * (int64_t)bmp->calib.dig_P6;
 8001266:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 800126a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800126e:	fb03 f102 	mul.w	r1, r3, r2
 8001272:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8001276:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800127a:	fb02 f303 	mul.w	r3, r2, r3
 800127e:	18ca      	adds	r2, r1, r3
 8001280:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001284:	fba3 8903 	umull	r8, r9, r3, r3
 8001288:	eb02 0309 	add.w	r3, r2, r9
 800128c:	4699      	mov	r9, r3
 800128e:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001292:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8001296:	b21b      	sxth	r3, r3
 8001298:	17da      	asrs	r2, r3, #31
 800129a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800129e:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80012a2:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	@ 0xb8
 80012a6:	4603      	mov	r3, r0
 80012a8:	fb03 f209 	mul.w	r2, r3, r9
 80012ac:	460b      	mov	r3, r1
 80012ae:	fb08 f303 	mul.w	r3, r8, r3
 80012b2:	4413      	add	r3, r2
 80012b4:	4602      	mov	r2, r0
 80012b6:	fba8 1202 	umull	r1, r2, r8, r2
 80012ba:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80012be:	460a      	mov	r2, r1
 80012c0:	f8c7 20c0 	str.w	r2, [r7, #192]	@ 0xc0
 80012c4:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80012c8:	4413      	add	r3, r2
 80012ca:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80012ce:	e9d7 3430 	ldrd	r3, r4, [r7, #192]	@ 0xc0
 80012d2:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
 80012d6:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
    var2 = var2 + ((var1 * (int64_t)bmp->calib.dig_P5) << 17);
 80012da:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80012de:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 80012e2:	b21b      	sxth	r3, r3
 80012e4:	17da      	asrs	r2, r3, #31
 80012e6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80012ea:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 80012ee:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80012f2:	e9d7 452c 	ldrd	r4, r5, [r7, #176]	@ 0xb0
 80012f6:	462a      	mov	r2, r5
 80012f8:	fb02 f203 	mul.w	r2, r2, r3
 80012fc:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 8001300:	4621      	mov	r1, r4
 8001302:	fb01 f303 	mul.w	r3, r1, r3
 8001306:	441a      	add	r2, r3
 8001308:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800130c:	4621      	mov	r1, r4
 800130e:	fba3 1301 	umull	r1, r3, r3, r1
 8001312:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8001316:	460b      	mov	r3, r1
 8001318:	f8c7 3100 	str.w	r3, [r7, #256]	@ 0x100
 800131c:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8001320:	18d3      	adds	r3, r2, r3
 8001322:	f8c7 3104 	str.w	r3, [r7, #260]	@ 0x104
 8001326:	f04f 0000 	mov.w	r0, #0
 800132a:	f04f 0100 	mov.w	r1, #0
 800132e:	e9d7 4540 	ldrd	r4, r5, [r7, #256]	@ 0x100
 8001332:	462b      	mov	r3, r5
 8001334:	0459      	lsls	r1, r3, #17
 8001336:	4623      	mov	r3, r4
 8001338:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 800133c:	4623      	mov	r3, r4
 800133e:	0458      	lsls	r0, r3, #17
 8001340:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001344:	1814      	adds	r4, r2, r0
 8001346:	643c      	str	r4, [r7, #64]	@ 0x40
 8001348:	414b      	adcs	r3, r1
 800134a:	647b      	str	r3, [r7, #68]	@ 0x44
 800134c:	e9d7 3410 	ldrd	r3, r4, [r7, #64]	@ 0x40
 8001350:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
    var2 = var2 + (((int64_t)bmp->calib.dig_P4) << 35);
 8001354:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001358:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 800135c:	b21b      	sxth	r3, r3
 800135e:	17da      	asrs	r2, r3, #31
 8001360:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8001364:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8001368:	f04f 0000 	mov.w	r0, #0
 800136c:	f04f 0100 	mov.w	r1, #0
 8001370:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8001374:	00d9      	lsls	r1, r3, #3
 8001376:	2000      	movs	r0, #0
 8001378:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 800137c:	1814      	adds	r4, r2, r0
 800137e:	63bc      	str	r4, [r7, #56]	@ 0x38
 8001380:	414b      	adcs	r3, r1
 8001382:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001384:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 8001388:	e9c7 3446 	strd	r3, r4, [r7, #280]	@ 0x118
    var1 = ((var1 * var1 * (int64_t)bmp->calib.dig_P3) >> 8) + ((var1 * (int64_t)bmp->calib.dig_P2) << 12);
 800138c:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 8001390:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001394:	fb03 f102 	mul.w	r1, r3, r2
 8001398:	f8d7 2124 	ldr.w	r2, [r7, #292]	@ 0x124
 800139c:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80013a0:	fb02 f303 	mul.w	r3, r2, r3
 80013a4:	18ca      	adds	r2, r1, r3
 80013a6:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 80013aa:	fba3 1303 	umull	r1, r3, r3, r3
 80013ae:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80013b2:	460b      	mov	r3, r1
 80013b4:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
 80013b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80013bc:	18d3      	adds	r3, r2, r3
 80013be:	f8c7 30fc 	str.w	r3, [r7, #252]	@ 0xfc
 80013c2:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80013c6:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 80013ca:	b21b      	sxth	r3, r3
 80013cc:	17da      	asrs	r2, r3, #31
 80013ce:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80013d2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80013d6:	e9d7 453e 	ldrd	r4, r5, [r7, #248]	@ 0xf8
 80013da:	462b      	mov	r3, r5
 80013dc:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80013e0:	4642      	mov	r2, r8
 80013e2:	fb02 f203 	mul.w	r2, r2, r3
 80013e6:	464b      	mov	r3, r9
 80013e8:	4621      	mov	r1, r4
 80013ea:	fb01 f303 	mul.w	r3, r1, r3
 80013ee:	4413      	add	r3, r2
 80013f0:	4622      	mov	r2, r4
 80013f2:	4641      	mov	r1, r8
 80013f4:	fba2 1201 	umull	r1, r2, r2, r1
 80013f8:	f8c7 20f4 	str.w	r2, [r7, #244]	@ 0xf4
 80013fc:	460a      	mov	r2, r1
 80013fe:	f8c7 20f0 	str.w	r2, [r7, #240]	@ 0xf0
 8001402:	f8d7 20f4 	ldr.w	r2, [r7, #244]	@ 0xf4
 8001406:	4413      	add	r3, r2
 8001408:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 800140c:	f04f 0000 	mov.w	r0, #0
 8001410:	f04f 0100 	mov.w	r1, #0
 8001414:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	@ 0xf0
 8001418:	4623      	mov	r3, r4
 800141a:	0a18      	lsrs	r0, r3, #8
 800141c:	462b      	mov	r3, r5
 800141e:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001422:	462b      	mov	r3, r5
 8001424:	1219      	asrs	r1, r3, #8
 8001426:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800142a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800142e:	b21b      	sxth	r3, r3
 8001430:	17da      	asrs	r2, r3, #31
 8001432:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001436:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 800143a:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 800143e:	e9d7 8926 	ldrd	r8, r9, [r7, #152]	@ 0x98
 8001442:	464a      	mov	r2, r9
 8001444:	fb02 f203 	mul.w	r2, r2, r3
 8001448:	f8d7 3124 	ldr.w	r3, [r7, #292]	@ 0x124
 800144c:	4644      	mov	r4, r8
 800144e:	fb04 f303 	mul.w	r3, r4, r3
 8001452:	441a      	add	r2, r3
 8001454:	f8d7 3120 	ldr.w	r3, [r7, #288]	@ 0x120
 8001458:	4644      	mov	r4, r8
 800145a:	fba3 4304 	umull	r4, r3, r3, r4
 800145e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8001462:	4623      	mov	r3, r4
 8001464:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8001468:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 800146c:	18d3      	adds	r3, r2, r3
 800146e:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8001472:	f04f 0200 	mov.w	r2, #0
 8001476:	f04f 0300 	mov.w	r3, #0
 800147a:	e9d7 893a 	ldrd	r8, r9, [r7, #232]	@ 0xe8
 800147e:	464c      	mov	r4, r9
 8001480:	0323      	lsls	r3, r4, #12
 8001482:	4644      	mov	r4, r8
 8001484:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8001488:	4644      	mov	r4, r8
 800148a:	0322      	lsls	r2, r4, #12
 800148c:	1884      	adds	r4, r0, r2
 800148e:	633c      	str	r4, [r7, #48]	@ 0x30
 8001490:	eb41 0303 	adc.w	r3, r1, r3
 8001494:	637b      	str	r3, [r7, #52]	@ 0x34
 8001496:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 800149a:	e9c7 3448 	strd	r3, r4, [r7, #288]	@ 0x120
    var1 = (((((int64_t)1) << 47) + var1)) * ((int64_t)bmp->calib.dig_P1) >> 33;
 800149e:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 80014a2:	f503 4100 	add.w	r1, r3, #32768	@ 0x8000
 80014a6:	f8c7 1094 	str.w	r1, [r7, #148]	@ 0x94
 80014aa:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
 80014ae:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80014b2:	88db      	ldrh	r3, [r3, #6]
 80014b4:	b29b      	uxth	r3, r3
 80014b6:	2200      	movs	r2, #0
 80014b8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80014bc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80014c0:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80014c4:	462b      	mov	r3, r5
 80014c6:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80014ca:	4642      	mov	r2, r8
 80014cc:	fb02 f203 	mul.w	r2, r2, r3
 80014d0:	464b      	mov	r3, r9
 80014d2:	4621      	mov	r1, r4
 80014d4:	fb01 f303 	mul.w	r3, r1, r3
 80014d8:	4413      	add	r3, r2
 80014da:	4622      	mov	r2, r4
 80014dc:	4641      	mov	r1, r8
 80014de:	fba2 1201 	umull	r1, r2, r2, r1
 80014e2:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 80014e6:	460a      	mov	r2, r1
 80014e8:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 80014ec:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 80014f0:	4413      	add	r3, r2
 80014f2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80014f6:	f04f 0200 	mov.w	r2, #0
 80014fa:	f04f 0300 	mov.w	r3, #0
 80014fe:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 8001502:	4629      	mov	r1, r5
 8001504:	104a      	asrs	r2, r1, #1
 8001506:	4629      	mov	r1, r5
 8001508:	17cb      	asrs	r3, r1, #31
 800150a:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
    if (var1 == 0) return 0; // avoid division by zero
 800150e:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001512:	4313      	orrs	r3, r2
 8001514:	d101      	bne.n	800151a <BMP280_CompensatePressure+0x2dc>
 8001516:	2300      	movs	r3, #0
 8001518:	e148      	b.n	80017ac <BMP280_CompensatePressure+0x56e>
    p = 1048576 - adc_P;
 800151a:	f8d7 3108 	ldr.w	r3, [r7, #264]	@ 0x108
 800151e:	f5c3 1380 	rsb	r3, r3, #1048576	@ 0x100000
 8001522:	17da      	asrs	r2, r3, #31
 8001524:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001526:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001528:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 800152c:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
    p = (((p << 31) - var2) * 3125) / var1;
 8001530:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8001534:	105b      	asrs	r3, r3, #1
 8001536:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800153a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 800153e:	07db      	lsls	r3, r3, #31
 8001540:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8001544:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001548:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 800154c:	4621      	mov	r1, r4
 800154e:	1a89      	subs	r1, r1, r2
 8001550:	67b9      	str	r1, [r7, #120]	@ 0x78
 8001552:	4629      	mov	r1, r5
 8001554:	eb61 0303 	sbc.w	r3, r1, r3
 8001558:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800155a:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 800155e:	4622      	mov	r2, r4
 8001560:	462b      	mov	r3, r5
 8001562:	1891      	adds	r1, r2, r2
 8001564:	6239      	str	r1, [r7, #32]
 8001566:	415b      	adcs	r3, r3
 8001568:	627b      	str	r3, [r7, #36]	@ 0x24
 800156a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800156e:	4621      	mov	r1, r4
 8001570:	1851      	adds	r1, r2, r1
 8001572:	61b9      	str	r1, [r7, #24]
 8001574:	4629      	mov	r1, r5
 8001576:	414b      	adcs	r3, r1
 8001578:	61fb      	str	r3, [r7, #28]
 800157a:	f04f 0200 	mov.w	r2, #0
 800157e:	f04f 0300 	mov.w	r3, #0
 8001582:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8001586:	4649      	mov	r1, r9
 8001588:	018b      	lsls	r3, r1, #6
 800158a:	4641      	mov	r1, r8
 800158c:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001590:	4641      	mov	r1, r8
 8001592:	018a      	lsls	r2, r1, #6
 8001594:	4641      	mov	r1, r8
 8001596:	1889      	adds	r1, r1, r2
 8001598:	6139      	str	r1, [r7, #16]
 800159a:	4649      	mov	r1, r9
 800159c:	eb43 0101 	adc.w	r1, r3, r1
 80015a0:	6179      	str	r1, [r7, #20]
 80015a2:	f04f 0200 	mov.w	r2, #0
 80015a6:	f04f 0300 	mov.w	r3, #0
 80015aa:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 80015ae:	4649      	mov	r1, r9
 80015b0:	008b      	lsls	r3, r1, #2
 80015b2:	4641      	mov	r1, r8
 80015b4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80015b8:	4641      	mov	r1, r8
 80015ba:	008a      	lsls	r2, r1, #2
 80015bc:	4610      	mov	r0, r2
 80015be:	4619      	mov	r1, r3
 80015c0:	4603      	mov	r3, r0
 80015c2:	4622      	mov	r2, r4
 80015c4:	189b      	adds	r3, r3, r2
 80015c6:	60bb      	str	r3, [r7, #8]
 80015c8:	460b      	mov	r3, r1
 80015ca:	462a      	mov	r2, r5
 80015cc:	eb42 0303 	adc.w	r3, r2, r3
 80015d0:	60fb      	str	r3, [r7, #12]
 80015d2:	f04f 0200 	mov.w	r2, #0
 80015d6:	f04f 0300 	mov.w	r3, #0
 80015da:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 80015de:	4649      	mov	r1, r9
 80015e0:	008b      	lsls	r3, r1, #2
 80015e2:	4641      	mov	r1, r8
 80015e4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80015e8:	4641      	mov	r1, r8
 80015ea:	008a      	lsls	r2, r1, #2
 80015ec:	4610      	mov	r0, r2
 80015ee:	4619      	mov	r1, r3
 80015f0:	4603      	mov	r3, r0
 80015f2:	4622      	mov	r2, r4
 80015f4:	189b      	adds	r3, r3, r2
 80015f6:	673b      	str	r3, [r7, #112]	@ 0x70
 80015f8:	462b      	mov	r3, r5
 80015fa:	460a      	mov	r2, r1
 80015fc:	eb42 0303 	adc.w	r3, r2, r3
 8001600:	677b      	str	r3, [r7, #116]	@ 0x74
 8001602:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001606:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 800160a:	f7ff fb1d 	bl	8000c48 <__aeabi_ldivmod>
 800160e:	4602      	mov	r2, r0
 8001610:	460b      	mov	r3, r1
 8001612:	e9c7 2344 	strd	r2, r3, [r7, #272]	@ 0x110
    var1 = (((int64_t)bmp->calib.dig_P9) * (p >> 13) * (p >> 13)) >> 25;
 8001616:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 800161a:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 800161e:	b21b      	sxth	r3, r3
 8001620:	17da      	asrs	r2, r3, #31
 8001622:	66bb      	str	r3, [r7, #104]	@ 0x68
 8001624:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8001626:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 800162a:	f04f 0000 	mov.w	r0, #0
 800162e:	f04f 0100 	mov.w	r1, #0
 8001632:	0b50      	lsrs	r0, r2, #13
 8001634:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001638:	1359      	asrs	r1, r3, #13
 800163a:	e9d7 451a 	ldrd	r4, r5, [r7, #104]	@ 0x68
 800163e:	462b      	mov	r3, r5
 8001640:	fb00 f203 	mul.w	r2, r0, r3
 8001644:	4623      	mov	r3, r4
 8001646:	fb03 f301 	mul.w	r3, r3, r1
 800164a:	4413      	add	r3, r2
 800164c:	4622      	mov	r2, r4
 800164e:	fba2 1200 	umull	r1, r2, r2, r0
 8001652:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8001656:	460a      	mov	r2, r1
 8001658:	f8c7 20d8 	str.w	r2, [r7, #216]	@ 0xd8
 800165c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8001660:	4413      	add	r3, r2
 8001662:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8001666:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 800166a:	f04f 0000 	mov.w	r0, #0
 800166e:	f04f 0100 	mov.w	r1, #0
 8001672:	0b50      	lsrs	r0, r2, #13
 8001674:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8001678:	1359      	asrs	r1, r3, #13
 800167a:	e9d7 4536 	ldrd	r4, r5, [r7, #216]	@ 0xd8
 800167e:	462b      	mov	r3, r5
 8001680:	fb00 f203 	mul.w	r2, r0, r3
 8001684:	4623      	mov	r3, r4
 8001686:	fb03 f301 	mul.w	r3, r3, r1
 800168a:	4413      	add	r3, r2
 800168c:	4622      	mov	r2, r4
 800168e:	fba2 1200 	umull	r1, r2, r2, r0
 8001692:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8001696:	460a      	mov	r2, r1
 8001698:	f8c7 20d0 	str.w	r2, [r7, #208]	@ 0xd0
 800169c:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 80016a0:	4413      	add	r3, r2
 80016a2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 80016a6:	f04f 0200 	mov.w	r2, #0
 80016aa:	f04f 0300 	mov.w	r3, #0
 80016ae:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 80016b2:	4621      	mov	r1, r4
 80016b4:	0e4a      	lsrs	r2, r1, #25
 80016b6:	4629      	mov	r1, r5
 80016b8:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 80016bc:	4629      	mov	r1, r5
 80016be:	164b      	asrs	r3, r1, #25
 80016c0:	e9c7 2348 	strd	r2, r3, [r7, #288]	@ 0x120
    var2 = (((int64_t)bmp->calib.dig_P8) * p) >> 19;
 80016c4:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 80016c8:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 80016cc:	b21b      	sxth	r3, r3
 80016ce:	17da      	asrs	r2, r3, #31
 80016d0:	663b      	str	r3, [r7, #96]	@ 0x60
 80016d2:	667a      	str	r2, [r7, #100]	@ 0x64
 80016d4:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 80016d8:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 80016dc:	462a      	mov	r2, r5
 80016de:	fb02 f203 	mul.w	r2, r2, r3
 80016e2:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 80016e6:	4621      	mov	r1, r4
 80016e8:	fb01 f303 	mul.w	r3, r1, r3
 80016ec:	4413      	add	r3, r2
 80016ee:	f8d7 2110 	ldr.w	r2, [r7, #272]	@ 0x110
 80016f2:	4621      	mov	r1, r4
 80016f4:	fba2 1201 	umull	r1, r2, r2, r1
 80016f8:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 80016fc:	460a      	mov	r2, r1
 80016fe:	f8c7 20c8 	str.w	r2, [r7, #200]	@ 0xc8
 8001702:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 8001706:	4413      	add	r3, r2
 8001708:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 800170c:	f04f 0200 	mov.w	r2, #0
 8001710:	f04f 0300 	mov.w	r3, #0
 8001714:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	@ 0xc8
 8001718:	4621      	mov	r1, r4
 800171a:	0cca      	lsrs	r2, r1, #19
 800171c:	4629      	mov	r1, r5
 800171e:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8001722:	4629      	mov	r1, r5
 8001724:	14cb      	asrs	r3, r1, #19
 8001726:	e9c7 2346 	strd	r2, r3, [r7, #280]	@ 0x118
    p = ((p + var1 + var2) >> 8) + (((int64_t)bmp->calib.dig_P7) << 4);
 800172a:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	@ 0x110
 800172e:	e9d7 2348 	ldrd	r2, r3, [r7, #288]	@ 0x120
 8001732:	1884      	adds	r4, r0, r2
 8001734:	65bc      	str	r4, [r7, #88]	@ 0x58
 8001736:	eb41 0303 	adc.w	r3, r1, r3
 800173a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800173c:	e9d7 2346 	ldrd	r2, r3, [r7, #280]	@ 0x118
 8001740:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 8001744:	4621      	mov	r1, r4
 8001746:	1889      	adds	r1, r1, r2
 8001748:	6539      	str	r1, [r7, #80]	@ 0x50
 800174a:	4629      	mov	r1, r5
 800174c:	eb43 0101 	adc.w	r1, r3, r1
 8001750:	6579      	str	r1, [r7, #84]	@ 0x54
 8001752:	f04f 0000 	mov.w	r0, #0
 8001756:	f04f 0100 	mov.w	r1, #0
 800175a:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 800175e:	4623      	mov	r3, r4
 8001760:	0a18      	lsrs	r0, r3, #8
 8001762:	462b      	mov	r3, r5
 8001764:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8001768:	462b      	mov	r3, r5
 800176a:	1219      	asrs	r1, r3, #8
 800176c:	f8d7 310c 	ldr.w	r3, [r7, #268]	@ 0x10c
 8001770:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8001774:	b21b      	sxth	r3, r3
 8001776:	17da      	asrs	r2, r3, #31
 8001778:	64bb      	str	r3, [r7, #72]	@ 0x48
 800177a:	64fa      	str	r2, [r7, #76]	@ 0x4c
 800177c:	f04f 0200 	mov.w	r2, #0
 8001780:	f04f 0300 	mov.w	r3, #0
 8001784:	e9d7 8912 	ldrd	r8, r9, [r7, #72]	@ 0x48
 8001788:	464c      	mov	r4, r9
 800178a:	0123      	lsls	r3, r4, #4
 800178c:	4644      	mov	r4, r8
 800178e:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8001792:	4644      	mov	r4, r8
 8001794:	0122      	lsls	r2, r4, #4
 8001796:	1884      	adds	r4, r0, r2
 8001798:	603c      	str	r4, [r7, #0]
 800179a:	eb41 0303 	adc.w	r3, r1, r3
 800179e:	607b      	str	r3, [r7, #4]
 80017a0:	e9d7 3400 	ldrd	r3, r4, [r7]
 80017a4:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
    return (uint32_t)p;
 80017a8:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
}
 80017ac:	4618      	mov	r0, r3
 80017ae:	f507 7794 	add.w	r7, r7, #296	@ 0x128
 80017b2:	46bd      	mov	sp, r7
 80017b4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

080017b8 <BMP280_Process_data>:
	}
	BMP280_Process_data(bmp);
	return HAL_OK;
}
// Read Temperature and Pressure
void BMP280_Process_data(BMP280_t *bmp) {
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b086      	sub	sp, #24
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
	uint8_t *data = bmp->buff;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	331c      	adds	r3, #28
 80017c4:	617b      	str	r3, [r7, #20]

	int32_t adc_T = ((int32_t)data[3] << 12) | ((int32_t)data[4] << 4) | (data[5] >> 4);
 80017c6:	697b      	ldr	r3, [r7, #20]
 80017c8:	3303      	adds	r3, #3
 80017ca:	781b      	ldrb	r3, [r3, #0]
 80017cc:	031a      	lsls	r2, r3, #12
 80017ce:	697b      	ldr	r3, [r7, #20]
 80017d0:	3304      	adds	r3, #4
 80017d2:	781b      	ldrb	r3, [r3, #0]
 80017d4:	011b      	lsls	r3, r3, #4
 80017d6:	4313      	orrs	r3, r2
 80017d8:	697a      	ldr	r2, [r7, #20]
 80017da:	3205      	adds	r2, #5
 80017dc:	7812      	ldrb	r2, [r2, #0]
 80017de:	0912      	lsrs	r2, r2, #4
 80017e0:	b2d2      	uxtb	r2, r2
 80017e2:	4313      	orrs	r3, r2
 80017e4:	613b      	str	r3, [r7, #16]
	int32_t adc_P = ((int32_t)data[0] << 12) | ((int32_t)data[1] << 4) | (data[2] >> 4);
 80017e6:	697b      	ldr	r3, [r7, #20]
 80017e8:	781b      	ldrb	r3, [r3, #0]
 80017ea:	031a      	lsls	r2, r3, #12
 80017ec:	697b      	ldr	r3, [r7, #20]
 80017ee:	3301      	adds	r3, #1
 80017f0:	781b      	ldrb	r3, [r3, #0]
 80017f2:	011b      	lsls	r3, r3, #4
 80017f4:	4313      	orrs	r3, r2
 80017f6:	697a      	ldr	r2, [r7, #20]
 80017f8:	3202      	adds	r2, #2
 80017fa:	7812      	ldrb	r2, [r2, #0]
 80017fc:	0912      	lsrs	r2, r2, #4
 80017fe:	b2d2      	uxtb	r2, r2
 8001800:	4313      	orrs	r3, r2
 8001802:	60fb      	str	r3, [r7, #12]

	// Compensate temperature
	bmp->temp = BMP280_CompensateTemperature(bmp, adc_T) / 100.f;
 8001804:	6939      	ldr	r1, [r7, #16]
 8001806:	6878      	ldr	r0, [r7, #4]
 8001808:	f7ff fce1 	bl	80011ce <BMP280_CompensateTemperature>
 800180c:	ee07 0a90 	vmov	s15, r0
 8001810:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001814:	eddf 6a0c 	vldr	s13, [pc, #48]	@ 8001848 <BMP280_Process_data+0x90>
 8001818:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	edc3 7a09 	vstr	s15, [r3, #36]	@ 0x24
	// Compensate pressure
	bmp->press = BMP280_CompensatePressure(bmp, adc_P) / 100.0f;
 8001822:	68f9      	ldr	r1, [r7, #12]
 8001824:	6878      	ldr	r0, [r7, #4]
 8001826:	f7ff fd0a 	bl	800123e <BMP280_CompensatePressure>
 800182a:	ee07 0a90 	vmov	s15, r0
 800182e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001832:	eddf 6a05 	vldr	s13, [pc, #20]	@ 8001848 <BMP280_Process_data+0x90>
 8001836:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	edc3 7a0a 	vstr	s15, [r3, #40]	@ 0x28
	return;
 8001840:	bf00      	nop
}
 8001842:	3718      	adds	r7, #24
 8001844:	46bd      	mov	sp, r7
 8001846:	bd80      	pop	{r7, pc}
 8001848:	42c80000 	.word	0x42c80000

0800184c <BMP280_Read_DMA>:

	return HAL_OK;
}

void BMP280_Read_DMA(BMP280_t *bmp)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b084      	sub	sp, #16
 8001850:	af02      	add	r7, sp, #8
 8001852:	6078      	str	r0, [r7, #4]
	HAL_I2C_Mem_Read_DMA(&hi2c1, BMP280_I2C_ADDR, BMP280_REG_PRESS_MSB, I2C_MEMADD_SIZE_8BIT, bmp->buff, 6);
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	331c      	adds	r3, #28
 8001858:	2206      	movs	r2, #6
 800185a:	9201      	str	r2, [sp, #4]
 800185c:	9300      	str	r3, [sp, #0]
 800185e:	2301      	movs	r3, #1
 8001860:	22f7      	movs	r2, #247	@ 0xf7
 8001862:	21ee      	movs	r1, #238	@ 0xee
 8001864:	4803      	ldr	r0, [pc, #12]	@ (8001874 <BMP280_Read_DMA+0x28>)
 8001866:	f003 fd0d 	bl	8005284 <HAL_I2C_Mem_Read_DMA>
}
 800186a:	bf00      	nop
 800186c:	3708      	adds	r7, #8
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}
 8001872:	bf00      	nop
 8001874:	20000444 	.word	0x20000444

08001878 <_ICM20948_Read_Gyro>:

#include "icm20948.h"
#include "i2c.h"

void _ICM20948_Read_Gyro(ICM20948_t* imu_data)
{
 8001878:	b580      	push	{r7, lr}
 800187a:	b088      	sub	sp, #32
 800187c:	af04      	add	r7, sp, #16
 800187e:	6078      	str	r0, [r7, #4]
	uint8_t * buff = imu_data->acc_gyro_buff;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	60fb      	str	r3, [r7, #12]
	HAL_I2C_Mem_Read(&hi2c1, ICM20948_ADDR, ICM20948_ACCEL_XOUT_H, I2C_MEMADD_SIZE_8BIT, buff, 14, 1000);
 8001884:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001888:	9302      	str	r3, [sp, #8]
 800188a:	230e      	movs	r3, #14
 800188c:	9301      	str	r3, [sp, #4]
 800188e:	68fb      	ldr	r3, [r7, #12]
 8001890:	9300      	str	r3, [sp, #0]
 8001892:	2301      	movs	r3, #1
 8001894:	222d      	movs	r2, #45	@ 0x2d
 8001896:	21d0      	movs	r1, #208	@ 0xd0
 8001898:	4829      	ldr	r0, [pc, #164]	@ (8001940 <_ICM20948_Read_Gyro+0xc8>)
 800189a:	f003 fac1 	bl	8004e20 <HAL_I2C_Mem_Read>
	imu_data->acce_raw[0] = (int16_t)((buff[0] << 8) | buff[1]);
 800189e:	68fb      	ldr	r3, [r7, #12]
 80018a0:	781b      	ldrb	r3, [r3, #0]
 80018a2:	021b      	lsls	r3, r3, #8
 80018a4:	b21a      	sxth	r2, r3
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	3301      	adds	r3, #1
 80018aa:	781b      	ldrb	r3, [r3, #0]
 80018ac:	b21b      	sxth	r3, r3
 80018ae:	4313      	orrs	r3, r2
 80018b0:	b21a      	sxth	r2, r3
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	829a      	strh	r2, [r3, #20]
	imu_data->acce_raw[1] = (int16_t)((buff[2] << 8) | buff[3]);
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	3302      	adds	r3, #2
 80018ba:	781b      	ldrb	r3, [r3, #0]
 80018bc:	021b      	lsls	r3, r3, #8
 80018be:	b21a      	sxth	r2, r3
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	3303      	adds	r3, #3
 80018c4:	781b      	ldrb	r3, [r3, #0]
 80018c6:	b21b      	sxth	r3, r3
 80018c8:	4313      	orrs	r3, r2
 80018ca:	b21a      	sxth	r2, r3
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	82da      	strh	r2, [r3, #22]
	imu_data->acce_raw[2] = (int16_t)((buff[4] << 8) | buff[5]);
 80018d0:	68fb      	ldr	r3, [r7, #12]
 80018d2:	3304      	adds	r3, #4
 80018d4:	781b      	ldrb	r3, [r3, #0]
 80018d6:	021b      	lsls	r3, r3, #8
 80018d8:	b21a      	sxth	r2, r3
 80018da:	68fb      	ldr	r3, [r7, #12]
 80018dc:	3305      	adds	r3, #5
 80018de:	781b      	ldrb	r3, [r3, #0]
 80018e0:	b21b      	sxth	r3, r3
 80018e2:	4313      	orrs	r3, r2
 80018e4:	b21a      	sxth	r2, r3
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	831a      	strh	r2, [r3, #24]

	// Read Gyroscope Data
	imu_data->gyro_raw[0] = (int16_t)((buff[8] << 8) | buff[9]);
 80018ea:	68fb      	ldr	r3, [r7, #12]
 80018ec:	3308      	adds	r3, #8
 80018ee:	781b      	ldrb	r3, [r3, #0]
 80018f0:	021b      	lsls	r3, r3, #8
 80018f2:	b21a      	sxth	r2, r3
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	3309      	adds	r3, #9
 80018f8:	781b      	ldrb	r3, [r3, #0]
 80018fa:	b21b      	sxth	r3, r3
 80018fc:	4313      	orrs	r3, r2
 80018fe:	b21a      	sxth	r2, r3
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	835a      	strh	r2, [r3, #26]
	imu_data->gyro_raw[1] = (int16_t)((buff[10] << 8) | buff[11]);
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	330a      	adds	r3, #10
 8001908:	781b      	ldrb	r3, [r3, #0]
 800190a:	021b      	lsls	r3, r3, #8
 800190c:	b21a      	sxth	r2, r3
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	330b      	adds	r3, #11
 8001912:	781b      	ldrb	r3, [r3, #0]
 8001914:	b21b      	sxth	r3, r3
 8001916:	4313      	orrs	r3, r2
 8001918:	b21a      	sxth	r2, r3
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	839a      	strh	r2, [r3, #28]
	imu_data->gyro_raw[2] = (int16_t)((buff[12] << 8) | buff[13]);
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	330c      	adds	r3, #12
 8001922:	781b      	ldrb	r3, [r3, #0]
 8001924:	021b      	lsls	r3, r3, #8
 8001926:	b21a      	sxth	r2, r3
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	330d      	adds	r3, #13
 800192c:	781b      	ldrb	r3, [r3, #0]
 800192e:	b21b      	sxth	r3, r3
 8001930:	4313      	orrs	r3, r2
 8001932:	b21a      	sxth	r2, r3
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	83da      	strh	r2, [r3, #30]
	return;
 8001938:	bf00      	nop
}
 800193a:	3710      	adds	r7, #16
 800193c:	46bd      	mov	sp, r7
 800193e:	bd80      	pop	{r7, pc}
 8001940:	20000444 	.word	0x20000444
 8001944:	00000000 	.word	0x00000000

08001948 <_ICM20948_Gyro_Calib>:

static void _ICM20948_Gyro_Calib(ICM20948_t* imu_data)
{
 8001948:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800194c:	b088      	sub	sp, #32
 800194e:	af04      	add	r7, sp, #16
 8001950:	6078      	str	r0, [r7, #4]
	const uint16_t Num = 2000;
 8001952:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001956:	817b      	strh	r3, [r7, #10]
	for(uint16_t i = 0; i < Num; i ++)
 8001958:	2300      	movs	r3, #0
 800195a:	81fb      	strh	r3, [r7, #14]
 800195c:	e02c      	b.n	80019b8 <_ICM20948_Gyro_Calib+0x70>
	{
		_ICM20948_Read_Gyro(imu_data);
 800195e:	6878      	ldr	r0, [r7, #4]
 8001960:	f7ff ff8a 	bl	8001878 <_ICM20948_Read_Gyro>
		for(uint8_t i = 0; i < 3; ++i)
 8001964:	2300      	movs	r3, #0
 8001966:	737b      	strb	r3, [r7, #13]
 8001968:	e01d      	b.n	80019a6 <_ICM20948_Gyro_Calib+0x5e>
			imu_data->gyro_offset[i] += imu_data->gyro_raw[i];
 800196a:	7b7b      	ldrb	r3, [r7, #13]
 800196c:	687a      	ldr	r2, [r7, #4]
 800196e:	3308      	adds	r3, #8
 8001970:	009b      	lsls	r3, r3, #2
 8001972:	4413      	add	r3, r2
 8001974:	ed93 7a00 	vldr	s14, [r3]
 8001978:	7b7b      	ldrb	r3, [r7, #13]
 800197a:	687a      	ldr	r2, [r7, #4]
 800197c:	330c      	adds	r3, #12
 800197e:	005b      	lsls	r3, r3, #1
 8001980:	4413      	add	r3, r2
 8001982:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001986:	ee07 3a90 	vmov	s15, r3
 800198a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800198e:	7b7b      	ldrb	r3, [r7, #13]
 8001990:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001994:	687a      	ldr	r2, [r7, #4]
 8001996:	3308      	adds	r3, #8
 8001998:	009b      	lsls	r3, r3, #2
 800199a:	4413      	add	r3, r2
 800199c:	edc3 7a00 	vstr	s15, [r3]
		for(uint8_t i = 0; i < 3; ++i)
 80019a0:	7b7b      	ldrb	r3, [r7, #13]
 80019a2:	3301      	adds	r3, #1
 80019a4:	737b      	strb	r3, [r7, #13]
 80019a6:	7b7b      	ldrb	r3, [r7, #13]
 80019a8:	2b02      	cmp	r3, #2
 80019aa:	d9de      	bls.n	800196a <_ICM20948_Gyro_Calib+0x22>
		HAL_Delay(2);
 80019ac:	2002      	movs	r0, #2
 80019ae:	f002 f949 	bl	8003c44 <HAL_Delay>
	for(uint16_t i = 0; i < Num; i ++)
 80019b2:	89fb      	ldrh	r3, [r7, #14]
 80019b4:	3301      	adds	r3, #1
 80019b6:	81fb      	strh	r3, [r7, #14]
 80019b8:	89fa      	ldrh	r2, [r7, #14]
 80019ba:	897b      	ldrh	r3, [r7, #10]
 80019bc:	429a      	cmp	r2, r3
 80019be:	d3ce      	bcc.n	800195e <_ICM20948_Gyro_Calib+0x16>
	}
	for(uint8_t i = 0; i < 3; ++i)
 80019c0:	2300      	movs	r3, #0
 80019c2:	733b      	strb	r3, [r7, #12]
 80019c4:	e017      	b.n	80019f6 <_ICM20948_Gyro_Calib+0xae>
		imu_data->gyro_offset[i] /= Num;
 80019c6:	7b3b      	ldrb	r3, [r7, #12]
 80019c8:	687a      	ldr	r2, [r7, #4]
 80019ca:	3308      	adds	r3, #8
 80019cc:	009b      	lsls	r3, r3, #2
 80019ce:	4413      	add	r3, r2
 80019d0:	edd3 6a00 	vldr	s13, [r3]
 80019d4:	897b      	ldrh	r3, [r7, #10]
 80019d6:	ee07 3a90 	vmov	s15, r3
 80019da:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019de:	7b3b      	ldrb	r3, [r7, #12]
 80019e0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80019e4:	687a      	ldr	r2, [r7, #4]
 80019e6:	3308      	adds	r3, #8
 80019e8:	009b      	lsls	r3, r3, #2
 80019ea:	4413      	add	r3, r2
 80019ec:	edc3 7a00 	vstr	s15, [r3]
	for(uint8_t i = 0; i < 3; ++i)
 80019f0:	7b3b      	ldrb	r3, [r7, #12]
 80019f2:	3301      	adds	r3, #1
 80019f4:	733b      	strb	r3, [r7, #12]
 80019f6:	7b3b      	ldrb	r3, [r7, #12]
 80019f8:	2b02      	cmp	r3, #2
 80019fa:	d9e4      	bls.n	80019c6 <_ICM20948_Gyro_Calib+0x7e>
	printf("%.5f %.5f %.5f\r\n", imu_data->gyro_offset[0]/65.5, imu_data->gyro_offset[1]/65.5, imu_data->gyro_offset[2]/65.5);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6a1b      	ldr	r3, [r3, #32]
 8001a00:	4618      	mov	r0, r3
 8001a02:	f7fe fda1 	bl	8000548 <__aeabi_f2d>
 8001a06:	a319      	add	r3, pc, #100	@ (adr r3, 8001a6c <_ICM20948_Gyro_Calib+0x124>)
 8001a08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a0c:	f7fe ff1e 	bl	800084c <__aeabi_ddiv>
 8001a10:	4602      	mov	r2, r0
 8001a12:	460b      	mov	r3, r1
 8001a14:	4690      	mov	r8, r2
 8001a16:	4699      	mov	r9, r3
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	f7fe fd93 	bl	8000548 <__aeabi_f2d>
 8001a22:	a312      	add	r3, pc, #72	@ (adr r3, 8001a6c <_ICM20948_Gyro_Calib+0x124>)
 8001a24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a28:	f7fe ff10 	bl	800084c <__aeabi_ddiv>
 8001a2c:	4602      	mov	r2, r0
 8001a2e:	460b      	mov	r3, r1
 8001a30:	4614      	mov	r4, r2
 8001a32:	461d      	mov	r5, r3
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001a38:	4618      	mov	r0, r3
 8001a3a:	f7fe fd85 	bl	8000548 <__aeabi_f2d>
 8001a3e:	a30b      	add	r3, pc, #44	@ (adr r3, 8001a6c <_ICM20948_Gyro_Calib+0x124>)
 8001a40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a44:	f7fe ff02 	bl	800084c <__aeabi_ddiv>
 8001a48:	4602      	mov	r2, r0
 8001a4a:	460b      	mov	r3, r1
 8001a4c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001a50:	e9cd 4500 	strd	r4, r5, [sp]
 8001a54:	4642      	mov	r2, r8
 8001a56:	464b      	mov	r3, r9
 8001a58:	4803      	ldr	r0, [pc, #12]	@ (8001a68 <_ICM20948_Gyro_Calib+0x120>)
 8001a5a:	f00b fe97 	bl	800d78c <iprintf>
	return;
 8001a5e:	bf00      	nop
}
 8001a60:	3710      	adds	r7, #16
 8001a62:	46bd      	mov	sp, r7
 8001a64:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001a68:	080100c0 	.word	0x080100c0
 8001a6c:	00000000 	.word	0x00000000
 8001a70:	40506000 	.word	0x40506000

08001a74 <ICM20948_WriteRegister>:

// Function to write to a register
HAL_StatusTypeDef ICM20948_WriteRegister(I2C_HandleTypeDef *hi2c, uint8_t reg, uint8_t data) {
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b086      	sub	sp, #24
 8001a78:	af04      	add	r7, sp, #16
 8001a7a:	6078      	str	r0, [r7, #4]
 8001a7c:	460b      	mov	r3, r1
 8001a7e:	70fb      	strb	r3, [r7, #3]
 8001a80:	4613      	mov	r3, r2
 8001a82:	70bb      	strb	r3, [r7, #2]
    return HAL_I2C_Mem_Write(hi2c, ICM20948_ADDR, reg, 1, &data, 1, HAL_MAX_DELAY);
 8001a84:	78fb      	ldrb	r3, [r7, #3]
 8001a86:	b29a      	uxth	r2, r3
 8001a88:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001a8c:	9302      	str	r3, [sp, #8]
 8001a8e:	2301      	movs	r3, #1
 8001a90:	9301      	str	r3, [sp, #4]
 8001a92:	1cbb      	adds	r3, r7, #2
 8001a94:	9300      	str	r3, [sp, #0]
 8001a96:	2301      	movs	r3, #1
 8001a98:	21d0      	movs	r1, #208	@ 0xd0
 8001a9a:	6878      	ldr	r0, [r7, #4]
 8001a9c:	f003 f8c6 	bl	8004c2c <HAL_I2C_Mem_Write>
 8001aa0:	4603      	mov	r3, r0
}
 8001aa2:	4618      	mov	r0, r3
 8001aa4:	3708      	adds	r7, #8
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}

08001aaa <ICM20948_ReadRegister>:

// Function to read from a register
HAL_StatusTypeDef ICM20948_ReadRegister(I2C_HandleTypeDef *hi2c, uint8_t reg, uint8_t *data) {
 8001aaa:	b580      	push	{r7, lr}
 8001aac:	b088      	sub	sp, #32
 8001aae:	af04      	add	r7, sp, #16
 8001ab0:	60f8      	str	r0, [r7, #12]
 8001ab2:	460b      	mov	r3, r1
 8001ab4:	607a      	str	r2, [r7, #4]
 8001ab6:	72fb      	strb	r3, [r7, #11]
    return HAL_I2C_Mem_Read(hi2c, ICM20948_ADDR, reg, 1, data, 1, HAL_MAX_DELAY);
 8001ab8:	7afb      	ldrb	r3, [r7, #11]
 8001aba:	b29a      	uxth	r2, r3
 8001abc:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001ac0:	9302      	str	r3, [sp, #8]
 8001ac2:	2301      	movs	r3, #1
 8001ac4:	9301      	str	r3, [sp, #4]
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	9300      	str	r3, [sp, #0]
 8001aca:	2301      	movs	r3, #1
 8001acc:	21d0      	movs	r1, #208	@ 0xd0
 8001ace:	68f8      	ldr	r0, [r7, #12]
 8001ad0:	f003 f9a6 	bl	8004e20 <HAL_I2C_Mem_Read>
 8001ad4:	4603      	mov	r3, r0
}
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	3710      	adds	r7, #16
 8001ada:	46bd      	mov	sp, r7
 8001adc:	bd80      	pop	{r7, pc}

08001ade <ICM20948_SwitchBank>:

// Function to switch bank
HAL_StatusTypeDef ICM20948_SwitchBank(I2C_HandleTypeDef *hi2c, uint8_t bank) {
 8001ade:	b580      	push	{r7, lr}
 8001ae0:	b082      	sub	sp, #8
 8001ae2:	af00      	add	r7, sp, #0
 8001ae4:	6078      	str	r0, [r7, #4]
 8001ae6:	460b      	mov	r3, r1
 8001ae8:	70fb      	strb	r3, [r7, #3]
    return ICM20948_WriteRegister(hi2c, ICM20948_REG_BANK_SEL, bank);
 8001aea:	78fb      	ldrb	r3, [r7, #3]
 8001aec:	461a      	mov	r2, r3
 8001aee:	217f      	movs	r1, #127	@ 0x7f
 8001af0:	6878      	ldr	r0, [r7, #4]
 8001af2:	f7ff ffbf 	bl	8001a74 <ICM20948_WriteRegister>
 8001af6:	4603      	mov	r3, r0
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	3708      	adds	r7, #8
 8001afc:	46bd      	mov	sp, r7
 8001afe:	bd80      	pop	{r7, pc}

08001b00 <ICM20948_Init>:

// Initialization function
HAL_StatusTypeDef ICM20948_Init(ICM20948_t* imu_data) {
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b084      	sub	sp, #16
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	6078      	str	r0, [r7, #4]
    uint8_t data;

    // Reset ICM20948
    ICM20948_WriteRegister(&hi2c1, ICM20948_REG_BANK_SEL, ICM20948_USER_BANK_0);
 8001b08:	2200      	movs	r2, #0
 8001b0a:	217f      	movs	r1, #127	@ 0x7f
 8001b0c:	4824      	ldr	r0, [pc, #144]	@ (8001ba0 <ICM20948_Init+0xa0>)
 8001b0e:	f7ff ffb1 	bl	8001a74 <ICM20948_WriteRegister>
    ICM20948_WriteRegister(&hi2c1, ICM20948_PWR_MGMT_1, 0x80); // Reset device
 8001b12:	2280      	movs	r2, #128	@ 0x80
 8001b14:	2106      	movs	r1, #6
 8001b16:	4822      	ldr	r0, [pc, #136]	@ (8001ba0 <ICM20948_Init+0xa0>)
 8001b18:	f7ff ffac 	bl	8001a74 <ICM20948_WriteRegister>
    HAL_Delay(10);
 8001b1c:	200a      	movs	r0, #10
 8001b1e:	f002 f891 	bl	8003c44 <HAL_Delay>

    // Wake up ICM20948
    ICM20948_WriteRegister(&hi2c1, ICM20948_PWR_MGMT_1, 0x01); // Enable clock
 8001b22:	2201      	movs	r2, #1
 8001b24:	2106      	movs	r1, #6
 8001b26:	481e      	ldr	r0, [pc, #120]	@ (8001ba0 <ICM20948_Init+0xa0>)
 8001b28:	f7ff ffa4 	bl	8001a74 <ICM20948_WriteRegister>
    //ICM20948_WriteRegister(&hi2c1, ICM20948_PWR_MGMT_2, 0x00); // Enable all
    //ICM20948_SwitchBank(&hi2c1, ICM20948_USER_BANK_2);
    ICM20948_WriteRegister(&hi2c1, ICM20948_REG_BANK_SEL, ICM20948_USER_BANK_2);
 8001b2c:	2220      	movs	r2, #32
 8001b2e:	217f      	movs	r1, #127	@ 0x7f
 8001b30:	481b      	ldr	r0, [pc, #108]	@ (8001ba0 <ICM20948_Init+0xa0>)
 8001b32:	f7ff ff9f 	bl	8001a74 <ICM20948_WriteRegister>

    // Configure gyroscope
    ICM20948_WriteRegister(&hi2c1, ICM20948_GYRO_SMPLRT_DIV, 0x09);
 8001b36:	2209      	movs	r2, #9
 8001b38:	2100      	movs	r1, #0
 8001b3a:	4819      	ldr	r0, [pc, #100]	@ (8001ba0 <ICM20948_Init+0xa0>)
 8001b3c:	f7ff ff9a 	bl	8001a74 <ICM20948_WriteRegister>
    ICM20948_WriteRegister(&hi2c1, ICM20948_GYRO_CONFIG,
 8001b40:	2213      	movs	r2, #19
 8001b42:	2101      	movs	r1, #1
 8001b44:	4816      	ldr	r0, [pc, #88]	@ (8001ba0 <ICM20948_Init+0xa0>)
 8001b46:	f7ff ff95 	bl	8001a74 <ICM20948_WriteRegister>
                      REG_VAL_BIT_GYRO_DLPCFG_2 | REG_VAL_BIT_GYRO_FS_500DPS | REG_VAL_BIT_GYRO_DLPF);
    // Configure accelerometer
    ICM20948_WriteRegister(&hi2c1, ICM20948_ACCEL_SMPLRT_DIV,  0x09);
 8001b4a:	2209      	movs	r2, #9
 8001b4c:	2111      	movs	r1, #17
 8001b4e:	4814      	ldr	r0, [pc, #80]	@ (8001ba0 <ICM20948_Init+0xa0>)
 8001b50:	f7ff ff90 	bl	8001a74 <ICM20948_WriteRegister>
    ICM20948_WriteRegister(&hi2c1, ICM20948_ACCEL_CONFIG,
 8001b54:	2211      	movs	r2, #17
 8001b56:	2114      	movs	r1, #20
 8001b58:	4811      	ldr	r0, [pc, #68]	@ (8001ba0 <ICM20948_Init+0xa0>)
 8001b5a:	f7ff ff8b 	bl	8001a74 <ICM20948_WriteRegister>
                      REG_VAL_BIT_ACCEL_DLPCFG_2 | REG_VAL_BIT_ACCEL_FS_2g | REG_VAL_BIT_ACCEL_DLPF);

    /* user bank 0 register */
    ICM20948_WriteRegister(&hi2c1, ICM20948_REG_BANK_SEL, ICM20948_USER_BANK_0);
 8001b5e:	2200      	movs	r2, #0
 8001b60:	217f      	movs	r1, #127	@ 0x7f
 8001b62:	480f      	ldr	r0, [pc, #60]	@ (8001ba0 <ICM20948_Init+0xa0>)
 8001b64:	f7ff ff86 	bl	8001a74 <ICM20948_WriteRegister>
    HAL_Delay(10);
 8001b68:	200a      	movs	r0, #10
 8001b6a:	f002 f86b 	bl	8003c44 <HAL_Delay>

    // Verify WHO_AM_I
    ICM20948_ReadRegister(&hi2c1, ICM20948_WHO_AM_I, &data);
 8001b6e:	f107 030f 	add.w	r3, r7, #15
 8001b72:	461a      	mov	r2, r3
 8001b74:	2100      	movs	r1, #0
 8001b76:	480a      	ldr	r0, [pc, #40]	@ (8001ba0 <ICM20948_Init+0xa0>)
 8001b78:	f7ff ff97 	bl	8001aaa <ICM20948_ReadRegister>
    if (data != 0xEA) {
 8001b7c:	7bfb      	ldrb	r3, [r7, #15]
 8001b7e:	2bea      	cmp	r3, #234	@ 0xea
 8001b80:	d001      	beq.n	8001b86 <ICM20948_Init+0x86>
        return HAL_ERROR; // Failed to detect ICM20948
 8001b82:	2301      	movs	r3, #1
 8001b84:	e008      	b.n	8001b98 <ICM20948_Init+0x98>
    }
    _ICM20948_Gyro_Calib(imu_data);
 8001b86:	6878      	ldr	r0, [r7, #4]
 8001b88:	f7ff fede 	bl	8001948 <_ICM20948_Gyro_Calib>
    printf("ICM20948 done gyro calib\r\n");
 8001b8c:	4805      	ldr	r0, [pc, #20]	@ (8001ba4 <ICM20948_Init+0xa4>)
 8001b8e:	f00b fe65 	bl	800d85c <puts>
    return Magnetometer_Init();
 8001b92:	f000 f8c3 	bl	8001d1c <Magnetometer_Init>
 8001b96:	4603      	mov	r3, r0
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	3710      	adds	r7, #16
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	20000444 	.word	0x20000444
 8001ba4:	080100d4 	.word	0x080100d4

08001ba8 <ICM20948_ReadDMA>:

void ICM20948_ReadDMA(ICM20948_t* imu_data) {
 8001ba8:	b580      	push	{r7, lr}
 8001baa:	b084      	sub	sp, #16
 8001bac:	af02      	add	r7, sp, #8
 8001bae:	6078      	str	r0, [r7, #4]
    // Trigger DMA read for accel and gyro data (14 bytes total)
    HAL_I2C_Mem_Read_DMA(&hi2c1, ICM20948_ADDR, ICM20948_ACCEL_XOUT_H, 1, imu_data->acc_gyro_buff, 14);
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	220e      	movs	r2, #14
 8001bb4:	9201      	str	r2, [sp, #4]
 8001bb6:	9300      	str	r3, [sp, #0]
 8001bb8:	2301      	movs	r3, #1
 8001bba:	222d      	movs	r2, #45	@ 0x2d
 8001bbc:	21d0      	movs	r1, #208	@ 0xd0
 8001bbe:	4803      	ldr	r0, [pc, #12]	@ (8001bcc <ICM20948_ReadDMA+0x24>)
 8001bc0:	f003 fb60 	bl	8005284 <HAL_I2C_Mem_Read_DMA>
}
 8001bc4:	bf00      	nop
 8001bc6:	3708      	adds	r7, #8
 8001bc8:	46bd      	mov	sp, r7
 8001bca:	bd80      	pop	{r7, pc}
 8001bcc:	20000444 	.word	0x20000444

08001bd0 <ICM20948_Process_Gyro_data>:
void ICM20948_Process_Gyro_data(ICM20948_t* imu_data)
{
 8001bd0:	b480      	push	{r7}
 8001bd2:	b085      	sub	sp, #20
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	6078      	str	r0, [r7, #4]
	uint8_t *buff = imu_data->acc_gyro_buff;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	60bb      	str	r3, [r7, #8]
	// Read Accelerometer Data
	imu_data->acce_raw[0] = (int16_t)((buff[0] << 8) | buff[1]);
 8001bdc:	68bb      	ldr	r3, [r7, #8]
 8001bde:	781b      	ldrb	r3, [r3, #0]
 8001be0:	021b      	lsls	r3, r3, #8
 8001be2:	b21a      	sxth	r2, r3
 8001be4:	68bb      	ldr	r3, [r7, #8]
 8001be6:	3301      	adds	r3, #1
 8001be8:	781b      	ldrb	r3, [r3, #0]
 8001bea:	b21b      	sxth	r3, r3
 8001bec:	4313      	orrs	r3, r2
 8001bee:	b21a      	sxth	r2, r3
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	829a      	strh	r2, [r3, #20]
	imu_data->acce_raw[1] = (int16_t)((buff[2] << 8) | buff[3]);
 8001bf4:	68bb      	ldr	r3, [r7, #8]
 8001bf6:	3302      	adds	r3, #2
 8001bf8:	781b      	ldrb	r3, [r3, #0]
 8001bfa:	021b      	lsls	r3, r3, #8
 8001bfc:	b21a      	sxth	r2, r3
 8001bfe:	68bb      	ldr	r3, [r7, #8]
 8001c00:	3303      	adds	r3, #3
 8001c02:	781b      	ldrb	r3, [r3, #0]
 8001c04:	b21b      	sxth	r3, r3
 8001c06:	4313      	orrs	r3, r2
 8001c08:	b21a      	sxth	r2, r3
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	82da      	strh	r2, [r3, #22]
	imu_data->acce_raw[2] = (int16_t)((buff[4] << 8) | buff[5]);
 8001c0e:	68bb      	ldr	r3, [r7, #8]
 8001c10:	3304      	adds	r3, #4
 8001c12:	781b      	ldrb	r3, [r3, #0]
 8001c14:	021b      	lsls	r3, r3, #8
 8001c16:	b21a      	sxth	r2, r3
 8001c18:	68bb      	ldr	r3, [r7, #8]
 8001c1a:	3305      	adds	r3, #5
 8001c1c:	781b      	ldrb	r3, [r3, #0]
 8001c1e:	b21b      	sxth	r3, r3
 8001c20:	4313      	orrs	r3, r2
 8001c22:	b21a      	sxth	r2, r3
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	831a      	strh	r2, [r3, #24]
	for(uint8_t i = 0; i < 3; ++i)
 8001c28:	2300      	movs	r3, #0
 8001c2a:	73fb      	strb	r3, [r7, #15]
 8001c2c:	e019      	b.n	8001c62 <ICM20948_Process_Gyro_data+0x92>
		imu_data->acce[i] = imu_data->acce_raw[i] / 16384.0f; // Convert raw data to g
 8001c2e:	7bfb      	ldrb	r3, [r7, #15]
 8001c30:	687a      	ldr	r2, [r7, #4]
 8001c32:	3308      	adds	r3, #8
 8001c34:	005b      	lsls	r3, r3, #1
 8001c36:	4413      	add	r3, r2
 8001c38:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8001c3c:	ee07 3a90 	vmov	s15, r3
 8001c40:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001c44:	7bfb      	ldrb	r3, [r7, #15]
 8001c46:	eddf 6a33 	vldr	s13, [pc, #204]	@ 8001d14 <ICM20948_Process_Gyro_data+0x144>
 8001c4a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001c4e:	687a      	ldr	r2, [r7, #4]
 8001c50:	330a      	adds	r3, #10
 8001c52:	009b      	lsls	r3, r3, #2
 8001c54:	4413      	add	r3, r2
 8001c56:	3304      	adds	r3, #4
 8001c58:	edc3 7a00 	vstr	s15, [r3]
	for(uint8_t i = 0; i < 3; ++i)
 8001c5c:	7bfb      	ldrb	r3, [r7, #15]
 8001c5e:	3301      	adds	r3, #1
 8001c60:	73fb      	strb	r3, [r7, #15]
 8001c62:	7bfb      	ldrb	r3, [r7, #15]
 8001c64:	2b02      	cmp	r3, #2
 8001c66:	d9e2      	bls.n	8001c2e <ICM20948_Process_Gyro_data+0x5e>
	// Read Gyroscope Data
	imu_data->gyro_raw[0] = (int16_t)((buff[8] << 8) | buff[9]);
 8001c68:	68bb      	ldr	r3, [r7, #8]
 8001c6a:	3308      	adds	r3, #8
 8001c6c:	781b      	ldrb	r3, [r3, #0]
 8001c6e:	021b      	lsls	r3, r3, #8
 8001c70:	b21a      	sxth	r2, r3
 8001c72:	68bb      	ldr	r3, [r7, #8]
 8001c74:	3309      	adds	r3, #9
 8001c76:	781b      	ldrb	r3, [r3, #0]
 8001c78:	b21b      	sxth	r3, r3
 8001c7a:	4313      	orrs	r3, r2
 8001c7c:	b21a      	sxth	r2, r3
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	835a      	strh	r2, [r3, #26]
	imu_data->gyro_raw[1] = (int16_t)((buff[10] << 8) | buff[11]);
 8001c82:	68bb      	ldr	r3, [r7, #8]
 8001c84:	330a      	adds	r3, #10
 8001c86:	781b      	ldrb	r3, [r3, #0]
 8001c88:	021b      	lsls	r3, r3, #8
 8001c8a:	b21a      	sxth	r2, r3
 8001c8c:	68bb      	ldr	r3, [r7, #8]
 8001c8e:	330b      	adds	r3, #11
 8001c90:	781b      	ldrb	r3, [r3, #0]
 8001c92:	b21b      	sxth	r3, r3
 8001c94:	4313      	orrs	r3, r2
 8001c96:	b21a      	sxth	r2, r3
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	839a      	strh	r2, [r3, #28]
	imu_data->gyro_raw[2] = (int16_t)((buff[12] << 8) | buff[13]);
 8001c9c:	68bb      	ldr	r3, [r7, #8]
 8001c9e:	330c      	adds	r3, #12
 8001ca0:	781b      	ldrb	r3, [r3, #0]
 8001ca2:	021b      	lsls	r3, r3, #8
 8001ca4:	b21a      	sxth	r2, r3
 8001ca6:	68bb      	ldr	r3, [r7, #8]
 8001ca8:	330d      	adds	r3, #13
 8001caa:	781b      	ldrb	r3, [r3, #0]
 8001cac:	b21b      	sxth	r3, r3
 8001cae:	4313      	orrs	r3, r2
 8001cb0:	b21a      	sxth	r2, r3
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	83da      	strh	r2, [r3, #30]
	for(uint8_t i = 0; i < 3; ++i)
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	73bb      	strb	r3, [r7, #14]
 8001cba:	e021      	b.n	8001d00 <ICM20948_Process_Gyro_data+0x130>
	{
		imu_data->gyro[i] = (imu_data->gyro_raw[i] - imu_data->gyro_offset[i]) / 65.5f; // Convert raw data to dps
 8001cbc:	7bbb      	ldrb	r3, [r7, #14]
 8001cbe:	687a      	ldr	r2, [r7, #4]
 8001cc0:	330c      	adds	r3, #12
 8001cc2:	005b      	lsls	r3, r3, #1
 8001cc4:	4413      	add	r3, r2
 8001cc6:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 8001cca:	ee07 3a90 	vmov	s15, r3
 8001cce:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001cd2:	7bbb      	ldrb	r3, [r7, #14]
 8001cd4:	687a      	ldr	r2, [r7, #4]
 8001cd6:	3308      	adds	r3, #8
 8001cd8:	009b      	lsls	r3, r3, #2
 8001cda:	4413      	add	r3, r2
 8001cdc:	edd3 7a00 	vldr	s15, [r3]
 8001ce0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001ce4:	7bbb      	ldrb	r3, [r7, #14]
 8001ce6:	eddf 6a0c 	vldr	s13, [pc, #48]	@ 8001d18 <ICM20948_Process_Gyro_data+0x148>
 8001cea:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001cee:	687a      	ldr	r2, [r7, #4]
 8001cf0:	330e      	adds	r3, #14
 8001cf2:	009b      	lsls	r3, r3, #2
 8001cf4:	4413      	add	r3, r2
 8001cf6:	edc3 7a00 	vstr	s15, [r3]
	for(uint8_t i = 0; i < 3; ++i)
 8001cfa:	7bbb      	ldrb	r3, [r7, #14]
 8001cfc:	3301      	adds	r3, #1
 8001cfe:	73bb      	strb	r3, [r7, #14]
 8001d00:	7bbb      	ldrb	r3, [r7, #14]
 8001d02:	2b02      	cmp	r3, #2
 8001d04:	d9da      	bls.n	8001cbc <ICM20948_Process_Gyro_data+0xec>
	}

}
 8001d06:	bf00      	nop
 8001d08:	bf00      	nop
 8001d0a:	3714      	adds	r7, #20
 8001d0c:	46bd      	mov	sp, r7
 8001d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d12:	4770      	bx	lr
 8001d14:	46800000 	.word	0x46800000
 8001d18:	42830000 	.word	0x42830000

08001d1c <Magnetometer_Init>:

uint8_t Magnetometer_Init(void)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b086      	sub	sp, #24
 8001d20:	af04      	add	r7, sp, #16
	uint8_t mag_data;

	// Switch to Bank 0
	ICM20948_SwitchBank(&hi2c1, ICM20948_USER_BANK_0);
 8001d22:	2100      	movs	r1, #0
 8001d24:	481f      	ldr	r0, [pc, #124]	@ (8001da4 <Magnetometer_Init+0x88>)
 8001d26:	f7ff feda 	bl	8001ade <ICM20948_SwitchBank>

	// Enable I2C bypass mode to directly access the magnetometer
	ICM20948_WriteRegister(&hi2c1, REG_ADD_INT_PIN_CFG, REG_VAL_BIT_I2C_BYPASS_EN);
 8001d2a:	2202      	movs	r2, #2
 8001d2c:	210f      	movs	r1, #15
 8001d2e:	481d      	ldr	r0, [pc, #116]	@ (8001da4 <Magnetometer_Init+0x88>)
 8001d30:	f7ff fea0 	bl	8001a74 <ICM20948_WriteRegister>

	// Wait briefly to stabilize
	HAL_Delay(10);
 8001d34:	200a      	movs	r0, #10
 8001d36:	f001 ff85 	bl	8003c44 <HAL_Delay>

	// Check magnetometer WHO_AM_I register directly
	HAL_StatusTypeDef status = HAL_I2C_Mem_Read(&hi2c1, ICM20948_MAG_ADDR, AK09916_WIA2, 1, &mag_data, 1, HAL_MAX_DELAY);
 8001d3a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001d3e:	9302      	str	r3, [sp, #8]
 8001d40:	2301      	movs	r3, #1
 8001d42:	9301      	str	r3, [sp, #4]
 8001d44:	1dbb      	adds	r3, r7, #6
 8001d46:	9300      	str	r3, [sp, #0]
 8001d48:	2301      	movs	r3, #1
 8001d4a:	2201      	movs	r2, #1
 8001d4c:	2118      	movs	r1, #24
 8001d4e:	4815      	ldr	r0, [pc, #84]	@ (8001da4 <Magnetometer_Init+0x88>)
 8001d50:	f003 f866 	bl	8004e20 <HAL_I2C_Mem_Read>
 8001d54:	4603      	mov	r3, r0
 8001d56:	71fb      	strb	r3, [r7, #7]
	if (status != HAL_OK || mag_data != 0x09) {
 8001d58:	79fb      	ldrb	r3, [r7, #7]
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d102      	bne.n	8001d64 <Magnetometer_Init+0x48>
 8001d5e:	79bb      	ldrb	r3, [r7, #6]
 8001d60:	2b09      	cmp	r3, #9
 8001d62:	d001      	beq.n	8001d68 <Magnetometer_Init+0x4c>
		return HAL_ERROR; // Magnetometer not detected
 8001d64:	2301      	movs	r3, #1
 8001d66:	e019      	b.n	8001d9c <Magnetometer_Init+0x80>
	}

	// Configure the magnetometer to continuous measurement mode
	uint8_t mag_ctrl_data = AK09916_CNTL2_MODE_CONT;
 8001d68:	2308      	movs	r3, #8
 8001d6a:	717b      	strb	r3, [r7, #5]
	status = HAL_I2C_Mem_Write(&hi2c1, ICM20948_MAG_ADDR, AK09916_CNTL2, 1, &mag_ctrl_data, 1, HAL_MAX_DELAY);
 8001d6c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001d70:	9302      	str	r3, [sp, #8]
 8001d72:	2301      	movs	r3, #1
 8001d74:	9301      	str	r3, [sp, #4]
 8001d76:	1d7b      	adds	r3, r7, #5
 8001d78:	9300      	str	r3, [sp, #0]
 8001d7a:	2301      	movs	r3, #1
 8001d7c:	2231      	movs	r2, #49	@ 0x31
 8001d7e:	2118      	movs	r1, #24
 8001d80:	4808      	ldr	r0, [pc, #32]	@ (8001da4 <Magnetometer_Init+0x88>)
 8001d82:	f002 ff53 	bl	8004c2c <HAL_I2C_Mem_Write>
 8001d86:	4603      	mov	r3, r0
 8001d88:	71fb      	strb	r3, [r7, #7]
	if (status != HAL_OK) {
 8001d8a:	79fb      	ldrb	r3, [r7, #7]
 8001d8c:	2b00      	cmp	r3, #0
 8001d8e:	d001      	beq.n	8001d94 <Magnetometer_Init+0x78>
		return HAL_ERROR; // Failed to configure magnetometer
 8001d90:	2301      	movs	r3, #1
 8001d92:	e003      	b.n	8001d9c <Magnetometer_Init+0x80>
	}

	// Wait for the magnetometer to stabilize
	HAL_Delay(10);
 8001d94:	200a      	movs	r0, #10
 8001d96:	f001 ff55 	bl	8003c44 <HAL_Delay>

	return HAL_OK; // Magnetometer initialized successfully
 8001d9a:	2300      	movs	r3, #0
}
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	3708      	adds	r7, #8
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	20000444 	.word	0x20000444

08001da8 <Magnetometer_ReadDMA>:

    return HAL_OK; // Success
}


void Magnetometer_ReadDMA(ICM20948_t* imu_data) {
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b084      	sub	sp, #16
 8001dac:	af02      	add	r7, sp, #8
 8001dae:	6078      	str	r0, [r7, #4]
    // Trigger DMA read for magnetic data
    HAL_I2C_Mem_Read_DMA(&hi2c1, ICM20948_MAG_ADDR, AK09916_HXL, 1, imu_data->magn_buff, 6);
 8001db0:	687b      	ldr	r3, [r7, #4]
 8001db2:	330e      	adds	r3, #14
 8001db4:	2206      	movs	r2, #6
 8001db6:	9201      	str	r2, [sp, #4]
 8001db8:	9300      	str	r3, [sp, #0]
 8001dba:	2301      	movs	r3, #1
 8001dbc:	2211      	movs	r2, #17
 8001dbe:	2118      	movs	r1, #24
 8001dc0:	4803      	ldr	r0, [pc, #12]	@ (8001dd0 <Magnetometer_ReadDMA+0x28>)
 8001dc2:	f003 fa5f 	bl	8005284 <HAL_I2C_Mem_Read_DMA>
}
 8001dc6:	bf00      	nop
 8001dc8:	3708      	adds	r7, #8
 8001dca:	46bd      	mov	sp, r7
 8001dcc:	bd80      	pop	{r7, pc}
 8001dce:	bf00      	nop
 8001dd0:	20000444 	.word	0x20000444

08001dd4 <ICM20948_Process_Mage_data>:

void ICM20948_Process_Mage_data(ICM20948_t* imu_data)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	b085      	sub	sp, #20
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	6078      	str	r0, [r7, #4]
	uint8_t *buff = imu_data->magn_buff;
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	330e      	adds	r3, #14
 8001de0:	60fb      	str	r3, [r7, #12]
	float *mag = imu_data->mage;
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	3344      	adds	r3, #68	@ 0x44
 8001de6:	60bb      	str	r3, [r7, #8]
	// Read Magnetometer Data
	mag[0] = (int16_t)((buff[1] << 8) | buff[0]) * 0.15f; // Convert raw data to µT
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	3301      	adds	r3, #1
 8001dec:	781b      	ldrb	r3, [r3, #0]
 8001dee:	021b      	lsls	r3, r3, #8
 8001df0:	b21a      	sxth	r2, r3
 8001df2:	68fb      	ldr	r3, [r7, #12]
 8001df4:	781b      	ldrb	r3, [r3, #0]
 8001df6:	b21b      	sxth	r3, r3
 8001df8:	4313      	orrs	r3, r2
 8001dfa:	b21b      	sxth	r3, r3
 8001dfc:	ee07 3a90 	vmov	s15, r3
 8001e00:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e04:	ed9f 7a1d 	vldr	s14, [pc, #116]	@ 8001e7c <ICM20948_Process_Mage_data+0xa8>
 8001e08:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e0c:	68bb      	ldr	r3, [r7, #8]
 8001e0e:	edc3 7a00 	vstr	s15, [r3]
	mag[1] = (int16_t)((buff[3] << 8) | buff[2]) * 0.15f;
 8001e12:	68fb      	ldr	r3, [r7, #12]
 8001e14:	3303      	adds	r3, #3
 8001e16:	781b      	ldrb	r3, [r3, #0]
 8001e18:	021b      	lsls	r3, r3, #8
 8001e1a:	b21a      	sxth	r2, r3
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	3302      	adds	r3, #2
 8001e20:	781b      	ldrb	r3, [r3, #0]
 8001e22:	b21b      	sxth	r3, r3
 8001e24:	4313      	orrs	r3, r2
 8001e26:	b21b      	sxth	r3, r3
 8001e28:	ee07 3a90 	vmov	s15, r3
 8001e2c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e30:	68bb      	ldr	r3, [r7, #8]
 8001e32:	3304      	adds	r3, #4
 8001e34:	ed9f 7a11 	vldr	s14, [pc, #68]	@ 8001e7c <ICM20948_Process_Mage_data+0xa8>
 8001e38:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e3c:	edc3 7a00 	vstr	s15, [r3]
	mag[2] = (int16_t)((buff[5] << 8) | buff[4]) * 0.15f;
 8001e40:	68fb      	ldr	r3, [r7, #12]
 8001e42:	3305      	adds	r3, #5
 8001e44:	781b      	ldrb	r3, [r3, #0]
 8001e46:	021b      	lsls	r3, r3, #8
 8001e48:	b21a      	sxth	r2, r3
 8001e4a:	68fb      	ldr	r3, [r7, #12]
 8001e4c:	3304      	adds	r3, #4
 8001e4e:	781b      	ldrb	r3, [r3, #0]
 8001e50:	b21b      	sxth	r3, r3
 8001e52:	4313      	orrs	r3, r2
 8001e54:	b21b      	sxth	r3, r3
 8001e56:	ee07 3a90 	vmov	s15, r3
 8001e5a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e5e:	68bb      	ldr	r3, [r7, #8]
 8001e60:	3308      	adds	r3, #8
 8001e62:	ed9f 7a06 	vldr	s14, [pc, #24]	@ 8001e7c <ICM20948_Process_Mage_data+0xa8>
 8001e66:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e6a:	edc3 7a00 	vstr	s15, [r3]
}
 8001e6e:	bf00      	nop
 8001e70:	3714      	adds	r7, #20
 8001e72:	46bd      	mov	sp, r7
 8001e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e78:	4770      	bx	lr
 8001e7a:	bf00      	nop
 8001e7c:	3e19999a 	.word	0x3e19999a

08001e80 <_MPU6050_Gyro_Calib>:
    .Q_bias = 0.003f,
    .R_measure = 0.03f,
};

static void _MPU6050_Gyro_Calib(MPU6050_t *DataStruct)
{
 8001e80:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001e84:	b08c      	sub	sp, #48	@ 0x30
 8001e86:	af04      	add	r7, sp, #16
 8001e88:	6078      	str	r0, [r7, #4]
	const uint16_t Num = 1000;
 8001e8a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e8e:	837b      	strh	r3, [r7, #26]
	float gyro_offset[3] = {0, 0, 0};
 8001e90:	f04f 0300 	mov.w	r3, #0
 8001e94:	60fb      	str	r3, [r7, #12]
 8001e96:	f04f 0300 	mov.w	r3, #0
 8001e9a:	613b      	str	r3, [r7, #16]
 8001e9c:	f04f 0300 	mov.w	r3, #0
 8001ea0:	617b      	str	r3, [r7, #20]

	for(uint16_t i = 0; i < Num; i++)
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	83fb      	strh	r3, [r7, #30]
 8001ea6:	e02b      	b.n	8001f00 <_MPU6050_Gyro_Calib+0x80>
	{
		MPU6050_Read_Gyro(&hi2c1, DataStruct);
 8001ea8:	6879      	ldr	r1, [r7, #4]
 8001eaa:	4845      	ldr	r0, [pc, #276]	@ (8001fc0 <_MPU6050_Gyro_Calib+0x140>)
 8001eac:	f000 f904 	bl	80020b8 <MPU6050_Read_Gyro>
		for(uint8_t i = 0; i < 3; ++i)
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	777b      	strb	r3, [r7, #29]
 8001eb4:	e01b      	b.n	8001eee <_MPU6050_Gyro_Calib+0x6e>
			gyro_offset[i] += DataStruct->gyro_raw[i];
 8001eb6:	7f7b      	ldrb	r3, [r7, #29]
 8001eb8:	009b      	lsls	r3, r3, #2
 8001eba:	3320      	adds	r3, #32
 8001ebc:	443b      	add	r3, r7
 8001ebe:	3b14      	subs	r3, #20
 8001ec0:	ed93 7a00 	vldr	s14, [r3]
 8001ec4:	7f7a      	ldrb	r2, [r7, #29]
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	3210      	adds	r2, #16
 8001eca:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8001ece:	ee07 3a90 	vmov	s15, r3
 8001ed2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001ed6:	7f7b      	ldrb	r3, [r7, #29]
 8001ed8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001edc:	009b      	lsls	r3, r3, #2
 8001ede:	3320      	adds	r3, #32
 8001ee0:	443b      	add	r3, r7
 8001ee2:	3b14      	subs	r3, #20
 8001ee4:	edc3 7a00 	vstr	s15, [r3]
		for(uint8_t i = 0; i < 3; ++i)
 8001ee8:	7f7b      	ldrb	r3, [r7, #29]
 8001eea:	3301      	adds	r3, #1
 8001eec:	777b      	strb	r3, [r7, #29]
 8001eee:	7f7b      	ldrb	r3, [r7, #29]
 8001ef0:	2b02      	cmp	r3, #2
 8001ef2:	d9e0      	bls.n	8001eb6 <_MPU6050_Gyro_Calib+0x36>
		HAL_Delay(2);
 8001ef4:	2002      	movs	r0, #2
 8001ef6:	f001 fea5 	bl	8003c44 <HAL_Delay>
	for(uint16_t i = 0; i < Num; i++)
 8001efa:	8bfb      	ldrh	r3, [r7, #30]
 8001efc:	3301      	adds	r3, #1
 8001efe:	83fb      	strh	r3, [r7, #30]
 8001f00:	8bfa      	ldrh	r2, [r7, #30]
 8001f02:	8b7b      	ldrh	r3, [r7, #26]
 8001f04:	429a      	cmp	r2, r3
 8001f06:	d3cf      	bcc.n	8001ea8 <_MPU6050_Gyro_Calib+0x28>
	}
	for(uint8_t i = 0; i < 3; ++i)
 8001f08:	2300      	movs	r3, #0
 8001f0a:	773b      	strb	r3, [r7, #28]
 8001f0c:	e018      	b.n	8001f40 <_MPU6050_Gyro_Calib+0xc0>
		DataStruct->gyro_offset[i] = gyro_offset[i] / Num;
 8001f0e:	7f3b      	ldrb	r3, [r7, #28]
 8001f10:	009b      	lsls	r3, r3, #2
 8001f12:	3320      	adds	r3, #32
 8001f14:	443b      	add	r3, r7
 8001f16:	3b14      	subs	r3, #20
 8001f18:	edd3 6a00 	vldr	s13, [r3]
 8001f1c:	8b7b      	ldrh	r3, [r7, #26]
 8001f1e:	ee07 3a90 	vmov	s15, r3
 8001f22:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f26:	7f3b      	ldrb	r3, [r7, #28]
 8001f28:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001f2c:	687a      	ldr	r2, [r7, #4]
 8001f2e:	330c      	adds	r3, #12
 8001f30:	009b      	lsls	r3, r3, #2
 8001f32:	4413      	add	r3, r2
 8001f34:	3304      	adds	r3, #4
 8001f36:	edc3 7a00 	vstr	s15, [r3]
	for(uint8_t i = 0; i < 3; ++i)
 8001f3a:	7f3b      	ldrb	r3, [r7, #28]
 8001f3c:	3301      	adds	r3, #1
 8001f3e:	773b      	strb	r3, [r7, #28]
 8001f40:	7f3b      	ldrb	r3, [r7, #28]
 8001f42:	2b02      	cmp	r3, #2
 8001f44:	d9e3      	bls.n	8001f0e <_MPU6050_Gyro_Calib+0x8e>
	printf("%.5f %.5f %.5f\r\n", DataStruct->gyro_offset[0]/65.5, DataStruct->gyro_offset[1]/65.5, DataStruct->gyro_offset[2]/65.5);
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001f4a:	4618      	mov	r0, r3
 8001f4c:	f7fe fafc 	bl	8000548 <__aeabi_f2d>
 8001f50:	a319      	add	r3, pc, #100	@ (adr r3, 8001fb8 <_MPU6050_Gyro_Calib+0x138>)
 8001f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f56:	f7fe fc79 	bl	800084c <__aeabi_ddiv>
 8001f5a:	4602      	mov	r2, r0
 8001f5c:	460b      	mov	r3, r1
 8001f5e:	4690      	mov	r8, r2
 8001f60:	4699      	mov	r9, r3
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001f66:	4618      	mov	r0, r3
 8001f68:	f7fe faee 	bl	8000548 <__aeabi_f2d>
 8001f6c:	a312      	add	r3, pc, #72	@ (adr r3, 8001fb8 <_MPU6050_Gyro_Calib+0x138>)
 8001f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f72:	f7fe fc6b 	bl	800084c <__aeabi_ddiv>
 8001f76:	4602      	mov	r2, r0
 8001f78:	460b      	mov	r3, r1
 8001f7a:	4614      	mov	r4, r2
 8001f7c:	461d      	mov	r5, r3
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001f82:	4618      	mov	r0, r3
 8001f84:	f7fe fae0 	bl	8000548 <__aeabi_f2d>
 8001f88:	a30b      	add	r3, pc, #44	@ (adr r3, 8001fb8 <_MPU6050_Gyro_Calib+0x138>)
 8001f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001f8e:	f7fe fc5d 	bl	800084c <__aeabi_ddiv>
 8001f92:	4602      	mov	r2, r0
 8001f94:	460b      	mov	r3, r1
 8001f96:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001f9a:	e9cd 4500 	strd	r4, r5, [sp]
 8001f9e:	4642      	mov	r2, r8
 8001fa0:	464b      	mov	r3, r9
 8001fa2:	4808      	ldr	r0, [pc, #32]	@ (8001fc4 <_MPU6050_Gyro_Calib+0x144>)
 8001fa4:	f00b fbf2 	bl	800d78c <iprintf>
	return;
 8001fa8:	bf00      	nop
}
 8001faa:	3720      	adds	r7, #32
 8001fac:	46bd      	mov	sp, r7
 8001fae:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001fb2:	bf00      	nop
 8001fb4:	f3af 8000 	nop.w
 8001fb8:	00000000 	.word	0x00000000
 8001fbc:	40506000 	.word	0x40506000
 8001fc0:	20000444 	.word	0x20000444
 8001fc4:	080102d8 	.word	0x080102d8

08001fc8 <MPU6050_Init>:

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b088      	sub	sp, #32
 8001fcc:	af04      	add	r7, sp, #16
 8001fce:	6078      	str	r0, [r7, #4]
 8001fd0:	6039      	str	r1, [r7, #0]
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_StatusTypeDef ret = HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 8001fd2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001fd6:	9302      	str	r3, [sp, #8]
 8001fd8:	2301      	movs	r3, #1
 8001fda:	9301      	str	r3, [sp, #4]
 8001fdc:	f107 030e 	add.w	r3, r7, #14
 8001fe0:	9300      	str	r3, [sp, #0]
 8001fe2:	2301      	movs	r3, #1
 8001fe4:	2275      	movs	r2, #117	@ 0x75
 8001fe6:	21d2      	movs	r1, #210	@ 0xd2
 8001fe8:	6878      	ldr	r0, [r7, #4]
 8001fea:	f002 ff19 	bl	8004e20 <HAL_I2C_Mem_Read>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	73fb      	strb	r3, [r7, #15]
    /*if (ret == HAL_OK) {
        printf("MPU6050 WHO_AM_I: 0x%02X\r\n", check);  // Should print 0x68
    } else {
        printf("I2C Read Error: %d\r\n", ret);
    }*/
    if (check == 104) // 0x68 will be returned by the sensor if everything goes well
 8001ff2:	7bbb      	ldrb	r3, [r7, #14]
 8001ff4:	2b68      	cmp	r3, #104	@ 0x68
 8001ff6:	d157      	bne.n	80020a8 <MPU6050_Init+0xe0>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	737b      	strb	r3, [r7, #13]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 8001ffc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002000:	9302      	str	r3, [sp, #8]
 8002002:	2301      	movs	r3, #1
 8002004:	9301      	str	r3, [sp, #4]
 8002006:	f107 030d 	add.w	r3, r7, #13
 800200a:	9300      	str	r3, [sp, #0]
 800200c:	2301      	movs	r3, #1
 800200e:	226b      	movs	r2, #107	@ 0x6b
 8002010:	21d2      	movs	r1, #210	@ 0xd2
 8002012:	6878      	ldr	r0, [r7, #4]
 8002014:	f002 fe0a 	bl	8004c2c <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x09;
 8002018:	2309      	movs	r3, #9
 800201a:	737b      	strb	r3, [r7, #13]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 800201c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002020:	9302      	str	r3, [sp, #8]
 8002022:	2301      	movs	r3, #1
 8002024:	9301      	str	r3, [sp, #4]
 8002026:	f107 030d 	add.w	r3, r7, #13
 800202a:	9300      	str	r3, [sp, #0]
 800202c:	2301      	movs	r3, #1
 800202e:	2219      	movs	r2, #25
 8002030:	21d2      	movs	r1, #210	@ 0xd2
 8002032:	6878      	ldr	r0, [r7, #4]
 8002034:	f002 fdfa 	bl	8004c2c <HAL_I2C_Mem_Write>

        // Set Digital Low Pass Filter
        Data = 0x05;
 8002038:	2305      	movs	r3, #5
 800203a:	737b      	strb	r3, [r7, #13]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, DLPF_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 800203c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002040:	9302      	str	r3, [sp, #8]
 8002042:	2301      	movs	r3, #1
 8002044:	9301      	str	r3, [sp, #4]
 8002046:	f107 030d 	add.w	r3, r7, #13
 800204a:	9300      	str	r3, [sp, #0]
 800204c:	2301      	movs	r3, #1
 800204e:	221a      	movs	r2, #26
 8002050:	21d2      	movs	r1, #210	@ 0xd2
 8002052:	6878      	ldr	r0, [r7, #4]
 8002054:	f002 fdea 	bl	8004c2c <HAL_I2C_Mem_Write>
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x00;
 8002058:	2300      	movs	r3, #0
 800205a:	737b      	strb	r3, [r7, #13]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 800205c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002060:	9302      	str	r3, [sp, #8]
 8002062:	2301      	movs	r3, #1
 8002064:	9301      	str	r3, [sp, #4]
 8002066:	f107 030d 	add.w	r3, r7, #13
 800206a:	9300      	str	r3, [sp, #0]
 800206c:	2301      	movs	r3, #1
 800206e:	221c      	movs	r2, #28
 8002070:	21d2      	movs	r1, #210	@ 0xd2
 8002072:	6878      	ldr	r0, [r7, #4]
 8002074:	f002 fdda 	bl	8004c2c <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=1 -> � 500 �/s
        Data = 0x08;
 8002078:	2308      	movs	r3, #8
 800207a:	737b      	strb	r3, [r7, #13]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 800207c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002080:	9302      	str	r3, [sp, #8]
 8002082:	2301      	movs	r3, #1
 8002084:	9301      	str	r3, [sp, #4]
 8002086:	f107 030d 	add.w	r3, r7, #13
 800208a:	9300      	str	r3, [sp, #0]
 800208c:	2301      	movs	r3, #1
 800208e:	221b      	movs	r2, #27
 8002090:	21d2      	movs	r1, #210	@ 0xd2
 8002092:	6878      	ldr	r0, [r7, #4]
 8002094:	f002 fdca 	bl	8004c2c <HAL_I2C_Mem_Write>

        // calibrate gyro
        _MPU6050_Gyro_Calib(DataStruct);
 8002098:	6838      	ldr	r0, [r7, #0]
 800209a:	f7ff fef1 	bl	8001e80 <_MPU6050_Gyro_Calib>
        printf("MPU6050 done gyro calib\r\n");
 800209e:	4805      	ldr	r0, [pc, #20]	@ (80020b4 <MPU6050_Init+0xec>)
 80020a0:	f00b fbdc 	bl	800d85c <puts>
        return 0;
 80020a4:	2300      	movs	r3, #0
 80020a6:	e000      	b.n	80020aa <MPU6050_Init+0xe2>
    }

    return 1;
 80020a8:	2301      	movs	r3, #1
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	3710      	adds	r7, #16
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	bf00      	nop
 80020b4:	080102ec 	.word	0x080102ec

080020b8 <MPU6050_Read_Gyro>:
    for(uint8_t i = 0; i < 3; ++i)
    	DataStruct->acce[i] = DataStruct->acce_raw[i] / 16384.0;
}

void MPU6050_Read_Gyro(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct)
{
 80020b8:	b590      	push	{r4, r7, lr}
 80020ba:	b089      	sub	sp, #36	@ 0x24
 80020bc:	af04      	add	r7, sp, #16
 80020be:	6078      	str	r0, [r7, #4]
 80020c0:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[6];

    // Read 6 BYTES of data starting from GYRO_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, GYRO_XOUT_H_REG, 1, Rec_Data, 6, i2c_timeout);
 80020c2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80020c6:	9302      	str	r3, [sp, #8]
 80020c8:	2306      	movs	r3, #6
 80020ca:	9301      	str	r3, [sp, #4]
 80020cc:	f107 0308 	add.w	r3, r7, #8
 80020d0:	9300      	str	r3, [sp, #0]
 80020d2:	2301      	movs	r3, #1
 80020d4:	2243      	movs	r2, #67	@ 0x43
 80020d6:	21d2      	movs	r1, #210	@ 0xd2
 80020d8:	6878      	ldr	r0, [r7, #4]
 80020da:	f002 fea1 	bl	8004e20 <HAL_I2C_Mem_Read>

    DataStruct->gyro_raw[0] = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 80020de:	7a3b      	ldrb	r3, [r7, #8]
 80020e0:	021b      	lsls	r3, r3, #8
 80020e2:	b21a      	sxth	r2, r3
 80020e4:	7a7b      	ldrb	r3, [r7, #9]
 80020e6:	b21b      	sxth	r3, r3
 80020e8:	4313      	orrs	r3, r2
 80020ea:	b21a      	sxth	r2, r3
 80020ec:	683b      	ldr	r3, [r7, #0]
 80020ee:	841a      	strh	r2, [r3, #32]
    DataStruct->gyro_raw[1] = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 80020f0:	7abb      	ldrb	r3, [r7, #10]
 80020f2:	021b      	lsls	r3, r3, #8
 80020f4:	b21a      	sxth	r2, r3
 80020f6:	7afb      	ldrb	r3, [r7, #11]
 80020f8:	b21b      	sxth	r3, r3
 80020fa:	4313      	orrs	r3, r2
 80020fc:	b21a      	sxth	r2, r3
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	845a      	strh	r2, [r3, #34]	@ 0x22
    DataStruct->gyro_raw[2] = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 8002102:	7b3b      	ldrb	r3, [r7, #12]
 8002104:	021b      	lsls	r3, r3, #8
 8002106:	b21a      	sxth	r2, r3
 8002108:	7b7b      	ldrb	r3, [r7, #13]
 800210a:	b21b      	sxth	r3, r3
 800210c:	4313      	orrs	r3, r2
 800210e:	b21a      	sxth	r2, r3
 8002110:	683b      	ldr	r3, [r7, #0]
 8002112:	849a      	strh	r2, [r3, #36]	@ 0x24
    /*** convert the RAW values into dps (�/s)
         we have to divide according to the Full scale value set in FS_SEL
         I have configured FS_SEL = 1. So I am dividing by 65.5
         for more details check GYRO_CONFIG Register              ****/

    for(uint8_t i = 0; i < 3; ++i)
 8002114:	2300      	movs	r3, #0
 8002116:	73fb      	strb	r3, [r7, #15]
 8002118:	e01d      	b.n	8002156 <MPU6050_Read_Gyro+0x9e>
    	DataStruct->gyro[i] = DataStruct->gyro_raw[i] / 65.5;
 800211a:	7bfa      	ldrb	r2, [r7, #15]
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	3210      	adds	r2, #16
 8002120:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 8002124:	4618      	mov	r0, r3
 8002126:	f7fe f9fd 	bl	8000524 <__aeabi_i2d>
 800212a:	a30f      	add	r3, pc, #60	@ (adr r3, 8002168 <MPU6050_Read_Gyro+0xb0>)
 800212c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002130:	f7fe fb8c 	bl	800084c <__aeabi_ddiv>
 8002134:	4602      	mov	r2, r0
 8002136:	460b      	mov	r3, r1
 8002138:	7bfc      	ldrb	r4, [r7, #15]
 800213a:	4610      	mov	r0, r2
 800213c:	4619      	mov	r1, r3
 800213e:	f7fe fd33 	bl	8000ba8 <__aeabi_d2f>
 8002142:	4601      	mov	r1, r0
 8002144:	683a      	ldr	r2, [r7, #0]
 8002146:	f104 030a 	add.w	r3, r4, #10
 800214a:	009b      	lsls	r3, r3, #2
 800214c:	4413      	add	r3, r2
 800214e:	6019      	str	r1, [r3, #0]
    for(uint8_t i = 0; i < 3; ++i)
 8002150:	7bfb      	ldrb	r3, [r7, #15]
 8002152:	3301      	adds	r3, #1
 8002154:	73fb      	strb	r3, [r7, #15]
 8002156:	7bfb      	ldrb	r3, [r7, #15]
 8002158:	2b02      	cmp	r3, #2
 800215a:	d9de      	bls.n	800211a <MPU6050_Read_Gyro+0x62>
}
 800215c:	bf00      	nop
 800215e:	bf00      	nop
 8002160:	3714      	adds	r7, #20
 8002162:	46bd      	mov	sp, r7
 8002164:	bd90      	pop	{r4, r7, pc}
 8002166:	bf00      	nop
 8002168:	00000000 	.word	0x00000000
 800216c:	40506000 	.word	0x40506000

08002170 <MPU6050_Read_DMA>:
    MPU6050_Process_Data(DataStruct);

}

void MPU6050_Read_DMA(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct)
{
 8002170:	b580      	push	{r7, lr}
 8002172:	b086      	sub	sp, #24
 8002174:	af02      	add	r7, sp, #8
 8002176:	6078      	str	r0, [r7, #4]
 8002178:	6039      	str	r1, [r7, #0]
	DataStruct->is_reading = 1u;
 800217a:	683b      	ldr	r3, [r7, #0]
 800217c:	2201      	movs	r2, #1
 800217e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
	HAL_StatusTypeDef ret = HAL_I2C_Mem_Read_DMA(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, I2C_MEMADD_SIZE_8BIT, DataStruct->mpu6050_raw, 14);
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	220e      	movs	r2, #14
 8002186:	9201      	str	r2, [sp, #4]
 8002188:	9300      	str	r3, [sp, #0]
 800218a:	2301      	movs	r3, #1
 800218c:	223b      	movs	r2, #59	@ 0x3b
 800218e:	21d2      	movs	r1, #210	@ 0xd2
 8002190:	6878      	ldr	r0, [r7, #4]
 8002192:	f003 f877 	bl	8005284 <HAL_I2C_Mem_Read_DMA>
 8002196:	4603      	mov	r3, r0
 8002198:	73fb      	strb	r3, [r7, #15]
	//printf("DMA read state %d \r\n", (int)ret);
}
 800219a:	bf00      	nop
 800219c:	3710      	adds	r7, #16
 800219e:	46bd      	mov	sp, r7
 80021a0:	bd80      	pop	{r7, pc}
	...

080021a4 <MPU6050_Process_Data>:

void MPU6050_Process_Data(MPU6050_t *DataStruct)
{
 80021a4:	b590      	push	{r4, r7, lr}
 80021a6:	b087      	sub	sp, #28
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
	uint8_t *raw = DataStruct->mpu6050_raw;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	613b      	str	r3, [r7, #16]
	DataStruct->acce_raw[0] = (int16_t)(raw[0] << 8 | raw[1]);
 80021b0:	693b      	ldr	r3, [r7, #16]
 80021b2:	781b      	ldrb	r3, [r3, #0]
 80021b4:	021b      	lsls	r3, r3, #8
 80021b6:	b21a      	sxth	r2, r3
 80021b8:	693b      	ldr	r3, [r7, #16]
 80021ba:	3301      	adds	r3, #1
 80021bc:	781b      	ldrb	r3, [r3, #0]
 80021be:	b21b      	sxth	r3, r3
 80021c0:	4313      	orrs	r3, r2
 80021c2:	b21a      	sxth	r2, r3
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	81da      	strh	r2, [r3, #14]
	DataStruct->acce_raw[1] = (int16_t)(raw[2] << 8 | raw[3]);
 80021c8:	693b      	ldr	r3, [r7, #16]
 80021ca:	3302      	adds	r3, #2
 80021cc:	781b      	ldrb	r3, [r3, #0]
 80021ce:	021b      	lsls	r3, r3, #8
 80021d0:	b21a      	sxth	r2, r3
 80021d2:	693b      	ldr	r3, [r7, #16]
 80021d4:	3303      	adds	r3, #3
 80021d6:	781b      	ldrb	r3, [r3, #0]
 80021d8:	b21b      	sxth	r3, r3
 80021da:	4313      	orrs	r3, r2
 80021dc:	b21a      	sxth	r2, r3
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	821a      	strh	r2, [r3, #16]
	DataStruct->acce_raw[2] = (int16_t)(raw[4] << 8 | raw[5]);
 80021e2:	693b      	ldr	r3, [r7, #16]
 80021e4:	3304      	adds	r3, #4
 80021e6:	781b      	ldrb	r3, [r3, #0]
 80021e8:	021b      	lsls	r3, r3, #8
 80021ea:	b21a      	sxth	r2, r3
 80021ec:	693b      	ldr	r3, [r7, #16]
 80021ee:	3305      	adds	r3, #5
 80021f0:	781b      	ldrb	r3, [r3, #0]
 80021f2:	b21b      	sxth	r3, r3
 80021f4:	4313      	orrs	r3, r2
 80021f6:	b21a      	sxth	r2, r3
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	825a      	strh	r2, [r3, #18]
	int16_t temp = (int16_t)(raw[6] << 8 | raw[7]);
 80021fc:	693b      	ldr	r3, [r7, #16]
 80021fe:	3306      	adds	r3, #6
 8002200:	781b      	ldrb	r3, [r3, #0]
 8002202:	021b      	lsls	r3, r3, #8
 8002204:	b21a      	sxth	r2, r3
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	3307      	adds	r3, #7
 800220a:	781b      	ldrb	r3, [r3, #0]
 800220c:	b21b      	sxth	r3, r3
 800220e:	4313      	orrs	r3, r2
 8002210:	81fb      	strh	r3, [r7, #14]
	DataStruct->gyro_raw[0] = (int16_t)(raw[8] << 8 | raw[9]);
 8002212:	693b      	ldr	r3, [r7, #16]
 8002214:	3308      	adds	r3, #8
 8002216:	781b      	ldrb	r3, [r3, #0]
 8002218:	021b      	lsls	r3, r3, #8
 800221a:	b21a      	sxth	r2, r3
 800221c:	693b      	ldr	r3, [r7, #16]
 800221e:	3309      	adds	r3, #9
 8002220:	781b      	ldrb	r3, [r3, #0]
 8002222:	b21b      	sxth	r3, r3
 8002224:	4313      	orrs	r3, r2
 8002226:	b21a      	sxth	r2, r3
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	841a      	strh	r2, [r3, #32]
	DataStruct->gyro_raw[1] = (int16_t)(raw[10] << 8 | raw[11]);
 800222c:	693b      	ldr	r3, [r7, #16]
 800222e:	330a      	adds	r3, #10
 8002230:	781b      	ldrb	r3, [r3, #0]
 8002232:	021b      	lsls	r3, r3, #8
 8002234:	b21a      	sxth	r2, r3
 8002236:	693b      	ldr	r3, [r7, #16]
 8002238:	330b      	adds	r3, #11
 800223a:	781b      	ldrb	r3, [r3, #0]
 800223c:	b21b      	sxth	r3, r3
 800223e:	4313      	orrs	r3, r2
 8002240:	b21a      	sxth	r2, r3
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	845a      	strh	r2, [r3, #34]	@ 0x22
	DataStruct->gyro_raw[2] = (int16_t)(raw[12] << 8 | raw[13]);
 8002246:	693b      	ldr	r3, [r7, #16]
 8002248:	330c      	adds	r3, #12
 800224a:	781b      	ldrb	r3, [r3, #0]
 800224c:	021b      	lsls	r3, r3, #8
 800224e:	b21a      	sxth	r2, r3
 8002250:	693b      	ldr	r3, [r7, #16]
 8002252:	330d      	adds	r3, #13
 8002254:	781b      	ldrb	r3, [r3, #0]
 8002256:	b21b      	sxth	r3, r3
 8002258:	4313      	orrs	r3, r2
 800225a:	b21a      	sxth	r2, r3
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	849a      	strh	r2, [r3, #36]	@ 0x24

	for(uint8_t i = 0; i < 3; ++i)
 8002260:	2300      	movs	r3, #0
 8002262:	75fb      	strb	r3, [r7, #23]
 8002264:	e01f      	b.n	80022a6 <MPU6050_Process_Data+0x102>
		DataStruct->acce[i] = DataStruct->acce_raw[i] / 16384.0;
 8002266:	7dfb      	ldrb	r3, [r7, #23]
 8002268:	687a      	ldr	r2, [r7, #4]
 800226a:	3304      	adds	r3, #4
 800226c:	005b      	lsls	r3, r3, #1
 800226e:	4413      	add	r3, r2
 8002270:	f9b3 3006 	ldrsh.w	r3, [r3, #6]
 8002274:	4618      	mov	r0, r3
 8002276:	f7fe f955 	bl	8000524 <__aeabi_i2d>
 800227a:	f04f 0200 	mov.w	r2, #0
 800227e:	4b2b      	ldr	r3, [pc, #172]	@ (800232c <MPU6050_Process_Data+0x188>)
 8002280:	f7fe fae4 	bl	800084c <__aeabi_ddiv>
 8002284:	4602      	mov	r2, r0
 8002286:	460b      	mov	r3, r1
 8002288:	7dfc      	ldrb	r4, [r7, #23]
 800228a:	4610      	mov	r0, r2
 800228c:	4619      	mov	r1, r3
 800228e:	f7fe fc8b 	bl	8000ba8 <__aeabi_d2f>
 8002292:	4601      	mov	r1, r0
 8002294:	687a      	ldr	r2, [r7, #4]
 8002296:	1d23      	adds	r3, r4, #4
 8002298:	009b      	lsls	r3, r3, #2
 800229a:	4413      	add	r3, r2
 800229c:	3304      	adds	r3, #4
 800229e:	6019      	str	r1, [r3, #0]
	for(uint8_t i = 0; i < 3; ++i)
 80022a0:	7dfb      	ldrb	r3, [r7, #23]
 80022a2:	3301      	adds	r3, #1
 80022a4:	75fb      	strb	r3, [r7, #23]
 80022a6:	7dfb      	ldrb	r3, [r7, #23]
 80022a8:	2b02      	cmp	r3, #2
 80022aa:	d9dc      	bls.n	8002266 <MPU6050_Process_Data+0xc2>

	DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
 80022ac:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80022b0:	ee07 3a90 	vmov	s15, r3
 80022b4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80022b8:	eddf 6a1d 	vldr	s13, [pc, #116]	@ 8002330 <MPU6050_Process_Data+0x18c>
 80022bc:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80022c0:	ed9f 7a1c 	vldr	s14, [pc, #112]	@ 8002334 <MPU6050_Process_Data+0x190>
 80022c4:	ee77 7a87 	vadd.f32	s15, s15, s14
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
	for(uint8_t i = 0; i < 3; ++i)
 80022ce:	2300      	movs	r3, #0
 80022d0:	75bb      	strb	r3, [r7, #22]
 80022d2:	e020      	b.n	8002316 <MPU6050_Process_Data+0x172>
			DataStruct->gyro[i] = (DataStruct->gyro_raw[i] - DataStruct->gyro_offset[i]) / 65.5;
 80022d4:	7dba      	ldrb	r2, [r7, #22]
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	3210      	adds	r2, #16
 80022da:	f933 3012 	ldrsh.w	r3, [r3, r2, lsl #1]
 80022de:	ee07 3a90 	vmov	s15, r3
 80022e2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80022e6:	7dbb      	ldrb	r3, [r7, #22]
 80022e8:	687a      	ldr	r2, [r7, #4]
 80022ea:	330c      	adds	r3, #12
 80022ec:	009b      	lsls	r3, r3, #2
 80022ee:	4413      	add	r3, r2
 80022f0:	3304      	adds	r3, #4
 80022f2:	edd3 7a00 	vldr	s15, [r3]
 80022f6:	ee37 7a67 	vsub.f32	s14, s14, s15
 80022fa:	7dbb      	ldrb	r3, [r7, #22]
 80022fc:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8002338 <MPU6050_Process_Data+0x194>
 8002300:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002304:	687a      	ldr	r2, [r7, #4]
 8002306:	330a      	adds	r3, #10
 8002308:	009b      	lsls	r3, r3, #2
 800230a:	4413      	add	r3, r2
 800230c:	edc3 7a00 	vstr	s15, [r3]
	for(uint8_t i = 0; i < 3; ++i)
 8002310:	7dbb      	ldrb	r3, [r7, #22]
 8002312:	3301      	adds	r3, #1
 8002314:	75bb      	strb	r3, [r7, #22]
 8002316:	7dbb      	ldrb	r3, [r7, #22]
 8002318:	2b02      	cmp	r3, #2
 800231a:	d9db      	bls.n	80022d4 <MPU6050_Process_Data+0x130>

	DataStruct->is_reading = 0u;
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	2200      	movs	r2, #0
 8002320:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

}
 8002324:	bf00      	nop
 8002326:	371c      	adds	r7, #28
 8002328:	46bd      	mov	sp, r7
 800232a:	bd90      	pop	{r4, r7, pc}
 800232c:	40d00000 	.word	0x40d00000
 8002330:	43aa0000 	.word	0x43aa0000
 8002334:	42121eb8 	.word	0x42121eb8
 8002338:	42830000 	.word	0x42830000

0800233c <width>:
SSD1306_Geometry display_geometry = SSD1306_GEOMETRY;

//
//  Get a width and height screen size
//
static const uint16_t width(void)  { return SSD1306_WIDTH; };
 800233c:	b480      	push	{r7}
 800233e:	af00      	add	r7, sp, #0
 8002340:	2380      	movs	r3, #128	@ 0x80
 8002342:	4618      	mov	r0, r3
 8002344:	46bd      	mov	sp, r7
 8002346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234a:	4770      	bx	lr

0800234c <height>:
static const uint16_t height(void)  { return SSD1306_HEIGHT; };
 800234c:	b480      	push	{r7}
 800234e:	af00      	add	r7, sp, #0
 8002350:	2320      	movs	r3, #32
 8002352:	4618      	mov	r0, r3
 8002354:	46bd      	mov	sp, r7
 8002356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235a:	4770      	bx	lr

0800235c <ssd1306_GetWidth>:

uint16_t ssd1306_GetWidth(void)
{
 800235c:	b480      	push	{r7}
 800235e:	af00      	add	r7, sp, #0
  return SSD1306_WIDTH;
 8002360:	2380      	movs	r3, #128	@ 0x80
}
 8002362:	4618      	mov	r0, r3
 8002364:	46bd      	mov	sp, r7
 8002366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236a:	4770      	bx	lr

0800236c <ssd1306_GetHeight>:

uint16_t ssd1306_GetHeight(void)
{
 800236c:	b480      	push	{r7}
 800236e:	af00      	add	r7, sp, #0
  return SSD1306_HEIGHT;
 8002370:	2320      	movs	r3, #32
}
 8002372:	4618      	mov	r0, r3
 8002374:	46bd      	mov	sp, r7
 8002376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800237a:	4770      	bx	lr

0800237c <ssd1306_Init>:
  SSD1306.Color = color;
}

//  Initialize the oled screen
uint8_t ssd1306_Init(void)
{
 800237c:	b580      	push	{r7, lr}
 800237e:	af00      	add	r7, sp, #0
  /* Check if LCD connected to I2C */
  if (HAL_I2C_IsDeviceReady(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 5, 1000) != HAL_OK)
 8002380:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002384:	2205      	movs	r2, #5
 8002386:	2178      	movs	r1, #120	@ 0x78
 8002388:	4847      	ldr	r0, [pc, #284]	@ (80024a8 <ssd1306_Init+0x12c>)
 800238a:	f003 f90b 	bl	80055a4 <HAL_I2C_IsDeviceReady>
 800238e:	4603      	mov	r3, r0
 8002390:	2b00      	cmp	r3, #0
 8002392:	d004      	beq.n	800239e <ssd1306_Init+0x22>
  {
    SSD1306.Initialized = 0;
 8002394:	4b45      	ldr	r3, [pc, #276]	@ (80024ac <ssd1306_Init+0x130>)
 8002396:	2200      	movs	r2, #0
 8002398:	719a      	strb	r2, [r3, #6]
    /* Return false */
    return 0;
 800239a:	2300      	movs	r3, #0
 800239c:	e082      	b.n	80024a4 <ssd1306_Init+0x128>
  }

  // Wait for the screen to boot
  HAL_Delay(100);
 800239e:	2064      	movs	r0, #100	@ 0x64
 80023a0:	f001 fc50 	bl	8003c44 <HAL_Delay>

  /* Init LCD */
  ssd1306_WriteCommand(DISPLAYOFF);
 80023a4:	20ae      	movs	r0, #174	@ 0xae
 80023a6:	f000 f9d5 	bl	8002754 <ssd1306_WriteCommand>
  ssd1306_WriteCommand(SETDISPLAYCLOCKDIV);
 80023aa:	20d5      	movs	r0, #213	@ 0xd5
 80023ac:	f000 f9d2 	bl	8002754 <ssd1306_WriteCommand>
  ssd1306_WriteCommand(0xF0); // Increase speed of the display max ~96Hz
 80023b0:	20f0      	movs	r0, #240	@ 0xf0
 80023b2:	f000 f9cf 	bl	8002754 <ssd1306_WriteCommand>
  ssd1306_WriteCommand(SETMULTIPLEX);
 80023b6:	20a8      	movs	r0, #168	@ 0xa8
 80023b8:	f000 f9cc 	bl	8002754 <ssd1306_WriteCommand>
  ssd1306_WriteCommand(height() - 1);
 80023bc:	f7ff ffc6 	bl	800234c <height>
 80023c0:	4603      	mov	r3, r0
 80023c2:	b2db      	uxtb	r3, r3
 80023c4:	3b01      	subs	r3, #1
 80023c6:	b2db      	uxtb	r3, r3
 80023c8:	4618      	mov	r0, r3
 80023ca:	f000 f9c3 	bl	8002754 <ssd1306_WriteCommand>
  ssd1306_WriteCommand(SETDISPLAYOFFSET);
 80023ce:	20d3      	movs	r0, #211	@ 0xd3
 80023d0:	f000 f9c0 	bl	8002754 <ssd1306_WriteCommand>
  ssd1306_WriteCommand(0x00);
 80023d4:	2000      	movs	r0, #0
 80023d6:	f000 f9bd 	bl	8002754 <ssd1306_WriteCommand>
  ssd1306_WriteCommand(SETSTARTLINE);
 80023da:	2040      	movs	r0, #64	@ 0x40
 80023dc:	f000 f9ba 	bl	8002754 <ssd1306_WriteCommand>
  ssd1306_WriteCommand(CHARGEPUMP);
 80023e0:	208d      	movs	r0, #141	@ 0x8d
 80023e2:	f000 f9b7 	bl	8002754 <ssd1306_WriteCommand>
  ssd1306_WriteCommand(0x14);
 80023e6:	2014      	movs	r0, #20
 80023e8:	f000 f9b4 	bl	8002754 <ssd1306_WriteCommand>
  ssd1306_WriteCommand(MEMORYMODE);
 80023ec:	2020      	movs	r0, #32
 80023ee:	f000 f9b1 	bl	8002754 <ssd1306_WriteCommand>
  ssd1306_WriteCommand(0x00);
 80023f2:	2000      	movs	r0, #0
 80023f4:	f000 f9ae 	bl	8002754 <ssd1306_WriteCommand>
  ssd1306_WriteCommand(SEGREMAP);
 80023f8:	20a0      	movs	r0, #160	@ 0xa0
 80023fa:	f000 f9ab 	bl	8002754 <ssd1306_WriteCommand>
  ssd1306_WriteCommand(COMSCANINC);
 80023fe:	20c0      	movs	r0, #192	@ 0xc0
 8002400:	f000 f9a8 	bl	8002754 <ssd1306_WriteCommand>
  ssd1306_WriteCommand(SETCOMPINS);
 8002404:	20da      	movs	r0, #218	@ 0xda
 8002406:	f000 f9a5 	bl	8002754 <ssd1306_WriteCommand>

  if (display_geometry == GEOMETRY_128_64)
 800240a:	4b29      	ldr	r3, [pc, #164]	@ (80024b0 <ssd1306_Init+0x134>)
 800240c:	781b      	ldrb	r3, [r3, #0]
 800240e:	2b00      	cmp	r3, #0
 8002410:	d103      	bne.n	800241a <ssd1306_Init+0x9e>
  {
    ssd1306_WriteCommand(0x12);
 8002412:	2012      	movs	r0, #18
 8002414:	f000 f99e 	bl	8002754 <ssd1306_WriteCommand>
 8002418:	e006      	b.n	8002428 <ssd1306_Init+0xac>
  }
  else if (display_geometry == GEOMETRY_128_32)
 800241a:	4b25      	ldr	r3, [pc, #148]	@ (80024b0 <ssd1306_Init+0x134>)
 800241c:	781b      	ldrb	r3, [r3, #0]
 800241e:	2b01      	cmp	r3, #1
 8002420:	d102      	bne.n	8002428 <ssd1306_Init+0xac>
  {
    ssd1306_WriteCommand(0x02);
 8002422:	2002      	movs	r0, #2
 8002424:	f000 f996 	bl	8002754 <ssd1306_WriteCommand>
  }

  ssd1306_WriteCommand(SETCONTRAST);
 8002428:	2081      	movs	r0, #129	@ 0x81
 800242a:	f000 f993 	bl	8002754 <ssd1306_WriteCommand>

  if (display_geometry == GEOMETRY_128_64)
 800242e:	4b20      	ldr	r3, [pc, #128]	@ (80024b0 <ssd1306_Init+0x134>)
 8002430:	781b      	ldrb	r3, [r3, #0]
 8002432:	2b00      	cmp	r3, #0
 8002434:	d103      	bne.n	800243e <ssd1306_Init+0xc2>
  {
    ssd1306_WriteCommand(0xCF);
 8002436:	20cf      	movs	r0, #207	@ 0xcf
 8002438:	f000 f98c 	bl	8002754 <ssd1306_WriteCommand>
 800243c:	e006      	b.n	800244c <ssd1306_Init+0xd0>
  }
  else if (display_geometry == GEOMETRY_128_32)
 800243e:	4b1c      	ldr	r3, [pc, #112]	@ (80024b0 <ssd1306_Init+0x134>)
 8002440:	781b      	ldrb	r3, [r3, #0]
 8002442:	2b01      	cmp	r3, #1
 8002444:	d102      	bne.n	800244c <ssd1306_Init+0xd0>
  {
    ssd1306_WriteCommand(0x8F);
 8002446:	208f      	movs	r0, #143	@ 0x8f
 8002448:	f000 f984 	bl	8002754 <ssd1306_WriteCommand>
  }

  ssd1306_WriteCommand(SETPRECHARGE);
 800244c:	20d9      	movs	r0, #217	@ 0xd9
 800244e:	f000 f981 	bl	8002754 <ssd1306_WriteCommand>
  ssd1306_WriteCommand(0xF1);
 8002452:	20f1      	movs	r0, #241	@ 0xf1
 8002454:	f000 f97e 	bl	8002754 <ssd1306_WriteCommand>
  ssd1306_WriteCommand(SETVCOMDETECT); //0xDB, (additionally needed to lower the contrast)
 8002458:	20db      	movs	r0, #219	@ 0xdb
 800245a:	f000 f97b 	bl	8002754 <ssd1306_WriteCommand>
  ssd1306_WriteCommand(0x40);          //0x40 default, to lower the contrast, put 0
 800245e:	2040      	movs	r0, #64	@ 0x40
 8002460:	f000 f978 	bl	8002754 <ssd1306_WriteCommand>
  ssd1306_WriteCommand(DISPLAYALLON_RESUME);
 8002464:	20a4      	movs	r0, #164	@ 0xa4
 8002466:	f000 f975 	bl	8002754 <ssd1306_WriteCommand>
  ssd1306_WriteCommand(NORMALDISPLAY);
 800246a:	20a6      	movs	r0, #166	@ 0xa6
 800246c:	f000 f972 	bl	8002754 <ssd1306_WriteCommand>
  ssd1306_WriteCommand(0x2e);            // stop scroll
 8002470:	202e      	movs	r0, #46	@ 0x2e
 8002472:	f000 f96f 	bl	8002754 <ssd1306_WriteCommand>
  ssd1306_WriteCommand(DISPLAYON);
 8002476:	20af      	movs	r0, #175	@ 0xaf
 8002478:	f000 f96c 	bl	8002754 <ssd1306_WriteCommand>

  // Set default values for screen object
  SSD1306.CurrentX = 0;
 800247c:	4b0b      	ldr	r3, [pc, #44]	@ (80024ac <ssd1306_Init+0x130>)
 800247e:	2200      	movs	r2, #0
 8002480:	801a      	strh	r2, [r3, #0]
  SSD1306.CurrentY = 0;
 8002482:	4b0a      	ldr	r3, [pc, #40]	@ (80024ac <ssd1306_Init+0x130>)
 8002484:	2200      	movs	r2, #0
 8002486:	805a      	strh	r2, [r3, #2]
  SSD1306.Color = Black;
 8002488:	4b08      	ldr	r3, [pc, #32]	@ (80024ac <ssd1306_Init+0x130>)
 800248a:	2200      	movs	r2, #0
 800248c:	715a      	strb	r2, [r3, #5]
  SSD1306.Inverted = 1;
 800248e:	4b07      	ldr	r3, [pc, #28]	@ (80024ac <ssd1306_Init+0x130>)
 8002490:	2201      	movs	r2, #1
 8002492:	711a      	strb	r2, [r3, #4]
  // Clear screen
  ssd1306_Clear();
 8002494:	f000 f952 	bl	800273c <ssd1306_Clear>

  // Continuous Update on
  ssd1306_ContUpdateEnable();

  // Flush buffer to screen
  ssd1306_UpdateScreen();
 8002498:	f000 f98c 	bl	80027b4 <ssd1306_UpdateScreen>

  SSD1306.Initialized = 1;
 800249c:	4b03      	ldr	r3, [pc, #12]	@ (80024ac <ssd1306_Init+0x130>)
 800249e:	2201      	movs	r2, #1
 80024a0:	719a      	strb	r2, [r3, #6]


  /* Return OK */
  return 1;
 80024a2:	2301      	movs	r3, #1
}
 80024a4:	4618      	mov	r0, r3
 80024a6:	bd80      	pop	{r7, pc}
 80024a8:	20000444 	.word	0x20000444
 80024ac:	20000214 	.word	0x20000214
 80024b0:	20000008 	.word	0x20000008

080024b4 <ssd1306_DrawPixel>:
//  X => X Coordinate
//  Y => Y Coordinate
//  color => Pixel color
//
void ssd1306_DrawPixel(uint8_t x, uint8_t y)
{
 80024b4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80024b6:	b085      	sub	sp, #20
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	4603      	mov	r3, r0
 80024bc:	460a      	mov	r2, r1
 80024be:	71fb      	strb	r3, [r7, #7]
 80024c0:	4613      	mov	r3, r2
 80024c2:	71bb      	strb	r3, [r7, #6]
  SSD1306_COLOR color = SSD1306.Color;
 80024c4:	4b34      	ldr	r3, [pc, #208]	@ (8002598 <ssd1306_DrawPixel+0xe4>)
 80024c6:	795b      	ldrb	r3, [r3, #5]
 80024c8:	73fb      	strb	r3, [r7, #15]

  if (x >= ssd1306_GetWidth() || y >= ssd1306_GetHeight())
 80024ca:	79fb      	ldrb	r3, [r7, #7]
 80024cc:	b29c      	uxth	r4, r3
 80024ce:	f7ff ff45 	bl	800235c <ssd1306_GetWidth>
 80024d2:	4603      	mov	r3, r0
 80024d4:	429c      	cmp	r4, r3
 80024d6:	d25a      	bcs.n	800258e <ssd1306_DrawPixel+0xda>
 80024d8:	79bb      	ldrb	r3, [r7, #6]
 80024da:	b29c      	uxth	r4, r3
 80024dc:	f7ff ff46 	bl	800236c <ssd1306_GetHeight>
 80024e0:	4603      	mov	r3, r0
 80024e2:	429c      	cmp	r4, r3
 80024e4:	d253      	bcs.n	800258e <ssd1306_DrawPixel+0xda>
    // Don't write outside the buffer
    return;
  }

  // Check if pixel should be inverted
  if (SSD1306.Inverted)
 80024e6:	4b2c      	ldr	r3, [pc, #176]	@ (8002598 <ssd1306_DrawPixel+0xe4>)
 80024e8:	791b      	ldrb	r3, [r3, #4]
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d006      	beq.n	80024fc <ssd1306_DrawPixel+0x48>
  {
    color = (SSD1306_COLOR) !color;
 80024ee:	7bfb      	ldrb	r3, [r7, #15]
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	bf0c      	ite	eq
 80024f4:	2301      	moveq	r3, #1
 80024f6:	2300      	movne	r3, #0
 80024f8:	b2db      	uxtb	r3, r3
 80024fa:	73fb      	strb	r3, [r7, #15]
  }

  // Draw in the right color
  if (color == White)
 80024fc:	7bfb      	ldrb	r3, [r7, #15]
 80024fe:	2b01      	cmp	r3, #1
 8002500:	d121      	bne.n	8002546 <ssd1306_DrawPixel+0x92>
  {
    SSD1306_Buffer[x + (y / 8) * width()] |= 1 << (y % 8);
 8002502:	79fc      	ldrb	r4, [r7, #7]
 8002504:	79bb      	ldrb	r3, [r7, #6]
 8002506:	08db      	lsrs	r3, r3, #3
 8002508:	b2dd      	uxtb	r5, r3
 800250a:	462e      	mov	r6, r5
 800250c:	f7ff ff16 	bl	800233c <width>
 8002510:	4603      	mov	r3, r0
 8002512:	4618      	mov	r0, r3
 8002514:	4603      	mov	r3, r0
 8002516:	fb06 f303 	mul.w	r3, r6, r3
 800251a:	4423      	add	r3, r4
 800251c:	4a1f      	ldr	r2, [pc, #124]	@ (800259c <ssd1306_DrawPixel+0xe8>)
 800251e:	5cd3      	ldrb	r3, [r2, r3]
 8002520:	b25a      	sxtb	r2, r3
 8002522:	79bb      	ldrb	r3, [r7, #6]
 8002524:	f003 0307 	and.w	r3, r3, #7
 8002528:	2101      	movs	r1, #1
 800252a:	fa01 f303 	lsl.w	r3, r1, r3
 800252e:	b25b      	sxtb	r3, r3
 8002530:	4313      	orrs	r3, r2
 8002532:	b259      	sxtb	r1, r3
 8002534:	79fa      	ldrb	r2, [r7, #7]
 8002536:	462b      	mov	r3, r5
 8002538:	fb00 f303 	mul.w	r3, r0, r3
 800253c:	4413      	add	r3, r2
 800253e:	b2c9      	uxtb	r1, r1
 8002540:	4a16      	ldr	r2, [pc, #88]	@ (800259c <ssd1306_DrawPixel+0xe8>)
 8002542:	54d1      	strb	r1, [r2, r3]
 8002544:	e024      	b.n	8002590 <ssd1306_DrawPixel+0xdc>
  }
  else
  {
    SSD1306_Buffer[x + (y / 8) * width()] &= ~(1 << (y % 8));
 8002546:	79fc      	ldrb	r4, [r7, #7]
 8002548:	79bb      	ldrb	r3, [r7, #6]
 800254a:	08db      	lsrs	r3, r3, #3
 800254c:	b2dd      	uxtb	r5, r3
 800254e:	462e      	mov	r6, r5
 8002550:	f7ff fef4 	bl	800233c <width>
 8002554:	4603      	mov	r3, r0
 8002556:	4618      	mov	r0, r3
 8002558:	4603      	mov	r3, r0
 800255a:	fb06 f303 	mul.w	r3, r6, r3
 800255e:	4423      	add	r3, r4
 8002560:	4a0e      	ldr	r2, [pc, #56]	@ (800259c <ssd1306_DrawPixel+0xe8>)
 8002562:	5cd3      	ldrb	r3, [r2, r3]
 8002564:	b25a      	sxtb	r2, r3
 8002566:	79bb      	ldrb	r3, [r7, #6]
 8002568:	f003 0307 	and.w	r3, r3, #7
 800256c:	2101      	movs	r1, #1
 800256e:	fa01 f303 	lsl.w	r3, r1, r3
 8002572:	b25b      	sxtb	r3, r3
 8002574:	43db      	mvns	r3, r3
 8002576:	b25b      	sxtb	r3, r3
 8002578:	4013      	ands	r3, r2
 800257a:	b259      	sxtb	r1, r3
 800257c:	79fa      	ldrb	r2, [r7, #7]
 800257e:	462b      	mov	r3, r5
 8002580:	fb00 f303 	mul.w	r3, r0, r3
 8002584:	4413      	add	r3, r2
 8002586:	b2c9      	uxtb	r1, r1
 8002588:	4a04      	ldr	r2, [pc, #16]	@ (800259c <ssd1306_DrawPixel+0xe8>)
 800258a:	54d1      	strb	r1, [r2, r3]
 800258c:	e000      	b.n	8002590 <ssd1306_DrawPixel+0xdc>
    return;
 800258e:	bf00      	nop
  }
}
 8002590:	3714      	adds	r7, #20
 8002592:	46bd      	mov	sp, r7
 8002594:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002596:	bf00      	nop
 8002598:	20000214 	.word	0x20000214
 800259c:	2000021c 	.word	0x2000021c

080025a0 <ssd1306_WriteChar>:
    pY += 8;
  }
}

char ssd1306_WriteChar(char ch, FontDef Font)
{
 80025a0:	b580      	push	{r7, lr}
 80025a2:	b088      	sub	sp, #32
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	1d3b      	adds	r3, r7, #4
 80025a8:	e883 0006 	stmia.w	r3, {r1, r2}
 80025ac:	4603      	mov	r3, r0
 80025ae:	73fb      	strb	r3, [r7, #15]
  uint32_t i, b, j;

  // Check remaining space on current line
  if (width() <= (SSD1306.CurrentX + Font.FontWidth) ||
 80025b0:	f7ff fec4 	bl	800233c <width>
 80025b4:	4603      	mov	r3, r0
 80025b6:	461a      	mov	r2, r3
 80025b8:	4b40      	ldr	r3, [pc, #256]	@ (80026bc <ssd1306_WriteChar+0x11c>)
 80025ba:	881b      	ldrh	r3, [r3, #0]
 80025bc:	4619      	mov	r1, r3
 80025be:	793b      	ldrb	r3, [r7, #4]
 80025c0:	440b      	add	r3, r1
 80025c2:	429a      	cmp	r2, r3
 80025c4:	dd0a      	ble.n	80025dc <ssd1306_WriteChar+0x3c>
    height() <= (SSD1306.CurrentY + Font.FontHeight))
 80025c6:	f7ff fec1 	bl	800234c <height>
 80025ca:	4603      	mov	r3, r0
 80025cc:	461a      	mov	r2, r3
 80025ce:	4b3b      	ldr	r3, [pc, #236]	@ (80026bc <ssd1306_WriteChar+0x11c>)
 80025d0:	885b      	ldrh	r3, [r3, #2]
 80025d2:	4619      	mov	r1, r3
 80025d4:	797b      	ldrb	r3, [r7, #5]
 80025d6:	440b      	add	r3, r1
  if (width() <= (SSD1306.CurrentX + Font.FontWidth) ||
 80025d8:	429a      	cmp	r2, r3
 80025da:	dc01      	bgt.n	80025e0 <ssd1306_WriteChar+0x40>
  {
    // Not enough space on current line
    return 0;
 80025dc:	2300      	movs	r3, #0
 80025de:	e069      	b.n	80026b4 <ssd1306_WriteChar+0x114>
  }

  // Use the font to write
  for (i = 0; i < Font.FontHeight; i++)
 80025e0:	2300      	movs	r3, #0
 80025e2:	61fb      	str	r3, [r7, #28]
 80025e4:	e059      	b.n	800269a <ssd1306_WriteChar+0xfa>
  {
    b = Font.data[(ch - 32) * Font.FontHeight + i];
 80025e6:	68ba      	ldr	r2, [r7, #8]
 80025e8:	7bfb      	ldrb	r3, [r7, #15]
 80025ea:	3b20      	subs	r3, #32
 80025ec:	7979      	ldrb	r1, [r7, #5]
 80025ee:	fb01 f303 	mul.w	r3, r1, r3
 80025f2:	4619      	mov	r1, r3
 80025f4:	69fb      	ldr	r3, [r7, #28]
 80025f6:	440b      	add	r3, r1
 80025f8:	005b      	lsls	r3, r3, #1
 80025fa:	4413      	add	r3, r2
 80025fc:	881b      	ldrh	r3, [r3, #0]
 80025fe:	617b      	str	r3, [r7, #20]
    for (j = 0; j < Font.FontWidth; j++)
 8002600:	2300      	movs	r3, #0
 8002602:	61bb      	str	r3, [r7, #24]
 8002604:	e041      	b.n	800268a <ssd1306_WriteChar+0xea>
    {
      if ((b << j) & 0x8000)
 8002606:	697a      	ldr	r2, [r7, #20]
 8002608:	69bb      	ldr	r3, [r7, #24]
 800260a:	fa02 f303 	lsl.w	r3, r2, r3
 800260e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002612:	2b00      	cmp	r3, #0
 8002614:	d011      	beq.n	800263a <ssd1306_WriteChar+0x9a>
      {
        ssd1306_DrawPixel(SSD1306.CurrentX + j, SSD1306.CurrentY + i);
 8002616:	4b29      	ldr	r3, [pc, #164]	@ (80026bc <ssd1306_WriteChar+0x11c>)
 8002618:	881b      	ldrh	r3, [r3, #0]
 800261a:	b2da      	uxtb	r2, r3
 800261c:	69bb      	ldr	r3, [r7, #24]
 800261e:	b2db      	uxtb	r3, r3
 8002620:	4413      	add	r3, r2
 8002622:	b2d8      	uxtb	r0, r3
 8002624:	4b25      	ldr	r3, [pc, #148]	@ (80026bc <ssd1306_WriteChar+0x11c>)
 8002626:	885b      	ldrh	r3, [r3, #2]
 8002628:	b2da      	uxtb	r2, r3
 800262a:	69fb      	ldr	r3, [r7, #28]
 800262c:	b2db      	uxtb	r3, r3
 800262e:	4413      	add	r3, r2
 8002630:	b2db      	uxtb	r3, r3
 8002632:	4619      	mov	r1, r3
 8002634:	f7ff ff3e 	bl	80024b4 <ssd1306_DrawPixel>
 8002638:	e024      	b.n	8002684 <ssd1306_WriteChar+0xe4>
      }
      else
      {
        SSD1306.Color = !SSD1306.Color;
 800263a:	4b20      	ldr	r3, [pc, #128]	@ (80026bc <ssd1306_WriteChar+0x11c>)
 800263c:	795b      	ldrb	r3, [r3, #5]
 800263e:	2b00      	cmp	r3, #0
 8002640:	bf0c      	ite	eq
 8002642:	2301      	moveq	r3, #1
 8002644:	2300      	movne	r3, #0
 8002646:	b2db      	uxtb	r3, r3
 8002648:	461a      	mov	r2, r3
 800264a:	4b1c      	ldr	r3, [pc, #112]	@ (80026bc <ssd1306_WriteChar+0x11c>)
 800264c:	715a      	strb	r2, [r3, #5]
        ssd1306_DrawPixel(SSD1306.CurrentX + j, SSD1306.CurrentY + i);
 800264e:	4b1b      	ldr	r3, [pc, #108]	@ (80026bc <ssd1306_WriteChar+0x11c>)
 8002650:	881b      	ldrh	r3, [r3, #0]
 8002652:	b2da      	uxtb	r2, r3
 8002654:	69bb      	ldr	r3, [r7, #24]
 8002656:	b2db      	uxtb	r3, r3
 8002658:	4413      	add	r3, r2
 800265a:	b2d8      	uxtb	r0, r3
 800265c:	4b17      	ldr	r3, [pc, #92]	@ (80026bc <ssd1306_WriteChar+0x11c>)
 800265e:	885b      	ldrh	r3, [r3, #2]
 8002660:	b2da      	uxtb	r2, r3
 8002662:	69fb      	ldr	r3, [r7, #28]
 8002664:	b2db      	uxtb	r3, r3
 8002666:	4413      	add	r3, r2
 8002668:	b2db      	uxtb	r3, r3
 800266a:	4619      	mov	r1, r3
 800266c:	f7ff ff22 	bl	80024b4 <ssd1306_DrawPixel>
        SSD1306.Color = !SSD1306.Color;
 8002670:	4b12      	ldr	r3, [pc, #72]	@ (80026bc <ssd1306_WriteChar+0x11c>)
 8002672:	795b      	ldrb	r3, [r3, #5]
 8002674:	2b00      	cmp	r3, #0
 8002676:	bf0c      	ite	eq
 8002678:	2301      	moveq	r3, #1
 800267a:	2300      	movne	r3, #0
 800267c:	b2db      	uxtb	r3, r3
 800267e:	461a      	mov	r2, r3
 8002680:	4b0e      	ldr	r3, [pc, #56]	@ (80026bc <ssd1306_WriteChar+0x11c>)
 8002682:	715a      	strb	r2, [r3, #5]
    for (j = 0; j < Font.FontWidth; j++)
 8002684:	69bb      	ldr	r3, [r7, #24]
 8002686:	3301      	adds	r3, #1
 8002688:	61bb      	str	r3, [r7, #24]
 800268a:	793b      	ldrb	r3, [r7, #4]
 800268c:	461a      	mov	r2, r3
 800268e:	69bb      	ldr	r3, [r7, #24]
 8002690:	4293      	cmp	r3, r2
 8002692:	d3b8      	bcc.n	8002606 <ssd1306_WriteChar+0x66>
  for (i = 0; i < Font.FontHeight; i++)
 8002694:	69fb      	ldr	r3, [r7, #28]
 8002696:	3301      	adds	r3, #1
 8002698:	61fb      	str	r3, [r7, #28]
 800269a:	797b      	ldrb	r3, [r7, #5]
 800269c:	461a      	mov	r2, r3
 800269e:	69fb      	ldr	r3, [r7, #28]
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d3a0      	bcc.n	80025e6 <ssd1306_WriteChar+0x46>
      }
    }
  }

  // The current space is now taken
  SSD1306.CurrentX += Font.FontWidth;
 80026a4:	4b05      	ldr	r3, [pc, #20]	@ (80026bc <ssd1306_WriteChar+0x11c>)
 80026a6:	881b      	ldrh	r3, [r3, #0]
 80026a8:	793a      	ldrb	r2, [r7, #4]
 80026aa:	4413      	add	r3, r2
 80026ac:	b29a      	uxth	r2, r3
 80026ae:	4b03      	ldr	r3, [pc, #12]	@ (80026bc <ssd1306_WriteChar+0x11c>)
 80026b0:	801a      	strh	r2, [r3, #0]

  // Return written char for validation
  return ch;
 80026b2:	7bfb      	ldrb	r3, [r7, #15]
}
 80026b4:	4618      	mov	r0, r3
 80026b6:	3720      	adds	r7, #32
 80026b8:	46bd      	mov	sp, r7
 80026ba:	bd80      	pop	{r7, pc}
 80026bc:	20000214 	.word	0x20000214

080026c0 <ssd1306_WriteString>:

//
//  Write full string to screenbuffer
//
char ssd1306_WriteString(char* str, FontDef Font)
{
 80026c0:	b580      	push	{r7, lr}
 80026c2:	b084      	sub	sp, #16
 80026c4:	af00      	add	r7, sp, #0
 80026c6:	60f8      	str	r0, [r7, #12]
 80026c8:	1d3b      	adds	r3, r7, #4
 80026ca:	e883 0006 	stmia.w	r3, {r1, r2}
  // Write until null-byte
  while (*str)
 80026ce:	e012      	b.n	80026f6 <ssd1306_WriteString+0x36>
  {
    if (ssd1306_WriteChar(*str, Font) != *str)
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	7818      	ldrb	r0, [r3, #0]
 80026d4:	1d3b      	adds	r3, r7, #4
 80026d6:	e893 0006 	ldmia.w	r3, {r1, r2}
 80026da:	f7ff ff61 	bl	80025a0 <ssd1306_WriteChar>
 80026de:	4603      	mov	r3, r0
 80026e0:	461a      	mov	r2, r3
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	781b      	ldrb	r3, [r3, #0]
 80026e6:	429a      	cmp	r2, r3
 80026e8:	d002      	beq.n	80026f0 <ssd1306_WriteString+0x30>
    {
      // Char could not be written
      return *str;
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	781b      	ldrb	r3, [r3, #0]
 80026ee:	e008      	b.n	8002702 <ssd1306_WriteString+0x42>
    }

    // Next char
    str++;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	3301      	adds	r3, #1
 80026f4:	60fb      	str	r3, [r7, #12]
  while (*str)
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	781b      	ldrb	r3, [r3, #0]
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d1e8      	bne.n	80026d0 <ssd1306_WriteString+0x10>
  }

  // Everything ok
  return *str;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	781b      	ldrb	r3, [r3, #0]
}
 8002702:	4618      	mov	r0, r3
 8002704:	3710      	adds	r7, #16
 8002706:	46bd      	mov	sp, r7
 8002708:	bd80      	pop	{r7, pc}
	...

0800270c <ssd1306_SetCursor>:

//
//  Position the cursor
//
void ssd1306_SetCursor(uint8_t x, uint8_t y)
{
 800270c:	b480      	push	{r7}
 800270e:	b083      	sub	sp, #12
 8002710:	af00      	add	r7, sp, #0
 8002712:	4603      	mov	r3, r0
 8002714:	460a      	mov	r2, r1
 8002716:	71fb      	strb	r3, [r7, #7]
 8002718:	4613      	mov	r3, r2
 800271a:	71bb      	strb	r3, [r7, #6]
  SSD1306.CurrentX = x;
 800271c:	79fb      	ldrb	r3, [r7, #7]
 800271e:	b29a      	uxth	r2, r3
 8002720:	4b05      	ldr	r3, [pc, #20]	@ (8002738 <ssd1306_SetCursor+0x2c>)
 8002722:	801a      	strh	r2, [r3, #0]
  SSD1306.CurrentY = y;
 8002724:	79bb      	ldrb	r3, [r7, #6]
 8002726:	b29a      	uxth	r2, r3
 8002728:	4b03      	ldr	r3, [pc, #12]	@ (8002738 <ssd1306_SetCursor+0x2c>)
 800272a:	805a      	strh	r2, [r3, #2]
}
 800272c:	bf00      	nop
 800272e:	370c      	adds	r7, #12
 8002730:	46bd      	mov	sp, r7
 8002732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002736:	4770      	bx	lr
 8002738:	20000214 	.word	0x20000214

0800273c <ssd1306_Clear>:

void ssd1306_Clear()
{
 800273c:	b580      	push	{r7, lr}
 800273e:	af00      	add	r7, sp, #0
  memset(SSD1306_Buffer, 0, SSD1306_BUFFER_SIZE);
 8002740:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002744:	2100      	movs	r1, #0
 8002746:	4802      	ldr	r0, [pc, #8]	@ (8002750 <ssd1306_Clear+0x14>)
 8002748:	f00b f99c 	bl	800da84 <memset>
}
 800274c:	bf00      	nop
 800274e:	bd80      	pop	{r7, pc}
 8002750:	2000021c 	.word	0x2000021c

08002754 <ssd1306_WriteCommand>:

//
//  Send a byte to the command register
//
void ssd1306_WriteCommand(uint8_t command)
{
 8002754:	b580      	push	{r7, lr}
 8002756:	b086      	sub	sp, #24
 8002758:	af04      	add	r7, sp, #16
 800275a:	4603      	mov	r3, r0
 800275c:	71fb      	strb	r3, [r7, #7]
  HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &command, 1, 10);
 800275e:	230a      	movs	r3, #10
 8002760:	9302      	str	r3, [sp, #8]
 8002762:	2301      	movs	r3, #1
 8002764:	9301      	str	r3, [sp, #4]
 8002766:	1dfb      	adds	r3, r7, #7
 8002768:	9300      	str	r3, [sp, #0]
 800276a:	2301      	movs	r3, #1
 800276c:	2200      	movs	r2, #0
 800276e:	2178      	movs	r1, #120	@ 0x78
 8002770:	4803      	ldr	r0, [pc, #12]	@ (8002780 <ssd1306_WriteCommand+0x2c>)
 8002772:	f002 fa5b 	bl	8004c2c <HAL_I2C_Mem_Write>
}
 8002776:	bf00      	nop
 8002778:	3708      	adds	r7, #8
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}
 800277e:	bf00      	nop
 8002780:	20000444 	.word	0x20000444

08002784 <ssd1306_WriteData>:

void ssd1306_WriteData(uint8_t* data, uint16_t size)
{
 8002784:	b580      	push	{r7, lr}
 8002786:	b086      	sub	sp, #24
 8002788:	af04      	add	r7, sp, #16
 800278a:	6078      	str	r0, [r7, #4]
 800278c:	460b      	mov	r3, r1
 800278e:	807b      	strh	r3, [r7, #2]
  HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, data, size, 100);
 8002790:	2364      	movs	r3, #100	@ 0x64
 8002792:	9302      	str	r3, [sp, #8]
 8002794:	887b      	ldrh	r3, [r7, #2]
 8002796:	9301      	str	r3, [sp, #4]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	9300      	str	r3, [sp, #0]
 800279c:	2301      	movs	r3, #1
 800279e:	2240      	movs	r2, #64	@ 0x40
 80027a0:	2178      	movs	r1, #120	@ 0x78
 80027a2:	4803      	ldr	r0, [pc, #12]	@ (80027b0 <ssd1306_WriteData+0x2c>)
 80027a4:	f002 fa42 	bl	8004c2c <HAL_I2C_Mem_Write>
}
 80027a8:	bf00      	nop
 80027aa:	3708      	adds	r7, #8
 80027ac:	46bd      	mov	sp, r7
 80027ae:	bd80      	pop	{r7, pc}
 80027b0:	20000444 	.word	0x20000444

080027b4 <ssd1306_UpdateScreen>:

//
//  Write the screenbuffer with changed to the screen
//
void ssd1306_UpdateScreen(void)
{
 80027b4:	b590      	push	{r4, r7, lr}
 80027b6:	b083      	sub	sp, #12
 80027b8:	af00      	add	r7, sp, #0
  uint8_t i;
  for (i = 0; i < SSD1306_HEIGHT / 8; i++)
 80027ba:	2300      	movs	r3, #0
 80027bc:	71fb      	strb	r3, [r7, #7]
 80027be:	e019      	b.n	80027f4 <ssd1306_UpdateScreen+0x40>
  {
    ssd1306_WriteCommand(0xB0 + i);
 80027c0:	79fb      	ldrb	r3, [r7, #7]
 80027c2:	3b50      	subs	r3, #80	@ 0x50
 80027c4:	b2db      	uxtb	r3, r3
 80027c6:	4618      	mov	r0, r3
 80027c8:	f7ff ffc4 	bl	8002754 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(SETLOWCOLUMN);
 80027cc:	2000      	movs	r0, #0
 80027ce:	f7ff ffc1 	bl	8002754 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(SETHIGHCOLUMN);
 80027d2:	2010      	movs	r0, #16
 80027d4:	f7ff ffbe 	bl	8002754 <ssd1306_WriteCommand>
    ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH * i], width());
 80027d8:	79fb      	ldrb	r3, [r7, #7]
 80027da:	01db      	lsls	r3, r3, #7
 80027dc:	4a09      	ldr	r2, [pc, #36]	@ (8002804 <ssd1306_UpdateScreen+0x50>)
 80027de:	189c      	adds	r4, r3, r2
 80027e0:	f7ff fdac 	bl	800233c <width>
 80027e4:	4603      	mov	r3, r0
 80027e6:	4619      	mov	r1, r3
 80027e8:	4620      	mov	r0, r4
 80027ea:	f7ff ffcb 	bl	8002784 <ssd1306_WriteData>
  for (i = 0; i < SSD1306_HEIGHT / 8; i++)
 80027ee:	79fb      	ldrb	r3, [r7, #7]
 80027f0:	3301      	adds	r3, #1
 80027f2:	71fb      	strb	r3, [r7, #7]
 80027f4:	79fb      	ldrb	r3, [r7, #7]
 80027f6:	2b03      	cmp	r3, #3
 80027f8:	d9e2      	bls.n	80027c0 <ssd1306_UpdateScreen+0xc>
  }
}
 80027fa:	bf00      	nop
 80027fc:	bf00      	nop
 80027fe:	370c      	adds	r7, #12
 8002800:	46bd      	mov	sp, r7
 8002802:	bd90      	pop	{r4, r7, pc}
 8002804:	2000021c 	.word	0x2000021c

08002808 <board_button_init>:
---------------------------------------*/

#include "board.h"

void board_button_init(void)
{
 8002808:	b580      	push	{r7, lr}
 800280a:	b086      	sub	sp, #24
 800280c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800280e:	1d3b      	adds	r3, r7, #4
 8002810:	2200      	movs	r2, #0
 8002812:	601a      	str	r2, [r3, #0]
 8002814:	605a      	str	r2, [r3, #4]
 8002816:	609a      	str	r2, [r3, #8]
 8002818:	60da      	str	r2, [r3, #12]
 800281a:	611a      	str	r2, [r3, #16]
  
  /* GPIO Ports Clock Enable */
  KEY_GPIO_CLK_ENABLE();
 800281c:	2300      	movs	r3, #0
 800281e:	603b      	str	r3, [r7, #0]
 8002820:	4b0d      	ldr	r3, [pc, #52]	@ (8002858 <board_button_init+0x50>)
 8002822:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002824:	4a0c      	ldr	r2, [pc, #48]	@ (8002858 <board_button_init+0x50>)
 8002826:	f043 0304 	orr.w	r3, r3, #4
 800282a:	6313      	str	r3, [r2, #48]	@ 0x30
 800282c:	4b0a      	ldr	r3, [pc, #40]	@ (8002858 <board_button_init+0x50>)
 800282e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002830:	f003 0304 	and.w	r3, r3, #4
 8002834:	603b      	str	r3, [r7, #0]
 8002836:	683b      	ldr	r3, [r7, #0]
  
  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY_Pin;
 8002838:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800283c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800283e:	2300      	movs	r3, #0
 8002840:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8002842:	2302      	movs	r3, #2
 8002844:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(KEY_GPIO_Port, &GPIO_InitStruct);
 8002846:	1d3b      	adds	r3, r7, #4
 8002848:	4619      	mov	r1, r3
 800284a:	4804      	ldr	r0, [pc, #16]	@ (800285c <board_button_init+0x54>)
 800284c:	f001 feac 	bl	80045a8 <HAL_GPIO_Init>
}
 8002850:	bf00      	nop
 8002852:	3718      	adds	r7, #24
 8002854:	46bd      	mov	sp, r7
 8002856:	bd80      	pop	{r7, pc}
 8002858:	40023800 	.word	0x40023800
 800285c:	40020800 	.word	0x40020800

08002860 <board_button_pressed>:

uint8_t board_button_pressed(void)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	af00      	add	r7, sp, #0
  return HAL_GPIO_ReadPin(KEY_GPIO_Port,KEY_Pin)==GPIO_PIN_SET?1:0;
 8002864:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002868:	4805      	ldr	r0, [pc, #20]	@ (8002880 <board_button_pressed+0x20>)
 800286a:	f002 f839 	bl	80048e0 <HAL_GPIO_ReadPin>
 800286e:	4603      	mov	r3, r0
 8002870:	2b01      	cmp	r3, #1
 8002872:	bf0c      	ite	eq
 8002874:	2301      	moveq	r3, #1
 8002876:	2300      	movne	r3, #0
 8002878:	b2db      	uxtb	r3, r3
}
 800287a:	4618      	mov	r0, r3
 800287c:	bd80      	pop	{r7, pc}
 800287e:	bf00      	nop
 8002880:	40020800 	.word	0x40020800

08002884 <board_led_init>:

void board_led_init(void)
{
 8002884:	b580      	push	{r7, lr}
 8002886:	b086      	sub	sp, #24
 8002888:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800288a:	1d3b      	adds	r3, r7, #4
 800288c:	2200      	movs	r2, #0
 800288e:	601a      	str	r2, [r3, #0]
 8002890:	605a      	str	r2, [r3, #4]
 8002892:	609a      	str	r2, [r3, #8]
 8002894:	60da      	str	r2, [r3, #12]
 8002896:	611a      	str	r2, [r3, #16]
  
  /* GPIO Ports Clock Enable */
  LED_GPIO_CLK_ENABLE();
 8002898:	2300      	movs	r3, #0
 800289a:	603b      	str	r3, [r7, #0]
 800289c:	4b10      	ldr	r3, [pc, #64]	@ (80028e0 <board_led_init+0x5c>)
 800289e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028a0:	4a0f      	ldr	r2, [pc, #60]	@ (80028e0 <board_led_init+0x5c>)
 80028a2:	f043 0302 	orr.w	r3, r3, #2
 80028a6:	6313      	str	r3, [r2, #48]	@ 0x30
 80028a8:	4b0d      	ldr	r3, [pc, #52]	@ (80028e0 <board_led_init+0x5c>)
 80028aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028ac:	f003 0302 	and.w	r3, r3, #2
 80028b0:	603b      	str	r3, [r7, #0]
 80028b2:	683b      	ldr	r3, [r7, #0]
  
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80028b4:	2200      	movs	r2, #0
 80028b6:	2104      	movs	r1, #4
 80028b8:	480a      	ldr	r0, [pc, #40]	@ (80028e4 <board_led_init+0x60>)
 80028ba:	f002 f829 	bl	8004910 <HAL_GPIO_WritePin>
  
  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 80028be:	2304      	movs	r3, #4
 80028c0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80028c2:	2301      	movs	r3, #1
 80028c4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028c6:	2300      	movs	r3, #0
 80028c8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028ca:	2300      	movs	r3, #0
 80028cc:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80028ce:	1d3b      	adds	r3, r7, #4
 80028d0:	4619      	mov	r1, r3
 80028d2:	4804      	ldr	r0, [pc, #16]	@ (80028e4 <board_led_init+0x60>)
 80028d4:	f001 fe68 	bl	80045a8 <HAL_GPIO_Init>
}
 80028d8:	bf00      	nop
 80028da:	3718      	adds	r7, #24
 80028dc:	46bd      	mov	sp, r7
 80028de:	bd80      	pop	{r7, pc}
 80028e0:	40023800 	.word	0x40023800
 80028e4:	40020400 	.word	0x40020400

080028e8 <board_led_toggle>:

void board_led_toggle(void)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	af00      	add	r7, sp, #0
    HAL_GPIO_TogglePin(LED_GPIO_Port,LED_Pin);
 80028ec:	2104      	movs	r1, #4
 80028ee:	4802      	ldr	r0, [pc, #8]	@ (80028f8 <board_led_toggle+0x10>)
 80028f0:	f002 f827 	bl	8004942 <HAL_GPIO_TogglePin>
}
 80028f4:	bf00      	nop
 80028f6:	bd80      	pop	{r7, pc}
 80028f8:	40020400 	.word	0x40020400

080028fc <board_led_set>:

void board_led_set(uint8_t set)
{
 80028fc:	b580      	push	{r7, lr}
 80028fe:	b082      	sub	sp, #8
 8002900:	af00      	add	r7, sp, #0
 8002902:	4603      	mov	r3, r0
 8002904:	71fb      	strb	r3, [r7, #7]
    if (set)
 8002906:	79fb      	ldrb	r3, [r7, #7]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d005      	beq.n	8002918 <board_led_set+0x1c>
        HAL_GPIO_WritePin(LED_GPIO_Port,LED_Pin,GPIO_PIN_SET);
 800290c:	2201      	movs	r2, #1
 800290e:	2104      	movs	r1, #4
 8002910:	4806      	ldr	r0, [pc, #24]	@ (800292c <board_led_set+0x30>)
 8002912:	f001 fffd 	bl	8004910 <HAL_GPIO_WritePin>
    else
        HAL_GPIO_WritePin(LED_GPIO_Port,LED_Pin,GPIO_PIN_RESET);
}
 8002916:	e004      	b.n	8002922 <board_led_set+0x26>
        HAL_GPIO_WritePin(LED_GPIO_Port,LED_Pin,GPIO_PIN_RESET);
 8002918:	2200      	movs	r2, #0
 800291a:	2104      	movs	r1, #4
 800291c:	4803      	ldr	r0, [pc, #12]	@ (800292c <board_led_set+0x30>)
 800291e:	f001 fff7 	bl	8004910 <HAL_GPIO_WritePin>
}
 8002922:	bf00      	nop
 8002924:	3708      	adds	r7, #8
 8002926:	46bd      	mov	sp, r7
 8002928:	bd80      	pop	{r7, pc}
 800292a:	bf00      	nop
 800292c:	40020400 	.word	0x40020400

08002930 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8002930:	b580      	push	{r7, lr}
 8002932:	b082      	sub	sp, #8
 8002934:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8002936:	2300      	movs	r3, #0
 8002938:	607b      	str	r3, [r7, #4]
 800293a:	4b0c      	ldr	r3, [pc, #48]	@ (800296c <MX_DMA_Init+0x3c>)
 800293c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800293e:	4a0b      	ldr	r2, [pc, #44]	@ (800296c <MX_DMA_Init+0x3c>)
 8002940:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002944:	6313      	str	r3, [r2, #48]	@ 0x30
 8002946:	4b09      	ldr	r3, [pc, #36]	@ (800296c <MX_DMA_Init+0x3c>)
 8002948:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800294a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800294e:	607b      	str	r3, [r7, #4]
 8002950:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8002952:	2200      	movs	r2, #0
 8002954:	2105      	movs	r1, #5
 8002956:	200b      	movs	r0, #11
 8002958:	f001 fa50 	bl	8003dfc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 800295c:	200b      	movs	r0, #11
 800295e:	f001 fa69 	bl	8003e34 <HAL_NVIC_EnableIRQ>

}
 8002962:	bf00      	nop
 8002964:	3708      	adds	r7, #8
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}
 800296a:	bf00      	nop
 800296c:	40023800 	.word	0x40023800

08002970 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8002970:	b580      	push	{r7, lr}
 8002972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */
  /* Create the mutex(es) */
  /* creation of mutexMpu6050 */
  mutexMpu6050Handle = osMutexNew(&mutexMpu6050_attributes);
 8002974:	4827      	ldr	r0, [pc, #156]	@ (8002a14 <MX_FREERTOS_Init+0xa4>)
 8002976:	f007 f974 	bl	8009c62 <osMutexNew>
 800297a:	4603      	mov	r3, r0
 800297c:	4a26      	ldr	r2, [pc, #152]	@ (8002a18 <MX_FREERTOS_Init+0xa8>)
 800297e:	6013      	str	r3, [r2, #0]

  /* creation of mutexIcm20948 */
  mutexIcm20948Handle = osMutexNew(&mutexIcm20948_attributes);
 8002980:	4826      	ldr	r0, [pc, #152]	@ (8002a1c <MX_FREERTOS_Init+0xac>)
 8002982:	f007 f96e 	bl	8009c62 <osMutexNew>
 8002986:	4603      	mov	r3, r0
 8002988:	4a25      	ldr	r2, [pc, #148]	@ (8002a20 <MX_FREERTOS_Init+0xb0>)
 800298a:	6013      	str	r3, [r2, #0]
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* USER CODE BEGIN RTOS_SEMAPHORES */
  /* add semaphores, ... */
  dmaCompleteSemaphore = xSemaphoreCreateBinary();
 800298c:	2203      	movs	r2, #3
 800298e:	2100      	movs	r1, #0
 8002990:	2001      	movs	r0, #1
 8002992:	f007 fbbc 	bl	800a10e <xQueueGenericCreate>
 8002996:	4603      	mov	r3, r0
 8002998:	4a22      	ldr	r2, [pc, #136]	@ (8002a24 <MX_FREERTOS_Init+0xb4>)
 800299a:	6013      	str	r3, [r2, #0]
  if (dmaCompleteSemaphore == NULL) {
 800299c:	4b21      	ldr	r3, [pc, #132]	@ (8002a24 <MX_FREERTOS_Init+0xb4>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d104      	bne.n	80029ae <MX_FREERTOS_Init+0x3e>
	  // Handle semaphore creation failure
	  printf("Failed to create dmaCompleteSemaphore.\r\n");
 80029a4:	4820      	ldr	r0, [pc, #128]	@ (8002a28 <MX_FREERTOS_Init+0xb8>)
 80029a6:	f00a ff59 	bl	800d85c <puts>
	  while (1);
 80029aa:	bf00      	nop
 80029ac:	e7fd      	b.n	80029aa <MX_FREERTOS_Init+0x3a>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of buttonTask */
  buttonTaskHandle = osThreadNew(StartButtonTask, NULL, &buttonTask_attributes);
 80029ae:	4a1f      	ldr	r2, [pc, #124]	@ (8002a2c <MX_FREERTOS_Init+0xbc>)
 80029b0:	2100      	movs	r1, #0
 80029b2:	481f      	ldr	r0, [pc, #124]	@ (8002a30 <MX_FREERTOS_Init+0xc0>)
 80029b4:	f007 f8a8 	bl	8009b08 <osThreadNew>
 80029b8:	4603      	mov	r3, r0
 80029ba:	4a1e      	ldr	r2, [pc, #120]	@ (8002a34 <MX_FREERTOS_Init+0xc4>)
 80029bc:	6013      	str	r3, [r2, #0]

  /* creation of lcdTask */
  lcdTaskHandle = osThreadNew(StartLcdTask, NULL, &lcdTask_attributes);
 80029be:	4a1e      	ldr	r2, [pc, #120]	@ (8002a38 <MX_FREERTOS_Init+0xc8>)
 80029c0:	2100      	movs	r1, #0
 80029c2:	481e      	ldr	r0, [pc, #120]	@ (8002a3c <MX_FREERTOS_Init+0xcc>)
 80029c4:	f007 f8a0 	bl	8009b08 <osThreadNew>
 80029c8:	4603      	mov	r3, r0
 80029ca:	4a1d      	ldr	r2, [pc, #116]	@ (8002a40 <MX_FREERTOS_Init+0xd0>)
 80029cc:	6013      	str	r3, [r2, #0]

  /* creation of mpu6050Task */
  mpu6050TaskHandle = osThreadNew(StartTaskMpu6050, NULL, &mpu6050Task_attributes);
 80029ce:	4a1d      	ldr	r2, [pc, #116]	@ (8002a44 <MX_FREERTOS_Init+0xd4>)
 80029d0:	2100      	movs	r1, #0
 80029d2:	481d      	ldr	r0, [pc, #116]	@ (8002a48 <MX_FREERTOS_Init+0xd8>)
 80029d4:	f007 f898 	bl	8009b08 <osThreadNew>
 80029d8:	4603      	mov	r3, r0
 80029da:	4a1c      	ldr	r2, [pc, #112]	@ (8002a4c <MX_FREERTOS_Init+0xdc>)
 80029dc:	6013      	str	r3, [r2, #0]

  /* creation of icm20948Task */
  icm20948TaskHandle = osThreadNew(StartTaskIcm20948, NULL, &icm20948Task_attributes);
 80029de:	4a1c      	ldr	r2, [pc, #112]	@ (8002a50 <MX_FREERTOS_Init+0xe0>)
 80029e0:	2100      	movs	r1, #0
 80029e2:	481c      	ldr	r0, [pc, #112]	@ (8002a54 <MX_FREERTOS_Init+0xe4>)
 80029e4:	f007 f890 	bl	8009b08 <osThreadNew>
 80029e8:	4603      	mov	r3, r0
 80029ea:	4a1b      	ldr	r2, [pc, #108]	@ (8002a58 <MX_FREERTOS_Init+0xe8>)
 80029ec:	6013      	str	r3, [r2, #0]

  /* creation of taskKalmanFilte */
  taskKalmanFilteHandle = osThreadNew(StartTaskKalmanFilter, NULL, &taskKalmanFilte_attributes);
 80029ee:	4a1b      	ldr	r2, [pc, #108]	@ (8002a5c <MX_FREERTOS_Init+0xec>)
 80029f0:	2100      	movs	r1, #0
 80029f2:	481b      	ldr	r0, [pc, #108]	@ (8002a60 <MX_FREERTOS_Init+0xf0>)
 80029f4:	f007 f888 	bl	8009b08 <osThreadNew>
 80029f8:	4603      	mov	r3, r0
 80029fa:	4a1a      	ldr	r2, [pc, #104]	@ (8002a64 <MX_FREERTOS_Init+0xf4>)
 80029fc:	6013      	str	r3, [r2, #0]

  /* creation of bmp280Task */
  bmp280TaskHandle = osThreadNew(StartTaskBmp280, NULL, &bmp280Task_attributes);
 80029fe:	4a1a      	ldr	r2, [pc, #104]	@ (8002a68 <MX_FREERTOS_Init+0xf8>)
 8002a00:	2100      	movs	r1, #0
 8002a02:	481a      	ldr	r0, [pc, #104]	@ (8002a6c <MX_FREERTOS_Init+0xfc>)
 8002a04:	f007 f880 	bl	8009b08 <osThreadNew>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	4a19      	ldr	r2, [pc, #100]	@ (8002a70 <MX_FREERTOS_Init+0x100>)
 8002a0c:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8002a0e:	bf00      	nop
 8002a10:	bd80      	pop	{r7, pc}
 8002a12:	bf00      	nop
 8002a14:	08010d8c 	.word	0x08010d8c
 8002a18:	20000438 	.word	0x20000438
 8002a1c:	08010d9c 	.word	0x08010d9c
 8002a20:	2000043c 	.word	0x2000043c
 8002a24:	200005dc 	.word	0x200005dc
 8002a28:	08010374 	.word	0x08010374
 8002a2c:	08010cb4 	.word	0x08010cb4
 8002a30:	08002a75 	.word	0x08002a75
 8002a34:	20000420 	.word	0x20000420
 8002a38:	08010cd8 	.word	0x08010cd8
 8002a3c:	08002aad 	.word	0x08002aad
 8002a40:	20000424 	.word	0x20000424
 8002a44:	08010cfc 	.word	0x08010cfc
 8002a48:	08002bd1 	.word	0x08002bd1
 8002a4c:	20000428 	.word	0x20000428
 8002a50:	08010d20 	.word	0x08010d20
 8002a54:	08002c19 	.word	0x08002c19
 8002a58:	2000042c 	.word	0x2000042c
 8002a5c:	08010d44 	.word	0x08010d44
 8002a60:	08002c81 	.word	0x08002c81
 8002a64:	20000430 	.word	0x20000430
 8002a68:	08010d68 	.word	0x08010d68
 8002a6c:	08002cb5 	.word	0x08002cb5
 8002a70:	20000434 	.word	0x20000434

08002a74 <StartButtonTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartButtonTask */
void StartButtonTask(void *argument)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b084      	sub	sp, #16
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartButtonTask */
  /* Infinite loop */
	uint32_t now;
	for(;;)
	{
	  if(board_button_pressed())
 8002a7c:	f7ff fef0 	bl	8002860 <board_button_pressed>
 8002a80:	4603      	mov	r3, r0
 8002a82:	2b00      	cmp	r3, #0
 8002a84:	d003      	beq.n	8002a8e <StartButtonTask+0x1a>
	  {
		  board_led_set(GPIO_PIN_SET);
 8002a86:	2001      	movs	r0, #1
 8002a88:	f7ff ff38 	bl	80028fc <board_led_set>
 8002a8c:	e00a      	b.n	8002aa4 <StartButtonTask+0x30>
	  }
	  else
	  {
		  if(now >= 100)
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	2b63      	cmp	r3, #99	@ 0x63
 8002a92:	d904      	bls.n	8002a9e <StartButtonTask+0x2a>
		  {
			  now = 0;
 8002a94:	2300      	movs	r3, #0
 8002a96:	60fb      	str	r3, [r7, #12]
			  board_led_toggle();
 8002a98:	f7ff ff26 	bl	80028e8 <board_led_toggle>
 8002a9c:	e002      	b.n	8002aa4 <StartButtonTask+0x30>
		  }
		  else
		  {
			  now++;
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	3301      	adds	r3, #1
 8002aa2:	60fb      	str	r3, [r7, #12]
		  }
	  }
	  osDelay(10);
 8002aa4:	200a      	movs	r0, #10
 8002aa6:	f007 f8c1 	bl	8009c2c <osDelay>
	  if(board_button_pressed())
 8002aaa:	e7e7      	b.n	8002a7c <StartButtonTask+0x8>

08002aac <StartLcdTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartLcdTask */
void StartLcdTask(void *argument)
{
 8002aac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002ab0:	b087      	sub	sp, #28
 8002ab2:	af04      	add	r7, sp, #16
 8002ab4:	6078      	str	r0, [r7, #4]
	static uint8_t is_pressed = 0;
  /* USER CODE BEGIN StartLcdTask */
  /* Infinite loop */
	for(;;)
	{
	  if(board_button_pressed() && !is_pressed)
 8002ab6:	f7ff fed3 	bl	8002860 <board_button_pressed>
 8002aba:	4603      	mov	r3, r0
 8002abc:	2b00      	cmp	r3, #0
 8002abe:	d007      	beq.n	8002ad0 <StartLcdTask+0x24>
 8002ac0:	4b3b      	ldr	r3, [pc, #236]	@ (8002bb0 <StartLcdTask+0x104>)
 8002ac2:	781b      	ldrb	r3, [r3, #0]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d103      	bne.n	8002ad0 <StartLcdTask+0x24>
	  {
		  is_pressed = 1;
 8002ac8:	4b39      	ldr	r3, [pc, #228]	@ (8002bb0 <StartLcdTask+0x104>)
 8002aca:	2201      	movs	r2, #1
 8002acc:	701a      	strb	r2, [r3, #0]
 8002ace:	e018      	b.n	8002b02 <StartLcdTask+0x56>
	  }
	  else if(!board_button_pressed() && is_pressed)
 8002ad0:	f7ff fec6 	bl	8002860 <board_button_pressed>
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d113      	bne.n	8002b02 <StartLcdTask+0x56>
 8002ada:	4b35      	ldr	r3, [pc, #212]	@ (8002bb0 <StartLcdTask+0x104>)
 8002adc:	781b      	ldrb	r3, [r3, #0]
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d00f      	beq.n	8002b02 <StartLcdTask+0x56>
	  {
		  display = display? 0:1;
 8002ae2:	4b34      	ldr	r3, [pc, #208]	@ (8002bb4 <StartLcdTask+0x108>)
 8002ae4:	781b      	ldrb	r3, [r3, #0]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	bf0c      	ite	eq
 8002aea:	2301      	moveq	r3, #1
 8002aec:	2300      	movne	r3, #0
 8002aee:	b2db      	uxtb	r3, r3
 8002af0:	461a      	mov	r2, r3
 8002af2:	4b30      	ldr	r3, [pc, #192]	@ (8002bb4 <StartLcdTask+0x108>)
 8002af4:	701a      	strb	r2, [r3, #0]
		  is_pressed = 0;
 8002af6:	4b2e      	ldr	r3, [pc, #184]	@ (8002bb0 <StartLcdTask+0x104>)
 8002af8:	2200      	movs	r2, #0
 8002afa:	701a      	strb	r2, [r3, #0]
		  printf("change display\r\n");
 8002afc:	482e      	ldr	r0, [pc, #184]	@ (8002bb8 <StartLcdTask+0x10c>)
 8002afe:	f00a fead 	bl	800d85c <puts>
	  }
	  switch (display)
 8002b02:	4b2c      	ldr	r3, [pc, #176]	@ (8002bb4 <StartLcdTask+0x108>)
 8002b04:	781b      	ldrb	r3, [r3, #0]
 8002b06:	2b01      	cmp	r3, #1
 8002b08:	d102      	bne.n	8002b10 <StartLcdTask+0x64>
	  {
	  	  case 1:
	  		  Display_Gyro_Data();
 8002b0a:	f000 fb93 	bl	8003234 <Display_Gyro_Data>
	  		  break;
 8002b0e:	e002      	b.n	8002b16 <StartLcdTask+0x6a>
	  	  default:
	  		  Display_Accel_Data();
 8002b10:	f000 fb0e 	bl	8003130 <Display_Accel_Data>
	  		  break;
 8002b14:	bf00      	nop
	  printf("%.5f, %.5f, %.5f ", ICM20948.acce[0], ICM20948.acce[1], ICM20948.acce[2]);
	  printf("%.5f, %.5f, %.5f\r\n", ICM20948.gyro[0], ICM20948.gyro[1], ICM20948.gyro[2]);
	  */
	  //printf(" Mx: %.5f My: %.5f Mz: %.5f\r\n", ICM20948.mage[0], ICM20948.mage[1], ICM20948.mage[2]);
	  //printf("Temp: %.5f | %.5f\r\n", MPU6050.Temperature, BMP280.temp);
	  printf("%d, %.5f, %.5f, %.5f, ", ++cnt, MPU6050.angle[0], MPU6050.angle[1], MPU6050.angle[2]);
 8002b16:	4b29      	ldr	r3, [pc, #164]	@ (8002bbc <StartLcdTask+0x110>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	3301      	adds	r3, #1
 8002b1c:	4a27      	ldr	r2, [pc, #156]	@ (8002bbc <StartLcdTask+0x110>)
 8002b1e:	6013      	str	r3, [r2, #0]
 8002b20:	4b26      	ldr	r3, [pc, #152]	@ (8002bbc <StartLcdTask+0x110>)
 8002b22:	681e      	ldr	r6, [r3, #0]
 8002b24:	4b26      	ldr	r3, [pc, #152]	@ (8002bc0 <StartLcdTask+0x114>)
 8002b26:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b28:	4618      	mov	r0, r3
 8002b2a:	f7fd fd0d 	bl	8000548 <__aeabi_f2d>
 8002b2e:	4680      	mov	r8, r0
 8002b30:	4689      	mov	r9, r1
 8002b32:	4b23      	ldr	r3, [pc, #140]	@ (8002bc0 <StartLcdTask+0x114>)
 8002b34:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b36:	4618      	mov	r0, r3
 8002b38:	f7fd fd06 	bl	8000548 <__aeabi_f2d>
 8002b3c:	4604      	mov	r4, r0
 8002b3e:	460d      	mov	r5, r1
 8002b40:	4b1f      	ldr	r3, [pc, #124]	@ (8002bc0 <StartLcdTask+0x114>)
 8002b42:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002b44:	4618      	mov	r0, r3
 8002b46:	f7fd fcff 	bl	8000548 <__aeabi_f2d>
 8002b4a:	4602      	mov	r2, r0
 8002b4c:	460b      	mov	r3, r1
 8002b4e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002b52:	e9cd 4500 	strd	r4, r5, [sp]
 8002b56:	4642      	mov	r2, r8
 8002b58:	464b      	mov	r3, r9
 8002b5a:	4631      	mov	r1, r6
 8002b5c:	4819      	ldr	r0, [pc, #100]	@ (8002bc4 <StartLcdTask+0x118>)
 8002b5e:	f00a fe15 	bl	800d78c <iprintf>
	  printf("%.5f, %.5f, %.5f\r\n", ICM20948.angle[1], -ICM20948.angle[0], ICM20948.angle[2]);
 8002b62:	4b19      	ldr	r3, [pc, #100]	@ (8002bc8 <StartLcdTask+0x11c>)
 8002b64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b66:	4618      	mov	r0, r3
 8002b68:	f7fd fcee 	bl	8000548 <__aeabi_f2d>
 8002b6c:	4680      	mov	r8, r0
 8002b6e:	4689      	mov	r9, r1
 8002b70:	4b15      	ldr	r3, [pc, #84]	@ (8002bc8 <StartLcdTask+0x11c>)
 8002b72:	edd3 7a14 	vldr	s15, [r3, #80]	@ 0x50
 8002b76:	eef1 7a67 	vneg.f32	s15, s15
 8002b7a:	ee17 3a90 	vmov	r3, s15
 8002b7e:	4618      	mov	r0, r3
 8002b80:	f7fd fce2 	bl	8000548 <__aeabi_f2d>
 8002b84:	4604      	mov	r4, r0
 8002b86:	460d      	mov	r5, r1
 8002b88:	4b0f      	ldr	r3, [pc, #60]	@ (8002bc8 <StartLcdTask+0x11c>)
 8002b8a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b8c:	4618      	mov	r0, r3
 8002b8e:	f7fd fcdb 	bl	8000548 <__aeabi_f2d>
 8002b92:	4602      	mov	r2, r0
 8002b94:	460b      	mov	r3, r1
 8002b96:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002b9a:	e9cd 4500 	strd	r4, r5, [sp]
 8002b9e:	4642      	mov	r2, r8
 8002ba0:	464b      	mov	r3, r9
 8002ba2:	480a      	ldr	r0, [pc, #40]	@ (8002bcc <StartLcdTask+0x120>)
 8002ba4:	f00a fdf2 	bl	800d78c <iprintf>
	  osDelay(50);
 8002ba8:	2032      	movs	r0, #50	@ 0x32
 8002baa:	f007 f83f 	bl	8009c2c <osDelay>
	{
 8002bae:	e782      	b.n	8002ab6 <StartLcdTask+0xa>
 8002bb0:	20000440 	.word	0x20000440
 8002bb4:	20000009 	.word	0x20000009
 8002bb8:	0801039c 	.word	0x0801039c
 8002bbc:	2000041c 	.word	0x2000041c
 8002bc0:	200004f8 	.word	0x200004f8
 8002bc4:	080103ac 	.word	0x080103ac
 8002bc8:	2000054c 	.word	0x2000054c
 8002bcc:	080103c4 	.word	0x080103c4

08002bd0 <StartTaskMpu6050>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskMpu6050 */
void StartTaskMpu6050(void *argument)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b082      	sub	sp, #8
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskMpu6050 */
  /* Infinite loop */
	  for(;;)
	  {
		  current_i2c_dma_state = I2C_DMA_STATE_MPU6050;
 8002bd8:	4b0b      	ldr	r3, [pc, #44]	@ (8002c08 <StartTaskMpu6050+0x38>)
 8002bda:	2201      	movs	r2, #1
 8002bdc:	701a      	strb	r2, [r3, #0]
		  MPU6050_Read_DMA(&hi2c1, &MPU6050);
 8002bde:	490b      	ldr	r1, [pc, #44]	@ (8002c0c <StartTaskMpu6050+0x3c>)
 8002be0:	480b      	ldr	r0, [pc, #44]	@ (8002c10 <StartTaskMpu6050+0x40>)
 8002be2:	f7ff fac5 	bl	8002170 <MPU6050_Read_DMA>
		  if (xSemaphoreTake(dmaCompleteSemaphore, portMAX_DELAY) == pdTRUE) {
 8002be6:	4b0b      	ldr	r3, [pc, #44]	@ (8002c14 <StartTaskMpu6050+0x44>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002bee:	4618      	mov	r0, r3
 8002bf0:	f007 fe4a 	bl	800a888 <xQueueSemaphoreTake>
 8002bf4:	4603      	mov	r3, r0
 8002bf6:	2b01      	cmp	r3, #1
 8002bf8:	d102      	bne.n	8002c00 <StartTaskMpu6050+0x30>
			  // Process MPU6050 data
			  MPU6050_Process_Data(&MPU6050);
 8002bfa:	4804      	ldr	r0, [pc, #16]	@ (8002c0c <StartTaskMpu6050+0x3c>)
 8002bfc:	f7ff fad2 	bl	80021a4 <MPU6050_Process_Data>
			  //printf("MPU6050 Ax: %d Ay: %d Az: %d\r\n", MPU6050.Ax, MPU6050.Ay, MPU6050.Az);
		  }
		  osDelay(10);
 8002c00:	200a      	movs	r0, #10
 8002c02:	f007 f813 	bl	8009c2c <osDelay>
		  current_i2c_dma_state = I2C_DMA_STATE_MPU6050;
 8002c06:	e7e7      	b.n	8002bd8 <StartTaskMpu6050+0x8>
 8002c08:	200005d8 	.word	0x200005d8
 8002c0c:	200004f8 	.word	0x200004f8
 8002c10:	20000444 	.word	0x20000444
 8002c14:	200005dc 	.word	0x200005dc

08002c18 <StartTaskIcm20948>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskIcm20948 */
void StartTaskIcm20948(void *argument)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b082      	sub	sp, #8
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskIcm20948 */
  /* Infinite loop */
	  for(;;)
	  {
		  // first read acc & gyro
		  current_i2c_dma_state = I2C_DMA_STATE_ICM20948_ACCEL_GYRO;
 8002c20:	4b14      	ldr	r3, [pc, #80]	@ (8002c74 <StartTaskIcm20948+0x5c>)
 8002c22:	2202      	movs	r2, #2
 8002c24:	701a      	strb	r2, [r3, #0]
		  ICM20948_ReadDMA(&ICM20948);
 8002c26:	4814      	ldr	r0, [pc, #80]	@ (8002c78 <StartTaskIcm20948+0x60>)
 8002c28:	f7fe ffbe 	bl	8001ba8 <ICM20948_ReadDMA>
		  if (xSemaphoreTake(dmaCompleteSemaphore, portMAX_DELAY) == pdTRUE) {
 8002c2c:	4b13      	ldr	r3, [pc, #76]	@ (8002c7c <StartTaskIcm20948+0x64>)
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002c34:	4618      	mov	r0, r3
 8002c36:	f007 fe27 	bl	800a888 <xQueueSemaphoreTake>
 8002c3a:	4603      	mov	r3, r0
 8002c3c:	2b01      	cmp	r3, #1
 8002c3e:	d102      	bne.n	8002c46 <StartTaskIcm20948+0x2e>
			  ICM20948_Process_Gyro_data(&ICM20948);
 8002c40:	480d      	ldr	r0, [pc, #52]	@ (8002c78 <StartTaskIcm20948+0x60>)
 8002c42:	f7fe ffc5 	bl	8001bd0 <ICM20948_Process_Gyro_data>
		      //printf("ICM20948 Ax: %d Ay: %d Az: %d\r\n", ax, ay, az);
		  }
		  // then read mag
		  current_i2c_dma_state = I2C_DMA_STATE_ICM20948_MAG;
 8002c46:	4b0b      	ldr	r3, [pc, #44]	@ (8002c74 <StartTaskIcm20948+0x5c>)
 8002c48:	2203      	movs	r2, #3
 8002c4a:	701a      	strb	r2, [r3, #0]
		  Magnetometer_ReadDMA(&ICM20948);
 8002c4c:	480a      	ldr	r0, [pc, #40]	@ (8002c78 <StartTaskIcm20948+0x60>)
 8002c4e:	f7ff f8ab 	bl	8001da8 <Magnetometer_ReadDMA>
		  if (xSemaphoreTake(dmaCompleteSemaphore, portMAX_DELAY) == pdTRUE) {
 8002c52:	4b0a      	ldr	r3, [pc, #40]	@ (8002c7c <StartTaskIcm20948+0x64>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	f007 fe14 	bl	800a888 <xQueueSemaphoreTake>
 8002c60:	4603      	mov	r3, r0
 8002c62:	2b01      	cmp	r3, #1
 8002c64:	d102      	bne.n	8002c6c <StartTaskIcm20948+0x54>
			  ICM20948_Process_Mage_data(&ICM20948);
 8002c66:	4804      	ldr	r0, [pc, #16]	@ (8002c78 <StartTaskIcm20948+0x60>)
 8002c68:	f7ff f8b4 	bl	8001dd4 <ICM20948_Process_Mage_data>
		      //printf("ICM20948 Mx: %d My: %d Mz: %d\r\n", ICM20948.mage[0], ICM20948.mage[1], ICM20948.mage[2]);
		  }
		  osDelay(10);
 8002c6c:	200a      	movs	r0, #10
 8002c6e:	f006 ffdd 	bl	8009c2c <osDelay>
		  current_i2c_dma_state = I2C_DMA_STATE_ICM20948_ACCEL_GYRO;
 8002c72:	e7d5      	b.n	8002c20 <StartTaskIcm20948+0x8>
 8002c74:	200005d8 	.word	0x200005d8
 8002c78:	2000054c 	.word	0x2000054c
 8002c7c:	200005dc 	.word	0x200005dc

08002c80 <StartTaskKalmanFilter>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskKalmanFilter */
void StartTaskKalmanFilter(void *argument)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b082      	sub	sp, #8
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskKalmanFilter */
  /* Infinite loop */
	  for(;;)
	  {
		  angle_estimation(MPU6050.acce, MPU6050.angle);
 8002c88:	4906      	ldr	r1, [pc, #24]	@ (8002ca4 <StartTaskKalmanFilter+0x24>)
 8002c8a:	4807      	ldr	r0, [pc, #28]	@ (8002ca8 <StartTaskKalmanFilter+0x28>)
 8002c8c:	f000 feb0 	bl	80039f0 <angle_estimation>
		  angle_estimation(ICM20948.acce, ICM20948.angle);
 8002c90:	4906      	ldr	r1, [pc, #24]	@ (8002cac <StartTaskKalmanFilter+0x2c>)
 8002c92:	4807      	ldr	r0, [pc, #28]	@ (8002cb0 <StartTaskKalmanFilter+0x30>)
 8002c94:	f000 feac 	bl	80039f0 <angle_estimation>
		  osDelay(10);
 8002c98:	200a      	movs	r0, #10
 8002c9a:	f006 ffc7 	bl	8009c2c <osDelay>
		  angle_estimation(MPU6050.acce, MPU6050.angle);
 8002c9e:	bf00      	nop
 8002ca0:	e7f2      	b.n	8002c88 <StartTaskKalmanFilter+0x8>
 8002ca2:	bf00      	nop
 8002ca4:	2000053c 	.word	0x2000053c
 8002ca8:	2000050c 	.word	0x2000050c
 8002cac:	2000059c 	.word	0x2000059c
 8002cb0:	20000578 	.word	0x20000578

08002cb4 <StartTaskBmp280>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartTaskBmp280 */
void StartTaskBmp280(void *argument)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b082      	sub	sp, #8
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartTaskBmp280 */
  /* Infinite loop */
	for(;;)
	{
		current_i2c_dma_state = I2C_DMA_STATE_BMP280;
 8002cbc:	4b0b      	ldr	r3, [pc, #44]	@ (8002cec <StartTaskBmp280+0x38>)
 8002cbe:	2204      	movs	r2, #4
 8002cc0:	701a      	strb	r2, [r3, #0]
		//BMP280_ReadTempAndPressure(&BMP280);
		BMP280_Read_DMA(&BMP280);
 8002cc2:	480b      	ldr	r0, [pc, #44]	@ (8002cf0 <StartTaskBmp280+0x3c>)
 8002cc4:	f7fe fdc2 	bl	800184c <BMP280_Read_DMA>
		if (xSemaphoreTake(dmaCompleteSemaphore, portMAX_DELAY) == pdTRUE) {
 8002cc8:	4b0a      	ldr	r3, [pc, #40]	@ (8002cf4 <StartTaskBmp280+0x40>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	f007 fdd9 	bl	800a888 <xQueueSemaphoreTake>
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	2b01      	cmp	r3, #1
 8002cda:	d102      	bne.n	8002ce2 <StartTaskBmp280+0x2e>
			BMP280_Process_data(&BMP280);
 8002cdc:	4804      	ldr	r0, [pc, #16]	@ (8002cf0 <StartTaskBmp280+0x3c>)
 8002cde:	f7fe fd6b 	bl	80017b8 <BMP280_Process_data>
		}
		osDelay(10);
 8002ce2:	200a      	movs	r0, #10
 8002ce4:	f006 ffa2 	bl	8009c2c <osDelay>
		current_i2c_dma_state = I2C_DMA_STATE_BMP280;
 8002ce8:	e7e8      	b.n	8002cbc <StartTaskBmp280+0x8>
 8002cea:	bf00      	nop
 8002cec:	200005d8 	.word	0x200005d8
 8002cf0:	200005ac 	.word	0x200005ac
 8002cf4:	200005dc 	.word	0x200005dc

08002cf8 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b085      	sub	sp, #20
 8002cfc:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002cfe:	2300      	movs	r3, #0
 8002d00:	60fb      	str	r3, [r7, #12]
 8002d02:	4b1e      	ldr	r3, [pc, #120]	@ (8002d7c <MX_GPIO_Init+0x84>)
 8002d04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d06:	4a1d      	ldr	r2, [pc, #116]	@ (8002d7c <MX_GPIO_Init+0x84>)
 8002d08:	f043 0304 	orr.w	r3, r3, #4
 8002d0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d0e:	4b1b      	ldr	r3, [pc, #108]	@ (8002d7c <MX_GPIO_Init+0x84>)
 8002d10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d12:	f003 0304 	and.w	r3, r3, #4
 8002d16:	60fb      	str	r3, [r7, #12]
 8002d18:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8002d1a:	2300      	movs	r3, #0
 8002d1c:	60bb      	str	r3, [r7, #8]
 8002d1e:	4b17      	ldr	r3, [pc, #92]	@ (8002d7c <MX_GPIO_Init+0x84>)
 8002d20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d22:	4a16      	ldr	r2, [pc, #88]	@ (8002d7c <MX_GPIO_Init+0x84>)
 8002d24:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002d28:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d2a:	4b14      	ldr	r3, [pc, #80]	@ (8002d7c <MX_GPIO_Init+0x84>)
 8002d2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d2e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d32:	60bb      	str	r3, [r7, #8]
 8002d34:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d36:	2300      	movs	r3, #0
 8002d38:	607b      	str	r3, [r7, #4]
 8002d3a:	4b10      	ldr	r3, [pc, #64]	@ (8002d7c <MX_GPIO_Init+0x84>)
 8002d3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d3e:	4a0f      	ldr	r2, [pc, #60]	@ (8002d7c <MX_GPIO_Init+0x84>)
 8002d40:	f043 0301 	orr.w	r3, r3, #1
 8002d44:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d46:	4b0d      	ldr	r3, [pc, #52]	@ (8002d7c <MX_GPIO_Init+0x84>)
 8002d48:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d4a:	f003 0301 	and.w	r3, r3, #1
 8002d4e:	607b      	str	r3, [r7, #4]
 8002d50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8002d52:	2300      	movs	r3, #0
 8002d54:	603b      	str	r3, [r7, #0]
 8002d56:	4b09      	ldr	r3, [pc, #36]	@ (8002d7c <MX_GPIO_Init+0x84>)
 8002d58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d5a:	4a08      	ldr	r2, [pc, #32]	@ (8002d7c <MX_GPIO_Init+0x84>)
 8002d5c:	f043 0302 	orr.w	r3, r3, #2
 8002d60:	6313      	str	r3, [r2, #48]	@ 0x30
 8002d62:	4b06      	ldr	r3, [pc, #24]	@ (8002d7c <MX_GPIO_Init+0x84>)
 8002d64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002d66:	f003 0302 	and.w	r3, r3, #2
 8002d6a:	603b      	str	r3, [r7, #0]
 8002d6c:	683b      	ldr	r3, [r7, #0]

}
 8002d6e:	bf00      	nop
 8002d70:	3714      	adds	r7, #20
 8002d72:	46bd      	mov	sp, r7
 8002d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d78:	4770      	bx	lr
 8002d7a:	bf00      	nop
 8002d7c:	40023800 	.word	0x40023800

08002d80 <MX_I2C1_Init>:
I2C_HandleTypeDef hi2c1;
DMA_HandleTypeDef hdma_i2c1_rx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8002d84:	4b12      	ldr	r3, [pc, #72]	@ (8002dd0 <MX_I2C1_Init+0x50>)
 8002d86:	4a13      	ldr	r2, [pc, #76]	@ (8002dd4 <MX_I2C1_Init+0x54>)
 8002d88:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8002d8a:	4b11      	ldr	r3, [pc, #68]	@ (8002dd0 <MX_I2C1_Init+0x50>)
 8002d8c:	4a12      	ldr	r2, [pc, #72]	@ (8002dd8 <MX_I2C1_Init+0x58>)
 8002d8e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8002d90:	4b0f      	ldr	r3, [pc, #60]	@ (8002dd0 <MX_I2C1_Init+0x50>)
 8002d92:	2200      	movs	r2, #0
 8002d94:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8002d96:	4b0e      	ldr	r3, [pc, #56]	@ (8002dd0 <MX_I2C1_Init+0x50>)
 8002d98:	2200      	movs	r2, #0
 8002d9a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8002d9c:	4b0c      	ldr	r3, [pc, #48]	@ (8002dd0 <MX_I2C1_Init+0x50>)
 8002d9e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8002da2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8002da4:	4b0a      	ldr	r3, [pc, #40]	@ (8002dd0 <MX_I2C1_Init+0x50>)
 8002da6:	2200      	movs	r2, #0
 8002da8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8002daa:	4b09      	ldr	r3, [pc, #36]	@ (8002dd0 <MX_I2C1_Init+0x50>)
 8002dac:	2200      	movs	r2, #0
 8002dae:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8002db0:	4b07      	ldr	r3, [pc, #28]	@ (8002dd0 <MX_I2C1_Init+0x50>)
 8002db2:	2200      	movs	r2, #0
 8002db4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8002db6:	4b06      	ldr	r3, [pc, #24]	@ (8002dd0 <MX_I2C1_Init+0x50>)
 8002db8:	2200      	movs	r2, #0
 8002dba:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8002dbc:	4804      	ldr	r0, [pc, #16]	@ (8002dd0 <MX_I2C1_Init+0x50>)
 8002dbe:	f001 fddb 	bl	8004978 <HAL_I2C_Init>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d001      	beq.n	8002dcc <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8002dc8:	f000 fb30 	bl	800342c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8002dcc:	bf00      	nop
 8002dce:	bd80      	pop	{r7, pc}
 8002dd0:	20000444 	.word	0x20000444
 8002dd4:	40005400 	.word	0x40005400
 8002dd8:	00061a80 	.word	0x00061a80

08002ddc <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b08a      	sub	sp, #40	@ 0x28
 8002de0:	af00      	add	r7, sp, #0
 8002de2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002de4:	f107 0314 	add.w	r3, r7, #20
 8002de8:	2200      	movs	r2, #0
 8002dea:	601a      	str	r2, [r3, #0]
 8002dec:	605a      	str	r2, [r3, #4]
 8002dee:	609a      	str	r2, [r3, #8]
 8002df0:	60da      	str	r2, [r3, #12]
 8002df2:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4a39      	ldr	r2, [pc, #228]	@ (8002ee0 <HAL_I2C_MspInit+0x104>)
 8002dfa:	4293      	cmp	r3, r2
 8002dfc:	d16b      	bne.n	8002ed6 <HAL_I2C_MspInit+0xfa>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002dfe:	2300      	movs	r3, #0
 8002e00:	613b      	str	r3, [r7, #16]
 8002e02:	4b38      	ldr	r3, [pc, #224]	@ (8002ee4 <HAL_I2C_MspInit+0x108>)
 8002e04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e06:	4a37      	ldr	r2, [pc, #220]	@ (8002ee4 <HAL_I2C_MspInit+0x108>)
 8002e08:	f043 0302 	orr.w	r3, r3, #2
 8002e0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8002e0e:	4b35      	ldr	r3, [pc, #212]	@ (8002ee4 <HAL_I2C_MspInit+0x108>)
 8002e10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e12:	f003 0302 	and.w	r3, r3, #2
 8002e16:	613b      	str	r3, [r7, #16]
 8002e18:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8002e1a:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8002e1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002e20:	2312      	movs	r3, #18
 8002e22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002e24:	2301      	movs	r3, #1
 8002e26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e28:	2303      	movs	r3, #3
 8002e2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002e2c:	2304      	movs	r3, #4
 8002e2e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002e30:	f107 0314 	add.w	r3, r7, #20
 8002e34:	4619      	mov	r1, r3
 8002e36:	482c      	ldr	r0, [pc, #176]	@ (8002ee8 <HAL_I2C_MspInit+0x10c>)
 8002e38:	f001 fbb6 	bl	80045a8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002e3c:	2300      	movs	r3, #0
 8002e3e:	60fb      	str	r3, [r7, #12]
 8002e40:	4b28      	ldr	r3, [pc, #160]	@ (8002ee4 <HAL_I2C_MspInit+0x108>)
 8002e42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e44:	4a27      	ldr	r2, [pc, #156]	@ (8002ee4 <HAL_I2C_MspInit+0x108>)
 8002e46:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002e4a:	6413      	str	r3, [r2, #64]	@ 0x40
 8002e4c:	4b25      	ldr	r3, [pc, #148]	@ (8002ee4 <HAL_I2C_MspInit+0x108>)
 8002e4e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e50:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002e54:	60fb      	str	r3, [r7, #12]
 8002e56:	68fb      	ldr	r3, [r7, #12]

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream0;
 8002e58:	4b24      	ldr	r3, [pc, #144]	@ (8002eec <HAL_I2C_MspInit+0x110>)
 8002e5a:	4a25      	ldr	r2, [pc, #148]	@ (8002ef0 <HAL_I2C_MspInit+0x114>)
 8002e5c:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8002e5e:	4b23      	ldr	r3, [pc, #140]	@ (8002eec <HAL_I2C_MspInit+0x110>)
 8002e60:	f04f 7200 	mov.w	r2, #33554432	@ 0x2000000
 8002e64:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002e66:	4b21      	ldr	r3, [pc, #132]	@ (8002eec <HAL_I2C_MspInit+0x110>)
 8002e68:	2200      	movs	r2, #0
 8002e6a:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e6c:	4b1f      	ldr	r3, [pc, #124]	@ (8002eec <HAL_I2C_MspInit+0x110>)
 8002e6e:	2200      	movs	r2, #0
 8002e70:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002e72:	4b1e      	ldr	r3, [pc, #120]	@ (8002eec <HAL_I2C_MspInit+0x110>)
 8002e74:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002e78:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002e7a:	4b1c      	ldr	r3, [pc, #112]	@ (8002eec <HAL_I2C_MspInit+0x110>)
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002e80:	4b1a      	ldr	r3, [pc, #104]	@ (8002eec <HAL_I2C_MspInit+0x110>)
 8002e82:	2200      	movs	r2, #0
 8002e84:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8002e86:	4b19      	ldr	r3, [pc, #100]	@ (8002eec <HAL_I2C_MspInit+0x110>)
 8002e88:	2200      	movs	r2, #0
 8002e8a:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_MEDIUM;
 8002e8c:	4b17      	ldr	r3, [pc, #92]	@ (8002eec <HAL_I2C_MspInit+0x110>)
 8002e8e:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002e92:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002e94:	4b15      	ldr	r3, [pc, #84]	@ (8002eec <HAL_I2C_MspInit+0x110>)
 8002e96:	2200      	movs	r2, #0
 8002e98:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8002e9a:	4814      	ldr	r0, [pc, #80]	@ (8002eec <HAL_I2C_MspInit+0x110>)
 8002e9c:	f000 ffd8 	bl	8003e50 <HAL_DMA_Init>
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d001      	beq.n	8002eaa <HAL_I2C_MspInit+0xce>
    {
      Error_Handler();
 8002ea6:	f000 fac1 	bl	800342c <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8002eaa:	687b      	ldr	r3, [r7, #4]
 8002eac:	4a0f      	ldr	r2, [pc, #60]	@ (8002eec <HAL_I2C_MspInit+0x110>)
 8002eae:	639a      	str	r2, [r3, #56]	@ 0x38
 8002eb0:	4a0e      	ldr	r2, [pc, #56]	@ (8002eec <HAL_I2C_MspInit+0x110>)
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6393      	str	r3, [r2, #56]	@ 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8002eb6:	2200      	movs	r2, #0
 8002eb8:	2105      	movs	r1, #5
 8002eba:	201f      	movs	r0, #31
 8002ebc:	f000 ff9e 	bl	8003dfc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8002ec0:	201f      	movs	r0, #31
 8002ec2:	f000 ffb7 	bl	8003e34 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 8002ec6:	2200      	movs	r2, #0
 8002ec8:	2105      	movs	r1, #5
 8002eca:	2020      	movs	r0, #32
 8002ecc:	f000 ff96 	bl	8003dfc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8002ed0:	2020      	movs	r0, #32
 8002ed2:	f000 ffaf 	bl	8003e34 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 8002ed6:	bf00      	nop
 8002ed8:	3728      	adds	r7, #40	@ 0x28
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}
 8002ede:	bf00      	nop
 8002ee0:	40005400 	.word	0x40005400
 8002ee4:	40023800 	.word	0x40023800
 8002ee8:	40020400 	.word	0x40020400
 8002eec:	20000498 	.word	0x20000498
 8002ef0:	40026010 	.word	0x40026010

08002ef4 <__io_putchar>:
  int __io_putchar(int ch)
#else
  // For other compilers, implement fputc for printf redirection
  int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
{
 8002ef4:	b580      	push	{r7, lr}
 8002ef6:	b082      	sub	sp, #8
 8002ef8:	af00      	add	r7, sp, #0
 8002efa:	6078      	str	r0, [r7, #4]
    // Transmit the character over UART1
    HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8002efc:	1d39      	adds	r1, r7, #4
 8002efe:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002f02:	2201      	movs	r2, #1
 8002f04:	4803      	ldr	r0, [pc, #12]	@ (8002f14 <__io_putchar+0x20>)
 8002f06:	f006 f9b5 	bl	8009274 <HAL_UART_Transmit>
    return ch;
 8002f0a:	687b      	ldr	r3, [r7, #4]
}
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	3708      	adds	r7, #8
 8002f10:	46bd      	mov	sp, r7
 8002f12:	bd80      	pop	{r7, pc}
 8002f14:	2000064c 	.word	0x2000064c

08002f18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002f1c:	f000 fe50 	bl	8003bc0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002f20:	f000 f84c 	bl	8002fbc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002f24:	f7ff fee8 	bl	8002cf8 <MX_GPIO_Init>
  MX_DMA_Init();
 8002f28:	f7ff fd02 	bl	8002930 <MX_DMA_Init>
  MX_RTC_Init();
 8002f2c:	f000 fa84 	bl	8003438 <MX_RTC_Init>
  MX_USART1_UART_Init();
 8002f30:	f000 fcc2 	bl	80038b8 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8002f34:	f7ff ff24 	bl	8002d80 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  I2C_Scan();
 8002f38:	f000 f8ac 	bl	8003094 <I2C_Scan>
  while (MPU6050_Init(&hi2c1, &MPU6050) == 1);
 8002f3c:	bf00      	nop
 8002f3e:	4917      	ldr	r1, [pc, #92]	@ (8002f9c <main+0x84>)
 8002f40:	4817      	ldr	r0, [pc, #92]	@ (8002fa0 <main+0x88>)
 8002f42:	f7ff f841 	bl	8001fc8 <MPU6050_Init>
 8002f46:	4603      	mov	r3, r0
 8002f48:	2b01      	cmp	r3, #1
 8002f4a:	d0f8      	beq.n	8002f3e <main+0x26>

  if(ICM20948_Init(&ICM20948) != HAL_OK)
 8002f4c:	4815      	ldr	r0, [pc, #84]	@ (8002fa4 <main+0x8c>)
 8002f4e:	f7fe fdd7 	bl	8001b00 <ICM20948_Init>
 8002f52:	4603      	mov	r3, r0
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d002      	beq.n	8002f5e <main+0x46>
  {
	  printf("init icm20948 fails\r\n");
 8002f58:	4813      	ldr	r0, [pc, #76]	@ (8002fa8 <main+0x90>)
 8002f5a:	f00a fc7f 	bl	800d85c <puts>
  }

  if(BMP280_Init(&BMP280) != HAL_OK)
 8002f5e:	4813      	ldr	r0, [pc, #76]	@ (8002fac <main+0x94>)
 8002f60:	f7fe f876 	bl	8001050 <BMP280_Init>
 8002f64:	4603      	mov	r3, r0
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d002      	beq.n	8002f70 <main+0x58>
  {
	  printf("init bmp280 fails\r\n");
 8002f6a:	4811      	ldr	r0, [pc, #68]	@ (8002fb0 <main+0x98>)
 8002f6c:	f00a fc76 	bl	800d85c <puts>
  }

  ssd1306_Init();
 8002f70:	f7ff fa04 	bl	800237c <ssd1306_Init>
  ssd1306_WriteString("Hello World", Font_7x10);
 8002f74:	4b0f      	ldr	r3, [pc, #60]	@ (8002fb4 <main+0x9c>)
 8002f76:	e893 0006 	ldmia.w	r3, {r1, r2}
 8002f7a:	480f      	ldr	r0, [pc, #60]	@ (8002fb8 <main+0xa0>)
 8002f7c:	f7ff fba0 	bl	80026c0 <ssd1306_WriteString>
  ssd1306_UpdateScreen();
 8002f80:	f7ff fc18 	bl	80027b4 <ssd1306_UpdateScreen>
  else
  {
	  printf("Pressure sersor NULL\r\n");
  }
*/
  board_button_init();
 8002f84:	f7ff fc40 	bl	8002808 <board_button_init>
  board_led_init();
 8002f88:	f7ff fc7c 	bl	8002884 <board_led_init>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8002f8c:	f006 fd72 	bl	8009a74 <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8002f90:	f7ff fcee 	bl	8002970 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8002f94:	f006 fd92 	bl	8009abc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8002f98:	bf00      	nop
 8002f9a:	e7fd      	b.n	8002f98 <main+0x80>
 8002f9c:	200004f8 	.word	0x200004f8
 8002fa0:	20000444 	.word	0x20000444
 8002fa4:	2000054c 	.word	0x2000054c
 8002fa8:	080103d8 	.word	0x080103d8
 8002fac:	200005ac 	.word	0x200005ac
 8002fb0:	080103f0 	.word	0x080103f0
 8002fb4:	20000000 	.word	0x20000000
 8002fb8:	08010404 	.word	0x08010404

08002fbc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8002fbc:	b580      	push	{r7, lr}
 8002fbe:	b094      	sub	sp, #80	@ 0x50
 8002fc0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8002fc2:	f107 0320 	add.w	r3, r7, #32
 8002fc6:	2230      	movs	r2, #48	@ 0x30
 8002fc8:	2100      	movs	r1, #0
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f00a fd5a 	bl	800da84 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8002fd0:	f107 030c 	add.w	r3, r7, #12
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	601a      	str	r2, [r3, #0]
 8002fd8:	605a      	str	r2, [r3, #4]
 8002fda:	609a      	str	r2, [r3, #8]
 8002fdc:	60da      	str	r2, [r3, #12]
 8002fde:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8002fe0:	2300      	movs	r3, #0
 8002fe2:	60bb      	str	r3, [r7, #8]
 8002fe4:	4b29      	ldr	r3, [pc, #164]	@ (800308c <SystemClock_Config+0xd0>)
 8002fe6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fe8:	4a28      	ldr	r2, [pc, #160]	@ (800308c <SystemClock_Config+0xd0>)
 8002fea:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002fee:	6413      	str	r3, [r2, #64]	@ 0x40
 8002ff0:	4b26      	ldr	r3, [pc, #152]	@ (800308c <SystemClock_Config+0xd0>)
 8002ff2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ff4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002ff8:	60bb      	str	r3, [r7, #8]
 8002ffa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	607b      	str	r3, [r7, #4]
 8003000:	4b23      	ldr	r3, [pc, #140]	@ (8003090 <SystemClock_Config+0xd4>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a22      	ldr	r2, [pc, #136]	@ (8003090 <SystemClock_Config+0xd4>)
 8003006:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800300a:	6013      	str	r3, [r2, #0]
 800300c:	4b20      	ldr	r3, [pc, #128]	@ (8003090 <SystemClock_Config+0xd4>)
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003014:	607b      	str	r3, [r7, #4]
 8003016:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8003018:	2305      	movs	r3, #5
 800301a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800301c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8003020:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8003022:	2301      	movs	r3, #1
 8003024:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8003026:	2302      	movs	r3, #2
 8003028:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800302a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800302e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8003030:	2304      	movs	r3, #4
 8003032:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8003034:	23a8      	movs	r3, #168	@ 0xa8
 8003036:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003038:	2302      	movs	r3, #2
 800303a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800303c:	2304      	movs	r3, #4
 800303e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8003040:	f107 0320 	add.w	r3, r7, #32
 8003044:	4618      	mov	r0, r3
 8003046:	f004 fd6b 	bl	8007b20 <HAL_RCC_OscConfig>
 800304a:	4603      	mov	r3, r0
 800304c:	2b00      	cmp	r3, #0
 800304e:	d001      	beq.n	8003054 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8003050:	f000 f9ec 	bl	800342c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8003054:	230f      	movs	r3, #15
 8003056:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003058:	2302      	movs	r3, #2
 800305a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800305c:	2300      	movs	r3, #0
 800305e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8003060:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8003064:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8003066:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800306a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800306c:	f107 030c 	add.w	r3, r7, #12
 8003070:	2105      	movs	r1, #5
 8003072:	4618      	mov	r0, r3
 8003074:	f004 ffcc 	bl	8008010 <HAL_RCC_ClockConfig>
 8003078:	4603      	mov	r3, r0
 800307a:	2b00      	cmp	r3, #0
 800307c:	d001      	beq.n	8003082 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800307e:	f000 f9d5 	bl	800342c <Error_Handler>
  }
}
 8003082:	bf00      	nop
 8003084:	3750      	adds	r7, #80	@ 0x50
 8003086:	46bd      	mov	sp, r7
 8003088:	bd80      	pop	{r7, pc}
 800308a:	bf00      	nop
 800308c:	40023800 	.word	0x40023800
 8003090:	40007000 	.word	0x40007000

08003094 <I2C_Scan>:

/* USER CODE BEGIN 4 */
void I2C_Scan(void)
{
 8003094:	b5b0      	push	{r4, r5, r7, lr}
 8003096:	b08c      	sub	sp, #48	@ 0x30
 8003098:	af04      	add	r7, sp, #16

	RTC_DateTypeDef sdatestructureget;
	RTC_TimeTypeDef stimestructureget;
	HAL_RTC_GetTime(&hrtc, &stimestructureget, RTC_FORMAT_BIN);
 800309a:	1d3b      	adds	r3, r7, #4
 800309c:	2200      	movs	r2, #0
 800309e:	4619      	mov	r1, r3
 80030a0:	481e      	ldr	r0, [pc, #120]	@ (800311c <I2C_Scan+0x88>)
 80030a2:	f005 fc06 	bl	80088b2 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sdatestructureget, RTC_FORMAT_BIN);
 80030a6:	f107 0318 	add.w	r3, r7, #24
 80030aa:	2200      	movs	r2, #0
 80030ac:	4619      	mov	r1, r3
 80030ae:	481b      	ldr	r0, [pc, #108]	@ (800311c <I2C_Scan+0x88>)
 80030b0:	f005 fce1 	bl	8008a76 <HAL_RTC_GetDate>
    printf("Scanning I2C bus on Y20%02d.M%02d.D%02d at %02d:%02d:%02d...\r\n",
    		sdatestructureget.Year,
 80030b4:	7efb      	ldrb	r3, [r7, #27]
    printf("Scanning I2C bus on Y20%02d.M%02d.D%02d at %02d:%02d:%02d...\r\n",
 80030b6:	4618      	mov	r0, r3
			sdatestructureget.Month,
 80030b8:	7e7b      	ldrb	r3, [r7, #25]
    printf("Scanning I2C bus on Y20%02d.M%02d.D%02d at %02d:%02d:%02d...\r\n",
 80030ba:	461c      	mov	r4, r3
			sdatestructureget.Date,
 80030bc:	7ebb      	ldrb	r3, [r7, #26]
    printf("Scanning I2C bus on Y20%02d.M%02d.D%02d at %02d:%02d:%02d...\r\n",
 80030be:	461d      	mov	r5, r3
			stimestructureget.Hours,
 80030c0:	793b      	ldrb	r3, [r7, #4]
			stimestructureget.Minutes,
 80030c2:	797a      	ldrb	r2, [r7, #5]
			stimestructureget.Seconds);
 80030c4:	79b9      	ldrb	r1, [r7, #6]
    printf("Scanning I2C bus on Y20%02d.M%02d.D%02d at %02d:%02d:%02d...\r\n",
 80030c6:	9102      	str	r1, [sp, #8]
 80030c8:	9201      	str	r2, [sp, #4]
 80030ca:	9300      	str	r3, [sp, #0]
 80030cc:	462b      	mov	r3, r5
 80030ce:	4622      	mov	r2, r4
 80030d0:	4601      	mov	r1, r0
 80030d2:	4813      	ldr	r0, [pc, #76]	@ (8003120 <I2C_Scan+0x8c>)
 80030d4:	f00a fb5a 	bl	800d78c <iprintf>
    for (uint16_t addr = 0; addr < 128; addr++)
 80030d8:	2300      	movs	r3, #0
 80030da:	83fb      	strh	r3, [r7, #30]
 80030dc:	e013      	b.n	8003106 <I2C_Scan+0x72>
    {
        if (HAL_I2C_IsDeviceReady(&hi2c1, addr << 1, 1, HAL_MAX_DELAY) == HAL_OK)
 80030de:	8bfb      	ldrh	r3, [r7, #30]
 80030e0:	005b      	lsls	r3, r3, #1
 80030e2:	b299      	uxth	r1, r3
 80030e4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80030e8:	2201      	movs	r2, #1
 80030ea:	480e      	ldr	r0, [pc, #56]	@ (8003124 <I2C_Scan+0x90>)
 80030ec:	f002 fa5a 	bl	80055a4 <HAL_I2C_IsDeviceReady>
 80030f0:	4603      	mov	r3, r0
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d104      	bne.n	8003100 <I2C_Scan+0x6c>
        {
            printf("Device found at 0x%02X\r\n", addr);
 80030f6:	8bfb      	ldrh	r3, [r7, #30]
 80030f8:	4619      	mov	r1, r3
 80030fa:	480b      	ldr	r0, [pc, #44]	@ (8003128 <I2C_Scan+0x94>)
 80030fc:	f00a fb46 	bl	800d78c <iprintf>
    for (uint16_t addr = 0; addr < 128; addr++)
 8003100:	8bfb      	ldrh	r3, [r7, #30]
 8003102:	3301      	adds	r3, #1
 8003104:	83fb      	strh	r3, [r7, #30]
 8003106:	8bfb      	ldrh	r3, [r7, #30]
 8003108:	2b7f      	cmp	r3, #127	@ 0x7f
 800310a:	d9e8      	bls.n	80030de <I2C_Scan+0x4a>
        }
    }
    printf("Scanning I2C DONE!...\r\n");
 800310c:	4807      	ldr	r0, [pc, #28]	@ (800312c <I2C_Scan+0x98>)
 800310e:	f00a fba5 	bl	800d85c <puts>
}
 8003112:	bf00      	nop
 8003114:	3720      	adds	r7, #32
 8003116:	46bd      	mov	sp, r7
 8003118:	bdb0      	pop	{r4, r5, r7, pc}
 800311a:	bf00      	nop
 800311c:	200005e0 	.word	0x200005e0
 8003120:	08010410 	.word	0x08010410
 8003124:	20000444 	.word	0x20000444
 8003128:	08010450 	.word	0x08010450
 800312c:	0801046c 	.word	0x0801046c

08003130 <Display_Accel_Data>:

void Display_Accel_Data(void) {
 8003130:	b5b0      	push	{r4, r5, r7, lr}
 8003132:	b08a      	sub	sp, #40	@ 0x28
 8003134:	af04      	add	r7, sp, #16
    // Clear the screen
    ssd1306_Clear();
 8003136:	f7ff fb01 	bl	800273c <ssd1306_Clear>
    char buffer[20];  // Buffer to hold the text
    uint8_t len = 75;
 800313a:	234b      	movs	r3, #75	@ 0x4b
 800313c:	75fb      	strb	r3, [r7, #23]

	// Display the Ax value
	snprintf(buffer, sizeof(buffer), "x:%8.5f|%8.5f", MPU6050.acce[0], -(ICM20948.acce[1]));
 800313e:	4b37      	ldr	r3, [pc, #220]	@ (800321c <Display_Accel_Data+0xec>)
 8003140:	695b      	ldr	r3, [r3, #20]
 8003142:	4618      	mov	r0, r3
 8003144:	f7fd fa00 	bl	8000548 <__aeabi_f2d>
 8003148:	4604      	mov	r4, r0
 800314a:	460d      	mov	r5, r1
 800314c:	4b34      	ldr	r3, [pc, #208]	@ (8003220 <Display_Accel_Data+0xf0>)
 800314e:	edd3 7a0c 	vldr	s15, [r3, #48]	@ 0x30
 8003152:	eef1 7a67 	vneg.f32	s15, s15
 8003156:	ee17 3a90 	vmov	r3, s15
 800315a:	4618      	mov	r0, r3
 800315c:	f7fd f9f4 	bl	8000548 <__aeabi_f2d>
 8003160:	4602      	mov	r2, r0
 8003162:	460b      	mov	r3, r1
 8003164:	4638      	mov	r0, r7
 8003166:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800316a:	e9cd 4500 	strd	r4, r5, [sp]
 800316e:	4a2d      	ldr	r2, [pc, #180]	@ (8003224 <Display_Accel_Data+0xf4>)
 8003170:	2114      	movs	r1, #20
 8003172:	f00a fb7b 	bl	800d86c <sniprintf>
	ssd1306_SetCursor(0, 0);
 8003176:	2100      	movs	r1, #0
 8003178:	2000      	movs	r0, #0
 800317a:	f7ff fac7 	bl	800270c <ssd1306_SetCursor>
	ssd1306_WriteString(buffer, Font_7x10);
 800317e:	4a2a      	ldr	r2, [pc, #168]	@ (8003228 <Display_Accel_Data+0xf8>)
 8003180:	463b      	mov	r3, r7
 8003182:	ca06      	ldmia	r2, {r1, r2}
 8003184:	4618      	mov	r0, r3
 8003186:	f7ff fa9b 	bl	80026c0 <ssd1306_WriteString>

	// Display the Ay value
	snprintf(buffer, sizeof(buffer), "y:%8.5f|%8.5f", MPU6050.acce[1], ICM20948.acce[0]);
 800318a:	4b24      	ldr	r3, [pc, #144]	@ (800321c <Display_Accel_Data+0xec>)
 800318c:	699b      	ldr	r3, [r3, #24]
 800318e:	4618      	mov	r0, r3
 8003190:	f7fd f9da 	bl	8000548 <__aeabi_f2d>
 8003194:	4604      	mov	r4, r0
 8003196:	460d      	mov	r5, r1
 8003198:	4b21      	ldr	r3, [pc, #132]	@ (8003220 <Display_Accel_Data+0xf0>)
 800319a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800319c:	4618      	mov	r0, r3
 800319e:	f7fd f9d3 	bl	8000548 <__aeabi_f2d>
 80031a2:	4602      	mov	r2, r0
 80031a4:	460b      	mov	r3, r1
 80031a6:	4638      	mov	r0, r7
 80031a8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80031ac:	e9cd 4500 	strd	r4, r5, [sp]
 80031b0:	4a1e      	ldr	r2, [pc, #120]	@ (800322c <Display_Accel_Data+0xfc>)
 80031b2:	2114      	movs	r1, #20
 80031b4:	f00a fb5a 	bl	800d86c <sniprintf>
	ssd1306_SetCursor(0, 10);
 80031b8:	210a      	movs	r1, #10
 80031ba:	2000      	movs	r0, #0
 80031bc:	f7ff faa6 	bl	800270c <ssd1306_SetCursor>
	ssd1306_WriteString(buffer, Font_7x10);
 80031c0:	4a19      	ldr	r2, [pc, #100]	@ (8003228 <Display_Accel_Data+0xf8>)
 80031c2:	463b      	mov	r3, r7
 80031c4:	ca06      	ldmia	r2, {r1, r2}
 80031c6:	4618      	mov	r0, r3
 80031c8:	f7ff fa7a 	bl	80026c0 <ssd1306_WriteString>

	// Display the Az value
	snprintf(buffer, sizeof(buffer), "z:%8.5f|%8.5f", MPU6050.acce[2], ICM20948.acce[2]);
 80031cc:	4b13      	ldr	r3, [pc, #76]	@ (800321c <Display_Accel_Data+0xec>)
 80031ce:	69db      	ldr	r3, [r3, #28]
 80031d0:	4618      	mov	r0, r3
 80031d2:	f7fd f9b9 	bl	8000548 <__aeabi_f2d>
 80031d6:	4604      	mov	r4, r0
 80031d8:	460d      	mov	r5, r1
 80031da:	4b11      	ldr	r3, [pc, #68]	@ (8003220 <Display_Accel_Data+0xf0>)
 80031dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80031de:	4618      	mov	r0, r3
 80031e0:	f7fd f9b2 	bl	8000548 <__aeabi_f2d>
 80031e4:	4602      	mov	r2, r0
 80031e6:	460b      	mov	r3, r1
 80031e8:	4638      	mov	r0, r7
 80031ea:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80031ee:	e9cd 4500 	strd	r4, r5, [sp]
 80031f2:	4a0f      	ldr	r2, [pc, #60]	@ (8003230 <Display_Accel_Data+0x100>)
 80031f4:	2114      	movs	r1, #20
 80031f6:	f00a fb39 	bl	800d86c <sniprintf>
	ssd1306_SetCursor(0, 20);
 80031fa:	2114      	movs	r1, #20
 80031fc:	2000      	movs	r0, #0
 80031fe:	f7ff fa85 	bl	800270c <ssd1306_SetCursor>
	ssd1306_WriteString(buffer, Font_7x10);
 8003202:	4a09      	ldr	r2, [pc, #36]	@ (8003228 <Display_Accel_Data+0xf8>)
 8003204:	463b      	mov	r3, r7
 8003206:	ca06      	ldmia	r2, {r1, r2}
 8003208:	4618      	mov	r0, r3
 800320a:	f7ff fa59 	bl	80026c0 <ssd1306_WriteString>

	// Update the screen
	ssd1306_UpdateScreen();
 800320e:	f7ff fad1 	bl	80027b4 <ssd1306_UpdateScreen>

}
 8003212:	bf00      	nop
 8003214:	3718      	adds	r7, #24
 8003216:	46bd      	mov	sp, r7
 8003218:	bdb0      	pop	{r4, r5, r7, pc}
 800321a:	bf00      	nop
 800321c:	200004f8 	.word	0x200004f8
 8003220:	2000054c 	.word	0x2000054c
 8003224:	08010484 	.word	0x08010484
 8003228:	20000000 	.word	0x20000000
 800322c:	08010494 	.word	0x08010494
 8003230:	080104a4 	.word	0x080104a4

08003234 <Display_Gyro_Data>:

void Display_Gyro_Data(void) {
 8003234:	b5b0      	push	{r4, r5, r7, lr}
 8003236:	b08a      	sub	sp, #40	@ 0x28
 8003238:	af04      	add	r7, sp, #16
    // Clear the screen
    ssd1306_Clear();
 800323a:	f7ff fa7f 	bl	800273c <ssd1306_Clear>
    char buffer[20];  // Buffer to hold the text
    uint8_t len = 75;
 800323e:	234b      	movs	r3, #75	@ 0x4b
 8003240:	75fb      	strb	r3, [r7, #23]

	// Display the Ax value
	snprintf(buffer, sizeof(buffer), "x:%8.5f|%8.5f", MPU6050.gyro[0], -ICM20948.gyro[1]);
 8003242:	4b37      	ldr	r3, [pc, #220]	@ (8003320 <Display_Gyro_Data+0xec>)
 8003244:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003246:	4618      	mov	r0, r3
 8003248:	f7fd f97e 	bl	8000548 <__aeabi_f2d>
 800324c:	4604      	mov	r4, r0
 800324e:	460d      	mov	r5, r1
 8003250:	4b34      	ldr	r3, [pc, #208]	@ (8003324 <Display_Gyro_Data+0xf0>)
 8003252:	edd3 7a0f 	vldr	s15, [r3, #60]	@ 0x3c
 8003256:	eef1 7a67 	vneg.f32	s15, s15
 800325a:	ee17 3a90 	vmov	r3, s15
 800325e:	4618      	mov	r0, r3
 8003260:	f7fd f972 	bl	8000548 <__aeabi_f2d>
 8003264:	4602      	mov	r2, r0
 8003266:	460b      	mov	r3, r1
 8003268:	4638      	mov	r0, r7
 800326a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800326e:	e9cd 4500 	strd	r4, r5, [sp]
 8003272:	4a2d      	ldr	r2, [pc, #180]	@ (8003328 <Display_Gyro_Data+0xf4>)
 8003274:	2114      	movs	r1, #20
 8003276:	f00a faf9 	bl	800d86c <sniprintf>
	ssd1306_SetCursor(0, 0);
 800327a:	2100      	movs	r1, #0
 800327c:	2000      	movs	r0, #0
 800327e:	f7ff fa45 	bl	800270c <ssd1306_SetCursor>
	ssd1306_WriteString(buffer, Font_7x10);
 8003282:	4a2a      	ldr	r2, [pc, #168]	@ (800332c <Display_Gyro_Data+0xf8>)
 8003284:	463b      	mov	r3, r7
 8003286:	ca06      	ldmia	r2, {r1, r2}
 8003288:	4618      	mov	r0, r3
 800328a:	f7ff fa19 	bl	80026c0 <ssd1306_WriteString>

	// Display the Ay value
	snprintf(buffer, sizeof(buffer), "y:%8.5f|%8.5f", MPU6050.gyro[1], ICM20948.gyro[0]);
 800328e:	4b24      	ldr	r3, [pc, #144]	@ (8003320 <Display_Gyro_Data+0xec>)
 8003290:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003292:	4618      	mov	r0, r3
 8003294:	f7fd f958 	bl	8000548 <__aeabi_f2d>
 8003298:	4604      	mov	r4, r0
 800329a:	460d      	mov	r5, r1
 800329c:	4b21      	ldr	r3, [pc, #132]	@ (8003324 <Display_Gyro_Data+0xf0>)
 800329e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80032a0:	4618      	mov	r0, r3
 80032a2:	f7fd f951 	bl	8000548 <__aeabi_f2d>
 80032a6:	4602      	mov	r2, r0
 80032a8:	460b      	mov	r3, r1
 80032aa:	4638      	mov	r0, r7
 80032ac:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80032b0:	e9cd 4500 	strd	r4, r5, [sp]
 80032b4:	4a1e      	ldr	r2, [pc, #120]	@ (8003330 <Display_Gyro_Data+0xfc>)
 80032b6:	2114      	movs	r1, #20
 80032b8:	f00a fad8 	bl	800d86c <sniprintf>
	ssd1306_SetCursor(0, 10);
 80032bc:	210a      	movs	r1, #10
 80032be:	2000      	movs	r0, #0
 80032c0:	f7ff fa24 	bl	800270c <ssd1306_SetCursor>
	ssd1306_WriteString(buffer, Font_7x10);
 80032c4:	4a19      	ldr	r2, [pc, #100]	@ (800332c <Display_Gyro_Data+0xf8>)
 80032c6:	463b      	mov	r3, r7
 80032c8:	ca06      	ldmia	r2, {r1, r2}
 80032ca:	4618      	mov	r0, r3
 80032cc:	f7ff f9f8 	bl	80026c0 <ssd1306_WriteString>

	// Display the Az value
	snprintf(buffer, sizeof(buffer), "z:%8.5f|%8.5f", MPU6050.gyro[2], ICM20948.gyro[2]);
 80032d0:	4b13      	ldr	r3, [pc, #76]	@ (8003320 <Display_Gyro_Data+0xec>)
 80032d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80032d4:	4618      	mov	r0, r3
 80032d6:	f7fd f937 	bl	8000548 <__aeabi_f2d>
 80032da:	4604      	mov	r4, r0
 80032dc:	460d      	mov	r5, r1
 80032de:	4b11      	ldr	r3, [pc, #68]	@ (8003324 <Display_Gyro_Data+0xf0>)
 80032e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032e2:	4618      	mov	r0, r3
 80032e4:	f7fd f930 	bl	8000548 <__aeabi_f2d>
 80032e8:	4602      	mov	r2, r0
 80032ea:	460b      	mov	r3, r1
 80032ec:	4638      	mov	r0, r7
 80032ee:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80032f2:	e9cd 4500 	strd	r4, r5, [sp]
 80032f6:	4a0f      	ldr	r2, [pc, #60]	@ (8003334 <Display_Gyro_Data+0x100>)
 80032f8:	2114      	movs	r1, #20
 80032fa:	f00a fab7 	bl	800d86c <sniprintf>
	ssd1306_SetCursor(0, 20);
 80032fe:	2114      	movs	r1, #20
 8003300:	2000      	movs	r0, #0
 8003302:	f7ff fa03 	bl	800270c <ssd1306_SetCursor>
	ssd1306_WriteString(buffer, Font_7x10);
 8003306:	4a09      	ldr	r2, [pc, #36]	@ (800332c <Display_Gyro_Data+0xf8>)
 8003308:	463b      	mov	r3, r7
 800330a:	ca06      	ldmia	r2, {r1, r2}
 800330c:	4618      	mov	r0, r3
 800330e:	f7ff f9d7 	bl	80026c0 <ssd1306_WriteString>

	// Update the screen
	ssd1306_UpdateScreen();
 8003312:	f7ff fa4f 	bl	80027b4 <ssd1306_UpdateScreen>

}
 8003316:	bf00      	nop
 8003318:	3718      	adds	r7, #24
 800331a:	46bd      	mov	sp, r7
 800331c:	bdb0      	pop	{r4, r5, r7, pc}
 800331e:	bf00      	nop
 8003320:	200004f8 	.word	0x200004f8
 8003324:	2000054c 	.word	0x2000054c
 8003328:	08010484 	.word	0x08010484
 800332c:	20000000 	.word	0x20000000
 8003330:	08010494 	.word	0x08010494
 8003334:	080104a4 	.word	0x080104a4

08003338 <HAL_I2C_MemRxCpltCallback>:
void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c) {
 8003338:	b580      	push	{r7, lr}
 800333a:	b084      	sub	sp, #16
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
    if (hi2c->Instance == I2C1) {
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	4a0d      	ldr	r2, [pc, #52]	@ (800337c <HAL_I2C_MemRxCpltCallback+0x44>)
 8003346:	4293      	cmp	r3, r2
 8003348:	d114      	bne.n	8003374 <HAL_I2C_MemRxCpltCallback+0x3c>
    	BaseType_t xHigherPriorityTaskWoken = pdFALSE;
 800334a:	2300      	movs	r3, #0
 800334c:	60fb      	str	r3, [r7, #12]
    	xSemaphoreGiveFromISR(dmaCompleteSemaphore, &xHigherPriorityTaskWoken);
 800334e:	4b0c      	ldr	r3, [pc, #48]	@ (8003380 <HAL_I2C_MemRxCpltCallback+0x48>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f107 020c 	add.w	r2, r7, #12
 8003356:	4611      	mov	r1, r2
 8003358:	4618      	mov	r0, r3
 800335a:	f007 f923 	bl	800a5a4 <xQueueGiveFromISR>
    	portYIELD_FROM_ISR(xHigherPriorityTaskWoken);
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d007      	beq.n	8003374 <HAL_I2C_MemRxCpltCallback+0x3c>
 8003364:	4b07      	ldr	r3, [pc, #28]	@ (8003384 <HAL_I2C_MemRxCpltCallback+0x4c>)
 8003366:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800336a:	601a      	str	r2, [r3, #0]
 800336c:	f3bf 8f4f 	dsb	sy
 8003370:	f3bf 8f6f 	isb	sy

    }
}
 8003374:	bf00      	nop
 8003376:	3710      	adds	r7, #16
 8003378:	46bd      	mov	sp, r7
 800337a:	bd80      	pop	{r7, pc}
 800337c:	40005400 	.word	0x40005400
 8003380:	200005dc 	.word	0x200005dc
 8003384:	e000ed04 	.word	0xe000ed04

08003388 <HAL_I2C_ErrorCallback>:
void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c) {
 8003388:	b580      	push	{r7, lr}
 800338a:	b082      	sub	sp, #8
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
    if (hi2c->Instance == I2C1) {
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4a15      	ldr	r2, [pc, #84]	@ (80033ec <HAL_I2C_ErrorCallback+0x64>)
 8003396:	4293      	cmp	r3, r2
 8003398:	d124      	bne.n	80033e4 <HAL_I2C_ErrorCallback+0x5c>
    	switch (current_i2c_dma_state)
 800339a:	4b15      	ldr	r3, [pc, #84]	@ (80033f0 <HAL_I2C_ErrorCallback+0x68>)
 800339c:	781b      	ldrb	r3, [r3, #0]
 800339e:	b2db      	uxtb	r3, r3
 80033a0:	3b01      	subs	r3, #1
 80033a2:	2b03      	cmp	r3, #3
 80033a4:	d81a      	bhi.n	80033dc <HAL_I2C_ErrorCallback+0x54>
 80033a6:	a201      	add	r2, pc, #4	@ (adr r2, 80033ac <HAL_I2C_ErrorCallback+0x24>)
 80033a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033ac:	080033bd 	.word	0x080033bd
 80033b0:	080033c5 	.word	0x080033c5
 80033b4:	080033cd 	.word	0x080033cd
 80033b8:	080033d5 	.word	0x080033d5
		{
			case I2C_DMA_STATE_MPU6050:
				printf("mpu6050 i2c error");
 80033bc:	480d      	ldr	r0, [pc, #52]	@ (80033f4 <HAL_I2C_ErrorCallback+0x6c>)
 80033be:	f00a f9e5 	bl	800d78c <iprintf>
				break;
 80033c2:	e00f      	b.n	80033e4 <HAL_I2C_ErrorCallback+0x5c>
			case I2C_DMA_STATE_ICM20948_ACCEL_GYRO:
				printf("icm20948 gyro i2c error");
 80033c4:	480c      	ldr	r0, [pc, #48]	@ (80033f8 <HAL_I2C_ErrorCallback+0x70>)
 80033c6:	f00a f9e1 	bl	800d78c <iprintf>
				break;
 80033ca:	e00b      	b.n	80033e4 <HAL_I2C_ErrorCallback+0x5c>
			case I2C_DMA_STATE_ICM20948_MAG:
				printf("icm20948 mag i2c error");
 80033cc:	480b      	ldr	r0, [pc, #44]	@ (80033fc <HAL_I2C_ErrorCallback+0x74>)
 80033ce:	f00a f9dd 	bl	800d78c <iprintf>
				break;
 80033d2:	e007      	b.n	80033e4 <HAL_I2C_ErrorCallback+0x5c>
			case I2C_DMA_STATE_BMP280:
				printf("icm20948 bmp280 i2c error");
 80033d4:	480a      	ldr	r0, [pc, #40]	@ (8003400 <HAL_I2C_ErrorCallback+0x78>)
 80033d6:	f00a f9d9 	bl	800d78c <iprintf>
				break;
 80033da:	e003      	b.n	80033e4 <HAL_I2C_ErrorCallback+0x5c>
			case I2C_DMA_STATE_NONE:
			default:
				printf("Unexpected I2C DMA state!\r\n");
 80033dc:	4809      	ldr	r0, [pc, #36]	@ (8003404 <HAL_I2C_ErrorCallback+0x7c>)
 80033de:	f00a fa3d 	bl	800d85c <puts>
				break;
 80033e2:	bf00      	nop
		}
    }
}
 80033e4:	bf00      	nop
 80033e6:	3708      	adds	r7, #8
 80033e8:	46bd      	mov	sp, r7
 80033ea:	bd80      	pop	{r7, pc}
 80033ec:	40005400 	.word	0x40005400
 80033f0:	200005d8 	.word	0x200005d8
 80033f4:	080104b4 	.word	0x080104b4
 80033f8:	080104c8 	.word	0x080104c8
 80033fc:	080104e0 	.word	0x080104e0
 8003400:	080104f8 	.word	0x080104f8
 8003404:	08010514 	.word	0x08010514

08003408 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b082      	sub	sp, #8
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	4a04      	ldr	r2, [pc, #16]	@ (8003428 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003416:	4293      	cmp	r3, r2
 8003418:	d101      	bne.n	800341e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800341a:	f000 fbf3 	bl	8003c04 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800341e:	bf00      	nop
 8003420:	3708      	adds	r7, #8
 8003422:	46bd      	mov	sp, r7
 8003424:	bd80      	pop	{r7, pc}
 8003426:	bf00      	nop
 8003428:	40010000 	.word	0x40010000

0800342c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800342c:	b480      	push	{r7}
 800342e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003430:	b672      	cpsid	i
}
 8003432:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003434:	bf00      	nop
 8003436:	e7fd      	b.n	8003434 <Error_Handler+0x8>

08003438 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8003438:	b580      	push	{r7, lr}
 800343a:	b086      	sub	sp, #24
 800343c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 800343e:	1d3b      	adds	r3, r7, #4
 8003440:	2200      	movs	r2, #0
 8003442:	601a      	str	r2, [r3, #0]
 8003444:	605a      	str	r2, [r3, #4]
 8003446:	609a      	str	r2, [r3, #8]
 8003448:	60da      	str	r2, [r3, #12]
 800344a:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 800344c:	2300      	movs	r3, #0
 800344e:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8003450:	4b24      	ldr	r3, [pc, #144]	@ (80034e4 <MX_RTC_Init+0xac>)
 8003452:	4a25      	ldr	r2, [pc, #148]	@ (80034e8 <MX_RTC_Init+0xb0>)
 8003454:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8003456:	4b23      	ldr	r3, [pc, #140]	@ (80034e4 <MX_RTC_Init+0xac>)
 8003458:	2200      	movs	r2, #0
 800345a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800345c:	4b21      	ldr	r3, [pc, #132]	@ (80034e4 <MX_RTC_Init+0xac>)
 800345e:	227f      	movs	r2, #127	@ 0x7f
 8003460:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8003462:	4b20      	ldr	r3, [pc, #128]	@ (80034e4 <MX_RTC_Init+0xac>)
 8003464:	22ff      	movs	r2, #255	@ 0xff
 8003466:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8003468:	4b1e      	ldr	r3, [pc, #120]	@ (80034e4 <MX_RTC_Init+0xac>)
 800346a:	2200      	movs	r2, #0
 800346c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800346e:	4b1d      	ldr	r3, [pc, #116]	@ (80034e4 <MX_RTC_Init+0xac>)
 8003470:	2200      	movs	r2, #0
 8003472:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8003474:	4b1b      	ldr	r3, [pc, #108]	@ (80034e4 <MX_RTC_Init+0xac>)
 8003476:	2200      	movs	r2, #0
 8003478:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800347a:	481a      	ldr	r0, [pc, #104]	@ (80034e4 <MX_RTC_Init+0xac>)
 800347c:	f005 f8fc 	bl	8008678 <HAL_RTC_Init>
 8003480:	4603      	mov	r3, r0
 8003482:	2b00      	cmp	r3, #0
 8003484:	d001      	beq.n	800348a <MX_RTC_Init+0x52>
  {
    Error_Handler();
 8003486:	f7ff ffd1 	bl	800342c <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 800348a:	2300      	movs	r3, #0
 800348c:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 800348e:	2300      	movs	r3, #0
 8003490:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8003492:	2300      	movs	r3, #0
 8003494:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8003496:	2300      	movs	r3, #0
 8003498:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800349a:	2300      	movs	r3, #0
 800349c:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 800349e:	1d3b      	adds	r3, r7, #4
 80034a0:	2201      	movs	r2, #1
 80034a2:	4619      	mov	r1, r3
 80034a4:	480f      	ldr	r0, [pc, #60]	@ (80034e4 <MX_RTC_Init+0xac>)
 80034a6:	f005 f96a 	bl	800877e <HAL_RTC_SetTime>
 80034aa:	4603      	mov	r3, r0
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d001      	beq.n	80034b4 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 80034b0:	f7ff ffbc 	bl	800342c <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 80034b4:	2301      	movs	r3, #1
 80034b6:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_AUGUST;
 80034b8:	2308      	movs	r3, #8
 80034ba:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x7;
 80034bc:	2307      	movs	r3, #7
 80034be:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x23;
 80034c0:	2323      	movs	r3, #35	@ 0x23
 80034c2:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 80034c4:	463b      	mov	r3, r7
 80034c6:	2201      	movs	r2, #1
 80034c8:	4619      	mov	r1, r3
 80034ca:	4806      	ldr	r0, [pc, #24]	@ (80034e4 <MX_RTC_Init+0xac>)
 80034cc:	f005 fa4f 	bl	800896e <HAL_RTC_SetDate>
 80034d0:	4603      	mov	r3, r0
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d001      	beq.n	80034da <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 80034d6:	f7ff ffa9 	bl	800342c <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80034da:	bf00      	nop
 80034dc:	3718      	adds	r7, #24
 80034de:	46bd      	mov	sp, r7
 80034e0:	bd80      	pop	{r7, pc}
 80034e2:	bf00      	nop
 80034e4:	200005e0 	.word	0x200005e0
 80034e8:	40002800 	.word	0x40002800

080034ec <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b086      	sub	sp, #24
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80034f4:	f107 0308 	add.w	r3, r7, #8
 80034f8:	2200      	movs	r2, #0
 80034fa:	601a      	str	r2, [r3, #0]
 80034fc:	605a      	str	r2, [r3, #4]
 80034fe:	609a      	str	r2, [r3, #8]
 8003500:	60da      	str	r2, [r3, #12]
  if(rtcHandle->Instance==RTC)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	4a0c      	ldr	r2, [pc, #48]	@ (8003538 <HAL_RTC_MspInit+0x4c>)
 8003508:	4293      	cmp	r3, r2
 800350a:	d111      	bne.n	8003530 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800350c:	2302      	movs	r3, #2
 800350e:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8003510:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003514:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003516:	f107 0308 	add.w	r3, r7, #8
 800351a:	4618      	mov	r0, r3
 800351c:	f004 ffca 	bl	80084b4 <HAL_RCCEx_PeriphCLKConfig>
 8003520:	4603      	mov	r3, r0
 8003522:	2b00      	cmp	r3, #0
 8003524:	d001      	beq.n	800352a <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8003526:	f7ff ff81 	bl	800342c <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800352a:	4b04      	ldr	r3, [pc, #16]	@ (800353c <HAL_RTC_MspInit+0x50>)
 800352c:	2201      	movs	r2, #1
 800352e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8003530:	bf00      	nop
 8003532:	3718      	adds	r7, #24
 8003534:	46bd      	mov	sp, r7
 8003536:	bd80      	pop	{r7, pc}
 8003538:	40002800 	.word	0x40002800
 800353c:	42470e3c 	.word	0x42470e3c

08003540 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b082      	sub	sp, #8
 8003544:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003546:	2300      	movs	r3, #0
 8003548:	607b      	str	r3, [r7, #4]
 800354a:	4b12      	ldr	r3, [pc, #72]	@ (8003594 <HAL_MspInit+0x54>)
 800354c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800354e:	4a11      	ldr	r2, [pc, #68]	@ (8003594 <HAL_MspInit+0x54>)
 8003550:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003554:	6453      	str	r3, [r2, #68]	@ 0x44
 8003556:	4b0f      	ldr	r3, [pc, #60]	@ (8003594 <HAL_MspInit+0x54>)
 8003558:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800355a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800355e:	607b      	str	r3, [r7, #4]
 8003560:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003562:	2300      	movs	r3, #0
 8003564:	603b      	str	r3, [r7, #0]
 8003566:	4b0b      	ldr	r3, [pc, #44]	@ (8003594 <HAL_MspInit+0x54>)
 8003568:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800356a:	4a0a      	ldr	r2, [pc, #40]	@ (8003594 <HAL_MspInit+0x54>)
 800356c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003570:	6413      	str	r3, [r2, #64]	@ 0x40
 8003572:	4b08      	ldr	r3, [pc, #32]	@ (8003594 <HAL_MspInit+0x54>)
 8003574:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003576:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800357a:	603b      	str	r3, [r7, #0]
 800357c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800357e:	2200      	movs	r2, #0
 8003580:	210f      	movs	r1, #15
 8003582:	f06f 0001 	mvn.w	r0, #1
 8003586:	f000 fc39 	bl	8003dfc <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800358a:	bf00      	nop
 800358c:	3708      	adds	r7, #8
 800358e:	46bd      	mov	sp, r7
 8003590:	bd80      	pop	{r7, pc}
 8003592:	bf00      	nop
 8003594:	40023800 	.word	0x40023800

08003598 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003598:	b580      	push	{r7, lr}
 800359a:	b08c      	sub	sp, #48	@ 0x30
 800359c:	af00      	add	r7, sp, #0
 800359e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80035a0:	2300      	movs	r3, #0
 80035a2:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 80035a4:	2300      	movs	r3, #0
 80035a6:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80035a8:	2300      	movs	r3, #0
 80035aa:	60bb      	str	r3, [r7, #8]
 80035ac:	4b2f      	ldr	r3, [pc, #188]	@ (800366c <HAL_InitTick+0xd4>)
 80035ae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035b0:	4a2e      	ldr	r2, [pc, #184]	@ (800366c <HAL_InitTick+0xd4>)
 80035b2:	f043 0301 	orr.w	r3, r3, #1
 80035b6:	6453      	str	r3, [r2, #68]	@ 0x44
 80035b8:	4b2c      	ldr	r3, [pc, #176]	@ (800366c <HAL_InitTick+0xd4>)
 80035ba:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80035bc:	f003 0301 	and.w	r3, r3, #1
 80035c0:	60bb      	str	r3, [r7, #8]
 80035c2:	68bb      	ldr	r3, [r7, #8]
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80035c4:	f107 020c 	add.w	r2, r7, #12
 80035c8:	f107 0310 	add.w	r3, r7, #16
 80035cc:	4611      	mov	r1, r2
 80035ce:	4618      	mov	r0, r3
 80035d0:	f004 ff3e 	bl	8008450 <HAL_RCC_GetClockConfig>
  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 80035d4:	f004 ff28 	bl	8008428 <HAL_RCC_GetPCLK2Freq>
 80035d8:	4603      	mov	r3, r0
 80035da:	005b      	lsls	r3, r3, #1
 80035dc:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80035de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035e0:	4a23      	ldr	r2, [pc, #140]	@ (8003670 <HAL_InitTick+0xd8>)
 80035e2:	fba2 2303 	umull	r2, r3, r2, r3
 80035e6:	0c9b      	lsrs	r3, r3, #18
 80035e8:	3b01      	subs	r3, #1
 80035ea:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80035ec:	4b21      	ldr	r3, [pc, #132]	@ (8003674 <HAL_InitTick+0xdc>)
 80035ee:	4a22      	ldr	r2, [pc, #136]	@ (8003678 <HAL_InitTick+0xe0>)
 80035f0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80035f2:	4b20      	ldr	r3, [pc, #128]	@ (8003674 <HAL_InitTick+0xdc>)
 80035f4:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80035f8:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80035fa:	4a1e      	ldr	r2, [pc, #120]	@ (8003674 <HAL_InitTick+0xdc>)
 80035fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035fe:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8003600:	4b1c      	ldr	r3, [pc, #112]	@ (8003674 <HAL_InitTick+0xdc>)
 8003602:	2200      	movs	r2, #0
 8003604:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003606:	4b1b      	ldr	r3, [pc, #108]	@ (8003674 <HAL_InitTick+0xdc>)
 8003608:	2200      	movs	r2, #0
 800360a:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800360c:	4b19      	ldr	r3, [pc, #100]	@ (8003674 <HAL_InitTick+0xdc>)
 800360e:	2200      	movs	r2, #0
 8003610:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8003612:	4818      	ldr	r0, [pc, #96]	@ (8003674 <HAL_InitTick+0xdc>)
 8003614:	f005 fb3c 	bl	8008c90 <HAL_TIM_Base_Init>
 8003618:	4603      	mov	r3, r0
 800361a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 800361e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003622:	2b00      	cmp	r3, #0
 8003624:	d11b      	bne.n	800365e <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8003626:	4813      	ldr	r0, [pc, #76]	@ (8003674 <HAL_InitTick+0xdc>)
 8003628:	f005 fb8c 	bl	8008d44 <HAL_TIM_Base_Start_IT>
 800362c:	4603      	mov	r3, r0
 800362e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8003632:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8003636:	2b00      	cmp	r3, #0
 8003638:	d111      	bne.n	800365e <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 800363a:	2019      	movs	r0, #25
 800363c:	f000 fbfa 	bl	8003e34 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	2b0f      	cmp	r3, #15
 8003644:	d808      	bhi.n	8003658 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8003646:	2200      	movs	r2, #0
 8003648:	6879      	ldr	r1, [r7, #4]
 800364a:	2019      	movs	r0, #25
 800364c:	f000 fbd6 	bl	8003dfc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003650:	4a0a      	ldr	r2, [pc, #40]	@ (800367c <HAL_InitTick+0xe4>)
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	6013      	str	r3, [r2, #0]
 8003656:	e002      	b.n	800365e <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8003658:	2301      	movs	r3, #1
 800365a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800365e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8003662:	4618      	mov	r0, r3
 8003664:	3730      	adds	r7, #48	@ 0x30
 8003666:	46bd      	mov	sp, r7
 8003668:	bd80      	pop	{r7, pc}
 800366a:	bf00      	nop
 800366c:	40023800 	.word	0x40023800
 8003670:	431bde83 	.word	0x431bde83
 8003674:	20000600 	.word	0x20000600
 8003678:	40010000 	.word	0x40010000
 800367c:	20000010 	.word	0x20000010

08003680 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003680:	b480      	push	{r7}
 8003682:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003684:	bf00      	nop
 8003686:	e7fd      	b.n	8003684 <NMI_Handler+0x4>

08003688 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003688:	b480      	push	{r7}
 800368a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800368c:	bf00      	nop
 800368e:	e7fd      	b.n	800368c <HardFault_Handler+0x4>

08003690 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003690:	b480      	push	{r7}
 8003692:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003694:	bf00      	nop
 8003696:	e7fd      	b.n	8003694 <MemManage_Handler+0x4>

08003698 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003698:	b480      	push	{r7}
 800369a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800369c:	bf00      	nop
 800369e:	e7fd      	b.n	800369c <BusFault_Handler+0x4>

080036a0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80036a0:	b480      	push	{r7}
 80036a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80036a4:	bf00      	nop
 80036a6:	e7fd      	b.n	80036a4 <UsageFault_Handler+0x4>

080036a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80036a8:	b480      	push	{r7}
 80036aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80036ac:	bf00      	nop
 80036ae:	46bd      	mov	sp, r7
 80036b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b4:	4770      	bx	lr
	...

080036b8 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 80036b8:	b580      	push	{r7, lr}
 80036ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 80036bc:	4802      	ldr	r0, [pc, #8]	@ (80036c8 <DMA1_Stream0_IRQHandler+0x10>)
 80036be:	f000 fcef 	bl	80040a0 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 80036c2:	bf00      	nop
 80036c4:	bd80      	pop	{r7, pc}
 80036c6:	bf00      	nop
 80036c8:	20000498 	.word	0x20000498

080036cc <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80036cc:	b580      	push	{r7, lr}
 80036ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80036d0:	4802      	ldr	r0, [pc, #8]	@ (80036dc <TIM1_UP_TIM10_IRQHandler+0x10>)
 80036d2:	f005 fba7 	bl	8008e24 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80036d6:	bf00      	nop
 80036d8:	bd80      	pop	{r7, pc}
 80036da:	bf00      	nop
 80036dc:	20000600 	.word	0x20000600

080036e0 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80036e4:	4802      	ldr	r0, [pc, #8]	@ (80036f0 <I2C1_EV_IRQHandler+0x10>)
 80036e6:	f002 f88b 	bl	8005800 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80036ea:	bf00      	nop
 80036ec:	bd80      	pop	{r7, pc}
 80036ee:	bf00      	nop
 80036f0:	20000444 	.word	0x20000444

080036f4 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80036f4:	b580      	push	{r7, lr}
 80036f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80036f8:	4802      	ldr	r0, [pc, #8]	@ (8003704 <I2C1_ER_IRQHandler+0x10>)
 80036fa:	f002 f9d4 	bl	8005aa6 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80036fe:	bf00      	nop
 8003700:	bd80      	pop	{r7, pc}
 8003702:	bf00      	nop
 8003704:	20000444 	.word	0x20000444

08003708 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003708:	b480      	push	{r7}
 800370a:	af00      	add	r7, sp, #0
  return 1;
 800370c:	2301      	movs	r3, #1
}
 800370e:	4618      	mov	r0, r3
 8003710:	46bd      	mov	sp, r7
 8003712:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003716:	4770      	bx	lr

08003718 <_kill>:

int _kill(int pid, int sig)
{
 8003718:	b580      	push	{r7, lr}
 800371a:	b082      	sub	sp, #8
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
 8003720:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003722:	f00a fa57 	bl	800dbd4 <__errno>
 8003726:	4603      	mov	r3, r0
 8003728:	2216      	movs	r2, #22
 800372a:	601a      	str	r2, [r3, #0]
  return -1;
 800372c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8003730:	4618      	mov	r0, r3
 8003732:	3708      	adds	r7, #8
 8003734:	46bd      	mov	sp, r7
 8003736:	bd80      	pop	{r7, pc}

08003738 <_exit>:

void _exit (int status)
{
 8003738:	b580      	push	{r7, lr}
 800373a:	b082      	sub	sp, #8
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003740:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003744:	6878      	ldr	r0, [r7, #4]
 8003746:	f7ff ffe7 	bl	8003718 <_kill>
  while (1) {}    /* Make sure we hang here */
 800374a:	bf00      	nop
 800374c:	e7fd      	b.n	800374a <_exit+0x12>

0800374e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800374e:	b580      	push	{r7, lr}
 8003750:	b086      	sub	sp, #24
 8003752:	af00      	add	r7, sp, #0
 8003754:	60f8      	str	r0, [r7, #12]
 8003756:	60b9      	str	r1, [r7, #8]
 8003758:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800375a:	2300      	movs	r3, #0
 800375c:	617b      	str	r3, [r7, #20]
 800375e:	e00a      	b.n	8003776 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003760:	f3af 8000 	nop.w
 8003764:	4601      	mov	r1, r0
 8003766:	68bb      	ldr	r3, [r7, #8]
 8003768:	1c5a      	adds	r2, r3, #1
 800376a:	60ba      	str	r2, [r7, #8]
 800376c:	b2ca      	uxtb	r2, r1
 800376e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003770:	697b      	ldr	r3, [r7, #20]
 8003772:	3301      	adds	r3, #1
 8003774:	617b      	str	r3, [r7, #20]
 8003776:	697a      	ldr	r2, [r7, #20]
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	429a      	cmp	r2, r3
 800377c:	dbf0      	blt.n	8003760 <_read+0x12>
  }

  return len;
 800377e:	687b      	ldr	r3, [r7, #4]
}
 8003780:	4618      	mov	r0, r3
 8003782:	3718      	adds	r7, #24
 8003784:	46bd      	mov	sp, r7
 8003786:	bd80      	pop	{r7, pc}

08003788 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b086      	sub	sp, #24
 800378c:	af00      	add	r7, sp, #0
 800378e:	60f8      	str	r0, [r7, #12]
 8003790:	60b9      	str	r1, [r7, #8]
 8003792:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003794:	2300      	movs	r3, #0
 8003796:	617b      	str	r3, [r7, #20]
 8003798:	e009      	b.n	80037ae <_write+0x26>
  {
    __io_putchar(*ptr++);
 800379a:	68bb      	ldr	r3, [r7, #8]
 800379c:	1c5a      	adds	r2, r3, #1
 800379e:	60ba      	str	r2, [r7, #8]
 80037a0:	781b      	ldrb	r3, [r3, #0]
 80037a2:	4618      	mov	r0, r3
 80037a4:	f7ff fba6 	bl	8002ef4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	3301      	adds	r3, #1
 80037ac:	617b      	str	r3, [r7, #20]
 80037ae:	697a      	ldr	r2, [r7, #20]
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	429a      	cmp	r2, r3
 80037b4:	dbf1      	blt.n	800379a <_write+0x12>
  }
  return len;
 80037b6:	687b      	ldr	r3, [r7, #4]
}
 80037b8:	4618      	mov	r0, r3
 80037ba:	3718      	adds	r7, #24
 80037bc:	46bd      	mov	sp, r7
 80037be:	bd80      	pop	{r7, pc}

080037c0 <_close>:

int _close(int file)
{
 80037c0:	b480      	push	{r7}
 80037c2:	b083      	sub	sp, #12
 80037c4:	af00      	add	r7, sp, #0
 80037c6:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80037c8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80037cc:	4618      	mov	r0, r3
 80037ce:	370c      	adds	r7, #12
 80037d0:	46bd      	mov	sp, r7
 80037d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037d6:	4770      	bx	lr

080037d8 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80037d8:	b480      	push	{r7}
 80037da:	b083      	sub	sp, #12
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
 80037e0:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80037e8:	605a      	str	r2, [r3, #4]
  return 0;
 80037ea:	2300      	movs	r3, #0
}
 80037ec:	4618      	mov	r0, r3
 80037ee:	370c      	adds	r7, #12
 80037f0:	46bd      	mov	sp, r7
 80037f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f6:	4770      	bx	lr

080037f8 <_isatty>:

int _isatty(int file)
{
 80037f8:	b480      	push	{r7}
 80037fa:	b083      	sub	sp, #12
 80037fc:	af00      	add	r7, sp, #0
 80037fe:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003800:	2301      	movs	r3, #1
}
 8003802:	4618      	mov	r0, r3
 8003804:	370c      	adds	r7, #12
 8003806:	46bd      	mov	sp, r7
 8003808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800380c:	4770      	bx	lr

0800380e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800380e:	b480      	push	{r7}
 8003810:	b085      	sub	sp, #20
 8003812:	af00      	add	r7, sp, #0
 8003814:	60f8      	str	r0, [r7, #12]
 8003816:	60b9      	str	r1, [r7, #8]
 8003818:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800381a:	2300      	movs	r3, #0
}
 800381c:	4618      	mov	r0, r3
 800381e:	3714      	adds	r7, #20
 8003820:	46bd      	mov	sp, r7
 8003822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003826:	4770      	bx	lr

08003828 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b086      	sub	sp, #24
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003830:	4a14      	ldr	r2, [pc, #80]	@ (8003884 <_sbrk+0x5c>)
 8003832:	4b15      	ldr	r3, [pc, #84]	@ (8003888 <_sbrk+0x60>)
 8003834:	1ad3      	subs	r3, r2, r3
 8003836:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003838:	697b      	ldr	r3, [r7, #20]
 800383a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800383c:	4b13      	ldr	r3, [pc, #76]	@ (800388c <_sbrk+0x64>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d102      	bne.n	800384a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003844:	4b11      	ldr	r3, [pc, #68]	@ (800388c <_sbrk+0x64>)
 8003846:	4a12      	ldr	r2, [pc, #72]	@ (8003890 <_sbrk+0x68>)
 8003848:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800384a:	4b10      	ldr	r3, [pc, #64]	@ (800388c <_sbrk+0x64>)
 800384c:	681a      	ldr	r2, [r3, #0]
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	4413      	add	r3, r2
 8003852:	693a      	ldr	r2, [r7, #16]
 8003854:	429a      	cmp	r2, r3
 8003856:	d207      	bcs.n	8003868 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003858:	f00a f9bc 	bl	800dbd4 <__errno>
 800385c:	4603      	mov	r3, r0
 800385e:	220c      	movs	r2, #12
 8003860:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003862:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8003866:	e009      	b.n	800387c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003868:	4b08      	ldr	r3, [pc, #32]	@ (800388c <_sbrk+0x64>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800386e:	4b07      	ldr	r3, [pc, #28]	@ (800388c <_sbrk+0x64>)
 8003870:	681a      	ldr	r2, [r3, #0]
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	4413      	add	r3, r2
 8003876:	4a05      	ldr	r2, [pc, #20]	@ (800388c <_sbrk+0x64>)
 8003878:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800387a:	68fb      	ldr	r3, [r7, #12]
}
 800387c:	4618      	mov	r0, r3
 800387e:	3718      	adds	r7, #24
 8003880:	46bd      	mov	sp, r7
 8003882:	bd80      	pop	{r7, pc}
 8003884:	20020000 	.word	0x20020000
 8003888:	00000400 	.word	0x00000400
 800388c:	20000648 	.word	0x20000648
 8003890:	200051d0 	.word	0x200051d0

08003894 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003894:	b480      	push	{r7}
 8003896:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003898:	4b06      	ldr	r3, [pc, #24]	@ (80038b4 <SystemInit+0x20>)
 800389a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800389e:	4a05      	ldr	r2, [pc, #20]	@ (80038b4 <SystemInit+0x20>)
 80038a0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80038a4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80038a8:	bf00      	nop
 80038aa:	46bd      	mov	sp, r7
 80038ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038b0:	4770      	bx	lr
 80038b2:	bf00      	nop
 80038b4:	e000ed00 	.word	0xe000ed00

080038b8 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80038bc:	4b11      	ldr	r3, [pc, #68]	@ (8003904 <MX_USART1_UART_Init+0x4c>)
 80038be:	4a12      	ldr	r2, [pc, #72]	@ (8003908 <MX_USART1_UART_Init+0x50>)
 80038c0:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80038c2:	4b10      	ldr	r3, [pc, #64]	@ (8003904 <MX_USART1_UART_Init+0x4c>)
 80038c4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80038c8:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80038ca:	4b0e      	ldr	r3, [pc, #56]	@ (8003904 <MX_USART1_UART_Init+0x4c>)
 80038cc:	2200      	movs	r2, #0
 80038ce:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80038d0:	4b0c      	ldr	r3, [pc, #48]	@ (8003904 <MX_USART1_UART_Init+0x4c>)
 80038d2:	2200      	movs	r2, #0
 80038d4:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80038d6:	4b0b      	ldr	r3, [pc, #44]	@ (8003904 <MX_USART1_UART_Init+0x4c>)
 80038d8:	2200      	movs	r2, #0
 80038da:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80038dc:	4b09      	ldr	r3, [pc, #36]	@ (8003904 <MX_USART1_UART_Init+0x4c>)
 80038de:	220c      	movs	r2, #12
 80038e0:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80038e2:	4b08      	ldr	r3, [pc, #32]	@ (8003904 <MX_USART1_UART_Init+0x4c>)
 80038e4:	2200      	movs	r2, #0
 80038e6:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80038e8:	4b06      	ldr	r3, [pc, #24]	@ (8003904 <MX_USART1_UART_Init+0x4c>)
 80038ea:	2200      	movs	r2, #0
 80038ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80038ee:	4805      	ldr	r0, [pc, #20]	@ (8003904 <MX_USART1_UART_Init+0x4c>)
 80038f0:	f005 fc70 	bl	80091d4 <HAL_UART_Init>
 80038f4:	4603      	mov	r3, r0
 80038f6:	2b00      	cmp	r3, #0
 80038f8:	d001      	beq.n	80038fe <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80038fa:	f7ff fd97 	bl	800342c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80038fe:	bf00      	nop
 8003900:	bd80      	pop	{r7, pc}
 8003902:	bf00      	nop
 8003904:	2000064c 	.word	0x2000064c
 8003908:	40011000 	.word	0x40011000

0800390c <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800390c:	b580      	push	{r7, lr}
 800390e:	b08a      	sub	sp, #40	@ 0x28
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003914:	f107 0314 	add.w	r3, r7, #20
 8003918:	2200      	movs	r2, #0
 800391a:	601a      	str	r2, [r3, #0]
 800391c:	605a      	str	r2, [r3, #4]
 800391e:	609a      	str	r2, [r3, #8]
 8003920:	60da      	str	r2, [r3, #12]
 8003922:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a19      	ldr	r2, [pc, #100]	@ (8003990 <HAL_UART_MspInit+0x84>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d12c      	bne.n	8003988 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800392e:	2300      	movs	r3, #0
 8003930:	613b      	str	r3, [r7, #16]
 8003932:	4b18      	ldr	r3, [pc, #96]	@ (8003994 <HAL_UART_MspInit+0x88>)
 8003934:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003936:	4a17      	ldr	r2, [pc, #92]	@ (8003994 <HAL_UART_MspInit+0x88>)
 8003938:	f043 0310 	orr.w	r3, r3, #16
 800393c:	6453      	str	r3, [r2, #68]	@ 0x44
 800393e:	4b15      	ldr	r3, [pc, #84]	@ (8003994 <HAL_UART_MspInit+0x88>)
 8003940:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003942:	f003 0310 	and.w	r3, r3, #16
 8003946:	613b      	str	r3, [r7, #16]
 8003948:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800394a:	2300      	movs	r3, #0
 800394c:	60fb      	str	r3, [r7, #12]
 800394e:	4b11      	ldr	r3, [pc, #68]	@ (8003994 <HAL_UART_MspInit+0x88>)
 8003950:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003952:	4a10      	ldr	r2, [pc, #64]	@ (8003994 <HAL_UART_MspInit+0x88>)
 8003954:	f043 0301 	orr.w	r3, r3, #1
 8003958:	6313      	str	r3, [r2, #48]	@ 0x30
 800395a:	4b0e      	ldr	r3, [pc, #56]	@ (8003994 <HAL_UART_MspInit+0x88>)
 800395c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800395e:	f003 0301 	and.w	r3, r3, #1
 8003962:	60fb      	str	r3, [r7, #12]
 8003964:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8003966:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 800396a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800396c:	2302      	movs	r3, #2
 800396e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003970:	2300      	movs	r3, #0
 8003972:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003974:	2303      	movs	r3, #3
 8003976:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8003978:	2307      	movs	r3, #7
 800397a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800397c:	f107 0314 	add.w	r3, r7, #20
 8003980:	4619      	mov	r1, r3
 8003982:	4805      	ldr	r0, [pc, #20]	@ (8003998 <HAL_UART_MspInit+0x8c>)
 8003984:	f000 fe10 	bl	80045a8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8003988:	bf00      	nop
 800398a:	3728      	adds	r7, #40	@ 0x28
 800398c:	46bd      	mov	sp, r7
 800398e:	bd80      	pop	{r7, pc}
 8003990:	40011000 	.word	0x40011000
 8003994:	40023800 	.word	0x40023800
 8003998:	40020000 	.word	0x40020000

0800399c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800399c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80039d4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80039a0:	480d      	ldr	r0, [pc, #52]	@ (80039d8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80039a2:	490e      	ldr	r1, [pc, #56]	@ (80039dc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80039a4:	4a0e      	ldr	r2, [pc, #56]	@ (80039e0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80039a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80039a8:	e002      	b.n	80039b0 <LoopCopyDataInit>

080039aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80039aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80039ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80039ae:	3304      	adds	r3, #4

080039b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80039b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80039b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80039b4:	d3f9      	bcc.n	80039aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80039b6:	4a0b      	ldr	r2, [pc, #44]	@ (80039e4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80039b8:	4c0b      	ldr	r4, [pc, #44]	@ (80039e8 <LoopFillZerobss+0x26>)
  movs r3, #0
 80039ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80039bc:	e001      	b.n	80039c2 <LoopFillZerobss>

080039be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80039be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80039c0:	3204      	adds	r2, #4

080039c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80039c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80039c4:	d3fb      	bcc.n	80039be <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80039c6:	f7ff ff65 	bl	8003894 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80039ca:	f00a f909 	bl	800dbe0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80039ce:	f7ff faa3 	bl	8002f18 <main>
  bx  lr    
 80039d2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80039d4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80039d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80039dc:	200001f8 	.word	0x200001f8
  ldr r2, =_sidata
 80039e0:	08011188 	.word	0x08011188
  ldr r2, =_sbss
 80039e4:	200001f8 	.word	0x200001f8
  ldr r4, =_ebss
 80039e8:	200051cc 	.word	0x200051cc

080039ec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80039ec:	e7fe      	b.n	80039ec <ADC_IRQHandler>
	...

080039f0 <angle_estimation>:
#include <stdint.h>

#define RAD_TO_DEG 57.29577951308232 // 180 / pi

void angle_estimation(float *acce, float *angle)
{
 80039f0:	b590      	push	{r4, r7, lr}
 80039f2:	ed2d 8b02 	vpush	{d8}
 80039f6:	b085      	sub	sp, #20
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
 80039fc:	6039      	str	r1, [r7, #0]
    // Normalize accelerometer values
    float norm_factor = sqrt(acce[0] * acce[0] + acce[1] * acce[1] + acce[2] * acce[2]);
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	ed93 7a00 	vldr	s14, [r3]
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	edd3 7a00 	vldr	s15, [r3]
 8003a0a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	3304      	adds	r3, #4
 8003a12:	edd3 6a00 	vldr	s13, [r3]
 8003a16:	687b      	ldr	r3, [r7, #4]
 8003a18:	3304      	adds	r3, #4
 8003a1a:	edd3 7a00 	vldr	s15, [r3]
 8003a1e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003a22:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	3308      	adds	r3, #8
 8003a2a:	edd3 6a00 	vldr	s13, [r3]
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	3308      	adds	r3, #8
 8003a32:	edd3 7a00 	vldr	s15, [r3]
 8003a36:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003a3a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003a3e:	ee17 0a90 	vmov	r0, s15
 8003a42:	f7fc fd81 	bl	8000548 <__aeabi_f2d>
 8003a46:	4602      	mov	r2, r0
 8003a48:	460b      	mov	r3, r1
 8003a4a:	ec43 2b10 	vmov	d0, r2, r3
 8003a4e:	f00c f8a7 	bl	800fba0 <sqrt>
 8003a52:	ec53 2b10 	vmov	r2, r3, d0
 8003a56:	4610      	mov	r0, r2
 8003a58:	4619      	mov	r1, r3
 8003a5a:	f7fd f8a5 	bl	8000ba8 <__aeabi_d2f>
 8003a5e:	4603      	mov	r3, r0
 8003a60:	60bb      	str	r3, [r7, #8]
    for (uint8_t i = 0; i < 3; ++i) {
 8003a62:	2300      	movs	r3, #0
 8003a64:	73fb      	strb	r3, [r7, #15]
 8003a66:	e012      	b.n	8003a8e <angle_estimation+0x9e>
        acce[i] /= norm_factor;
 8003a68:	7bfb      	ldrb	r3, [r7, #15]
 8003a6a:	009b      	lsls	r3, r3, #2
 8003a6c:	687a      	ldr	r2, [r7, #4]
 8003a6e:	4413      	add	r3, r2
 8003a70:	edd3 6a00 	vldr	s13, [r3]
 8003a74:	7bfb      	ldrb	r3, [r7, #15]
 8003a76:	009b      	lsls	r3, r3, #2
 8003a78:	687a      	ldr	r2, [r7, #4]
 8003a7a:	4413      	add	r3, r2
 8003a7c:	ed97 7a02 	vldr	s14, [r7, #8]
 8003a80:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003a84:	edc3 7a00 	vstr	s15, [r3]
    for (uint8_t i = 0; i < 3; ++i) {
 8003a88:	7bfb      	ldrb	r3, [r7, #15]
 8003a8a:	3301      	adds	r3, #1
 8003a8c:	73fb      	strb	r3, [r7, #15]
 8003a8e:	7bfb      	ldrb	r3, [r7, #15]
 8003a90:	2b02      	cmp	r3, #2
 8003a92:	d9e9      	bls.n	8003a68 <angle_estimation+0x78>
    }

    // Calculate pitch and roll
    angle[0] = atan2f(acce[1], sqrt(acce[0] * acce[0] + acce[2] * acce[2])) * RAD_TO_DEG; // Pitch
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	3304      	adds	r3, #4
 8003a98:	ed93 8a00 	vldr	s16, [r3]
 8003a9c:	687b      	ldr	r3, [r7, #4]
 8003a9e:	ed93 7a00 	vldr	s14, [r3]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	edd3 7a00 	vldr	s15, [r3]
 8003aa8:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	3308      	adds	r3, #8
 8003ab0:	edd3 6a00 	vldr	s13, [r3]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	3308      	adds	r3, #8
 8003ab8:	edd3 7a00 	vldr	s15, [r3]
 8003abc:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003ac0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ac4:	ee17 0a90 	vmov	r0, s15
 8003ac8:	f7fc fd3e 	bl	8000548 <__aeabi_f2d>
 8003acc:	4602      	mov	r2, r0
 8003ace:	460b      	mov	r3, r1
 8003ad0:	ec43 2b10 	vmov	d0, r2, r3
 8003ad4:	f00c f864 	bl	800fba0 <sqrt>
 8003ad8:	ec53 2b10 	vmov	r2, r3, d0
 8003adc:	4610      	mov	r0, r2
 8003ade:	4619      	mov	r1, r3
 8003ae0:	f7fd f862 	bl	8000ba8 <__aeabi_d2f>
 8003ae4:	4603      	mov	r3, r0
 8003ae6:	ee00 3a90 	vmov	s1, r3
 8003aea:	eeb0 0a48 	vmov.f32	s0, s16
 8003aee:	f00c f883 	bl	800fbf8 <atan2f>
 8003af2:	ee10 3a10 	vmov	r3, s0
 8003af6:	4618      	mov	r0, r3
 8003af8:	f7fc fd26 	bl	8000548 <__aeabi_f2d>
 8003afc:	a32e      	add	r3, pc, #184	@ (adr r3, 8003bb8 <angle_estimation+0x1c8>)
 8003afe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b02:	f7fc fd79 	bl	80005f8 <__aeabi_dmul>
 8003b06:	4602      	mov	r2, r0
 8003b08:	460b      	mov	r3, r1
 8003b0a:	4610      	mov	r0, r2
 8003b0c:	4619      	mov	r1, r3
 8003b0e:	f7fd f84b 	bl	8000ba8 <__aeabi_d2f>
 8003b12:	4602      	mov	r2, r0
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	601a      	str	r2, [r3, #0]
    angle[1] = atan2f(acce[0], sqrt(acce[1] * acce[1] + acce[2] * acce[2])) * RAD_TO_DEG; // Roll
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	ed93 8a00 	vldr	s16, [r3]
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	3304      	adds	r3, #4
 8003b22:	ed93 7a00 	vldr	s14, [r3]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	3304      	adds	r3, #4
 8003b2a:	edd3 7a00 	vldr	s15, [r3]
 8003b2e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	3308      	adds	r3, #8
 8003b36:	edd3 6a00 	vldr	s13, [r3]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	3308      	adds	r3, #8
 8003b3e:	edd3 7a00 	vldr	s15, [r3]
 8003b42:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8003b46:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003b4a:	ee17 0a90 	vmov	r0, s15
 8003b4e:	f7fc fcfb 	bl	8000548 <__aeabi_f2d>
 8003b52:	4602      	mov	r2, r0
 8003b54:	460b      	mov	r3, r1
 8003b56:	ec43 2b10 	vmov	d0, r2, r3
 8003b5a:	f00c f821 	bl	800fba0 <sqrt>
 8003b5e:	ec53 2b10 	vmov	r2, r3, d0
 8003b62:	4610      	mov	r0, r2
 8003b64:	4619      	mov	r1, r3
 8003b66:	f7fd f81f 	bl	8000ba8 <__aeabi_d2f>
 8003b6a:	4603      	mov	r3, r0
 8003b6c:	ee00 3a90 	vmov	s1, r3
 8003b70:	eeb0 0a48 	vmov.f32	s0, s16
 8003b74:	f00c f840 	bl	800fbf8 <atan2f>
 8003b78:	ee10 3a10 	vmov	r3, s0
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	f7fc fce3 	bl	8000548 <__aeabi_f2d>
 8003b82:	a30d      	add	r3, pc, #52	@ (adr r3, 8003bb8 <angle_estimation+0x1c8>)
 8003b84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b88:	f7fc fd36 	bl	80005f8 <__aeabi_dmul>
 8003b8c:	4602      	mov	r2, r0
 8003b8e:	460b      	mov	r3, r1
 8003b90:	4610      	mov	r0, r2
 8003b92:	4619      	mov	r1, r3
 8003b94:	683b      	ldr	r3, [r7, #0]
 8003b96:	1d1c      	adds	r4, r3, #4
 8003b98:	f7fd f806 	bl	8000ba8 <__aeabi_d2f>
 8003b9c:	4603      	mov	r3, r0
 8003b9e:	6023      	str	r3, [r4, #0]
    angle[2] = 0; // Yaw requires magnetometer or gyro data
 8003ba0:	683b      	ldr	r3, [r7, #0]
 8003ba2:	3308      	adds	r3, #8
 8003ba4:	f04f 0200 	mov.w	r2, #0
 8003ba8:	601a      	str	r2, [r3, #0]

    return;
 8003baa:	bf00      	nop
}
 8003bac:	3714      	adds	r7, #20
 8003bae:	46bd      	mov	sp, r7
 8003bb0:	ecbd 8b02 	vpop	{d8}
 8003bb4:	bd90      	pop	{r4, r7, pc}
 8003bb6:	bf00      	nop
 8003bb8:	1a63c1f8 	.word	0x1a63c1f8
 8003bbc:	404ca5dc 	.word	0x404ca5dc

08003bc0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003bc0:	b580      	push	{r7, lr}
 8003bc2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003bc4:	4b0e      	ldr	r3, [pc, #56]	@ (8003c00 <HAL_Init+0x40>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4a0d      	ldr	r2, [pc, #52]	@ (8003c00 <HAL_Init+0x40>)
 8003bca:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003bce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003bd0:	4b0b      	ldr	r3, [pc, #44]	@ (8003c00 <HAL_Init+0x40>)
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4a0a      	ldr	r2, [pc, #40]	@ (8003c00 <HAL_Init+0x40>)
 8003bd6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003bda:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003bdc:	4b08      	ldr	r3, [pc, #32]	@ (8003c00 <HAL_Init+0x40>)
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4a07      	ldr	r2, [pc, #28]	@ (8003c00 <HAL_Init+0x40>)
 8003be2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003be6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003be8:	2003      	movs	r0, #3
 8003bea:	f000 f8fc 	bl	8003de6 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003bee:	200f      	movs	r0, #15
 8003bf0:	f7ff fcd2 	bl	8003598 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003bf4:	f7ff fca4 	bl	8003540 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003bf8:	2300      	movs	r3, #0
}
 8003bfa:	4618      	mov	r0, r3
 8003bfc:	bd80      	pop	{r7, pc}
 8003bfe:	bf00      	nop
 8003c00:	40023c00 	.word	0x40023c00

08003c04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003c04:	b480      	push	{r7}
 8003c06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003c08:	4b06      	ldr	r3, [pc, #24]	@ (8003c24 <HAL_IncTick+0x20>)
 8003c0a:	781b      	ldrb	r3, [r3, #0]
 8003c0c:	461a      	mov	r2, r3
 8003c0e:	4b06      	ldr	r3, [pc, #24]	@ (8003c28 <HAL_IncTick+0x24>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4413      	add	r3, r2
 8003c14:	4a04      	ldr	r2, [pc, #16]	@ (8003c28 <HAL_IncTick+0x24>)
 8003c16:	6013      	str	r3, [r2, #0]
}
 8003c18:	bf00      	nop
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c20:	4770      	bx	lr
 8003c22:	bf00      	nop
 8003c24:	20000014 	.word	0x20000014
 8003c28:	20000694 	.word	0x20000694

08003c2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	af00      	add	r7, sp, #0
  return uwTick;
 8003c30:	4b03      	ldr	r3, [pc, #12]	@ (8003c40 <HAL_GetTick+0x14>)
 8003c32:	681b      	ldr	r3, [r3, #0]
}
 8003c34:	4618      	mov	r0, r3
 8003c36:	46bd      	mov	sp, r7
 8003c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c3c:	4770      	bx	lr
 8003c3e:	bf00      	nop
 8003c40:	20000694 	.word	0x20000694

08003c44 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b084      	sub	sp, #16
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003c4c:	f7ff ffee 	bl	8003c2c <HAL_GetTick>
 8003c50:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003c5c:	d005      	beq.n	8003c6a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003c5e:	4b0a      	ldr	r3, [pc, #40]	@ (8003c88 <HAL_Delay+0x44>)
 8003c60:	781b      	ldrb	r3, [r3, #0]
 8003c62:	461a      	mov	r2, r3
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	4413      	add	r3, r2
 8003c68:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003c6a:	bf00      	nop
 8003c6c:	f7ff ffde 	bl	8003c2c <HAL_GetTick>
 8003c70:	4602      	mov	r2, r0
 8003c72:	68bb      	ldr	r3, [r7, #8]
 8003c74:	1ad3      	subs	r3, r2, r3
 8003c76:	68fa      	ldr	r2, [r7, #12]
 8003c78:	429a      	cmp	r2, r3
 8003c7a:	d8f7      	bhi.n	8003c6c <HAL_Delay+0x28>
  {
  }
}
 8003c7c:	bf00      	nop
 8003c7e:	bf00      	nop
 8003c80:	3710      	adds	r7, #16
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bd80      	pop	{r7, pc}
 8003c86:	bf00      	nop
 8003c88:	20000014 	.word	0x20000014

08003c8c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003c8c:	b480      	push	{r7}
 8003c8e:	b085      	sub	sp, #20
 8003c90:	af00      	add	r7, sp, #0
 8003c92:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	f003 0307 	and.w	r3, r3, #7
 8003c9a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003c9c:	4b0c      	ldr	r3, [pc, #48]	@ (8003cd0 <__NVIC_SetPriorityGrouping+0x44>)
 8003c9e:	68db      	ldr	r3, [r3, #12]
 8003ca0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003ca2:	68ba      	ldr	r2, [r7, #8]
 8003ca4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003ca8:	4013      	ands	r3, r2
 8003caa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003cb0:	68bb      	ldr	r3, [r7, #8]
 8003cb2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003cb4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003cb8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003cbc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003cbe:	4a04      	ldr	r2, [pc, #16]	@ (8003cd0 <__NVIC_SetPriorityGrouping+0x44>)
 8003cc0:	68bb      	ldr	r3, [r7, #8]
 8003cc2:	60d3      	str	r3, [r2, #12]
}
 8003cc4:	bf00      	nop
 8003cc6:	3714      	adds	r7, #20
 8003cc8:	46bd      	mov	sp, r7
 8003cca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cce:	4770      	bx	lr
 8003cd0:	e000ed00 	.word	0xe000ed00

08003cd4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003cd4:	b480      	push	{r7}
 8003cd6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003cd8:	4b04      	ldr	r3, [pc, #16]	@ (8003cec <__NVIC_GetPriorityGrouping+0x18>)
 8003cda:	68db      	ldr	r3, [r3, #12]
 8003cdc:	0a1b      	lsrs	r3, r3, #8
 8003cde:	f003 0307 	and.w	r3, r3, #7
}
 8003ce2:	4618      	mov	r0, r3
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cea:	4770      	bx	lr
 8003cec:	e000ed00 	.word	0xe000ed00

08003cf0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003cf0:	b480      	push	{r7}
 8003cf2:	b083      	sub	sp, #12
 8003cf4:	af00      	add	r7, sp, #0
 8003cf6:	4603      	mov	r3, r0
 8003cf8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003cfa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003cfe:	2b00      	cmp	r3, #0
 8003d00:	db0b      	blt.n	8003d1a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d02:	79fb      	ldrb	r3, [r7, #7]
 8003d04:	f003 021f 	and.w	r2, r3, #31
 8003d08:	4907      	ldr	r1, [pc, #28]	@ (8003d28 <__NVIC_EnableIRQ+0x38>)
 8003d0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d0e:	095b      	lsrs	r3, r3, #5
 8003d10:	2001      	movs	r0, #1
 8003d12:	fa00 f202 	lsl.w	r2, r0, r2
 8003d16:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003d1a:	bf00      	nop
 8003d1c:	370c      	adds	r7, #12
 8003d1e:	46bd      	mov	sp, r7
 8003d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d24:	4770      	bx	lr
 8003d26:	bf00      	nop
 8003d28:	e000e100 	.word	0xe000e100

08003d2c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003d2c:	b480      	push	{r7}
 8003d2e:	b083      	sub	sp, #12
 8003d30:	af00      	add	r7, sp, #0
 8003d32:	4603      	mov	r3, r0
 8003d34:	6039      	str	r1, [r7, #0]
 8003d36:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d3c:	2b00      	cmp	r3, #0
 8003d3e:	db0a      	blt.n	8003d56 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d40:	683b      	ldr	r3, [r7, #0]
 8003d42:	b2da      	uxtb	r2, r3
 8003d44:	490c      	ldr	r1, [pc, #48]	@ (8003d78 <__NVIC_SetPriority+0x4c>)
 8003d46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d4a:	0112      	lsls	r2, r2, #4
 8003d4c:	b2d2      	uxtb	r2, r2
 8003d4e:	440b      	add	r3, r1
 8003d50:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003d54:	e00a      	b.n	8003d6c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003d56:	683b      	ldr	r3, [r7, #0]
 8003d58:	b2da      	uxtb	r2, r3
 8003d5a:	4908      	ldr	r1, [pc, #32]	@ (8003d7c <__NVIC_SetPriority+0x50>)
 8003d5c:	79fb      	ldrb	r3, [r7, #7]
 8003d5e:	f003 030f 	and.w	r3, r3, #15
 8003d62:	3b04      	subs	r3, #4
 8003d64:	0112      	lsls	r2, r2, #4
 8003d66:	b2d2      	uxtb	r2, r2
 8003d68:	440b      	add	r3, r1
 8003d6a:	761a      	strb	r2, [r3, #24]
}
 8003d6c:	bf00      	nop
 8003d6e:	370c      	adds	r7, #12
 8003d70:	46bd      	mov	sp, r7
 8003d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d76:	4770      	bx	lr
 8003d78:	e000e100 	.word	0xe000e100
 8003d7c:	e000ed00 	.word	0xe000ed00

08003d80 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003d80:	b480      	push	{r7}
 8003d82:	b089      	sub	sp, #36	@ 0x24
 8003d84:	af00      	add	r7, sp, #0
 8003d86:	60f8      	str	r0, [r7, #12]
 8003d88:	60b9      	str	r1, [r7, #8]
 8003d8a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	f003 0307 	and.w	r3, r3, #7
 8003d92:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003d94:	69fb      	ldr	r3, [r7, #28]
 8003d96:	f1c3 0307 	rsb	r3, r3, #7
 8003d9a:	2b04      	cmp	r3, #4
 8003d9c:	bf28      	it	cs
 8003d9e:	2304      	movcs	r3, #4
 8003da0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003da2:	69fb      	ldr	r3, [r7, #28]
 8003da4:	3304      	adds	r3, #4
 8003da6:	2b06      	cmp	r3, #6
 8003da8:	d902      	bls.n	8003db0 <NVIC_EncodePriority+0x30>
 8003daa:	69fb      	ldr	r3, [r7, #28]
 8003dac:	3b03      	subs	r3, #3
 8003dae:	e000      	b.n	8003db2 <NVIC_EncodePriority+0x32>
 8003db0:	2300      	movs	r3, #0
 8003db2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003db4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8003db8:	69bb      	ldr	r3, [r7, #24]
 8003dba:	fa02 f303 	lsl.w	r3, r2, r3
 8003dbe:	43da      	mvns	r2, r3
 8003dc0:	68bb      	ldr	r3, [r7, #8]
 8003dc2:	401a      	ands	r2, r3
 8003dc4:	697b      	ldr	r3, [r7, #20]
 8003dc6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003dc8:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8003dcc:	697b      	ldr	r3, [r7, #20]
 8003dce:	fa01 f303 	lsl.w	r3, r1, r3
 8003dd2:	43d9      	mvns	r1, r3
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003dd8:	4313      	orrs	r3, r2
         );
}
 8003dda:	4618      	mov	r0, r3
 8003ddc:	3724      	adds	r7, #36	@ 0x24
 8003dde:	46bd      	mov	sp, r7
 8003de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de4:	4770      	bx	lr

08003de6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003de6:	b580      	push	{r7, lr}
 8003de8:	b082      	sub	sp, #8
 8003dea:	af00      	add	r7, sp, #0
 8003dec:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003dee:	6878      	ldr	r0, [r7, #4]
 8003df0:	f7ff ff4c 	bl	8003c8c <__NVIC_SetPriorityGrouping>
}
 8003df4:	bf00      	nop
 8003df6:	3708      	adds	r7, #8
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	bd80      	pop	{r7, pc}

08003dfc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003dfc:	b580      	push	{r7, lr}
 8003dfe:	b086      	sub	sp, #24
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	4603      	mov	r3, r0
 8003e04:	60b9      	str	r1, [r7, #8]
 8003e06:	607a      	str	r2, [r7, #4]
 8003e08:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003e0a:	2300      	movs	r3, #0
 8003e0c:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003e0e:	f7ff ff61 	bl	8003cd4 <__NVIC_GetPriorityGrouping>
 8003e12:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003e14:	687a      	ldr	r2, [r7, #4]
 8003e16:	68b9      	ldr	r1, [r7, #8]
 8003e18:	6978      	ldr	r0, [r7, #20]
 8003e1a:	f7ff ffb1 	bl	8003d80 <NVIC_EncodePriority>
 8003e1e:	4602      	mov	r2, r0
 8003e20:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003e24:	4611      	mov	r1, r2
 8003e26:	4618      	mov	r0, r3
 8003e28:	f7ff ff80 	bl	8003d2c <__NVIC_SetPriority>
}
 8003e2c:	bf00      	nop
 8003e2e:	3718      	adds	r7, #24
 8003e30:	46bd      	mov	sp, r7
 8003e32:	bd80      	pop	{r7, pc}

08003e34 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b082      	sub	sp, #8
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	4603      	mov	r3, r0
 8003e3c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003e3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e42:	4618      	mov	r0, r3
 8003e44:	f7ff ff54 	bl	8003cf0 <__NVIC_EnableIRQ>
}
 8003e48:	bf00      	nop
 8003e4a:	3708      	adds	r7, #8
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	bd80      	pop	{r7, pc}

08003e50 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	b086      	sub	sp, #24
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003e58:	2300      	movs	r3, #0
 8003e5a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003e5c:	f7ff fee6 	bl	8003c2c <HAL_GetTick>
 8003e60:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d101      	bne.n	8003e6c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003e68:	2301      	movs	r3, #1
 8003e6a:	e099      	b.n	8003fa0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2202      	movs	r2, #2
 8003e70:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2200      	movs	r2, #0
 8003e78:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003e7c:	687b      	ldr	r3, [r7, #4]
 8003e7e:	681b      	ldr	r3, [r3, #0]
 8003e80:	681a      	ldr	r2, [r3, #0]
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f022 0201 	bic.w	r2, r2, #1
 8003e8a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003e8c:	e00f      	b.n	8003eae <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003e8e:	f7ff fecd 	bl	8003c2c <HAL_GetTick>
 8003e92:	4602      	mov	r2, r0
 8003e94:	693b      	ldr	r3, [r7, #16]
 8003e96:	1ad3      	subs	r3, r2, r3
 8003e98:	2b05      	cmp	r3, #5
 8003e9a:	d908      	bls.n	8003eae <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	2220      	movs	r2, #32
 8003ea0:	655a      	str	r2, [r3, #84]	@ 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	2203      	movs	r2, #3
 8003ea6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
      
      return HAL_TIMEOUT;
 8003eaa:	2303      	movs	r3, #3
 8003eac:	e078      	b.n	8003fa0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f003 0301 	and.w	r3, r3, #1
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	d1e8      	bne.n	8003e8e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003ec4:	697a      	ldr	r2, [r7, #20]
 8003ec6:	4b38      	ldr	r3, [pc, #224]	@ (8003fa8 <HAL_DMA_Init+0x158>)
 8003ec8:	4013      	ands	r3, r2
 8003eca:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	685a      	ldr	r2, [r3, #4]
 8003ed0:	687b      	ldr	r3, [r7, #4]
 8003ed2:	689b      	ldr	r3, [r3, #8]
 8003ed4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003eda:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	691b      	ldr	r3, [r3, #16]
 8003ee0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003ee6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	699b      	ldr	r3, [r3, #24]
 8003eec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003ef2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6a1b      	ldr	r3, [r3, #32]
 8003ef8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003efa:	697a      	ldr	r2, [r7, #20]
 8003efc:	4313      	orrs	r3, r2
 8003efe:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f04:	2b04      	cmp	r3, #4
 8003f06:	d107      	bne.n	8003f18 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f10:	4313      	orrs	r3, r2
 8003f12:	697a      	ldr	r2, [r7, #20]
 8003f14:	4313      	orrs	r3, r2
 8003f16:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	697a      	ldr	r2, [r7, #20]
 8003f1e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	695b      	ldr	r3, [r3, #20]
 8003f26:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003f28:	697b      	ldr	r3, [r7, #20]
 8003f2a:	f023 0307 	bic.w	r3, r3, #7
 8003f2e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f34:	697a      	ldr	r2, [r7, #20]
 8003f36:	4313      	orrs	r3, r2
 8003f38:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f3e:	2b04      	cmp	r3, #4
 8003f40:	d117      	bne.n	8003f72 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003f46:	697a      	ldr	r2, [r7, #20]
 8003f48:	4313      	orrs	r3, r2
 8003f4a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d00e      	beq.n	8003f72 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003f54:	6878      	ldr	r0, [r7, #4]
 8003f56:	f000 faab 	bl	80044b0 <DMA_CheckFifoParam>
 8003f5a:	4603      	mov	r3, r0
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	d008      	beq.n	8003f72 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2240      	movs	r2, #64	@ 0x40
 8003f64:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2201      	movs	r2, #1
 8003f6a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        return HAL_ERROR; 
 8003f6e:	2301      	movs	r3, #1
 8003f70:	e016      	b.n	8003fa0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	681b      	ldr	r3, [r3, #0]
 8003f76:	697a      	ldr	r2, [r7, #20]
 8003f78:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003f7a:	6878      	ldr	r0, [r7, #4]
 8003f7c:	f000 fa62 	bl	8004444 <DMA_CalcBaseAndBitshift>
 8003f80:	4603      	mov	r3, r0
 8003f82:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003f88:	223f      	movs	r2, #63	@ 0x3f
 8003f8a:	409a      	lsls	r2, r3
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2200      	movs	r2, #0
 8003f94:	655a      	str	r2, [r3, #84]	@ 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2201      	movs	r2, #1
 8003f9a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

  return HAL_OK;
 8003f9e:	2300      	movs	r3, #0
}
 8003fa0:	4618      	mov	r0, r3
 8003fa2:	3718      	adds	r7, #24
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	bd80      	pop	{r7, pc}
 8003fa8:	f010803f 	.word	0xf010803f

08003fac <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b086      	sub	sp, #24
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	60f8      	str	r0, [r7, #12]
 8003fb4:	60b9      	str	r1, [r7, #8]
 8003fb6:	607a      	str	r2, [r7, #4]
 8003fb8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003fba:	2300      	movs	r3, #0
 8003fbc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8003fc2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	f893 3034 	ldrb.w	r3, [r3, #52]	@ 0x34
 8003fca:	2b01      	cmp	r3, #1
 8003fcc:	d101      	bne.n	8003fd2 <HAL_DMA_Start_IT+0x26>
 8003fce:	2302      	movs	r3, #2
 8003fd0:	e040      	b.n	8004054 <HAL_DMA_Start_IT+0xa8>
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	2201      	movs	r2, #1
 8003fd6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003fe0:	b2db      	uxtb	r3, r3
 8003fe2:	2b01      	cmp	r3, #1
 8003fe4:	d12f      	bne.n	8004046 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	2202      	movs	r2, #2
 8003fea:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	2200      	movs	r2, #0
 8003ff2:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	687a      	ldr	r2, [r7, #4]
 8003ff8:	68b9      	ldr	r1, [r7, #8]
 8003ffa:	68f8      	ldr	r0, [r7, #12]
 8003ffc:	f000 f9f4 	bl	80043e8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004004:	223f      	movs	r2, #63	@ 0x3f
 8004006:	409a      	lsls	r2, r3
 8004008:	693b      	ldr	r3, [r7, #16]
 800400a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800400c:	68fb      	ldr	r3, [r7, #12]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	681a      	ldr	r2, [r3, #0]
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f042 0216 	orr.w	r2, r2, #22
 800401a:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004020:	2b00      	cmp	r3, #0
 8004022:	d007      	beq.n	8004034 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	681a      	ldr	r2, [r3, #0]
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f042 0208 	orr.w	r2, r2, #8
 8004032:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	681a      	ldr	r2, [r3, #0]
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f042 0201 	orr.w	r2, r2, #1
 8004042:	601a      	str	r2, [r3, #0]
 8004044:	e005      	b.n	8004052 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	2200      	movs	r2, #0
 800404a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800404e:	2302      	movs	r3, #2
 8004050:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004052:	7dfb      	ldrb	r3, [r7, #23]
}
 8004054:	4618      	mov	r0, r3
 8004056:	3718      	adds	r7, #24
 8004058:	46bd      	mov	sp, r7
 800405a:	bd80      	pop	{r7, pc}

0800405c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800405c:	b480      	push	{r7}
 800405e:	b083      	sub	sp, #12
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 800406a:	b2db      	uxtb	r3, r3
 800406c:	2b02      	cmp	r3, #2
 800406e:	d004      	beq.n	800407a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2280      	movs	r2, #128	@ 0x80
 8004074:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8004076:	2301      	movs	r3, #1
 8004078:	e00c      	b.n	8004094 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	2205      	movs	r2, #5
 800407e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	681a      	ldr	r2, [r3, #0]
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f022 0201 	bic.w	r2, r2, #1
 8004090:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004092:	2300      	movs	r3, #0
}
 8004094:	4618      	mov	r0, r3
 8004096:	370c      	adds	r7, #12
 8004098:	46bd      	mov	sp, r7
 800409a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800409e:	4770      	bx	lr

080040a0 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 80040a0:	b580      	push	{r7, lr}
 80040a2:	b086      	sub	sp, #24
 80040a4:	af00      	add	r7, sp, #0
 80040a6:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80040a8:	2300      	movs	r3, #0
 80040aa:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80040ac:	4b8e      	ldr	r3, [pc, #568]	@ (80042e8 <HAL_DMA_IRQHandler+0x248>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4a8e      	ldr	r2, [pc, #568]	@ (80042ec <HAL_DMA_IRQHandler+0x24c>)
 80040b2:	fba2 2303 	umull	r2, r3, r2, r3
 80040b6:	0a9b      	lsrs	r3, r3, #10
 80040b8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80040be:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80040c0:	693b      	ldr	r3, [r7, #16]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040ca:	2208      	movs	r2, #8
 80040cc:	409a      	lsls	r2, r3
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	4013      	ands	r3, r2
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d01a      	beq.n	800410c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f003 0304 	and.w	r3, r3, #4
 80040e0:	2b00      	cmp	r3, #0
 80040e2:	d013      	beq.n	800410c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	681a      	ldr	r2, [r3, #0]
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f022 0204 	bic.w	r2, r2, #4
 80040f2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80040f8:	2208      	movs	r2, #8
 80040fa:	409a      	lsls	r2, r3
 80040fc:	693b      	ldr	r3, [r7, #16]
 80040fe:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004104:	f043 0201 	orr.w	r2, r3, #1
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004110:	2201      	movs	r2, #1
 8004112:	409a      	lsls	r2, r3
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	4013      	ands	r3, r2
 8004118:	2b00      	cmp	r3, #0
 800411a:	d012      	beq.n	8004142 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	695b      	ldr	r3, [r3, #20]
 8004122:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004126:	2b00      	cmp	r3, #0
 8004128:	d00b      	beq.n	8004142 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800412e:	2201      	movs	r2, #1
 8004130:	409a      	lsls	r2, r3
 8004132:	693b      	ldr	r3, [r7, #16]
 8004134:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800413a:	f043 0202 	orr.w	r2, r3, #2
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004146:	2204      	movs	r2, #4
 8004148:	409a      	lsls	r2, r3
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	4013      	ands	r3, r2
 800414e:	2b00      	cmp	r3, #0
 8004150:	d012      	beq.n	8004178 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f003 0302 	and.w	r3, r3, #2
 800415c:	2b00      	cmp	r3, #0
 800415e:	d00b      	beq.n	8004178 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004164:	2204      	movs	r2, #4
 8004166:	409a      	lsls	r2, r3
 8004168:	693b      	ldr	r3, [r7, #16]
 800416a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004170:	f043 0204 	orr.w	r2, r3, #4
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	655a      	str	r2, [r3, #84]	@ 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800417c:	2210      	movs	r2, #16
 800417e:	409a      	lsls	r2, r3
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	4013      	ands	r3, r2
 8004184:	2b00      	cmp	r3, #0
 8004186:	d043      	beq.n	8004210 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	f003 0308 	and.w	r3, r3, #8
 8004192:	2b00      	cmp	r3, #0
 8004194:	d03c      	beq.n	8004210 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800419a:	2210      	movs	r2, #16
 800419c:	409a      	lsls	r2, r3
 800419e:	693b      	ldr	r3, [r7, #16]
 80041a0:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d018      	beq.n	80041e2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d108      	bne.n	80041d0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d024      	beq.n	8004210 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041ca:	6878      	ldr	r0, [r7, #4]
 80041cc:	4798      	blx	r3
 80041ce:	e01f      	b.n	8004210 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d01b      	beq.n	8004210 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80041dc:	6878      	ldr	r0, [r7, #4]
 80041de:	4798      	blx	r3
 80041e0:	e016      	b.n	8004210 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041ec:	2b00      	cmp	r3, #0
 80041ee:	d107      	bne.n	8004200 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	681a      	ldr	r2, [r3, #0]
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f022 0208 	bic.w	r2, r2, #8
 80041fe:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004204:	2b00      	cmp	r3, #0
 8004206:	d003      	beq.n	8004210 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800420c:	6878      	ldr	r0, [r7, #4]
 800420e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004214:	2220      	movs	r2, #32
 8004216:	409a      	lsls	r2, r3
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	4013      	ands	r3, r2
 800421c:	2b00      	cmp	r3, #0
 800421e:	f000 808f 	beq.w	8004340 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	f003 0310 	and.w	r3, r3, #16
 800422c:	2b00      	cmp	r3, #0
 800422e:	f000 8087 	beq.w	8004340 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8004236:	2220      	movs	r2, #32
 8004238:	409a      	lsls	r2, r3
 800423a:	693b      	ldr	r3, [r7, #16]
 800423c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8004244:	b2db      	uxtb	r3, r3
 8004246:	2b05      	cmp	r3, #5
 8004248:	d136      	bne.n	80042b8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	681a      	ldr	r2, [r3, #0]
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	f022 0216 	bic.w	r2, r2, #22
 8004258:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	695a      	ldr	r2, [r3, #20]
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004268:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800426e:	2b00      	cmp	r3, #0
 8004270:	d103      	bne.n	800427a <HAL_DMA_IRQHandler+0x1da>
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004276:	2b00      	cmp	r3, #0
 8004278:	d007      	beq.n	800428a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	681a      	ldr	r2, [r3, #0]
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	f022 0208 	bic.w	r2, r2, #8
 8004288:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800428e:	223f      	movs	r2, #63	@ 0x3f
 8004290:	409a      	lsls	r2, r3
 8004292:	693b      	ldr	r3, [r7, #16]
 8004294:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2201      	movs	r2, #1
 800429a:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	2200      	movs	r2, #0
 80042a2:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34

        if(hdma->XferAbortCallback != NULL)
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d07e      	beq.n	80043ac <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80042b2:	6878      	ldr	r0, [r7, #4]
 80042b4:	4798      	blx	r3
        }
        return;
 80042b6:	e079      	b.n	80043ac <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d01d      	beq.n	8004302 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d10d      	bne.n	80042f0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d031      	beq.n	8004340 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80042e0:	6878      	ldr	r0, [r7, #4]
 80042e2:	4798      	blx	r3
 80042e4:	e02c      	b.n	8004340 <HAL_DMA_IRQHandler+0x2a0>
 80042e6:	bf00      	nop
 80042e8:	2000000c 	.word	0x2000000c
 80042ec:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d023      	beq.n	8004340 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80042fc:	6878      	ldr	r0, [r7, #4]
 80042fe:	4798      	blx	r3
 8004300:	e01e      	b.n	8004340 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800430c:	2b00      	cmp	r3, #0
 800430e:	d10f      	bne.n	8004330 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	681a      	ldr	r2, [r3, #0]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	f022 0210 	bic.w	r2, r2, #16
 800431e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	2201      	movs	r2, #1
 8004324:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2200      	movs	r2, #0
 800432c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004334:	2b00      	cmp	r3, #0
 8004336:	d003      	beq.n	8004340 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800433c:	6878      	ldr	r0, [r7, #4]
 800433e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004344:	2b00      	cmp	r3, #0
 8004346:	d032      	beq.n	80043ae <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800434c:	f003 0301 	and.w	r3, r3, #1
 8004350:	2b00      	cmp	r3, #0
 8004352:	d022      	beq.n	800439a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2205      	movs	r2, #5
 8004358:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	681a      	ldr	r2, [r3, #0]
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	f022 0201 	bic.w	r2, r2, #1
 800436a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800436c:	68bb      	ldr	r3, [r7, #8]
 800436e:	3301      	adds	r3, #1
 8004370:	60bb      	str	r3, [r7, #8]
 8004372:	697a      	ldr	r2, [r7, #20]
 8004374:	429a      	cmp	r2, r3
 8004376:	d307      	bcc.n	8004388 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	f003 0301 	and.w	r3, r3, #1
 8004382:	2b00      	cmp	r3, #0
 8004384:	d1f2      	bne.n	800436c <HAL_DMA_IRQHandler+0x2cc>
 8004386:	e000      	b.n	800438a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004388:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	2201      	movs	r2, #1
 800438e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	2200      	movs	r2, #0
 8004396:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800439e:	2b00      	cmp	r3, #0
 80043a0:	d005      	beq.n	80043ae <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80043a6:	6878      	ldr	r0, [r7, #4]
 80043a8:	4798      	blx	r3
 80043aa:	e000      	b.n	80043ae <HAL_DMA_IRQHandler+0x30e>
        return;
 80043ac:	bf00      	nop
    }
  }
}
 80043ae:	3718      	adds	r7, #24
 80043b0:	46bd      	mov	sp, r7
 80043b2:	bd80      	pop	{r7, pc}

080043b4 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80043b4:	b480      	push	{r7}
 80043b6:	b083      	sub	sp, #12
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80043c2:	b2db      	uxtb	r3, r3
}
 80043c4:	4618      	mov	r0, r3
 80043c6:	370c      	adds	r7, #12
 80043c8:	46bd      	mov	sp, r7
 80043ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ce:	4770      	bx	lr

080043d0 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 80043d0:	b480      	push	{r7}
 80043d2:	b083      	sub	sp, #12
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 80043dc:	4618      	mov	r0, r3
 80043de:	370c      	adds	r7, #12
 80043e0:	46bd      	mov	sp, r7
 80043e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e6:	4770      	bx	lr

080043e8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80043e8:	b480      	push	{r7}
 80043ea:	b085      	sub	sp, #20
 80043ec:	af00      	add	r7, sp, #0
 80043ee:	60f8      	str	r0, [r7, #12]
 80043f0:	60b9      	str	r1, [r7, #8]
 80043f2:	607a      	str	r2, [r7, #4]
 80043f4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	681a      	ldr	r2, [r3, #0]
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8004404:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	683a      	ldr	r2, [r7, #0]
 800440c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	689b      	ldr	r3, [r3, #8]
 8004412:	2b40      	cmp	r3, #64	@ 0x40
 8004414:	d108      	bne.n	8004428 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	687a      	ldr	r2, [r7, #4]
 800441c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	68ba      	ldr	r2, [r7, #8]
 8004424:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004426:	e007      	b.n	8004438 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	68ba      	ldr	r2, [r7, #8]
 800442e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	681b      	ldr	r3, [r3, #0]
 8004434:	687a      	ldr	r2, [r7, #4]
 8004436:	60da      	str	r2, [r3, #12]
}
 8004438:	bf00      	nop
 800443a:	3714      	adds	r7, #20
 800443c:	46bd      	mov	sp, r7
 800443e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004442:	4770      	bx	lr

08004444 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004444:	b480      	push	{r7}
 8004446:	b085      	sub	sp, #20
 8004448:	af00      	add	r7, sp, #0
 800444a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	b2db      	uxtb	r3, r3
 8004452:	3b10      	subs	r3, #16
 8004454:	4a14      	ldr	r2, [pc, #80]	@ (80044a8 <DMA_CalcBaseAndBitshift+0x64>)
 8004456:	fba2 2303 	umull	r2, r3, r2, r3
 800445a:	091b      	lsrs	r3, r3, #4
 800445c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800445e:	4a13      	ldr	r2, [pc, #76]	@ (80044ac <DMA_CalcBaseAndBitshift+0x68>)
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	4413      	add	r3, r2
 8004464:	781b      	ldrb	r3, [r3, #0]
 8004466:	461a      	mov	r2, r3
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	65da      	str	r2, [r3, #92]	@ 0x5c
  
  if (stream_number > 3U)
 800446c:	68fb      	ldr	r3, [r7, #12]
 800446e:	2b03      	cmp	r3, #3
 8004470:	d909      	bls.n	8004486 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	681b      	ldr	r3, [r3, #0]
 8004476:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800447a:	f023 0303 	bic.w	r3, r3, #3
 800447e:	1d1a      	adds	r2, r3, #4
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	659a      	str	r2, [r3, #88]	@ 0x58
 8004484:	e007      	b.n	8004496 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f423 737f 	bic.w	r3, r3, #1020	@ 0x3fc
 800448e:	f023 0303 	bic.w	r3, r3, #3
 8004492:	687a      	ldr	r2, [r7, #4]
 8004494:	6593      	str	r3, [r2, #88]	@ 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
}
 800449a:	4618      	mov	r0, r3
 800449c:	3714      	adds	r7, #20
 800449e:	46bd      	mov	sp, r7
 80044a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a4:	4770      	bx	lr
 80044a6:	bf00      	nop
 80044a8:	aaaaaaab 	.word	0xaaaaaaab
 80044ac:	08010dc4 	.word	0x08010dc4

080044b0 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80044b0:	b480      	push	{r7}
 80044b2:	b085      	sub	sp, #20
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80044b8:	2300      	movs	r3, #0
 80044ba:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80044c0:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	699b      	ldr	r3, [r3, #24]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	d11f      	bne.n	800450a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80044ca:	68bb      	ldr	r3, [r7, #8]
 80044cc:	2b03      	cmp	r3, #3
 80044ce:	d856      	bhi.n	800457e <DMA_CheckFifoParam+0xce>
 80044d0:	a201      	add	r2, pc, #4	@ (adr r2, 80044d8 <DMA_CheckFifoParam+0x28>)
 80044d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044d6:	bf00      	nop
 80044d8:	080044e9 	.word	0x080044e9
 80044dc:	080044fb 	.word	0x080044fb
 80044e0:	080044e9 	.word	0x080044e9
 80044e4:	0800457f 	.word	0x0800457f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044ec:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d046      	beq.n	8004582 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80044f4:	2301      	movs	r3, #1
 80044f6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80044f8:	e043      	b.n	8004582 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80044fe:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004502:	d140      	bne.n	8004586 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004504:	2301      	movs	r3, #1
 8004506:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004508:	e03d      	b.n	8004586 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	699b      	ldr	r3, [r3, #24]
 800450e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004512:	d121      	bne.n	8004558 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004514:	68bb      	ldr	r3, [r7, #8]
 8004516:	2b03      	cmp	r3, #3
 8004518:	d837      	bhi.n	800458a <DMA_CheckFifoParam+0xda>
 800451a:	a201      	add	r2, pc, #4	@ (adr r2, 8004520 <DMA_CheckFifoParam+0x70>)
 800451c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004520:	08004531 	.word	0x08004531
 8004524:	08004537 	.word	0x08004537
 8004528:	08004531 	.word	0x08004531
 800452c:	08004549 	.word	0x08004549
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004530:	2301      	movs	r3, #1
 8004532:	73fb      	strb	r3, [r7, #15]
      break;
 8004534:	e030      	b.n	8004598 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800453a:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800453e:	2b00      	cmp	r3, #0
 8004540:	d025      	beq.n	800458e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004542:	2301      	movs	r3, #1
 8004544:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004546:	e022      	b.n	800458e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800454c:	f1b3 7fc0 	cmp.w	r3, #25165824	@ 0x1800000
 8004550:	d11f      	bne.n	8004592 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004552:	2301      	movs	r3, #1
 8004554:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004556:	e01c      	b.n	8004592 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004558:	68bb      	ldr	r3, [r7, #8]
 800455a:	2b02      	cmp	r3, #2
 800455c:	d903      	bls.n	8004566 <DMA_CheckFifoParam+0xb6>
 800455e:	68bb      	ldr	r3, [r7, #8]
 8004560:	2b03      	cmp	r3, #3
 8004562:	d003      	beq.n	800456c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004564:	e018      	b.n	8004598 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004566:	2301      	movs	r3, #1
 8004568:	73fb      	strb	r3, [r7, #15]
      break;
 800456a:	e015      	b.n	8004598 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004570:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8004574:	2b00      	cmp	r3, #0
 8004576:	d00e      	beq.n	8004596 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004578:	2301      	movs	r3, #1
 800457a:	73fb      	strb	r3, [r7, #15]
      break;
 800457c:	e00b      	b.n	8004596 <DMA_CheckFifoParam+0xe6>
      break;
 800457e:	bf00      	nop
 8004580:	e00a      	b.n	8004598 <DMA_CheckFifoParam+0xe8>
      break;
 8004582:	bf00      	nop
 8004584:	e008      	b.n	8004598 <DMA_CheckFifoParam+0xe8>
      break;
 8004586:	bf00      	nop
 8004588:	e006      	b.n	8004598 <DMA_CheckFifoParam+0xe8>
      break;
 800458a:	bf00      	nop
 800458c:	e004      	b.n	8004598 <DMA_CheckFifoParam+0xe8>
      break;
 800458e:	bf00      	nop
 8004590:	e002      	b.n	8004598 <DMA_CheckFifoParam+0xe8>
      break;   
 8004592:	bf00      	nop
 8004594:	e000      	b.n	8004598 <DMA_CheckFifoParam+0xe8>
      break;
 8004596:	bf00      	nop
    }
  } 
  
  return status; 
 8004598:	7bfb      	ldrb	r3, [r7, #15]
}
 800459a:	4618      	mov	r0, r3
 800459c:	3714      	adds	r7, #20
 800459e:	46bd      	mov	sp, r7
 80045a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a4:	4770      	bx	lr
 80045a6:	bf00      	nop

080045a8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80045a8:	b480      	push	{r7}
 80045aa:	b089      	sub	sp, #36	@ 0x24
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	6078      	str	r0, [r7, #4]
 80045b0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80045b2:	2300      	movs	r3, #0
 80045b4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80045b6:	2300      	movs	r3, #0
 80045b8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80045ba:	2300      	movs	r3, #0
 80045bc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80045be:	2300      	movs	r3, #0
 80045c0:	61fb      	str	r3, [r7, #28]
 80045c2:	e16b      	b.n	800489c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80045c4:	2201      	movs	r2, #1
 80045c6:	69fb      	ldr	r3, [r7, #28]
 80045c8:	fa02 f303 	lsl.w	r3, r2, r3
 80045cc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80045ce:	683b      	ldr	r3, [r7, #0]
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	697a      	ldr	r2, [r7, #20]
 80045d4:	4013      	ands	r3, r2
 80045d6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80045d8:	693a      	ldr	r2, [r7, #16]
 80045da:	697b      	ldr	r3, [r7, #20]
 80045dc:	429a      	cmp	r2, r3
 80045de:	f040 815a 	bne.w	8004896 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	685b      	ldr	r3, [r3, #4]
 80045e6:	f003 0303 	and.w	r3, r3, #3
 80045ea:	2b01      	cmp	r3, #1
 80045ec:	d005      	beq.n	80045fa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	685b      	ldr	r3, [r3, #4]
 80045f2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80045f6:	2b02      	cmp	r3, #2
 80045f8:	d130      	bne.n	800465c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	689b      	ldr	r3, [r3, #8]
 80045fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004600:	69fb      	ldr	r3, [r7, #28]
 8004602:	005b      	lsls	r3, r3, #1
 8004604:	2203      	movs	r2, #3
 8004606:	fa02 f303 	lsl.w	r3, r2, r3
 800460a:	43db      	mvns	r3, r3
 800460c:	69ba      	ldr	r2, [r7, #24]
 800460e:	4013      	ands	r3, r2
 8004610:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	68da      	ldr	r2, [r3, #12]
 8004616:	69fb      	ldr	r3, [r7, #28]
 8004618:	005b      	lsls	r3, r3, #1
 800461a:	fa02 f303 	lsl.w	r3, r2, r3
 800461e:	69ba      	ldr	r2, [r7, #24]
 8004620:	4313      	orrs	r3, r2
 8004622:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	69ba      	ldr	r2, [r7, #24]
 8004628:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	685b      	ldr	r3, [r3, #4]
 800462e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004630:	2201      	movs	r2, #1
 8004632:	69fb      	ldr	r3, [r7, #28]
 8004634:	fa02 f303 	lsl.w	r3, r2, r3
 8004638:	43db      	mvns	r3, r3
 800463a:	69ba      	ldr	r2, [r7, #24]
 800463c:	4013      	ands	r3, r2
 800463e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	091b      	lsrs	r3, r3, #4
 8004646:	f003 0201 	and.w	r2, r3, #1
 800464a:	69fb      	ldr	r3, [r7, #28]
 800464c:	fa02 f303 	lsl.w	r3, r2, r3
 8004650:	69ba      	ldr	r2, [r7, #24]
 8004652:	4313      	orrs	r3, r2
 8004654:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	69ba      	ldr	r2, [r7, #24]
 800465a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	685b      	ldr	r3, [r3, #4]
 8004660:	f003 0303 	and.w	r3, r3, #3
 8004664:	2b03      	cmp	r3, #3
 8004666:	d017      	beq.n	8004698 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	68db      	ldr	r3, [r3, #12]
 800466c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800466e:	69fb      	ldr	r3, [r7, #28]
 8004670:	005b      	lsls	r3, r3, #1
 8004672:	2203      	movs	r2, #3
 8004674:	fa02 f303 	lsl.w	r3, r2, r3
 8004678:	43db      	mvns	r3, r3
 800467a:	69ba      	ldr	r2, [r7, #24]
 800467c:	4013      	ands	r3, r2
 800467e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004680:	683b      	ldr	r3, [r7, #0]
 8004682:	689a      	ldr	r2, [r3, #8]
 8004684:	69fb      	ldr	r3, [r7, #28]
 8004686:	005b      	lsls	r3, r3, #1
 8004688:	fa02 f303 	lsl.w	r3, r2, r3
 800468c:	69ba      	ldr	r2, [r7, #24]
 800468e:	4313      	orrs	r3, r2
 8004690:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	69ba      	ldr	r2, [r7, #24]
 8004696:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	685b      	ldr	r3, [r3, #4]
 800469c:	f003 0303 	and.w	r3, r3, #3
 80046a0:	2b02      	cmp	r3, #2
 80046a2:	d123      	bne.n	80046ec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80046a4:	69fb      	ldr	r3, [r7, #28]
 80046a6:	08da      	lsrs	r2, r3, #3
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	3208      	adds	r2, #8
 80046ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80046b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80046b2:	69fb      	ldr	r3, [r7, #28]
 80046b4:	f003 0307 	and.w	r3, r3, #7
 80046b8:	009b      	lsls	r3, r3, #2
 80046ba:	220f      	movs	r2, #15
 80046bc:	fa02 f303 	lsl.w	r3, r2, r3
 80046c0:	43db      	mvns	r3, r3
 80046c2:	69ba      	ldr	r2, [r7, #24]
 80046c4:	4013      	ands	r3, r2
 80046c6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80046c8:	683b      	ldr	r3, [r7, #0]
 80046ca:	691a      	ldr	r2, [r3, #16]
 80046cc:	69fb      	ldr	r3, [r7, #28]
 80046ce:	f003 0307 	and.w	r3, r3, #7
 80046d2:	009b      	lsls	r3, r3, #2
 80046d4:	fa02 f303 	lsl.w	r3, r2, r3
 80046d8:	69ba      	ldr	r2, [r7, #24]
 80046da:	4313      	orrs	r3, r2
 80046dc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80046de:	69fb      	ldr	r3, [r7, #28]
 80046e0:	08da      	lsrs	r2, r3, #3
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	3208      	adds	r2, #8
 80046e6:	69b9      	ldr	r1, [r7, #24]
 80046e8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80046f2:	69fb      	ldr	r3, [r7, #28]
 80046f4:	005b      	lsls	r3, r3, #1
 80046f6:	2203      	movs	r2, #3
 80046f8:	fa02 f303 	lsl.w	r3, r2, r3
 80046fc:	43db      	mvns	r3, r3
 80046fe:	69ba      	ldr	r2, [r7, #24]
 8004700:	4013      	ands	r3, r2
 8004702:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	685b      	ldr	r3, [r3, #4]
 8004708:	f003 0203 	and.w	r2, r3, #3
 800470c:	69fb      	ldr	r3, [r7, #28]
 800470e:	005b      	lsls	r3, r3, #1
 8004710:	fa02 f303 	lsl.w	r3, r2, r3
 8004714:	69ba      	ldr	r2, [r7, #24]
 8004716:	4313      	orrs	r3, r2
 8004718:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800471a:	687b      	ldr	r3, [r7, #4]
 800471c:	69ba      	ldr	r2, [r7, #24]
 800471e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	685b      	ldr	r3, [r3, #4]
 8004724:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004728:	2b00      	cmp	r3, #0
 800472a:	f000 80b4 	beq.w	8004896 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800472e:	2300      	movs	r3, #0
 8004730:	60fb      	str	r3, [r7, #12]
 8004732:	4b60      	ldr	r3, [pc, #384]	@ (80048b4 <HAL_GPIO_Init+0x30c>)
 8004734:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004736:	4a5f      	ldr	r2, [pc, #380]	@ (80048b4 <HAL_GPIO_Init+0x30c>)
 8004738:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800473c:	6453      	str	r3, [r2, #68]	@ 0x44
 800473e:	4b5d      	ldr	r3, [pc, #372]	@ (80048b4 <HAL_GPIO_Init+0x30c>)
 8004740:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004742:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004746:	60fb      	str	r3, [r7, #12]
 8004748:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800474a:	4a5b      	ldr	r2, [pc, #364]	@ (80048b8 <HAL_GPIO_Init+0x310>)
 800474c:	69fb      	ldr	r3, [r7, #28]
 800474e:	089b      	lsrs	r3, r3, #2
 8004750:	3302      	adds	r3, #2
 8004752:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004756:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004758:	69fb      	ldr	r3, [r7, #28]
 800475a:	f003 0303 	and.w	r3, r3, #3
 800475e:	009b      	lsls	r3, r3, #2
 8004760:	220f      	movs	r2, #15
 8004762:	fa02 f303 	lsl.w	r3, r2, r3
 8004766:	43db      	mvns	r3, r3
 8004768:	69ba      	ldr	r2, [r7, #24]
 800476a:	4013      	ands	r3, r2
 800476c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	4a52      	ldr	r2, [pc, #328]	@ (80048bc <HAL_GPIO_Init+0x314>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d02b      	beq.n	80047ce <HAL_GPIO_Init+0x226>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	4a51      	ldr	r2, [pc, #324]	@ (80048c0 <HAL_GPIO_Init+0x318>)
 800477a:	4293      	cmp	r3, r2
 800477c:	d025      	beq.n	80047ca <HAL_GPIO_Init+0x222>
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	4a50      	ldr	r2, [pc, #320]	@ (80048c4 <HAL_GPIO_Init+0x31c>)
 8004782:	4293      	cmp	r3, r2
 8004784:	d01f      	beq.n	80047c6 <HAL_GPIO_Init+0x21e>
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	4a4f      	ldr	r2, [pc, #316]	@ (80048c8 <HAL_GPIO_Init+0x320>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d019      	beq.n	80047c2 <HAL_GPIO_Init+0x21a>
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	4a4e      	ldr	r2, [pc, #312]	@ (80048cc <HAL_GPIO_Init+0x324>)
 8004792:	4293      	cmp	r3, r2
 8004794:	d013      	beq.n	80047be <HAL_GPIO_Init+0x216>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	4a4d      	ldr	r2, [pc, #308]	@ (80048d0 <HAL_GPIO_Init+0x328>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d00d      	beq.n	80047ba <HAL_GPIO_Init+0x212>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	4a4c      	ldr	r2, [pc, #304]	@ (80048d4 <HAL_GPIO_Init+0x32c>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d007      	beq.n	80047b6 <HAL_GPIO_Init+0x20e>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	4a4b      	ldr	r2, [pc, #300]	@ (80048d8 <HAL_GPIO_Init+0x330>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d101      	bne.n	80047b2 <HAL_GPIO_Init+0x20a>
 80047ae:	2307      	movs	r3, #7
 80047b0:	e00e      	b.n	80047d0 <HAL_GPIO_Init+0x228>
 80047b2:	2308      	movs	r3, #8
 80047b4:	e00c      	b.n	80047d0 <HAL_GPIO_Init+0x228>
 80047b6:	2306      	movs	r3, #6
 80047b8:	e00a      	b.n	80047d0 <HAL_GPIO_Init+0x228>
 80047ba:	2305      	movs	r3, #5
 80047bc:	e008      	b.n	80047d0 <HAL_GPIO_Init+0x228>
 80047be:	2304      	movs	r3, #4
 80047c0:	e006      	b.n	80047d0 <HAL_GPIO_Init+0x228>
 80047c2:	2303      	movs	r3, #3
 80047c4:	e004      	b.n	80047d0 <HAL_GPIO_Init+0x228>
 80047c6:	2302      	movs	r3, #2
 80047c8:	e002      	b.n	80047d0 <HAL_GPIO_Init+0x228>
 80047ca:	2301      	movs	r3, #1
 80047cc:	e000      	b.n	80047d0 <HAL_GPIO_Init+0x228>
 80047ce:	2300      	movs	r3, #0
 80047d0:	69fa      	ldr	r2, [r7, #28]
 80047d2:	f002 0203 	and.w	r2, r2, #3
 80047d6:	0092      	lsls	r2, r2, #2
 80047d8:	4093      	lsls	r3, r2
 80047da:	69ba      	ldr	r2, [r7, #24]
 80047dc:	4313      	orrs	r3, r2
 80047de:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80047e0:	4935      	ldr	r1, [pc, #212]	@ (80048b8 <HAL_GPIO_Init+0x310>)
 80047e2:	69fb      	ldr	r3, [r7, #28]
 80047e4:	089b      	lsrs	r3, r3, #2
 80047e6:	3302      	adds	r3, #2
 80047e8:	69ba      	ldr	r2, [r7, #24]
 80047ea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80047ee:	4b3b      	ldr	r3, [pc, #236]	@ (80048dc <HAL_GPIO_Init+0x334>)
 80047f0:	689b      	ldr	r3, [r3, #8]
 80047f2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80047f4:	693b      	ldr	r3, [r7, #16]
 80047f6:	43db      	mvns	r3, r3
 80047f8:	69ba      	ldr	r2, [r7, #24]
 80047fa:	4013      	ands	r3, r2
 80047fc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	685b      	ldr	r3, [r3, #4]
 8004802:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004806:	2b00      	cmp	r3, #0
 8004808:	d003      	beq.n	8004812 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800480a:	69ba      	ldr	r2, [r7, #24]
 800480c:	693b      	ldr	r3, [r7, #16]
 800480e:	4313      	orrs	r3, r2
 8004810:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004812:	4a32      	ldr	r2, [pc, #200]	@ (80048dc <HAL_GPIO_Init+0x334>)
 8004814:	69bb      	ldr	r3, [r7, #24]
 8004816:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004818:	4b30      	ldr	r3, [pc, #192]	@ (80048dc <HAL_GPIO_Init+0x334>)
 800481a:	68db      	ldr	r3, [r3, #12]
 800481c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800481e:	693b      	ldr	r3, [r7, #16]
 8004820:	43db      	mvns	r3, r3
 8004822:	69ba      	ldr	r2, [r7, #24]
 8004824:	4013      	ands	r3, r2
 8004826:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004830:	2b00      	cmp	r3, #0
 8004832:	d003      	beq.n	800483c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004834:	69ba      	ldr	r2, [r7, #24]
 8004836:	693b      	ldr	r3, [r7, #16]
 8004838:	4313      	orrs	r3, r2
 800483a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800483c:	4a27      	ldr	r2, [pc, #156]	@ (80048dc <HAL_GPIO_Init+0x334>)
 800483e:	69bb      	ldr	r3, [r7, #24]
 8004840:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004842:	4b26      	ldr	r3, [pc, #152]	@ (80048dc <HAL_GPIO_Init+0x334>)
 8004844:	685b      	ldr	r3, [r3, #4]
 8004846:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004848:	693b      	ldr	r3, [r7, #16]
 800484a:	43db      	mvns	r3, r3
 800484c:	69ba      	ldr	r2, [r7, #24]
 800484e:	4013      	ands	r3, r2
 8004850:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004852:	683b      	ldr	r3, [r7, #0]
 8004854:	685b      	ldr	r3, [r3, #4]
 8004856:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800485a:	2b00      	cmp	r3, #0
 800485c:	d003      	beq.n	8004866 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800485e:	69ba      	ldr	r2, [r7, #24]
 8004860:	693b      	ldr	r3, [r7, #16]
 8004862:	4313      	orrs	r3, r2
 8004864:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004866:	4a1d      	ldr	r2, [pc, #116]	@ (80048dc <HAL_GPIO_Init+0x334>)
 8004868:	69bb      	ldr	r3, [r7, #24]
 800486a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800486c:	4b1b      	ldr	r3, [pc, #108]	@ (80048dc <HAL_GPIO_Init+0x334>)
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004872:	693b      	ldr	r3, [r7, #16]
 8004874:	43db      	mvns	r3, r3
 8004876:	69ba      	ldr	r2, [r7, #24]
 8004878:	4013      	ands	r3, r2
 800487a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	685b      	ldr	r3, [r3, #4]
 8004880:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004884:	2b00      	cmp	r3, #0
 8004886:	d003      	beq.n	8004890 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004888:	69ba      	ldr	r2, [r7, #24]
 800488a:	693b      	ldr	r3, [r7, #16]
 800488c:	4313      	orrs	r3, r2
 800488e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004890:	4a12      	ldr	r2, [pc, #72]	@ (80048dc <HAL_GPIO_Init+0x334>)
 8004892:	69bb      	ldr	r3, [r7, #24]
 8004894:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004896:	69fb      	ldr	r3, [r7, #28]
 8004898:	3301      	adds	r3, #1
 800489a:	61fb      	str	r3, [r7, #28]
 800489c:	69fb      	ldr	r3, [r7, #28]
 800489e:	2b0f      	cmp	r3, #15
 80048a0:	f67f ae90 	bls.w	80045c4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80048a4:	bf00      	nop
 80048a6:	bf00      	nop
 80048a8:	3724      	adds	r7, #36	@ 0x24
 80048aa:	46bd      	mov	sp, r7
 80048ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b0:	4770      	bx	lr
 80048b2:	bf00      	nop
 80048b4:	40023800 	.word	0x40023800
 80048b8:	40013800 	.word	0x40013800
 80048bc:	40020000 	.word	0x40020000
 80048c0:	40020400 	.word	0x40020400
 80048c4:	40020800 	.word	0x40020800
 80048c8:	40020c00 	.word	0x40020c00
 80048cc:	40021000 	.word	0x40021000
 80048d0:	40021400 	.word	0x40021400
 80048d4:	40021800 	.word	0x40021800
 80048d8:	40021c00 	.word	0x40021c00
 80048dc:	40013c00 	.word	0x40013c00

080048e0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80048e0:	b480      	push	{r7}
 80048e2:	b085      	sub	sp, #20
 80048e4:	af00      	add	r7, sp, #0
 80048e6:	6078      	str	r0, [r7, #4]
 80048e8:	460b      	mov	r3, r1
 80048ea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	691a      	ldr	r2, [r3, #16]
 80048f0:	887b      	ldrh	r3, [r7, #2]
 80048f2:	4013      	ands	r3, r2
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d002      	beq.n	80048fe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80048f8:	2301      	movs	r3, #1
 80048fa:	73fb      	strb	r3, [r7, #15]
 80048fc:	e001      	b.n	8004902 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80048fe:	2300      	movs	r3, #0
 8004900:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004902:	7bfb      	ldrb	r3, [r7, #15]
}
 8004904:	4618      	mov	r0, r3
 8004906:	3714      	adds	r7, #20
 8004908:	46bd      	mov	sp, r7
 800490a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800490e:	4770      	bx	lr

08004910 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004910:	b480      	push	{r7}
 8004912:	b083      	sub	sp, #12
 8004914:	af00      	add	r7, sp, #0
 8004916:	6078      	str	r0, [r7, #4]
 8004918:	460b      	mov	r3, r1
 800491a:	807b      	strh	r3, [r7, #2]
 800491c:	4613      	mov	r3, r2
 800491e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004920:	787b      	ldrb	r3, [r7, #1]
 8004922:	2b00      	cmp	r3, #0
 8004924:	d003      	beq.n	800492e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004926:	887a      	ldrh	r2, [r7, #2]
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800492c:	e003      	b.n	8004936 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800492e:	887b      	ldrh	r3, [r7, #2]
 8004930:	041a      	lsls	r2, r3, #16
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	619a      	str	r2, [r3, #24]
}
 8004936:	bf00      	nop
 8004938:	370c      	adds	r7, #12
 800493a:	46bd      	mov	sp, r7
 800493c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004940:	4770      	bx	lr

08004942 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004942:	b480      	push	{r7}
 8004944:	b085      	sub	sp, #20
 8004946:	af00      	add	r7, sp, #0
 8004948:	6078      	str	r0, [r7, #4]
 800494a:	460b      	mov	r3, r1
 800494c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	695b      	ldr	r3, [r3, #20]
 8004952:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004954:	887a      	ldrh	r2, [r7, #2]
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	4013      	ands	r3, r2
 800495a:	041a      	lsls	r2, r3, #16
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	43d9      	mvns	r1, r3
 8004960:	887b      	ldrh	r3, [r7, #2]
 8004962:	400b      	ands	r3, r1
 8004964:	431a      	orrs	r2, r3
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	619a      	str	r2, [r3, #24]
}
 800496a:	bf00      	nop
 800496c:	3714      	adds	r7, #20
 800496e:	46bd      	mov	sp, r7
 8004970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004974:	4770      	bx	lr
	...

08004978 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b084      	sub	sp, #16
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2b00      	cmp	r3, #0
 8004984:	d101      	bne.n	800498a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004986:	2301      	movs	r3, #1
 8004988:	e12b      	b.n	8004be2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004990:	b2db      	uxtb	r3, r3
 8004992:	2b00      	cmp	r3, #0
 8004994:	d106      	bne.n	80049a4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2200      	movs	r2, #0
 800499a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800499e:	6878      	ldr	r0, [r7, #4]
 80049a0:	f7fe fa1c 	bl	8002ddc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	2224      	movs	r2, #36	@ 0x24
 80049a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	681a      	ldr	r2, [r3, #0]
 80049b2:	687b      	ldr	r3, [r7, #4]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	f022 0201 	bic.w	r2, r2, #1
 80049ba:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	681a      	ldr	r2, [r3, #0]
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	681b      	ldr	r3, [r3, #0]
 80049c6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80049ca:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	681a      	ldr	r2, [r3, #0]
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80049da:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80049dc:	f003 fd10 	bl	8008400 <HAL_RCC_GetPCLK1Freq>
 80049e0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	685b      	ldr	r3, [r3, #4]
 80049e6:	4a81      	ldr	r2, [pc, #516]	@ (8004bec <HAL_I2C_Init+0x274>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d807      	bhi.n	80049fc <HAL_I2C_Init+0x84>
 80049ec:	68fb      	ldr	r3, [r7, #12]
 80049ee:	4a80      	ldr	r2, [pc, #512]	@ (8004bf0 <HAL_I2C_Init+0x278>)
 80049f0:	4293      	cmp	r3, r2
 80049f2:	bf94      	ite	ls
 80049f4:	2301      	movls	r3, #1
 80049f6:	2300      	movhi	r3, #0
 80049f8:	b2db      	uxtb	r3, r3
 80049fa:	e006      	b.n	8004a0a <HAL_I2C_Init+0x92>
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	4a7d      	ldr	r2, [pc, #500]	@ (8004bf4 <HAL_I2C_Init+0x27c>)
 8004a00:	4293      	cmp	r3, r2
 8004a02:	bf94      	ite	ls
 8004a04:	2301      	movls	r3, #1
 8004a06:	2300      	movhi	r3, #0
 8004a08:	b2db      	uxtb	r3, r3
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d001      	beq.n	8004a12 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004a0e:	2301      	movs	r3, #1
 8004a10:	e0e7      	b.n	8004be2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	4a78      	ldr	r2, [pc, #480]	@ (8004bf8 <HAL_I2C_Init+0x280>)
 8004a16:	fba2 2303 	umull	r2, r3, r2, r3
 8004a1a:	0c9b      	lsrs	r3, r3, #18
 8004a1c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	68ba      	ldr	r2, [r7, #8]
 8004a2e:	430a      	orrs	r2, r1
 8004a30:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	6a1b      	ldr	r3, [r3, #32]
 8004a38:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	685b      	ldr	r3, [r3, #4]
 8004a40:	4a6a      	ldr	r2, [pc, #424]	@ (8004bec <HAL_I2C_Init+0x274>)
 8004a42:	4293      	cmp	r3, r2
 8004a44:	d802      	bhi.n	8004a4c <HAL_I2C_Init+0xd4>
 8004a46:	68bb      	ldr	r3, [r7, #8]
 8004a48:	3301      	adds	r3, #1
 8004a4a:	e009      	b.n	8004a60 <HAL_I2C_Init+0xe8>
 8004a4c:	68bb      	ldr	r3, [r7, #8]
 8004a4e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8004a52:	fb02 f303 	mul.w	r3, r2, r3
 8004a56:	4a69      	ldr	r2, [pc, #420]	@ (8004bfc <HAL_I2C_Init+0x284>)
 8004a58:	fba2 2303 	umull	r2, r3, r2, r3
 8004a5c:	099b      	lsrs	r3, r3, #6
 8004a5e:	3301      	adds	r3, #1
 8004a60:	687a      	ldr	r2, [r7, #4]
 8004a62:	6812      	ldr	r2, [r2, #0]
 8004a64:	430b      	orrs	r3, r1
 8004a66:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	69db      	ldr	r3, [r3, #28]
 8004a6e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8004a72:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	685b      	ldr	r3, [r3, #4]
 8004a7a:	495c      	ldr	r1, [pc, #368]	@ (8004bec <HAL_I2C_Init+0x274>)
 8004a7c:	428b      	cmp	r3, r1
 8004a7e:	d819      	bhi.n	8004ab4 <HAL_I2C_Init+0x13c>
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	1e59      	subs	r1, r3, #1
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	685b      	ldr	r3, [r3, #4]
 8004a88:	005b      	lsls	r3, r3, #1
 8004a8a:	fbb1 f3f3 	udiv	r3, r1, r3
 8004a8e:	1c59      	adds	r1, r3, #1
 8004a90:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8004a94:	400b      	ands	r3, r1
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d00a      	beq.n	8004ab0 <HAL_I2C_Init+0x138>
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	1e59      	subs	r1, r3, #1
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	685b      	ldr	r3, [r3, #4]
 8004aa2:	005b      	lsls	r3, r3, #1
 8004aa4:	fbb1 f3f3 	udiv	r3, r1, r3
 8004aa8:	3301      	adds	r3, #1
 8004aaa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004aae:	e051      	b.n	8004b54 <HAL_I2C_Init+0x1dc>
 8004ab0:	2304      	movs	r3, #4
 8004ab2:	e04f      	b.n	8004b54 <HAL_I2C_Init+0x1dc>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	689b      	ldr	r3, [r3, #8]
 8004ab8:	2b00      	cmp	r3, #0
 8004aba:	d111      	bne.n	8004ae0 <HAL_I2C_Init+0x168>
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	1e58      	subs	r0, r3, #1
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	6859      	ldr	r1, [r3, #4]
 8004ac4:	460b      	mov	r3, r1
 8004ac6:	005b      	lsls	r3, r3, #1
 8004ac8:	440b      	add	r3, r1
 8004aca:	fbb0 f3f3 	udiv	r3, r0, r3
 8004ace:	3301      	adds	r3, #1
 8004ad0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ad4:	2b00      	cmp	r3, #0
 8004ad6:	bf0c      	ite	eq
 8004ad8:	2301      	moveq	r3, #1
 8004ada:	2300      	movne	r3, #0
 8004adc:	b2db      	uxtb	r3, r3
 8004ade:	e012      	b.n	8004b06 <HAL_I2C_Init+0x18e>
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	1e58      	subs	r0, r3, #1
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	6859      	ldr	r1, [r3, #4]
 8004ae8:	460b      	mov	r3, r1
 8004aea:	009b      	lsls	r3, r3, #2
 8004aec:	440b      	add	r3, r1
 8004aee:	0099      	lsls	r1, r3, #2
 8004af0:	440b      	add	r3, r1
 8004af2:	fbb0 f3f3 	udiv	r3, r0, r3
 8004af6:	3301      	adds	r3, #1
 8004af8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004afc:	2b00      	cmp	r3, #0
 8004afe:	bf0c      	ite	eq
 8004b00:	2301      	moveq	r3, #1
 8004b02:	2300      	movne	r3, #0
 8004b04:	b2db      	uxtb	r3, r3
 8004b06:	2b00      	cmp	r3, #0
 8004b08:	d001      	beq.n	8004b0e <HAL_I2C_Init+0x196>
 8004b0a:	2301      	movs	r3, #1
 8004b0c:	e022      	b.n	8004b54 <HAL_I2C_Init+0x1dc>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	689b      	ldr	r3, [r3, #8]
 8004b12:	2b00      	cmp	r3, #0
 8004b14:	d10e      	bne.n	8004b34 <HAL_I2C_Init+0x1bc>
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	1e58      	subs	r0, r3, #1
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	6859      	ldr	r1, [r3, #4]
 8004b1e:	460b      	mov	r3, r1
 8004b20:	005b      	lsls	r3, r3, #1
 8004b22:	440b      	add	r3, r1
 8004b24:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b28:	3301      	adds	r3, #1
 8004b2a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b2e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004b32:	e00f      	b.n	8004b54 <HAL_I2C_Init+0x1dc>
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	1e58      	subs	r0, r3, #1
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	6859      	ldr	r1, [r3, #4]
 8004b3c:	460b      	mov	r3, r1
 8004b3e:	009b      	lsls	r3, r3, #2
 8004b40:	440b      	add	r3, r1
 8004b42:	0099      	lsls	r1, r3, #2
 8004b44:	440b      	add	r3, r1
 8004b46:	fbb0 f3f3 	udiv	r3, r0, r3
 8004b4a:	3301      	adds	r3, #1
 8004b4c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004b50:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8004b54:	6879      	ldr	r1, [r7, #4]
 8004b56:	6809      	ldr	r1, [r1, #0]
 8004b58:	4313      	orrs	r3, r2
 8004b5a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	69da      	ldr	r2, [r3, #28]
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	6a1b      	ldr	r3, [r3, #32]
 8004b6e:	431a      	orrs	r2, r3
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	430a      	orrs	r2, r1
 8004b76:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	689b      	ldr	r3, [r3, #8]
 8004b7e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8004b82:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8004b86:	687a      	ldr	r2, [r7, #4]
 8004b88:	6911      	ldr	r1, [r2, #16]
 8004b8a:	687a      	ldr	r2, [r7, #4]
 8004b8c:	68d2      	ldr	r2, [r2, #12]
 8004b8e:	4311      	orrs	r1, r2
 8004b90:	687a      	ldr	r2, [r7, #4]
 8004b92:	6812      	ldr	r2, [r2, #0]
 8004b94:	430b      	orrs	r3, r1
 8004b96:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	68db      	ldr	r3, [r3, #12]
 8004b9e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	695a      	ldr	r2, [r3, #20]
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	699b      	ldr	r3, [r3, #24]
 8004baa:	431a      	orrs	r2, r3
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	430a      	orrs	r2, r1
 8004bb2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	681a      	ldr	r2, [r3, #0]
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f042 0201 	orr.w	r2, r2, #1
 8004bc2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	2220      	movs	r2, #32
 8004bce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	2200      	movs	r2, #0
 8004bdc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8004be0:	2300      	movs	r3, #0
}
 8004be2:	4618      	mov	r0, r3
 8004be4:	3710      	adds	r7, #16
 8004be6:	46bd      	mov	sp, r7
 8004be8:	bd80      	pop	{r7, pc}
 8004bea:	bf00      	nop
 8004bec:	000186a0 	.word	0x000186a0
 8004bf0:	001e847f 	.word	0x001e847f
 8004bf4:	003d08ff 	.word	0x003d08ff
 8004bf8:	431bde83 	.word	0x431bde83
 8004bfc:	10624dd3 	.word	0x10624dd3

08004c00 <I2C_Flush_DR>:
  * @brief  I2C data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_DR(I2C_HandleTypeDef *hi2c)
{
 8004c00:	b480      	push	{r7}
 8004c02:	b083      	sub	sp, #12
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
  /* Write a dummy data in DR to clear TXE flag */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) != RESET)
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	695b      	ldr	r3, [r3, #20]
 8004c0e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c12:	2b80      	cmp	r3, #128	@ 0x80
 8004c14:	d103      	bne.n	8004c1e <I2C_Flush_DR+0x1e>
  {
    hi2c->Instance->DR = 0x00U;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	2200      	movs	r2, #0
 8004c1c:	611a      	str	r2, [r3, #16]
  }
}
 8004c1e:	bf00      	nop
 8004c20:	370c      	adds	r7, #12
 8004c22:	46bd      	mov	sp, r7
 8004c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c28:	4770      	bx	lr
	...

08004c2c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004c2c:	b580      	push	{r7, lr}
 8004c2e:	b088      	sub	sp, #32
 8004c30:	af02      	add	r7, sp, #8
 8004c32:	60f8      	str	r0, [r7, #12]
 8004c34:	4608      	mov	r0, r1
 8004c36:	4611      	mov	r1, r2
 8004c38:	461a      	mov	r2, r3
 8004c3a:	4603      	mov	r3, r0
 8004c3c:	817b      	strh	r3, [r7, #10]
 8004c3e:	460b      	mov	r3, r1
 8004c40:	813b      	strh	r3, [r7, #8]
 8004c42:	4613      	mov	r3, r2
 8004c44:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004c46:	f7fe fff1 	bl	8003c2c <HAL_GetTick>
 8004c4a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004c52:	b2db      	uxtb	r3, r3
 8004c54:	2b20      	cmp	r3, #32
 8004c56:	f040 80d9 	bne.w	8004e0c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004c5a:	697b      	ldr	r3, [r7, #20]
 8004c5c:	9300      	str	r3, [sp, #0]
 8004c5e:	2319      	movs	r3, #25
 8004c60:	2201      	movs	r2, #1
 8004c62:	496d      	ldr	r1, [pc, #436]	@ (8004e18 <HAL_I2C_Mem_Write+0x1ec>)
 8004c64:	68f8      	ldr	r0, [r7, #12]
 8004c66:	f002 fcd7 	bl	8007618 <I2C_WaitOnFlagUntilTimeout>
 8004c6a:	4603      	mov	r3, r0
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d001      	beq.n	8004c74 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004c70:	2302      	movs	r3, #2
 8004c72:	e0cc      	b.n	8004e0e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004c7a:	2b01      	cmp	r3, #1
 8004c7c:	d101      	bne.n	8004c82 <HAL_I2C_Mem_Write+0x56>
 8004c7e:	2302      	movs	r3, #2
 8004c80:	e0c5      	b.n	8004e0e <HAL_I2C_Mem_Write+0x1e2>
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	2201      	movs	r2, #1
 8004c86:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	f003 0301 	and.w	r3, r3, #1
 8004c94:	2b01      	cmp	r3, #1
 8004c96:	d007      	beq.n	8004ca8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	681a      	ldr	r2, [r3, #0]
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f042 0201 	orr.w	r2, r2, #1
 8004ca6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	681a      	ldr	r2, [r3, #0]
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004cb6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	2221      	movs	r2, #33	@ 0x21
 8004cbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	2240      	movs	r2, #64	@ 0x40
 8004cc4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	2200      	movs	r2, #0
 8004ccc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	6a3a      	ldr	r2, [r7, #32]
 8004cd2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8004cd8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004cde:	b29a      	uxth	r2, r3
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	4a4d      	ldr	r2, [pc, #308]	@ (8004e1c <HAL_I2C_Mem_Write+0x1f0>)
 8004ce8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004cea:	88f8      	ldrh	r0, [r7, #6]
 8004cec:	893a      	ldrh	r2, [r7, #8]
 8004cee:	8979      	ldrh	r1, [r7, #10]
 8004cf0:	697b      	ldr	r3, [r7, #20]
 8004cf2:	9301      	str	r3, [sp, #4]
 8004cf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004cf6:	9300      	str	r3, [sp, #0]
 8004cf8:	4603      	mov	r3, r0
 8004cfa:	68f8      	ldr	r0, [r7, #12]
 8004cfc:	f002 f94a 	bl	8006f94 <I2C_RequestMemoryWrite>
 8004d00:	4603      	mov	r3, r0
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d052      	beq.n	8004dac <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004d06:	2301      	movs	r3, #1
 8004d08:	e081      	b.n	8004e0e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004d0a:	697a      	ldr	r2, [r7, #20]
 8004d0c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004d0e:	68f8      	ldr	r0, [r7, #12]
 8004d10:	f002 fd9c 	bl	800784c <I2C_WaitOnTXEFlagUntilTimeout>
 8004d14:	4603      	mov	r3, r0
 8004d16:	2b00      	cmp	r3, #0
 8004d18:	d00d      	beq.n	8004d36 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d1e:	2b04      	cmp	r3, #4
 8004d20:	d107      	bne.n	8004d32 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	681a      	ldr	r2, [r3, #0]
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004d30:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004d32:	2301      	movs	r3, #1
 8004d34:	e06b      	b.n	8004e0e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d3a:	781a      	ldrb	r2, [r3, #0]
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d46:	1c5a      	adds	r2, r3, #1
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d50:	3b01      	subs	r3, #1
 8004d52:	b29a      	uxth	r2, r3
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004d5c:	b29b      	uxth	r3, r3
 8004d5e:	3b01      	subs	r3, #1
 8004d60:	b29a      	uxth	r2, r3
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	695b      	ldr	r3, [r3, #20]
 8004d6c:	f003 0304 	and.w	r3, r3, #4
 8004d70:	2b04      	cmp	r3, #4
 8004d72:	d11b      	bne.n	8004dac <HAL_I2C_Mem_Write+0x180>
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d78:	2b00      	cmp	r3, #0
 8004d7a:	d017      	beq.n	8004dac <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d80:	781a      	ldrb	r2, [r3, #0]
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d8c:	1c5a      	adds	r2, r3, #1
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004d96:	3b01      	subs	r3, #1
 8004d98:	b29a      	uxth	r2, r3
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004d9e:	68fb      	ldr	r3, [r7, #12]
 8004da0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004da2:	b29b      	uxth	r3, r3
 8004da4:	3b01      	subs	r3, #1
 8004da6:	b29a      	uxth	r2, r3
 8004da8:	68fb      	ldr	r3, [r7, #12]
 8004daa:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d1aa      	bne.n	8004d0a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004db4:	697a      	ldr	r2, [r7, #20]
 8004db6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004db8:	68f8      	ldr	r0, [r7, #12]
 8004dba:	f002 fd8f 	bl	80078dc <I2C_WaitOnBTFFlagUntilTimeout>
 8004dbe:	4603      	mov	r3, r0
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	d00d      	beq.n	8004de0 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004dc8:	2b04      	cmp	r3, #4
 8004dca:	d107      	bne.n	8004ddc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	681a      	ldr	r2, [r3, #0]
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004dda:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004ddc:	2301      	movs	r3, #1
 8004dde:	e016      	b.n	8004e0e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	681a      	ldr	r2, [r3, #0]
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004dee:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	2220      	movs	r2, #32
 8004df4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004df8:	68fb      	ldr	r3, [r7, #12]
 8004dfa:	2200      	movs	r2, #0
 8004dfc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004e00:	68fb      	ldr	r3, [r7, #12]
 8004e02:	2200      	movs	r2, #0
 8004e04:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8004e08:	2300      	movs	r3, #0
 8004e0a:	e000      	b.n	8004e0e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004e0c:	2302      	movs	r3, #2
  }
}
 8004e0e:	4618      	mov	r0, r3
 8004e10:	3718      	adds	r7, #24
 8004e12:	46bd      	mov	sp, r7
 8004e14:	bd80      	pop	{r7, pc}
 8004e16:	bf00      	nop
 8004e18:	00100002 	.word	0x00100002
 8004e1c:	ffff0000 	.word	0xffff0000

08004e20 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b08c      	sub	sp, #48	@ 0x30
 8004e24:	af02      	add	r7, sp, #8
 8004e26:	60f8      	str	r0, [r7, #12]
 8004e28:	4608      	mov	r0, r1
 8004e2a:	4611      	mov	r1, r2
 8004e2c:	461a      	mov	r2, r3
 8004e2e:	4603      	mov	r3, r0
 8004e30:	817b      	strh	r3, [r7, #10]
 8004e32:	460b      	mov	r3, r1
 8004e34:	813b      	strh	r3, [r7, #8]
 8004e36:	4613      	mov	r3, r2
 8004e38:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004e3a:	f7fe fef7 	bl	8003c2c <HAL_GetTick>
 8004e3e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004e46:	b2db      	uxtb	r3, r3
 8004e48:	2b20      	cmp	r3, #32
 8004e4a:	f040 8214 	bne.w	8005276 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004e4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e50:	9300      	str	r3, [sp, #0]
 8004e52:	2319      	movs	r3, #25
 8004e54:	2201      	movs	r2, #1
 8004e56:	497b      	ldr	r1, [pc, #492]	@ (8005044 <HAL_I2C_Mem_Read+0x224>)
 8004e58:	68f8      	ldr	r0, [r7, #12]
 8004e5a:	f002 fbdd 	bl	8007618 <I2C_WaitOnFlagUntilTimeout>
 8004e5e:	4603      	mov	r3, r0
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d001      	beq.n	8004e68 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8004e64:	2302      	movs	r3, #2
 8004e66:	e207      	b.n	8005278 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004e6e:	2b01      	cmp	r3, #1
 8004e70:	d101      	bne.n	8004e76 <HAL_I2C_Mem_Read+0x56>
 8004e72:	2302      	movs	r3, #2
 8004e74:	e200      	b.n	8005278 <HAL_I2C_Mem_Read+0x458>
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	2201      	movs	r2, #1
 8004e7a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004e7e:	68fb      	ldr	r3, [r7, #12]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	f003 0301 	and.w	r3, r3, #1
 8004e88:	2b01      	cmp	r3, #1
 8004e8a:	d007      	beq.n	8004e9c <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	681a      	ldr	r2, [r3, #0]
 8004e92:	68fb      	ldr	r3, [r7, #12]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	f042 0201 	orr.w	r2, r2, #1
 8004e9a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	681b      	ldr	r3, [r3, #0]
 8004ea0:	681a      	ldr	r2, [r3, #0]
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	681b      	ldr	r3, [r3, #0]
 8004ea6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004eaa:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	2222      	movs	r2, #34	@ 0x22
 8004eb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	2240      	movs	r2, #64	@ 0x40
 8004eb8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	2200      	movs	r2, #0
 8004ec0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004ec2:	68fb      	ldr	r3, [r7, #12]
 8004ec4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004ec6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004ec8:	68fb      	ldr	r3, [r7, #12]
 8004eca:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8004ecc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004ed2:	b29a      	uxth	r2, r3
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	4a5b      	ldr	r2, [pc, #364]	@ (8005048 <HAL_I2C_Mem_Read+0x228>)
 8004edc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004ede:	88f8      	ldrh	r0, [r7, #6]
 8004ee0:	893a      	ldrh	r2, [r7, #8]
 8004ee2:	8979      	ldrh	r1, [r7, #10]
 8004ee4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ee6:	9301      	str	r3, [sp, #4]
 8004ee8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004eea:	9300      	str	r3, [sp, #0]
 8004eec:	4603      	mov	r3, r0
 8004eee:	68f8      	ldr	r0, [r7, #12]
 8004ef0:	f002 f8e6 	bl	80070c0 <I2C_RequestMemoryRead>
 8004ef4:	4603      	mov	r3, r0
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d001      	beq.n	8004efe <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8004efa:	2301      	movs	r3, #1
 8004efc:	e1bc      	b.n	8005278 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d113      	bne.n	8004f2e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f06:	2300      	movs	r3, #0
 8004f08:	623b      	str	r3, [r7, #32]
 8004f0a:	68fb      	ldr	r3, [r7, #12]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	695b      	ldr	r3, [r3, #20]
 8004f10:	623b      	str	r3, [r7, #32]
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	699b      	ldr	r3, [r3, #24]
 8004f18:	623b      	str	r3, [r7, #32]
 8004f1a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	681a      	ldr	r2, [r3, #0]
 8004f22:	68fb      	ldr	r3, [r7, #12]
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004f2a:	601a      	str	r2, [r3, #0]
 8004f2c:	e190      	b.n	8005250 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f32:	2b01      	cmp	r3, #1
 8004f34:	d11b      	bne.n	8004f6e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	681a      	ldr	r2, [r3, #0]
 8004f3c:	68fb      	ldr	r3, [r7, #12]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004f44:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f46:	2300      	movs	r3, #0
 8004f48:	61fb      	str	r3, [r7, #28]
 8004f4a:	68fb      	ldr	r3, [r7, #12]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	695b      	ldr	r3, [r3, #20]
 8004f50:	61fb      	str	r3, [r7, #28]
 8004f52:	68fb      	ldr	r3, [r7, #12]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	699b      	ldr	r3, [r3, #24]
 8004f58:	61fb      	str	r3, [r7, #28]
 8004f5a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	681a      	ldr	r2, [r3, #0]
 8004f62:	68fb      	ldr	r3, [r7, #12]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004f6a:	601a      	str	r2, [r3, #0]
 8004f6c:	e170      	b.n	8005250 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004f72:	2b02      	cmp	r3, #2
 8004f74:	d11b      	bne.n	8004fae <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	681a      	ldr	r2, [r3, #0]
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	681b      	ldr	r3, [r3, #0]
 8004f80:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004f84:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	681a      	ldr	r2, [r3, #0]
 8004f8c:	68fb      	ldr	r3, [r7, #12]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004f94:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f96:	2300      	movs	r3, #0
 8004f98:	61bb      	str	r3, [r7, #24]
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	695b      	ldr	r3, [r3, #20]
 8004fa0:	61bb      	str	r3, [r7, #24]
 8004fa2:	68fb      	ldr	r3, [r7, #12]
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	699b      	ldr	r3, [r3, #24]
 8004fa8:	61bb      	str	r3, [r7, #24]
 8004faa:	69bb      	ldr	r3, [r7, #24]
 8004fac:	e150      	b.n	8005250 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004fae:	2300      	movs	r3, #0
 8004fb0:	617b      	str	r3, [r7, #20]
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	695b      	ldr	r3, [r3, #20]
 8004fb8:	617b      	str	r3, [r7, #20]
 8004fba:	68fb      	ldr	r3, [r7, #12]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	699b      	ldr	r3, [r3, #24]
 8004fc0:	617b      	str	r3, [r7, #20]
 8004fc2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004fc4:	e144      	b.n	8005250 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004fca:	2b03      	cmp	r3, #3
 8004fcc:	f200 80f1 	bhi.w	80051b2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004fd0:	68fb      	ldr	r3, [r7, #12]
 8004fd2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004fd4:	2b01      	cmp	r3, #1
 8004fd6:	d123      	bne.n	8005020 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004fd8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004fda:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8004fdc:	68f8      	ldr	r0, [r7, #12]
 8004fde:	f002 fcf7 	bl	80079d0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004fe2:	4603      	mov	r3, r0
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d001      	beq.n	8004fec <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8004fe8:	2301      	movs	r3, #1
 8004fea:	e145      	b.n	8005278 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	691a      	ldr	r2, [r3, #16]
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ff6:	b2d2      	uxtb	r2, r2
 8004ff8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004ffe:	1c5a      	adds	r2, r3, #1
 8005000:	68fb      	ldr	r3, [r7, #12]
 8005002:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005008:	3b01      	subs	r3, #1
 800500a:	b29a      	uxth	r2, r3
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005010:	68fb      	ldr	r3, [r7, #12]
 8005012:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005014:	b29b      	uxth	r3, r3
 8005016:	3b01      	subs	r3, #1
 8005018:	b29a      	uxth	r2, r3
 800501a:	68fb      	ldr	r3, [r7, #12]
 800501c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800501e:	e117      	b.n	8005250 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005020:	68fb      	ldr	r3, [r7, #12]
 8005022:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005024:	2b02      	cmp	r3, #2
 8005026:	d14e      	bne.n	80050c6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005028:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800502a:	9300      	str	r3, [sp, #0]
 800502c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800502e:	2200      	movs	r2, #0
 8005030:	4906      	ldr	r1, [pc, #24]	@ (800504c <HAL_I2C_Mem_Read+0x22c>)
 8005032:	68f8      	ldr	r0, [r7, #12]
 8005034:	f002 faf0 	bl	8007618 <I2C_WaitOnFlagUntilTimeout>
 8005038:	4603      	mov	r3, r0
 800503a:	2b00      	cmp	r3, #0
 800503c:	d008      	beq.n	8005050 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800503e:	2301      	movs	r3, #1
 8005040:	e11a      	b.n	8005278 <HAL_I2C_Mem_Read+0x458>
 8005042:	bf00      	nop
 8005044:	00100002 	.word	0x00100002
 8005048:	ffff0000 	.word	0xffff0000
 800504c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005050:	68fb      	ldr	r3, [r7, #12]
 8005052:	681b      	ldr	r3, [r3, #0]
 8005054:	681a      	ldr	r2, [r3, #0]
 8005056:	68fb      	ldr	r3, [r7, #12]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800505e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	691a      	ldr	r2, [r3, #16]
 8005066:	68fb      	ldr	r3, [r7, #12]
 8005068:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800506a:	b2d2      	uxtb	r2, r2
 800506c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005072:	1c5a      	adds	r2, r3, #1
 8005074:	68fb      	ldr	r3, [r7, #12]
 8005076:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800507c:	3b01      	subs	r3, #1
 800507e:	b29a      	uxth	r2, r3
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005084:	68fb      	ldr	r3, [r7, #12]
 8005086:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005088:	b29b      	uxth	r3, r3
 800508a:	3b01      	subs	r3, #1
 800508c:	b29a      	uxth	r2, r3
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	691a      	ldr	r2, [r3, #16]
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800509c:	b2d2      	uxtb	r2, r2
 800509e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050a4:	1c5a      	adds	r2, r3, #1
 80050a6:	68fb      	ldr	r3, [r7, #12]
 80050a8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80050ae:	3b01      	subs	r3, #1
 80050b0:	b29a      	uxth	r2, r3
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80050ba:	b29b      	uxth	r3, r3
 80050bc:	3b01      	subs	r3, #1
 80050be:	b29a      	uxth	r2, r3
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80050c4:	e0c4      	b.n	8005250 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80050c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80050c8:	9300      	str	r3, [sp, #0]
 80050ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050cc:	2200      	movs	r2, #0
 80050ce:	496c      	ldr	r1, [pc, #432]	@ (8005280 <HAL_I2C_Mem_Read+0x460>)
 80050d0:	68f8      	ldr	r0, [r7, #12]
 80050d2:	f002 faa1 	bl	8007618 <I2C_WaitOnFlagUntilTimeout>
 80050d6:	4603      	mov	r3, r0
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d001      	beq.n	80050e0 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80050dc:	2301      	movs	r3, #1
 80050de:	e0cb      	b.n	8005278 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050e0:	68fb      	ldr	r3, [r7, #12]
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	681a      	ldr	r2, [r3, #0]
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80050ee:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80050f0:	68fb      	ldr	r3, [r7, #12]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	691a      	ldr	r2, [r3, #16]
 80050f6:	68fb      	ldr	r3, [r7, #12]
 80050f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80050fa:	b2d2      	uxtb	r2, r2
 80050fc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005102:	1c5a      	adds	r2, r3, #1
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800510c:	3b01      	subs	r3, #1
 800510e:	b29a      	uxth	r2, r3
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005114:	68fb      	ldr	r3, [r7, #12]
 8005116:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005118:	b29b      	uxth	r3, r3
 800511a:	3b01      	subs	r3, #1
 800511c:	b29a      	uxth	r2, r3
 800511e:	68fb      	ldr	r3, [r7, #12]
 8005120:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005122:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005124:	9300      	str	r3, [sp, #0]
 8005126:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005128:	2200      	movs	r2, #0
 800512a:	4955      	ldr	r1, [pc, #340]	@ (8005280 <HAL_I2C_Mem_Read+0x460>)
 800512c:	68f8      	ldr	r0, [r7, #12]
 800512e:	f002 fa73 	bl	8007618 <I2C_WaitOnFlagUntilTimeout>
 8005132:	4603      	mov	r3, r0
 8005134:	2b00      	cmp	r3, #0
 8005136:	d001      	beq.n	800513c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8005138:	2301      	movs	r3, #1
 800513a:	e09d      	b.n	8005278 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800513c:	68fb      	ldr	r3, [r7, #12]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	681a      	ldr	r2, [r3, #0]
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800514a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800514c:	68fb      	ldr	r3, [r7, #12]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	691a      	ldr	r2, [r3, #16]
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005156:	b2d2      	uxtb	r2, r2
 8005158:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800515e:	1c5a      	adds	r2, r3, #1
 8005160:	68fb      	ldr	r3, [r7, #12]
 8005162:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005164:	68fb      	ldr	r3, [r7, #12]
 8005166:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005168:	3b01      	subs	r3, #1
 800516a:	b29a      	uxth	r2, r3
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005174:	b29b      	uxth	r3, r3
 8005176:	3b01      	subs	r3, #1
 8005178:	b29a      	uxth	r2, r3
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	691a      	ldr	r2, [r3, #16]
 8005184:	68fb      	ldr	r3, [r7, #12]
 8005186:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005188:	b2d2      	uxtb	r2, r2
 800518a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005190:	1c5a      	adds	r2, r3, #1
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800519a:	3b01      	subs	r3, #1
 800519c:	b29a      	uxth	r2, r3
 800519e:	68fb      	ldr	r3, [r7, #12]
 80051a0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051a6:	b29b      	uxth	r3, r3
 80051a8:	3b01      	subs	r3, #1
 80051aa:	b29a      	uxth	r2, r3
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80051b0:	e04e      	b.n	8005250 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80051b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80051b4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80051b6:	68f8      	ldr	r0, [r7, #12]
 80051b8:	f002 fc0a 	bl	80079d0 <I2C_WaitOnRXNEFlagUntilTimeout>
 80051bc:	4603      	mov	r3, r0
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d001      	beq.n	80051c6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 80051c2:	2301      	movs	r3, #1
 80051c4:	e058      	b.n	8005278 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051c6:	68fb      	ldr	r3, [r7, #12]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	691a      	ldr	r2, [r3, #16]
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051d0:	b2d2      	uxtb	r2, r2
 80051d2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80051d4:	68fb      	ldr	r3, [r7, #12]
 80051d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80051d8:	1c5a      	adds	r2, r3, #1
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80051e2:	3b01      	subs	r3, #1
 80051e4:	b29a      	uxth	r2, r3
 80051e6:	68fb      	ldr	r3, [r7, #12]
 80051e8:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80051ea:	68fb      	ldr	r3, [r7, #12]
 80051ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80051ee:	b29b      	uxth	r3, r3
 80051f0:	3b01      	subs	r3, #1
 80051f2:	b29a      	uxth	r2, r3
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80051f8:	68fb      	ldr	r3, [r7, #12]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	695b      	ldr	r3, [r3, #20]
 80051fe:	f003 0304 	and.w	r3, r3, #4
 8005202:	2b04      	cmp	r3, #4
 8005204:	d124      	bne.n	8005250 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800520a:	2b03      	cmp	r3, #3
 800520c:	d107      	bne.n	800521e <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800520e:	68fb      	ldr	r3, [r7, #12]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	681a      	ldr	r2, [r3, #0]
 8005214:	68fb      	ldr	r3, [r7, #12]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800521c:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800521e:	68fb      	ldr	r3, [r7, #12]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	691a      	ldr	r2, [r3, #16]
 8005224:	68fb      	ldr	r3, [r7, #12]
 8005226:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005228:	b2d2      	uxtb	r2, r2
 800522a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005230:	1c5a      	adds	r2, r3, #1
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005236:	68fb      	ldr	r3, [r7, #12]
 8005238:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800523a:	3b01      	subs	r3, #1
 800523c:	b29a      	uxth	r2, r3
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005246:	b29b      	uxth	r3, r3
 8005248:	3b01      	subs	r3, #1
 800524a:	b29a      	uxth	r2, r3
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005254:	2b00      	cmp	r3, #0
 8005256:	f47f aeb6 	bne.w	8004fc6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800525a:	68fb      	ldr	r3, [r7, #12]
 800525c:	2220      	movs	r2, #32
 800525e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	2200      	movs	r2, #0
 8005266:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	2200      	movs	r2, #0
 800526e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005272:	2300      	movs	r3, #0
 8005274:	e000      	b.n	8005278 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8005276:	2302      	movs	r3, #2
  }
}
 8005278:	4618      	mov	r0, r3
 800527a:	3728      	adds	r7, #40	@ 0x28
 800527c:	46bd      	mov	sp, r7
 800527e:	bd80      	pop	{r7, pc}
 8005280:	00010004 	.word	0x00010004

08005284 <HAL_I2C_Mem_Read_DMA>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be read
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size)
{
 8005284:	b580      	push	{r7, lr}
 8005286:	b08c      	sub	sp, #48	@ 0x30
 8005288:	af02      	add	r7, sp, #8
 800528a:	60f8      	str	r0, [r7, #12]
 800528c:	4608      	mov	r0, r1
 800528e:	4611      	mov	r1, r2
 8005290:	461a      	mov	r2, r3
 8005292:	4603      	mov	r3, r0
 8005294:	817b      	strh	r3, [r7, #10]
 8005296:	460b      	mov	r3, r1
 8005298:	813b      	strh	r3, [r7, #8]
 800529a:	4613      	mov	r3, r2
 800529c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800529e:	f7fe fcc5 	bl	8003c2c <HAL_GetTick>
 80052a2:	6278      	str	r0, [r7, #36]	@ 0x24
  __IO uint32_t count = 0U;
 80052a4:	2300      	movs	r3, #0
 80052a6:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef dmaxferstatus;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80052ae:	b2db      	uxtb	r3, r3
 80052b0:	2b20      	cmp	r3, #32
 80052b2:	f040 8172 	bne.w	800559a <HAL_I2C_Mem_Read_DMA+0x316>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 80052b6:	4b93      	ldr	r3, [pc, #588]	@ (8005504 <HAL_I2C_Mem_Read_DMA+0x280>)
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	08db      	lsrs	r3, r3, #3
 80052bc:	4a92      	ldr	r2, [pc, #584]	@ (8005508 <HAL_I2C_Mem_Read_DMA+0x284>)
 80052be:	fba2 2303 	umull	r2, r3, r2, r3
 80052c2:	0a1a      	lsrs	r2, r3, #8
 80052c4:	4613      	mov	r3, r2
 80052c6:	009b      	lsls	r3, r3, #2
 80052c8:	4413      	add	r3, r2
 80052ca:	009a      	lsls	r2, r3, #2
 80052cc:	4413      	add	r3, r2
 80052ce:	61fb      	str	r3, [r7, #28]
    do
    {
      count--;
 80052d0:	69fb      	ldr	r3, [r7, #28]
 80052d2:	3b01      	subs	r3, #1
 80052d4:	61fb      	str	r3, [r7, #28]
      if (count == 0U)
 80052d6:	69fb      	ldr	r3, [r7, #28]
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d112      	bne.n	8005302 <HAL_I2C_Mem_Read_DMA+0x7e>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	2200      	movs	r2, #0
 80052e0:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80052e2:	68fb      	ldr	r3, [r7, #12]
 80052e4:	2220      	movs	r2, #32
 80052e6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80052ea:	68fb      	ldr	r3, [r7, #12]
 80052ec:	2200      	movs	r2, #0
 80052ee:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80052f2:	68fb      	ldr	r3, [r7, #12]
 80052f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052f6:	f043 0220 	orr.w	r2, r3, #32
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	641a      	str	r2, [r3, #64]	@ 0x40

        return HAL_BUSY;
 80052fe:	2302      	movs	r3, #2
 8005300:	e14c      	b.n	800559c <HAL_I2C_Mem_Read_DMA+0x318>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8005302:	68fb      	ldr	r3, [r7, #12]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	699b      	ldr	r3, [r3, #24]
 8005308:	f003 0302 	and.w	r3, r3, #2
 800530c:	2b02      	cmp	r3, #2
 800530e:	d0df      	beq.n	80052d0 <HAL_I2C_Mem_Read_DMA+0x4c>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005310:	68fb      	ldr	r3, [r7, #12]
 8005312:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005316:	2b01      	cmp	r3, #1
 8005318:	d101      	bne.n	800531e <HAL_I2C_Mem_Read_DMA+0x9a>
 800531a:	2302      	movs	r3, #2
 800531c:	e13e      	b.n	800559c <HAL_I2C_Mem_Read_DMA+0x318>
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	2201      	movs	r2, #1
 8005322:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005326:	68fb      	ldr	r3, [r7, #12]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f003 0301 	and.w	r3, r3, #1
 8005330:	2b01      	cmp	r3, #1
 8005332:	d007      	beq.n	8005344 <HAL_I2C_Mem_Read_DMA+0xc0>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005334:	68fb      	ldr	r3, [r7, #12]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	681a      	ldr	r2, [r3, #0]
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f042 0201 	orr.w	r2, r2, #1
 8005342:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	681b      	ldr	r3, [r3, #0]
 8005348:	681a      	ldr	r2, [r3, #0]
 800534a:	68fb      	ldr	r3, [r7, #12]
 800534c:	681b      	ldr	r3, [r3, #0]
 800534e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005352:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005354:	68fb      	ldr	r3, [r7, #12]
 8005356:	2222      	movs	r2, #34	@ 0x22
 8005358:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	2240      	movs	r2, #64	@ 0x40
 8005360:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	2200      	movs	r2, #0
 8005368:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800536a:	68fb      	ldr	r3, [r7, #12]
 800536c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800536e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005370:	68fb      	ldr	r3, [r7, #12]
 8005372:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8005374:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005376:	68fb      	ldr	r3, [r7, #12]
 8005378:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800537a:	b29a      	uxth	r2, r3
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	4a62      	ldr	r2, [pc, #392]	@ (800550c <HAL_I2C_Mem_Read_DMA+0x288>)
 8005384:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->Devaddress  = DevAddress;
 8005386:	897a      	ldrh	r2, [r7, #10]
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	645a      	str	r2, [r3, #68]	@ 0x44
    hi2c->Memaddress  = MemAddress;
 800538c:	893a      	ldrh	r2, [r7, #8]
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	649a      	str	r2, [r3, #72]	@ 0x48
    hi2c->MemaddSize  = MemAddSize;
 8005392:	88fa      	ldrh	r2, [r7, #6]
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	64da      	str	r2, [r3, #76]	@ 0x4c
    hi2c->EventCount  = 0U;
 8005398:	68fb      	ldr	r3, [r7, #12]
 800539a:	2200      	movs	r2, #0
 800539c:	651a      	str	r2, [r3, #80]	@ 0x50

    if (hi2c->XferSize > 0U)
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	f000 80cc 	beq.w	8005540 <HAL_I2C_Mem_Read_DMA+0x2bc>
    {
      if (hi2c->hdmarx != NULL)
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d02d      	beq.n	800540c <HAL_I2C_Mem_Read_DMA+0x188>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAXferCplt;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053b4:	4a56      	ldr	r2, [pc, #344]	@ (8005510 <HAL_I2C_Mem_Read_DMA+0x28c>)
 80053b6:	63da      	str	r2, [r3, #60]	@ 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053bc:	4a55      	ldr	r2, [pc, #340]	@ (8005514 <HAL_I2C_Mem_Read_DMA+0x290>)
 80053be:	64da      	str	r2, [r3, #76]	@ 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053c4:	2200      	movs	r2, #0
 80053c6:	641a      	str	r2, [r3, #64]	@ 0x40
        hi2c->hdmarx->XferM1CpltCallback = NULL;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053cc:	2200      	movs	r2, #0
 80053ce:	645a      	str	r2, [r3, #68]	@ 0x44
        hi2c->hdmarx->XferM1HalfCpltCallback = NULL;
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053d4:	2200      	movs	r2, #0
 80053d6:	649a      	str	r2, [r3, #72]	@ 0x48
        hi2c->hdmarx->XferAbortCallback = NULL;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80053dc:	2200      	movs	r2, #0
 80053de:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->DR, (uint32_t)hi2c->pBuffPtr, hi2c->XferSize);
 80053e0:	68fb      	ldr	r3, [r7, #12]
 80053e2:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 80053e4:	68fb      	ldr	r3, [r7, #12]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	3310      	adds	r3, #16
 80053ea:	4619      	mov	r1, r3
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80053f0:	461a      	mov	r2, r3
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80053f6:	f7fe fdd9 	bl	8003fac <HAL_DMA_Start_IT>
 80053fa:	4603      	mov	r3, r0
 80053fc:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8005400:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8005404:	2b00      	cmp	r3, #0
 8005406:	f040 8087 	bne.w	8005518 <HAL_I2C_Mem_Read_DMA+0x294>
 800540a:	e013      	b.n	8005434 <HAL_I2C_Mem_Read_DMA+0x1b0>
        hi2c->State     = HAL_I2C_STATE_READY;
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	2220      	movs	r2, #32
 8005410:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	2200      	movs	r2, #0
 8005418:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005420:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8005424:	68fb      	ldr	r3, [r7, #12]
 8005426:	641a      	str	r2, [r3, #64]	@ 0x40
        __HAL_UNLOCK(hi2c);
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	2200      	movs	r2, #0
 800542c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
        return HAL_ERROR;
 8005430:	2301      	movs	r3, #1
 8005432:	e0b3      	b.n	800559c <HAL_I2C_Mem_Read_DMA+0x318>
      {
        /* Send Slave Address and Memory Address */
        if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8005434:	88f8      	ldrh	r0, [r7, #6]
 8005436:	893a      	ldrh	r2, [r7, #8]
 8005438:	8979      	ldrh	r1, [r7, #10]
 800543a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800543c:	9301      	str	r3, [sp, #4]
 800543e:	2323      	movs	r3, #35	@ 0x23
 8005440:	9300      	str	r3, [sp, #0]
 8005442:	4603      	mov	r3, r0
 8005444:	68f8      	ldr	r0, [r7, #12]
 8005446:	f001 fe3b 	bl	80070c0 <I2C_RequestMemoryRead>
 800544a:	4603      	mov	r3, r0
 800544c:	2b00      	cmp	r3, #0
 800544e:	d023      	beq.n	8005498 <HAL_I2C_Mem_Read_DMA+0x214>
        {
          /* Abort the ongoing DMA */
          dmaxferstatus = HAL_DMA_Abort_IT(hi2c->hdmarx);
 8005450:	68fb      	ldr	r3, [r7, #12]
 8005452:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005454:	4618      	mov	r0, r3
 8005456:	f7fe fe01 	bl	800405c <HAL_DMA_Abort_IT>
 800545a:	4603      	mov	r3, r0
 800545c:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23

          /* Prevent unused argument(s) compilation and MISRA warning */
          UNUSED(dmaxferstatus);

          /* Set the unused I2C DMA transfer complete callback to NULL */
          hi2c->hdmarx->XferCpltCallback = NULL;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005464:	2200      	movs	r2, #0
 8005466:	63da      	str	r2, [r3, #60]	@ 0x3c

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	681a      	ldr	r2, [r3, #0]
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005476:	601a      	str	r2, [r3, #0]

          hi2c->XferSize = 0U;
 8005478:	68fb      	ldr	r3, [r7, #12]
 800547a:	2200      	movs	r2, #0
 800547c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount = 0U;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	2200      	movs	r2, #0
 8005482:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Disable I2C peripheral to prevent dummy data in buffer */
          __HAL_I2C_DISABLE(hi2c);
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	681a      	ldr	r2, [r3, #0]
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f022 0201 	bic.w	r2, r2, #1
 8005492:	601a      	str	r2, [r3, #0]

          return HAL_ERROR;
 8005494:	2301      	movs	r3, #1
 8005496:	e081      	b.n	800559c <HAL_I2C_Mem_Read_DMA+0x318>
        }

        if (hi2c->XferSize == 1U)
 8005498:	68fb      	ldr	r3, [r7, #12]
 800549a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800549c:	2b01      	cmp	r3, #1
 800549e:	d108      	bne.n	80054b2 <HAL_I2C_Mem_Read_DMA+0x22e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	681a      	ldr	r2, [r3, #0]
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	681b      	ldr	r3, [r3, #0]
 80054aa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80054ae:	601a      	str	r2, [r3, #0]
 80054b0:	e007      	b.n	80054c2 <HAL_I2C_Mem_Read_DMA+0x23e>
        }
        else
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	685a      	ldr	r2, [r3, #4]
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 80054c0:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80054c2:	2300      	movs	r3, #0
 80054c4:	61bb      	str	r3, [r7, #24]
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	695b      	ldr	r3, [r3, #20]
 80054cc:	61bb      	str	r3, [r7, #24]
 80054ce:	68fb      	ldr	r3, [r7, #12]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	699b      	ldr	r3, [r3, #24]
 80054d4:	61bb      	str	r3, [r7, #24]
 80054d6:	69bb      	ldr	r3, [r7, #24]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	2200      	movs	r2, #0
 80054dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        /* Note : The I2C interrupts must be enabled after unlocking current process
        to avoid the risk of I2C interrupt handle execution before current
        process unlock */
        /* Enable ERR interrupt */
        __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_ERR);
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	685a      	ldr	r2, [r3, #4]
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80054ee:	605a      	str	r2, [r3, #4]

        /* Enable DMA Request */
        hi2c->Instance->CR2 |= I2C_CR2_DMAEN;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	685a      	ldr	r2, [r3, #4]
 80054f6:	68fb      	ldr	r3, [r7, #12]
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80054fe:	605a      	str	r2, [r3, #4]
 8005500:	e049      	b.n	8005596 <HAL_I2C_Mem_Read_DMA+0x312>
 8005502:	bf00      	nop
 8005504:	2000000c 	.word	0x2000000c
 8005508:	14f8b589 	.word	0x14f8b589
 800550c:	ffff0000 	.word	0xffff0000
 8005510:	08007291 	.word	0x08007291
 8005514:	0800744f 	.word	0x0800744f
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	2220      	movs	r2, #32
 800551c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	2200      	movs	r2, #0
 8005524:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800552c:	f043 0210 	orr.w	r2, r3, #16
 8005530:	68fb      	ldr	r3, [r7, #12]
 8005532:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005534:	68fb      	ldr	r3, [r7, #12]
 8005536:	2200      	movs	r2, #0
 8005538:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800553c:	2301      	movs	r3, #1
 800553e:	e02d      	b.n	800559c <HAL_I2C_Mem_Read_DMA+0x318>
      }
    }
    else
    {
      /* Send Slave Address and Memory Address */
      if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, I2C_TIMEOUT_FLAG, tickstart) != HAL_OK)
 8005540:	88f8      	ldrh	r0, [r7, #6]
 8005542:	893a      	ldrh	r2, [r7, #8]
 8005544:	8979      	ldrh	r1, [r7, #10]
 8005546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005548:	9301      	str	r3, [sp, #4]
 800554a:	2323      	movs	r3, #35	@ 0x23
 800554c:	9300      	str	r3, [sp, #0]
 800554e:	4603      	mov	r3, r0
 8005550:	68f8      	ldr	r0, [r7, #12]
 8005552:	f001 fdb5 	bl	80070c0 <I2C_RequestMemoryRead>
 8005556:	4603      	mov	r3, r0
 8005558:	2b00      	cmp	r3, #0
 800555a:	d001      	beq.n	8005560 <HAL_I2C_Mem_Read_DMA+0x2dc>
      {
        return HAL_ERROR;
 800555c:	2301      	movs	r3, #1
 800555e:	e01d      	b.n	800559c <HAL_I2C_Mem_Read_DMA+0x318>
      }

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005560:	2300      	movs	r3, #0
 8005562:	617b      	str	r3, [r7, #20]
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	695b      	ldr	r3, [r3, #20]
 800556a:	617b      	str	r3, [r7, #20]
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	699b      	ldr	r3, [r3, #24]
 8005572:	617b      	str	r3, [r7, #20]
 8005574:	697b      	ldr	r3, [r7, #20]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005576:	68fb      	ldr	r3, [r7, #12]
 8005578:	681b      	ldr	r3, [r3, #0]
 800557a:	681a      	ldr	r2, [r3, #0]
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005584:	601a      	str	r2, [r3, #0]

      hi2c->State = HAL_I2C_STATE_READY;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	2220      	movs	r2, #32
 800558a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	2200      	movs	r2, #0
 8005592:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }

    return HAL_OK;
 8005596:	2300      	movs	r3, #0
 8005598:	e000      	b.n	800559c <HAL_I2C_Mem_Read_DMA+0x318>
  }
  else
  {
    return HAL_BUSY;
 800559a:	2302      	movs	r3, #2
  }
}
 800559c:	4618      	mov	r0, r3
 800559e:	3728      	adds	r7, #40	@ 0x28
 80055a0:	46bd      	mov	sp, r7
 80055a2:	bd80      	pop	{r7, pc}

080055a4 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b08a      	sub	sp, #40	@ 0x28
 80055a8:	af02      	add	r7, sp, #8
 80055aa:	60f8      	str	r0, [r7, #12]
 80055ac:	607a      	str	r2, [r7, #4]
 80055ae:	603b      	str	r3, [r7, #0]
 80055b0:	460b      	mov	r3, r1
 80055b2:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 80055b4:	f7fe fb3a 	bl	8003c2c <HAL_GetTick>
 80055b8:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 80055ba:	2300      	movs	r3, #0
 80055bc:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80055c4:	b2db      	uxtb	r3, r3
 80055c6:	2b20      	cmp	r3, #32
 80055c8:	f040 8111 	bne.w	80057ee <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80055cc:	69fb      	ldr	r3, [r7, #28]
 80055ce:	9300      	str	r3, [sp, #0]
 80055d0:	2319      	movs	r3, #25
 80055d2:	2201      	movs	r2, #1
 80055d4:	4988      	ldr	r1, [pc, #544]	@ (80057f8 <HAL_I2C_IsDeviceReady+0x254>)
 80055d6:	68f8      	ldr	r0, [r7, #12]
 80055d8:	f002 f81e 	bl	8007618 <I2C_WaitOnFlagUntilTimeout>
 80055dc:	4603      	mov	r3, r0
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d001      	beq.n	80055e6 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 80055e2:	2302      	movs	r3, #2
 80055e4:	e104      	b.n	80057f0 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80055e6:	68fb      	ldr	r3, [r7, #12]
 80055e8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80055ec:	2b01      	cmp	r3, #1
 80055ee:	d101      	bne.n	80055f4 <HAL_I2C_IsDeviceReady+0x50>
 80055f0:	2302      	movs	r3, #2
 80055f2:	e0fd      	b.n	80057f0 <HAL_I2C_IsDeviceReady+0x24c>
 80055f4:	68fb      	ldr	r3, [r7, #12]
 80055f6:	2201      	movs	r2, #1
 80055f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f003 0301 	and.w	r3, r3, #1
 8005606:	2b01      	cmp	r3, #1
 8005608:	d007      	beq.n	800561a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	681a      	ldr	r2, [r3, #0]
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f042 0201 	orr.w	r2, r2, #1
 8005618:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	681a      	ldr	r2, [r3, #0]
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005628:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	2224      	movs	r2, #36	@ 0x24
 800562e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	2200      	movs	r2, #0
 8005636:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	4a70      	ldr	r2, [pc, #448]	@ (80057fc <HAL_I2C_IsDeviceReady+0x258>)
 800563c:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	681a      	ldr	r2, [r3, #0]
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800564c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 800564e:	69fb      	ldr	r3, [r7, #28]
 8005650:	9300      	str	r3, [sp, #0]
 8005652:	683b      	ldr	r3, [r7, #0]
 8005654:	2200      	movs	r2, #0
 8005656:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800565a:	68f8      	ldr	r0, [r7, #12]
 800565c:	f001 ffdc 	bl	8007618 <I2C_WaitOnFlagUntilTimeout>
 8005660:	4603      	mov	r3, r0
 8005662:	2b00      	cmp	r3, #0
 8005664:	d00d      	beq.n	8005682 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005670:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005674:	d103      	bne.n	800567e <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800567c:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 800567e:	2303      	movs	r3, #3
 8005680:	e0b6      	b.n	80057f0 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005682:	897b      	ldrh	r3, [r7, #10]
 8005684:	b2db      	uxtb	r3, r3
 8005686:	461a      	mov	r2, r3
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005690:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8005692:	f7fe facb 	bl	8003c2c <HAL_GetTick>
 8005696:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	695b      	ldr	r3, [r3, #20]
 800569e:	f003 0302 	and.w	r3, r3, #2
 80056a2:	2b02      	cmp	r3, #2
 80056a4:	bf0c      	ite	eq
 80056a6:	2301      	moveq	r3, #1
 80056a8:	2300      	movne	r3, #0
 80056aa:	b2db      	uxtb	r3, r3
 80056ac:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	695b      	ldr	r3, [r3, #20]
 80056b4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80056b8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80056bc:	bf0c      	ite	eq
 80056be:	2301      	moveq	r3, #1
 80056c0:	2300      	movne	r3, #0
 80056c2:	b2db      	uxtb	r3, r3
 80056c4:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 80056c6:	e025      	b.n	8005714 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 80056c8:	f7fe fab0 	bl	8003c2c <HAL_GetTick>
 80056cc:	4602      	mov	r2, r0
 80056ce:	69fb      	ldr	r3, [r7, #28]
 80056d0:	1ad3      	subs	r3, r2, r3
 80056d2:	683a      	ldr	r2, [r7, #0]
 80056d4:	429a      	cmp	r2, r3
 80056d6:	d302      	bcc.n	80056de <HAL_I2C_IsDeviceReady+0x13a>
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d103      	bne.n	80056e6 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	22a0      	movs	r2, #160	@ 0xa0
 80056e2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	695b      	ldr	r3, [r3, #20]
 80056ec:	f003 0302 	and.w	r3, r3, #2
 80056f0:	2b02      	cmp	r3, #2
 80056f2:	bf0c      	ite	eq
 80056f4:	2301      	moveq	r3, #1
 80056f6:	2300      	movne	r3, #0
 80056f8:	b2db      	uxtb	r3, r3
 80056fa:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	695b      	ldr	r3, [r3, #20]
 8005702:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005706:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800570a:	bf0c      	ite	eq
 800570c:	2301      	moveq	r3, #1
 800570e:	2300      	movne	r3, #0
 8005710:	b2db      	uxtb	r3, r3
 8005712:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800571a:	b2db      	uxtb	r3, r3
 800571c:	2ba0      	cmp	r3, #160	@ 0xa0
 800571e:	d005      	beq.n	800572c <HAL_I2C_IsDeviceReady+0x188>
 8005720:	7dfb      	ldrb	r3, [r7, #23]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d102      	bne.n	800572c <HAL_I2C_IsDeviceReady+0x188>
 8005726:	7dbb      	ldrb	r3, [r7, #22]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d0cd      	beq.n	80056c8 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 800572c:	68fb      	ldr	r3, [r7, #12]
 800572e:	2220      	movs	r2, #32
 8005730:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	695b      	ldr	r3, [r3, #20]
 800573a:	f003 0302 	and.w	r3, r3, #2
 800573e:	2b02      	cmp	r3, #2
 8005740:	d129      	bne.n	8005796 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	681b      	ldr	r3, [r3, #0]
 8005746:	681a      	ldr	r2, [r3, #0]
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005750:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005752:	2300      	movs	r3, #0
 8005754:	613b      	str	r3, [r7, #16]
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	695b      	ldr	r3, [r3, #20]
 800575c:	613b      	str	r3, [r7, #16]
 800575e:	68fb      	ldr	r3, [r7, #12]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	699b      	ldr	r3, [r3, #24]
 8005764:	613b      	str	r3, [r7, #16]
 8005766:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005768:	69fb      	ldr	r3, [r7, #28]
 800576a:	9300      	str	r3, [sp, #0]
 800576c:	2319      	movs	r3, #25
 800576e:	2201      	movs	r2, #1
 8005770:	4921      	ldr	r1, [pc, #132]	@ (80057f8 <HAL_I2C_IsDeviceReady+0x254>)
 8005772:	68f8      	ldr	r0, [r7, #12]
 8005774:	f001 ff50 	bl	8007618 <I2C_WaitOnFlagUntilTimeout>
 8005778:	4603      	mov	r3, r0
 800577a:	2b00      	cmp	r3, #0
 800577c:	d001      	beq.n	8005782 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 800577e:	2301      	movs	r3, #1
 8005780:	e036      	b.n	80057f0 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	2220      	movs	r2, #32
 8005786:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	2200      	movs	r2, #0
 800578e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8005792:	2300      	movs	r3, #0
 8005794:	e02c      	b.n	80057f0 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	681a      	ldr	r2, [r3, #0]
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	681b      	ldr	r3, [r3, #0]
 80057a0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80057a4:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80057ae:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80057b0:	69fb      	ldr	r3, [r7, #28]
 80057b2:	9300      	str	r3, [sp, #0]
 80057b4:	2319      	movs	r3, #25
 80057b6:	2201      	movs	r2, #1
 80057b8:	490f      	ldr	r1, [pc, #60]	@ (80057f8 <HAL_I2C_IsDeviceReady+0x254>)
 80057ba:	68f8      	ldr	r0, [r7, #12]
 80057bc:	f001 ff2c 	bl	8007618 <I2C_WaitOnFlagUntilTimeout>
 80057c0:	4603      	mov	r3, r0
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d001      	beq.n	80057ca <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 80057c6:	2301      	movs	r3, #1
 80057c8:	e012      	b.n	80057f0 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 80057ca:	69bb      	ldr	r3, [r7, #24]
 80057cc:	3301      	adds	r3, #1
 80057ce:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 80057d0:	69ba      	ldr	r2, [r7, #24]
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	429a      	cmp	r2, r3
 80057d6:	f4ff af32 	bcc.w	800563e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 80057da:	68fb      	ldr	r3, [r7, #12]
 80057dc:	2220      	movs	r2, #32
 80057de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	2200      	movs	r2, #0
 80057e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80057ea:	2301      	movs	r3, #1
 80057ec:	e000      	b.n	80057f0 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 80057ee:	2302      	movs	r3, #2
  }
}
 80057f0:	4618      	mov	r0, r3
 80057f2:	3720      	adds	r7, #32
 80057f4:	46bd      	mov	sp, r7
 80057f6:	bd80      	pop	{r7, pc}
 80057f8:	00100002 	.word	0x00100002
 80057fc:	ffff0000 	.word	0xffff0000

08005800 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005800:	b580      	push	{r7, lr}
 8005802:	b088      	sub	sp, #32
 8005804:	af00      	add	r7, sp, #0
 8005806:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8005808:	2300      	movs	r3, #0
 800580a:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	685b      	ldr	r3, [r3, #4]
 8005812:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005818:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005820:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005828:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800582a:	7bfb      	ldrb	r3, [r7, #15]
 800582c:	2b10      	cmp	r3, #16
 800582e:	d003      	beq.n	8005838 <HAL_I2C_EV_IRQHandler+0x38>
 8005830:	7bfb      	ldrb	r3, [r7, #15]
 8005832:	2b40      	cmp	r3, #64	@ 0x40
 8005834:	f040 80b1 	bne.w	800599a <HAL_I2C_EV_IRQHandler+0x19a>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	699b      	ldr	r3, [r3, #24]
 800583e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	681b      	ldr	r3, [r3, #0]
 8005844:	695b      	ldr	r3, [r3, #20]
 8005846:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8005848:	69fb      	ldr	r3, [r7, #28]
 800584a:	f003 0301 	and.w	r3, r3, #1
 800584e:	2b00      	cmp	r3, #0
 8005850:	d10d      	bne.n	800586e <HAL_I2C_EV_IRQHandler+0x6e>
 8005852:	693b      	ldr	r3, [r7, #16]
 8005854:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8005858:	d003      	beq.n	8005862 <HAL_I2C_EV_IRQHandler+0x62>
 800585a:	693b      	ldr	r3, [r7, #16]
 800585c:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8005860:	d101      	bne.n	8005866 <HAL_I2C_EV_IRQHandler+0x66>
 8005862:	2301      	movs	r3, #1
 8005864:	e000      	b.n	8005868 <HAL_I2C_EV_IRQHandler+0x68>
 8005866:	2300      	movs	r3, #0
 8005868:	2b01      	cmp	r3, #1
 800586a:	f000 8114 	beq.w	8005a96 <HAL_I2C_EV_IRQHandler+0x296>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800586e:	69fb      	ldr	r3, [r7, #28]
 8005870:	f003 0301 	and.w	r3, r3, #1
 8005874:	2b00      	cmp	r3, #0
 8005876:	d00b      	beq.n	8005890 <HAL_I2C_EV_IRQHandler+0x90>
 8005878:	697b      	ldr	r3, [r7, #20]
 800587a:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800587e:	2b00      	cmp	r3, #0
 8005880:	d006      	beq.n	8005890 <HAL_I2C_EV_IRQHandler+0x90>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8005882:	6878      	ldr	r0, [r7, #4]
 8005884:	f002 f930 	bl	8007ae8 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8005888:	6878      	ldr	r0, [r7, #4]
 800588a:	f000 fd66 	bl	800635a <I2C_Master_SB>
 800588e:	e083      	b.n	8005998 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005890:	69fb      	ldr	r3, [r7, #28]
 8005892:	f003 0308 	and.w	r3, r3, #8
 8005896:	2b00      	cmp	r3, #0
 8005898:	d008      	beq.n	80058ac <HAL_I2C_EV_IRQHandler+0xac>
 800589a:	697b      	ldr	r3, [r7, #20]
 800589c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d003      	beq.n	80058ac <HAL_I2C_EV_IRQHandler+0xac>
    {
      I2C_Master_ADD10(hi2c);
 80058a4:	6878      	ldr	r0, [r7, #4]
 80058a6:	f000 fdde 	bl	8006466 <I2C_Master_ADD10>
 80058aa:	e075      	b.n	8005998 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80058ac:	69fb      	ldr	r3, [r7, #28]
 80058ae:	f003 0302 	and.w	r3, r3, #2
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d008      	beq.n	80058c8 <HAL_I2C_EV_IRQHandler+0xc8>
 80058b6:	697b      	ldr	r3, [r7, #20]
 80058b8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d003      	beq.n	80058c8 <HAL_I2C_EV_IRQHandler+0xc8>
    {
      I2C_Master_ADDR(hi2c);
 80058c0:	6878      	ldr	r0, [r7, #4]
 80058c2:	f000 fdfa 	bl	80064ba <I2C_Master_ADDR>
 80058c6:	e067      	b.n	8005998 <HAL_I2C_EV_IRQHandler+0x198>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80058c8:	69bb      	ldr	r3, [r7, #24]
 80058ca:	f003 0304 	and.w	r3, r3, #4
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d036      	beq.n	8005940 <HAL_I2C_EV_IRQHandler+0x140>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	685b      	ldr	r3, [r3, #4]
 80058d8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80058dc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80058e0:	f000 80db 	beq.w	8005a9a <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80058e4:	69fb      	ldr	r3, [r7, #28]
 80058e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d00d      	beq.n	800590a <HAL_I2C_EV_IRQHandler+0x10a>
 80058ee:	697b      	ldr	r3, [r7, #20]
 80058f0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80058f4:	2b00      	cmp	r3, #0
 80058f6:	d008      	beq.n	800590a <HAL_I2C_EV_IRQHandler+0x10a>
 80058f8:	69fb      	ldr	r3, [r7, #28]
 80058fa:	f003 0304 	and.w	r3, r3, #4
 80058fe:	2b00      	cmp	r3, #0
 8005900:	d103      	bne.n	800590a <HAL_I2C_EV_IRQHandler+0x10a>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8005902:	6878      	ldr	r0, [r7, #4]
 8005904:	f000 f9c2 	bl	8005c8c <I2C_MasterTransmit_TXE>
 8005908:	e046      	b.n	8005998 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800590a:	69fb      	ldr	r3, [r7, #28]
 800590c:	f003 0304 	and.w	r3, r3, #4
 8005910:	2b00      	cmp	r3, #0
 8005912:	f000 80c2 	beq.w	8005a9a <HAL_I2C_EV_IRQHandler+0x29a>
 8005916:	697b      	ldr	r3, [r7, #20]
 8005918:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800591c:	2b00      	cmp	r3, #0
 800591e:	f000 80bc 	beq.w	8005a9a <HAL_I2C_EV_IRQHandler+0x29a>
        {
          if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8005922:	7bbb      	ldrb	r3, [r7, #14]
 8005924:	2b21      	cmp	r3, #33	@ 0x21
 8005926:	d103      	bne.n	8005930 <HAL_I2C_EV_IRQHandler+0x130>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8005928:	6878      	ldr	r0, [r7, #4]
 800592a:	f000 fa4b 	bl	8005dc4 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800592e:	e0b4      	b.n	8005a9a <HAL_I2C_EV_IRQHandler+0x29a>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            if (CurrentMode == HAL_I2C_MODE_MEM)
 8005930:	7bfb      	ldrb	r3, [r7, #15]
 8005932:	2b40      	cmp	r3, #64	@ 0x40
 8005934:	f040 80b1 	bne.w	8005a9a <HAL_I2C_EV_IRQHandler+0x29a>
            {
              I2C_MemoryTransmit_TXE_BTF(hi2c);
 8005938:	6878      	ldr	r0, [r7, #4]
 800593a:	f000 fab9 	bl	8005eb0 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800593e:	e0ac      	b.n	8005a9a <HAL_I2C_EV_IRQHandler+0x29a>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	681b      	ldr	r3, [r3, #0]
 8005944:	685b      	ldr	r3, [r3, #4]
 8005946:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800594a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800594e:	f000 80a4 	beq.w	8005a9a <HAL_I2C_EV_IRQHandler+0x29a>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005952:	69fb      	ldr	r3, [r7, #28]
 8005954:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005958:	2b00      	cmp	r3, #0
 800595a:	d00d      	beq.n	8005978 <HAL_I2C_EV_IRQHandler+0x178>
 800595c:	697b      	ldr	r3, [r7, #20]
 800595e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005962:	2b00      	cmp	r3, #0
 8005964:	d008      	beq.n	8005978 <HAL_I2C_EV_IRQHandler+0x178>
 8005966:	69fb      	ldr	r3, [r7, #28]
 8005968:	f003 0304 	and.w	r3, r3, #4
 800596c:	2b00      	cmp	r3, #0
 800596e:	d103      	bne.n	8005978 <HAL_I2C_EV_IRQHandler+0x178>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8005970:	6878      	ldr	r0, [r7, #4]
 8005972:	f000 fb35 	bl	8005fe0 <I2C_MasterReceive_RXNE>
 8005976:	e00f      	b.n	8005998 <HAL_I2C_EV_IRQHandler+0x198>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005978:	69fb      	ldr	r3, [r7, #28]
 800597a:	f003 0304 	and.w	r3, r3, #4
 800597e:	2b00      	cmp	r3, #0
 8005980:	f000 808b 	beq.w	8005a9a <HAL_I2C_EV_IRQHandler+0x29a>
 8005984:	697b      	ldr	r3, [r7, #20]
 8005986:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800598a:	2b00      	cmp	r3, #0
 800598c:	f000 8085 	beq.w	8005a9a <HAL_I2C_EV_IRQHandler+0x29a>
        {
          I2C_MasterReceive_BTF(hi2c);
 8005990:	6878      	ldr	r0, [r7, #4]
 8005992:	f000 fbed 	bl	8006170 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005996:	e080      	b.n	8005a9a <HAL_I2C_EV_IRQHandler+0x29a>
 8005998:	e07f      	b.n	8005a9a <HAL_I2C_EV_IRQHandler+0x29a>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d004      	beq.n	80059ac <HAL_I2C_EV_IRQHandler+0x1ac>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	695b      	ldr	r3, [r3, #20]
 80059a8:	61fb      	str	r3, [r7, #28]
 80059aa:	e007      	b.n	80059bc <HAL_I2C_EV_IRQHandler+0x1bc>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	699b      	ldr	r3, [r3, #24]
 80059b2:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	695b      	ldr	r3, [r3, #20]
 80059ba:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80059bc:	69fb      	ldr	r3, [r7, #28]
 80059be:	f003 0302 	and.w	r3, r3, #2
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d011      	beq.n	80059ea <HAL_I2C_EV_IRQHandler+0x1ea>
 80059c6:	697b      	ldr	r3, [r7, #20]
 80059c8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d00c      	beq.n	80059ea <HAL_I2C_EV_IRQHandler+0x1ea>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d003      	beq.n	80059e0 <HAL_I2C_EV_IRQHandler+0x1e0>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	681b      	ldr	r3, [r3, #0]
 80059dc:	699b      	ldr	r3, [r3, #24]
 80059de:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80059e0:	69b9      	ldr	r1, [r7, #24]
 80059e2:	6878      	ldr	r0, [r7, #4]
 80059e4:	f000 ffb8 	bl	8006958 <I2C_Slave_ADDR>
 80059e8:	e05a      	b.n	8005aa0 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80059ea:	69fb      	ldr	r3, [r7, #28]
 80059ec:	f003 0310 	and.w	r3, r3, #16
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d008      	beq.n	8005a06 <HAL_I2C_EV_IRQHandler+0x206>
 80059f4:	697b      	ldr	r3, [r7, #20]
 80059f6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d003      	beq.n	8005a06 <HAL_I2C_EV_IRQHandler+0x206>
    {
      I2C_Slave_STOPF(hi2c);
 80059fe:	6878      	ldr	r0, [r7, #4]
 8005a00:	f000 fff2 	bl	80069e8 <I2C_Slave_STOPF>
 8005a04:	e04c      	b.n	8005aa0 <HAL_I2C_EV_IRQHandler+0x2a0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005a06:	7bbb      	ldrb	r3, [r7, #14]
 8005a08:	2b21      	cmp	r3, #33	@ 0x21
 8005a0a:	d002      	beq.n	8005a12 <HAL_I2C_EV_IRQHandler+0x212>
 8005a0c:	7bbb      	ldrb	r3, [r7, #14]
 8005a0e:	2b29      	cmp	r3, #41	@ 0x29
 8005a10:	d120      	bne.n	8005a54 <HAL_I2C_EV_IRQHandler+0x254>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005a12:	69fb      	ldr	r3, [r7, #28]
 8005a14:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005a18:	2b00      	cmp	r3, #0
 8005a1a:	d00d      	beq.n	8005a38 <HAL_I2C_EV_IRQHandler+0x238>
 8005a1c:	697b      	ldr	r3, [r7, #20]
 8005a1e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005a22:	2b00      	cmp	r3, #0
 8005a24:	d008      	beq.n	8005a38 <HAL_I2C_EV_IRQHandler+0x238>
 8005a26:	69fb      	ldr	r3, [r7, #28]
 8005a28:	f003 0304 	and.w	r3, r3, #4
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d103      	bne.n	8005a38 <HAL_I2C_EV_IRQHandler+0x238>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8005a30:	6878      	ldr	r0, [r7, #4]
 8005a32:	f000 fed3 	bl	80067dc <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005a36:	e032      	b.n	8005a9e <HAL_I2C_EV_IRQHandler+0x29e>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005a38:	69fb      	ldr	r3, [r7, #28]
 8005a3a:	f003 0304 	and.w	r3, r3, #4
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d02d      	beq.n	8005a9e <HAL_I2C_EV_IRQHandler+0x29e>
 8005a42:	697b      	ldr	r3, [r7, #20]
 8005a44:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005a48:	2b00      	cmp	r3, #0
 8005a4a:	d028      	beq.n	8005a9e <HAL_I2C_EV_IRQHandler+0x29e>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8005a4c:	6878      	ldr	r0, [r7, #4]
 8005a4e:	f000 ff02 	bl	8006856 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005a52:	e024      	b.n	8005a9e <HAL_I2C_EV_IRQHandler+0x29e>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005a54:	69fb      	ldr	r3, [r7, #28]
 8005a56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d00d      	beq.n	8005a7a <HAL_I2C_EV_IRQHandler+0x27a>
 8005a5e:	697b      	ldr	r3, [r7, #20]
 8005a60:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d008      	beq.n	8005a7a <HAL_I2C_EV_IRQHandler+0x27a>
 8005a68:	69fb      	ldr	r3, [r7, #28]
 8005a6a:	f003 0304 	and.w	r3, r3, #4
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d103      	bne.n	8005a7a <HAL_I2C_EV_IRQHandler+0x27a>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8005a72:	6878      	ldr	r0, [r7, #4]
 8005a74:	f000 ff10 	bl	8006898 <I2C_SlaveReceive_RXNE>
 8005a78:	e012      	b.n	8005aa0 <HAL_I2C_EV_IRQHandler+0x2a0>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005a7a:	69fb      	ldr	r3, [r7, #28]
 8005a7c:	f003 0304 	and.w	r3, r3, #4
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d00d      	beq.n	8005aa0 <HAL_I2C_EV_IRQHandler+0x2a0>
 8005a84:	697b      	ldr	r3, [r7, #20]
 8005a86:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	d008      	beq.n	8005aa0 <HAL_I2C_EV_IRQHandler+0x2a0>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8005a8e:	6878      	ldr	r0, [r7, #4]
 8005a90:	f000 ff40 	bl	8006914 <I2C_SlaveReceive_BTF>
 8005a94:	e004      	b.n	8005aa0 <HAL_I2C_EV_IRQHandler+0x2a0>
      return;
 8005a96:	bf00      	nop
 8005a98:	e002      	b.n	8005aa0 <HAL_I2C_EV_IRQHandler+0x2a0>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005a9a:	bf00      	nop
 8005a9c:	e000      	b.n	8005aa0 <HAL_I2C_EV_IRQHandler+0x2a0>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005a9e:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8005aa0:	3720      	adds	r7, #32
 8005aa2:	46bd      	mov	sp, r7
 8005aa4:	bd80      	pop	{r7, pc}

08005aa6 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8005aa6:	b580      	push	{r7, lr}
 8005aa8:	b08a      	sub	sp, #40	@ 0x28
 8005aaa:	af00      	add	r7, sp, #0
 8005aac:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	695b      	ldr	r3, [r3, #20]
 8005ab4:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	685b      	ldr	r3, [r3, #4]
 8005abc:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8005abe:	2300      	movs	r3, #0
 8005ac0:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005ac8:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005aca:	6a3b      	ldr	r3, [r7, #32]
 8005acc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d00d      	beq.n	8005af0 <HAL_I2C_ER_IRQHandler+0x4a>
 8005ad4:	69fb      	ldr	r3, [r7, #28]
 8005ad6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d008      	beq.n	8005af0 <HAL_I2C_ER_IRQHandler+0x4a>
  {
    error |= HAL_I2C_ERROR_BERR;
 8005ade:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ae0:	f043 0301 	orr.w	r3, r3, #1
 8005ae4:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005aee:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005af0:	6a3b      	ldr	r3, [r7, #32]
 8005af2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d00d      	beq.n	8005b16 <HAL_I2C_ER_IRQHandler+0x70>
 8005afa:	69fb      	ldr	r3, [r7, #28]
 8005afc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d008      	beq.n	8005b16 <HAL_I2C_ER_IRQHandler+0x70>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8005b04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b06:	f043 0302 	orr.w	r3, r3, #2
 8005b0a:	627b      	str	r3, [r7, #36]	@ 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	f46f 7200 	mvn.w	r2, #512	@ 0x200
 8005b14:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005b16:	6a3b      	ldr	r3, [r7, #32]
 8005b18:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d03e      	beq.n	8005b9e <HAL_I2C_ER_IRQHandler+0xf8>
 8005b20:	69fb      	ldr	r3, [r7, #28]
 8005b22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d039      	beq.n	8005b9e <HAL_I2C_ER_IRQHandler+0xf8>
  {
    tmp1 = CurrentMode;
 8005b2a:	7efb      	ldrb	r3, [r7, #27]
 8005b2c:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b32:	b29b      	uxth	r3, r3
 8005b34:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005b3c:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b42:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8005b44:	7ebb      	ldrb	r3, [r7, #26]
 8005b46:	2b20      	cmp	r3, #32
 8005b48:	d112      	bne.n	8005b70 <HAL_I2C_ER_IRQHandler+0xca>
 8005b4a:	697b      	ldr	r3, [r7, #20]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d10f      	bne.n	8005b70 <HAL_I2C_ER_IRQHandler+0xca>
 8005b50:	7cfb      	ldrb	r3, [r7, #19]
 8005b52:	2b21      	cmp	r3, #33	@ 0x21
 8005b54:	d008      	beq.n	8005b68 <HAL_I2C_ER_IRQHandler+0xc2>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8005b56:	7cfb      	ldrb	r3, [r7, #19]
 8005b58:	2b29      	cmp	r3, #41	@ 0x29
 8005b5a:	d005      	beq.n	8005b68 <HAL_I2C_ER_IRQHandler+0xc2>
 8005b5c:	7cfb      	ldrb	r3, [r7, #19]
 8005b5e:	2b28      	cmp	r3, #40	@ 0x28
 8005b60:	d106      	bne.n	8005b70 <HAL_I2C_ER_IRQHandler+0xca>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	2b21      	cmp	r3, #33	@ 0x21
 8005b66:	d103      	bne.n	8005b70 <HAL_I2C_ER_IRQHandler+0xca>
    {
      I2C_Slave_AF(hi2c);
 8005b68:	6878      	ldr	r0, [r7, #4]
 8005b6a:	f001 f86d 	bl	8006c48 <I2C_Slave_AF>
 8005b6e:	e016      	b.n	8005b9e <HAL_I2C_ER_IRQHandler+0xf8>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005b78:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8005b7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b7c:	f043 0304 	orr.w	r3, r3, #4
 8005b80:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8005b82:	7efb      	ldrb	r3, [r7, #27]
 8005b84:	2b10      	cmp	r3, #16
 8005b86:	d002      	beq.n	8005b8e <HAL_I2C_ER_IRQHandler+0xe8>
 8005b88:	7efb      	ldrb	r3, [r7, #27]
 8005b8a:	2b40      	cmp	r3, #64	@ 0x40
 8005b8c:	d107      	bne.n	8005b9e <HAL_I2C_ER_IRQHandler+0xf8>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	681a      	ldr	r2, [r3, #0]
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005b9c:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005b9e:	6a3b      	ldr	r3, [r7, #32]
 8005ba0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d00d      	beq.n	8005bc4 <HAL_I2C_ER_IRQHandler+0x11e>
 8005ba8:	69fb      	ldr	r3, [r7, #28]
 8005baa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005bae:	2b00      	cmp	r3, #0
 8005bb0:	d008      	beq.n	8005bc4 <HAL_I2C_ER_IRQHandler+0x11e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8005bb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bb4:	f043 0308 	orr.w	r3, r3, #8
 8005bb8:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005bba:	687b      	ldr	r3, [r7, #4]
 8005bbc:	681b      	ldr	r3, [r3, #0]
 8005bbe:	f46f 6200 	mvn.w	r2, #2048	@ 0x800
 8005bc2:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8005bc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d008      	beq.n	8005bdc <HAL_I2C_ER_IRQHandler+0x136>
  {
    hi2c->ErrorCode |= error;
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8005bce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bd0:	431a      	orrs	r2, r3
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	641a      	str	r2, [r3, #64]	@ 0x40
    I2C_ITError(hi2c);
 8005bd6:	6878      	ldr	r0, [r7, #4]
 8005bd8:	f001 f8aa 	bl	8006d30 <I2C_ITError>
  }
}
 8005bdc:	bf00      	nop
 8005bde:	3728      	adds	r7, #40	@ 0x28
 8005be0:	46bd      	mov	sp, r7
 8005be2:	bd80      	pop	{r7, pc}

08005be4 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005be4:	b480      	push	{r7}
 8005be6:	b083      	sub	sp, #12
 8005be8:	af00      	add	r7, sp, #0
 8005bea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8005bec:	bf00      	nop
 8005bee:	370c      	adds	r7, #12
 8005bf0:	46bd      	mov	sp, r7
 8005bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf6:	4770      	bx	lr

08005bf8 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005bf8:	b480      	push	{r7}
 8005bfa:	b083      	sub	sp, #12
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8005c00:	bf00      	nop
 8005c02:	370c      	adds	r7, #12
 8005c04:	46bd      	mov	sp, r7
 8005c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0a:	4770      	bx	lr

08005c0c <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005c0c:	b480      	push	{r7}
 8005c0e:	b083      	sub	sp, #12
 8005c10:	af00      	add	r7, sp, #0
 8005c12:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8005c14:	bf00      	nop
 8005c16:	370c      	adds	r7, #12
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c1e:	4770      	bx	lr

08005c20 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005c20:	b480      	push	{r7}
 8005c22:	b083      	sub	sp, #12
 8005c24:	af00      	add	r7, sp, #0
 8005c26:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8005c28:	bf00      	nop
 8005c2a:	370c      	adds	r7, #12
 8005c2c:	46bd      	mov	sp, r7
 8005c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c32:	4770      	bx	lr

08005c34 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8005c34:	b480      	push	{r7}
 8005c36:	b083      	sub	sp, #12
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
 8005c3c:	460b      	mov	r3, r1
 8005c3e:	70fb      	strb	r3, [r7, #3]
 8005c40:	4613      	mov	r3, r2
 8005c42:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8005c44:	bf00      	nop
 8005c46:	370c      	adds	r7, #12
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4e:	4770      	bx	lr

08005c50 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005c50:	b480      	push	{r7}
 8005c52:	b083      	sub	sp, #12
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8005c58:	bf00      	nop
 8005c5a:	370c      	adds	r7, #12
 8005c5c:	46bd      	mov	sp, r7
 8005c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c62:	4770      	bx	lr

08005c64 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005c64:	b480      	push	{r7}
 8005c66:	b083      	sub	sp, #12
 8005c68:	af00      	add	r7, sp, #0
 8005c6a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8005c6c:	bf00      	nop
 8005c6e:	370c      	adds	r7, #12
 8005c70:	46bd      	mov	sp, r7
 8005c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c76:	4770      	bx	lr

08005c78 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005c78:	b480      	push	{r7}
 8005c7a:	b083      	sub	sp, #12
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8005c80:	bf00      	nop
 8005c82:	370c      	adds	r7, #12
 8005c84:	46bd      	mov	sp, r7
 8005c86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8a:	4770      	bx	lr

08005c8c <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b084      	sub	sp, #16
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005c9a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005ca2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ca8:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d150      	bne.n	8005d54 <I2C_MasterTransmit_TXE+0xc8>
 8005cb2:	7bfb      	ldrb	r3, [r7, #15]
 8005cb4:	2b21      	cmp	r3, #33	@ 0x21
 8005cb6:	d14d      	bne.n	8005d54 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005cb8:	68bb      	ldr	r3, [r7, #8]
 8005cba:	2b08      	cmp	r3, #8
 8005cbc:	d01d      	beq.n	8005cfa <I2C_MasterTransmit_TXE+0x6e>
 8005cbe:	68bb      	ldr	r3, [r7, #8]
 8005cc0:	2b20      	cmp	r3, #32
 8005cc2:	d01a      	beq.n	8005cfa <I2C_MasterTransmit_TXE+0x6e>
 8005cc4:	68bb      	ldr	r3, [r7, #8]
 8005cc6:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005cca:	d016      	beq.n	8005cfa <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	685a      	ldr	r2, [r3, #4]
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005cda:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2211      	movs	r2, #17
 8005ce0:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2220      	movs	r2, #32
 8005cee:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8005cf2:	6878      	ldr	r0, [r7, #4]
 8005cf4:	f7ff ff76 	bl	8005be4 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005cf8:	e060      	b.n	8005dbc <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	685a      	ldr	r2, [r3, #4]
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005d08:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	681a      	ldr	r2, [r3, #0]
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005d18:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	2220      	movs	r2, #32
 8005d24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005d2e:	b2db      	uxtb	r3, r3
 8005d30:	2b40      	cmp	r3, #64	@ 0x40
 8005d32:	d107      	bne.n	8005d44 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2200      	movs	r2, #0
 8005d38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8005d3c:	6878      	ldr	r0, [r7, #4]
 8005d3e:	f7ff ff91 	bl	8005c64 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005d42:	e03b      	b.n	8005dbc <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	2200      	movs	r2, #0
 8005d48:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005d4c:	6878      	ldr	r0, [r7, #4]
 8005d4e:	f7ff ff49 	bl	8005be4 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005d52:	e033      	b.n	8005dbc <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8005d54:	7bfb      	ldrb	r3, [r7, #15]
 8005d56:	2b21      	cmp	r3, #33	@ 0x21
 8005d58:	d005      	beq.n	8005d66 <I2C_MasterTransmit_TXE+0xda>
 8005d5a:	7bbb      	ldrb	r3, [r7, #14]
 8005d5c:	2b40      	cmp	r3, #64	@ 0x40
 8005d5e:	d12d      	bne.n	8005dbc <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8005d60:	7bfb      	ldrb	r3, [r7, #15]
 8005d62:	2b22      	cmp	r3, #34	@ 0x22
 8005d64:	d12a      	bne.n	8005dbc <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d6a:	b29b      	uxth	r3, r3
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d108      	bne.n	8005d82 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	681b      	ldr	r3, [r3, #0]
 8005d74:	685a      	ldr	r2, [r3, #4]
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005d7e:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8005d80:	e01c      	b.n	8005dbc <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005d88:	b2db      	uxtb	r3, r3
 8005d8a:	2b40      	cmp	r3, #64	@ 0x40
 8005d8c:	d103      	bne.n	8005d96 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8005d8e:	6878      	ldr	r0, [r7, #4]
 8005d90:	f000 f88e 	bl	8005eb0 <I2C_MemoryTransmit_TXE_BTF>
}
 8005d94:	e012      	b.n	8005dbc <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005d9a:	781a      	ldrb	r2, [r3, #0]
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005da6:	1c5a      	adds	r2, r3, #1
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005db0:	b29b      	uxth	r3, r3
 8005db2:	3b01      	subs	r3, #1
 8005db4:	b29a      	uxth	r2, r3
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8005dba:	e7ff      	b.n	8005dbc <I2C_MasterTransmit_TXE+0x130>
 8005dbc:	bf00      	nop
 8005dbe:	3710      	adds	r7, #16
 8005dc0:	46bd      	mov	sp, r7
 8005dc2:	bd80      	pop	{r7, pc}

08005dc4 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005dc4:	b580      	push	{r7, lr}
 8005dc6:	b084      	sub	sp, #16
 8005dc8:	af00      	add	r7, sp, #0
 8005dca:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005dcc:	687b      	ldr	r3, [r7, #4]
 8005dce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005dd0:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005dd8:	b2db      	uxtb	r3, r3
 8005dda:	2b21      	cmp	r3, #33	@ 0x21
 8005ddc:	d164      	bne.n	8005ea8 <I2C_MasterTransmit_BTF+0xe4>
  {
    if (hi2c->XferCount != 0U)
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005de2:	b29b      	uxth	r3, r3
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d012      	beq.n	8005e0e <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005dec:	781a      	ldrb	r2, [r3, #0]
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	681b      	ldr	r3, [r3, #0]
 8005df2:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005df8:	1c5a      	adds	r2, r3, #1
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005e02:	b29b      	uxth	r3, r3
 8005e04:	3b01      	subs	r3, #1
 8005e06:	b29a      	uxth	r2, r3
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8005e0c:	e04c      	b.n	8005ea8 <I2C_MasterTransmit_BTF+0xe4>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005e0e:	68fb      	ldr	r3, [r7, #12]
 8005e10:	2b08      	cmp	r3, #8
 8005e12:	d01d      	beq.n	8005e50 <I2C_MasterTransmit_BTF+0x8c>
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	2b20      	cmp	r3, #32
 8005e18:	d01a      	beq.n	8005e50 <I2C_MasterTransmit_BTF+0x8c>
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005e20:	d016      	beq.n	8005e50 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	685a      	ldr	r2, [r3, #4]
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005e30:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	2211      	movs	r2, #17
 8005e36:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2220      	movs	r2, #32
 8005e44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005e48:	6878      	ldr	r0, [r7, #4]
 8005e4a:	f7ff fecb 	bl	8005be4 <HAL_I2C_MasterTxCpltCallback>
}
 8005e4e:	e02b      	b.n	8005ea8 <I2C_MasterTransmit_BTF+0xe4>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	685a      	ldr	r2, [r3, #4]
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	681b      	ldr	r3, [r3, #0]
 8005e5a:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005e5e:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	681a      	ldr	r2, [r3, #0]
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005e6e:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2200      	movs	r2, #0
 8005e74:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	2220      	movs	r2, #32
 8005e7a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005e84:	b2db      	uxtb	r3, r3
 8005e86:	2b40      	cmp	r3, #64	@ 0x40
 8005e88:	d107      	bne.n	8005e9a <I2C_MasterTransmit_BTF+0xd6>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	2200      	movs	r2, #0
 8005e8e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MemTxCpltCallback(hi2c);
 8005e92:	6878      	ldr	r0, [r7, #4]
 8005e94:	f7ff fee6 	bl	8005c64 <HAL_I2C_MemTxCpltCallback>
}
 8005e98:	e006      	b.n	8005ea8 <I2C_MasterTransmit_BTF+0xe4>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          HAL_I2C_MasterTxCpltCallback(hi2c);
 8005ea2:	6878      	ldr	r0, [r7, #4]
 8005ea4:	f7ff fe9e 	bl	8005be4 <HAL_I2C_MasterTxCpltCallback>
}
 8005ea8:	bf00      	nop
 8005eaa:	3710      	adds	r7, #16
 8005eac:	46bd      	mov	sp, r7
 8005eae:	bd80      	pop	{r7, pc}

08005eb0 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b084      	sub	sp, #16
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005ebe:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d11d      	bne.n	8005f04 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8005ecc:	2b01      	cmp	r3, #1
 8005ece:	d10b      	bne.n	8005ee8 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8005ed0:	687b      	ldr	r3, [r7, #4]
 8005ed2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005ed4:	b2da      	uxtb	r2, r3
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005ee0:	1c9a      	adds	r2, r3, #2
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear TXE and BTF flags */
    I2C_Flush_DR(hi2c);
  }
}
 8005ee6:	e077      	b.n	8005fd8 <I2C_MemoryTransmit_TXE_BTF+0x128>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005eec:	b29b      	uxth	r3, r3
 8005eee:	121b      	asrs	r3, r3, #8
 8005ef0:	b2da      	uxtb	r2, r3
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005efc:	1c5a      	adds	r2, r3, #1
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8005f02:	e069      	b.n	8005fd8 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 1U)
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f08:	2b01      	cmp	r3, #1
 8005f0a:	d10b      	bne.n	8005f24 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8005f10:	b2da      	uxtb	r2, r3
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f1c:	1c5a      	adds	r2, r3, #1
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8005f22:	e059      	b.n	8005fd8 <I2C_MemoryTransmit_TXE_BTF+0x128>
  else if (hi2c->EventCount == 2U)
 8005f24:	687b      	ldr	r3, [r7, #4]
 8005f26:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f28:	2b02      	cmp	r3, #2
 8005f2a:	d152      	bne.n	8005fd2 <I2C_MemoryTransmit_TXE_BTF+0x122>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8005f2c:	7bfb      	ldrb	r3, [r7, #15]
 8005f2e:	2b22      	cmp	r3, #34	@ 0x22
 8005f30:	d10d      	bne.n	8005f4e <I2C_MemoryTransmit_TXE_BTF+0x9e>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	681a      	ldr	r2, [r3, #0]
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005f40:	601a      	str	r2, [r3, #0]
      hi2c->EventCount++;
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005f46:	1c5a      	adds	r2, r3, #1
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8005f4c:	e044      	b.n	8005fd8 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f52:	b29b      	uxth	r3, r3
 8005f54:	2b00      	cmp	r3, #0
 8005f56:	d015      	beq.n	8005f84 <I2C_MemoryTransmit_TXE_BTF+0xd4>
 8005f58:	7bfb      	ldrb	r3, [r7, #15]
 8005f5a:	2b21      	cmp	r3, #33	@ 0x21
 8005f5c:	d112      	bne.n	8005f84 <I2C_MemoryTransmit_TXE_BTF+0xd4>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f62:	781a      	ldrb	r2, [r3, #0]
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f6e:	1c5a      	adds	r2, r3, #1
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	625a      	str	r2, [r3, #36]	@ 0x24
      hi2c->XferCount--;
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f78:	b29b      	uxth	r3, r3
 8005f7a:	3b01      	subs	r3, #1
 8005f7c:	b29a      	uxth	r2, r3
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8005f82:	e029      	b.n	8005fd8 <I2C_MemoryTransmit_TXE_BTF+0x128>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005f88:	b29b      	uxth	r3, r3
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d124      	bne.n	8005fd8 <I2C_MemoryTransmit_TXE_BTF+0x128>
 8005f8e:	7bfb      	ldrb	r3, [r7, #15]
 8005f90:	2b21      	cmp	r3, #33	@ 0x21
 8005f92:	d121      	bne.n	8005fd8 <I2C_MemoryTransmit_TXE_BTF+0x128>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	685a      	ldr	r2, [r3, #4]
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	681b      	ldr	r3, [r3, #0]
 8005f9e:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8005fa2:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	681b      	ldr	r3, [r3, #0]
 8005fa8:	681a      	ldr	r2, [r3, #0]
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005fb2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2200      	movs	r2, #0
 8005fb8:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	2220      	movs	r2, #32
 8005fbe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8005fca:	6878      	ldr	r0, [r7, #4]
 8005fcc:	f7ff fe4a 	bl	8005c64 <HAL_I2C_MemTxCpltCallback>
}
 8005fd0:	e002      	b.n	8005fd8 <I2C_MemoryTransmit_TXE_BTF+0x128>
    I2C_Flush_DR(hi2c);
 8005fd2:	6878      	ldr	r0, [r7, #4]
 8005fd4:	f7fe fe14 	bl	8004c00 <I2C_Flush_DR>
}
 8005fd8:	bf00      	nop
 8005fda:	3710      	adds	r7, #16
 8005fdc:	46bd      	mov	sp, r7
 8005fde:	bd80      	pop	{r7, pc}

08005fe0 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b084      	sub	sp, #16
 8005fe4:	af00      	add	r7, sp, #0
 8005fe6:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005fee:	b2db      	uxtb	r3, r3
 8005ff0:	2b22      	cmp	r3, #34	@ 0x22
 8005ff2:	f040 80b9 	bne.w	8006168 <I2C_MasterReceive_RXNE+0x188>
  {
    uint32_t tmp;
    uint32_t CurrentXferOptions;

    CurrentXferOptions = hi2c->XferOptions;
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ffa:	60fb      	str	r3, [r7, #12]
    tmp = hi2c->XferCount;
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006000:	b29b      	uxth	r3, r3
 8006002:	60bb      	str	r3, [r7, #8]
    if (tmp > 3U)
 8006004:	68bb      	ldr	r3, [r7, #8]
 8006006:	2b03      	cmp	r3, #3
 8006008:	d921      	bls.n	800604e <I2C_MasterReceive_RXNE+0x6e>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	691a      	ldr	r2, [r3, #16]
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006014:	b2d2      	uxtb	r2, r2
 8006016:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800601c:	1c5a      	adds	r2, r3, #1
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006026:	b29b      	uxth	r3, r3
 8006028:	3b01      	subs	r3, #1
 800602a:	b29a      	uxth	r2, r3
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006034:	b29b      	uxth	r3, r3
 8006036:	2b03      	cmp	r3, #3
 8006038:	f040 8096 	bne.w	8006168 <I2C_MasterReceive_RXNE+0x188>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	685a      	ldr	r2, [r3, #4]
 8006042:	687b      	ldr	r3, [r7, #4]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800604a:	605a      	str	r2, [r3, #4]
      /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
         on BTF subroutine if there is a reception delay between N-1 and N byte */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
    }
  }
}
 800604c:	e08c      	b.n	8006168 <I2C_MasterReceive_RXNE+0x188>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006052:	2b02      	cmp	r3, #2
 8006054:	d07f      	beq.n	8006156 <I2C_MasterReceive_RXNE+0x176>
 8006056:	68bb      	ldr	r3, [r7, #8]
 8006058:	2b01      	cmp	r3, #1
 800605a:	d002      	beq.n	8006062 <I2C_MasterReceive_RXNE+0x82>
 800605c:	68bb      	ldr	r3, [r7, #8]
 800605e:	2b00      	cmp	r3, #0
 8006060:	d179      	bne.n	8006156 <I2C_MasterReceive_RXNE+0x176>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006062:	6878      	ldr	r0, [r7, #4]
 8006064:	f001 fc82 	bl	800796c <I2C_WaitOnSTOPRequestThroughIT>
 8006068:	4603      	mov	r3, r0
 800606a:	2b00      	cmp	r3, #0
 800606c:	d14c      	bne.n	8006108 <I2C_MasterReceive_RXNE+0x128>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	681b      	ldr	r3, [r3, #0]
 8006072:	681a      	ldr	r2, [r3, #0]
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800607c:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	685a      	ldr	r2, [r3, #4]
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	681b      	ldr	r3, [r3, #0]
 8006088:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 800608c:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	691a      	ldr	r2, [r3, #16]
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006098:	b2d2      	uxtb	r2, r2
 800609a:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060a0:	1c5a      	adds	r2, r3, #1
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80060aa:	b29b      	uxth	r3, r3
 80060ac:	3b01      	subs	r3, #1
 80060ae:	b29a      	uxth	r2, r3
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	2220      	movs	r2, #32
 80060b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80060c2:	b2db      	uxtb	r3, r3
 80060c4:	2b40      	cmp	r3, #64	@ 0x40
 80060c6:	d10a      	bne.n	80060de <I2C_MasterReceive_RXNE+0xfe>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	2200      	movs	r2, #0
 80060cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	2200      	movs	r2, #0
 80060d4:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 80060d6:	6878      	ldr	r0, [r7, #4]
 80060d8:	f7fd f92e 	bl	8003338 <HAL_I2C_MemRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80060dc:	e044      	b.n	8006168 <I2C_MasterReceive_RXNE+0x188>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	2200      	movs	r2, #0
 80060e2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 80060e6:	68fb      	ldr	r3, [r7, #12]
 80060e8:	2b08      	cmp	r3, #8
 80060ea:	d002      	beq.n	80060f2 <I2C_MasterReceive_RXNE+0x112>
 80060ec:	68fb      	ldr	r3, [r7, #12]
 80060ee:	2b20      	cmp	r3, #32
 80060f0:	d103      	bne.n	80060fa <I2C_MasterReceive_RXNE+0x11a>
            hi2c->PreviousState = I2C_STATE_NONE;
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	2200      	movs	r2, #0
 80060f6:	631a      	str	r2, [r3, #48]	@ 0x30
 80060f8:	e002      	b.n	8006100 <I2C_MasterReceive_RXNE+0x120>
            hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	2212      	movs	r2, #18
 80060fe:	631a      	str	r2, [r3, #48]	@ 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8006100:	6878      	ldr	r0, [r7, #4]
 8006102:	f7ff fd79 	bl	8005bf8 <HAL_I2C_MasterRxCpltCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006106:	e02f      	b.n	8006168 <I2C_MasterReceive_RXNE+0x188>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	685a      	ldr	r2, [r3, #4]
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006116:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	691a      	ldr	r2, [r3, #16]
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006122:	b2d2      	uxtb	r2, r2
 8006124:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800612a:	1c5a      	adds	r2, r3, #1
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	625a      	str	r2, [r3, #36]	@ 0x24
        hi2c->XferCount--;
 8006130:	687b      	ldr	r3, [r7, #4]
 8006132:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006134:	b29b      	uxth	r3, r3
 8006136:	3b01      	subs	r3, #1
 8006138:	b29a      	uxth	r2, r3
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	2220      	movs	r2, #32
 8006142:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	2200      	movs	r2, #0
 800614a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 800614e:	6878      	ldr	r0, [r7, #4]
 8006150:	f7fd f91a 	bl	8003388 <HAL_I2C_ErrorCallback>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8006154:	e008      	b.n	8006168 <I2C_MasterReceive_RXNE+0x188>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	685a      	ldr	r2, [r3, #4]
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006164:	605a      	str	r2, [r3, #4]
}
 8006166:	e7ff      	b.n	8006168 <I2C_MasterReceive_RXNE+0x188>
 8006168:	bf00      	nop
 800616a:	3710      	adds	r7, #16
 800616c:	46bd      	mov	sp, r7
 800616e:	bd80      	pop	{r7, pc}

08006170 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8006170:	b580      	push	{r7, lr}
 8006172:	b084      	sub	sp, #16
 8006174:	af00      	add	r7, sp, #0
 8006176:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800617c:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006182:	b29b      	uxth	r3, r3
 8006184:	2b04      	cmp	r3, #4
 8006186:	d11b      	bne.n	80061c0 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	685a      	ldr	r2, [r3, #4]
 800618e:	687b      	ldr	r3, [r7, #4]
 8006190:	681b      	ldr	r3, [r3, #0]
 8006192:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006196:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	691a      	ldr	r2, [r3, #16]
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061a2:	b2d2      	uxtb	r2, r2
 80061a4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80061aa:	1c5a      	adds	r2, r3, #1
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80061b0:	687b      	ldr	r3, [r7, #4]
 80061b2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80061b4:	b29b      	uxth	r3, r3
 80061b6:	3b01      	subs	r3, #1
 80061b8:	b29a      	uxth	r2, r3
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80061be:	e0c8      	b.n	8006352 <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 3U)
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80061c4:	b29b      	uxth	r3, r3
 80061c6:	2b03      	cmp	r3, #3
 80061c8:	d129      	bne.n	800621e <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	685a      	ldr	r2, [r3, #4]
 80061d0:	687b      	ldr	r3, [r7, #4]
 80061d2:	681b      	ldr	r3, [r3, #0]
 80061d4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80061d8:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80061da:	68fb      	ldr	r3, [r7, #12]
 80061dc:	2b04      	cmp	r3, #4
 80061de:	d00a      	beq.n	80061f6 <I2C_MasterReceive_BTF+0x86>
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	2b02      	cmp	r3, #2
 80061e4:	d007      	beq.n	80061f6 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	681a      	ldr	r2, [r3, #0]
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80061f4:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	681b      	ldr	r3, [r3, #0]
 80061fa:	691a      	ldr	r2, [r3, #16]
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006200:	b2d2      	uxtb	r2, r2
 8006202:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006208:	1c5a      	adds	r2, r3, #1
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006212:	b29b      	uxth	r3, r3
 8006214:	3b01      	subs	r3, #1
 8006216:	b29a      	uxth	r2, r3
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 800621c:	e099      	b.n	8006352 <I2C_MasterReceive_BTF+0x1e2>
  else if (hi2c->XferCount == 2U)
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006222:	b29b      	uxth	r3, r3
 8006224:	2b02      	cmp	r3, #2
 8006226:	f040 8081 	bne.w	800632c <I2C_MasterReceive_BTF+0x1bc>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	2b01      	cmp	r3, #1
 800622e:	d002      	beq.n	8006236 <I2C_MasterReceive_BTF+0xc6>
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	2b10      	cmp	r3, #16
 8006234:	d108      	bne.n	8006248 <I2C_MasterReceive_BTF+0xd8>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	681b      	ldr	r3, [r3, #0]
 800623a:	681a      	ldr	r2, [r3, #0]
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006244:	601a      	str	r2, [r3, #0]
 8006246:	e019      	b.n	800627c <I2C_MasterReceive_BTF+0x10c>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	2b04      	cmp	r3, #4
 800624c:	d002      	beq.n	8006254 <I2C_MasterReceive_BTF+0xe4>
 800624e:	68fb      	ldr	r3, [r7, #12]
 8006250:	2b02      	cmp	r3, #2
 8006252:	d108      	bne.n	8006266 <I2C_MasterReceive_BTF+0xf6>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	681b      	ldr	r3, [r3, #0]
 8006258:	681a      	ldr	r2, [r3, #0]
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006262:	601a      	str	r2, [r3, #0]
 8006264:	e00a      	b.n	800627c <I2C_MasterReceive_BTF+0x10c>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8006266:	68fb      	ldr	r3, [r7, #12]
 8006268:	2b10      	cmp	r3, #16
 800626a:	d007      	beq.n	800627c <I2C_MasterReceive_BTF+0x10c>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	681a      	ldr	r2, [r3, #0]
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800627a:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	691a      	ldr	r2, [r3, #16]
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006286:	b2d2      	uxtb	r2, r2
 8006288:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800628e:	1c5a      	adds	r2, r3, #1
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006298:	b29b      	uxth	r3, r3
 800629a:	3b01      	subs	r3, #1
 800629c:	b29a      	uxth	r2, r3
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	691a      	ldr	r2, [r3, #16]
 80062a8:	687b      	ldr	r3, [r7, #4]
 80062aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062ac:	b2d2      	uxtb	r2, r2
 80062ae:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80062b4:	1c5a      	adds	r2, r3, #1
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80062be:	b29b      	uxth	r3, r3
 80062c0:	3b01      	subs	r3, #1
 80062c2:	b29a      	uxth	r2, r3
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	685a      	ldr	r2, [r3, #4]
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80062d6:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	2220      	movs	r2, #32
 80062dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80062e6:	b2db      	uxtb	r3, r3
 80062e8:	2b40      	cmp	r3, #64	@ 0x40
 80062ea:	d10a      	bne.n	8006302 <I2C_MasterReceive_BTF+0x192>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2200      	movs	r2, #0
 80062f0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	2200      	movs	r2, #0
 80062f8:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80062fa:	6878      	ldr	r0, [r7, #4]
 80062fc:	f7fd f81c 	bl	8003338 <HAL_I2C_MemRxCpltCallback>
}
 8006300:	e027      	b.n	8006352 <I2C_MasterReceive_BTF+0x1e2>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	2200      	movs	r2, #0
 8006306:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	2b08      	cmp	r3, #8
 800630e:	d002      	beq.n	8006316 <I2C_MasterReceive_BTF+0x1a6>
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	2b20      	cmp	r3, #32
 8006314:	d103      	bne.n	800631e <I2C_MasterReceive_BTF+0x1ae>
        hi2c->PreviousState = I2C_STATE_NONE;
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	2200      	movs	r2, #0
 800631a:	631a      	str	r2, [r3, #48]	@ 0x30
 800631c:	e002      	b.n	8006324 <I2C_MasterReceive_BTF+0x1b4>
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	2212      	movs	r2, #18
 8006322:	631a      	str	r2, [r3, #48]	@ 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8006324:	6878      	ldr	r0, [r7, #4]
 8006326:	f7ff fc67 	bl	8005bf8 <HAL_I2C_MasterRxCpltCallback>
}
 800632a:	e012      	b.n	8006352 <I2C_MasterReceive_BTF+0x1e2>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	691a      	ldr	r2, [r3, #16]
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006336:	b2d2      	uxtb	r2, r2
 8006338:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800633e:	1c5a      	adds	r2, r3, #1
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount--;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006348:	b29b      	uxth	r3, r3
 800634a:	3b01      	subs	r3, #1
 800634c:	b29a      	uxth	r2, r3
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	855a      	strh	r2, [r3, #42]	@ 0x2a
}
 8006352:	bf00      	nop
 8006354:	3710      	adds	r7, #16
 8006356:	46bd      	mov	sp, r7
 8006358:	bd80      	pop	{r7, pc}

0800635a <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 800635a:	b480      	push	{r7}
 800635c:	b083      	sub	sp, #12
 800635e:	af00      	add	r7, sp, #0
 8006360:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006368:	b2db      	uxtb	r3, r3
 800636a:	2b40      	cmp	r3, #64	@ 0x40
 800636c:	d117      	bne.n	800639e <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006372:	2b00      	cmp	r3, #0
 8006374:	d109      	bne.n	800638a <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800637a:	b2db      	uxtb	r3, r3
 800637c:	461a      	mov	r2, r3
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006386:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8006388:	e067      	b.n	800645a <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800638e:	b2db      	uxtb	r3, r3
 8006390:	f043 0301 	orr.w	r3, r3, #1
 8006394:	b2da      	uxtb	r2, r3
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	611a      	str	r2, [r3, #16]
}
 800639c:	e05d      	b.n	800645a <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800639e:	687b      	ldr	r3, [r7, #4]
 80063a0:	691b      	ldr	r3, [r3, #16]
 80063a2:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80063a6:	d133      	bne.n	8006410 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80063ae:	b2db      	uxtb	r3, r3
 80063b0:	2b21      	cmp	r3, #33	@ 0x21
 80063b2:	d109      	bne.n	80063c8 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80063b8:	b2db      	uxtb	r3, r3
 80063ba:	461a      	mov	r2, r3
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80063c4:	611a      	str	r2, [r3, #16]
 80063c6:	e008      	b.n	80063da <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80063c8:	687b      	ldr	r3, [r7, #4]
 80063ca:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80063cc:	b2db      	uxtb	r3, r3
 80063ce:	f043 0301 	orr.w	r3, r3, #1
 80063d2:	b2da      	uxtb	r2, r3
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	681b      	ldr	r3, [r3, #0]
 80063d8:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80063de:	2b00      	cmp	r3, #0
 80063e0:	d004      	beq.n	80063ec <I2C_Master_SB+0x92>
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80063e6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063e8:	2b00      	cmp	r3, #0
 80063ea:	d108      	bne.n	80063fe <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d032      	beq.n	800645a <I2C_Master_SB+0x100>
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d02d      	beq.n	800645a <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	685a      	ldr	r2, [r3, #4]
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800640c:	605a      	str	r2, [r3, #4]
}
 800640e:	e024      	b.n	800645a <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006414:	2b00      	cmp	r3, #0
 8006416:	d10e      	bne.n	8006436 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800641c:	b29b      	uxth	r3, r3
 800641e:	11db      	asrs	r3, r3, #7
 8006420:	b2db      	uxtb	r3, r3
 8006422:	f003 0306 	and.w	r3, r3, #6
 8006426:	b2db      	uxtb	r3, r3
 8006428:	f063 030f 	orn	r3, r3, #15
 800642c:	b2da      	uxtb	r2, r3
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	611a      	str	r2, [r3, #16]
}
 8006434:	e011      	b.n	800645a <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800643a:	2b01      	cmp	r3, #1
 800643c:	d10d      	bne.n	800645a <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006442:	b29b      	uxth	r3, r3
 8006444:	11db      	asrs	r3, r3, #7
 8006446:	b2db      	uxtb	r3, r3
 8006448:	f003 0306 	and.w	r3, r3, #6
 800644c:	b2db      	uxtb	r3, r3
 800644e:	f063 030e 	orn	r3, r3, #14
 8006452:	b2da      	uxtb	r2, r3
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	611a      	str	r2, [r3, #16]
}
 800645a:	bf00      	nop
 800645c:	370c      	adds	r7, #12
 800645e:	46bd      	mov	sp, r7
 8006460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006464:	4770      	bx	lr

08006466 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8006466:	b480      	push	{r7}
 8006468:	b083      	sub	sp, #12
 800646a:	af00      	add	r7, sp, #0
 800646c:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006472:	b2da      	uxtb	r2, r3
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800647e:	2b00      	cmp	r3, #0
 8006480:	d004      	beq.n	800648c <I2C_Master_ADD10+0x26>
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006486:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006488:	2b00      	cmp	r3, #0
 800648a:	d108      	bne.n	800649e <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006490:	2b00      	cmp	r3, #0
 8006492:	d00c      	beq.n	80064ae <I2C_Master_ADD10+0x48>
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006498:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800649a:	2b00      	cmp	r3, #0
 800649c:	d007      	beq.n	80064ae <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	685a      	ldr	r2, [r3, #4]
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80064ac:	605a      	str	r2, [r3, #4]
  }
}
 80064ae:	bf00      	nop
 80064b0:	370c      	adds	r7, #12
 80064b2:	46bd      	mov	sp, r7
 80064b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b8:	4770      	bx	lr

080064ba <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80064ba:	b480      	push	{r7}
 80064bc:	b091      	sub	sp, #68	@ 0x44
 80064be:	af00      	add	r7, sp, #0
 80064c0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80064c8:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80064cc:	687b      	ldr	r3, [r7, #4]
 80064ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064d0:	63bb      	str	r3, [r7, #56]	@ 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80064d6:	637b      	str	r3, [r7, #52]	@ 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80064de:	b2db      	uxtb	r3, r3
 80064e0:	2b22      	cmp	r3, #34	@ 0x22
 80064e2:	f040 8169 	bne.w	80067b8 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80064e6:	687b      	ldr	r3, [r7, #4]
 80064e8:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80064ea:	2b00      	cmp	r3, #0
 80064ec:	d10f      	bne.n	800650e <I2C_Master_ADDR+0x54>
 80064ee:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
 80064f2:	2b40      	cmp	r3, #64	@ 0x40
 80064f4:	d10b      	bne.n	800650e <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80064f6:	2300      	movs	r3, #0
 80064f8:	633b      	str	r3, [r7, #48]	@ 0x30
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	695b      	ldr	r3, [r3, #20]
 8006500:	633b      	str	r3, [r7, #48]	@ 0x30
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	681b      	ldr	r3, [r3, #0]
 8006506:	699b      	ldr	r3, [r3, #24]
 8006508:	633b      	str	r3, [r7, #48]	@ 0x30
 800650a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800650c:	e160      	b.n	80067d0 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006512:	2b00      	cmp	r3, #0
 8006514:	d11d      	bne.n	8006552 <I2C_Master_ADDR+0x98>
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	691b      	ldr	r3, [r3, #16]
 800651a:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 800651e:	d118      	bne.n	8006552 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006520:	2300      	movs	r3, #0
 8006522:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	695b      	ldr	r3, [r3, #20]
 800652a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	699b      	ldr	r3, [r3, #24]
 8006532:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006534:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	681b      	ldr	r3, [r3, #0]
 800653a:	681a      	ldr	r2, [r3, #0]
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006544:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800654a:	1c5a      	adds	r2, r3, #1
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	651a      	str	r2, [r3, #80]	@ 0x50
 8006550:	e13e      	b.n	80067d0 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006556:	b29b      	uxth	r3, r3
 8006558:	2b00      	cmp	r3, #0
 800655a:	d113      	bne.n	8006584 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800655c:	2300      	movs	r3, #0
 800655e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	695b      	ldr	r3, [r3, #20]
 8006566:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	699b      	ldr	r3, [r3, #24]
 800656e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006570:	6abb      	ldr	r3, [r7, #40]	@ 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	681a      	ldr	r2, [r3, #0]
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006580:	601a      	str	r2, [r3, #0]
 8006582:	e115      	b.n	80067b0 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006588:	b29b      	uxth	r3, r3
 800658a:	2b01      	cmp	r3, #1
 800658c:	f040 808a 	bne.w	80066a4 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8006590:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006592:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006596:	d137      	bne.n	8006608 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	681b      	ldr	r3, [r3, #0]
 800659c:	681a      	ldr	r2, [r3, #0]
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80065a6:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	685b      	ldr	r3, [r3, #4]
 80065ae:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80065b2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80065b6:	d113      	bne.n	80065e0 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80065b8:	687b      	ldr	r3, [r7, #4]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	681a      	ldr	r2, [r3, #0]
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80065c6:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80065c8:	2300      	movs	r3, #0
 80065ca:	627b      	str	r3, [r7, #36]	@ 0x24
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	695b      	ldr	r3, [r3, #20]
 80065d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	699b      	ldr	r3, [r3, #24]
 80065da:	627b      	str	r3, [r7, #36]	@ 0x24
 80065dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065de:	e0e7      	b.n	80067b0 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80065e0:	2300      	movs	r3, #0
 80065e2:	623b      	str	r3, [r7, #32]
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	695b      	ldr	r3, [r3, #20]
 80065ea:	623b      	str	r3, [r7, #32]
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	699b      	ldr	r3, [r3, #24]
 80065f2:	623b      	str	r3, [r7, #32]
 80065f4:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	681a      	ldr	r2, [r3, #0]
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	681b      	ldr	r3, [r3, #0]
 8006600:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006604:	601a      	str	r2, [r3, #0]
 8006606:	e0d3      	b.n	80067b0 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8006608:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800660a:	2b08      	cmp	r3, #8
 800660c:	d02e      	beq.n	800666c <I2C_Master_ADDR+0x1b2>
 800660e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006610:	2b20      	cmp	r3, #32
 8006612:	d02b      	beq.n	800666c <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8006614:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006616:	2b12      	cmp	r3, #18
 8006618:	d102      	bne.n	8006620 <I2C_Master_ADDR+0x166>
 800661a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800661c:	2b01      	cmp	r3, #1
 800661e:	d125      	bne.n	800666c <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8006620:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006622:	2b04      	cmp	r3, #4
 8006624:	d00e      	beq.n	8006644 <I2C_Master_ADDR+0x18a>
 8006626:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006628:	2b02      	cmp	r3, #2
 800662a:	d00b      	beq.n	8006644 <I2C_Master_ADDR+0x18a>
 800662c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800662e:	2b10      	cmp	r3, #16
 8006630:	d008      	beq.n	8006644 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	681a      	ldr	r2, [r3, #0]
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006640:	601a      	str	r2, [r3, #0]
 8006642:	e007      	b.n	8006654 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	681a      	ldr	r2, [r3, #0]
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	681b      	ldr	r3, [r3, #0]
 800664e:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006652:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006654:	2300      	movs	r3, #0
 8006656:	61fb      	str	r3, [r7, #28]
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	695b      	ldr	r3, [r3, #20]
 800665e:	61fb      	str	r3, [r7, #28]
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	699b      	ldr	r3, [r3, #24]
 8006666:	61fb      	str	r3, [r7, #28]
 8006668:	69fb      	ldr	r3, [r7, #28]
 800666a:	e0a1      	b.n	80067b0 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	681a      	ldr	r2, [r3, #0]
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800667a:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800667c:	2300      	movs	r3, #0
 800667e:	61bb      	str	r3, [r7, #24]
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	695b      	ldr	r3, [r3, #20]
 8006686:	61bb      	str	r3, [r7, #24]
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	699b      	ldr	r3, [r3, #24]
 800668e:	61bb      	str	r3, [r7, #24]
 8006690:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	681a      	ldr	r2, [r3, #0]
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80066a0:	601a      	str	r2, [r3, #0]
 80066a2:	e085      	b.n	80067b0 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80066a8:	b29b      	uxth	r3, r3
 80066aa:	2b02      	cmp	r3, #2
 80066ac:	d14d      	bne.n	800674a <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80066ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066b0:	2b04      	cmp	r3, #4
 80066b2:	d016      	beq.n	80066e2 <I2C_Master_ADDR+0x228>
 80066b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066b6:	2b02      	cmp	r3, #2
 80066b8:	d013      	beq.n	80066e2 <I2C_Master_ADDR+0x228>
 80066ba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80066bc:	2b10      	cmp	r3, #16
 80066be:	d010      	beq.n	80066e2 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	681a      	ldr	r2, [r3, #0]
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	681b      	ldr	r3, [r3, #0]
 80066ca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80066ce:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	681a      	ldr	r2, [r3, #0]
 80066d6:	687b      	ldr	r3, [r7, #4]
 80066d8:	681b      	ldr	r3, [r3, #0]
 80066da:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80066de:	601a      	str	r2, [r3, #0]
 80066e0:	e007      	b.n	80066f2 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	681a      	ldr	r2, [r3, #0]
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80066f0:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80066f2:	687b      	ldr	r3, [r7, #4]
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	685b      	ldr	r3, [r3, #4]
 80066f8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80066fc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006700:	d117      	bne.n	8006732 <I2C_Master_ADDR+0x278>
 8006702:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006704:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006708:	d00b      	beq.n	8006722 <I2C_Master_ADDR+0x268>
 800670a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800670c:	2b01      	cmp	r3, #1
 800670e:	d008      	beq.n	8006722 <I2C_Master_ADDR+0x268>
 8006710:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006712:	2b08      	cmp	r3, #8
 8006714:	d005      	beq.n	8006722 <I2C_Master_ADDR+0x268>
 8006716:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006718:	2b10      	cmp	r3, #16
 800671a:	d002      	beq.n	8006722 <I2C_Master_ADDR+0x268>
 800671c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800671e:	2b20      	cmp	r3, #32
 8006720:	d107      	bne.n	8006732 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8006722:	687b      	ldr	r3, [r7, #4]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	685a      	ldr	r2, [r3, #4]
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006730:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006732:	2300      	movs	r3, #0
 8006734:	617b      	str	r3, [r7, #20]
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	695b      	ldr	r3, [r3, #20]
 800673c:	617b      	str	r3, [r7, #20]
 800673e:	687b      	ldr	r3, [r7, #4]
 8006740:	681b      	ldr	r3, [r3, #0]
 8006742:	699b      	ldr	r3, [r3, #24]
 8006744:	617b      	str	r3, [r7, #20]
 8006746:	697b      	ldr	r3, [r7, #20]
 8006748:	e032      	b.n	80067b0 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	681a      	ldr	r2, [r3, #0]
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8006758:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	685b      	ldr	r3, [r3, #4]
 8006760:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006764:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006768:	d117      	bne.n	800679a <I2C_Master_ADDR+0x2e0>
 800676a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800676c:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8006770:	d00b      	beq.n	800678a <I2C_Master_ADDR+0x2d0>
 8006772:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006774:	2b01      	cmp	r3, #1
 8006776:	d008      	beq.n	800678a <I2C_Master_ADDR+0x2d0>
 8006778:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800677a:	2b08      	cmp	r3, #8
 800677c:	d005      	beq.n	800678a <I2C_Master_ADDR+0x2d0>
 800677e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006780:	2b10      	cmp	r3, #16
 8006782:	d002      	beq.n	800678a <I2C_Master_ADDR+0x2d0>
 8006784:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006786:	2b20      	cmp	r3, #32
 8006788:	d107      	bne.n	800679a <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	685a      	ldr	r2, [r3, #4]
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	f442 5280 	orr.w	r2, r2, #4096	@ 0x1000
 8006798:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800679a:	2300      	movs	r3, #0
 800679c:	613b      	str	r3, [r7, #16]
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	695b      	ldr	r3, [r3, #20]
 80067a4:	613b      	str	r3, [r7, #16]
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	699b      	ldr	r3, [r3, #24]
 80067ac:	613b      	str	r3, [r7, #16]
 80067ae:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	2200      	movs	r2, #0
 80067b4:	651a      	str	r2, [r3, #80]	@ 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80067b6:	e00b      	b.n	80067d0 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80067b8:	2300      	movs	r3, #0
 80067ba:	60fb      	str	r3, [r7, #12]
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	695b      	ldr	r3, [r3, #20]
 80067c2:	60fb      	str	r3, [r7, #12]
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	699b      	ldr	r3, [r3, #24]
 80067ca:	60fb      	str	r3, [r7, #12]
 80067cc:	68fb      	ldr	r3, [r7, #12]
}
 80067ce:	e7ff      	b.n	80067d0 <I2C_Master_ADDR+0x316>
 80067d0:	bf00      	nop
 80067d2:	3744      	adds	r7, #68	@ 0x44
 80067d4:	46bd      	mov	sp, r7
 80067d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067da:	4770      	bx	lr

080067dc <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80067dc:	b580      	push	{r7, lr}
 80067de:	b084      	sub	sp, #16
 80067e0:	af00      	add	r7, sp, #0
 80067e2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80067ea:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80067f0:	b29b      	uxth	r3, r3
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d02b      	beq.n	800684e <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80067fa:	781a      	ldrb	r2, [r3, #0]
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	681b      	ldr	r3, [r3, #0]
 8006800:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006806:	1c5a      	adds	r2, r3, #1
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006810:	b29b      	uxth	r3, r3
 8006812:	3b01      	subs	r3, #1
 8006814:	b29a      	uxth	r2, r3
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800681e:	b29b      	uxth	r3, r3
 8006820:	2b00      	cmp	r3, #0
 8006822:	d114      	bne.n	800684e <I2C_SlaveTransmit_TXE+0x72>
 8006824:	7bfb      	ldrb	r3, [r7, #15]
 8006826:	2b29      	cmp	r3, #41	@ 0x29
 8006828:	d111      	bne.n	800684e <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	685a      	ldr	r2, [r3, #4]
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006838:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	2221      	movs	r2, #33	@ 0x21
 800683e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	2228      	movs	r2, #40	@ 0x28
 8006844:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006848:	6878      	ldr	r0, [r7, #4]
 800684a:	f7ff f9df 	bl	8005c0c <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800684e:	bf00      	nop
 8006850:	3710      	adds	r7, #16
 8006852:	46bd      	mov	sp, r7
 8006854:	bd80      	pop	{r7, pc}

08006856 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8006856:	b480      	push	{r7}
 8006858:	b083      	sub	sp, #12
 800685a:	af00      	add	r7, sp, #0
 800685c:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006862:	b29b      	uxth	r3, r3
 8006864:	2b00      	cmp	r3, #0
 8006866:	d011      	beq.n	800688c <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800686c:	781a      	ldrb	r2, [r3, #0]
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006878:	1c5a      	adds	r2, r3, #1
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006882:	b29b      	uxth	r3, r3
 8006884:	3b01      	subs	r3, #1
 8006886:	b29a      	uxth	r2, r3
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 800688c:	bf00      	nop
 800688e:	370c      	adds	r7, #12
 8006890:	46bd      	mov	sp, r7
 8006892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006896:	4770      	bx	lr

08006898 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8006898:	b580      	push	{r7, lr}
 800689a:	b084      	sub	sp, #16
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80068a6:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80068ac:	b29b      	uxth	r3, r3
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d02c      	beq.n	800690c <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	681b      	ldr	r3, [r3, #0]
 80068b6:	691a      	ldr	r2, [r3, #16]
 80068b8:	687b      	ldr	r3, [r7, #4]
 80068ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068bc:	b2d2      	uxtb	r2, r2
 80068be:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068c4:	1c5a      	adds	r2, r3, #1
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80068ce:	b29b      	uxth	r3, r3
 80068d0:	3b01      	subs	r3, #1
 80068d2:	b29a      	uxth	r2, r3
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80068dc:	b29b      	uxth	r3, r3
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d114      	bne.n	800690c <I2C_SlaveReceive_RXNE+0x74>
 80068e2:	7bfb      	ldrb	r3, [r7, #15]
 80068e4:	2b2a      	cmp	r3, #42	@ 0x2a
 80068e6:	d111      	bne.n	800690c <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80068e8:	687b      	ldr	r3, [r7, #4]
 80068ea:	681b      	ldr	r3, [r3, #0]
 80068ec:	685a      	ldr	r2, [r3, #4]
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80068f6:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	2222      	movs	r2, #34	@ 0x22
 80068fc:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	2228      	movs	r2, #40	@ 0x28
 8006902:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006906:	6878      	ldr	r0, [r7, #4]
 8006908:	f7ff f98a 	bl	8005c20 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800690c:	bf00      	nop
 800690e:	3710      	adds	r7, #16
 8006910:	46bd      	mov	sp, r7
 8006912:	bd80      	pop	{r7, pc}

08006914 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8006914:	b480      	push	{r7}
 8006916:	b083      	sub	sp, #12
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006920:	b29b      	uxth	r3, r3
 8006922:	2b00      	cmp	r3, #0
 8006924:	d012      	beq.n	800694c <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	691a      	ldr	r2, [r3, #16]
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006930:	b2d2      	uxtb	r2, r2
 8006932:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006938:	1c5a      	adds	r2, r3, #1
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Update counter */
    hi2c->XferCount--;
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006942:	b29b      	uxth	r3, r3
 8006944:	3b01      	subs	r3, #1
 8006946:	b29a      	uxth	r2, r3
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }
}
 800694c:	bf00      	nop
 800694e:	370c      	adds	r7, #12
 8006950:	46bd      	mov	sp, r7
 8006952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006956:	4770      	bx	lr

08006958 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8006958:	b580      	push	{r7, lr}
 800695a:	b084      	sub	sp, #16
 800695c:	af00      	add	r7, sp, #0
 800695e:	6078      	str	r0, [r7, #4]
 8006960:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8006962:	2300      	movs	r3, #0
 8006964:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800696c:	b2db      	uxtb	r3, r3
 800696e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006972:	2b28      	cmp	r3, #40	@ 0x28
 8006974:	d125      	bne.n	80069c2 <I2C_Slave_ADDR+0x6a>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	685a      	ldr	r2, [r3, #4]
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	681b      	ldr	r3, [r3, #0]
 8006980:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006984:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8006986:	683b      	ldr	r3, [r7, #0]
 8006988:	f003 0304 	and.w	r3, r3, #4
 800698c:	2b00      	cmp	r3, #0
 800698e:	d101      	bne.n	8006994 <I2C_Slave_ADDR+0x3c>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8006990:	2301      	movs	r3, #1
 8006992:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8006994:	683b      	ldr	r3, [r7, #0]
 8006996:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800699a:	2b00      	cmp	r3, #0
 800699c:	d103      	bne.n	80069a6 <I2C_Slave_ADDR+0x4e>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	68db      	ldr	r3, [r3, #12]
 80069a2:	81bb      	strh	r3, [r7, #12]
 80069a4:	e002      	b.n	80069ac <I2C_Slave_ADDR+0x54>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	699b      	ldr	r3, [r3, #24]
 80069aa:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	2200      	movs	r2, #0
 80069b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80069b4:	89ba      	ldrh	r2, [r7, #12]
 80069b6:	7bfb      	ldrb	r3, [r7, #15]
 80069b8:	4619      	mov	r1, r3
 80069ba:	6878      	ldr	r0, [r7, #4]
 80069bc:	f7ff f93a 	bl	8005c34 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80069c0:	e00e      	b.n	80069e0 <I2C_Slave_ADDR+0x88>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80069c2:	2300      	movs	r3, #0
 80069c4:	60bb      	str	r3, [r7, #8]
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	681b      	ldr	r3, [r3, #0]
 80069ca:	695b      	ldr	r3, [r3, #20]
 80069cc:	60bb      	str	r3, [r7, #8]
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	699b      	ldr	r3, [r3, #24]
 80069d4:	60bb      	str	r3, [r7, #8]
 80069d6:	68bb      	ldr	r3, [r7, #8]
    __HAL_UNLOCK(hi2c);
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	2200      	movs	r2, #0
 80069dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
}
 80069e0:	bf00      	nop
 80069e2:	3710      	adds	r7, #16
 80069e4:	46bd      	mov	sp, r7
 80069e6:	bd80      	pop	{r7, pc}

080069e8 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80069e8:	b580      	push	{r7, lr}
 80069ea:	b084      	sub	sp, #16
 80069ec:	af00      	add	r7, sp, #0
 80069ee:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80069f6:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	681b      	ldr	r3, [r3, #0]
 80069fc:	685a      	ldr	r2, [r3, #4]
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	681b      	ldr	r3, [r3, #0]
 8006a02:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006a06:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8006a08:	2300      	movs	r3, #0
 8006a0a:	60bb      	str	r3, [r7, #8]
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	681b      	ldr	r3, [r3, #0]
 8006a10:	695b      	ldr	r3, [r3, #20]
 8006a12:	60bb      	str	r3, [r7, #8]
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	681a      	ldr	r2, [r3, #0]
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	f042 0201 	orr.w	r2, r2, #1
 8006a22:	601a      	str	r2, [r3, #0]
 8006a24:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	681a      	ldr	r2, [r3, #0]
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	681b      	ldr	r3, [r3, #0]
 8006a30:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006a34:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006a36:	687b      	ldr	r3, [r7, #4]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	685b      	ldr	r3, [r3, #4]
 8006a3c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006a40:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006a44:	d172      	bne.n	8006b2c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006a46:	7bfb      	ldrb	r3, [r7, #15]
 8006a48:	2b22      	cmp	r3, #34	@ 0x22
 8006a4a:	d002      	beq.n	8006a52 <I2C_Slave_STOPF+0x6a>
 8006a4c:	7bfb      	ldrb	r3, [r7, #15]
 8006a4e:	2b2a      	cmp	r3, #42	@ 0x2a
 8006a50:	d135      	bne.n	8006abe <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx));
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a56:	681b      	ldr	r3, [r3, #0]
 8006a58:	685b      	ldr	r3, [r3, #4]
 8006a5a:	b29a      	uxth	r2, r3
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006a64:	b29b      	uxth	r3, r3
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d005      	beq.n	8006a76 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a6e:	f043 0204 	orr.w	r2, r3, #4
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	685a      	ldr	r2, [r3, #4]
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006a84:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	f7fd fc92 	bl	80043b4 <HAL_DMA_GetState>
 8006a90:	4603      	mov	r3, r0
 8006a92:	2b01      	cmp	r3, #1
 8006a94:	d049      	beq.n	8006b2a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006a9a:	4a69      	ldr	r2, [pc, #420]	@ (8006c40 <I2C_Slave_STOPF+0x258>)
 8006a9c:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006aa2:	4618      	mov	r0, r3
 8006aa4:	f7fd fada 	bl	800405c <HAL_DMA_Abort_IT>
 8006aa8:	4603      	mov	r3, r0
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d03d      	beq.n	8006b2a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006aae:	687b      	ldr	r3, [r7, #4]
 8006ab0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006ab2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ab4:	687a      	ldr	r2, [r7, #4]
 8006ab6:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006ab8:	4610      	mov	r0, r2
 8006aba:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006abc:	e035      	b.n	8006b2a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx));
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	685b      	ldr	r3, [r3, #4]
 8006ac6:	b29a      	uxth	r2, r3
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if (hi2c->XferCount != 0U)
 8006acc:	687b      	ldr	r3, [r7, #4]
 8006ace:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006ad0:	b29b      	uxth	r3, r3
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d005      	beq.n	8006ae2 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006ada:	f043 0204 	orr.w	r2, r3, #4
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	641a      	str	r2, [r3, #64]	@ 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	685a      	ldr	r2, [r3, #4]
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006af0:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006af6:	4618      	mov	r0, r3
 8006af8:	f7fd fc5c 	bl	80043b4 <HAL_DMA_GetState>
 8006afc:	4603      	mov	r3, r0
 8006afe:	2b01      	cmp	r3, #1
 8006b00:	d014      	beq.n	8006b2c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b06:	4a4e      	ldr	r2, [pc, #312]	@ (8006c40 <I2C_Slave_STOPF+0x258>)
 8006b08:	651a      	str	r2, [r3, #80]	@ 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b0e:	4618      	mov	r0, r3
 8006b10:	f7fd faa4 	bl	800405c <HAL_DMA_Abort_IT>
 8006b14:	4603      	mov	r3, r0
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d008      	beq.n	8006b2c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006b1e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006b20:	687a      	ldr	r2, [r7, #4]
 8006b22:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006b24:	4610      	mov	r0, r2
 8006b26:	4798      	blx	r3
 8006b28:	e000      	b.n	8006b2c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006b2a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b30:	b29b      	uxth	r3, r3
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d03e      	beq.n	8006bb4 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	681b      	ldr	r3, [r3, #0]
 8006b3a:	695b      	ldr	r3, [r3, #20]
 8006b3c:	f003 0304 	and.w	r3, r3, #4
 8006b40:	2b04      	cmp	r3, #4
 8006b42:	d112      	bne.n	8006b6a <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	691a      	ldr	r2, [r3, #16]
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b4e:	b2d2      	uxtb	r2, r2
 8006b50:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b56:	1c5a      	adds	r2, r3, #1
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006b5c:	687b      	ldr	r3, [r7, #4]
 8006b5e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b60:	b29b      	uxth	r3, r3
 8006b62:	3b01      	subs	r3, #1
 8006b64:	b29a      	uxth	r2, r3
 8006b66:	687b      	ldr	r3, [r7, #4]
 8006b68:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	695b      	ldr	r3, [r3, #20]
 8006b70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006b74:	2b40      	cmp	r3, #64	@ 0x40
 8006b76:	d112      	bne.n	8006b9e <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	681b      	ldr	r3, [r3, #0]
 8006b7c:	691a      	ldr	r2, [r3, #16]
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b82:	b2d2      	uxtb	r2, r2
 8006b84:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006b8a:	1c5a      	adds	r2, r3, #1
 8006b8c:	687b      	ldr	r3, [r7, #4]
 8006b8e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006b94:	b29b      	uxth	r3, r3
 8006b96:	3b01      	subs	r3, #1
 8006b98:	b29a      	uxth	r2, r3
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if (hi2c->XferCount != 0U)
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8006ba2:	b29b      	uxth	r3, r3
 8006ba4:	2b00      	cmp	r3, #0
 8006ba6:	d005      	beq.n	8006bb4 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006ba8:	687b      	ldr	r3, [r7, #4]
 8006baa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bac:	f043 0204 	orr.w	r2, r3, #4
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d003      	beq.n	8006bc4 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8006bbc:	6878      	ldr	r0, [r7, #4]
 8006bbe:	f000 f8b7 	bl	8006d30 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8006bc2:	e039      	b.n	8006c38 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006bc4:	7bfb      	ldrb	r3, [r7, #15]
 8006bc6:	2b2a      	cmp	r3, #42	@ 0x2a
 8006bc8:	d109      	bne.n	8006bde <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	2200      	movs	r2, #0
 8006bce:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	2228      	movs	r2, #40	@ 0x28
 8006bd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006bd8:	6878      	ldr	r0, [r7, #4]
 8006bda:	f7ff f821 	bl	8005c20 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006be4:	b2db      	uxtb	r3, r3
 8006be6:	2b28      	cmp	r3, #40	@ 0x28
 8006be8:	d111      	bne.n	8006c0e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	4a15      	ldr	r2, [pc, #84]	@ (8006c44 <I2C_Slave_STOPF+0x25c>)
 8006bee:	62da      	str	r2, [r3, #44]	@ 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	2200      	movs	r2, #0
 8006bf4:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	2220      	movs	r2, #32
 8006bfa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	2200      	movs	r2, #0
 8006c02:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8006c06:	6878      	ldr	r0, [r7, #4]
 8006c08:	f7ff f822 	bl	8005c50 <HAL_I2C_ListenCpltCallback>
}
 8006c0c:	e014      	b.n	8006c38 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006c12:	2b22      	cmp	r3, #34	@ 0x22
 8006c14:	d002      	beq.n	8006c1c <I2C_Slave_STOPF+0x234>
 8006c16:	7bfb      	ldrb	r3, [r7, #15]
 8006c18:	2b22      	cmp	r3, #34	@ 0x22
 8006c1a:	d10d      	bne.n	8006c38 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	2200      	movs	r2, #0
 8006c20:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	2220      	movs	r2, #32
 8006c26:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006c32:	6878      	ldr	r0, [r7, #4]
 8006c34:	f7fe fff4 	bl	8005c20 <HAL_I2C_SlaveRxCpltCallback>
}
 8006c38:	bf00      	nop
 8006c3a:	3710      	adds	r7, #16
 8006c3c:	46bd      	mov	sp, r7
 8006c3e:	bd80      	pop	{r7, pc}
 8006c40:	080074c9 	.word	0x080074c9
 8006c44:	ffff0000 	.word	0xffff0000

08006c48 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b084      	sub	sp, #16
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006c56:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c5c:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8006c5e:	68bb      	ldr	r3, [r7, #8]
 8006c60:	2b08      	cmp	r3, #8
 8006c62:	d002      	beq.n	8006c6a <I2C_Slave_AF+0x22>
 8006c64:	68bb      	ldr	r3, [r7, #8]
 8006c66:	2b20      	cmp	r3, #32
 8006c68:	d129      	bne.n	8006cbe <I2C_Slave_AF+0x76>
 8006c6a:	7bfb      	ldrb	r3, [r7, #15]
 8006c6c:	2b28      	cmp	r3, #40	@ 0x28
 8006c6e:	d126      	bne.n	8006cbe <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	4a2e      	ldr	r2, [pc, #184]	@ (8006d2c <I2C_Slave_AF+0xe4>)
 8006c74:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	681b      	ldr	r3, [r3, #0]
 8006c7a:	685a      	ldr	r2, [r3, #4]
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006c84:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006c8e:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	681a      	ldr	r2, [r3, #0]
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006c9e:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	2200      	movs	r2, #0
 8006ca4:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006ca6:	687b      	ldr	r3, [r7, #4]
 8006ca8:	2220      	movs	r2, #32
 8006caa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	2200      	movs	r2, #0
 8006cb2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8006cb6:	6878      	ldr	r0, [r7, #4]
 8006cb8:	f7fe ffca 	bl	8005c50 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8006cbc:	e031      	b.n	8006d22 <I2C_Slave_AF+0xda>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8006cbe:	7bfb      	ldrb	r3, [r7, #15]
 8006cc0:	2b21      	cmp	r3, #33	@ 0x21
 8006cc2:	d129      	bne.n	8006d18 <I2C_Slave_AF+0xd0>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	4a19      	ldr	r2, [pc, #100]	@ (8006d2c <I2C_Slave_AF+0xe4>)
 8006cc8:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	2221      	movs	r2, #33	@ 0x21
 8006cce:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	2220      	movs	r2, #32
 8006cd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	2200      	movs	r2, #0
 8006cdc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	681b      	ldr	r3, [r3, #0]
 8006ce4:	685a      	ldr	r2, [r3, #4]
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006cee:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006cf8:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	681b      	ldr	r3, [r3, #0]
 8006cfe:	681a      	ldr	r2, [r3, #0]
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8006d08:	601a      	str	r2, [r3, #0]
    I2C_Flush_DR(hi2c);
 8006d0a:	6878      	ldr	r0, [r7, #4]
 8006d0c:	f7fd ff78 	bl	8004c00 <I2C_Flush_DR>
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006d10:	6878      	ldr	r0, [r7, #4]
 8006d12:	f7fe ff7b 	bl	8005c0c <HAL_I2C_SlaveTxCpltCallback>
}
 8006d16:	e004      	b.n	8006d22 <I2C_Slave_AF+0xda>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006d20:	615a      	str	r2, [r3, #20]
}
 8006d22:	bf00      	nop
 8006d24:	3710      	adds	r7, #16
 8006d26:	46bd      	mov	sp, r7
 8006d28:	bd80      	pop	{r7, pc}
 8006d2a:	bf00      	nop
 8006d2c:	ffff0000 	.word	0xffff0000

08006d30 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b084      	sub	sp, #16
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006d3e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8006d46:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8006d48:	7bbb      	ldrb	r3, [r7, #14]
 8006d4a:	2b10      	cmp	r3, #16
 8006d4c:	d002      	beq.n	8006d54 <I2C_ITError+0x24>
 8006d4e:	7bbb      	ldrb	r3, [r7, #14]
 8006d50:	2b40      	cmp	r3, #64	@ 0x40
 8006d52:	d10a      	bne.n	8006d6a <I2C_ITError+0x3a>
 8006d54:	7bfb      	ldrb	r3, [r7, #15]
 8006d56:	2b22      	cmp	r3, #34	@ 0x22
 8006d58:	d107      	bne.n	8006d6a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	681a      	ldr	r2, [r3, #0]
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006d68:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006d6a:	7bfb      	ldrb	r3, [r7, #15]
 8006d6c:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 8006d70:	2b28      	cmp	r3, #40	@ 0x28
 8006d72:	d107      	bne.n	8006d84 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	2200      	movs	r2, #0
 8006d78:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	2228      	movs	r2, #40	@ 0x28
 8006d7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 8006d82:	e015      	b.n	8006db0 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	685b      	ldr	r3, [r3, #4]
 8006d8a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006d8e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006d92:	d00a      	beq.n	8006daa <I2C_ITError+0x7a>
 8006d94:	7bfb      	ldrb	r3, [r7, #15]
 8006d96:	2b60      	cmp	r3, #96	@ 0x60
 8006d98:	d007      	beq.n	8006daa <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	2220      	movs	r2, #32
 8006d9e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006da2:	687b      	ldr	r3, [r7, #4]
 8006da4:	2200      	movs	r2, #0
 8006da6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	2200      	movs	r2, #0
 8006dae:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	685b      	ldr	r3, [r3, #4]
 8006db6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006dba:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006dbe:	d162      	bne.n	8006e86 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8006dc0:	687b      	ldr	r3, [r7, #4]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	685a      	ldr	r2, [r3, #4]
 8006dc6:	687b      	ldr	r3, [r7, #4]
 8006dc8:	681b      	ldr	r3, [r3, #0]
 8006dca:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006dce:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006dd4:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8006dd8:	b2db      	uxtb	r3, r3
 8006dda:	2b01      	cmp	r3, #1
 8006ddc:	d020      	beq.n	8006e20 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006de2:	4a6a      	ldr	r2, [pc, #424]	@ (8006f8c <I2C_ITError+0x25c>)
 8006de4:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006dea:	4618      	mov	r0, r3
 8006dec:	f7fd f936 	bl	800405c <HAL_DMA_Abort_IT>
 8006df0:	4603      	mov	r3, r0
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	f000 8089 	beq.w	8006f0a <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	681a      	ldr	r2, [r3, #0]
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	f022 0201 	bic.w	r2, r2, #1
 8006e06:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	2220      	movs	r2, #32
 8006e0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006e14:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e16:	687a      	ldr	r2, [r7, #4]
 8006e18:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 8006e1a:	4610      	mov	r0, r2
 8006e1c:	4798      	blx	r3
 8006e1e:	e074      	b.n	8006f0a <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e24:	4a59      	ldr	r2, [pc, #356]	@ (8006f8c <I2C_ITError+0x25c>)
 8006e26:	651a      	str	r2, [r3, #80]	@ 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	f7fd f915 	bl	800405c <HAL_DMA_Abort_IT>
 8006e32:	4603      	mov	r3, r0
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d068      	beq.n	8006f0a <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	681b      	ldr	r3, [r3, #0]
 8006e3c:	695b      	ldr	r3, [r3, #20]
 8006e3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006e42:	2b40      	cmp	r3, #64	@ 0x40
 8006e44:	d10b      	bne.n	8006e5e <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	681b      	ldr	r3, [r3, #0]
 8006e4a:	691a      	ldr	r2, [r3, #16]
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e50:	b2d2      	uxtb	r2, r2
 8006e52:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006e58:	1c5a      	adds	r2, r3, #1
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	625a      	str	r2, [r3, #36]	@ 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	681a      	ldr	r2, [r3, #0]
 8006e64:	687b      	ldr	r3, [r7, #4]
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	f022 0201 	bic.w	r2, r2, #1
 8006e6c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8006e6e:	687b      	ldr	r3, [r7, #4]
 8006e70:	2220      	movs	r2, #32
 8006e72:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006e7a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006e7c:	687a      	ldr	r2, [r7, #4]
 8006e7e:	6b92      	ldr	r2, [r2, #56]	@ 0x38
 8006e80:	4610      	mov	r0, r2
 8006e82:	4798      	blx	r3
 8006e84:	e041      	b.n	8006f0a <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006e8c:	b2db      	uxtb	r3, r3
 8006e8e:	2b60      	cmp	r3, #96	@ 0x60
 8006e90:	d125      	bne.n	8006ede <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	2220      	movs	r2, #32
 8006e96:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	2200      	movs	r2, #0
 8006e9e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	695b      	ldr	r3, [r3, #20]
 8006ea6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006eaa:	2b40      	cmp	r3, #64	@ 0x40
 8006eac:	d10b      	bne.n	8006ec6 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	691a      	ldr	r2, [r3, #16]
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006eb8:	b2d2      	uxtb	r2, r2
 8006eba:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ec0:	1c5a      	adds	r2, r3, #1
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	625a      	str	r2, [r3, #36]	@ 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	681a      	ldr	r2, [r3, #0]
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	f022 0201 	bic.w	r2, r2, #1
 8006ed4:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006ed6:	6878      	ldr	r0, [r7, #4]
 8006ed8:	f7fe fece 	bl	8005c78 <HAL_I2C_AbortCpltCallback>
 8006edc:	e015      	b.n	8006f0a <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	695b      	ldr	r3, [r3, #20]
 8006ee4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006ee8:	2b40      	cmp	r3, #64	@ 0x40
 8006eea:	d10b      	bne.n	8006f04 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	691a      	ldr	r2, [r3, #16]
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ef6:	b2d2      	uxtb	r2, r2
 8006ef8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006efe:	1c5a      	adds	r2, r3, #1
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8006f04:	6878      	ldr	r0, [r7, #4]
 8006f06:	f7fc fa3f 	bl	8003388 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f0e:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8006f10:	68bb      	ldr	r3, [r7, #8]
 8006f12:	f003 0301 	and.w	r3, r3, #1
 8006f16:	2b00      	cmp	r3, #0
 8006f18:	d10e      	bne.n	8006f38 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8006f1a:	68bb      	ldr	r3, [r7, #8]
 8006f1c:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d109      	bne.n	8006f38 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8006f24:	68bb      	ldr	r3, [r7, #8]
 8006f26:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d104      	bne.n	8006f38 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8006f2e:	68bb      	ldr	r3, [r7, #8]
 8006f30:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d007      	beq.n	8006f48 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	685a      	ldr	r2, [r3, #4]
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	f422 62e0 	bic.w	r2, r2, #1792	@ 0x700
 8006f46:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8006f48:	687b      	ldr	r3, [r7, #4]
 8006f4a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006f4e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006f54:	f003 0304 	and.w	r3, r3, #4
 8006f58:	2b04      	cmp	r3, #4
 8006f5a:	d113      	bne.n	8006f84 <I2C_ITError+0x254>
 8006f5c:	7bfb      	ldrb	r3, [r7, #15]
 8006f5e:	2b28      	cmp	r3, #40	@ 0x28
 8006f60:	d110      	bne.n	8006f84 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	4a0a      	ldr	r2, [pc, #40]	@ (8006f90 <I2C_ITError+0x260>)
 8006f66:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006f6e:	687b      	ldr	r3, [r7, #4]
 8006f70:	2220      	movs	r2, #32
 8006f72:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	2200      	movs	r2, #0
 8006f7a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8006f7e:	6878      	ldr	r0, [r7, #4]
 8006f80:	f7fe fe66 	bl	8005c50 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006f84:	bf00      	nop
 8006f86:	3710      	adds	r7, #16
 8006f88:	46bd      	mov	sp, r7
 8006f8a:	bd80      	pop	{r7, pc}
 8006f8c:	080074c9 	.word	0x080074c9
 8006f90:	ffff0000 	.word	0xffff0000

08006f94 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006f94:	b580      	push	{r7, lr}
 8006f96:	b088      	sub	sp, #32
 8006f98:	af02      	add	r7, sp, #8
 8006f9a:	60f8      	str	r0, [r7, #12]
 8006f9c:	4608      	mov	r0, r1
 8006f9e:	4611      	mov	r1, r2
 8006fa0:	461a      	mov	r2, r3
 8006fa2:	4603      	mov	r3, r0
 8006fa4:	817b      	strh	r3, [r7, #10]
 8006fa6:	460b      	mov	r3, r1
 8006fa8:	813b      	strh	r3, [r7, #8]
 8006faa:	4613      	mov	r3, r2
 8006fac:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8006fae:	68fb      	ldr	r3, [r7, #12]
 8006fb0:	681b      	ldr	r3, [r3, #0]
 8006fb2:	681a      	ldr	r2, [r3, #0]
 8006fb4:	68fb      	ldr	r3, [r7, #12]
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006fbc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006fbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006fc0:	9300      	str	r3, [sp, #0]
 8006fc2:	6a3b      	ldr	r3, [r7, #32]
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006fca:	68f8      	ldr	r0, [r7, #12]
 8006fcc:	f000 fb24 	bl	8007618 <I2C_WaitOnFlagUntilTimeout>
 8006fd0:	4603      	mov	r3, r0
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d00d      	beq.n	8006ff2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006fe0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006fe4:	d103      	bne.n	8006fee <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006fe6:	68fb      	ldr	r3, [r7, #12]
 8006fe8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006fec:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006fee:	2303      	movs	r3, #3
 8006ff0:	e05f      	b.n	80070b2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006ff2:	897b      	ldrh	r3, [r7, #10]
 8006ff4:	b2db      	uxtb	r3, r3
 8006ff6:	461a      	mov	r2, r3
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8007000:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8007002:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007004:	6a3a      	ldr	r2, [r7, #32]
 8007006:	492d      	ldr	r1, [pc, #180]	@ (80070bc <I2C_RequestMemoryWrite+0x128>)
 8007008:	68f8      	ldr	r0, [r7, #12]
 800700a:	f000 fb7f 	bl	800770c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800700e:	4603      	mov	r3, r0
 8007010:	2b00      	cmp	r3, #0
 8007012:	d001      	beq.n	8007018 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8007014:	2301      	movs	r3, #1
 8007016:	e04c      	b.n	80070b2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007018:	2300      	movs	r3, #0
 800701a:	617b      	str	r3, [r7, #20]
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	681b      	ldr	r3, [r3, #0]
 8007020:	695b      	ldr	r3, [r3, #20]
 8007022:	617b      	str	r3, [r7, #20]
 8007024:	68fb      	ldr	r3, [r7, #12]
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	699b      	ldr	r3, [r3, #24]
 800702a:	617b      	str	r3, [r7, #20]
 800702c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800702e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007030:	6a39      	ldr	r1, [r7, #32]
 8007032:	68f8      	ldr	r0, [r7, #12]
 8007034:	f000 fc0a 	bl	800784c <I2C_WaitOnTXEFlagUntilTimeout>
 8007038:	4603      	mov	r3, r0
 800703a:	2b00      	cmp	r3, #0
 800703c:	d00d      	beq.n	800705a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007042:	2b04      	cmp	r3, #4
 8007044:	d107      	bne.n	8007056 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	681a      	ldr	r2, [r3, #0]
 800704c:	68fb      	ldr	r3, [r7, #12]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007054:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007056:	2301      	movs	r3, #1
 8007058:	e02b      	b.n	80070b2 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800705a:	88fb      	ldrh	r3, [r7, #6]
 800705c:	2b01      	cmp	r3, #1
 800705e:	d105      	bne.n	800706c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8007060:	893b      	ldrh	r3, [r7, #8]
 8007062:	b2da      	uxtb	r2, r3
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	611a      	str	r2, [r3, #16]
 800706a:	e021      	b.n	80070b0 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800706c:	893b      	ldrh	r3, [r7, #8]
 800706e:	0a1b      	lsrs	r3, r3, #8
 8007070:	b29b      	uxth	r3, r3
 8007072:	b2da      	uxtb	r2, r3
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800707a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800707c:	6a39      	ldr	r1, [r7, #32]
 800707e:	68f8      	ldr	r0, [r7, #12]
 8007080:	f000 fbe4 	bl	800784c <I2C_WaitOnTXEFlagUntilTimeout>
 8007084:	4603      	mov	r3, r0
 8007086:	2b00      	cmp	r3, #0
 8007088:	d00d      	beq.n	80070a6 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800708e:	2b04      	cmp	r3, #4
 8007090:	d107      	bne.n	80070a2 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	681a      	ldr	r2, [r3, #0]
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	681b      	ldr	r3, [r3, #0]
 800709c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80070a0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80070a2:	2301      	movs	r3, #1
 80070a4:	e005      	b.n	80070b2 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80070a6:	893b      	ldrh	r3, [r7, #8]
 80070a8:	b2da      	uxtb	r2, r3
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	681b      	ldr	r3, [r3, #0]
 80070ae:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80070b0:	2300      	movs	r3, #0
}
 80070b2:	4618      	mov	r0, r3
 80070b4:	3718      	adds	r7, #24
 80070b6:	46bd      	mov	sp, r7
 80070b8:	bd80      	pop	{r7, pc}
 80070ba:	bf00      	nop
 80070bc:	00010002 	.word	0x00010002

080070c0 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80070c0:	b580      	push	{r7, lr}
 80070c2:	b088      	sub	sp, #32
 80070c4:	af02      	add	r7, sp, #8
 80070c6:	60f8      	str	r0, [r7, #12]
 80070c8:	4608      	mov	r0, r1
 80070ca:	4611      	mov	r1, r2
 80070cc:	461a      	mov	r2, r3
 80070ce:	4603      	mov	r3, r0
 80070d0:	817b      	strh	r3, [r7, #10]
 80070d2:	460b      	mov	r3, r1
 80070d4:	813b      	strh	r3, [r7, #8]
 80070d6:	4613      	mov	r3, r2
 80070d8:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80070da:	68fb      	ldr	r3, [r7, #12]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	681a      	ldr	r2, [r3, #0]
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80070e8:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	681a      	ldr	r2, [r3, #0]
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80070f8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80070fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80070fc:	9300      	str	r3, [sp, #0]
 80070fe:	6a3b      	ldr	r3, [r7, #32]
 8007100:	2200      	movs	r2, #0
 8007102:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8007106:	68f8      	ldr	r0, [r7, #12]
 8007108:	f000 fa86 	bl	8007618 <I2C_WaitOnFlagUntilTimeout>
 800710c:	4603      	mov	r3, r0
 800710e:	2b00      	cmp	r3, #0
 8007110:	d00d      	beq.n	800712e <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007112:	68fb      	ldr	r3, [r7, #12]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800711c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007120:	d103      	bne.n	800712a <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007122:	68fb      	ldr	r3, [r7, #12]
 8007124:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007128:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800712a:	2303      	movs	r3, #3
 800712c:	e0aa      	b.n	8007284 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800712e:	897b      	ldrh	r3, [r7, #10]
 8007130:	b2db      	uxtb	r3, r3
 8007132:	461a      	mov	r2, r3
 8007134:	68fb      	ldr	r3, [r7, #12]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800713c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800713e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007140:	6a3a      	ldr	r2, [r7, #32]
 8007142:	4952      	ldr	r1, [pc, #328]	@ (800728c <I2C_RequestMemoryRead+0x1cc>)
 8007144:	68f8      	ldr	r0, [r7, #12]
 8007146:	f000 fae1 	bl	800770c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800714a:	4603      	mov	r3, r0
 800714c:	2b00      	cmp	r3, #0
 800714e:	d001      	beq.n	8007154 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8007150:	2301      	movs	r3, #1
 8007152:	e097      	b.n	8007284 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8007154:	2300      	movs	r3, #0
 8007156:	617b      	str	r3, [r7, #20]
 8007158:	68fb      	ldr	r3, [r7, #12]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	695b      	ldr	r3, [r3, #20]
 800715e:	617b      	str	r3, [r7, #20]
 8007160:	68fb      	ldr	r3, [r7, #12]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	699b      	ldr	r3, [r3, #24]
 8007166:	617b      	str	r3, [r7, #20]
 8007168:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800716a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800716c:	6a39      	ldr	r1, [r7, #32]
 800716e:	68f8      	ldr	r0, [r7, #12]
 8007170:	f000 fb6c 	bl	800784c <I2C_WaitOnTXEFlagUntilTimeout>
 8007174:	4603      	mov	r3, r0
 8007176:	2b00      	cmp	r3, #0
 8007178:	d00d      	beq.n	8007196 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800717a:	68fb      	ldr	r3, [r7, #12]
 800717c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800717e:	2b04      	cmp	r3, #4
 8007180:	d107      	bne.n	8007192 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	681a      	ldr	r2, [r3, #0]
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007190:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007192:	2301      	movs	r3, #1
 8007194:	e076      	b.n	8007284 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8007196:	88fb      	ldrh	r3, [r7, #6]
 8007198:	2b01      	cmp	r3, #1
 800719a:	d105      	bne.n	80071a8 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800719c:	893b      	ldrh	r3, [r7, #8]
 800719e:	b2da      	uxtb	r2, r3
 80071a0:	68fb      	ldr	r3, [r7, #12]
 80071a2:	681b      	ldr	r3, [r3, #0]
 80071a4:	611a      	str	r2, [r3, #16]
 80071a6:	e021      	b.n	80071ec <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80071a8:	893b      	ldrh	r3, [r7, #8]
 80071aa:	0a1b      	lsrs	r3, r3, #8
 80071ac:	b29b      	uxth	r3, r3
 80071ae:	b2da      	uxtb	r2, r3
 80071b0:	68fb      	ldr	r3, [r7, #12]
 80071b2:	681b      	ldr	r3, [r3, #0]
 80071b4:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80071b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80071b8:	6a39      	ldr	r1, [r7, #32]
 80071ba:	68f8      	ldr	r0, [r7, #12]
 80071bc:	f000 fb46 	bl	800784c <I2C_WaitOnTXEFlagUntilTimeout>
 80071c0:	4603      	mov	r3, r0
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d00d      	beq.n	80071e2 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80071c6:	68fb      	ldr	r3, [r7, #12]
 80071c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071ca:	2b04      	cmp	r3, #4
 80071cc:	d107      	bne.n	80071de <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80071ce:	68fb      	ldr	r3, [r7, #12]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	681a      	ldr	r2, [r3, #0]
 80071d4:	68fb      	ldr	r3, [r7, #12]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80071dc:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80071de:	2301      	movs	r3, #1
 80071e0:	e050      	b.n	8007284 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80071e2:	893b      	ldrh	r3, [r7, #8]
 80071e4:	b2da      	uxtb	r2, r3
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80071ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80071ee:	6a39      	ldr	r1, [r7, #32]
 80071f0:	68f8      	ldr	r0, [r7, #12]
 80071f2:	f000 fb2b 	bl	800784c <I2C_WaitOnTXEFlagUntilTimeout>
 80071f6:	4603      	mov	r3, r0
 80071f8:	2b00      	cmp	r3, #0
 80071fa:	d00d      	beq.n	8007218 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007200:	2b04      	cmp	r3, #4
 8007202:	d107      	bne.n	8007214 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8007204:	68fb      	ldr	r3, [r7, #12]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	681a      	ldr	r2, [r3, #0]
 800720a:	68fb      	ldr	r3, [r7, #12]
 800720c:	681b      	ldr	r3, [r3, #0]
 800720e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8007212:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8007214:	2301      	movs	r3, #1
 8007216:	e035      	b.n	8007284 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8007218:	68fb      	ldr	r3, [r7, #12]
 800721a:	681b      	ldr	r3, [r3, #0]
 800721c:	681a      	ldr	r2, [r3, #0]
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8007226:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8007228:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800722a:	9300      	str	r3, [sp, #0]
 800722c:	6a3b      	ldr	r3, [r7, #32]
 800722e:	2200      	movs	r2, #0
 8007230:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8007234:	68f8      	ldr	r0, [r7, #12]
 8007236:	f000 f9ef 	bl	8007618 <I2C_WaitOnFlagUntilTimeout>
 800723a:	4603      	mov	r3, r0
 800723c:	2b00      	cmp	r3, #0
 800723e:	d00d      	beq.n	800725c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800724a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800724e:	d103      	bne.n	8007258 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8007256:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8007258:	2303      	movs	r3, #3
 800725a:	e013      	b.n	8007284 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800725c:	897b      	ldrh	r3, [r7, #10]
 800725e:	b2db      	uxtb	r3, r3
 8007260:	f043 0301 	orr.w	r3, r3, #1
 8007264:	b2da      	uxtb	r2, r3
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800726c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800726e:	6a3a      	ldr	r2, [r7, #32]
 8007270:	4906      	ldr	r1, [pc, #24]	@ (800728c <I2C_RequestMemoryRead+0x1cc>)
 8007272:	68f8      	ldr	r0, [r7, #12]
 8007274:	f000 fa4a 	bl	800770c <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8007278:	4603      	mov	r3, r0
 800727a:	2b00      	cmp	r3, #0
 800727c:	d001      	beq.n	8007282 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800727e:	2301      	movs	r3, #1
 8007280:	e000      	b.n	8007284 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8007282:	2300      	movs	r3, #0
}
 8007284:	4618      	mov	r0, r3
 8007286:	3718      	adds	r7, #24
 8007288:	46bd      	mov	sp, r7
 800728a:	bd80      	pop	{r7, pc}
 800728c:	00010002 	.word	0x00010002

08007290 <I2C_DMAXferCplt>:
  * @brief  DMA I2C process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAXferCplt(DMA_HandleTypeDef *hdma)
{
 8007290:	b580      	push	{r7, lr}
 8007292:	b086      	sub	sp, #24
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800729c:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800729e:	697b      	ldr	r3, [r7, #20]
 80072a0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80072a4:	74fb      	strb	r3, [r7, #19]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80072a6:	697b      	ldr	r3, [r7, #20]
 80072a8:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80072ac:	74bb      	strb	r3, [r7, #18]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80072ae:	697b      	ldr	r3, [r7, #20]
 80072b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80072b2:	60fb      	str	r3, [r7, #12]

  /* Disable EVT and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80072b4:	697b      	ldr	r3, [r7, #20]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	685a      	ldr	r2, [r3, #4]
 80072ba:	697b      	ldr	r3, [r7, #20]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 80072c2:	605a      	str	r2, [r3, #4]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80072c4:	697b      	ldr	r3, [r7, #20]
 80072c6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d003      	beq.n	80072d4 <I2C_DMAXferCplt+0x44>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 80072cc:	697b      	ldr	r3, [r7, #20]
 80072ce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80072d0:	2200      	movs	r2, #0
 80072d2:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 80072d4:	697b      	ldr	r3, [r7, #20]
 80072d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072d8:	2b00      	cmp	r3, #0
 80072da:	d003      	beq.n	80072e4 <I2C_DMAXferCplt+0x54>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 80072dc:	697b      	ldr	r3, [r7, #20]
 80072de:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80072e0:	2200      	movs	r2, #0
 80072e2:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  if ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_TX) == (uint32_t)HAL_I2C_STATE_BUSY_TX) || ((((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_BUSY_RX) == (uint32_t)HAL_I2C_STATE_BUSY_RX) && (CurrentMode == HAL_I2C_MODE_SLAVE)))
 80072e4:	7cfb      	ldrb	r3, [r7, #19]
 80072e6:	f003 0321 	and.w	r3, r3, #33	@ 0x21
 80072ea:	2b21      	cmp	r3, #33	@ 0x21
 80072ec:	d007      	beq.n	80072fe <I2C_DMAXferCplt+0x6e>
 80072ee:	7cfb      	ldrb	r3, [r7, #19]
 80072f0:	f003 0322 	and.w	r3, r3, #34	@ 0x22
 80072f4:	2b22      	cmp	r3, #34	@ 0x22
 80072f6:	d131      	bne.n	800735c <I2C_DMAXferCplt+0xcc>
 80072f8:	7cbb      	ldrb	r3, [r7, #18]
 80072fa:	2b20      	cmp	r3, #32
 80072fc:	d12e      	bne.n	800735c <I2C_DMAXferCplt+0xcc>
  {
    /* Disable DMA Request */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80072fe:	697b      	ldr	r3, [r7, #20]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	685a      	ldr	r2, [r3, #4]
 8007304:	697b      	ldr	r3, [r7, #20]
 8007306:	681b      	ldr	r3, [r3, #0]
 8007308:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800730c:	605a      	str	r2, [r3, #4]

    hi2c->XferCount = 0U;
 800730e:	697b      	ldr	r3, [r7, #20]
 8007310:	2200      	movs	r2, #0
 8007312:	855a      	strh	r2, [r3, #42]	@ 0x2a

    if (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8007314:	7cfb      	ldrb	r3, [r7, #19]
 8007316:	2b29      	cmp	r3, #41	@ 0x29
 8007318:	d10a      	bne.n	8007330 <I2C_DMAXferCplt+0xa0>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800731a:	697b      	ldr	r3, [r7, #20]
 800731c:	2221      	movs	r2, #33	@ 0x21
 800731e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8007320:	697b      	ldr	r3, [r7, #20]
 8007322:	2228      	movs	r2, #40	@ 0x28
 8007324:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007328:	6978      	ldr	r0, [r7, #20]
 800732a:	f7fe fc6f 	bl	8005c0c <HAL_I2C_SlaveTxCpltCallback>
 800732e:	e00c      	b.n	800734a <I2C_DMAXferCplt+0xba>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8007330:	7cfb      	ldrb	r3, [r7, #19]
 8007332:	2b2a      	cmp	r3, #42	@ 0x2a
 8007334:	d109      	bne.n	800734a <I2C_DMAXferCplt+0xba>
    {
      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8007336:	697b      	ldr	r3, [r7, #20]
 8007338:	2222      	movs	r2, #34	@ 0x22
 800733a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800733c:	697b      	ldr	r3, [r7, #20]
 800733e:	2228      	movs	r2, #40	@ 0x28
 8007340:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007344:	6978      	ldr	r0, [r7, #20]
 8007346:	f7fe fc6b 	bl	8005c20 <HAL_I2C_SlaveRxCpltCallback>
    {
      /* Do nothing */
    }

    /* Enable EVT and ERR interrupt to treat end of transfer in IRQ handler */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 800734a:	697b      	ldr	r3, [r7, #20]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	685a      	ldr	r2, [r3, #4]
 8007350:	697b      	ldr	r3, [r7, #20]
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	f442 7240 	orr.w	r2, r2, #768	@ 0x300
 8007358:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800735a:	e074      	b.n	8007446 <I2C_DMAXferCplt+0x1b6>
  else if (hi2c->Mode != HAL_I2C_MODE_NONE)
 800735c:	697b      	ldr	r3, [r7, #20]
 800735e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007362:	b2db      	uxtb	r3, r3
 8007364:	2b00      	cmp	r3, #0
 8007366:	d06e      	beq.n	8007446 <I2C_DMAXferCplt+0x1b6>
    if (hi2c->XferCount == (uint16_t)1)
 8007368:	697b      	ldr	r3, [r7, #20]
 800736a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800736c:	b29b      	uxth	r3, r3
 800736e:	2b01      	cmp	r3, #1
 8007370:	d107      	bne.n	8007382 <I2C_DMAXferCplt+0xf2>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007372:	697b      	ldr	r3, [r7, #20]
 8007374:	681b      	ldr	r3, [r3, #0]
 8007376:	681a      	ldr	r2, [r3, #0]
 8007378:	697b      	ldr	r3, [r7, #20]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007380:	601a      	str	r2, [r3, #0]
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8007382:	697b      	ldr	r3, [r7, #20]
 8007384:	681b      	ldr	r3, [r3, #0]
 8007386:	685a      	ldr	r2, [r3, #4]
 8007388:	697b      	ldr	r3, [r7, #20]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	f422 7240 	bic.w	r2, r2, #768	@ 0x300
 8007390:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_OTHER_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8007392:	68fb      	ldr	r3, [r7, #12]
 8007394:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8007398:	d009      	beq.n	80073ae <I2C_DMAXferCplt+0x11e>
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	2b08      	cmp	r3, #8
 800739e:	d006      	beq.n	80073ae <I2C_DMAXferCplt+0x11e>
 80073a0:	68fb      	ldr	r3, [r7, #12]
 80073a2:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 80073a6:	d002      	beq.n	80073ae <I2C_DMAXferCplt+0x11e>
 80073a8:	68fb      	ldr	r3, [r7, #12]
 80073aa:	2b20      	cmp	r3, #32
 80073ac:	d107      	bne.n	80073be <I2C_DMAXferCplt+0x12e>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80073ae:	697b      	ldr	r3, [r7, #20]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	681a      	ldr	r2, [r3, #0]
 80073b4:	697b      	ldr	r3, [r7, #20]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80073bc:	601a      	str	r2, [r3, #0]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80073be:	697b      	ldr	r3, [r7, #20]
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	685a      	ldr	r2, [r3, #4]
 80073c4:	697b      	ldr	r3, [r7, #20]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 80073cc:	605a      	str	r2, [r3, #4]
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80073ce:	697b      	ldr	r3, [r7, #20]
 80073d0:	681b      	ldr	r3, [r3, #0]
 80073d2:	685a      	ldr	r2, [r3, #4]
 80073d4:	697b      	ldr	r3, [r7, #20]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80073dc:	605a      	str	r2, [r3, #4]
    hi2c->XferCount = 0U;
 80073de:	697b      	ldr	r3, [r7, #20]
 80073e0:	2200      	movs	r2, #0
 80073e2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80073e4:	697b      	ldr	r3, [r7, #20]
 80073e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80073e8:	2b00      	cmp	r3, #0
 80073ea:	d003      	beq.n	80073f4 <I2C_DMAXferCplt+0x164>
      HAL_I2C_ErrorCallback(hi2c);
 80073ec:	6978      	ldr	r0, [r7, #20]
 80073ee:	f7fb ffcb 	bl	8003388 <HAL_I2C_ErrorCallback>
}
 80073f2:	e028      	b.n	8007446 <I2C_DMAXferCplt+0x1b6>
      hi2c->State = HAL_I2C_STATE_READY;
 80073f4:	697b      	ldr	r3, [r7, #20]
 80073f6:	2220      	movs	r2, #32
 80073f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80073fc:	697b      	ldr	r3, [r7, #20]
 80073fe:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8007402:	b2db      	uxtb	r3, r3
 8007404:	2b40      	cmp	r3, #64	@ 0x40
 8007406:	d10a      	bne.n	800741e <I2C_DMAXferCplt+0x18e>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8007408:	697b      	ldr	r3, [r7, #20]
 800740a:	2200      	movs	r2, #0
 800740c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->PreviousState = I2C_STATE_NONE;
 8007410:	697b      	ldr	r3, [r7, #20]
 8007412:	2200      	movs	r2, #0
 8007414:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MemRxCpltCallback(hi2c);
 8007416:	6978      	ldr	r0, [r7, #20]
 8007418:	f7fb ff8e 	bl	8003338 <HAL_I2C_MemRxCpltCallback>
}
 800741c:	e013      	b.n	8007446 <I2C_DMAXferCplt+0x1b6>
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800741e:	697b      	ldr	r3, [r7, #20]
 8007420:	2200      	movs	r2, #0
 8007422:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME))
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	2b08      	cmp	r3, #8
 800742a:	d002      	beq.n	8007432 <I2C_DMAXferCplt+0x1a2>
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	2b20      	cmp	r3, #32
 8007430:	d103      	bne.n	800743a <I2C_DMAXferCplt+0x1aa>
          hi2c->PreviousState = I2C_STATE_NONE;
 8007432:	697b      	ldr	r3, [r7, #20]
 8007434:	2200      	movs	r2, #0
 8007436:	631a      	str	r2, [r3, #48]	@ 0x30
 8007438:	e002      	b.n	8007440 <I2C_DMAXferCplt+0x1b0>
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800743a:	697b      	ldr	r3, [r7, #20]
 800743c:	2212      	movs	r2, #18
 800743e:	631a      	str	r2, [r3, #48]	@ 0x30
        HAL_I2C_MasterRxCpltCallback(hi2c);
 8007440:	6978      	ldr	r0, [r7, #20]
 8007442:	f7fe fbd9 	bl	8005bf8 <HAL_I2C_MasterRxCpltCallback>
}
 8007446:	bf00      	nop
 8007448:	3718      	adds	r7, #24
 800744a:	46bd      	mov	sp, r7
 800744c:	bd80      	pop	{r7, pc}

0800744e <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 800744e:	b580      	push	{r7, lr}
 8007450:	b084      	sub	sp, #16
 8007452:	af00      	add	r7, sp, #0
 8007454:	6078      	str	r0, [r7, #4]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800745a:	60fb      	str	r3, [r7, #12]

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007460:	2b00      	cmp	r3, #0
 8007462:	d003      	beq.n	800746c <I2C_DMAError+0x1e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007468:	2200      	movs	r2, #0
 800746a:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007470:	2b00      	cmp	r3, #0
 8007472:	d003      	beq.n	800747c <I2C_DMAError+0x2e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8007474:	68fb      	ldr	r3, [r7, #12]
 8007476:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007478:	2200      	movs	r2, #0
 800747a:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Ignore DMA FIFO error */
  if (HAL_DMA_GetError(hdma) != HAL_DMA_ERROR_FE)
 800747c:	6878      	ldr	r0, [r7, #4]
 800747e:	f7fc ffa7 	bl	80043d0 <HAL_DMA_GetError>
 8007482:	4603      	mov	r3, r0
 8007484:	2b02      	cmp	r3, #2
 8007486:	d01b      	beq.n	80074c0 <I2C_DMAError+0x72>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR1 &= ~I2C_CR1_ACK;
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	681a      	ldr	r2, [r3, #0]
 800748e:	68fb      	ldr	r3, [r7, #12]
 8007490:	681b      	ldr	r3, [r3, #0]
 8007492:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007496:	601a      	str	r2, [r3, #0]

    hi2c->XferCount = 0U;
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	2200      	movs	r2, #0
 800749c:	855a      	strh	r2, [r3, #42]	@ 0x2a

    hi2c->State = HAL_I2C_STATE_READY;
 800749e:	68fb      	ldr	r3, [r7, #12]
 80074a0:	2220      	movs	r2, #32
 80074a2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80074a6:	68fb      	ldr	r3, [r7, #12]
 80074a8:	2200      	movs	r2, #0
 80074aa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80074ae:	68fb      	ldr	r3, [r7, #12]
 80074b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80074b2:	f043 0210 	orr.w	r2, r3, #16
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	641a      	str	r2, [r3, #64]	@ 0x40

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 80074ba:	68f8      	ldr	r0, [r7, #12]
 80074bc:	f7fb ff64 	bl	8003388 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80074c0:	bf00      	nop
 80074c2:	3710      	adds	r7, #16
 80074c4:	46bd      	mov	sp, r7
 80074c6:	bd80      	pop	{r7, pc}

080074c8 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80074c8:	b580      	push	{r7, lr}
 80074ca:	b086      	sub	sp, #24
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80074d0:	2300      	movs	r3, #0
 80074d2:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80074d8:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80074da:	697b      	ldr	r3, [r7, #20]
 80074dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80074e0:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80074e2:	4b4b      	ldr	r3, [pc, #300]	@ (8007610 <I2C_DMAAbort+0x148>)
 80074e4:	681b      	ldr	r3, [r3, #0]
 80074e6:	08db      	lsrs	r3, r3, #3
 80074e8:	4a4a      	ldr	r2, [pc, #296]	@ (8007614 <I2C_DMAAbort+0x14c>)
 80074ea:	fba2 2303 	umull	r2, r3, r2, r3
 80074ee:	0a1a      	lsrs	r2, r3, #8
 80074f0:	4613      	mov	r3, r2
 80074f2:	009b      	lsls	r3, r3, #2
 80074f4:	4413      	add	r3, r2
 80074f6:	00da      	lsls	r2, r3, #3
 80074f8:	1ad3      	subs	r3, r2, r3
 80074fa:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80074fc:	68fb      	ldr	r3, [r7, #12]
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d106      	bne.n	8007510 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8007502:	697b      	ldr	r3, [r7, #20]
 8007504:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007506:	f043 0220 	orr.w	r2, r3, #32
 800750a:	697b      	ldr	r3, [r7, #20]
 800750c:	641a      	str	r2, [r3, #64]	@ 0x40
      break;
 800750e:	e00a      	b.n	8007526 <I2C_DMAAbort+0x5e>
    }
    count--;
 8007510:	68fb      	ldr	r3, [r7, #12]
 8007512:	3b01      	subs	r3, #1
 8007514:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8007516:	697b      	ldr	r3, [r7, #20]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	681b      	ldr	r3, [r3, #0]
 800751c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8007520:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007524:	d0ea      	beq.n	80074fc <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8007526:	697b      	ldr	r3, [r7, #20]
 8007528:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800752a:	2b00      	cmp	r3, #0
 800752c:	d003      	beq.n	8007536 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800752e:	697b      	ldr	r3, [r7, #20]
 8007530:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007532:	2200      	movs	r2, #0
 8007534:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8007536:	697b      	ldr	r3, [r7, #20]
 8007538:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800753a:	2b00      	cmp	r3, #0
 800753c:	d003      	beq.n	8007546 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800753e:	697b      	ldr	r3, [r7, #20]
 8007540:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007542:	2200      	movs	r2, #0
 8007544:	63da      	str	r2, [r3, #60]	@ 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8007546:	697b      	ldr	r3, [r7, #20]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	681a      	ldr	r2, [r3, #0]
 800754c:	697b      	ldr	r3, [r7, #20]
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8007554:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8007556:	697b      	ldr	r3, [r7, #20]
 8007558:	2200      	movs	r2, #0
 800755a:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 800755c:	697b      	ldr	r3, [r7, #20]
 800755e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007560:	2b00      	cmp	r3, #0
 8007562:	d003      	beq.n	800756c <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8007564:	697b      	ldr	r3, [r7, #20]
 8007566:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8007568:	2200      	movs	r2, #0
 800756a:	651a      	str	r2, [r3, #80]	@ 0x50
  }
  if (hi2c->hdmarx != NULL)
 800756c:	697b      	ldr	r3, [r7, #20]
 800756e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007570:	2b00      	cmp	r3, #0
 8007572:	d003      	beq.n	800757c <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8007574:	697b      	ldr	r3, [r7, #20]
 8007576:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8007578:	2200      	movs	r2, #0
 800757a:	651a      	str	r2, [r3, #80]	@ 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 800757c:	697b      	ldr	r3, [r7, #20]
 800757e:	681b      	ldr	r3, [r3, #0]
 8007580:	681a      	ldr	r2, [r3, #0]
 8007582:	697b      	ldr	r3, [r7, #20]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	f022 0201 	bic.w	r2, r2, #1
 800758a:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800758c:	697b      	ldr	r3, [r7, #20]
 800758e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8007592:	b2db      	uxtb	r3, r3
 8007594:	2b60      	cmp	r3, #96	@ 0x60
 8007596:	d10e      	bne.n	80075b6 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8007598:	697b      	ldr	r3, [r7, #20]
 800759a:	2220      	movs	r2, #32
 800759c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80075a0:	697b      	ldr	r3, [r7, #20]
 80075a2:	2200      	movs	r2, #0
 80075a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80075a8:	697b      	ldr	r3, [r7, #20]
 80075aa:	2200      	movs	r2, #0
 80075ac:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80075ae:	6978      	ldr	r0, [r7, #20]
 80075b0:	f7fe fb62 	bl	8005c78 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80075b4:	e027      	b.n	8007606 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80075b6:	7cfb      	ldrb	r3, [r7, #19]
 80075b8:	f003 0328 	and.w	r3, r3, #40	@ 0x28
 80075bc:	2b28      	cmp	r3, #40	@ 0x28
 80075be:	d117      	bne.n	80075f0 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80075c0:	697b      	ldr	r3, [r7, #20]
 80075c2:	681b      	ldr	r3, [r3, #0]
 80075c4:	681a      	ldr	r2, [r3, #0]
 80075c6:	697b      	ldr	r3, [r7, #20]
 80075c8:	681b      	ldr	r3, [r3, #0]
 80075ca:	f042 0201 	orr.w	r2, r2, #1
 80075ce:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80075d0:	697b      	ldr	r3, [r7, #20]
 80075d2:	681b      	ldr	r3, [r3, #0]
 80075d4:	681a      	ldr	r2, [r3, #0]
 80075d6:	697b      	ldr	r3, [r7, #20]
 80075d8:	681b      	ldr	r3, [r3, #0]
 80075da:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80075de:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80075e0:	697b      	ldr	r3, [r7, #20]
 80075e2:	2200      	movs	r2, #0
 80075e4:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80075e6:	697b      	ldr	r3, [r7, #20]
 80075e8:	2228      	movs	r2, #40	@ 0x28
 80075ea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
 80075ee:	e007      	b.n	8007600 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80075f0:	697b      	ldr	r3, [r7, #20]
 80075f2:	2220      	movs	r2, #32
 80075f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80075f8:	697b      	ldr	r3, [r7, #20]
 80075fa:	2200      	movs	r2, #0
 80075fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8007600:	6978      	ldr	r0, [r7, #20]
 8007602:	f7fb fec1 	bl	8003388 <HAL_I2C_ErrorCallback>
}
 8007606:	bf00      	nop
 8007608:	3718      	adds	r7, #24
 800760a:	46bd      	mov	sp, r7
 800760c:	bd80      	pop	{r7, pc}
 800760e:	bf00      	nop
 8007610:	2000000c 	.word	0x2000000c
 8007614:	14f8b589 	.word	0x14f8b589

08007618 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8007618:	b580      	push	{r7, lr}
 800761a:	b084      	sub	sp, #16
 800761c:	af00      	add	r7, sp, #0
 800761e:	60f8      	str	r0, [r7, #12]
 8007620:	60b9      	str	r1, [r7, #8]
 8007622:	603b      	str	r3, [r7, #0]
 8007624:	4613      	mov	r3, r2
 8007626:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8007628:	e048      	b.n	80076bc <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800762a:	683b      	ldr	r3, [r7, #0]
 800762c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007630:	d044      	beq.n	80076bc <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007632:	f7fc fafb 	bl	8003c2c <HAL_GetTick>
 8007636:	4602      	mov	r2, r0
 8007638:	69bb      	ldr	r3, [r7, #24]
 800763a:	1ad3      	subs	r3, r2, r3
 800763c:	683a      	ldr	r2, [r7, #0]
 800763e:	429a      	cmp	r2, r3
 8007640:	d302      	bcc.n	8007648 <I2C_WaitOnFlagUntilTimeout+0x30>
 8007642:	683b      	ldr	r3, [r7, #0]
 8007644:	2b00      	cmp	r3, #0
 8007646:	d139      	bne.n	80076bc <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8007648:	68bb      	ldr	r3, [r7, #8]
 800764a:	0c1b      	lsrs	r3, r3, #16
 800764c:	b2db      	uxtb	r3, r3
 800764e:	2b01      	cmp	r3, #1
 8007650:	d10d      	bne.n	800766e <I2C_WaitOnFlagUntilTimeout+0x56>
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	695b      	ldr	r3, [r3, #20]
 8007658:	43da      	mvns	r2, r3
 800765a:	68bb      	ldr	r3, [r7, #8]
 800765c:	4013      	ands	r3, r2
 800765e:	b29b      	uxth	r3, r3
 8007660:	2b00      	cmp	r3, #0
 8007662:	bf0c      	ite	eq
 8007664:	2301      	moveq	r3, #1
 8007666:	2300      	movne	r3, #0
 8007668:	b2db      	uxtb	r3, r3
 800766a:	461a      	mov	r2, r3
 800766c:	e00c      	b.n	8007688 <I2C_WaitOnFlagUntilTimeout+0x70>
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	681b      	ldr	r3, [r3, #0]
 8007672:	699b      	ldr	r3, [r3, #24]
 8007674:	43da      	mvns	r2, r3
 8007676:	68bb      	ldr	r3, [r7, #8]
 8007678:	4013      	ands	r3, r2
 800767a:	b29b      	uxth	r3, r3
 800767c:	2b00      	cmp	r3, #0
 800767e:	bf0c      	ite	eq
 8007680:	2301      	moveq	r3, #1
 8007682:	2300      	movne	r3, #0
 8007684:	b2db      	uxtb	r3, r3
 8007686:	461a      	mov	r2, r3
 8007688:	79fb      	ldrb	r3, [r7, #7]
 800768a:	429a      	cmp	r2, r3
 800768c:	d116      	bne.n	80076bc <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	2200      	movs	r2, #0
 8007692:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	2220      	movs	r2, #32
 8007698:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 800769c:	68fb      	ldr	r3, [r7, #12]
 800769e:	2200      	movs	r2, #0
 80076a0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80076a8:	f043 0220 	orr.w	r2, r3, #32
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	2200      	movs	r2, #0
 80076b4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80076b8:	2301      	movs	r3, #1
 80076ba:	e023      	b.n	8007704 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80076bc:	68bb      	ldr	r3, [r7, #8]
 80076be:	0c1b      	lsrs	r3, r3, #16
 80076c0:	b2db      	uxtb	r3, r3
 80076c2:	2b01      	cmp	r3, #1
 80076c4:	d10d      	bne.n	80076e2 <I2C_WaitOnFlagUntilTimeout+0xca>
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	695b      	ldr	r3, [r3, #20]
 80076cc:	43da      	mvns	r2, r3
 80076ce:	68bb      	ldr	r3, [r7, #8]
 80076d0:	4013      	ands	r3, r2
 80076d2:	b29b      	uxth	r3, r3
 80076d4:	2b00      	cmp	r3, #0
 80076d6:	bf0c      	ite	eq
 80076d8:	2301      	moveq	r3, #1
 80076da:	2300      	movne	r3, #0
 80076dc:	b2db      	uxtb	r3, r3
 80076de:	461a      	mov	r2, r3
 80076e0:	e00c      	b.n	80076fc <I2C_WaitOnFlagUntilTimeout+0xe4>
 80076e2:	68fb      	ldr	r3, [r7, #12]
 80076e4:	681b      	ldr	r3, [r3, #0]
 80076e6:	699b      	ldr	r3, [r3, #24]
 80076e8:	43da      	mvns	r2, r3
 80076ea:	68bb      	ldr	r3, [r7, #8]
 80076ec:	4013      	ands	r3, r2
 80076ee:	b29b      	uxth	r3, r3
 80076f0:	2b00      	cmp	r3, #0
 80076f2:	bf0c      	ite	eq
 80076f4:	2301      	moveq	r3, #1
 80076f6:	2300      	movne	r3, #0
 80076f8:	b2db      	uxtb	r3, r3
 80076fa:	461a      	mov	r2, r3
 80076fc:	79fb      	ldrb	r3, [r7, #7]
 80076fe:	429a      	cmp	r2, r3
 8007700:	d093      	beq.n	800762a <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007702:	2300      	movs	r3, #0
}
 8007704:	4618      	mov	r0, r3
 8007706:	3710      	adds	r7, #16
 8007708:	46bd      	mov	sp, r7
 800770a:	bd80      	pop	{r7, pc}

0800770c <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 800770c:	b580      	push	{r7, lr}
 800770e:	b084      	sub	sp, #16
 8007710:	af00      	add	r7, sp, #0
 8007712:	60f8      	str	r0, [r7, #12]
 8007714:	60b9      	str	r1, [r7, #8]
 8007716:	607a      	str	r2, [r7, #4]
 8007718:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800771a:	e071      	b.n	8007800 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	695b      	ldr	r3, [r3, #20]
 8007722:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007726:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800772a:	d123      	bne.n	8007774 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	681a      	ldr	r2, [r3, #0]
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	681b      	ldr	r3, [r3, #0]
 8007736:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800773a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800773c:	68fb      	ldr	r3, [r7, #12]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8007744:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8007746:	68fb      	ldr	r3, [r7, #12]
 8007748:	2200      	movs	r2, #0
 800774a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800774c:	68fb      	ldr	r3, [r7, #12]
 800774e:	2220      	movs	r2, #32
 8007750:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007754:	68fb      	ldr	r3, [r7, #12]
 8007756:	2200      	movs	r2, #0
 8007758:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800775c:	68fb      	ldr	r3, [r7, #12]
 800775e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007760:	f043 0204 	orr.w	r2, r3, #4
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007768:	68fb      	ldr	r3, [r7, #12]
 800776a:	2200      	movs	r2, #0
 800776c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8007770:	2301      	movs	r3, #1
 8007772:	e067      	b.n	8007844 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800777a:	d041      	beq.n	8007800 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800777c:	f7fc fa56 	bl	8003c2c <HAL_GetTick>
 8007780:	4602      	mov	r2, r0
 8007782:	683b      	ldr	r3, [r7, #0]
 8007784:	1ad3      	subs	r3, r2, r3
 8007786:	687a      	ldr	r2, [r7, #4]
 8007788:	429a      	cmp	r2, r3
 800778a:	d302      	bcc.n	8007792 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	2b00      	cmp	r3, #0
 8007790:	d136      	bne.n	8007800 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8007792:	68bb      	ldr	r3, [r7, #8]
 8007794:	0c1b      	lsrs	r3, r3, #16
 8007796:	b2db      	uxtb	r3, r3
 8007798:	2b01      	cmp	r3, #1
 800779a:	d10c      	bne.n	80077b6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 800779c:	68fb      	ldr	r3, [r7, #12]
 800779e:	681b      	ldr	r3, [r3, #0]
 80077a0:	695b      	ldr	r3, [r3, #20]
 80077a2:	43da      	mvns	r2, r3
 80077a4:	68bb      	ldr	r3, [r7, #8]
 80077a6:	4013      	ands	r3, r2
 80077a8:	b29b      	uxth	r3, r3
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	bf14      	ite	ne
 80077ae:	2301      	movne	r3, #1
 80077b0:	2300      	moveq	r3, #0
 80077b2:	b2db      	uxtb	r3, r3
 80077b4:	e00b      	b.n	80077ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80077b6:	68fb      	ldr	r3, [r7, #12]
 80077b8:	681b      	ldr	r3, [r3, #0]
 80077ba:	699b      	ldr	r3, [r3, #24]
 80077bc:	43da      	mvns	r2, r3
 80077be:	68bb      	ldr	r3, [r7, #8]
 80077c0:	4013      	ands	r3, r2
 80077c2:	b29b      	uxth	r3, r3
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	bf14      	ite	ne
 80077c8:	2301      	movne	r3, #1
 80077ca:	2300      	moveq	r3, #0
 80077cc:	b2db      	uxtb	r3, r3
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d016      	beq.n	8007800 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	2200      	movs	r2, #0
 80077d6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80077d8:	68fb      	ldr	r3, [r7, #12]
 80077da:	2220      	movs	r2, #32
 80077dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	2200      	movs	r2, #0
 80077e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80077ec:	f043 0220 	orr.w	r2, r3, #32
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	2200      	movs	r2, #0
 80077f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80077fc:	2301      	movs	r3, #1
 80077fe:	e021      	b.n	8007844 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8007800:	68bb      	ldr	r3, [r7, #8]
 8007802:	0c1b      	lsrs	r3, r3, #16
 8007804:	b2db      	uxtb	r3, r3
 8007806:	2b01      	cmp	r3, #1
 8007808:	d10c      	bne.n	8007824 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800780a:	68fb      	ldr	r3, [r7, #12]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	695b      	ldr	r3, [r3, #20]
 8007810:	43da      	mvns	r2, r3
 8007812:	68bb      	ldr	r3, [r7, #8]
 8007814:	4013      	ands	r3, r2
 8007816:	b29b      	uxth	r3, r3
 8007818:	2b00      	cmp	r3, #0
 800781a:	bf14      	ite	ne
 800781c:	2301      	movne	r3, #1
 800781e:	2300      	moveq	r3, #0
 8007820:	b2db      	uxtb	r3, r3
 8007822:	e00b      	b.n	800783c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	699b      	ldr	r3, [r3, #24]
 800782a:	43da      	mvns	r2, r3
 800782c:	68bb      	ldr	r3, [r7, #8]
 800782e:	4013      	ands	r3, r2
 8007830:	b29b      	uxth	r3, r3
 8007832:	2b00      	cmp	r3, #0
 8007834:	bf14      	ite	ne
 8007836:	2301      	movne	r3, #1
 8007838:	2300      	moveq	r3, #0
 800783a:	b2db      	uxtb	r3, r3
 800783c:	2b00      	cmp	r3, #0
 800783e:	f47f af6d 	bne.w	800771c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8007842:	2300      	movs	r3, #0
}
 8007844:	4618      	mov	r0, r3
 8007846:	3710      	adds	r7, #16
 8007848:	46bd      	mov	sp, r7
 800784a:	bd80      	pop	{r7, pc}

0800784c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800784c:	b580      	push	{r7, lr}
 800784e:	b084      	sub	sp, #16
 8007850:	af00      	add	r7, sp, #0
 8007852:	60f8      	str	r0, [r7, #12]
 8007854:	60b9      	str	r1, [r7, #8]
 8007856:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007858:	e034      	b.n	80078c4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800785a:	68f8      	ldr	r0, [r7, #12]
 800785c:	f000 f915 	bl	8007a8a <I2C_IsAcknowledgeFailed>
 8007860:	4603      	mov	r3, r0
 8007862:	2b00      	cmp	r3, #0
 8007864:	d001      	beq.n	800786a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8007866:	2301      	movs	r3, #1
 8007868:	e034      	b.n	80078d4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800786a:	68bb      	ldr	r3, [r7, #8]
 800786c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007870:	d028      	beq.n	80078c4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007872:	f7fc f9db 	bl	8003c2c <HAL_GetTick>
 8007876:	4602      	mov	r2, r0
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	1ad3      	subs	r3, r2, r3
 800787c:	68ba      	ldr	r2, [r7, #8]
 800787e:	429a      	cmp	r2, r3
 8007880:	d302      	bcc.n	8007888 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8007882:	68bb      	ldr	r3, [r7, #8]
 8007884:	2b00      	cmp	r3, #0
 8007886:	d11d      	bne.n	80078c4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8007888:	68fb      	ldr	r3, [r7, #12]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	695b      	ldr	r3, [r3, #20]
 800788e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007892:	2b80      	cmp	r3, #128	@ 0x80
 8007894:	d016      	beq.n	80078c4 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8007896:	68fb      	ldr	r3, [r7, #12]
 8007898:	2200      	movs	r2, #0
 800789a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	2220      	movs	r2, #32
 80078a0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	2200      	movs	r2, #0
 80078a8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80078b0:	f043 0220 	orr.w	r2, r3, #32
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	2200      	movs	r2, #0
 80078bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80078c0:	2301      	movs	r3, #1
 80078c2:	e007      	b.n	80078d4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80078c4:	68fb      	ldr	r3, [r7, #12]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	695b      	ldr	r3, [r3, #20]
 80078ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80078ce:	2b80      	cmp	r3, #128	@ 0x80
 80078d0:	d1c3      	bne.n	800785a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80078d2:	2300      	movs	r3, #0
}
 80078d4:	4618      	mov	r0, r3
 80078d6:	3710      	adds	r7, #16
 80078d8:	46bd      	mov	sp, r7
 80078da:	bd80      	pop	{r7, pc}

080078dc <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80078dc:	b580      	push	{r7, lr}
 80078de:	b084      	sub	sp, #16
 80078e0:	af00      	add	r7, sp, #0
 80078e2:	60f8      	str	r0, [r7, #12]
 80078e4:	60b9      	str	r1, [r7, #8]
 80078e6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80078e8:	e034      	b.n	8007954 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80078ea:	68f8      	ldr	r0, [r7, #12]
 80078ec:	f000 f8cd 	bl	8007a8a <I2C_IsAcknowledgeFailed>
 80078f0:	4603      	mov	r3, r0
 80078f2:	2b00      	cmp	r3, #0
 80078f4:	d001      	beq.n	80078fa <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80078f6:	2301      	movs	r3, #1
 80078f8:	e034      	b.n	8007964 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80078fa:	68bb      	ldr	r3, [r7, #8]
 80078fc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007900:	d028      	beq.n	8007954 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007902:	f7fc f993 	bl	8003c2c <HAL_GetTick>
 8007906:	4602      	mov	r2, r0
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	1ad3      	subs	r3, r2, r3
 800790c:	68ba      	ldr	r2, [r7, #8]
 800790e:	429a      	cmp	r2, r3
 8007910:	d302      	bcc.n	8007918 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8007912:	68bb      	ldr	r3, [r7, #8]
 8007914:	2b00      	cmp	r3, #0
 8007916:	d11d      	bne.n	8007954 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	695b      	ldr	r3, [r3, #20]
 800791e:	f003 0304 	and.w	r3, r3, #4
 8007922:	2b04      	cmp	r3, #4
 8007924:	d016      	beq.n	8007954 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8007926:	68fb      	ldr	r3, [r7, #12]
 8007928:	2200      	movs	r2, #0
 800792a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	2220      	movs	r2, #32
 8007930:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007934:	68fb      	ldr	r3, [r7, #12]
 8007936:	2200      	movs	r2, #0
 8007938:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800793c:	68fb      	ldr	r3, [r7, #12]
 800793e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007940:	f043 0220 	orr.w	r2, r3, #32
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007948:	68fb      	ldr	r3, [r7, #12]
 800794a:	2200      	movs	r2, #0
 800794c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8007950:	2301      	movs	r3, #1
 8007952:	e007      	b.n	8007964 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	695b      	ldr	r3, [r3, #20]
 800795a:	f003 0304 	and.w	r3, r3, #4
 800795e:	2b04      	cmp	r3, #4
 8007960:	d1c3      	bne.n	80078ea <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8007962:	2300      	movs	r3, #0
}
 8007964:	4618      	mov	r0, r3
 8007966:	3710      	adds	r7, #16
 8007968:	46bd      	mov	sp, r7
 800796a:	bd80      	pop	{r7, pc}

0800796c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 800796c:	b480      	push	{r7}
 800796e:	b085      	sub	sp, #20
 8007970:	af00      	add	r7, sp, #0
 8007972:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8007974:	2300      	movs	r3, #0
 8007976:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8007978:	4b13      	ldr	r3, [pc, #76]	@ (80079c8 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	08db      	lsrs	r3, r3, #3
 800797e:	4a13      	ldr	r2, [pc, #76]	@ (80079cc <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8007980:	fba2 2303 	umull	r2, r3, r2, r3
 8007984:	0a1a      	lsrs	r2, r3, #8
 8007986:	4613      	mov	r3, r2
 8007988:	009b      	lsls	r3, r3, #2
 800798a:	4413      	add	r3, r2
 800798c:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	3b01      	subs	r3, #1
 8007992:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	2b00      	cmp	r3, #0
 8007998:	d107      	bne.n	80079aa <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800799e:	f043 0220 	orr.w	r2, r3, #32
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	641a      	str	r2, [r3, #64]	@ 0x40

      return HAL_ERROR;
 80079a6:	2301      	movs	r3, #1
 80079a8:	e008      	b.n	80079bc <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	681b      	ldr	r3, [r3, #0]
 80079b0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80079b4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80079b8:	d0e9      	beq.n	800798e <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 80079ba:	2300      	movs	r3, #0
}
 80079bc:	4618      	mov	r0, r3
 80079be:	3714      	adds	r7, #20
 80079c0:	46bd      	mov	sp, r7
 80079c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c6:	4770      	bx	lr
 80079c8:	2000000c 	.word	0x2000000c
 80079cc:	14f8b589 	.word	0x14f8b589

080079d0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80079d0:	b580      	push	{r7, lr}
 80079d2:	b084      	sub	sp, #16
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	60f8      	str	r0, [r7, #12]
 80079d8:	60b9      	str	r1, [r7, #8]
 80079da:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80079dc:	e049      	b.n	8007a72 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	695b      	ldr	r3, [r3, #20]
 80079e4:	f003 0310 	and.w	r3, r3, #16
 80079e8:	2b10      	cmp	r3, #16
 80079ea:	d119      	bne.n	8007a20 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	f06f 0210 	mvn.w	r2, #16
 80079f4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	2200      	movs	r2, #0
 80079fa:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	2220      	movs	r2, #32
 8007a00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007a04:	68fb      	ldr	r3, [r7, #12]
 8007a06:	2200      	movs	r2, #0
 8007a08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007a14:	68fb      	ldr	r3, [r7, #12]
 8007a16:	2200      	movs	r2, #0
 8007a18:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8007a1c:	2301      	movs	r3, #1
 8007a1e:	e030      	b.n	8007a82 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007a20:	f7fc f904 	bl	8003c2c <HAL_GetTick>
 8007a24:	4602      	mov	r2, r0
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	1ad3      	subs	r3, r2, r3
 8007a2a:	68ba      	ldr	r2, [r7, #8]
 8007a2c:	429a      	cmp	r2, r3
 8007a2e:	d302      	bcc.n	8007a36 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8007a30:	68bb      	ldr	r3, [r7, #8]
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d11d      	bne.n	8007a72 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8007a36:	68fb      	ldr	r3, [r7, #12]
 8007a38:	681b      	ldr	r3, [r3, #0]
 8007a3a:	695b      	ldr	r3, [r3, #20]
 8007a3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a40:	2b40      	cmp	r3, #64	@ 0x40
 8007a42:	d016      	beq.n	8007a72 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	2200      	movs	r2, #0
 8007a48:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	2220      	movs	r2, #32
 8007a4e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007a52:	68fb      	ldr	r3, [r7, #12]
 8007a54:	2200      	movs	r2, #0
 8007a56:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007a5e:	f043 0220 	orr.w	r2, r3, #32
 8007a62:	68fb      	ldr	r3, [r7, #12]
 8007a64:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	2200      	movs	r2, #0
 8007a6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8007a6e:	2301      	movs	r3, #1
 8007a70:	e007      	b.n	8007a82 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	695b      	ldr	r3, [r3, #20]
 8007a78:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007a7c:	2b40      	cmp	r3, #64	@ 0x40
 8007a7e:	d1ae      	bne.n	80079de <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8007a80:	2300      	movs	r3, #0
}
 8007a82:	4618      	mov	r0, r3
 8007a84:	3710      	adds	r7, #16
 8007a86:	46bd      	mov	sp, r7
 8007a88:	bd80      	pop	{r7, pc}

08007a8a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8007a8a:	b480      	push	{r7}
 8007a8c:	b083      	sub	sp, #12
 8007a8e:	af00      	add	r7, sp, #0
 8007a90:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	695b      	ldr	r3, [r3, #20]
 8007a98:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8007a9c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007aa0:	d11b      	bne.n	8007ada <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8007aaa:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	2200      	movs	r2, #0
 8007ab0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8007ab2:	687b      	ldr	r3, [r7, #4]
 8007ab4:	2220      	movs	r2, #32
 8007ab6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	2200      	movs	r2, #0
 8007abe:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007ac6:	f043 0204 	orr.w	r2, r3, #4
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	2200      	movs	r2, #0
 8007ad2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8007ad6:	2301      	movs	r3, #1
 8007ad8:	e000      	b.n	8007adc <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8007ada:	2300      	movs	r3, #0
}
 8007adc:	4618      	mov	r0, r3
 8007ade:	370c      	adds	r7, #12
 8007ae0:	46bd      	mov	sp, r7
 8007ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae6:	4770      	bx	lr

08007ae8 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8007ae8:	b480      	push	{r7}
 8007aea:	b083      	sub	sp, #12
 8007aec:	af00      	add	r7, sp, #0
 8007aee:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007af4:	f5b3 0f2a 	cmp.w	r3, #11141120	@ 0xaa0000
 8007af8:	d103      	bne.n	8007b02 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	2201      	movs	r2, #1
 8007afe:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8007b00:	e007      	b.n	8007b12 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007b06:	f1b3 4f2a 	cmp.w	r3, #2852126720	@ 0xaa000000
 8007b0a:	d102      	bne.n	8007b12 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	2208      	movs	r2, #8
 8007b10:	62da      	str	r2, [r3, #44]	@ 0x2c
}
 8007b12:	bf00      	nop
 8007b14:	370c      	adds	r7, #12
 8007b16:	46bd      	mov	sp, r7
 8007b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b1c:	4770      	bx	lr
	...

08007b20 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007b20:	b580      	push	{r7, lr}
 8007b22:	b086      	sub	sp, #24
 8007b24:	af00      	add	r7, sp, #0
 8007b26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	2b00      	cmp	r3, #0
 8007b2c:	d101      	bne.n	8007b32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007b2e:	2301      	movs	r3, #1
 8007b30:	e267      	b.n	8008002 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	f003 0301 	and.w	r3, r3, #1
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d075      	beq.n	8007c2a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8007b3e:	4b88      	ldr	r3, [pc, #544]	@ (8007d60 <HAL_RCC_OscConfig+0x240>)
 8007b40:	689b      	ldr	r3, [r3, #8]
 8007b42:	f003 030c 	and.w	r3, r3, #12
 8007b46:	2b04      	cmp	r3, #4
 8007b48:	d00c      	beq.n	8007b64 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007b4a:	4b85      	ldr	r3, [pc, #532]	@ (8007d60 <HAL_RCC_OscConfig+0x240>)
 8007b4c:	689b      	ldr	r3, [r3, #8]
 8007b4e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8007b52:	2b08      	cmp	r3, #8
 8007b54:	d112      	bne.n	8007b7c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007b56:	4b82      	ldr	r3, [pc, #520]	@ (8007d60 <HAL_RCC_OscConfig+0x240>)
 8007b58:	685b      	ldr	r3, [r3, #4]
 8007b5a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007b5e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8007b62:	d10b      	bne.n	8007b7c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007b64:	4b7e      	ldr	r3, [pc, #504]	@ (8007d60 <HAL_RCC_OscConfig+0x240>)
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d05b      	beq.n	8007c28 <HAL_RCC_OscConfig+0x108>
 8007b70:	687b      	ldr	r3, [r7, #4]
 8007b72:	685b      	ldr	r3, [r3, #4]
 8007b74:	2b00      	cmp	r3, #0
 8007b76:	d157      	bne.n	8007c28 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007b78:	2301      	movs	r3, #1
 8007b7a:	e242      	b.n	8008002 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007b7c:	687b      	ldr	r3, [r7, #4]
 8007b7e:	685b      	ldr	r3, [r3, #4]
 8007b80:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8007b84:	d106      	bne.n	8007b94 <HAL_RCC_OscConfig+0x74>
 8007b86:	4b76      	ldr	r3, [pc, #472]	@ (8007d60 <HAL_RCC_OscConfig+0x240>)
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	4a75      	ldr	r2, [pc, #468]	@ (8007d60 <HAL_RCC_OscConfig+0x240>)
 8007b8c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007b90:	6013      	str	r3, [r2, #0]
 8007b92:	e01d      	b.n	8007bd0 <HAL_RCC_OscConfig+0xb0>
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	685b      	ldr	r3, [r3, #4]
 8007b98:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8007b9c:	d10c      	bne.n	8007bb8 <HAL_RCC_OscConfig+0x98>
 8007b9e:	4b70      	ldr	r3, [pc, #448]	@ (8007d60 <HAL_RCC_OscConfig+0x240>)
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	4a6f      	ldr	r2, [pc, #444]	@ (8007d60 <HAL_RCC_OscConfig+0x240>)
 8007ba4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8007ba8:	6013      	str	r3, [r2, #0]
 8007baa:	4b6d      	ldr	r3, [pc, #436]	@ (8007d60 <HAL_RCC_OscConfig+0x240>)
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	4a6c      	ldr	r2, [pc, #432]	@ (8007d60 <HAL_RCC_OscConfig+0x240>)
 8007bb0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8007bb4:	6013      	str	r3, [r2, #0]
 8007bb6:	e00b      	b.n	8007bd0 <HAL_RCC_OscConfig+0xb0>
 8007bb8:	4b69      	ldr	r3, [pc, #420]	@ (8007d60 <HAL_RCC_OscConfig+0x240>)
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	4a68      	ldr	r2, [pc, #416]	@ (8007d60 <HAL_RCC_OscConfig+0x240>)
 8007bbe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8007bc2:	6013      	str	r3, [r2, #0]
 8007bc4:	4b66      	ldr	r3, [pc, #408]	@ (8007d60 <HAL_RCC_OscConfig+0x240>)
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	4a65      	ldr	r2, [pc, #404]	@ (8007d60 <HAL_RCC_OscConfig+0x240>)
 8007bca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8007bce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007bd0:	687b      	ldr	r3, [r7, #4]
 8007bd2:	685b      	ldr	r3, [r3, #4]
 8007bd4:	2b00      	cmp	r3, #0
 8007bd6:	d013      	beq.n	8007c00 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007bd8:	f7fc f828 	bl	8003c2c <HAL_GetTick>
 8007bdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007bde:	e008      	b.n	8007bf2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007be0:	f7fc f824 	bl	8003c2c <HAL_GetTick>
 8007be4:	4602      	mov	r2, r0
 8007be6:	693b      	ldr	r3, [r7, #16]
 8007be8:	1ad3      	subs	r3, r2, r3
 8007bea:	2b64      	cmp	r3, #100	@ 0x64
 8007bec:	d901      	bls.n	8007bf2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007bee:	2303      	movs	r3, #3
 8007bf0:	e207      	b.n	8008002 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007bf2:	4b5b      	ldr	r3, [pc, #364]	@ (8007d60 <HAL_RCC_OscConfig+0x240>)
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d0f0      	beq.n	8007be0 <HAL_RCC_OscConfig+0xc0>
 8007bfe:	e014      	b.n	8007c2a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007c00:	f7fc f814 	bl	8003c2c <HAL_GetTick>
 8007c04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007c06:	e008      	b.n	8007c1a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8007c08:	f7fc f810 	bl	8003c2c <HAL_GetTick>
 8007c0c:	4602      	mov	r2, r0
 8007c0e:	693b      	ldr	r3, [r7, #16]
 8007c10:	1ad3      	subs	r3, r2, r3
 8007c12:	2b64      	cmp	r3, #100	@ 0x64
 8007c14:	d901      	bls.n	8007c1a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8007c16:	2303      	movs	r3, #3
 8007c18:	e1f3      	b.n	8008002 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007c1a:	4b51      	ldr	r3, [pc, #324]	@ (8007d60 <HAL_RCC_OscConfig+0x240>)
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8007c22:	2b00      	cmp	r3, #0
 8007c24:	d1f0      	bne.n	8007c08 <HAL_RCC_OscConfig+0xe8>
 8007c26:	e000      	b.n	8007c2a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007c28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	681b      	ldr	r3, [r3, #0]
 8007c2e:	f003 0302 	and.w	r3, r3, #2
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d063      	beq.n	8007cfe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8007c36:	4b4a      	ldr	r3, [pc, #296]	@ (8007d60 <HAL_RCC_OscConfig+0x240>)
 8007c38:	689b      	ldr	r3, [r3, #8]
 8007c3a:	f003 030c 	and.w	r3, r3, #12
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d00b      	beq.n	8007c5a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007c42:	4b47      	ldr	r3, [pc, #284]	@ (8007d60 <HAL_RCC_OscConfig+0x240>)
 8007c44:	689b      	ldr	r3, [r3, #8]
 8007c46:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8007c4a:	2b08      	cmp	r3, #8
 8007c4c:	d11c      	bne.n	8007c88 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007c4e:	4b44      	ldr	r3, [pc, #272]	@ (8007d60 <HAL_RCC_OscConfig+0x240>)
 8007c50:	685b      	ldr	r3, [r3, #4]
 8007c52:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	d116      	bne.n	8007c88 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007c5a:	4b41      	ldr	r3, [pc, #260]	@ (8007d60 <HAL_RCC_OscConfig+0x240>)
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	f003 0302 	and.w	r3, r3, #2
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d005      	beq.n	8007c72 <HAL_RCC_OscConfig+0x152>
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	68db      	ldr	r3, [r3, #12]
 8007c6a:	2b01      	cmp	r3, #1
 8007c6c:	d001      	beq.n	8007c72 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007c6e:	2301      	movs	r3, #1
 8007c70:	e1c7      	b.n	8008002 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007c72:	4b3b      	ldr	r3, [pc, #236]	@ (8007d60 <HAL_RCC_OscConfig+0x240>)
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	691b      	ldr	r3, [r3, #16]
 8007c7e:	00db      	lsls	r3, r3, #3
 8007c80:	4937      	ldr	r1, [pc, #220]	@ (8007d60 <HAL_RCC_OscConfig+0x240>)
 8007c82:	4313      	orrs	r3, r2
 8007c84:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007c86:	e03a      	b.n	8007cfe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	68db      	ldr	r3, [r3, #12]
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d020      	beq.n	8007cd2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007c90:	4b34      	ldr	r3, [pc, #208]	@ (8007d64 <HAL_RCC_OscConfig+0x244>)
 8007c92:	2201      	movs	r2, #1
 8007c94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007c96:	f7fb ffc9 	bl	8003c2c <HAL_GetTick>
 8007c9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007c9c:	e008      	b.n	8007cb0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007c9e:	f7fb ffc5 	bl	8003c2c <HAL_GetTick>
 8007ca2:	4602      	mov	r2, r0
 8007ca4:	693b      	ldr	r3, [r7, #16]
 8007ca6:	1ad3      	subs	r3, r2, r3
 8007ca8:	2b02      	cmp	r3, #2
 8007caa:	d901      	bls.n	8007cb0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007cac:	2303      	movs	r3, #3
 8007cae:	e1a8      	b.n	8008002 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007cb0:	4b2b      	ldr	r3, [pc, #172]	@ (8007d60 <HAL_RCC_OscConfig+0x240>)
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	f003 0302 	and.w	r3, r3, #2
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d0f0      	beq.n	8007c9e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007cbc:	4b28      	ldr	r3, [pc, #160]	@ (8007d60 <HAL_RCC_OscConfig+0x240>)
 8007cbe:	681b      	ldr	r3, [r3, #0]
 8007cc0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	691b      	ldr	r3, [r3, #16]
 8007cc8:	00db      	lsls	r3, r3, #3
 8007cca:	4925      	ldr	r1, [pc, #148]	@ (8007d60 <HAL_RCC_OscConfig+0x240>)
 8007ccc:	4313      	orrs	r3, r2
 8007cce:	600b      	str	r3, [r1, #0]
 8007cd0:	e015      	b.n	8007cfe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007cd2:	4b24      	ldr	r3, [pc, #144]	@ (8007d64 <HAL_RCC_OscConfig+0x244>)
 8007cd4:	2200      	movs	r2, #0
 8007cd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007cd8:	f7fb ffa8 	bl	8003c2c <HAL_GetTick>
 8007cdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007cde:	e008      	b.n	8007cf2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8007ce0:	f7fb ffa4 	bl	8003c2c <HAL_GetTick>
 8007ce4:	4602      	mov	r2, r0
 8007ce6:	693b      	ldr	r3, [r7, #16]
 8007ce8:	1ad3      	subs	r3, r2, r3
 8007cea:	2b02      	cmp	r3, #2
 8007cec:	d901      	bls.n	8007cf2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007cee:	2303      	movs	r3, #3
 8007cf0:	e187      	b.n	8008002 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007cf2:	4b1b      	ldr	r3, [pc, #108]	@ (8007d60 <HAL_RCC_OscConfig+0x240>)
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	f003 0302 	and.w	r3, r3, #2
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d1f0      	bne.n	8007ce0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	681b      	ldr	r3, [r3, #0]
 8007d02:	f003 0308 	and.w	r3, r3, #8
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d036      	beq.n	8007d78 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	695b      	ldr	r3, [r3, #20]
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d016      	beq.n	8007d40 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8007d12:	4b15      	ldr	r3, [pc, #84]	@ (8007d68 <HAL_RCC_OscConfig+0x248>)
 8007d14:	2201      	movs	r2, #1
 8007d16:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007d18:	f7fb ff88 	bl	8003c2c <HAL_GetTick>
 8007d1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007d1e:	e008      	b.n	8007d32 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007d20:	f7fb ff84 	bl	8003c2c <HAL_GetTick>
 8007d24:	4602      	mov	r2, r0
 8007d26:	693b      	ldr	r3, [r7, #16]
 8007d28:	1ad3      	subs	r3, r2, r3
 8007d2a:	2b02      	cmp	r3, #2
 8007d2c:	d901      	bls.n	8007d32 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007d2e:	2303      	movs	r3, #3
 8007d30:	e167      	b.n	8008002 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007d32:	4b0b      	ldr	r3, [pc, #44]	@ (8007d60 <HAL_RCC_OscConfig+0x240>)
 8007d34:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007d36:	f003 0302 	and.w	r3, r3, #2
 8007d3a:	2b00      	cmp	r3, #0
 8007d3c:	d0f0      	beq.n	8007d20 <HAL_RCC_OscConfig+0x200>
 8007d3e:	e01b      	b.n	8007d78 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007d40:	4b09      	ldr	r3, [pc, #36]	@ (8007d68 <HAL_RCC_OscConfig+0x248>)
 8007d42:	2200      	movs	r2, #0
 8007d44:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007d46:	f7fb ff71 	bl	8003c2c <HAL_GetTick>
 8007d4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007d4c:	e00e      	b.n	8007d6c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8007d4e:	f7fb ff6d 	bl	8003c2c <HAL_GetTick>
 8007d52:	4602      	mov	r2, r0
 8007d54:	693b      	ldr	r3, [r7, #16]
 8007d56:	1ad3      	subs	r3, r2, r3
 8007d58:	2b02      	cmp	r3, #2
 8007d5a:	d907      	bls.n	8007d6c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007d5c:	2303      	movs	r3, #3
 8007d5e:	e150      	b.n	8008002 <HAL_RCC_OscConfig+0x4e2>
 8007d60:	40023800 	.word	0x40023800
 8007d64:	42470000 	.word	0x42470000
 8007d68:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007d6c:	4b88      	ldr	r3, [pc, #544]	@ (8007f90 <HAL_RCC_OscConfig+0x470>)
 8007d6e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007d70:	f003 0302 	and.w	r3, r3, #2
 8007d74:	2b00      	cmp	r3, #0
 8007d76:	d1ea      	bne.n	8007d4e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	f003 0304 	and.w	r3, r3, #4
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	f000 8097 	beq.w	8007eb4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007d86:	2300      	movs	r3, #0
 8007d88:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007d8a:	4b81      	ldr	r3, [pc, #516]	@ (8007f90 <HAL_RCC_OscConfig+0x470>)
 8007d8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007d92:	2b00      	cmp	r3, #0
 8007d94:	d10f      	bne.n	8007db6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007d96:	2300      	movs	r3, #0
 8007d98:	60bb      	str	r3, [r7, #8]
 8007d9a:	4b7d      	ldr	r3, [pc, #500]	@ (8007f90 <HAL_RCC_OscConfig+0x470>)
 8007d9c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007d9e:	4a7c      	ldr	r2, [pc, #496]	@ (8007f90 <HAL_RCC_OscConfig+0x470>)
 8007da0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8007da4:	6413      	str	r3, [r2, #64]	@ 0x40
 8007da6:	4b7a      	ldr	r3, [pc, #488]	@ (8007f90 <HAL_RCC_OscConfig+0x470>)
 8007da8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007daa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007dae:	60bb      	str	r3, [r7, #8]
 8007db0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007db2:	2301      	movs	r3, #1
 8007db4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007db6:	4b77      	ldr	r3, [pc, #476]	@ (8007f94 <HAL_RCC_OscConfig+0x474>)
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d118      	bne.n	8007df4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007dc2:	4b74      	ldr	r3, [pc, #464]	@ (8007f94 <HAL_RCC_OscConfig+0x474>)
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	4a73      	ldr	r2, [pc, #460]	@ (8007f94 <HAL_RCC_OscConfig+0x474>)
 8007dc8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007dcc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007dce:	f7fb ff2d 	bl	8003c2c <HAL_GetTick>
 8007dd2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007dd4:	e008      	b.n	8007de8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007dd6:	f7fb ff29 	bl	8003c2c <HAL_GetTick>
 8007dda:	4602      	mov	r2, r0
 8007ddc:	693b      	ldr	r3, [r7, #16]
 8007dde:	1ad3      	subs	r3, r2, r3
 8007de0:	2b02      	cmp	r3, #2
 8007de2:	d901      	bls.n	8007de8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007de4:	2303      	movs	r3, #3
 8007de6:	e10c      	b.n	8008002 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007de8:	4b6a      	ldr	r3, [pc, #424]	@ (8007f94 <HAL_RCC_OscConfig+0x474>)
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d0f0      	beq.n	8007dd6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	689b      	ldr	r3, [r3, #8]
 8007df8:	2b01      	cmp	r3, #1
 8007dfa:	d106      	bne.n	8007e0a <HAL_RCC_OscConfig+0x2ea>
 8007dfc:	4b64      	ldr	r3, [pc, #400]	@ (8007f90 <HAL_RCC_OscConfig+0x470>)
 8007dfe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007e00:	4a63      	ldr	r2, [pc, #396]	@ (8007f90 <HAL_RCC_OscConfig+0x470>)
 8007e02:	f043 0301 	orr.w	r3, r3, #1
 8007e06:	6713      	str	r3, [r2, #112]	@ 0x70
 8007e08:	e01c      	b.n	8007e44 <HAL_RCC_OscConfig+0x324>
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	689b      	ldr	r3, [r3, #8]
 8007e0e:	2b05      	cmp	r3, #5
 8007e10:	d10c      	bne.n	8007e2c <HAL_RCC_OscConfig+0x30c>
 8007e12:	4b5f      	ldr	r3, [pc, #380]	@ (8007f90 <HAL_RCC_OscConfig+0x470>)
 8007e14:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007e16:	4a5e      	ldr	r2, [pc, #376]	@ (8007f90 <HAL_RCC_OscConfig+0x470>)
 8007e18:	f043 0304 	orr.w	r3, r3, #4
 8007e1c:	6713      	str	r3, [r2, #112]	@ 0x70
 8007e1e:	4b5c      	ldr	r3, [pc, #368]	@ (8007f90 <HAL_RCC_OscConfig+0x470>)
 8007e20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007e22:	4a5b      	ldr	r2, [pc, #364]	@ (8007f90 <HAL_RCC_OscConfig+0x470>)
 8007e24:	f043 0301 	orr.w	r3, r3, #1
 8007e28:	6713      	str	r3, [r2, #112]	@ 0x70
 8007e2a:	e00b      	b.n	8007e44 <HAL_RCC_OscConfig+0x324>
 8007e2c:	4b58      	ldr	r3, [pc, #352]	@ (8007f90 <HAL_RCC_OscConfig+0x470>)
 8007e2e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007e30:	4a57      	ldr	r2, [pc, #348]	@ (8007f90 <HAL_RCC_OscConfig+0x470>)
 8007e32:	f023 0301 	bic.w	r3, r3, #1
 8007e36:	6713      	str	r3, [r2, #112]	@ 0x70
 8007e38:	4b55      	ldr	r3, [pc, #340]	@ (8007f90 <HAL_RCC_OscConfig+0x470>)
 8007e3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007e3c:	4a54      	ldr	r2, [pc, #336]	@ (8007f90 <HAL_RCC_OscConfig+0x470>)
 8007e3e:	f023 0304 	bic.w	r3, r3, #4
 8007e42:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	689b      	ldr	r3, [r3, #8]
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d015      	beq.n	8007e78 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007e4c:	f7fb feee 	bl	8003c2c <HAL_GetTick>
 8007e50:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007e52:	e00a      	b.n	8007e6a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007e54:	f7fb feea 	bl	8003c2c <HAL_GetTick>
 8007e58:	4602      	mov	r2, r0
 8007e5a:	693b      	ldr	r3, [r7, #16]
 8007e5c:	1ad3      	subs	r3, r2, r3
 8007e5e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007e62:	4293      	cmp	r3, r2
 8007e64:	d901      	bls.n	8007e6a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8007e66:	2303      	movs	r3, #3
 8007e68:	e0cb      	b.n	8008002 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007e6a:	4b49      	ldr	r3, [pc, #292]	@ (8007f90 <HAL_RCC_OscConfig+0x470>)
 8007e6c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007e6e:	f003 0302 	and.w	r3, r3, #2
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d0ee      	beq.n	8007e54 <HAL_RCC_OscConfig+0x334>
 8007e76:	e014      	b.n	8007ea2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007e78:	f7fb fed8 	bl	8003c2c <HAL_GetTick>
 8007e7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007e7e:	e00a      	b.n	8007e96 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007e80:	f7fb fed4 	bl	8003c2c <HAL_GetTick>
 8007e84:	4602      	mov	r2, r0
 8007e86:	693b      	ldr	r3, [r7, #16]
 8007e88:	1ad3      	subs	r3, r2, r3
 8007e8a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007e8e:	4293      	cmp	r3, r2
 8007e90:	d901      	bls.n	8007e96 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8007e92:	2303      	movs	r3, #3
 8007e94:	e0b5      	b.n	8008002 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007e96:	4b3e      	ldr	r3, [pc, #248]	@ (8007f90 <HAL_RCC_OscConfig+0x470>)
 8007e98:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007e9a:	f003 0302 	and.w	r3, r3, #2
 8007e9e:	2b00      	cmp	r3, #0
 8007ea0:	d1ee      	bne.n	8007e80 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8007ea2:	7dfb      	ldrb	r3, [r7, #23]
 8007ea4:	2b01      	cmp	r3, #1
 8007ea6:	d105      	bne.n	8007eb4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007ea8:	4b39      	ldr	r3, [pc, #228]	@ (8007f90 <HAL_RCC_OscConfig+0x470>)
 8007eaa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8007eac:	4a38      	ldr	r2, [pc, #224]	@ (8007f90 <HAL_RCC_OscConfig+0x470>)
 8007eae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007eb2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	699b      	ldr	r3, [r3, #24]
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	f000 80a1 	beq.w	8008000 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007ebe:	4b34      	ldr	r3, [pc, #208]	@ (8007f90 <HAL_RCC_OscConfig+0x470>)
 8007ec0:	689b      	ldr	r3, [r3, #8]
 8007ec2:	f003 030c 	and.w	r3, r3, #12
 8007ec6:	2b08      	cmp	r3, #8
 8007ec8:	d05c      	beq.n	8007f84 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	699b      	ldr	r3, [r3, #24]
 8007ece:	2b02      	cmp	r3, #2
 8007ed0:	d141      	bne.n	8007f56 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007ed2:	4b31      	ldr	r3, [pc, #196]	@ (8007f98 <HAL_RCC_OscConfig+0x478>)
 8007ed4:	2200      	movs	r2, #0
 8007ed6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007ed8:	f7fb fea8 	bl	8003c2c <HAL_GetTick>
 8007edc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007ede:	e008      	b.n	8007ef2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007ee0:	f7fb fea4 	bl	8003c2c <HAL_GetTick>
 8007ee4:	4602      	mov	r2, r0
 8007ee6:	693b      	ldr	r3, [r7, #16]
 8007ee8:	1ad3      	subs	r3, r2, r3
 8007eea:	2b02      	cmp	r3, #2
 8007eec:	d901      	bls.n	8007ef2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8007eee:	2303      	movs	r3, #3
 8007ef0:	e087      	b.n	8008002 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007ef2:	4b27      	ldr	r3, [pc, #156]	@ (8007f90 <HAL_RCC_OscConfig+0x470>)
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007efa:	2b00      	cmp	r3, #0
 8007efc:	d1f0      	bne.n	8007ee0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	69da      	ldr	r2, [r3, #28]
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	6a1b      	ldr	r3, [r3, #32]
 8007f06:	431a      	orrs	r2, r3
 8007f08:	687b      	ldr	r3, [r7, #4]
 8007f0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007f0c:	019b      	lsls	r3, r3, #6
 8007f0e:	431a      	orrs	r2, r3
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007f14:	085b      	lsrs	r3, r3, #1
 8007f16:	3b01      	subs	r3, #1
 8007f18:	041b      	lsls	r3, r3, #16
 8007f1a:	431a      	orrs	r2, r3
 8007f1c:	687b      	ldr	r3, [r7, #4]
 8007f1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f20:	061b      	lsls	r3, r3, #24
 8007f22:	491b      	ldr	r1, [pc, #108]	@ (8007f90 <HAL_RCC_OscConfig+0x470>)
 8007f24:	4313      	orrs	r3, r2
 8007f26:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007f28:	4b1b      	ldr	r3, [pc, #108]	@ (8007f98 <HAL_RCC_OscConfig+0x478>)
 8007f2a:	2201      	movs	r2, #1
 8007f2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007f2e:	f7fb fe7d 	bl	8003c2c <HAL_GetTick>
 8007f32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007f34:	e008      	b.n	8007f48 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007f36:	f7fb fe79 	bl	8003c2c <HAL_GetTick>
 8007f3a:	4602      	mov	r2, r0
 8007f3c:	693b      	ldr	r3, [r7, #16]
 8007f3e:	1ad3      	subs	r3, r2, r3
 8007f40:	2b02      	cmp	r3, #2
 8007f42:	d901      	bls.n	8007f48 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007f44:	2303      	movs	r3, #3
 8007f46:	e05c      	b.n	8008002 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007f48:	4b11      	ldr	r3, [pc, #68]	@ (8007f90 <HAL_RCC_OscConfig+0x470>)
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d0f0      	beq.n	8007f36 <HAL_RCC_OscConfig+0x416>
 8007f54:	e054      	b.n	8008000 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007f56:	4b10      	ldr	r3, [pc, #64]	@ (8007f98 <HAL_RCC_OscConfig+0x478>)
 8007f58:	2200      	movs	r2, #0
 8007f5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007f5c:	f7fb fe66 	bl	8003c2c <HAL_GetTick>
 8007f60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007f62:	e008      	b.n	8007f76 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8007f64:	f7fb fe62 	bl	8003c2c <HAL_GetTick>
 8007f68:	4602      	mov	r2, r0
 8007f6a:	693b      	ldr	r3, [r7, #16]
 8007f6c:	1ad3      	subs	r3, r2, r3
 8007f6e:	2b02      	cmp	r3, #2
 8007f70:	d901      	bls.n	8007f76 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8007f72:	2303      	movs	r3, #3
 8007f74:	e045      	b.n	8008002 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007f76:	4b06      	ldr	r3, [pc, #24]	@ (8007f90 <HAL_RCC_OscConfig+0x470>)
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d1f0      	bne.n	8007f64 <HAL_RCC_OscConfig+0x444>
 8007f82:	e03d      	b.n	8008000 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	699b      	ldr	r3, [r3, #24]
 8007f88:	2b01      	cmp	r3, #1
 8007f8a:	d107      	bne.n	8007f9c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007f8c:	2301      	movs	r3, #1
 8007f8e:	e038      	b.n	8008002 <HAL_RCC_OscConfig+0x4e2>
 8007f90:	40023800 	.word	0x40023800
 8007f94:	40007000 	.word	0x40007000
 8007f98:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007f9c:	4b1b      	ldr	r3, [pc, #108]	@ (800800c <HAL_RCC_OscConfig+0x4ec>)
 8007f9e:	685b      	ldr	r3, [r3, #4]
 8007fa0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	699b      	ldr	r3, [r3, #24]
 8007fa6:	2b01      	cmp	r3, #1
 8007fa8:	d028      	beq.n	8007ffc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007faa:	68fb      	ldr	r3, [r7, #12]
 8007fac:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8007fb0:	687b      	ldr	r3, [r7, #4]
 8007fb2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007fb4:	429a      	cmp	r2, r3
 8007fb6:	d121      	bne.n	8007ffc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007fc2:	429a      	cmp	r2, r3
 8007fc4:	d11a      	bne.n	8007ffc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007fc6:	68fa      	ldr	r2, [r7, #12]
 8007fc8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8007fcc:	4013      	ands	r3, r2
 8007fce:	687a      	ldr	r2, [r7, #4]
 8007fd0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8007fd2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007fd4:	4293      	cmp	r3, r2
 8007fd6:	d111      	bne.n	8007ffc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007fd8:	68fb      	ldr	r3, [r7, #12]
 8007fda:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8007fde:	687b      	ldr	r3, [r7, #4]
 8007fe0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007fe2:	085b      	lsrs	r3, r3, #1
 8007fe4:	3b01      	subs	r3, #1
 8007fe6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007fe8:	429a      	cmp	r2, r3
 8007fea:	d107      	bne.n	8007ffc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8007ff2:	687b      	ldr	r3, [r7, #4]
 8007ff4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007ff6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007ff8:	429a      	cmp	r2, r3
 8007ffa:	d001      	beq.n	8008000 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8007ffc:	2301      	movs	r3, #1
 8007ffe:	e000      	b.n	8008002 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8008000:	2300      	movs	r3, #0
}
 8008002:	4618      	mov	r0, r3
 8008004:	3718      	adds	r7, #24
 8008006:	46bd      	mov	sp, r7
 8008008:	bd80      	pop	{r7, pc}
 800800a:	bf00      	nop
 800800c:	40023800 	.word	0x40023800

08008010 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008010:	b580      	push	{r7, lr}
 8008012:	b084      	sub	sp, #16
 8008014:	af00      	add	r7, sp, #0
 8008016:	6078      	str	r0, [r7, #4]
 8008018:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800801a:	687b      	ldr	r3, [r7, #4]
 800801c:	2b00      	cmp	r3, #0
 800801e:	d101      	bne.n	8008024 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008020:	2301      	movs	r3, #1
 8008022:	e0cc      	b.n	80081be <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008024:	4b68      	ldr	r3, [pc, #416]	@ (80081c8 <HAL_RCC_ClockConfig+0x1b8>)
 8008026:	681b      	ldr	r3, [r3, #0]
 8008028:	f003 0307 	and.w	r3, r3, #7
 800802c:	683a      	ldr	r2, [r7, #0]
 800802e:	429a      	cmp	r2, r3
 8008030:	d90c      	bls.n	800804c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008032:	4b65      	ldr	r3, [pc, #404]	@ (80081c8 <HAL_RCC_ClockConfig+0x1b8>)
 8008034:	683a      	ldr	r2, [r7, #0]
 8008036:	b2d2      	uxtb	r2, r2
 8008038:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800803a:	4b63      	ldr	r3, [pc, #396]	@ (80081c8 <HAL_RCC_ClockConfig+0x1b8>)
 800803c:	681b      	ldr	r3, [r3, #0]
 800803e:	f003 0307 	and.w	r3, r3, #7
 8008042:	683a      	ldr	r2, [r7, #0]
 8008044:	429a      	cmp	r2, r3
 8008046:	d001      	beq.n	800804c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008048:	2301      	movs	r3, #1
 800804a:	e0b8      	b.n	80081be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	f003 0302 	and.w	r3, r3, #2
 8008054:	2b00      	cmp	r3, #0
 8008056:	d020      	beq.n	800809a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	f003 0304 	and.w	r3, r3, #4
 8008060:	2b00      	cmp	r3, #0
 8008062:	d005      	beq.n	8008070 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008064:	4b59      	ldr	r3, [pc, #356]	@ (80081cc <HAL_RCC_ClockConfig+0x1bc>)
 8008066:	689b      	ldr	r3, [r3, #8]
 8008068:	4a58      	ldr	r2, [pc, #352]	@ (80081cc <HAL_RCC_ClockConfig+0x1bc>)
 800806a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800806e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	681b      	ldr	r3, [r3, #0]
 8008074:	f003 0308 	and.w	r3, r3, #8
 8008078:	2b00      	cmp	r3, #0
 800807a:	d005      	beq.n	8008088 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800807c:	4b53      	ldr	r3, [pc, #332]	@ (80081cc <HAL_RCC_ClockConfig+0x1bc>)
 800807e:	689b      	ldr	r3, [r3, #8]
 8008080:	4a52      	ldr	r2, [pc, #328]	@ (80081cc <HAL_RCC_ClockConfig+0x1bc>)
 8008082:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8008086:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008088:	4b50      	ldr	r3, [pc, #320]	@ (80081cc <HAL_RCC_ClockConfig+0x1bc>)
 800808a:	689b      	ldr	r3, [r3, #8]
 800808c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8008090:	687b      	ldr	r3, [r7, #4]
 8008092:	689b      	ldr	r3, [r3, #8]
 8008094:	494d      	ldr	r1, [pc, #308]	@ (80081cc <HAL_RCC_ClockConfig+0x1bc>)
 8008096:	4313      	orrs	r3, r2
 8008098:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	681b      	ldr	r3, [r3, #0]
 800809e:	f003 0301 	and.w	r3, r3, #1
 80080a2:	2b00      	cmp	r3, #0
 80080a4:	d044      	beq.n	8008130 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	685b      	ldr	r3, [r3, #4]
 80080aa:	2b01      	cmp	r3, #1
 80080ac:	d107      	bne.n	80080be <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80080ae:	4b47      	ldr	r3, [pc, #284]	@ (80081cc <HAL_RCC_ClockConfig+0x1bc>)
 80080b0:	681b      	ldr	r3, [r3, #0]
 80080b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d119      	bne.n	80080ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80080ba:	2301      	movs	r3, #1
 80080bc:	e07f      	b.n	80081be <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	685b      	ldr	r3, [r3, #4]
 80080c2:	2b02      	cmp	r3, #2
 80080c4:	d003      	beq.n	80080ce <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80080ca:	2b03      	cmp	r3, #3
 80080cc:	d107      	bne.n	80080de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80080ce:	4b3f      	ldr	r3, [pc, #252]	@ (80081cc <HAL_RCC_ClockConfig+0x1bc>)
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d109      	bne.n	80080ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80080da:	2301      	movs	r3, #1
 80080dc:	e06f      	b.n	80081be <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80080de:	4b3b      	ldr	r3, [pc, #236]	@ (80081cc <HAL_RCC_ClockConfig+0x1bc>)
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	f003 0302 	and.w	r3, r3, #2
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d101      	bne.n	80080ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80080ea:	2301      	movs	r3, #1
 80080ec:	e067      	b.n	80081be <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80080ee:	4b37      	ldr	r3, [pc, #220]	@ (80081cc <HAL_RCC_ClockConfig+0x1bc>)
 80080f0:	689b      	ldr	r3, [r3, #8]
 80080f2:	f023 0203 	bic.w	r2, r3, #3
 80080f6:	687b      	ldr	r3, [r7, #4]
 80080f8:	685b      	ldr	r3, [r3, #4]
 80080fa:	4934      	ldr	r1, [pc, #208]	@ (80081cc <HAL_RCC_ClockConfig+0x1bc>)
 80080fc:	4313      	orrs	r3, r2
 80080fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008100:	f7fb fd94 	bl	8003c2c <HAL_GetTick>
 8008104:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008106:	e00a      	b.n	800811e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008108:	f7fb fd90 	bl	8003c2c <HAL_GetTick>
 800810c:	4602      	mov	r2, r0
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	1ad3      	subs	r3, r2, r3
 8008112:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008116:	4293      	cmp	r3, r2
 8008118:	d901      	bls.n	800811e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800811a:	2303      	movs	r3, #3
 800811c:	e04f      	b.n	80081be <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800811e:	4b2b      	ldr	r3, [pc, #172]	@ (80081cc <HAL_RCC_ClockConfig+0x1bc>)
 8008120:	689b      	ldr	r3, [r3, #8]
 8008122:	f003 020c 	and.w	r2, r3, #12
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	685b      	ldr	r3, [r3, #4]
 800812a:	009b      	lsls	r3, r3, #2
 800812c:	429a      	cmp	r2, r3
 800812e:	d1eb      	bne.n	8008108 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008130:	4b25      	ldr	r3, [pc, #148]	@ (80081c8 <HAL_RCC_ClockConfig+0x1b8>)
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	f003 0307 	and.w	r3, r3, #7
 8008138:	683a      	ldr	r2, [r7, #0]
 800813a:	429a      	cmp	r2, r3
 800813c:	d20c      	bcs.n	8008158 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800813e:	4b22      	ldr	r3, [pc, #136]	@ (80081c8 <HAL_RCC_ClockConfig+0x1b8>)
 8008140:	683a      	ldr	r2, [r7, #0]
 8008142:	b2d2      	uxtb	r2, r2
 8008144:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008146:	4b20      	ldr	r3, [pc, #128]	@ (80081c8 <HAL_RCC_ClockConfig+0x1b8>)
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	f003 0307 	and.w	r3, r3, #7
 800814e:	683a      	ldr	r2, [r7, #0]
 8008150:	429a      	cmp	r2, r3
 8008152:	d001      	beq.n	8008158 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008154:	2301      	movs	r3, #1
 8008156:	e032      	b.n	80081be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008158:	687b      	ldr	r3, [r7, #4]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	f003 0304 	and.w	r3, r3, #4
 8008160:	2b00      	cmp	r3, #0
 8008162:	d008      	beq.n	8008176 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008164:	4b19      	ldr	r3, [pc, #100]	@ (80081cc <HAL_RCC_ClockConfig+0x1bc>)
 8008166:	689b      	ldr	r3, [r3, #8]
 8008168:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800816c:	687b      	ldr	r3, [r7, #4]
 800816e:	68db      	ldr	r3, [r3, #12]
 8008170:	4916      	ldr	r1, [pc, #88]	@ (80081cc <HAL_RCC_ClockConfig+0x1bc>)
 8008172:	4313      	orrs	r3, r2
 8008174:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	f003 0308 	and.w	r3, r3, #8
 800817e:	2b00      	cmp	r3, #0
 8008180:	d009      	beq.n	8008196 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008182:	4b12      	ldr	r3, [pc, #72]	@ (80081cc <HAL_RCC_ClockConfig+0x1bc>)
 8008184:	689b      	ldr	r3, [r3, #8]
 8008186:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	691b      	ldr	r3, [r3, #16]
 800818e:	00db      	lsls	r3, r3, #3
 8008190:	490e      	ldr	r1, [pc, #56]	@ (80081cc <HAL_RCC_ClockConfig+0x1bc>)
 8008192:	4313      	orrs	r3, r2
 8008194:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8008196:	f000 f821 	bl	80081dc <HAL_RCC_GetSysClockFreq>
 800819a:	4602      	mov	r2, r0
 800819c:	4b0b      	ldr	r3, [pc, #44]	@ (80081cc <HAL_RCC_ClockConfig+0x1bc>)
 800819e:	689b      	ldr	r3, [r3, #8]
 80081a0:	091b      	lsrs	r3, r3, #4
 80081a2:	f003 030f 	and.w	r3, r3, #15
 80081a6:	490a      	ldr	r1, [pc, #40]	@ (80081d0 <HAL_RCC_ClockConfig+0x1c0>)
 80081a8:	5ccb      	ldrb	r3, [r1, r3]
 80081aa:	fa22 f303 	lsr.w	r3, r2, r3
 80081ae:	4a09      	ldr	r2, [pc, #36]	@ (80081d4 <HAL_RCC_ClockConfig+0x1c4>)
 80081b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80081b2:	4b09      	ldr	r3, [pc, #36]	@ (80081d8 <HAL_RCC_ClockConfig+0x1c8>)
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	4618      	mov	r0, r3
 80081b8:	f7fb f9ee 	bl	8003598 <HAL_InitTick>

  return HAL_OK;
 80081bc:	2300      	movs	r3, #0
}
 80081be:	4618      	mov	r0, r3
 80081c0:	3710      	adds	r7, #16
 80081c2:	46bd      	mov	sp, r7
 80081c4:	bd80      	pop	{r7, pc}
 80081c6:	bf00      	nop
 80081c8:	40023c00 	.word	0x40023c00
 80081cc:	40023800 	.word	0x40023800
 80081d0:	08010dac 	.word	0x08010dac
 80081d4:	2000000c 	.word	0x2000000c
 80081d8:	20000010 	.word	0x20000010

080081dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80081dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80081e0:	b094      	sub	sp, #80	@ 0x50
 80081e2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80081e4:	2300      	movs	r3, #0
 80081e6:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80081e8:	2300      	movs	r3, #0
 80081ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80081ec:	2300      	movs	r3, #0
 80081ee:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80081f0:	2300      	movs	r3, #0
 80081f2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80081f4:	4b79      	ldr	r3, [pc, #484]	@ (80083dc <HAL_RCC_GetSysClockFreq+0x200>)
 80081f6:	689b      	ldr	r3, [r3, #8]
 80081f8:	f003 030c 	and.w	r3, r3, #12
 80081fc:	2b08      	cmp	r3, #8
 80081fe:	d00d      	beq.n	800821c <HAL_RCC_GetSysClockFreq+0x40>
 8008200:	2b08      	cmp	r3, #8
 8008202:	f200 80e1 	bhi.w	80083c8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8008206:	2b00      	cmp	r3, #0
 8008208:	d002      	beq.n	8008210 <HAL_RCC_GetSysClockFreq+0x34>
 800820a:	2b04      	cmp	r3, #4
 800820c:	d003      	beq.n	8008216 <HAL_RCC_GetSysClockFreq+0x3a>
 800820e:	e0db      	b.n	80083c8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008210:	4b73      	ldr	r3, [pc, #460]	@ (80083e0 <HAL_RCC_GetSysClockFreq+0x204>)
 8008212:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8008214:	e0db      	b.n	80083ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008216:	4b73      	ldr	r3, [pc, #460]	@ (80083e4 <HAL_RCC_GetSysClockFreq+0x208>)
 8008218:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800821a:	e0d8      	b.n	80083ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800821c:	4b6f      	ldr	r3, [pc, #444]	@ (80083dc <HAL_RCC_GetSysClockFreq+0x200>)
 800821e:	685b      	ldr	r3, [r3, #4]
 8008220:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008224:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008226:	4b6d      	ldr	r3, [pc, #436]	@ (80083dc <HAL_RCC_GetSysClockFreq+0x200>)
 8008228:	685b      	ldr	r3, [r3, #4]
 800822a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800822e:	2b00      	cmp	r3, #0
 8008230:	d063      	beq.n	80082fa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008232:	4b6a      	ldr	r3, [pc, #424]	@ (80083dc <HAL_RCC_GetSysClockFreq+0x200>)
 8008234:	685b      	ldr	r3, [r3, #4]
 8008236:	099b      	lsrs	r3, r3, #6
 8008238:	2200      	movs	r2, #0
 800823a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800823c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800823e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008240:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008244:	633b      	str	r3, [r7, #48]	@ 0x30
 8008246:	2300      	movs	r3, #0
 8008248:	637b      	str	r3, [r7, #52]	@ 0x34
 800824a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800824e:	4622      	mov	r2, r4
 8008250:	462b      	mov	r3, r5
 8008252:	f04f 0000 	mov.w	r0, #0
 8008256:	f04f 0100 	mov.w	r1, #0
 800825a:	0159      	lsls	r1, r3, #5
 800825c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008260:	0150      	lsls	r0, r2, #5
 8008262:	4602      	mov	r2, r0
 8008264:	460b      	mov	r3, r1
 8008266:	4621      	mov	r1, r4
 8008268:	1a51      	subs	r1, r2, r1
 800826a:	6139      	str	r1, [r7, #16]
 800826c:	4629      	mov	r1, r5
 800826e:	eb63 0301 	sbc.w	r3, r3, r1
 8008272:	617b      	str	r3, [r7, #20]
 8008274:	f04f 0200 	mov.w	r2, #0
 8008278:	f04f 0300 	mov.w	r3, #0
 800827c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008280:	4659      	mov	r1, fp
 8008282:	018b      	lsls	r3, r1, #6
 8008284:	4651      	mov	r1, sl
 8008286:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800828a:	4651      	mov	r1, sl
 800828c:	018a      	lsls	r2, r1, #6
 800828e:	4651      	mov	r1, sl
 8008290:	ebb2 0801 	subs.w	r8, r2, r1
 8008294:	4659      	mov	r1, fp
 8008296:	eb63 0901 	sbc.w	r9, r3, r1
 800829a:	f04f 0200 	mov.w	r2, #0
 800829e:	f04f 0300 	mov.w	r3, #0
 80082a2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80082a6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80082aa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80082ae:	4690      	mov	r8, r2
 80082b0:	4699      	mov	r9, r3
 80082b2:	4623      	mov	r3, r4
 80082b4:	eb18 0303 	adds.w	r3, r8, r3
 80082b8:	60bb      	str	r3, [r7, #8]
 80082ba:	462b      	mov	r3, r5
 80082bc:	eb49 0303 	adc.w	r3, r9, r3
 80082c0:	60fb      	str	r3, [r7, #12]
 80082c2:	f04f 0200 	mov.w	r2, #0
 80082c6:	f04f 0300 	mov.w	r3, #0
 80082ca:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80082ce:	4629      	mov	r1, r5
 80082d0:	024b      	lsls	r3, r1, #9
 80082d2:	4621      	mov	r1, r4
 80082d4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80082d8:	4621      	mov	r1, r4
 80082da:	024a      	lsls	r2, r1, #9
 80082dc:	4610      	mov	r0, r2
 80082de:	4619      	mov	r1, r3
 80082e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80082e2:	2200      	movs	r2, #0
 80082e4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80082e6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80082e8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80082ec:	f7f8 fcfc 	bl	8000ce8 <__aeabi_uldivmod>
 80082f0:	4602      	mov	r2, r0
 80082f2:	460b      	mov	r3, r1
 80082f4:	4613      	mov	r3, r2
 80082f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80082f8:	e058      	b.n	80083ac <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80082fa:	4b38      	ldr	r3, [pc, #224]	@ (80083dc <HAL_RCC_GetSysClockFreq+0x200>)
 80082fc:	685b      	ldr	r3, [r3, #4]
 80082fe:	099b      	lsrs	r3, r3, #6
 8008300:	2200      	movs	r2, #0
 8008302:	4618      	mov	r0, r3
 8008304:	4611      	mov	r1, r2
 8008306:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800830a:	623b      	str	r3, [r7, #32]
 800830c:	2300      	movs	r3, #0
 800830e:	627b      	str	r3, [r7, #36]	@ 0x24
 8008310:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8008314:	4642      	mov	r2, r8
 8008316:	464b      	mov	r3, r9
 8008318:	f04f 0000 	mov.w	r0, #0
 800831c:	f04f 0100 	mov.w	r1, #0
 8008320:	0159      	lsls	r1, r3, #5
 8008322:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008326:	0150      	lsls	r0, r2, #5
 8008328:	4602      	mov	r2, r0
 800832a:	460b      	mov	r3, r1
 800832c:	4641      	mov	r1, r8
 800832e:	ebb2 0a01 	subs.w	sl, r2, r1
 8008332:	4649      	mov	r1, r9
 8008334:	eb63 0b01 	sbc.w	fp, r3, r1
 8008338:	f04f 0200 	mov.w	r2, #0
 800833c:	f04f 0300 	mov.w	r3, #0
 8008340:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8008344:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8008348:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800834c:	ebb2 040a 	subs.w	r4, r2, sl
 8008350:	eb63 050b 	sbc.w	r5, r3, fp
 8008354:	f04f 0200 	mov.w	r2, #0
 8008358:	f04f 0300 	mov.w	r3, #0
 800835c:	00eb      	lsls	r3, r5, #3
 800835e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008362:	00e2      	lsls	r2, r4, #3
 8008364:	4614      	mov	r4, r2
 8008366:	461d      	mov	r5, r3
 8008368:	4643      	mov	r3, r8
 800836a:	18e3      	adds	r3, r4, r3
 800836c:	603b      	str	r3, [r7, #0]
 800836e:	464b      	mov	r3, r9
 8008370:	eb45 0303 	adc.w	r3, r5, r3
 8008374:	607b      	str	r3, [r7, #4]
 8008376:	f04f 0200 	mov.w	r2, #0
 800837a:	f04f 0300 	mov.w	r3, #0
 800837e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008382:	4629      	mov	r1, r5
 8008384:	028b      	lsls	r3, r1, #10
 8008386:	4621      	mov	r1, r4
 8008388:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800838c:	4621      	mov	r1, r4
 800838e:	028a      	lsls	r2, r1, #10
 8008390:	4610      	mov	r0, r2
 8008392:	4619      	mov	r1, r3
 8008394:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008396:	2200      	movs	r2, #0
 8008398:	61bb      	str	r3, [r7, #24]
 800839a:	61fa      	str	r2, [r7, #28]
 800839c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80083a0:	f7f8 fca2 	bl	8000ce8 <__aeabi_uldivmod>
 80083a4:	4602      	mov	r2, r0
 80083a6:	460b      	mov	r3, r1
 80083a8:	4613      	mov	r3, r2
 80083aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80083ac:	4b0b      	ldr	r3, [pc, #44]	@ (80083dc <HAL_RCC_GetSysClockFreq+0x200>)
 80083ae:	685b      	ldr	r3, [r3, #4]
 80083b0:	0c1b      	lsrs	r3, r3, #16
 80083b2:	f003 0303 	and.w	r3, r3, #3
 80083b6:	3301      	adds	r3, #1
 80083b8:	005b      	lsls	r3, r3, #1
 80083ba:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80083bc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80083be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80083c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80083c4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80083c6:	e002      	b.n	80083ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80083c8:	4b05      	ldr	r3, [pc, #20]	@ (80083e0 <HAL_RCC_GetSysClockFreq+0x204>)
 80083ca:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80083cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80083ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80083d0:	4618      	mov	r0, r3
 80083d2:	3750      	adds	r7, #80	@ 0x50
 80083d4:	46bd      	mov	sp, r7
 80083d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80083da:	bf00      	nop
 80083dc:	40023800 	.word	0x40023800
 80083e0:	00f42400 	.word	0x00f42400
 80083e4:	007a1200 	.word	0x007a1200

080083e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80083e8:	b480      	push	{r7}
 80083ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80083ec:	4b03      	ldr	r3, [pc, #12]	@ (80083fc <HAL_RCC_GetHCLKFreq+0x14>)
 80083ee:	681b      	ldr	r3, [r3, #0]
}
 80083f0:	4618      	mov	r0, r3
 80083f2:	46bd      	mov	sp, r7
 80083f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083f8:	4770      	bx	lr
 80083fa:	bf00      	nop
 80083fc:	2000000c 	.word	0x2000000c

08008400 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008400:	b580      	push	{r7, lr}
 8008402:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8008404:	f7ff fff0 	bl	80083e8 <HAL_RCC_GetHCLKFreq>
 8008408:	4602      	mov	r2, r0
 800840a:	4b05      	ldr	r3, [pc, #20]	@ (8008420 <HAL_RCC_GetPCLK1Freq+0x20>)
 800840c:	689b      	ldr	r3, [r3, #8]
 800840e:	0a9b      	lsrs	r3, r3, #10
 8008410:	f003 0307 	and.w	r3, r3, #7
 8008414:	4903      	ldr	r1, [pc, #12]	@ (8008424 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008416:	5ccb      	ldrb	r3, [r1, r3]
 8008418:	fa22 f303 	lsr.w	r3, r2, r3
}
 800841c:	4618      	mov	r0, r3
 800841e:	bd80      	pop	{r7, pc}
 8008420:	40023800 	.word	0x40023800
 8008424:	08010dbc 	.word	0x08010dbc

08008428 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008428:	b580      	push	{r7, lr}
 800842a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800842c:	f7ff ffdc 	bl	80083e8 <HAL_RCC_GetHCLKFreq>
 8008430:	4602      	mov	r2, r0
 8008432:	4b05      	ldr	r3, [pc, #20]	@ (8008448 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008434:	689b      	ldr	r3, [r3, #8]
 8008436:	0b5b      	lsrs	r3, r3, #13
 8008438:	f003 0307 	and.w	r3, r3, #7
 800843c:	4903      	ldr	r1, [pc, #12]	@ (800844c <HAL_RCC_GetPCLK2Freq+0x24>)
 800843e:	5ccb      	ldrb	r3, [r1, r3]
 8008440:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008444:	4618      	mov	r0, r3
 8008446:	bd80      	pop	{r7, pc}
 8008448:	40023800 	.word	0x40023800
 800844c:	08010dbc 	.word	0x08010dbc

08008450 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008450:	b480      	push	{r7}
 8008452:	b083      	sub	sp, #12
 8008454:	af00      	add	r7, sp, #0
 8008456:	6078      	str	r0, [r7, #4]
 8008458:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	220f      	movs	r2, #15
 800845e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8008460:	4b12      	ldr	r3, [pc, #72]	@ (80084ac <HAL_RCC_GetClockConfig+0x5c>)
 8008462:	689b      	ldr	r3, [r3, #8]
 8008464:	f003 0203 	and.w	r2, r3, #3
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800846c:	4b0f      	ldr	r3, [pc, #60]	@ (80084ac <HAL_RCC_GetClockConfig+0x5c>)
 800846e:	689b      	ldr	r3, [r3, #8]
 8008470:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8008478:	4b0c      	ldr	r3, [pc, #48]	@ (80084ac <HAL_RCC_GetClockConfig+0x5c>)
 800847a:	689b      	ldr	r3, [r3, #8]
 800847c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8008484:	4b09      	ldr	r3, [pc, #36]	@ (80084ac <HAL_RCC_GetClockConfig+0x5c>)
 8008486:	689b      	ldr	r3, [r3, #8]
 8008488:	08db      	lsrs	r3, r3, #3
 800848a:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800848e:	687b      	ldr	r3, [r7, #4]
 8008490:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8008492:	4b07      	ldr	r3, [pc, #28]	@ (80084b0 <HAL_RCC_GetClockConfig+0x60>)
 8008494:	681b      	ldr	r3, [r3, #0]
 8008496:	f003 0207 	and.w	r2, r3, #7
 800849a:	683b      	ldr	r3, [r7, #0]
 800849c:	601a      	str	r2, [r3, #0]
}
 800849e:	bf00      	nop
 80084a0:	370c      	adds	r7, #12
 80084a2:	46bd      	mov	sp, r7
 80084a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a8:	4770      	bx	lr
 80084aa:	bf00      	nop
 80084ac:	40023800 	.word	0x40023800
 80084b0:	40023c00 	.word	0x40023c00

080084b4 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80084b4:	b580      	push	{r7, lr}
 80084b6:	b086      	sub	sp, #24
 80084b8:	af00      	add	r7, sp, #0
 80084ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80084bc:	2300      	movs	r3, #0
 80084be:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 80084c0:	2300      	movs	r3, #0
 80084c2:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	f003 0301 	and.w	r3, r3, #1
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d105      	bne.n	80084dc <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	681b      	ldr	r3, [r3, #0]
 80084d4:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 80084d8:	2b00      	cmp	r3, #0
 80084da:	d035      	beq.n	8008548 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 80084dc:	4b62      	ldr	r3, [pc, #392]	@ (8008668 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80084de:	2200      	movs	r2, #0
 80084e0:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80084e2:	f7fb fba3 	bl	8003c2c <HAL_GetTick>
 80084e6:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80084e8:	e008      	b.n	80084fc <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80084ea:	f7fb fb9f 	bl	8003c2c <HAL_GetTick>
 80084ee:	4602      	mov	r2, r0
 80084f0:	697b      	ldr	r3, [r7, #20]
 80084f2:	1ad3      	subs	r3, r2, r3
 80084f4:	2b02      	cmp	r3, #2
 80084f6:	d901      	bls.n	80084fc <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80084f8:	2303      	movs	r3, #3
 80084fa:	e0b0      	b.n	800865e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80084fc:	4b5b      	ldr	r3, [pc, #364]	@ (800866c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80084fe:	681b      	ldr	r3, [r3, #0]
 8008500:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008504:	2b00      	cmp	r3, #0
 8008506:	d1f0      	bne.n	80084ea <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	685b      	ldr	r3, [r3, #4]
 800850c:	019a      	lsls	r2, r3, #6
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	689b      	ldr	r3, [r3, #8]
 8008512:	071b      	lsls	r3, r3, #28
 8008514:	4955      	ldr	r1, [pc, #340]	@ (800866c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008516:	4313      	orrs	r3, r2
 8008518:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 800851c:	4b52      	ldr	r3, [pc, #328]	@ (8008668 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800851e:	2201      	movs	r2, #1
 8008520:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8008522:	f7fb fb83 	bl	8003c2c <HAL_GetTick>
 8008526:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8008528:	e008      	b.n	800853c <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800852a:	f7fb fb7f 	bl	8003c2c <HAL_GetTick>
 800852e:	4602      	mov	r2, r0
 8008530:	697b      	ldr	r3, [r7, #20]
 8008532:	1ad3      	subs	r3, r2, r3
 8008534:	2b02      	cmp	r3, #2
 8008536:	d901      	bls.n	800853c <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8008538:	2303      	movs	r3, #3
 800853a:	e090      	b.n	800865e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800853c:	4b4b      	ldr	r3, [pc, #300]	@ (800866c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800853e:	681b      	ldr	r3, [r3, #0]
 8008540:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8008544:	2b00      	cmp	r3, #0
 8008546:	d0f0      	beq.n	800852a <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	f003 0302 	and.w	r3, r3, #2
 8008550:	2b00      	cmp	r3, #0
 8008552:	f000 8083 	beq.w	800865c <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8008556:	2300      	movs	r3, #0
 8008558:	60fb      	str	r3, [r7, #12]
 800855a:	4b44      	ldr	r3, [pc, #272]	@ (800866c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800855c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800855e:	4a43      	ldr	r2, [pc, #268]	@ (800866c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008560:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008564:	6413      	str	r3, [r2, #64]	@ 0x40
 8008566:	4b41      	ldr	r3, [pc, #260]	@ (800866c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008568:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800856a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800856e:	60fb      	str	r3, [r7, #12]
 8008570:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 8008572:	4b3f      	ldr	r3, [pc, #252]	@ (8008670 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8008574:	681b      	ldr	r3, [r3, #0]
 8008576:	4a3e      	ldr	r2, [pc, #248]	@ (8008670 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8008578:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800857c:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800857e:	f7fb fb55 	bl	8003c2c <HAL_GetTick>
 8008582:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8008584:	e008      	b.n	8008598 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8008586:	f7fb fb51 	bl	8003c2c <HAL_GetTick>
 800858a:	4602      	mov	r2, r0
 800858c:	697b      	ldr	r3, [r7, #20]
 800858e:	1ad3      	subs	r3, r2, r3
 8008590:	2b02      	cmp	r3, #2
 8008592:	d901      	bls.n	8008598 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8008594:	2303      	movs	r3, #3
 8008596:	e062      	b.n	800865e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8008598:	4b35      	ldr	r3, [pc, #212]	@ (8008670 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80085a0:	2b00      	cmp	r3, #0
 80085a2:	d0f0      	beq.n	8008586 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80085a4:	4b31      	ldr	r3, [pc, #196]	@ (800866c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80085a6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80085a8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80085ac:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80085ae:	693b      	ldr	r3, [r7, #16]
 80085b0:	2b00      	cmp	r3, #0
 80085b2:	d02f      	beq.n	8008614 <HAL_RCCEx_PeriphCLKConfig+0x160>
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	68db      	ldr	r3, [r3, #12]
 80085b8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80085bc:	693a      	ldr	r2, [r7, #16]
 80085be:	429a      	cmp	r2, r3
 80085c0:	d028      	beq.n	8008614 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80085c2:	4b2a      	ldr	r3, [pc, #168]	@ (800866c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80085c4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80085c6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80085ca:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80085cc:	4b29      	ldr	r3, [pc, #164]	@ (8008674 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80085ce:	2201      	movs	r2, #1
 80085d0:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80085d2:	4b28      	ldr	r3, [pc, #160]	@ (8008674 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 80085d4:	2200      	movs	r2, #0
 80085d6:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80085d8:	4a24      	ldr	r2, [pc, #144]	@ (800866c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80085da:	693b      	ldr	r3, [r7, #16]
 80085dc:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80085de:	4b23      	ldr	r3, [pc, #140]	@ (800866c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80085e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80085e2:	f003 0301 	and.w	r3, r3, #1
 80085e6:	2b01      	cmp	r3, #1
 80085e8:	d114      	bne.n	8008614 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80085ea:	f7fb fb1f 	bl	8003c2c <HAL_GetTick>
 80085ee:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80085f0:	e00a      	b.n	8008608 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80085f2:	f7fb fb1b 	bl	8003c2c <HAL_GetTick>
 80085f6:	4602      	mov	r2, r0
 80085f8:	697b      	ldr	r3, [r7, #20]
 80085fa:	1ad3      	subs	r3, r2, r3
 80085fc:	f241 3288 	movw	r2, #5000	@ 0x1388
 8008600:	4293      	cmp	r3, r2
 8008602:	d901      	bls.n	8008608 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8008604:	2303      	movs	r3, #3
 8008606:	e02a      	b.n	800865e <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008608:	4b18      	ldr	r3, [pc, #96]	@ (800866c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800860a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800860c:	f003 0302 	and.w	r3, r3, #2
 8008610:	2b00      	cmp	r3, #0
 8008612:	d0ee      	beq.n	80085f2 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	68db      	ldr	r3, [r3, #12]
 8008618:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800861c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008620:	d10d      	bne.n	800863e <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8008622:	4b12      	ldr	r3, [pc, #72]	@ (800866c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008624:	689b      	ldr	r3, [r3, #8]
 8008626:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	68db      	ldr	r3, [r3, #12]
 800862e:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8008632:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8008636:	490d      	ldr	r1, [pc, #52]	@ (800866c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008638:	4313      	orrs	r3, r2
 800863a:	608b      	str	r3, [r1, #8]
 800863c:	e005      	b.n	800864a <HAL_RCCEx_PeriphCLKConfig+0x196>
 800863e:	4b0b      	ldr	r3, [pc, #44]	@ (800866c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008640:	689b      	ldr	r3, [r3, #8]
 8008642:	4a0a      	ldr	r2, [pc, #40]	@ (800866c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008644:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8008648:	6093      	str	r3, [r2, #8]
 800864a:	4b08      	ldr	r3, [pc, #32]	@ (800866c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800864c:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	68db      	ldr	r3, [r3, #12]
 8008652:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8008656:	4905      	ldr	r1, [pc, #20]	@ (800866c <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8008658:	4313      	orrs	r3, r2
 800865a:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 800865c:	2300      	movs	r3, #0
}
 800865e:	4618      	mov	r0, r3
 8008660:	3718      	adds	r7, #24
 8008662:	46bd      	mov	sp, r7
 8008664:	bd80      	pop	{r7, pc}
 8008666:	bf00      	nop
 8008668:	42470068 	.word	0x42470068
 800866c:	40023800 	.word	0x40023800
 8008670:	40007000 	.word	0x40007000
 8008674:	42470e40 	.word	0x42470e40

08008678 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8008678:	b580      	push	{r7, lr}
 800867a:	b084      	sub	sp, #16
 800867c:	af00      	add	r7, sp, #0
 800867e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8008680:	2301      	movs	r3, #1
 8008682:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	2b00      	cmp	r3, #0
 8008688:	d101      	bne.n	800868e <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 800868a:	2301      	movs	r3, #1
 800868c:	e073      	b.n	8008776 <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	7f5b      	ldrb	r3, [r3, #29]
 8008692:	b2db      	uxtb	r3, r3
 8008694:	2b00      	cmp	r3, #0
 8008696:	d105      	bne.n	80086a4 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	2200      	movs	r2, #0
 800869c:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800869e:	6878      	ldr	r0, [r7, #4]
 80086a0:	f7fa ff24 	bl	80034ec <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	2202      	movs	r2, #2
 80086a8:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	681b      	ldr	r3, [r3, #0]
 80086ae:	68db      	ldr	r3, [r3, #12]
 80086b0:	f003 0310 	and.w	r3, r3, #16
 80086b4:	2b10      	cmp	r3, #16
 80086b6:	d055      	beq.n	8008764 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	22ca      	movs	r2, #202	@ 0xca
 80086be:	625a      	str	r2, [r3, #36]	@ 0x24
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	2253      	movs	r2, #83	@ 0x53
 80086c6:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 80086c8:	6878      	ldr	r0, [r7, #4]
 80086ca:	f000 fa49 	bl	8008b60 <RTC_EnterInitMode>
 80086ce:	4603      	mov	r3, r0
 80086d0:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 80086d2:	7bfb      	ldrb	r3, [r7, #15]
 80086d4:	2b00      	cmp	r3, #0
 80086d6:	d12c      	bne.n	8008732 <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	681b      	ldr	r3, [r3, #0]
 80086dc:	689b      	ldr	r3, [r3, #8]
 80086de:	687a      	ldr	r2, [r7, #4]
 80086e0:	6812      	ldr	r2, [r2, #0]
 80086e2:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80086e6:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80086ea:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	6899      	ldr	r1, [r3, #8]
 80086f2:	687b      	ldr	r3, [r7, #4]
 80086f4:	685a      	ldr	r2, [r3, #4]
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	691b      	ldr	r3, [r3, #16]
 80086fa:	431a      	orrs	r2, r3
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	695b      	ldr	r3, [r3, #20]
 8008700:	431a      	orrs	r2, r3
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	681b      	ldr	r3, [r3, #0]
 8008706:	430a      	orrs	r2, r1
 8008708:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	681b      	ldr	r3, [r3, #0]
 800870e:	687a      	ldr	r2, [r7, #4]
 8008710:	68d2      	ldr	r2, [r2, #12]
 8008712:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	6919      	ldr	r1, [r3, #16]
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	689b      	ldr	r3, [r3, #8]
 800871e:	041a      	lsls	r2, r3, #16
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	681b      	ldr	r3, [r3, #0]
 8008724:	430a      	orrs	r2, r1
 8008726:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8008728:	6878      	ldr	r0, [r7, #4]
 800872a:	f000 fa50 	bl	8008bce <RTC_ExitInitMode>
 800872e:	4603      	mov	r3, r0
 8008730:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8008732:	7bfb      	ldrb	r3, [r7, #15]
 8008734:	2b00      	cmp	r3, #0
 8008736:	d110      	bne.n	800875a <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8008738:	687b      	ldr	r3, [r7, #4]
 800873a:	681b      	ldr	r3, [r3, #0]
 800873c:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8008746:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 800874e:	687b      	ldr	r3, [r7, #4]
 8008750:	699a      	ldr	r2, [r3, #24]
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	430a      	orrs	r2, r1
 8008758:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	681b      	ldr	r3, [r3, #0]
 800875e:	22ff      	movs	r2, #255	@ 0xff
 8008760:	625a      	str	r2, [r3, #36]	@ 0x24
 8008762:	e001      	b.n	8008768 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8008764:	2300      	movs	r3, #0
 8008766:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8008768:	7bfb      	ldrb	r3, [r7, #15]
 800876a:	2b00      	cmp	r3, #0
 800876c:	d102      	bne.n	8008774 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	2201      	movs	r2, #1
 8008772:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8008774:	7bfb      	ldrb	r3, [r7, #15]
}
 8008776:	4618      	mov	r0, r3
 8008778:	3710      	adds	r7, #16
 800877a:	46bd      	mov	sp, r7
 800877c:	bd80      	pop	{r7, pc}

0800877e <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800877e:	b590      	push	{r4, r7, lr}
 8008780:	b087      	sub	sp, #28
 8008782:	af00      	add	r7, sp, #0
 8008784:	60f8      	str	r0, [r7, #12]
 8008786:	60b9      	str	r1, [r7, #8]
 8008788:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800878a:	2300      	movs	r3, #0
 800878c:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800878e:	68fb      	ldr	r3, [r7, #12]
 8008790:	7f1b      	ldrb	r3, [r3, #28]
 8008792:	2b01      	cmp	r3, #1
 8008794:	d101      	bne.n	800879a <HAL_RTC_SetTime+0x1c>
 8008796:	2302      	movs	r3, #2
 8008798:	e087      	b.n	80088aa <HAL_RTC_SetTime+0x12c>
 800879a:	68fb      	ldr	r3, [r7, #12]
 800879c:	2201      	movs	r2, #1
 800879e:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80087a0:	68fb      	ldr	r3, [r7, #12]
 80087a2:	2202      	movs	r2, #2
 80087a4:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80087a6:	687b      	ldr	r3, [r7, #4]
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d126      	bne.n	80087fa <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80087ac:	68fb      	ldr	r3, [r7, #12]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	689b      	ldr	r3, [r3, #8]
 80087b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d102      	bne.n	80087c0 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80087ba:	68bb      	ldr	r3, [r7, #8]
 80087bc:	2200      	movs	r2, #0
 80087be:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80087c0:	68bb      	ldr	r3, [r7, #8]
 80087c2:	781b      	ldrb	r3, [r3, #0]
 80087c4:	4618      	mov	r0, r3
 80087c6:	f000 fa27 	bl	8008c18 <RTC_ByteToBcd2>
 80087ca:	4603      	mov	r3, r0
 80087cc:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80087ce:	68bb      	ldr	r3, [r7, #8]
 80087d0:	785b      	ldrb	r3, [r3, #1]
 80087d2:	4618      	mov	r0, r3
 80087d4:	f000 fa20 	bl	8008c18 <RTC_ByteToBcd2>
 80087d8:	4603      	mov	r3, r0
 80087da:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80087dc:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 80087de:	68bb      	ldr	r3, [r7, #8]
 80087e0:	789b      	ldrb	r3, [r3, #2]
 80087e2:	4618      	mov	r0, r3
 80087e4:	f000 fa18 	bl	8008c18 <RTC_ByteToBcd2>
 80087e8:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80087ea:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 80087ee:	68bb      	ldr	r3, [r7, #8]
 80087f0:	78db      	ldrb	r3, [r3, #3]
 80087f2:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80087f4:	4313      	orrs	r3, r2
 80087f6:	617b      	str	r3, [r7, #20]
 80087f8:	e018      	b.n	800882c <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80087fa:	68fb      	ldr	r3, [r7, #12]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	689b      	ldr	r3, [r3, #8]
 8008800:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008804:	2b00      	cmp	r3, #0
 8008806:	d102      	bne.n	800880e <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8008808:	68bb      	ldr	r3, [r7, #8]
 800880a:	2200      	movs	r2, #0
 800880c:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800880e:	68bb      	ldr	r3, [r7, #8]
 8008810:	781b      	ldrb	r3, [r3, #0]
 8008812:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8008814:	68bb      	ldr	r3, [r7, #8]
 8008816:	785b      	ldrb	r3, [r3, #1]
 8008818:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800881a:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 800881c:	68ba      	ldr	r2, [r7, #8]
 800881e:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8008820:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8008822:	68bb      	ldr	r3, [r7, #8]
 8008824:	78db      	ldrb	r3, [r3, #3]
 8008826:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8008828:	4313      	orrs	r3, r2
 800882a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800882c:	68fb      	ldr	r3, [r7, #12]
 800882e:	681b      	ldr	r3, [r3, #0]
 8008830:	22ca      	movs	r2, #202	@ 0xca
 8008832:	625a      	str	r2, [r3, #36]	@ 0x24
 8008834:	68fb      	ldr	r3, [r7, #12]
 8008836:	681b      	ldr	r3, [r3, #0]
 8008838:	2253      	movs	r2, #83	@ 0x53
 800883a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800883c:	68f8      	ldr	r0, [r7, #12]
 800883e:	f000 f98f 	bl	8008b60 <RTC_EnterInitMode>
 8008842:	4603      	mov	r3, r0
 8008844:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8008846:	7cfb      	ldrb	r3, [r7, #19]
 8008848:	2b00      	cmp	r3, #0
 800884a:	d120      	bne.n	800888e <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	681a      	ldr	r2, [r3, #0]
 8008850:	697b      	ldr	r3, [r7, #20]
 8008852:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8008856:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800885a:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 800885c:	68fb      	ldr	r3, [r7, #12]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	689a      	ldr	r2, [r3, #8]
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800886a:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 800886c:	68fb      	ldr	r3, [r7, #12]
 800886e:	681b      	ldr	r3, [r3, #0]
 8008870:	6899      	ldr	r1, [r3, #8]
 8008872:	68bb      	ldr	r3, [r7, #8]
 8008874:	68da      	ldr	r2, [r3, #12]
 8008876:	68bb      	ldr	r3, [r7, #8]
 8008878:	691b      	ldr	r3, [r3, #16]
 800887a:	431a      	orrs	r2, r3
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	430a      	orrs	r2, r1
 8008882:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8008884:	68f8      	ldr	r0, [r7, #12]
 8008886:	f000 f9a2 	bl	8008bce <RTC_ExitInitMode>
 800888a:	4603      	mov	r3, r0
 800888c:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800888e:	7cfb      	ldrb	r3, [r7, #19]
 8008890:	2b00      	cmp	r3, #0
 8008892:	d102      	bne.n	800889a <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8008894:	68fb      	ldr	r3, [r7, #12]
 8008896:	2201      	movs	r2, #1
 8008898:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 800889a:	68fb      	ldr	r3, [r7, #12]
 800889c:	681b      	ldr	r3, [r3, #0]
 800889e:	22ff      	movs	r2, #255	@ 0xff
 80088a0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	2200      	movs	r2, #0
 80088a6:	771a      	strb	r2, [r3, #28]

  return status;
 80088a8:	7cfb      	ldrb	r3, [r7, #19]
}
 80088aa:	4618      	mov	r0, r3
 80088ac:	371c      	adds	r7, #28
 80088ae:	46bd      	mov	sp, r7
 80088b0:	bd90      	pop	{r4, r7, pc}

080088b2 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80088b2:	b580      	push	{r7, lr}
 80088b4:	b086      	sub	sp, #24
 80088b6:	af00      	add	r7, sp, #0
 80088b8:	60f8      	str	r0, [r7, #12]
 80088ba:	60b9      	str	r1, [r7, #8]
 80088bc:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80088be:	2300      	movs	r3, #0
 80088c0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	681b      	ldr	r3, [r3, #0]
 80088c6:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 80088c8:	68bb      	ldr	r3, [r7, #8]
 80088ca:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	681b      	ldr	r3, [r3, #0]
 80088d0:	691b      	ldr	r3, [r3, #16]
 80088d2:	f3c3 020e 	ubfx	r2, r3, #0, #15
 80088d6:	68bb      	ldr	r3, [r7, #8]
 80088d8:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	681b      	ldr	r3, [r3, #0]
 80088e0:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 80088e4:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 80088e8:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 80088ea:	697b      	ldr	r3, [r7, #20]
 80088ec:	0c1b      	lsrs	r3, r3, #16
 80088ee:	b2db      	uxtb	r3, r3
 80088f0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80088f4:	b2da      	uxtb	r2, r3
 80088f6:	68bb      	ldr	r3, [r7, #8]
 80088f8:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80088fa:	697b      	ldr	r3, [r7, #20]
 80088fc:	0a1b      	lsrs	r3, r3, #8
 80088fe:	b2db      	uxtb	r3, r3
 8008900:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008904:	b2da      	uxtb	r2, r3
 8008906:	68bb      	ldr	r3, [r7, #8]
 8008908:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 800890a:	697b      	ldr	r3, [r7, #20]
 800890c:	b2db      	uxtb	r3, r3
 800890e:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8008912:	b2da      	uxtb	r2, r3
 8008914:	68bb      	ldr	r3, [r7, #8]
 8008916:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 8008918:	697b      	ldr	r3, [r7, #20]
 800891a:	0d9b      	lsrs	r3, r3, #22
 800891c:	b2db      	uxtb	r3, r3
 800891e:	f003 0301 	and.w	r3, r3, #1
 8008922:	b2da      	uxtb	r2, r3
 8008924:	68bb      	ldr	r3, [r7, #8]
 8008926:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	2b00      	cmp	r3, #0
 800892c:	d11a      	bne.n	8008964 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 800892e:	68bb      	ldr	r3, [r7, #8]
 8008930:	781b      	ldrb	r3, [r3, #0]
 8008932:	4618      	mov	r0, r3
 8008934:	f000 f98e 	bl	8008c54 <RTC_Bcd2ToByte>
 8008938:	4603      	mov	r3, r0
 800893a:	461a      	mov	r2, r3
 800893c:	68bb      	ldr	r3, [r7, #8]
 800893e:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8008940:	68bb      	ldr	r3, [r7, #8]
 8008942:	785b      	ldrb	r3, [r3, #1]
 8008944:	4618      	mov	r0, r3
 8008946:	f000 f985 	bl	8008c54 <RTC_Bcd2ToByte>
 800894a:	4603      	mov	r3, r0
 800894c:	461a      	mov	r2, r3
 800894e:	68bb      	ldr	r3, [r7, #8]
 8008950:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8008952:	68bb      	ldr	r3, [r7, #8]
 8008954:	789b      	ldrb	r3, [r3, #2]
 8008956:	4618      	mov	r0, r3
 8008958:	f000 f97c 	bl	8008c54 <RTC_Bcd2ToByte>
 800895c:	4603      	mov	r3, r0
 800895e:	461a      	mov	r2, r3
 8008960:	68bb      	ldr	r3, [r7, #8]
 8008962:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8008964:	2300      	movs	r3, #0
}
 8008966:	4618      	mov	r0, r3
 8008968:	3718      	adds	r7, #24
 800896a:	46bd      	mov	sp, r7
 800896c:	bd80      	pop	{r7, pc}

0800896e <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800896e:	b590      	push	{r4, r7, lr}
 8008970:	b087      	sub	sp, #28
 8008972:	af00      	add	r7, sp, #0
 8008974:	60f8      	str	r0, [r7, #12]
 8008976:	60b9      	str	r1, [r7, #8]
 8008978:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800897a:	2300      	movs	r3, #0
 800897c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800897e:	68fb      	ldr	r3, [r7, #12]
 8008980:	7f1b      	ldrb	r3, [r3, #28]
 8008982:	2b01      	cmp	r3, #1
 8008984:	d101      	bne.n	800898a <HAL_RTC_SetDate+0x1c>
 8008986:	2302      	movs	r3, #2
 8008988:	e071      	b.n	8008a6e <HAL_RTC_SetDate+0x100>
 800898a:	68fb      	ldr	r3, [r7, #12]
 800898c:	2201      	movs	r2, #1
 800898e:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	2202      	movs	r2, #2
 8008994:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8008996:	687b      	ldr	r3, [r7, #4]
 8008998:	2b00      	cmp	r3, #0
 800899a:	d10e      	bne.n	80089ba <HAL_RTC_SetDate+0x4c>
 800899c:	68bb      	ldr	r3, [r7, #8]
 800899e:	785b      	ldrb	r3, [r3, #1]
 80089a0:	f003 0310 	and.w	r3, r3, #16
 80089a4:	2b00      	cmp	r3, #0
 80089a6:	d008      	beq.n	80089ba <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80089a8:	68bb      	ldr	r3, [r7, #8]
 80089aa:	785b      	ldrb	r3, [r3, #1]
 80089ac:	f023 0310 	bic.w	r3, r3, #16
 80089b0:	b2db      	uxtb	r3, r3
 80089b2:	330a      	adds	r3, #10
 80089b4:	b2da      	uxtb	r2, r3
 80089b6:	68bb      	ldr	r3, [r7, #8]
 80089b8:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	2b00      	cmp	r3, #0
 80089be:	d11c      	bne.n	80089fa <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80089c0:	68bb      	ldr	r3, [r7, #8]
 80089c2:	78db      	ldrb	r3, [r3, #3]
 80089c4:	4618      	mov	r0, r3
 80089c6:	f000 f927 	bl	8008c18 <RTC_ByteToBcd2>
 80089ca:	4603      	mov	r3, r0
 80089cc:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80089ce:	68bb      	ldr	r3, [r7, #8]
 80089d0:	785b      	ldrb	r3, [r3, #1]
 80089d2:	4618      	mov	r0, r3
 80089d4:	f000 f920 	bl	8008c18 <RTC_ByteToBcd2>
 80089d8:	4603      	mov	r3, r0
 80089da:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80089dc:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 80089de:	68bb      	ldr	r3, [r7, #8]
 80089e0:	789b      	ldrb	r3, [r3, #2]
 80089e2:	4618      	mov	r0, r3
 80089e4:	f000 f918 	bl	8008c18 <RTC_ByteToBcd2>
 80089e8:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80089ea:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 80089ee:	68bb      	ldr	r3, [r7, #8]
 80089f0:	781b      	ldrb	r3, [r3, #0]
 80089f2:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80089f4:	4313      	orrs	r3, r2
 80089f6:	617b      	str	r3, [r7, #20]
 80089f8:	e00e      	b.n	8008a18 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80089fa:	68bb      	ldr	r3, [r7, #8]
 80089fc:	78db      	ldrb	r3, [r3, #3]
 80089fe:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8008a00:	68bb      	ldr	r3, [r7, #8]
 8008a02:	785b      	ldrb	r3, [r3, #1]
 8008a04:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8008a06:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8008a08:	68ba      	ldr	r2, [r7, #8]
 8008a0a:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8008a0c:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8008a0e:	68bb      	ldr	r3, [r7, #8]
 8008a10:	781b      	ldrb	r3, [r3, #0]
 8008a12:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8008a14:	4313      	orrs	r3, r2
 8008a16:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	22ca      	movs	r2, #202	@ 0xca
 8008a1e:	625a      	str	r2, [r3, #36]	@ 0x24
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	2253      	movs	r2, #83	@ 0x53
 8008a26:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8008a28:	68f8      	ldr	r0, [r7, #12]
 8008a2a:	f000 f899 	bl	8008b60 <RTC_EnterInitMode>
 8008a2e:	4603      	mov	r3, r0
 8008a30:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8008a32:	7cfb      	ldrb	r3, [r7, #19]
 8008a34:	2b00      	cmp	r3, #0
 8008a36:	d10c      	bne.n	8008a52 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	681a      	ldr	r2, [r3, #0]
 8008a3c:	697b      	ldr	r3, [r7, #20]
 8008a3e:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8008a42:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8008a46:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8008a48:	68f8      	ldr	r0, [r7, #12]
 8008a4a:	f000 f8c0 	bl	8008bce <RTC_ExitInitMode>
 8008a4e:	4603      	mov	r3, r0
 8008a50:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 8008a52:	7cfb      	ldrb	r3, [r7, #19]
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d102      	bne.n	8008a5e <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	2201      	movs	r2, #1
 8008a5c:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	22ff      	movs	r2, #255	@ 0xff
 8008a64:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8008a66:	68fb      	ldr	r3, [r7, #12]
 8008a68:	2200      	movs	r2, #0
 8008a6a:	771a      	strb	r2, [r3, #28]

  return status;
 8008a6c:	7cfb      	ldrb	r3, [r7, #19]
}
 8008a6e:	4618      	mov	r0, r3
 8008a70:	371c      	adds	r7, #28
 8008a72:	46bd      	mov	sp, r7
 8008a74:	bd90      	pop	{r4, r7, pc}

08008a76 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8008a76:	b580      	push	{r7, lr}
 8008a78:	b086      	sub	sp, #24
 8008a7a:	af00      	add	r7, sp, #0
 8008a7c:	60f8      	str	r0, [r7, #12]
 8008a7e:	60b9      	str	r1, [r7, #8]
 8008a80:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8008a82:	2300      	movs	r3, #0
 8008a84:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	685b      	ldr	r3, [r3, #4]
 8008a8c:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8008a90:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8008a94:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8008a96:	697b      	ldr	r3, [r7, #20]
 8008a98:	0c1b      	lsrs	r3, r3, #16
 8008a9a:	b2da      	uxtb	r2, r3
 8008a9c:	68bb      	ldr	r3, [r7, #8]
 8008a9e:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 8008aa0:	697b      	ldr	r3, [r7, #20]
 8008aa2:	0a1b      	lsrs	r3, r3, #8
 8008aa4:	b2db      	uxtb	r3, r3
 8008aa6:	f003 031f 	and.w	r3, r3, #31
 8008aaa:	b2da      	uxtb	r2, r3
 8008aac:	68bb      	ldr	r3, [r7, #8]
 8008aae:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8008ab0:	697b      	ldr	r3, [r7, #20]
 8008ab2:	b2db      	uxtb	r3, r3
 8008ab4:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8008ab8:	b2da      	uxtb	r2, r3
 8008aba:	68bb      	ldr	r3, [r7, #8]
 8008abc:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8008abe:	697b      	ldr	r3, [r7, #20]
 8008ac0:	0b5b      	lsrs	r3, r3, #13
 8008ac2:	b2db      	uxtb	r3, r3
 8008ac4:	f003 0307 	and.w	r3, r3, #7
 8008ac8:	b2da      	uxtb	r2, r3
 8008aca:	68bb      	ldr	r3, [r7, #8]
 8008acc:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8008ace:	687b      	ldr	r3, [r7, #4]
 8008ad0:	2b00      	cmp	r3, #0
 8008ad2:	d11a      	bne.n	8008b0a <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8008ad4:	68bb      	ldr	r3, [r7, #8]
 8008ad6:	78db      	ldrb	r3, [r3, #3]
 8008ad8:	4618      	mov	r0, r3
 8008ada:	f000 f8bb 	bl	8008c54 <RTC_Bcd2ToByte>
 8008ade:	4603      	mov	r3, r0
 8008ae0:	461a      	mov	r2, r3
 8008ae2:	68bb      	ldr	r3, [r7, #8]
 8008ae4:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8008ae6:	68bb      	ldr	r3, [r7, #8]
 8008ae8:	785b      	ldrb	r3, [r3, #1]
 8008aea:	4618      	mov	r0, r3
 8008aec:	f000 f8b2 	bl	8008c54 <RTC_Bcd2ToByte>
 8008af0:	4603      	mov	r3, r0
 8008af2:	461a      	mov	r2, r3
 8008af4:	68bb      	ldr	r3, [r7, #8]
 8008af6:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8008af8:	68bb      	ldr	r3, [r7, #8]
 8008afa:	789b      	ldrb	r3, [r3, #2]
 8008afc:	4618      	mov	r0, r3
 8008afe:	f000 f8a9 	bl	8008c54 <RTC_Bcd2ToByte>
 8008b02:	4603      	mov	r3, r0
 8008b04:	461a      	mov	r2, r3
 8008b06:	68bb      	ldr	r3, [r7, #8]
 8008b08:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8008b0a:	2300      	movs	r3, #0
}
 8008b0c:	4618      	mov	r0, r3
 8008b0e:	3718      	adds	r7, #24
 8008b10:	46bd      	mov	sp, r7
 8008b12:	bd80      	pop	{r7, pc}

08008b14 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8008b14:	b580      	push	{r7, lr}
 8008b16:	b084      	sub	sp, #16
 8008b18:	af00      	add	r7, sp, #0
 8008b1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008b1c:	2300      	movs	r3, #0
 8008b1e:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8008b20:	687b      	ldr	r3, [r7, #4]
 8008b22:	681b      	ldr	r3, [r3, #0]
 8008b24:	4a0d      	ldr	r2, [pc, #52]	@ (8008b5c <HAL_RTC_WaitForSynchro+0x48>)
 8008b26:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008b28:	f7fb f880 	bl	8003c2c <HAL_GetTick>
 8008b2c:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8008b2e:	e009      	b.n	8008b44 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008b30:	f7fb f87c 	bl	8003c2c <HAL_GetTick>
 8008b34:	4602      	mov	r2, r0
 8008b36:	68fb      	ldr	r3, [r7, #12]
 8008b38:	1ad3      	subs	r3, r2, r3
 8008b3a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008b3e:	d901      	bls.n	8008b44 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8008b40:	2303      	movs	r3, #3
 8008b42:	e007      	b.n	8008b54 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	681b      	ldr	r3, [r3, #0]
 8008b48:	68db      	ldr	r3, [r3, #12]
 8008b4a:	f003 0320 	and.w	r3, r3, #32
 8008b4e:	2b00      	cmp	r3, #0
 8008b50:	d0ee      	beq.n	8008b30 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 8008b52:	2300      	movs	r3, #0
}
 8008b54:	4618      	mov	r0, r3
 8008b56:	3710      	adds	r7, #16
 8008b58:	46bd      	mov	sp, r7
 8008b5a:	bd80      	pop	{r7, pc}
 8008b5c:	00017f5f 	.word	0x00017f5f

08008b60 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8008b60:	b580      	push	{r7, lr}
 8008b62:	b084      	sub	sp, #16
 8008b64:	af00      	add	r7, sp, #0
 8008b66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008b68:	2300      	movs	r3, #0
 8008b6a:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8008b6c:	2300      	movs	r3, #0
 8008b6e:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	68db      	ldr	r3, [r3, #12]
 8008b76:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d122      	bne.n	8008bc4 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	68da      	ldr	r2, [r3, #12]
 8008b84:	687b      	ldr	r3, [r7, #4]
 8008b86:	681b      	ldr	r3, [r3, #0]
 8008b88:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8008b8c:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8008b8e:	f7fb f84d 	bl	8003c2c <HAL_GetTick>
 8008b92:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8008b94:	e00c      	b.n	8008bb0 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8008b96:	f7fb f849 	bl	8003c2c <HAL_GetTick>
 8008b9a:	4602      	mov	r2, r0
 8008b9c:	68bb      	ldr	r3, [r7, #8]
 8008b9e:	1ad3      	subs	r3, r2, r3
 8008ba0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8008ba4:	d904      	bls.n	8008bb0 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	2204      	movs	r2, #4
 8008baa:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8008bac:	2301      	movs	r3, #1
 8008bae:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8008bb0:	687b      	ldr	r3, [r7, #4]
 8008bb2:	681b      	ldr	r3, [r3, #0]
 8008bb4:	68db      	ldr	r3, [r3, #12]
 8008bb6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008bba:	2b00      	cmp	r3, #0
 8008bbc:	d102      	bne.n	8008bc4 <RTC_EnterInitMode+0x64>
 8008bbe:	7bfb      	ldrb	r3, [r7, #15]
 8008bc0:	2b01      	cmp	r3, #1
 8008bc2:	d1e8      	bne.n	8008b96 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8008bc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8008bc6:	4618      	mov	r0, r3
 8008bc8:	3710      	adds	r7, #16
 8008bca:	46bd      	mov	sp, r7
 8008bcc:	bd80      	pop	{r7, pc}

08008bce <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8008bce:	b580      	push	{r7, lr}
 8008bd0:	b084      	sub	sp, #16
 8008bd2:	af00      	add	r7, sp, #0
 8008bd4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008bd6:	2300      	movs	r3, #0
 8008bd8:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	68da      	ldr	r2, [r3, #12]
 8008be0:	687b      	ldr	r3, [r7, #4]
 8008be2:	681b      	ldr	r3, [r3, #0]
 8008be4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8008be8:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8008bea:	687b      	ldr	r3, [r7, #4]
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	689b      	ldr	r3, [r3, #8]
 8008bf0:	f003 0320 	and.w	r3, r3, #32
 8008bf4:	2b00      	cmp	r3, #0
 8008bf6:	d10a      	bne.n	8008c0e <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8008bf8:	6878      	ldr	r0, [r7, #4]
 8008bfa:	f7ff ff8b 	bl	8008b14 <HAL_RTC_WaitForSynchro>
 8008bfe:	4603      	mov	r3, r0
 8008c00:	2b00      	cmp	r3, #0
 8008c02:	d004      	beq.n	8008c0e <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	2204      	movs	r2, #4
 8008c08:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8008c0a:	2301      	movs	r3, #1
 8008c0c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8008c0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008c10:	4618      	mov	r0, r3
 8008c12:	3710      	adds	r7, #16
 8008c14:	46bd      	mov	sp, r7
 8008c16:	bd80      	pop	{r7, pc}

08008c18 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8008c18:	b480      	push	{r7}
 8008c1a:	b085      	sub	sp, #20
 8008c1c:	af00      	add	r7, sp, #0
 8008c1e:	4603      	mov	r3, r0
 8008c20:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8008c22:	2300      	movs	r3, #0
 8008c24:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8008c26:	e005      	b.n	8008c34 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8008c28:	68fb      	ldr	r3, [r7, #12]
 8008c2a:	3301      	adds	r3, #1
 8008c2c:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8008c2e:	79fb      	ldrb	r3, [r7, #7]
 8008c30:	3b0a      	subs	r3, #10
 8008c32:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8008c34:	79fb      	ldrb	r3, [r7, #7]
 8008c36:	2b09      	cmp	r3, #9
 8008c38:	d8f6      	bhi.n	8008c28 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8008c3a:	68fb      	ldr	r3, [r7, #12]
 8008c3c:	b2db      	uxtb	r3, r3
 8008c3e:	011b      	lsls	r3, r3, #4
 8008c40:	b2da      	uxtb	r2, r3
 8008c42:	79fb      	ldrb	r3, [r7, #7]
 8008c44:	4313      	orrs	r3, r2
 8008c46:	b2db      	uxtb	r3, r3
}
 8008c48:	4618      	mov	r0, r3
 8008c4a:	3714      	adds	r7, #20
 8008c4c:	46bd      	mov	sp, r7
 8008c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c52:	4770      	bx	lr

08008c54 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8008c54:	b480      	push	{r7}
 8008c56:	b085      	sub	sp, #20
 8008c58:	af00      	add	r7, sp, #0
 8008c5a:	4603      	mov	r3, r0
 8008c5c:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 8008c5e:	2300      	movs	r3, #0
 8008c60:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8008c62:	79fb      	ldrb	r3, [r7, #7]
 8008c64:	091b      	lsrs	r3, r3, #4
 8008c66:	b2db      	uxtb	r3, r3
 8008c68:	461a      	mov	r2, r3
 8008c6a:	4613      	mov	r3, r2
 8008c6c:	009b      	lsls	r3, r3, #2
 8008c6e:	4413      	add	r3, r2
 8008c70:	005b      	lsls	r3, r3, #1
 8008c72:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	b2da      	uxtb	r2, r3
 8008c78:	79fb      	ldrb	r3, [r7, #7]
 8008c7a:	f003 030f 	and.w	r3, r3, #15
 8008c7e:	b2db      	uxtb	r3, r3
 8008c80:	4413      	add	r3, r2
 8008c82:	b2db      	uxtb	r3, r3
}
 8008c84:	4618      	mov	r0, r3
 8008c86:	3714      	adds	r7, #20
 8008c88:	46bd      	mov	sp, r7
 8008c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c8e:	4770      	bx	lr

08008c90 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008c90:	b580      	push	{r7, lr}
 8008c92:	b082      	sub	sp, #8
 8008c94:	af00      	add	r7, sp, #0
 8008c96:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	2b00      	cmp	r3, #0
 8008c9c:	d101      	bne.n	8008ca2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008c9e:	2301      	movs	r3, #1
 8008ca0:	e041      	b.n	8008d26 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008ca8:	b2db      	uxtb	r3, r3
 8008caa:	2b00      	cmp	r3, #0
 8008cac:	d106      	bne.n	8008cbc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	2200      	movs	r2, #0
 8008cb2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008cb6:	6878      	ldr	r0, [r7, #4]
 8008cb8:	f000 f839 	bl	8008d2e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008cbc:	687b      	ldr	r3, [r7, #4]
 8008cbe:	2202      	movs	r2, #2
 8008cc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	681a      	ldr	r2, [r3, #0]
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	3304      	adds	r3, #4
 8008ccc:	4619      	mov	r1, r3
 8008cce:	4610      	mov	r0, r2
 8008cd0:	f000 f9c0 	bl	8009054 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	2201      	movs	r2, #1
 8008cd8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	2201      	movs	r2, #1
 8008ce0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	2201      	movs	r2, #1
 8008ce8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	2201      	movs	r2, #1
 8008cf0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8008cf4:	687b      	ldr	r3, [r7, #4]
 8008cf6:	2201      	movs	r2, #1
 8008cf8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	2201      	movs	r2, #1
 8008d00:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8008d04:	687b      	ldr	r3, [r7, #4]
 8008d06:	2201      	movs	r2, #1
 8008d08:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	2201      	movs	r2, #1
 8008d10:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008d14:	687b      	ldr	r3, [r7, #4]
 8008d16:	2201      	movs	r2, #1
 8008d18:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008d1c:	687b      	ldr	r3, [r7, #4]
 8008d1e:	2201      	movs	r2, #1
 8008d20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8008d24:	2300      	movs	r3, #0
}
 8008d26:	4618      	mov	r0, r3
 8008d28:	3708      	adds	r7, #8
 8008d2a:	46bd      	mov	sp, r7
 8008d2c:	bd80      	pop	{r7, pc}

08008d2e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8008d2e:	b480      	push	{r7}
 8008d30:	b083      	sub	sp, #12
 8008d32:	af00      	add	r7, sp, #0
 8008d34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8008d36:	bf00      	nop
 8008d38:	370c      	adds	r7, #12
 8008d3a:	46bd      	mov	sp, r7
 8008d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d40:	4770      	bx	lr
	...

08008d44 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008d44:	b480      	push	{r7}
 8008d46:	b085      	sub	sp, #20
 8008d48:	af00      	add	r7, sp, #0
 8008d4a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008d4c:	687b      	ldr	r3, [r7, #4]
 8008d4e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8008d52:	b2db      	uxtb	r3, r3
 8008d54:	2b01      	cmp	r3, #1
 8008d56:	d001      	beq.n	8008d5c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008d58:	2301      	movs	r3, #1
 8008d5a:	e04e      	b.n	8008dfa <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	2202      	movs	r2, #2
 8008d60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	681b      	ldr	r3, [r3, #0]
 8008d68:	68da      	ldr	r2, [r3, #12]
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	f042 0201 	orr.w	r2, r2, #1
 8008d72:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681b      	ldr	r3, [r3, #0]
 8008d78:	4a23      	ldr	r2, [pc, #140]	@ (8008e08 <HAL_TIM_Base_Start_IT+0xc4>)
 8008d7a:	4293      	cmp	r3, r2
 8008d7c:	d022      	beq.n	8008dc4 <HAL_TIM_Base_Start_IT+0x80>
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8008d86:	d01d      	beq.n	8008dc4 <HAL_TIM_Base_Start_IT+0x80>
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	4a1f      	ldr	r2, [pc, #124]	@ (8008e0c <HAL_TIM_Base_Start_IT+0xc8>)
 8008d8e:	4293      	cmp	r3, r2
 8008d90:	d018      	beq.n	8008dc4 <HAL_TIM_Base_Start_IT+0x80>
 8008d92:	687b      	ldr	r3, [r7, #4]
 8008d94:	681b      	ldr	r3, [r3, #0]
 8008d96:	4a1e      	ldr	r2, [pc, #120]	@ (8008e10 <HAL_TIM_Base_Start_IT+0xcc>)
 8008d98:	4293      	cmp	r3, r2
 8008d9a:	d013      	beq.n	8008dc4 <HAL_TIM_Base_Start_IT+0x80>
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	4a1c      	ldr	r2, [pc, #112]	@ (8008e14 <HAL_TIM_Base_Start_IT+0xd0>)
 8008da2:	4293      	cmp	r3, r2
 8008da4:	d00e      	beq.n	8008dc4 <HAL_TIM_Base_Start_IT+0x80>
 8008da6:	687b      	ldr	r3, [r7, #4]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	4a1b      	ldr	r2, [pc, #108]	@ (8008e18 <HAL_TIM_Base_Start_IT+0xd4>)
 8008dac:	4293      	cmp	r3, r2
 8008dae:	d009      	beq.n	8008dc4 <HAL_TIM_Base_Start_IT+0x80>
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	681b      	ldr	r3, [r3, #0]
 8008db4:	4a19      	ldr	r2, [pc, #100]	@ (8008e1c <HAL_TIM_Base_Start_IT+0xd8>)
 8008db6:	4293      	cmp	r3, r2
 8008db8:	d004      	beq.n	8008dc4 <HAL_TIM_Base_Start_IT+0x80>
 8008dba:	687b      	ldr	r3, [r7, #4]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	4a18      	ldr	r2, [pc, #96]	@ (8008e20 <HAL_TIM_Base_Start_IT+0xdc>)
 8008dc0:	4293      	cmp	r3, r2
 8008dc2:	d111      	bne.n	8008de8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	681b      	ldr	r3, [r3, #0]
 8008dc8:	689b      	ldr	r3, [r3, #8]
 8008dca:	f003 0307 	and.w	r3, r3, #7
 8008dce:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008dd0:	68fb      	ldr	r3, [r7, #12]
 8008dd2:	2b06      	cmp	r3, #6
 8008dd4:	d010      	beq.n	8008df8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8008dd6:	687b      	ldr	r3, [r7, #4]
 8008dd8:	681b      	ldr	r3, [r3, #0]
 8008dda:	681a      	ldr	r2, [r3, #0]
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	681b      	ldr	r3, [r3, #0]
 8008de0:	f042 0201 	orr.w	r2, r2, #1
 8008de4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008de6:	e007      	b.n	8008df8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	681a      	ldr	r2, [r3, #0]
 8008dee:	687b      	ldr	r3, [r7, #4]
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	f042 0201 	orr.w	r2, r2, #1
 8008df6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008df8:	2300      	movs	r3, #0
}
 8008dfa:	4618      	mov	r0, r3
 8008dfc:	3714      	adds	r7, #20
 8008dfe:	46bd      	mov	sp, r7
 8008e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e04:	4770      	bx	lr
 8008e06:	bf00      	nop
 8008e08:	40010000 	.word	0x40010000
 8008e0c:	40000400 	.word	0x40000400
 8008e10:	40000800 	.word	0x40000800
 8008e14:	40000c00 	.word	0x40000c00
 8008e18:	40010400 	.word	0x40010400
 8008e1c:	40014000 	.word	0x40014000
 8008e20:	40001800 	.word	0x40001800

08008e24 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008e24:	b580      	push	{r7, lr}
 8008e26:	b084      	sub	sp, #16
 8008e28:	af00      	add	r7, sp, #0
 8008e2a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	68db      	ldr	r3, [r3, #12]
 8008e32:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	691b      	ldr	r3, [r3, #16]
 8008e3a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8008e3c:	68bb      	ldr	r3, [r7, #8]
 8008e3e:	f003 0302 	and.w	r3, r3, #2
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	d020      	beq.n	8008e88 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	f003 0302 	and.w	r3, r3, #2
 8008e4c:	2b00      	cmp	r3, #0
 8008e4e:	d01b      	beq.n	8008e88 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8008e50:	687b      	ldr	r3, [r7, #4]
 8008e52:	681b      	ldr	r3, [r3, #0]
 8008e54:	f06f 0202 	mvn.w	r2, #2
 8008e58:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	2201      	movs	r2, #1
 8008e5e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008e60:	687b      	ldr	r3, [r7, #4]
 8008e62:	681b      	ldr	r3, [r3, #0]
 8008e64:	699b      	ldr	r3, [r3, #24]
 8008e66:	f003 0303 	and.w	r3, r3, #3
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d003      	beq.n	8008e76 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008e6e:	6878      	ldr	r0, [r7, #4]
 8008e70:	f000 f8d2 	bl	8009018 <HAL_TIM_IC_CaptureCallback>
 8008e74:	e005      	b.n	8008e82 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8008e76:	6878      	ldr	r0, [r7, #4]
 8008e78:	f000 f8c4 	bl	8009004 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008e7c:	6878      	ldr	r0, [r7, #4]
 8008e7e:	f000 f8d5 	bl	800902c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008e82:	687b      	ldr	r3, [r7, #4]
 8008e84:	2200      	movs	r2, #0
 8008e86:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8008e88:	68bb      	ldr	r3, [r7, #8]
 8008e8a:	f003 0304 	and.w	r3, r3, #4
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d020      	beq.n	8008ed4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	f003 0304 	and.w	r3, r3, #4
 8008e98:	2b00      	cmp	r3, #0
 8008e9a:	d01b      	beq.n	8008ed4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8008e9c:	687b      	ldr	r3, [r7, #4]
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	f06f 0204 	mvn.w	r2, #4
 8008ea4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	2202      	movs	r2, #2
 8008eaa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	699b      	ldr	r3, [r3, #24]
 8008eb2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008eb6:	2b00      	cmp	r3, #0
 8008eb8:	d003      	beq.n	8008ec2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008eba:	6878      	ldr	r0, [r7, #4]
 8008ebc:	f000 f8ac 	bl	8009018 <HAL_TIM_IC_CaptureCallback>
 8008ec0:	e005      	b.n	8008ece <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008ec2:	6878      	ldr	r0, [r7, #4]
 8008ec4:	f000 f89e 	bl	8009004 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008ec8:	6878      	ldr	r0, [r7, #4]
 8008eca:	f000 f8af 	bl	800902c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008ece:	687b      	ldr	r3, [r7, #4]
 8008ed0:	2200      	movs	r2, #0
 8008ed2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8008ed4:	68bb      	ldr	r3, [r7, #8]
 8008ed6:	f003 0308 	and.w	r3, r3, #8
 8008eda:	2b00      	cmp	r3, #0
 8008edc:	d020      	beq.n	8008f20 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8008ede:	68fb      	ldr	r3, [r7, #12]
 8008ee0:	f003 0308 	and.w	r3, r3, #8
 8008ee4:	2b00      	cmp	r3, #0
 8008ee6:	d01b      	beq.n	8008f20 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	f06f 0208 	mvn.w	r2, #8
 8008ef0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	2204      	movs	r2, #4
 8008ef6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	69db      	ldr	r3, [r3, #28]
 8008efe:	f003 0303 	and.w	r3, r3, #3
 8008f02:	2b00      	cmp	r3, #0
 8008f04:	d003      	beq.n	8008f0e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008f06:	6878      	ldr	r0, [r7, #4]
 8008f08:	f000 f886 	bl	8009018 <HAL_TIM_IC_CaptureCallback>
 8008f0c:	e005      	b.n	8008f1a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008f0e:	6878      	ldr	r0, [r7, #4]
 8008f10:	f000 f878 	bl	8009004 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008f14:	6878      	ldr	r0, [r7, #4]
 8008f16:	f000 f889 	bl	800902c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	2200      	movs	r2, #0
 8008f1e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8008f20:	68bb      	ldr	r3, [r7, #8]
 8008f22:	f003 0310 	and.w	r3, r3, #16
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d020      	beq.n	8008f6c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	f003 0310 	and.w	r3, r3, #16
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d01b      	beq.n	8008f6c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	f06f 0210 	mvn.w	r2, #16
 8008f3c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8008f3e:	687b      	ldr	r3, [r7, #4]
 8008f40:	2208      	movs	r2, #8
 8008f42:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008f44:	687b      	ldr	r3, [r7, #4]
 8008f46:	681b      	ldr	r3, [r3, #0]
 8008f48:	69db      	ldr	r3, [r3, #28]
 8008f4a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d003      	beq.n	8008f5a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008f52:	6878      	ldr	r0, [r7, #4]
 8008f54:	f000 f860 	bl	8009018 <HAL_TIM_IC_CaptureCallback>
 8008f58:	e005      	b.n	8008f66 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008f5a:	6878      	ldr	r0, [r7, #4]
 8008f5c:	f000 f852 	bl	8009004 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008f60:	6878      	ldr	r0, [r7, #4]
 8008f62:	f000 f863 	bl	800902c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	2200      	movs	r2, #0
 8008f6a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8008f6c:	68bb      	ldr	r3, [r7, #8]
 8008f6e:	f003 0301 	and.w	r3, r3, #1
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d00c      	beq.n	8008f90 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	f003 0301 	and.w	r3, r3, #1
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d007      	beq.n	8008f90 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	f06f 0201 	mvn.w	r2, #1
 8008f88:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008f8a:	6878      	ldr	r0, [r7, #4]
 8008f8c:	f7fa fa3c 	bl	8003408 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8008f90:	68bb      	ldr	r3, [r7, #8]
 8008f92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d00c      	beq.n	8008fb4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8008f9a:	68fb      	ldr	r3, [r7, #12]
 8008f9c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d007      	beq.n	8008fb4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	681b      	ldr	r3, [r3, #0]
 8008fa8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8008fac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008fae:	6878      	ldr	r0, [r7, #4]
 8008fb0:	f000 f906 	bl	80091c0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8008fb4:	68bb      	ldr	r3, [r7, #8]
 8008fb6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008fba:	2b00      	cmp	r3, #0
 8008fbc:	d00c      	beq.n	8008fd8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8008fbe:	68fb      	ldr	r3, [r7, #12]
 8008fc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8008fc4:	2b00      	cmp	r3, #0
 8008fc6:	d007      	beq.n	8008fd8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8008fc8:	687b      	ldr	r3, [r7, #4]
 8008fca:	681b      	ldr	r3, [r3, #0]
 8008fcc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8008fd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8008fd2:	6878      	ldr	r0, [r7, #4]
 8008fd4:	f000 f834 	bl	8009040 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8008fd8:	68bb      	ldr	r3, [r7, #8]
 8008fda:	f003 0320 	and.w	r3, r3, #32
 8008fde:	2b00      	cmp	r3, #0
 8008fe0:	d00c      	beq.n	8008ffc <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	f003 0320 	and.w	r3, r3, #32
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d007      	beq.n	8008ffc <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	f06f 0220 	mvn.w	r2, #32
 8008ff4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008ff6:	6878      	ldr	r0, [r7, #4]
 8008ff8:	f000 f8d8 	bl	80091ac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008ffc:	bf00      	nop
 8008ffe:	3710      	adds	r7, #16
 8009000:	46bd      	mov	sp, r7
 8009002:	bd80      	pop	{r7, pc}

08009004 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009004:	b480      	push	{r7}
 8009006:	b083      	sub	sp, #12
 8009008:	af00      	add	r7, sp, #0
 800900a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800900c:	bf00      	nop
 800900e:	370c      	adds	r7, #12
 8009010:	46bd      	mov	sp, r7
 8009012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009016:	4770      	bx	lr

08009018 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009018:	b480      	push	{r7}
 800901a:	b083      	sub	sp, #12
 800901c:	af00      	add	r7, sp, #0
 800901e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009020:	bf00      	nop
 8009022:	370c      	adds	r7, #12
 8009024:	46bd      	mov	sp, r7
 8009026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800902a:	4770      	bx	lr

0800902c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800902c:	b480      	push	{r7}
 800902e:	b083      	sub	sp, #12
 8009030:	af00      	add	r7, sp, #0
 8009032:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009034:	bf00      	nop
 8009036:	370c      	adds	r7, #12
 8009038:	46bd      	mov	sp, r7
 800903a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800903e:	4770      	bx	lr

08009040 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009040:	b480      	push	{r7}
 8009042:	b083      	sub	sp, #12
 8009044:	af00      	add	r7, sp, #0
 8009046:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009048:	bf00      	nop
 800904a:	370c      	adds	r7, #12
 800904c:	46bd      	mov	sp, r7
 800904e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009052:	4770      	bx	lr

08009054 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8009054:	b480      	push	{r7}
 8009056:	b085      	sub	sp, #20
 8009058:	af00      	add	r7, sp, #0
 800905a:	6078      	str	r0, [r7, #4]
 800905c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800905e:	687b      	ldr	r3, [r7, #4]
 8009060:	681b      	ldr	r3, [r3, #0]
 8009062:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	4a46      	ldr	r2, [pc, #280]	@ (8009180 <TIM_Base_SetConfig+0x12c>)
 8009068:	4293      	cmp	r3, r2
 800906a:	d013      	beq.n	8009094 <TIM_Base_SetConfig+0x40>
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009072:	d00f      	beq.n	8009094 <TIM_Base_SetConfig+0x40>
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	4a43      	ldr	r2, [pc, #268]	@ (8009184 <TIM_Base_SetConfig+0x130>)
 8009078:	4293      	cmp	r3, r2
 800907a:	d00b      	beq.n	8009094 <TIM_Base_SetConfig+0x40>
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	4a42      	ldr	r2, [pc, #264]	@ (8009188 <TIM_Base_SetConfig+0x134>)
 8009080:	4293      	cmp	r3, r2
 8009082:	d007      	beq.n	8009094 <TIM_Base_SetConfig+0x40>
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	4a41      	ldr	r2, [pc, #260]	@ (800918c <TIM_Base_SetConfig+0x138>)
 8009088:	4293      	cmp	r3, r2
 800908a:	d003      	beq.n	8009094 <TIM_Base_SetConfig+0x40>
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	4a40      	ldr	r2, [pc, #256]	@ (8009190 <TIM_Base_SetConfig+0x13c>)
 8009090:	4293      	cmp	r3, r2
 8009092:	d108      	bne.n	80090a6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8009094:	68fb      	ldr	r3, [r7, #12]
 8009096:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800909a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800909c:	683b      	ldr	r3, [r7, #0]
 800909e:	685b      	ldr	r3, [r3, #4]
 80090a0:	68fa      	ldr	r2, [r7, #12]
 80090a2:	4313      	orrs	r3, r2
 80090a4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	4a35      	ldr	r2, [pc, #212]	@ (8009180 <TIM_Base_SetConfig+0x12c>)
 80090aa:	4293      	cmp	r3, r2
 80090ac:	d02b      	beq.n	8009106 <TIM_Base_SetConfig+0xb2>
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80090b4:	d027      	beq.n	8009106 <TIM_Base_SetConfig+0xb2>
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	4a32      	ldr	r2, [pc, #200]	@ (8009184 <TIM_Base_SetConfig+0x130>)
 80090ba:	4293      	cmp	r3, r2
 80090bc:	d023      	beq.n	8009106 <TIM_Base_SetConfig+0xb2>
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	4a31      	ldr	r2, [pc, #196]	@ (8009188 <TIM_Base_SetConfig+0x134>)
 80090c2:	4293      	cmp	r3, r2
 80090c4:	d01f      	beq.n	8009106 <TIM_Base_SetConfig+0xb2>
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	4a30      	ldr	r2, [pc, #192]	@ (800918c <TIM_Base_SetConfig+0x138>)
 80090ca:	4293      	cmp	r3, r2
 80090cc:	d01b      	beq.n	8009106 <TIM_Base_SetConfig+0xb2>
 80090ce:	687b      	ldr	r3, [r7, #4]
 80090d0:	4a2f      	ldr	r2, [pc, #188]	@ (8009190 <TIM_Base_SetConfig+0x13c>)
 80090d2:	4293      	cmp	r3, r2
 80090d4:	d017      	beq.n	8009106 <TIM_Base_SetConfig+0xb2>
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	4a2e      	ldr	r2, [pc, #184]	@ (8009194 <TIM_Base_SetConfig+0x140>)
 80090da:	4293      	cmp	r3, r2
 80090dc:	d013      	beq.n	8009106 <TIM_Base_SetConfig+0xb2>
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	4a2d      	ldr	r2, [pc, #180]	@ (8009198 <TIM_Base_SetConfig+0x144>)
 80090e2:	4293      	cmp	r3, r2
 80090e4:	d00f      	beq.n	8009106 <TIM_Base_SetConfig+0xb2>
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	4a2c      	ldr	r2, [pc, #176]	@ (800919c <TIM_Base_SetConfig+0x148>)
 80090ea:	4293      	cmp	r3, r2
 80090ec:	d00b      	beq.n	8009106 <TIM_Base_SetConfig+0xb2>
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	4a2b      	ldr	r2, [pc, #172]	@ (80091a0 <TIM_Base_SetConfig+0x14c>)
 80090f2:	4293      	cmp	r3, r2
 80090f4:	d007      	beq.n	8009106 <TIM_Base_SetConfig+0xb2>
 80090f6:	687b      	ldr	r3, [r7, #4]
 80090f8:	4a2a      	ldr	r2, [pc, #168]	@ (80091a4 <TIM_Base_SetConfig+0x150>)
 80090fa:	4293      	cmp	r3, r2
 80090fc:	d003      	beq.n	8009106 <TIM_Base_SetConfig+0xb2>
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	4a29      	ldr	r2, [pc, #164]	@ (80091a8 <TIM_Base_SetConfig+0x154>)
 8009102:	4293      	cmp	r3, r2
 8009104:	d108      	bne.n	8009118 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009106:	68fb      	ldr	r3, [r7, #12]
 8009108:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800910c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800910e:	683b      	ldr	r3, [r7, #0]
 8009110:	68db      	ldr	r3, [r3, #12]
 8009112:	68fa      	ldr	r2, [r7, #12]
 8009114:	4313      	orrs	r3, r2
 8009116:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009118:	68fb      	ldr	r3, [r7, #12]
 800911a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800911e:	683b      	ldr	r3, [r7, #0]
 8009120:	695b      	ldr	r3, [r3, #20]
 8009122:	4313      	orrs	r3, r2
 8009124:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	68fa      	ldr	r2, [r7, #12]
 800912a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800912c:	683b      	ldr	r3, [r7, #0]
 800912e:	689a      	ldr	r2, [r3, #8]
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009134:	683b      	ldr	r3, [r7, #0]
 8009136:	681a      	ldr	r2, [r3, #0]
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	4a10      	ldr	r2, [pc, #64]	@ (8009180 <TIM_Base_SetConfig+0x12c>)
 8009140:	4293      	cmp	r3, r2
 8009142:	d003      	beq.n	800914c <TIM_Base_SetConfig+0xf8>
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	4a12      	ldr	r2, [pc, #72]	@ (8009190 <TIM_Base_SetConfig+0x13c>)
 8009148:	4293      	cmp	r3, r2
 800914a:	d103      	bne.n	8009154 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800914c:	683b      	ldr	r3, [r7, #0]
 800914e:	691a      	ldr	r2, [r3, #16]
 8009150:	687b      	ldr	r3, [r7, #4]
 8009152:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	2201      	movs	r2, #1
 8009158:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	691b      	ldr	r3, [r3, #16]
 800915e:	f003 0301 	and.w	r3, r3, #1
 8009162:	2b01      	cmp	r3, #1
 8009164:	d105      	bne.n	8009172 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	691b      	ldr	r3, [r3, #16]
 800916a:	f023 0201 	bic.w	r2, r3, #1
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	611a      	str	r2, [r3, #16]
  }
}
 8009172:	bf00      	nop
 8009174:	3714      	adds	r7, #20
 8009176:	46bd      	mov	sp, r7
 8009178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800917c:	4770      	bx	lr
 800917e:	bf00      	nop
 8009180:	40010000 	.word	0x40010000
 8009184:	40000400 	.word	0x40000400
 8009188:	40000800 	.word	0x40000800
 800918c:	40000c00 	.word	0x40000c00
 8009190:	40010400 	.word	0x40010400
 8009194:	40014000 	.word	0x40014000
 8009198:	40014400 	.word	0x40014400
 800919c:	40014800 	.word	0x40014800
 80091a0:	40001800 	.word	0x40001800
 80091a4:	40001c00 	.word	0x40001c00
 80091a8:	40002000 	.word	0x40002000

080091ac <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80091ac:	b480      	push	{r7}
 80091ae:	b083      	sub	sp, #12
 80091b0:	af00      	add	r7, sp, #0
 80091b2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80091b4:	bf00      	nop
 80091b6:	370c      	adds	r7, #12
 80091b8:	46bd      	mov	sp, r7
 80091ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091be:	4770      	bx	lr

080091c0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80091c0:	b480      	push	{r7}
 80091c2:	b083      	sub	sp, #12
 80091c4:	af00      	add	r7, sp, #0
 80091c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80091c8:	bf00      	nop
 80091ca:	370c      	adds	r7, #12
 80091cc:	46bd      	mov	sp, r7
 80091ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091d2:	4770      	bx	lr

080091d4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80091d4:	b580      	push	{r7, lr}
 80091d6:	b082      	sub	sp, #8
 80091d8:	af00      	add	r7, sp, #0
 80091da:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d101      	bne.n	80091e6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80091e2:	2301      	movs	r3, #1
 80091e4:	e042      	b.n	800926c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80091ec:	b2db      	uxtb	r3, r3
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d106      	bne.n	8009200 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	2200      	movs	r2, #0
 80091f6:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80091fa:	6878      	ldr	r0, [r7, #4]
 80091fc:	f7fa fb86 	bl	800390c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	2224      	movs	r2, #36	@ 0x24
 8009204:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	68da      	ldr	r2, [r3, #12]
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8009216:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009218:	6878      	ldr	r0, [r7, #4]
 800921a:	f000 f973 	bl	8009504 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	681b      	ldr	r3, [r3, #0]
 8009222:	691a      	ldr	r2, [r3, #16]
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800922c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800922e:	687b      	ldr	r3, [r7, #4]
 8009230:	681b      	ldr	r3, [r3, #0]
 8009232:	695a      	ldr	r2, [r3, #20]
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800923c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	68da      	ldr	r2, [r3, #12]
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800924c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	2200      	movs	r2, #0
 8009252:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	2220      	movs	r2, #32
 8009258:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	2220      	movs	r2, #32
 8009260:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	2200      	movs	r2, #0
 8009268:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800926a:	2300      	movs	r3, #0
}
 800926c:	4618      	mov	r0, r3
 800926e:	3708      	adds	r7, #8
 8009270:	46bd      	mov	sp, r7
 8009272:	bd80      	pop	{r7, pc}

08009274 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009274:	b580      	push	{r7, lr}
 8009276:	b08a      	sub	sp, #40	@ 0x28
 8009278:	af02      	add	r7, sp, #8
 800927a:	60f8      	str	r0, [r7, #12]
 800927c:	60b9      	str	r1, [r7, #8]
 800927e:	603b      	str	r3, [r7, #0]
 8009280:	4613      	mov	r3, r2
 8009282:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8009284:	2300      	movs	r3, #0
 8009286:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009288:	68fb      	ldr	r3, [r7, #12]
 800928a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800928e:	b2db      	uxtb	r3, r3
 8009290:	2b20      	cmp	r3, #32
 8009292:	d175      	bne.n	8009380 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8009294:	68bb      	ldr	r3, [r7, #8]
 8009296:	2b00      	cmp	r3, #0
 8009298:	d002      	beq.n	80092a0 <HAL_UART_Transmit+0x2c>
 800929a:	88fb      	ldrh	r3, [r7, #6]
 800929c:	2b00      	cmp	r3, #0
 800929e:	d101      	bne.n	80092a4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80092a0:	2301      	movs	r3, #1
 80092a2:	e06e      	b.n	8009382 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80092a4:	68fb      	ldr	r3, [r7, #12]
 80092a6:	2200      	movs	r2, #0
 80092a8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80092aa:	68fb      	ldr	r3, [r7, #12]
 80092ac:	2221      	movs	r2, #33	@ 0x21
 80092ae:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80092b2:	f7fa fcbb 	bl	8003c2c <HAL_GetTick>
 80092b6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	88fa      	ldrh	r2, [r7, #6]
 80092bc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80092be:	68fb      	ldr	r3, [r7, #12]
 80092c0:	88fa      	ldrh	r2, [r7, #6]
 80092c2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80092c4:	68fb      	ldr	r3, [r7, #12]
 80092c6:	689b      	ldr	r3, [r3, #8]
 80092c8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80092cc:	d108      	bne.n	80092e0 <HAL_UART_Transmit+0x6c>
 80092ce:	68fb      	ldr	r3, [r7, #12]
 80092d0:	691b      	ldr	r3, [r3, #16]
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d104      	bne.n	80092e0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80092d6:	2300      	movs	r3, #0
 80092d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80092da:	68bb      	ldr	r3, [r7, #8]
 80092dc:	61bb      	str	r3, [r7, #24]
 80092de:	e003      	b.n	80092e8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80092e0:	68bb      	ldr	r3, [r7, #8]
 80092e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80092e4:	2300      	movs	r3, #0
 80092e6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80092e8:	e02e      	b.n	8009348 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80092ea:	683b      	ldr	r3, [r7, #0]
 80092ec:	9300      	str	r3, [sp, #0]
 80092ee:	697b      	ldr	r3, [r7, #20]
 80092f0:	2200      	movs	r2, #0
 80092f2:	2180      	movs	r1, #128	@ 0x80
 80092f4:	68f8      	ldr	r0, [r7, #12]
 80092f6:	f000 f848 	bl	800938a <UART_WaitOnFlagUntilTimeout>
 80092fa:	4603      	mov	r3, r0
 80092fc:	2b00      	cmp	r3, #0
 80092fe:	d005      	beq.n	800930c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8009300:	68fb      	ldr	r3, [r7, #12]
 8009302:	2220      	movs	r2, #32
 8009304:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8009308:	2303      	movs	r3, #3
 800930a:	e03a      	b.n	8009382 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800930c:	69fb      	ldr	r3, [r7, #28]
 800930e:	2b00      	cmp	r3, #0
 8009310:	d10b      	bne.n	800932a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009312:	69bb      	ldr	r3, [r7, #24]
 8009314:	881b      	ldrh	r3, [r3, #0]
 8009316:	461a      	mov	r2, r3
 8009318:	68fb      	ldr	r3, [r7, #12]
 800931a:	681b      	ldr	r3, [r3, #0]
 800931c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009320:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8009322:	69bb      	ldr	r3, [r7, #24]
 8009324:	3302      	adds	r3, #2
 8009326:	61bb      	str	r3, [r7, #24]
 8009328:	e007      	b.n	800933a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800932a:	69fb      	ldr	r3, [r7, #28]
 800932c:	781a      	ldrb	r2, [r3, #0]
 800932e:	68fb      	ldr	r3, [r7, #12]
 8009330:	681b      	ldr	r3, [r3, #0]
 8009332:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8009334:	69fb      	ldr	r3, [r7, #28]
 8009336:	3301      	adds	r3, #1
 8009338:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800933e:	b29b      	uxth	r3, r3
 8009340:	3b01      	subs	r3, #1
 8009342:	b29a      	uxth	r2, r3
 8009344:	68fb      	ldr	r3, [r7, #12]
 8009346:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8009348:	68fb      	ldr	r3, [r7, #12]
 800934a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800934c:	b29b      	uxth	r3, r3
 800934e:	2b00      	cmp	r3, #0
 8009350:	d1cb      	bne.n	80092ea <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009352:	683b      	ldr	r3, [r7, #0]
 8009354:	9300      	str	r3, [sp, #0]
 8009356:	697b      	ldr	r3, [r7, #20]
 8009358:	2200      	movs	r2, #0
 800935a:	2140      	movs	r1, #64	@ 0x40
 800935c:	68f8      	ldr	r0, [r7, #12]
 800935e:	f000 f814 	bl	800938a <UART_WaitOnFlagUntilTimeout>
 8009362:	4603      	mov	r3, r0
 8009364:	2b00      	cmp	r3, #0
 8009366:	d005      	beq.n	8009374 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	2220      	movs	r2, #32
 800936c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8009370:	2303      	movs	r3, #3
 8009372:	e006      	b.n	8009382 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	2220      	movs	r2, #32
 8009378:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 800937c:	2300      	movs	r3, #0
 800937e:	e000      	b.n	8009382 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8009380:	2302      	movs	r3, #2
  }
}
 8009382:	4618      	mov	r0, r3
 8009384:	3720      	adds	r7, #32
 8009386:	46bd      	mov	sp, r7
 8009388:	bd80      	pop	{r7, pc}

0800938a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800938a:	b580      	push	{r7, lr}
 800938c:	b086      	sub	sp, #24
 800938e:	af00      	add	r7, sp, #0
 8009390:	60f8      	str	r0, [r7, #12]
 8009392:	60b9      	str	r1, [r7, #8]
 8009394:	603b      	str	r3, [r7, #0]
 8009396:	4613      	mov	r3, r2
 8009398:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800939a:	e03b      	b.n	8009414 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800939c:	6a3b      	ldr	r3, [r7, #32]
 800939e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80093a2:	d037      	beq.n	8009414 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80093a4:	f7fa fc42 	bl	8003c2c <HAL_GetTick>
 80093a8:	4602      	mov	r2, r0
 80093aa:	683b      	ldr	r3, [r7, #0]
 80093ac:	1ad3      	subs	r3, r2, r3
 80093ae:	6a3a      	ldr	r2, [r7, #32]
 80093b0:	429a      	cmp	r2, r3
 80093b2:	d302      	bcc.n	80093ba <UART_WaitOnFlagUntilTimeout+0x30>
 80093b4:	6a3b      	ldr	r3, [r7, #32]
 80093b6:	2b00      	cmp	r3, #0
 80093b8:	d101      	bne.n	80093be <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80093ba:	2303      	movs	r3, #3
 80093bc:	e03a      	b.n	8009434 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80093be:	68fb      	ldr	r3, [r7, #12]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	68db      	ldr	r3, [r3, #12]
 80093c4:	f003 0304 	and.w	r3, r3, #4
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d023      	beq.n	8009414 <UART_WaitOnFlagUntilTimeout+0x8a>
 80093cc:	68bb      	ldr	r3, [r7, #8]
 80093ce:	2b80      	cmp	r3, #128	@ 0x80
 80093d0:	d020      	beq.n	8009414 <UART_WaitOnFlagUntilTimeout+0x8a>
 80093d2:	68bb      	ldr	r3, [r7, #8]
 80093d4:	2b40      	cmp	r3, #64	@ 0x40
 80093d6:	d01d      	beq.n	8009414 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80093d8:	68fb      	ldr	r3, [r7, #12]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	f003 0308 	and.w	r3, r3, #8
 80093e2:	2b08      	cmp	r3, #8
 80093e4:	d116      	bne.n	8009414 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80093e6:	2300      	movs	r3, #0
 80093e8:	617b      	str	r3, [r7, #20]
 80093ea:	68fb      	ldr	r3, [r7, #12]
 80093ec:	681b      	ldr	r3, [r3, #0]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	617b      	str	r3, [r7, #20]
 80093f2:	68fb      	ldr	r3, [r7, #12]
 80093f4:	681b      	ldr	r3, [r3, #0]
 80093f6:	685b      	ldr	r3, [r3, #4]
 80093f8:	617b      	str	r3, [r7, #20]
 80093fa:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80093fc:	68f8      	ldr	r0, [r7, #12]
 80093fe:	f000 f81d 	bl	800943c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8009402:	68fb      	ldr	r3, [r7, #12]
 8009404:	2208      	movs	r2, #8
 8009406:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8009408:	68fb      	ldr	r3, [r7, #12]
 800940a:	2200      	movs	r2, #0
 800940c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8009410:	2301      	movs	r3, #1
 8009412:	e00f      	b.n	8009434 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009414:	68fb      	ldr	r3, [r7, #12]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	681a      	ldr	r2, [r3, #0]
 800941a:	68bb      	ldr	r3, [r7, #8]
 800941c:	4013      	ands	r3, r2
 800941e:	68ba      	ldr	r2, [r7, #8]
 8009420:	429a      	cmp	r2, r3
 8009422:	bf0c      	ite	eq
 8009424:	2301      	moveq	r3, #1
 8009426:	2300      	movne	r3, #0
 8009428:	b2db      	uxtb	r3, r3
 800942a:	461a      	mov	r2, r3
 800942c:	79fb      	ldrb	r3, [r7, #7]
 800942e:	429a      	cmp	r2, r3
 8009430:	d0b4      	beq.n	800939c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8009432:	2300      	movs	r3, #0
}
 8009434:	4618      	mov	r0, r3
 8009436:	3718      	adds	r7, #24
 8009438:	46bd      	mov	sp, r7
 800943a:	bd80      	pop	{r7, pc}

0800943c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800943c:	b480      	push	{r7}
 800943e:	b095      	sub	sp, #84	@ 0x54
 8009440:	af00      	add	r7, sp, #0
 8009442:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009444:	687b      	ldr	r3, [r7, #4]
 8009446:	681b      	ldr	r3, [r3, #0]
 8009448:	330c      	adds	r3, #12
 800944a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800944c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800944e:	e853 3f00 	ldrex	r3, [r3]
 8009452:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009454:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009456:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800945a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	681b      	ldr	r3, [r3, #0]
 8009460:	330c      	adds	r3, #12
 8009462:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8009464:	643a      	str	r2, [r7, #64]	@ 0x40
 8009466:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009468:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800946a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800946c:	e841 2300 	strex	r3, r2, [r1]
 8009470:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009472:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009474:	2b00      	cmp	r3, #0
 8009476:	d1e5      	bne.n	8009444 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009478:	687b      	ldr	r3, [r7, #4]
 800947a:	681b      	ldr	r3, [r3, #0]
 800947c:	3314      	adds	r3, #20
 800947e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009480:	6a3b      	ldr	r3, [r7, #32]
 8009482:	e853 3f00 	ldrex	r3, [r3]
 8009486:	61fb      	str	r3, [r7, #28]
   return(result);
 8009488:	69fb      	ldr	r3, [r7, #28]
 800948a:	f023 0301 	bic.w	r3, r3, #1
 800948e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8009490:	687b      	ldr	r3, [r7, #4]
 8009492:	681b      	ldr	r3, [r3, #0]
 8009494:	3314      	adds	r3, #20
 8009496:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8009498:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800949a:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800949c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800949e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80094a0:	e841 2300 	strex	r3, r2, [r1]
 80094a4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80094a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80094a8:	2b00      	cmp	r3, #0
 80094aa:	d1e5      	bne.n	8009478 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80094b0:	2b01      	cmp	r3, #1
 80094b2:	d119      	bne.n	80094e8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80094b4:	687b      	ldr	r3, [r7, #4]
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	330c      	adds	r3, #12
 80094ba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094bc:	68fb      	ldr	r3, [r7, #12]
 80094be:	e853 3f00 	ldrex	r3, [r3]
 80094c2:	60bb      	str	r3, [r7, #8]
   return(result);
 80094c4:	68bb      	ldr	r3, [r7, #8]
 80094c6:	f023 0310 	bic.w	r3, r3, #16
 80094ca:	647b      	str	r3, [r7, #68]	@ 0x44
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	330c      	adds	r3, #12
 80094d2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80094d4:	61ba      	str	r2, [r7, #24]
 80094d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094d8:	6979      	ldr	r1, [r7, #20]
 80094da:	69ba      	ldr	r2, [r7, #24]
 80094dc:	e841 2300 	strex	r3, r2, [r1]
 80094e0:	613b      	str	r3, [r7, #16]
   return(result);
 80094e2:	693b      	ldr	r3, [r7, #16]
 80094e4:	2b00      	cmp	r3, #0
 80094e6:	d1e5      	bne.n	80094b4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80094e8:	687b      	ldr	r3, [r7, #4]
 80094ea:	2220      	movs	r2, #32
 80094ec:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80094f0:	687b      	ldr	r3, [r7, #4]
 80094f2:	2200      	movs	r2, #0
 80094f4:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80094f6:	bf00      	nop
 80094f8:	3754      	adds	r7, #84	@ 0x54
 80094fa:	46bd      	mov	sp, r7
 80094fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009500:	4770      	bx	lr
	...

08009504 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009504:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009508:	b0c0      	sub	sp, #256	@ 0x100
 800950a:	af00      	add	r7, sp, #0
 800950c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009510:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009514:	681b      	ldr	r3, [r3, #0]
 8009516:	691b      	ldr	r3, [r3, #16]
 8009518:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 800951c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009520:	68d9      	ldr	r1, [r3, #12]
 8009522:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009526:	681a      	ldr	r2, [r3, #0]
 8009528:	ea40 0301 	orr.w	r3, r0, r1
 800952c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800952e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009532:	689a      	ldr	r2, [r3, #8]
 8009534:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009538:	691b      	ldr	r3, [r3, #16]
 800953a:	431a      	orrs	r2, r3
 800953c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009540:	695b      	ldr	r3, [r3, #20]
 8009542:	431a      	orrs	r2, r3
 8009544:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009548:	69db      	ldr	r3, [r3, #28]
 800954a:	4313      	orrs	r3, r2
 800954c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009550:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009554:	681b      	ldr	r3, [r3, #0]
 8009556:	68db      	ldr	r3, [r3, #12]
 8009558:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800955c:	f021 010c 	bic.w	r1, r1, #12
 8009560:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009564:	681a      	ldr	r2, [r3, #0]
 8009566:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800956a:	430b      	orrs	r3, r1
 800956c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800956e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009572:	681b      	ldr	r3, [r3, #0]
 8009574:	695b      	ldr	r3, [r3, #20]
 8009576:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800957a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800957e:	6999      	ldr	r1, [r3, #24]
 8009580:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009584:	681a      	ldr	r2, [r3, #0]
 8009586:	ea40 0301 	orr.w	r3, r0, r1
 800958a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800958c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009590:	681a      	ldr	r2, [r3, #0]
 8009592:	4b8f      	ldr	r3, [pc, #572]	@ (80097d0 <UART_SetConfig+0x2cc>)
 8009594:	429a      	cmp	r2, r3
 8009596:	d005      	beq.n	80095a4 <UART_SetConfig+0xa0>
 8009598:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800959c:	681a      	ldr	r2, [r3, #0]
 800959e:	4b8d      	ldr	r3, [pc, #564]	@ (80097d4 <UART_SetConfig+0x2d0>)
 80095a0:	429a      	cmp	r2, r3
 80095a2:	d104      	bne.n	80095ae <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80095a4:	f7fe ff40 	bl	8008428 <HAL_RCC_GetPCLK2Freq>
 80095a8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80095ac:	e003      	b.n	80095b6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80095ae:	f7fe ff27 	bl	8008400 <HAL_RCC_GetPCLK1Freq>
 80095b2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80095b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80095ba:	69db      	ldr	r3, [r3, #28]
 80095bc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80095c0:	f040 810c 	bne.w	80097dc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80095c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80095c8:	2200      	movs	r2, #0
 80095ca:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80095ce:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80095d2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80095d6:	4622      	mov	r2, r4
 80095d8:	462b      	mov	r3, r5
 80095da:	1891      	adds	r1, r2, r2
 80095dc:	65b9      	str	r1, [r7, #88]	@ 0x58
 80095de:	415b      	adcs	r3, r3
 80095e0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80095e2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80095e6:	4621      	mov	r1, r4
 80095e8:	eb12 0801 	adds.w	r8, r2, r1
 80095ec:	4629      	mov	r1, r5
 80095ee:	eb43 0901 	adc.w	r9, r3, r1
 80095f2:	f04f 0200 	mov.w	r2, #0
 80095f6:	f04f 0300 	mov.w	r3, #0
 80095fa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80095fe:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009602:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009606:	4690      	mov	r8, r2
 8009608:	4699      	mov	r9, r3
 800960a:	4623      	mov	r3, r4
 800960c:	eb18 0303 	adds.w	r3, r8, r3
 8009610:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8009614:	462b      	mov	r3, r5
 8009616:	eb49 0303 	adc.w	r3, r9, r3
 800961a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800961e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009622:	685b      	ldr	r3, [r3, #4]
 8009624:	2200      	movs	r2, #0
 8009626:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800962a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800962e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8009632:	460b      	mov	r3, r1
 8009634:	18db      	adds	r3, r3, r3
 8009636:	653b      	str	r3, [r7, #80]	@ 0x50
 8009638:	4613      	mov	r3, r2
 800963a:	eb42 0303 	adc.w	r3, r2, r3
 800963e:	657b      	str	r3, [r7, #84]	@ 0x54
 8009640:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8009644:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8009648:	f7f7 fb4e 	bl	8000ce8 <__aeabi_uldivmod>
 800964c:	4602      	mov	r2, r0
 800964e:	460b      	mov	r3, r1
 8009650:	4b61      	ldr	r3, [pc, #388]	@ (80097d8 <UART_SetConfig+0x2d4>)
 8009652:	fba3 2302 	umull	r2, r3, r3, r2
 8009656:	095b      	lsrs	r3, r3, #5
 8009658:	011c      	lsls	r4, r3, #4
 800965a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800965e:	2200      	movs	r2, #0
 8009660:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8009664:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8009668:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 800966c:	4642      	mov	r2, r8
 800966e:	464b      	mov	r3, r9
 8009670:	1891      	adds	r1, r2, r2
 8009672:	64b9      	str	r1, [r7, #72]	@ 0x48
 8009674:	415b      	adcs	r3, r3
 8009676:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8009678:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800967c:	4641      	mov	r1, r8
 800967e:	eb12 0a01 	adds.w	sl, r2, r1
 8009682:	4649      	mov	r1, r9
 8009684:	eb43 0b01 	adc.w	fp, r3, r1
 8009688:	f04f 0200 	mov.w	r2, #0
 800968c:	f04f 0300 	mov.w	r3, #0
 8009690:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009694:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009698:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800969c:	4692      	mov	sl, r2
 800969e:	469b      	mov	fp, r3
 80096a0:	4643      	mov	r3, r8
 80096a2:	eb1a 0303 	adds.w	r3, sl, r3
 80096a6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80096aa:	464b      	mov	r3, r9
 80096ac:	eb4b 0303 	adc.w	r3, fp, r3
 80096b0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80096b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80096b8:	685b      	ldr	r3, [r3, #4]
 80096ba:	2200      	movs	r2, #0
 80096bc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80096c0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80096c4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80096c8:	460b      	mov	r3, r1
 80096ca:	18db      	adds	r3, r3, r3
 80096cc:	643b      	str	r3, [r7, #64]	@ 0x40
 80096ce:	4613      	mov	r3, r2
 80096d0:	eb42 0303 	adc.w	r3, r2, r3
 80096d4:	647b      	str	r3, [r7, #68]	@ 0x44
 80096d6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80096da:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80096de:	f7f7 fb03 	bl	8000ce8 <__aeabi_uldivmod>
 80096e2:	4602      	mov	r2, r0
 80096e4:	460b      	mov	r3, r1
 80096e6:	4611      	mov	r1, r2
 80096e8:	4b3b      	ldr	r3, [pc, #236]	@ (80097d8 <UART_SetConfig+0x2d4>)
 80096ea:	fba3 2301 	umull	r2, r3, r3, r1
 80096ee:	095b      	lsrs	r3, r3, #5
 80096f0:	2264      	movs	r2, #100	@ 0x64
 80096f2:	fb02 f303 	mul.w	r3, r2, r3
 80096f6:	1acb      	subs	r3, r1, r3
 80096f8:	00db      	lsls	r3, r3, #3
 80096fa:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80096fe:	4b36      	ldr	r3, [pc, #216]	@ (80097d8 <UART_SetConfig+0x2d4>)
 8009700:	fba3 2302 	umull	r2, r3, r3, r2
 8009704:	095b      	lsrs	r3, r3, #5
 8009706:	005b      	lsls	r3, r3, #1
 8009708:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800970c:	441c      	add	r4, r3
 800970e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009712:	2200      	movs	r2, #0
 8009714:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8009718:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 800971c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8009720:	4642      	mov	r2, r8
 8009722:	464b      	mov	r3, r9
 8009724:	1891      	adds	r1, r2, r2
 8009726:	63b9      	str	r1, [r7, #56]	@ 0x38
 8009728:	415b      	adcs	r3, r3
 800972a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800972c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8009730:	4641      	mov	r1, r8
 8009732:	1851      	adds	r1, r2, r1
 8009734:	6339      	str	r1, [r7, #48]	@ 0x30
 8009736:	4649      	mov	r1, r9
 8009738:	414b      	adcs	r3, r1
 800973a:	637b      	str	r3, [r7, #52]	@ 0x34
 800973c:	f04f 0200 	mov.w	r2, #0
 8009740:	f04f 0300 	mov.w	r3, #0
 8009744:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8009748:	4659      	mov	r1, fp
 800974a:	00cb      	lsls	r3, r1, #3
 800974c:	4651      	mov	r1, sl
 800974e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009752:	4651      	mov	r1, sl
 8009754:	00ca      	lsls	r2, r1, #3
 8009756:	4610      	mov	r0, r2
 8009758:	4619      	mov	r1, r3
 800975a:	4603      	mov	r3, r0
 800975c:	4642      	mov	r2, r8
 800975e:	189b      	adds	r3, r3, r2
 8009760:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8009764:	464b      	mov	r3, r9
 8009766:	460a      	mov	r2, r1
 8009768:	eb42 0303 	adc.w	r3, r2, r3
 800976c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8009770:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009774:	685b      	ldr	r3, [r3, #4]
 8009776:	2200      	movs	r2, #0
 8009778:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800977c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8009780:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8009784:	460b      	mov	r3, r1
 8009786:	18db      	adds	r3, r3, r3
 8009788:	62bb      	str	r3, [r7, #40]	@ 0x28
 800978a:	4613      	mov	r3, r2
 800978c:	eb42 0303 	adc.w	r3, r2, r3
 8009790:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8009792:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8009796:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800979a:	f7f7 faa5 	bl	8000ce8 <__aeabi_uldivmod>
 800979e:	4602      	mov	r2, r0
 80097a0:	460b      	mov	r3, r1
 80097a2:	4b0d      	ldr	r3, [pc, #52]	@ (80097d8 <UART_SetConfig+0x2d4>)
 80097a4:	fba3 1302 	umull	r1, r3, r3, r2
 80097a8:	095b      	lsrs	r3, r3, #5
 80097aa:	2164      	movs	r1, #100	@ 0x64
 80097ac:	fb01 f303 	mul.w	r3, r1, r3
 80097b0:	1ad3      	subs	r3, r2, r3
 80097b2:	00db      	lsls	r3, r3, #3
 80097b4:	3332      	adds	r3, #50	@ 0x32
 80097b6:	4a08      	ldr	r2, [pc, #32]	@ (80097d8 <UART_SetConfig+0x2d4>)
 80097b8:	fba2 2303 	umull	r2, r3, r2, r3
 80097bc:	095b      	lsrs	r3, r3, #5
 80097be:	f003 0207 	and.w	r2, r3, #7
 80097c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80097c6:	681b      	ldr	r3, [r3, #0]
 80097c8:	4422      	add	r2, r4
 80097ca:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80097cc:	e106      	b.n	80099dc <UART_SetConfig+0x4d8>
 80097ce:	bf00      	nop
 80097d0:	40011000 	.word	0x40011000
 80097d4:	40011400 	.word	0x40011400
 80097d8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80097dc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80097e0:	2200      	movs	r2, #0
 80097e2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80097e6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80097ea:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80097ee:	4642      	mov	r2, r8
 80097f0:	464b      	mov	r3, r9
 80097f2:	1891      	adds	r1, r2, r2
 80097f4:	6239      	str	r1, [r7, #32]
 80097f6:	415b      	adcs	r3, r3
 80097f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80097fa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80097fe:	4641      	mov	r1, r8
 8009800:	1854      	adds	r4, r2, r1
 8009802:	4649      	mov	r1, r9
 8009804:	eb43 0501 	adc.w	r5, r3, r1
 8009808:	f04f 0200 	mov.w	r2, #0
 800980c:	f04f 0300 	mov.w	r3, #0
 8009810:	00eb      	lsls	r3, r5, #3
 8009812:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009816:	00e2      	lsls	r2, r4, #3
 8009818:	4614      	mov	r4, r2
 800981a:	461d      	mov	r5, r3
 800981c:	4643      	mov	r3, r8
 800981e:	18e3      	adds	r3, r4, r3
 8009820:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009824:	464b      	mov	r3, r9
 8009826:	eb45 0303 	adc.w	r3, r5, r3
 800982a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800982e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009832:	685b      	ldr	r3, [r3, #4]
 8009834:	2200      	movs	r2, #0
 8009836:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800983a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800983e:	f04f 0200 	mov.w	r2, #0
 8009842:	f04f 0300 	mov.w	r3, #0
 8009846:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800984a:	4629      	mov	r1, r5
 800984c:	008b      	lsls	r3, r1, #2
 800984e:	4621      	mov	r1, r4
 8009850:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009854:	4621      	mov	r1, r4
 8009856:	008a      	lsls	r2, r1, #2
 8009858:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800985c:	f7f7 fa44 	bl	8000ce8 <__aeabi_uldivmod>
 8009860:	4602      	mov	r2, r0
 8009862:	460b      	mov	r3, r1
 8009864:	4b60      	ldr	r3, [pc, #384]	@ (80099e8 <UART_SetConfig+0x4e4>)
 8009866:	fba3 2302 	umull	r2, r3, r3, r2
 800986a:	095b      	lsrs	r3, r3, #5
 800986c:	011c      	lsls	r4, r3, #4
 800986e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8009872:	2200      	movs	r2, #0
 8009874:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009878:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800987c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8009880:	4642      	mov	r2, r8
 8009882:	464b      	mov	r3, r9
 8009884:	1891      	adds	r1, r2, r2
 8009886:	61b9      	str	r1, [r7, #24]
 8009888:	415b      	adcs	r3, r3
 800988a:	61fb      	str	r3, [r7, #28]
 800988c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009890:	4641      	mov	r1, r8
 8009892:	1851      	adds	r1, r2, r1
 8009894:	6139      	str	r1, [r7, #16]
 8009896:	4649      	mov	r1, r9
 8009898:	414b      	adcs	r3, r1
 800989a:	617b      	str	r3, [r7, #20]
 800989c:	f04f 0200 	mov.w	r2, #0
 80098a0:	f04f 0300 	mov.w	r3, #0
 80098a4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80098a8:	4659      	mov	r1, fp
 80098aa:	00cb      	lsls	r3, r1, #3
 80098ac:	4651      	mov	r1, sl
 80098ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80098b2:	4651      	mov	r1, sl
 80098b4:	00ca      	lsls	r2, r1, #3
 80098b6:	4610      	mov	r0, r2
 80098b8:	4619      	mov	r1, r3
 80098ba:	4603      	mov	r3, r0
 80098bc:	4642      	mov	r2, r8
 80098be:	189b      	adds	r3, r3, r2
 80098c0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80098c4:	464b      	mov	r3, r9
 80098c6:	460a      	mov	r2, r1
 80098c8:	eb42 0303 	adc.w	r3, r2, r3
 80098cc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80098d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80098d4:	685b      	ldr	r3, [r3, #4]
 80098d6:	2200      	movs	r2, #0
 80098d8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80098da:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80098dc:	f04f 0200 	mov.w	r2, #0
 80098e0:	f04f 0300 	mov.w	r3, #0
 80098e4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80098e8:	4649      	mov	r1, r9
 80098ea:	008b      	lsls	r3, r1, #2
 80098ec:	4641      	mov	r1, r8
 80098ee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80098f2:	4641      	mov	r1, r8
 80098f4:	008a      	lsls	r2, r1, #2
 80098f6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80098fa:	f7f7 f9f5 	bl	8000ce8 <__aeabi_uldivmod>
 80098fe:	4602      	mov	r2, r0
 8009900:	460b      	mov	r3, r1
 8009902:	4611      	mov	r1, r2
 8009904:	4b38      	ldr	r3, [pc, #224]	@ (80099e8 <UART_SetConfig+0x4e4>)
 8009906:	fba3 2301 	umull	r2, r3, r3, r1
 800990a:	095b      	lsrs	r3, r3, #5
 800990c:	2264      	movs	r2, #100	@ 0x64
 800990e:	fb02 f303 	mul.w	r3, r2, r3
 8009912:	1acb      	subs	r3, r1, r3
 8009914:	011b      	lsls	r3, r3, #4
 8009916:	3332      	adds	r3, #50	@ 0x32
 8009918:	4a33      	ldr	r2, [pc, #204]	@ (80099e8 <UART_SetConfig+0x4e4>)
 800991a:	fba2 2303 	umull	r2, r3, r2, r3
 800991e:	095b      	lsrs	r3, r3, #5
 8009920:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8009924:	441c      	add	r4, r3
 8009926:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800992a:	2200      	movs	r2, #0
 800992c:	673b      	str	r3, [r7, #112]	@ 0x70
 800992e:	677a      	str	r2, [r7, #116]	@ 0x74
 8009930:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8009934:	4642      	mov	r2, r8
 8009936:	464b      	mov	r3, r9
 8009938:	1891      	adds	r1, r2, r2
 800993a:	60b9      	str	r1, [r7, #8]
 800993c:	415b      	adcs	r3, r3
 800993e:	60fb      	str	r3, [r7, #12]
 8009940:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009944:	4641      	mov	r1, r8
 8009946:	1851      	adds	r1, r2, r1
 8009948:	6039      	str	r1, [r7, #0]
 800994a:	4649      	mov	r1, r9
 800994c:	414b      	adcs	r3, r1
 800994e:	607b      	str	r3, [r7, #4]
 8009950:	f04f 0200 	mov.w	r2, #0
 8009954:	f04f 0300 	mov.w	r3, #0
 8009958:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800995c:	4659      	mov	r1, fp
 800995e:	00cb      	lsls	r3, r1, #3
 8009960:	4651      	mov	r1, sl
 8009962:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009966:	4651      	mov	r1, sl
 8009968:	00ca      	lsls	r2, r1, #3
 800996a:	4610      	mov	r0, r2
 800996c:	4619      	mov	r1, r3
 800996e:	4603      	mov	r3, r0
 8009970:	4642      	mov	r2, r8
 8009972:	189b      	adds	r3, r3, r2
 8009974:	66bb      	str	r3, [r7, #104]	@ 0x68
 8009976:	464b      	mov	r3, r9
 8009978:	460a      	mov	r2, r1
 800997a:	eb42 0303 	adc.w	r3, r2, r3
 800997e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8009980:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8009984:	685b      	ldr	r3, [r3, #4]
 8009986:	2200      	movs	r2, #0
 8009988:	663b      	str	r3, [r7, #96]	@ 0x60
 800998a:	667a      	str	r2, [r7, #100]	@ 0x64
 800998c:	f04f 0200 	mov.w	r2, #0
 8009990:	f04f 0300 	mov.w	r3, #0
 8009994:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8009998:	4649      	mov	r1, r9
 800999a:	008b      	lsls	r3, r1, #2
 800999c:	4641      	mov	r1, r8
 800999e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80099a2:	4641      	mov	r1, r8
 80099a4:	008a      	lsls	r2, r1, #2
 80099a6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80099aa:	f7f7 f99d 	bl	8000ce8 <__aeabi_uldivmod>
 80099ae:	4602      	mov	r2, r0
 80099b0:	460b      	mov	r3, r1
 80099b2:	4b0d      	ldr	r3, [pc, #52]	@ (80099e8 <UART_SetConfig+0x4e4>)
 80099b4:	fba3 1302 	umull	r1, r3, r3, r2
 80099b8:	095b      	lsrs	r3, r3, #5
 80099ba:	2164      	movs	r1, #100	@ 0x64
 80099bc:	fb01 f303 	mul.w	r3, r1, r3
 80099c0:	1ad3      	subs	r3, r2, r3
 80099c2:	011b      	lsls	r3, r3, #4
 80099c4:	3332      	adds	r3, #50	@ 0x32
 80099c6:	4a08      	ldr	r2, [pc, #32]	@ (80099e8 <UART_SetConfig+0x4e4>)
 80099c8:	fba2 2303 	umull	r2, r3, r2, r3
 80099cc:	095b      	lsrs	r3, r3, #5
 80099ce:	f003 020f 	and.w	r2, r3, #15
 80099d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80099d6:	681b      	ldr	r3, [r3, #0]
 80099d8:	4422      	add	r2, r4
 80099da:	609a      	str	r2, [r3, #8]
}
 80099dc:	bf00      	nop
 80099de:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80099e2:	46bd      	mov	sp, r7
 80099e4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80099e8:	51eb851f 	.word	0x51eb851f

080099ec <__NVIC_SetPriority>:
{
 80099ec:	b480      	push	{r7}
 80099ee:	b083      	sub	sp, #12
 80099f0:	af00      	add	r7, sp, #0
 80099f2:	4603      	mov	r3, r0
 80099f4:	6039      	str	r1, [r7, #0]
 80099f6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80099f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	db0a      	blt.n	8009a16 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009a00:	683b      	ldr	r3, [r7, #0]
 8009a02:	b2da      	uxtb	r2, r3
 8009a04:	490c      	ldr	r1, [pc, #48]	@ (8009a38 <__NVIC_SetPriority+0x4c>)
 8009a06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009a0a:	0112      	lsls	r2, r2, #4
 8009a0c:	b2d2      	uxtb	r2, r2
 8009a0e:	440b      	add	r3, r1
 8009a10:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8009a14:	e00a      	b.n	8009a2c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8009a16:	683b      	ldr	r3, [r7, #0]
 8009a18:	b2da      	uxtb	r2, r3
 8009a1a:	4908      	ldr	r1, [pc, #32]	@ (8009a3c <__NVIC_SetPriority+0x50>)
 8009a1c:	79fb      	ldrb	r3, [r7, #7]
 8009a1e:	f003 030f 	and.w	r3, r3, #15
 8009a22:	3b04      	subs	r3, #4
 8009a24:	0112      	lsls	r2, r2, #4
 8009a26:	b2d2      	uxtb	r2, r2
 8009a28:	440b      	add	r3, r1
 8009a2a:	761a      	strb	r2, [r3, #24]
}
 8009a2c:	bf00      	nop
 8009a2e:	370c      	adds	r7, #12
 8009a30:	46bd      	mov	sp, r7
 8009a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a36:	4770      	bx	lr
 8009a38:	e000e100 	.word	0xe000e100
 8009a3c:	e000ed00 	.word	0xe000ed00

08009a40 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8009a40:	b580      	push	{r7, lr}
 8009a42:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8009a44:	4b05      	ldr	r3, [pc, #20]	@ (8009a5c <SysTick_Handler+0x1c>)
 8009a46:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8009a48:	f002 f80c 	bl	800ba64 <xTaskGetSchedulerState>
 8009a4c:	4603      	mov	r3, r0
 8009a4e:	2b01      	cmp	r3, #1
 8009a50:	d001      	beq.n	8009a56 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8009a52:	f002 ff01 	bl	800c858 <xPortSysTickHandler>
  }
}
 8009a56:	bf00      	nop
 8009a58:	bd80      	pop	{r7, pc}
 8009a5a:	bf00      	nop
 8009a5c:	e000e010 	.word	0xe000e010

08009a60 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8009a60:	b580      	push	{r7, lr}
 8009a62:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8009a64:	2100      	movs	r1, #0
 8009a66:	f06f 0004 	mvn.w	r0, #4
 8009a6a:	f7ff ffbf 	bl	80099ec <__NVIC_SetPriority>
#endif
}
 8009a6e:	bf00      	nop
 8009a70:	bd80      	pop	{r7, pc}
	...

08009a74 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8009a74:	b480      	push	{r7}
 8009a76:	b083      	sub	sp, #12
 8009a78:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009a7a:	f3ef 8305 	mrs	r3, IPSR
 8009a7e:	603b      	str	r3, [r7, #0]
  return(result);
 8009a80:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d003      	beq.n	8009a8e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8009a86:	f06f 0305 	mvn.w	r3, #5
 8009a8a:	607b      	str	r3, [r7, #4]
 8009a8c:	e00c      	b.n	8009aa8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8009a8e:	4b0a      	ldr	r3, [pc, #40]	@ (8009ab8 <osKernelInitialize+0x44>)
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	2b00      	cmp	r3, #0
 8009a94:	d105      	bne.n	8009aa2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8009a96:	4b08      	ldr	r3, [pc, #32]	@ (8009ab8 <osKernelInitialize+0x44>)
 8009a98:	2201      	movs	r2, #1
 8009a9a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8009a9c:	2300      	movs	r3, #0
 8009a9e:	607b      	str	r3, [r7, #4]
 8009aa0:	e002      	b.n	8009aa8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8009aa2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009aa6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009aa8:	687b      	ldr	r3, [r7, #4]
}
 8009aaa:	4618      	mov	r0, r3
 8009aac:	370c      	adds	r7, #12
 8009aae:	46bd      	mov	sp, r7
 8009ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ab4:	4770      	bx	lr
 8009ab6:	bf00      	nop
 8009ab8:	20000698 	.word	0x20000698

08009abc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8009abc:	b580      	push	{r7, lr}
 8009abe:	b082      	sub	sp, #8
 8009ac0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009ac2:	f3ef 8305 	mrs	r3, IPSR
 8009ac6:	603b      	str	r3, [r7, #0]
  return(result);
 8009ac8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d003      	beq.n	8009ad6 <osKernelStart+0x1a>
    stat = osErrorISR;
 8009ace:	f06f 0305 	mvn.w	r3, #5
 8009ad2:	607b      	str	r3, [r7, #4]
 8009ad4:	e010      	b.n	8009af8 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8009ad6:	4b0b      	ldr	r3, [pc, #44]	@ (8009b04 <osKernelStart+0x48>)
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	2b01      	cmp	r3, #1
 8009adc:	d109      	bne.n	8009af2 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8009ade:	f7ff ffbf 	bl	8009a60 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8009ae2:	4b08      	ldr	r3, [pc, #32]	@ (8009b04 <osKernelStart+0x48>)
 8009ae4:	2202      	movs	r2, #2
 8009ae6:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8009ae8:	f001 fb58 	bl	800b19c <vTaskStartScheduler>
      stat = osOK;
 8009aec:	2300      	movs	r3, #0
 8009aee:	607b      	str	r3, [r7, #4]
 8009af0:	e002      	b.n	8009af8 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8009af2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009af6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8009af8:	687b      	ldr	r3, [r7, #4]
}
 8009afa:	4618      	mov	r0, r3
 8009afc:	3708      	adds	r7, #8
 8009afe:	46bd      	mov	sp, r7
 8009b00:	bd80      	pop	{r7, pc}
 8009b02:	bf00      	nop
 8009b04:	20000698 	.word	0x20000698

08009b08 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8009b08:	b580      	push	{r7, lr}
 8009b0a:	b08e      	sub	sp, #56	@ 0x38
 8009b0c:	af04      	add	r7, sp, #16
 8009b0e:	60f8      	str	r0, [r7, #12]
 8009b10:	60b9      	str	r1, [r7, #8]
 8009b12:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8009b14:	2300      	movs	r3, #0
 8009b16:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009b18:	f3ef 8305 	mrs	r3, IPSR
 8009b1c:	617b      	str	r3, [r7, #20]
  return(result);
 8009b1e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8009b20:	2b00      	cmp	r3, #0
 8009b22:	d17e      	bne.n	8009c22 <osThreadNew+0x11a>
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	2b00      	cmp	r3, #0
 8009b28:	d07b      	beq.n	8009c22 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8009b2a:	2380      	movs	r3, #128	@ 0x80
 8009b2c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8009b2e:	2318      	movs	r3, #24
 8009b30:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8009b32:	2300      	movs	r3, #0
 8009b34:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8009b36:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009b3a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8009b3c:	687b      	ldr	r3, [r7, #4]
 8009b3e:	2b00      	cmp	r3, #0
 8009b40:	d045      	beq.n	8009bce <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	2b00      	cmp	r3, #0
 8009b48:	d002      	beq.n	8009b50 <osThreadNew+0x48>
        name = attr->name;
 8009b4a:	687b      	ldr	r3, [r7, #4]
 8009b4c:	681b      	ldr	r3, [r3, #0]
 8009b4e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	699b      	ldr	r3, [r3, #24]
 8009b54:	2b00      	cmp	r3, #0
 8009b56:	d002      	beq.n	8009b5e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	699b      	ldr	r3, [r3, #24]
 8009b5c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8009b5e:	69fb      	ldr	r3, [r7, #28]
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d008      	beq.n	8009b76 <osThreadNew+0x6e>
 8009b64:	69fb      	ldr	r3, [r7, #28]
 8009b66:	2b38      	cmp	r3, #56	@ 0x38
 8009b68:	d805      	bhi.n	8009b76 <osThreadNew+0x6e>
 8009b6a:	687b      	ldr	r3, [r7, #4]
 8009b6c:	685b      	ldr	r3, [r3, #4]
 8009b6e:	f003 0301 	and.w	r3, r3, #1
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d001      	beq.n	8009b7a <osThreadNew+0x72>
        return (NULL);
 8009b76:	2300      	movs	r3, #0
 8009b78:	e054      	b.n	8009c24 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	695b      	ldr	r3, [r3, #20]
 8009b7e:	2b00      	cmp	r3, #0
 8009b80:	d003      	beq.n	8009b8a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8009b82:	687b      	ldr	r3, [r7, #4]
 8009b84:	695b      	ldr	r3, [r3, #20]
 8009b86:	089b      	lsrs	r3, r3, #2
 8009b88:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009b8a:	687b      	ldr	r3, [r7, #4]
 8009b8c:	689b      	ldr	r3, [r3, #8]
 8009b8e:	2b00      	cmp	r3, #0
 8009b90:	d00e      	beq.n	8009bb0 <osThreadNew+0xa8>
 8009b92:	687b      	ldr	r3, [r7, #4]
 8009b94:	68db      	ldr	r3, [r3, #12]
 8009b96:	2ba7      	cmp	r3, #167	@ 0xa7
 8009b98:	d90a      	bls.n	8009bb0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009b9a:	687b      	ldr	r3, [r7, #4]
 8009b9c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8009b9e:	2b00      	cmp	r3, #0
 8009ba0:	d006      	beq.n	8009bb0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	695b      	ldr	r3, [r3, #20]
 8009ba6:	2b00      	cmp	r3, #0
 8009ba8:	d002      	beq.n	8009bb0 <osThreadNew+0xa8>
        mem = 1;
 8009baa:	2301      	movs	r3, #1
 8009bac:	61bb      	str	r3, [r7, #24]
 8009bae:	e010      	b.n	8009bd2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8009bb0:	687b      	ldr	r3, [r7, #4]
 8009bb2:	689b      	ldr	r3, [r3, #8]
 8009bb4:	2b00      	cmp	r3, #0
 8009bb6:	d10c      	bne.n	8009bd2 <osThreadNew+0xca>
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	68db      	ldr	r3, [r3, #12]
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d108      	bne.n	8009bd2 <osThreadNew+0xca>
 8009bc0:	687b      	ldr	r3, [r7, #4]
 8009bc2:	691b      	ldr	r3, [r3, #16]
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d104      	bne.n	8009bd2 <osThreadNew+0xca>
          mem = 0;
 8009bc8:	2300      	movs	r3, #0
 8009bca:	61bb      	str	r3, [r7, #24]
 8009bcc:	e001      	b.n	8009bd2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8009bce:	2300      	movs	r3, #0
 8009bd0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8009bd2:	69bb      	ldr	r3, [r7, #24]
 8009bd4:	2b01      	cmp	r3, #1
 8009bd6:	d110      	bne.n	8009bfa <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8009bdc:	687a      	ldr	r2, [r7, #4]
 8009bde:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8009be0:	9202      	str	r2, [sp, #8]
 8009be2:	9301      	str	r3, [sp, #4]
 8009be4:	69fb      	ldr	r3, [r7, #28]
 8009be6:	9300      	str	r3, [sp, #0]
 8009be8:	68bb      	ldr	r3, [r7, #8]
 8009bea:	6a3a      	ldr	r2, [r7, #32]
 8009bec:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009bee:	68f8      	ldr	r0, [r7, #12]
 8009bf0:	f001 f8e0 	bl	800adb4 <xTaskCreateStatic>
 8009bf4:	4603      	mov	r3, r0
 8009bf6:	613b      	str	r3, [r7, #16]
 8009bf8:	e013      	b.n	8009c22 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8009bfa:	69bb      	ldr	r3, [r7, #24]
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d110      	bne.n	8009c22 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8009c00:	6a3b      	ldr	r3, [r7, #32]
 8009c02:	b29a      	uxth	r2, r3
 8009c04:	f107 0310 	add.w	r3, r7, #16
 8009c08:	9301      	str	r3, [sp, #4]
 8009c0a:	69fb      	ldr	r3, [r7, #28]
 8009c0c:	9300      	str	r3, [sp, #0]
 8009c0e:	68bb      	ldr	r3, [r7, #8]
 8009c10:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8009c12:	68f8      	ldr	r0, [r7, #12]
 8009c14:	f001 f92e 	bl	800ae74 <xTaskCreate>
 8009c18:	4603      	mov	r3, r0
 8009c1a:	2b01      	cmp	r3, #1
 8009c1c:	d001      	beq.n	8009c22 <osThreadNew+0x11a>
            hTask = NULL;
 8009c1e:	2300      	movs	r3, #0
 8009c20:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8009c22:	693b      	ldr	r3, [r7, #16]
}
 8009c24:	4618      	mov	r0, r3
 8009c26:	3728      	adds	r7, #40	@ 0x28
 8009c28:	46bd      	mov	sp, r7
 8009c2a:	bd80      	pop	{r7, pc}

08009c2c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8009c2c:	b580      	push	{r7, lr}
 8009c2e:	b084      	sub	sp, #16
 8009c30:	af00      	add	r7, sp, #0
 8009c32:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009c34:	f3ef 8305 	mrs	r3, IPSR
 8009c38:	60bb      	str	r3, [r7, #8]
  return(result);
 8009c3a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8009c3c:	2b00      	cmp	r3, #0
 8009c3e:	d003      	beq.n	8009c48 <osDelay+0x1c>
    stat = osErrorISR;
 8009c40:	f06f 0305 	mvn.w	r3, #5
 8009c44:	60fb      	str	r3, [r7, #12]
 8009c46:	e007      	b.n	8009c58 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8009c48:	2300      	movs	r3, #0
 8009c4a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d002      	beq.n	8009c58 <osDelay+0x2c>
      vTaskDelay(ticks);
 8009c52:	6878      	ldr	r0, [r7, #4]
 8009c54:	f001 fa6c 	bl	800b130 <vTaskDelay>
    }
  }

  return (stat);
 8009c58:	68fb      	ldr	r3, [r7, #12]
}
 8009c5a:	4618      	mov	r0, r3
 8009c5c:	3710      	adds	r7, #16
 8009c5e:	46bd      	mov	sp, r7
 8009c60:	bd80      	pop	{r7, pc}

08009c62 <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8009c62:	b580      	push	{r7, lr}
 8009c64:	b088      	sub	sp, #32
 8009c66:	af00      	add	r7, sp, #0
 8009c68:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8009c6a:	2300      	movs	r3, #0
 8009c6c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8009c6e:	f3ef 8305 	mrs	r3, IPSR
 8009c72:	60bb      	str	r3, [r7, #8]
  return(result);
 8009c74:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d174      	bne.n	8009d64 <osMutexNew+0x102>
    if (attr != NULL) {
 8009c7a:	687b      	ldr	r3, [r7, #4]
 8009c7c:	2b00      	cmp	r3, #0
 8009c7e:	d003      	beq.n	8009c88 <osMutexNew+0x26>
      type = attr->attr_bits;
 8009c80:	687b      	ldr	r3, [r7, #4]
 8009c82:	685b      	ldr	r3, [r3, #4]
 8009c84:	61bb      	str	r3, [r7, #24]
 8009c86:	e001      	b.n	8009c8c <osMutexNew+0x2a>
    } else {
      type = 0U;
 8009c88:	2300      	movs	r3, #0
 8009c8a:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8009c8c:	69bb      	ldr	r3, [r7, #24]
 8009c8e:	f003 0301 	and.w	r3, r3, #1
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d002      	beq.n	8009c9c <osMutexNew+0x3a>
      rmtx = 1U;
 8009c96:	2301      	movs	r3, #1
 8009c98:	617b      	str	r3, [r7, #20]
 8009c9a:	e001      	b.n	8009ca0 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8009c9c:	2300      	movs	r3, #0
 8009c9e:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8009ca0:	69bb      	ldr	r3, [r7, #24]
 8009ca2:	f003 0308 	and.w	r3, r3, #8
 8009ca6:	2b00      	cmp	r3, #0
 8009ca8:	d15c      	bne.n	8009d64 <osMutexNew+0x102>
      mem = -1;
 8009caa:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8009cae:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d015      	beq.n	8009ce2 <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8009cb6:	687b      	ldr	r3, [r7, #4]
 8009cb8:	689b      	ldr	r3, [r3, #8]
 8009cba:	2b00      	cmp	r3, #0
 8009cbc:	d006      	beq.n	8009ccc <osMutexNew+0x6a>
 8009cbe:	687b      	ldr	r3, [r7, #4]
 8009cc0:	68db      	ldr	r3, [r3, #12]
 8009cc2:	2b4f      	cmp	r3, #79	@ 0x4f
 8009cc4:	d902      	bls.n	8009ccc <osMutexNew+0x6a>
          mem = 1;
 8009cc6:	2301      	movs	r3, #1
 8009cc8:	613b      	str	r3, [r7, #16]
 8009cca:	e00c      	b.n	8009ce6 <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	689b      	ldr	r3, [r3, #8]
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d108      	bne.n	8009ce6 <osMutexNew+0x84>
 8009cd4:	687b      	ldr	r3, [r7, #4]
 8009cd6:	68db      	ldr	r3, [r3, #12]
 8009cd8:	2b00      	cmp	r3, #0
 8009cda:	d104      	bne.n	8009ce6 <osMutexNew+0x84>
            mem = 0;
 8009cdc:	2300      	movs	r3, #0
 8009cde:	613b      	str	r3, [r7, #16]
 8009ce0:	e001      	b.n	8009ce6 <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8009ce2:	2300      	movs	r3, #0
 8009ce4:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8009ce6:	693b      	ldr	r3, [r7, #16]
 8009ce8:	2b01      	cmp	r3, #1
 8009cea:	d112      	bne.n	8009d12 <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8009cec:	697b      	ldr	r3, [r7, #20]
 8009cee:	2b00      	cmp	r3, #0
 8009cf0:	d007      	beq.n	8009d02 <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8009cf2:	687b      	ldr	r3, [r7, #4]
 8009cf4:	689b      	ldr	r3, [r3, #8]
 8009cf6:	4619      	mov	r1, r3
 8009cf8:	2004      	movs	r0, #4
 8009cfa:	f000 fa98 	bl	800a22e <xQueueCreateMutexStatic>
 8009cfe:	61f8      	str	r0, [r7, #28]
 8009d00:	e016      	b.n	8009d30 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8009d02:	687b      	ldr	r3, [r7, #4]
 8009d04:	689b      	ldr	r3, [r3, #8]
 8009d06:	4619      	mov	r1, r3
 8009d08:	2001      	movs	r0, #1
 8009d0a:	f000 fa90 	bl	800a22e <xQueueCreateMutexStatic>
 8009d0e:	61f8      	str	r0, [r7, #28]
 8009d10:	e00e      	b.n	8009d30 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8009d12:	693b      	ldr	r3, [r7, #16]
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d10b      	bne.n	8009d30 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8009d18:	697b      	ldr	r3, [r7, #20]
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d004      	beq.n	8009d28 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8009d1e:	2004      	movs	r0, #4
 8009d20:	f000 fa6d 	bl	800a1fe <xQueueCreateMutex>
 8009d24:	61f8      	str	r0, [r7, #28]
 8009d26:	e003      	b.n	8009d30 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8009d28:	2001      	movs	r0, #1
 8009d2a:	f000 fa68 	bl	800a1fe <xQueueCreateMutex>
 8009d2e:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8009d30:	69fb      	ldr	r3, [r7, #28]
 8009d32:	2b00      	cmp	r3, #0
 8009d34:	d00c      	beq.n	8009d50 <osMutexNew+0xee>
        if (attr != NULL) {
 8009d36:	687b      	ldr	r3, [r7, #4]
 8009d38:	2b00      	cmp	r3, #0
 8009d3a:	d003      	beq.n	8009d44 <osMutexNew+0xe2>
          name = attr->name;
 8009d3c:	687b      	ldr	r3, [r7, #4]
 8009d3e:	681b      	ldr	r3, [r3, #0]
 8009d40:	60fb      	str	r3, [r7, #12]
 8009d42:	e001      	b.n	8009d48 <osMutexNew+0xe6>
        } else {
          name = NULL;
 8009d44:	2300      	movs	r3, #0
 8009d46:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8009d48:	68f9      	ldr	r1, [r7, #12]
 8009d4a:	69f8      	ldr	r0, [r7, #28]
 8009d4c:	f000 ffd4 	bl	800acf8 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8009d50:	69fb      	ldr	r3, [r7, #28]
 8009d52:	2b00      	cmp	r3, #0
 8009d54:	d006      	beq.n	8009d64 <osMutexNew+0x102>
 8009d56:	697b      	ldr	r3, [r7, #20]
 8009d58:	2b00      	cmp	r3, #0
 8009d5a:	d003      	beq.n	8009d64 <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8009d5c:	69fb      	ldr	r3, [r7, #28]
 8009d5e:	f043 0301 	orr.w	r3, r3, #1
 8009d62:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8009d64:	69fb      	ldr	r3, [r7, #28]
}
 8009d66:	4618      	mov	r0, r3
 8009d68:	3720      	adds	r7, #32
 8009d6a:	46bd      	mov	sp, r7
 8009d6c:	bd80      	pop	{r7, pc}
	...

08009d70 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8009d70:	b480      	push	{r7}
 8009d72:	b085      	sub	sp, #20
 8009d74:	af00      	add	r7, sp, #0
 8009d76:	60f8      	str	r0, [r7, #12]
 8009d78:	60b9      	str	r1, [r7, #8]
 8009d7a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	4a07      	ldr	r2, [pc, #28]	@ (8009d9c <vApplicationGetIdleTaskMemory+0x2c>)
 8009d80:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8009d82:	68bb      	ldr	r3, [r7, #8]
 8009d84:	4a06      	ldr	r2, [pc, #24]	@ (8009da0 <vApplicationGetIdleTaskMemory+0x30>)
 8009d86:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8009d88:	687b      	ldr	r3, [r7, #4]
 8009d8a:	2280      	movs	r2, #128	@ 0x80
 8009d8c:	601a      	str	r2, [r3, #0]
}
 8009d8e:	bf00      	nop
 8009d90:	3714      	adds	r7, #20
 8009d92:	46bd      	mov	sp, r7
 8009d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d98:	4770      	bx	lr
 8009d9a:	bf00      	nop
 8009d9c:	2000069c 	.word	0x2000069c
 8009da0:	20000744 	.word	0x20000744

08009da4 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8009da4:	b480      	push	{r7}
 8009da6:	b085      	sub	sp, #20
 8009da8:	af00      	add	r7, sp, #0
 8009daa:	60f8      	str	r0, [r7, #12]
 8009dac:	60b9      	str	r1, [r7, #8]
 8009dae:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8009db0:	68fb      	ldr	r3, [r7, #12]
 8009db2:	4a07      	ldr	r2, [pc, #28]	@ (8009dd0 <vApplicationGetTimerTaskMemory+0x2c>)
 8009db4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8009db6:	68bb      	ldr	r3, [r7, #8]
 8009db8:	4a06      	ldr	r2, [pc, #24]	@ (8009dd4 <vApplicationGetTimerTaskMemory+0x30>)
 8009dba:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8009dbc:	687b      	ldr	r3, [r7, #4]
 8009dbe:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009dc2:	601a      	str	r2, [r3, #0]
}
 8009dc4:	bf00      	nop
 8009dc6:	3714      	adds	r7, #20
 8009dc8:	46bd      	mov	sp, r7
 8009dca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dce:	4770      	bx	lr
 8009dd0:	20000944 	.word	0x20000944
 8009dd4:	200009ec 	.word	0x200009ec

08009dd8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009dd8:	b480      	push	{r7}
 8009dda:	b083      	sub	sp, #12
 8009ddc:	af00      	add	r7, sp, #0
 8009dde:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009de0:	687b      	ldr	r3, [r7, #4]
 8009de2:	f103 0208 	add.w	r2, r3, #8
 8009de6:	687b      	ldr	r3, [r7, #4]
 8009de8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009dea:	687b      	ldr	r3, [r7, #4]
 8009dec:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009df0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009df2:	687b      	ldr	r3, [r7, #4]
 8009df4:	f103 0208 	add.w	r2, r3, #8
 8009df8:	687b      	ldr	r3, [r7, #4]
 8009dfa:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	f103 0208 	add.w	r2, r3, #8
 8009e02:	687b      	ldr	r3, [r7, #4]
 8009e04:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	2200      	movs	r2, #0
 8009e0a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009e0c:	bf00      	nop
 8009e0e:	370c      	adds	r7, #12
 8009e10:	46bd      	mov	sp, r7
 8009e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e16:	4770      	bx	lr

08009e18 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009e18:	b480      	push	{r7}
 8009e1a:	b083      	sub	sp, #12
 8009e1c:	af00      	add	r7, sp, #0
 8009e1e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009e20:	687b      	ldr	r3, [r7, #4]
 8009e22:	2200      	movs	r2, #0
 8009e24:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009e26:	bf00      	nop
 8009e28:	370c      	adds	r7, #12
 8009e2a:	46bd      	mov	sp, r7
 8009e2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e30:	4770      	bx	lr

08009e32 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009e32:	b480      	push	{r7}
 8009e34:	b085      	sub	sp, #20
 8009e36:	af00      	add	r7, sp, #0
 8009e38:	6078      	str	r0, [r7, #4]
 8009e3a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009e3c:	687b      	ldr	r3, [r7, #4]
 8009e3e:	685b      	ldr	r3, [r3, #4]
 8009e40:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009e42:	683b      	ldr	r3, [r7, #0]
 8009e44:	68fa      	ldr	r2, [r7, #12]
 8009e46:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	689a      	ldr	r2, [r3, #8]
 8009e4c:	683b      	ldr	r3, [r7, #0]
 8009e4e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009e50:	68fb      	ldr	r3, [r7, #12]
 8009e52:	689b      	ldr	r3, [r3, #8]
 8009e54:	683a      	ldr	r2, [r7, #0]
 8009e56:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009e58:	68fb      	ldr	r3, [r7, #12]
 8009e5a:	683a      	ldr	r2, [r7, #0]
 8009e5c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009e5e:	683b      	ldr	r3, [r7, #0]
 8009e60:	687a      	ldr	r2, [r7, #4]
 8009e62:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009e64:	687b      	ldr	r3, [r7, #4]
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	1c5a      	adds	r2, r3, #1
 8009e6a:	687b      	ldr	r3, [r7, #4]
 8009e6c:	601a      	str	r2, [r3, #0]
}
 8009e6e:	bf00      	nop
 8009e70:	3714      	adds	r7, #20
 8009e72:	46bd      	mov	sp, r7
 8009e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009e78:	4770      	bx	lr

08009e7a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009e7a:	b480      	push	{r7}
 8009e7c:	b085      	sub	sp, #20
 8009e7e:	af00      	add	r7, sp, #0
 8009e80:	6078      	str	r0, [r7, #4]
 8009e82:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009e84:	683b      	ldr	r3, [r7, #0]
 8009e86:	681b      	ldr	r3, [r3, #0]
 8009e88:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009e8a:	68bb      	ldr	r3, [r7, #8]
 8009e8c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009e90:	d103      	bne.n	8009e9a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	691b      	ldr	r3, [r3, #16]
 8009e96:	60fb      	str	r3, [r7, #12]
 8009e98:	e00c      	b.n	8009eb4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	3308      	adds	r3, #8
 8009e9e:	60fb      	str	r3, [r7, #12]
 8009ea0:	e002      	b.n	8009ea8 <vListInsert+0x2e>
 8009ea2:	68fb      	ldr	r3, [r7, #12]
 8009ea4:	685b      	ldr	r3, [r3, #4]
 8009ea6:	60fb      	str	r3, [r7, #12]
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	685b      	ldr	r3, [r3, #4]
 8009eac:	681b      	ldr	r3, [r3, #0]
 8009eae:	68ba      	ldr	r2, [r7, #8]
 8009eb0:	429a      	cmp	r2, r3
 8009eb2:	d2f6      	bcs.n	8009ea2 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009eb4:	68fb      	ldr	r3, [r7, #12]
 8009eb6:	685a      	ldr	r2, [r3, #4]
 8009eb8:	683b      	ldr	r3, [r7, #0]
 8009eba:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009ebc:	683b      	ldr	r3, [r7, #0]
 8009ebe:	685b      	ldr	r3, [r3, #4]
 8009ec0:	683a      	ldr	r2, [r7, #0]
 8009ec2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009ec4:	683b      	ldr	r3, [r7, #0]
 8009ec6:	68fa      	ldr	r2, [r7, #12]
 8009ec8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009eca:	68fb      	ldr	r3, [r7, #12]
 8009ecc:	683a      	ldr	r2, [r7, #0]
 8009ece:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009ed0:	683b      	ldr	r3, [r7, #0]
 8009ed2:	687a      	ldr	r2, [r7, #4]
 8009ed4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	1c5a      	adds	r2, r3, #1
 8009edc:	687b      	ldr	r3, [r7, #4]
 8009ede:	601a      	str	r2, [r3, #0]
}
 8009ee0:	bf00      	nop
 8009ee2:	3714      	adds	r7, #20
 8009ee4:	46bd      	mov	sp, r7
 8009ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009eea:	4770      	bx	lr

08009eec <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009eec:	b480      	push	{r7}
 8009eee:	b085      	sub	sp, #20
 8009ef0:	af00      	add	r7, sp, #0
 8009ef2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009ef4:	687b      	ldr	r3, [r7, #4]
 8009ef6:	691b      	ldr	r3, [r3, #16]
 8009ef8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	685b      	ldr	r3, [r3, #4]
 8009efe:	687a      	ldr	r2, [r7, #4]
 8009f00:	6892      	ldr	r2, [r2, #8]
 8009f02:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	689b      	ldr	r3, [r3, #8]
 8009f08:	687a      	ldr	r2, [r7, #4]
 8009f0a:	6852      	ldr	r2, [r2, #4]
 8009f0c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009f0e:	68fb      	ldr	r3, [r7, #12]
 8009f10:	685b      	ldr	r3, [r3, #4]
 8009f12:	687a      	ldr	r2, [r7, #4]
 8009f14:	429a      	cmp	r2, r3
 8009f16:	d103      	bne.n	8009f20 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009f18:	687b      	ldr	r3, [r7, #4]
 8009f1a:	689a      	ldr	r2, [r3, #8]
 8009f1c:	68fb      	ldr	r3, [r7, #12]
 8009f1e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009f20:	687b      	ldr	r3, [r7, #4]
 8009f22:	2200      	movs	r2, #0
 8009f24:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009f26:	68fb      	ldr	r3, [r7, #12]
 8009f28:	681b      	ldr	r3, [r3, #0]
 8009f2a:	1e5a      	subs	r2, r3, #1
 8009f2c:	68fb      	ldr	r3, [r7, #12]
 8009f2e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	681b      	ldr	r3, [r3, #0]
}
 8009f34:	4618      	mov	r0, r3
 8009f36:	3714      	adds	r7, #20
 8009f38:	46bd      	mov	sp, r7
 8009f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f3e:	4770      	bx	lr

08009f40 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8009f40:	b580      	push	{r7, lr}
 8009f42:	b084      	sub	sp, #16
 8009f44:	af00      	add	r7, sp, #0
 8009f46:	6078      	str	r0, [r7, #4]
 8009f48:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8009f4e:	68fb      	ldr	r3, [r7, #12]
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	d10b      	bne.n	8009f6c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009f54:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f58:	f383 8811 	msr	BASEPRI, r3
 8009f5c:	f3bf 8f6f 	isb	sy
 8009f60:	f3bf 8f4f 	dsb	sy
 8009f64:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009f66:	bf00      	nop
 8009f68:	bf00      	nop
 8009f6a:	e7fd      	b.n	8009f68 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8009f6c:	f002 fbe4 	bl	800c738 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009f70:	68fb      	ldr	r3, [r7, #12]
 8009f72:	681a      	ldr	r2, [r3, #0]
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009f78:	68f9      	ldr	r1, [r7, #12]
 8009f7a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8009f7c:	fb01 f303 	mul.w	r3, r1, r3
 8009f80:	441a      	add	r2, r3
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	2200      	movs	r2, #0
 8009f8a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8009f8c:	68fb      	ldr	r3, [r7, #12]
 8009f8e:	681a      	ldr	r2, [r3, #0]
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8009f94:	68fb      	ldr	r3, [r7, #12]
 8009f96:	681a      	ldr	r2, [r3, #0]
 8009f98:	68fb      	ldr	r3, [r7, #12]
 8009f9a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8009f9c:	3b01      	subs	r3, #1
 8009f9e:	68f9      	ldr	r1, [r7, #12]
 8009fa0:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8009fa2:	fb01 f303 	mul.w	r3, r1, r3
 8009fa6:	441a      	add	r2, r3
 8009fa8:	68fb      	ldr	r3, [r7, #12]
 8009faa:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	22ff      	movs	r2, #255	@ 0xff
 8009fb0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8009fb4:	68fb      	ldr	r3, [r7, #12]
 8009fb6:	22ff      	movs	r2, #255	@ 0xff
 8009fb8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8009fbc:	683b      	ldr	r3, [r7, #0]
 8009fbe:	2b00      	cmp	r3, #0
 8009fc0:	d114      	bne.n	8009fec <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009fc2:	68fb      	ldr	r3, [r7, #12]
 8009fc4:	691b      	ldr	r3, [r3, #16]
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d01a      	beq.n	800a000 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009fca:	68fb      	ldr	r3, [r7, #12]
 8009fcc:	3310      	adds	r3, #16
 8009fce:	4618      	mov	r0, r3
 8009fd0:	f001 fb82 	bl	800b6d8 <xTaskRemoveFromEventList>
 8009fd4:	4603      	mov	r3, r0
 8009fd6:	2b00      	cmp	r3, #0
 8009fd8:	d012      	beq.n	800a000 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8009fda:	4b0d      	ldr	r3, [pc, #52]	@ (800a010 <xQueueGenericReset+0xd0>)
 8009fdc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009fe0:	601a      	str	r2, [r3, #0]
 8009fe2:	f3bf 8f4f 	dsb	sy
 8009fe6:	f3bf 8f6f 	isb	sy
 8009fea:	e009      	b.n	800a000 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8009fec:	68fb      	ldr	r3, [r7, #12]
 8009fee:	3310      	adds	r3, #16
 8009ff0:	4618      	mov	r0, r3
 8009ff2:	f7ff fef1 	bl	8009dd8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8009ff6:	68fb      	ldr	r3, [r7, #12]
 8009ff8:	3324      	adds	r3, #36	@ 0x24
 8009ffa:	4618      	mov	r0, r3
 8009ffc:	f7ff feec 	bl	8009dd8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800a000:	f002 fbcc 	bl	800c79c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800a004:	2301      	movs	r3, #1
}
 800a006:	4618      	mov	r0, r3
 800a008:	3710      	adds	r7, #16
 800a00a:	46bd      	mov	sp, r7
 800a00c:	bd80      	pop	{r7, pc}
 800a00e:	bf00      	nop
 800a010:	e000ed04 	.word	0xe000ed04

0800a014 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800a014:	b580      	push	{r7, lr}
 800a016:	b08e      	sub	sp, #56	@ 0x38
 800a018:	af02      	add	r7, sp, #8
 800a01a:	60f8      	str	r0, [r7, #12]
 800a01c:	60b9      	str	r1, [r7, #8]
 800a01e:	607a      	str	r2, [r7, #4]
 800a020:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a022:	68fb      	ldr	r3, [r7, #12]
 800a024:	2b00      	cmp	r3, #0
 800a026:	d10b      	bne.n	800a040 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 800a028:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a02c:	f383 8811 	msr	BASEPRI, r3
 800a030:	f3bf 8f6f 	isb	sy
 800a034:	f3bf 8f4f 	dsb	sy
 800a038:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a03a:	bf00      	nop
 800a03c:	bf00      	nop
 800a03e:	e7fd      	b.n	800a03c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800a040:	683b      	ldr	r3, [r7, #0]
 800a042:	2b00      	cmp	r3, #0
 800a044:	d10b      	bne.n	800a05e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800a046:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a04a:	f383 8811 	msr	BASEPRI, r3
 800a04e:	f3bf 8f6f 	isb	sy
 800a052:	f3bf 8f4f 	dsb	sy
 800a056:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a058:	bf00      	nop
 800a05a:	bf00      	nop
 800a05c:	e7fd      	b.n	800a05a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800a05e:	687b      	ldr	r3, [r7, #4]
 800a060:	2b00      	cmp	r3, #0
 800a062:	d002      	beq.n	800a06a <xQueueGenericCreateStatic+0x56>
 800a064:	68bb      	ldr	r3, [r7, #8]
 800a066:	2b00      	cmp	r3, #0
 800a068:	d001      	beq.n	800a06e <xQueueGenericCreateStatic+0x5a>
 800a06a:	2301      	movs	r3, #1
 800a06c:	e000      	b.n	800a070 <xQueueGenericCreateStatic+0x5c>
 800a06e:	2300      	movs	r3, #0
 800a070:	2b00      	cmp	r3, #0
 800a072:	d10b      	bne.n	800a08c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800a074:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a078:	f383 8811 	msr	BASEPRI, r3
 800a07c:	f3bf 8f6f 	isb	sy
 800a080:	f3bf 8f4f 	dsb	sy
 800a084:	623b      	str	r3, [r7, #32]
}
 800a086:	bf00      	nop
 800a088:	bf00      	nop
 800a08a:	e7fd      	b.n	800a088 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800a08c:	687b      	ldr	r3, [r7, #4]
 800a08e:	2b00      	cmp	r3, #0
 800a090:	d102      	bne.n	800a098 <xQueueGenericCreateStatic+0x84>
 800a092:	68bb      	ldr	r3, [r7, #8]
 800a094:	2b00      	cmp	r3, #0
 800a096:	d101      	bne.n	800a09c <xQueueGenericCreateStatic+0x88>
 800a098:	2301      	movs	r3, #1
 800a09a:	e000      	b.n	800a09e <xQueueGenericCreateStatic+0x8a>
 800a09c:	2300      	movs	r3, #0
 800a09e:	2b00      	cmp	r3, #0
 800a0a0:	d10b      	bne.n	800a0ba <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800a0a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0a6:	f383 8811 	msr	BASEPRI, r3
 800a0aa:	f3bf 8f6f 	isb	sy
 800a0ae:	f3bf 8f4f 	dsb	sy
 800a0b2:	61fb      	str	r3, [r7, #28]
}
 800a0b4:	bf00      	nop
 800a0b6:	bf00      	nop
 800a0b8:	e7fd      	b.n	800a0b6 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800a0ba:	2350      	movs	r3, #80	@ 0x50
 800a0bc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800a0be:	697b      	ldr	r3, [r7, #20]
 800a0c0:	2b50      	cmp	r3, #80	@ 0x50
 800a0c2:	d00b      	beq.n	800a0dc <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 800a0c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a0c8:	f383 8811 	msr	BASEPRI, r3
 800a0cc:	f3bf 8f6f 	isb	sy
 800a0d0:	f3bf 8f4f 	dsb	sy
 800a0d4:	61bb      	str	r3, [r7, #24]
}
 800a0d6:	bf00      	nop
 800a0d8:	bf00      	nop
 800a0da:	e7fd      	b.n	800a0d8 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800a0dc:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800a0de:	683b      	ldr	r3, [r7, #0]
 800a0e0:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 800a0e2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a0e4:	2b00      	cmp	r3, #0
 800a0e6:	d00d      	beq.n	800a104 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800a0e8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a0ea:	2201      	movs	r2, #1
 800a0ec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a0f0:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 800a0f4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a0f6:	9300      	str	r3, [sp, #0]
 800a0f8:	4613      	mov	r3, r2
 800a0fa:	687a      	ldr	r2, [r7, #4]
 800a0fc:	68b9      	ldr	r1, [r7, #8]
 800a0fe:	68f8      	ldr	r0, [r7, #12]
 800a100:	f000 f840 	bl	800a184 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a104:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 800a106:	4618      	mov	r0, r3
 800a108:	3730      	adds	r7, #48	@ 0x30
 800a10a:	46bd      	mov	sp, r7
 800a10c:	bd80      	pop	{r7, pc}

0800a10e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800a10e:	b580      	push	{r7, lr}
 800a110:	b08a      	sub	sp, #40	@ 0x28
 800a112:	af02      	add	r7, sp, #8
 800a114:	60f8      	str	r0, [r7, #12]
 800a116:	60b9      	str	r1, [r7, #8]
 800a118:	4613      	mov	r3, r2
 800a11a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d10b      	bne.n	800a13a <xQueueGenericCreate+0x2c>
	__asm volatile
 800a122:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a126:	f383 8811 	msr	BASEPRI, r3
 800a12a:	f3bf 8f6f 	isb	sy
 800a12e:	f3bf 8f4f 	dsb	sy
 800a132:	613b      	str	r3, [r7, #16]
}
 800a134:	bf00      	nop
 800a136:	bf00      	nop
 800a138:	e7fd      	b.n	800a136 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a13a:	68fb      	ldr	r3, [r7, #12]
 800a13c:	68ba      	ldr	r2, [r7, #8]
 800a13e:	fb02 f303 	mul.w	r3, r2, r3
 800a142:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800a144:	69fb      	ldr	r3, [r7, #28]
 800a146:	3350      	adds	r3, #80	@ 0x50
 800a148:	4618      	mov	r0, r3
 800a14a:	f002 fc17 	bl	800c97c <pvPortMalloc>
 800a14e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800a150:	69bb      	ldr	r3, [r7, #24]
 800a152:	2b00      	cmp	r3, #0
 800a154:	d011      	beq.n	800a17a <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800a156:	69bb      	ldr	r3, [r7, #24]
 800a158:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800a15a:	697b      	ldr	r3, [r7, #20]
 800a15c:	3350      	adds	r3, #80	@ 0x50
 800a15e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800a160:	69bb      	ldr	r3, [r7, #24]
 800a162:	2200      	movs	r2, #0
 800a164:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800a168:	79fa      	ldrb	r2, [r7, #7]
 800a16a:	69bb      	ldr	r3, [r7, #24]
 800a16c:	9300      	str	r3, [sp, #0]
 800a16e:	4613      	mov	r3, r2
 800a170:	697a      	ldr	r2, [r7, #20]
 800a172:	68b9      	ldr	r1, [r7, #8]
 800a174:	68f8      	ldr	r0, [r7, #12]
 800a176:	f000 f805 	bl	800a184 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800a17a:	69bb      	ldr	r3, [r7, #24]
	}
 800a17c:	4618      	mov	r0, r3
 800a17e:	3720      	adds	r7, #32
 800a180:	46bd      	mov	sp, r7
 800a182:	bd80      	pop	{r7, pc}

0800a184 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800a184:	b580      	push	{r7, lr}
 800a186:	b084      	sub	sp, #16
 800a188:	af00      	add	r7, sp, #0
 800a18a:	60f8      	str	r0, [r7, #12]
 800a18c:	60b9      	str	r1, [r7, #8]
 800a18e:	607a      	str	r2, [r7, #4]
 800a190:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800a192:	68bb      	ldr	r3, [r7, #8]
 800a194:	2b00      	cmp	r3, #0
 800a196:	d103      	bne.n	800a1a0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800a198:	69bb      	ldr	r3, [r7, #24]
 800a19a:	69ba      	ldr	r2, [r7, #24]
 800a19c:	601a      	str	r2, [r3, #0]
 800a19e:	e002      	b.n	800a1a6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800a1a0:	69bb      	ldr	r3, [r7, #24]
 800a1a2:	687a      	ldr	r2, [r7, #4]
 800a1a4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800a1a6:	69bb      	ldr	r3, [r7, #24]
 800a1a8:	68fa      	ldr	r2, [r7, #12]
 800a1aa:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800a1ac:	69bb      	ldr	r3, [r7, #24]
 800a1ae:	68ba      	ldr	r2, [r7, #8]
 800a1b0:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800a1b2:	2101      	movs	r1, #1
 800a1b4:	69b8      	ldr	r0, [r7, #24]
 800a1b6:	f7ff fec3 	bl	8009f40 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800a1ba:	69bb      	ldr	r3, [r7, #24]
 800a1bc:	78fa      	ldrb	r2, [r7, #3]
 800a1be:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800a1c2:	bf00      	nop
 800a1c4:	3710      	adds	r7, #16
 800a1c6:	46bd      	mov	sp, r7
 800a1c8:	bd80      	pop	{r7, pc}

0800a1ca <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800a1ca:	b580      	push	{r7, lr}
 800a1cc:	b082      	sub	sp, #8
 800a1ce:	af00      	add	r7, sp, #0
 800a1d0:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800a1d2:	687b      	ldr	r3, [r7, #4]
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d00e      	beq.n	800a1f6 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800a1d8:	687b      	ldr	r3, [r7, #4]
 800a1da:	2200      	movs	r2, #0
 800a1dc:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	2200      	movs	r2, #0
 800a1e2:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800a1e4:	687b      	ldr	r3, [r7, #4]
 800a1e6:	2200      	movs	r2, #0
 800a1e8:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800a1ea:	2300      	movs	r3, #0
 800a1ec:	2200      	movs	r2, #0
 800a1ee:	2100      	movs	r1, #0
 800a1f0:	6878      	ldr	r0, [r7, #4]
 800a1f2:	f000 f837 	bl	800a264 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800a1f6:	bf00      	nop
 800a1f8:	3708      	adds	r7, #8
 800a1fa:	46bd      	mov	sp, r7
 800a1fc:	bd80      	pop	{r7, pc}

0800a1fe <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800a1fe:	b580      	push	{r7, lr}
 800a200:	b086      	sub	sp, #24
 800a202:	af00      	add	r7, sp, #0
 800a204:	4603      	mov	r3, r0
 800a206:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800a208:	2301      	movs	r3, #1
 800a20a:	617b      	str	r3, [r7, #20]
 800a20c:	2300      	movs	r3, #0
 800a20e:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800a210:	79fb      	ldrb	r3, [r7, #7]
 800a212:	461a      	mov	r2, r3
 800a214:	6939      	ldr	r1, [r7, #16]
 800a216:	6978      	ldr	r0, [r7, #20]
 800a218:	f7ff ff79 	bl	800a10e <xQueueGenericCreate>
 800a21c:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800a21e:	68f8      	ldr	r0, [r7, #12]
 800a220:	f7ff ffd3 	bl	800a1ca <prvInitialiseMutex>

		return xNewQueue;
 800a224:	68fb      	ldr	r3, [r7, #12]
	}
 800a226:	4618      	mov	r0, r3
 800a228:	3718      	adds	r7, #24
 800a22a:	46bd      	mov	sp, r7
 800a22c:	bd80      	pop	{r7, pc}

0800a22e <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800a22e:	b580      	push	{r7, lr}
 800a230:	b088      	sub	sp, #32
 800a232:	af02      	add	r7, sp, #8
 800a234:	4603      	mov	r3, r0
 800a236:	6039      	str	r1, [r7, #0]
 800a238:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800a23a:	2301      	movs	r3, #1
 800a23c:	617b      	str	r3, [r7, #20]
 800a23e:	2300      	movs	r3, #0
 800a240:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800a242:	79fb      	ldrb	r3, [r7, #7]
 800a244:	9300      	str	r3, [sp, #0]
 800a246:	683b      	ldr	r3, [r7, #0]
 800a248:	2200      	movs	r2, #0
 800a24a:	6939      	ldr	r1, [r7, #16]
 800a24c:	6978      	ldr	r0, [r7, #20]
 800a24e:	f7ff fee1 	bl	800a014 <xQueueGenericCreateStatic>
 800a252:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800a254:	68f8      	ldr	r0, [r7, #12]
 800a256:	f7ff ffb8 	bl	800a1ca <prvInitialiseMutex>

		return xNewQueue;
 800a25a:	68fb      	ldr	r3, [r7, #12]
	}
 800a25c:	4618      	mov	r0, r3
 800a25e:	3718      	adds	r7, #24
 800a260:	46bd      	mov	sp, r7
 800a262:	bd80      	pop	{r7, pc}

0800a264 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800a264:	b580      	push	{r7, lr}
 800a266:	b08e      	sub	sp, #56	@ 0x38
 800a268:	af00      	add	r7, sp, #0
 800a26a:	60f8      	str	r0, [r7, #12]
 800a26c:	60b9      	str	r1, [r7, #8]
 800a26e:	607a      	str	r2, [r7, #4]
 800a270:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800a272:	2300      	movs	r3, #0
 800a274:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a276:	68fb      	ldr	r3, [r7, #12]
 800a278:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800a27a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d10b      	bne.n	800a298 <xQueueGenericSend+0x34>
	__asm volatile
 800a280:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a284:	f383 8811 	msr	BASEPRI, r3
 800a288:	f3bf 8f6f 	isb	sy
 800a28c:	f3bf 8f4f 	dsb	sy
 800a290:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a292:	bf00      	nop
 800a294:	bf00      	nop
 800a296:	e7fd      	b.n	800a294 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a298:	68bb      	ldr	r3, [r7, #8]
 800a29a:	2b00      	cmp	r3, #0
 800a29c:	d103      	bne.n	800a2a6 <xQueueGenericSend+0x42>
 800a29e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d101      	bne.n	800a2aa <xQueueGenericSend+0x46>
 800a2a6:	2301      	movs	r3, #1
 800a2a8:	e000      	b.n	800a2ac <xQueueGenericSend+0x48>
 800a2aa:	2300      	movs	r3, #0
 800a2ac:	2b00      	cmp	r3, #0
 800a2ae:	d10b      	bne.n	800a2c8 <xQueueGenericSend+0x64>
	__asm volatile
 800a2b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2b4:	f383 8811 	msr	BASEPRI, r3
 800a2b8:	f3bf 8f6f 	isb	sy
 800a2bc:	f3bf 8f4f 	dsb	sy
 800a2c0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a2c2:	bf00      	nop
 800a2c4:	bf00      	nop
 800a2c6:	e7fd      	b.n	800a2c4 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a2c8:	683b      	ldr	r3, [r7, #0]
 800a2ca:	2b02      	cmp	r3, #2
 800a2cc:	d103      	bne.n	800a2d6 <xQueueGenericSend+0x72>
 800a2ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a2d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a2d2:	2b01      	cmp	r3, #1
 800a2d4:	d101      	bne.n	800a2da <xQueueGenericSend+0x76>
 800a2d6:	2301      	movs	r3, #1
 800a2d8:	e000      	b.n	800a2dc <xQueueGenericSend+0x78>
 800a2da:	2300      	movs	r3, #0
 800a2dc:	2b00      	cmp	r3, #0
 800a2de:	d10b      	bne.n	800a2f8 <xQueueGenericSend+0x94>
	__asm volatile
 800a2e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a2e4:	f383 8811 	msr	BASEPRI, r3
 800a2e8:	f3bf 8f6f 	isb	sy
 800a2ec:	f3bf 8f4f 	dsb	sy
 800a2f0:	623b      	str	r3, [r7, #32]
}
 800a2f2:	bf00      	nop
 800a2f4:	bf00      	nop
 800a2f6:	e7fd      	b.n	800a2f4 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a2f8:	f001 fbb4 	bl	800ba64 <xTaskGetSchedulerState>
 800a2fc:	4603      	mov	r3, r0
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d102      	bne.n	800a308 <xQueueGenericSend+0xa4>
 800a302:	687b      	ldr	r3, [r7, #4]
 800a304:	2b00      	cmp	r3, #0
 800a306:	d101      	bne.n	800a30c <xQueueGenericSend+0xa8>
 800a308:	2301      	movs	r3, #1
 800a30a:	e000      	b.n	800a30e <xQueueGenericSend+0xaa>
 800a30c:	2300      	movs	r3, #0
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d10b      	bne.n	800a32a <xQueueGenericSend+0xc6>
	__asm volatile
 800a312:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a316:	f383 8811 	msr	BASEPRI, r3
 800a31a:	f3bf 8f6f 	isb	sy
 800a31e:	f3bf 8f4f 	dsb	sy
 800a322:	61fb      	str	r3, [r7, #28]
}
 800a324:	bf00      	nop
 800a326:	bf00      	nop
 800a328:	e7fd      	b.n	800a326 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a32a:	f002 fa05 	bl	800c738 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a32e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a330:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a332:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a334:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a336:	429a      	cmp	r2, r3
 800a338:	d302      	bcc.n	800a340 <xQueueGenericSend+0xdc>
 800a33a:	683b      	ldr	r3, [r7, #0]
 800a33c:	2b02      	cmp	r3, #2
 800a33e:	d129      	bne.n	800a394 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a340:	683a      	ldr	r2, [r7, #0]
 800a342:	68b9      	ldr	r1, [r7, #8]
 800a344:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a346:	f000 fbc7 	bl	800aad8 <prvCopyDataToQueue>
 800a34a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a34c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a34e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a350:	2b00      	cmp	r3, #0
 800a352:	d010      	beq.n	800a376 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a354:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a356:	3324      	adds	r3, #36	@ 0x24
 800a358:	4618      	mov	r0, r3
 800a35a:	f001 f9bd 	bl	800b6d8 <xTaskRemoveFromEventList>
 800a35e:	4603      	mov	r3, r0
 800a360:	2b00      	cmp	r3, #0
 800a362:	d013      	beq.n	800a38c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800a364:	4b3f      	ldr	r3, [pc, #252]	@ (800a464 <xQueueGenericSend+0x200>)
 800a366:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a36a:	601a      	str	r2, [r3, #0]
 800a36c:	f3bf 8f4f 	dsb	sy
 800a370:	f3bf 8f6f 	isb	sy
 800a374:	e00a      	b.n	800a38c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800a376:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d007      	beq.n	800a38c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800a37c:	4b39      	ldr	r3, [pc, #228]	@ (800a464 <xQueueGenericSend+0x200>)
 800a37e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a382:	601a      	str	r2, [r3, #0]
 800a384:	f3bf 8f4f 	dsb	sy
 800a388:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800a38c:	f002 fa06 	bl	800c79c <vPortExitCritical>
				return pdPASS;
 800a390:	2301      	movs	r3, #1
 800a392:	e063      	b.n	800a45c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a394:	687b      	ldr	r3, [r7, #4]
 800a396:	2b00      	cmp	r3, #0
 800a398:	d103      	bne.n	800a3a2 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a39a:	f002 f9ff 	bl	800c79c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800a39e:	2300      	movs	r3, #0
 800a3a0:	e05c      	b.n	800a45c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a3a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a3a4:	2b00      	cmp	r3, #0
 800a3a6:	d106      	bne.n	800a3b6 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a3a8:	f107 0314 	add.w	r3, r7, #20
 800a3ac:	4618      	mov	r0, r3
 800a3ae:	f001 f9f7 	bl	800b7a0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a3b2:	2301      	movs	r3, #1
 800a3b4:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a3b6:	f002 f9f1 	bl	800c79c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a3ba:	f000 ff5f 	bl	800b27c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a3be:	f002 f9bb 	bl	800c738 <vPortEnterCritical>
 800a3c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3c4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a3c8:	b25b      	sxtb	r3, r3
 800a3ca:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a3ce:	d103      	bne.n	800a3d8 <xQueueGenericSend+0x174>
 800a3d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3d2:	2200      	movs	r2, #0
 800a3d4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a3d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3da:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a3de:	b25b      	sxtb	r3, r3
 800a3e0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a3e4:	d103      	bne.n	800a3ee <xQueueGenericSend+0x18a>
 800a3e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3e8:	2200      	movs	r2, #0
 800a3ea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a3ee:	f002 f9d5 	bl	800c79c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a3f2:	1d3a      	adds	r2, r7, #4
 800a3f4:	f107 0314 	add.w	r3, r7, #20
 800a3f8:	4611      	mov	r1, r2
 800a3fa:	4618      	mov	r0, r3
 800a3fc:	f001 f9e6 	bl	800b7cc <xTaskCheckForTimeOut>
 800a400:	4603      	mov	r3, r0
 800a402:	2b00      	cmp	r3, #0
 800a404:	d124      	bne.n	800a450 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800a406:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a408:	f000 fc5e 	bl	800acc8 <prvIsQueueFull>
 800a40c:	4603      	mov	r3, r0
 800a40e:	2b00      	cmp	r3, #0
 800a410:	d018      	beq.n	800a444 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800a412:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a414:	3310      	adds	r3, #16
 800a416:	687a      	ldr	r2, [r7, #4]
 800a418:	4611      	mov	r1, r2
 800a41a:	4618      	mov	r0, r3
 800a41c:	f001 f90a 	bl	800b634 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800a420:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a422:	f000 fbe9 	bl	800abf8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800a426:	f000 ff37 	bl	800b298 <xTaskResumeAll>
 800a42a:	4603      	mov	r3, r0
 800a42c:	2b00      	cmp	r3, #0
 800a42e:	f47f af7c 	bne.w	800a32a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800a432:	4b0c      	ldr	r3, [pc, #48]	@ (800a464 <xQueueGenericSend+0x200>)
 800a434:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a438:	601a      	str	r2, [r3, #0]
 800a43a:	f3bf 8f4f 	dsb	sy
 800a43e:	f3bf 8f6f 	isb	sy
 800a442:	e772      	b.n	800a32a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800a444:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a446:	f000 fbd7 	bl	800abf8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a44a:	f000 ff25 	bl	800b298 <xTaskResumeAll>
 800a44e:	e76c      	b.n	800a32a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800a450:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800a452:	f000 fbd1 	bl	800abf8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a456:	f000 ff1f 	bl	800b298 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800a45a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800a45c:	4618      	mov	r0, r3
 800a45e:	3738      	adds	r7, #56	@ 0x38
 800a460:	46bd      	mov	sp, r7
 800a462:	bd80      	pop	{r7, pc}
 800a464:	e000ed04 	.word	0xe000ed04

0800a468 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800a468:	b580      	push	{r7, lr}
 800a46a:	b090      	sub	sp, #64	@ 0x40
 800a46c:	af00      	add	r7, sp, #0
 800a46e:	60f8      	str	r0, [r7, #12]
 800a470:	60b9      	str	r1, [r7, #8]
 800a472:	607a      	str	r2, [r7, #4]
 800a474:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a476:	68fb      	ldr	r3, [r7, #12]
 800a478:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800a47a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a47c:	2b00      	cmp	r3, #0
 800a47e:	d10b      	bne.n	800a498 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800a480:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a484:	f383 8811 	msr	BASEPRI, r3
 800a488:	f3bf 8f6f 	isb	sy
 800a48c:	f3bf 8f4f 	dsb	sy
 800a490:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800a492:	bf00      	nop
 800a494:	bf00      	nop
 800a496:	e7fd      	b.n	800a494 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a498:	68bb      	ldr	r3, [r7, #8]
 800a49a:	2b00      	cmp	r3, #0
 800a49c:	d103      	bne.n	800a4a6 <xQueueGenericSendFromISR+0x3e>
 800a49e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a4a2:	2b00      	cmp	r3, #0
 800a4a4:	d101      	bne.n	800a4aa <xQueueGenericSendFromISR+0x42>
 800a4a6:	2301      	movs	r3, #1
 800a4a8:	e000      	b.n	800a4ac <xQueueGenericSendFromISR+0x44>
 800a4aa:	2300      	movs	r3, #0
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d10b      	bne.n	800a4c8 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 800a4b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4b4:	f383 8811 	msr	BASEPRI, r3
 800a4b8:	f3bf 8f6f 	isb	sy
 800a4bc:	f3bf 8f4f 	dsb	sy
 800a4c0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800a4c2:	bf00      	nop
 800a4c4:	bf00      	nop
 800a4c6:	e7fd      	b.n	800a4c4 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800a4c8:	683b      	ldr	r3, [r7, #0]
 800a4ca:	2b02      	cmp	r3, #2
 800a4cc:	d103      	bne.n	800a4d6 <xQueueGenericSendFromISR+0x6e>
 800a4ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a4d0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a4d2:	2b01      	cmp	r3, #1
 800a4d4:	d101      	bne.n	800a4da <xQueueGenericSendFromISR+0x72>
 800a4d6:	2301      	movs	r3, #1
 800a4d8:	e000      	b.n	800a4dc <xQueueGenericSendFromISR+0x74>
 800a4da:	2300      	movs	r3, #0
 800a4dc:	2b00      	cmp	r3, #0
 800a4de:	d10b      	bne.n	800a4f8 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 800a4e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4e4:	f383 8811 	msr	BASEPRI, r3
 800a4e8:	f3bf 8f6f 	isb	sy
 800a4ec:	f3bf 8f4f 	dsb	sy
 800a4f0:	623b      	str	r3, [r7, #32]
}
 800a4f2:	bf00      	nop
 800a4f4:	bf00      	nop
 800a4f6:	e7fd      	b.n	800a4f4 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a4f8:	f002 f9fe 	bl	800c8f8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800a4fc:	f3ef 8211 	mrs	r2, BASEPRI
 800a500:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a504:	f383 8811 	msr	BASEPRI, r3
 800a508:	f3bf 8f6f 	isb	sy
 800a50c:	f3bf 8f4f 	dsb	sy
 800a510:	61fa      	str	r2, [r7, #28]
 800a512:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800a514:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a516:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800a518:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a51a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800a51c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a51e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a520:	429a      	cmp	r2, r3
 800a522:	d302      	bcc.n	800a52a <xQueueGenericSendFromISR+0xc2>
 800a524:	683b      	ldr	r3, [r7, #0]
 800a526:	2b02      	cmp	r3, #2
 800a528:	d12f      	bne.n	800a58a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a52a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a52c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a530:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a534:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a536:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a538:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800a53a:	683a      	ldr	r2, [r7, #0]
 800a53c:	68b9      	ldr	r1, [r7, #8]
 800a53e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 800a540:	f000 faca 	bl	800aad8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a544:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 800a548:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a54c:	d112      	bne.n	800a574 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a54e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a550:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a552:	2b00      	cmp	r3, #0
 800a554:	d016      	beq.n	800a584 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a556:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a558:	3324      	adds	r3, #36	@ 0x24
 800a55a:	4618      	mov	r0, r3
 800a55c:	f001 f8bc 	bl	800b6d8 <xTaskRemoveFromEventList>
 800a560:	4603      	mov	r3, r0
 800a562:	2b00      	cmp	r3, #0
 800a564:	d00e      	beq.n	800a584 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	2b00      	cmp	r3, #0
 800a56a:	d00b      	beq.n	800a584 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	2201      	movs	r2, #1
 800a570:	601a      	str	r2, [r3, #0]
 800a572:	e007      	b.n	800a584 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a574:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 800a578:	3301      	adds	r3, #1
 800a57a:	b2db      	uxtb	r3, r3
 800a57c:	b25a      	sxtb	r2, r3
 800a57e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a580:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800a584:	2301      	movs	r3, #1
 800a586:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 800a588:	e001      	b.n	800a58e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a58a:	2300      	movs	r3, #0
 800a58c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a58e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a590:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a592:	697b      	ldr	r3, [r7, #20]
 800a594:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a598:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a59a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800a59c:	4618      	mov	r0, r3
 800a59e:	3740      	adds	r7, #64	@ 0x40
 800a5a0:	46bd      	mov	sp, r7
 800a5a2:	bd80      	pop	{r7, pc}

0800a5a4 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800a5a4:	b580      	push	{r7, lr}
 800a5a6:	b08e      	sub	sp, #56	@ 0x38
 800a5a8:	af00      	add	r7, sp, #0
 800a5aa:	6078      	str	r0, [r7, #4]
 800a5ac:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	633b      	str	r3, [r7, #48]	@ 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800a5b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5b4:	2b00      	cmp	r3, #0
 800a5b6:	d10b      	bne.n	800a5d0 <xQueueGiveFromISR+0x2c>
	__asm volatile
 800a5b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5bc:	f383 8811 	msr	BASEPRI, r3
 800a5c0:	f3bf 8f6f 	isb	sy
 800a5c4:	f3bf 8f4f 	dsb	sy
 800a5c8:	623b      	str	r3, [r7, #32]
}
 800a5ca:	bf00      	nop
 800a5cc:	bf00      	nop
 800a5ce:	e7fd      	b.n	800a5cc <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a5d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a5d4:	2b00      	cmp	r3, #0
 800a5d6:	d00b      	beq.n	800a5f0 <xQueueGiveFromISR+0x4c>
	__asm volatile
 800a5d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5dc:	f383 8811 	msr	BASEPRI, r3
 800a5e0:	f3bf 8f6f 	isb	sy
 800a5e4:	f3bf 8f4f 	dsb	sy
 800a5e8:	61fb      	str	r3, [r7, #28]
}
 800a5ea:	bf00      	nop
 800a5ec:	bf00      	nop
 800a5ee:	e7fd      	b.n	800a5ec <xQueueGiveFromISR+0x48>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800a5f0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	2b00      	cmp	r3, #0
 800a5f6:	d103      	bne.n	800a600 <xQueueGiveFromISR+0x5c>
 800a5f8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a5fa:	689b      	ldr	r3, [r3, #8]
 800a5fc:	2b00      	cmp	r3, #0
 800a5fe:	d101      	bne.n	800a604 <xQueueGiveFromISR+0x60>
 800a600:	2301      	movs	r3, #1
 800a602:	e000      	b.n	800a606 <xQueueGiveFromISR+0x62>
 800a604:	2300      	movs	r3, #0
 800a606:	2b00      	cmp	r3, #0
 800a608:	d10b      	bne.n	800a622 <xQueueGiveFromISR+0x7e>
	__asm volatile
 800a60a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a60e:	f383 8811 	msr	BASEPRI, r3
 800a612:	f3bf 8f6f 	isb	sy
 800a616:	f3bf 8f4f 	dsb	sy
 800a61a:	61bb      	str	r3, [r7, #24]
}
 800a61c:	bf00      	nop
 800a61e:	bf00      	nop
 800a620:	e7fd      	b.n	800a61e <xQueueGiveFromISR+0x7a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800a622:	f002 f969 	bl	800c8f8 <vPortValidateInterruptPriority>
	__asm volatile
 800a626:	f3ef 8211 	mrs	r2, BASEPRI
 800a62a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a62e:	f383 8811 	msr	BASEPRI, r3
 800a632:	f3bf 8f6f 	isb	sy
 800a636:	f3bf 8f4f 	dsb	sy
 800a63a:	617a      	str	r2, [r7, #20]
 800a63c:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800a63e:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800a640:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a642:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a644:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a646:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800a648:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a64a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800a64c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800a64e:	429a      	cmp	r2, r3
 800a650:	d22b      	bcs.n	800a6aa <xQueueGiveFromISR+0x106>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800a652:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a654:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a658:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800a65c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a65e:	1c5a      	adds	r2, r3, #1
 800a660:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a662:	639a      	str	r2, [r3, #56]	@ 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800a664:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 800a668:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a66c:	d112      	bne.n	800a694 <xQueueGiveFromISR+0xf0>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800a66e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a670:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800a672:	2b00      	cmp	r3, #0
 800a674:	d016      	beq.n	800a6a4 <xQueueGiveFromISR+0x100>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800a676:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a678:	3324      	adds	r3, #36	@ 0x24
 800a67a:	4618      	mov	r0, r3
 800a67c:	f001 f82c 	bl	800b6d8 <xTaskRemoveFromEventList>
 800a680:	4603      	mov	r3, r0
 800a682:	2b00      	cmp	r3, #0
 800a684:	d00e      	beq.n	800a6a4 <xQueueGiveFromISR+0x100>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800a686:	683b      	ldr	r3, [r7, #0]
 800a688:	2b00      	cmp	r3, #0
 800a68a:	d00b      	beq.n	800a6a4 <xQueueGiveFromISR+0x100>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800a68c:	683b      	ldr	r3, [r7, #0]
 800a68e:	2201      	movs	r2, #1
 800a690:	601a      	str	r2, [r3, #0]
 800a692:	e007      	b.n	800a6a4 <xQueueGiveFromISR+0x100>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800a694:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800a698:	3301      	adds	r3, #1
 800a69a:	b2db      	uxtb	r3, r3
 800a69c:	b25a      	sxtb	r2, r3
 800a69e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a6a0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 800a6a4:	2301      	movs	r3, #1
 800a6a6:	637b      	str	r3, [r7, #52]	@ 0x34
 800a6a8:	e001      	b.n	800a6ae <xQueueGiveFromISR+0x10a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800a6aa:	2300      	movs	r3, #0
 800a6ac:	637b      	str	r3, [r7, #52]	@ 0x34
 800a6ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a6b0:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	f383 8811 	msr	BASEPRI, r3
}
 800a6b8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800a6ba:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800a6bc:	4618      	mov	r0, r3
 800a6be:	3738      	adds	r7, #56	@ 0x38
 800a6c0:	46bd      	mov	sp, r7
 800a6c2:	bd80      	pop	{r7, pc}

0800a6c4 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800a6c4:	b580      	push	{r7, lr}
 800a6c6:	b08c      	sub	sp, #48	@ 0x30
 800a6c8:	af00      	add	r7, sp, #0
 800a6ca:	60f8      	str	r0, [r7, #12]
 800a6cc:	60b9      	str	r1, [r7, #8]
 800a6ce:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800a6d0:	2300      	movs	r3, #0
 800a6d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a6d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6da:	2b00      	cmp	r3, #0
 800a6dc:	d10b      	bne.n	800a6f6 <xQueueReceive+0x32>
	__asm volatile
 800a6de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6e2:	f383 8811 	msr	BASEPRI, r3
 800a6e6:	f3bf 8f6f 	isb	sy
 800a6ea:	f3bf 8f4f 	dsb	sy
 800a6ee:	623b      	str	r3, [r7, #32]
}
 800a6f0:	bf00      	nop
 800a6f2:	bf00      	nop
 800a6f4:	e7fd      	b.n	800a6f2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800a6f6:	68bb      	ldr	r3, [r7, #8]
 800a6f8:	2b00      	cmp	r3, #0
 800a6fa:	d103      	bne.n	800a704 <xQueueReceive+0x40>
 800a6fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a6fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a700:	2b00      	cmp	r3, #0
 800a702:	d101      	bne.n	800a708 <xQueueReceive+0x44>
 800a704:	2301      	movs	r3, #1
 800a706:	e000      	b.n	800a70a <xQueueReceive+0x46>
 800a708:	2300      	movs	r3, #0
 800a70a:	2b00      	cmp	r3, #0
 800a70c:	d10b      	bne.n	800a726 <xQueueReceive+0x62>
	__asm volatile
 800a70e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a712:	f383 8811 	msr	BASEPRI, r3
 800a716:	f3bf 8f6f 	isb	sy
 800a71a:	f3bf 8f4f 	dsb	sy
 800a71e:	61fb      	str	r3, [r7, #28]
}
 800a720:	bf00      	nop
 800a722:	bf00      	nop
 800a724:	e7fd      	b.n	800a722 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a726:	f001 f99d 	bl	800ba64 <xTaskGetSchedulerState>
 800a72a:	4603      	mov	r3, r0
 800a72c:	2b00      	cmp	r3, #0
 800a72e:	d102      	bne.n	800a736 <xQueueReceive+0x72>
 800a730:	687b      	ldr	r3, [r7, #4]
 800a732:	2b00      	cmp	r3, #0
 800a734:	d101      	bne.n	800a73a <xQueueReceive+0x76>
 800a736:	2301      	movs	r3, #1
 800a738:	e000      	b.n	800a73c <xQueueReceive+0x78>
 800a73a:	2300      	movs	r3, #0
 800a73c:	2b00      	cmp	r3, #0
 800a73e:	d10b      	bne.n	800a758 <xQueueReceive+0x94>
	__asm volatile
 800a740:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a744:	f383 8811 	msr	BASEPRI, r3
 800a748:	f3bf 8f6f 	isb	sy
 800a74c:	f3bf 8f4f 	dsb	sy
 800a750:	61bb      	str	r3, [r7, #24]
}
 800a752:	bf00      	nop
 800a754:	bf00      	nop
 800a756:	e7fd      	b.n	800a754 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a758:	f001 ffee 	bl	800c738 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800a75c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a75e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a760:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800a762:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a764:	2b00      	cmp	r3, #0
 800a766:	d01f      	beq.n	800a7a8 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800a768:	68b9      	ldr	r1, [r7, #8]
 800a76a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a76c:	f000 fa1e 	bl	800abac <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800a770:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a772:	1e5a      	subs	r2, r3, #1
 800a774:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a776:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a778:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a77a:	691b      	ldr	r3, [r3, #16]
 800a77c:	2b00      	cmp	r3, #0
 800a77e:	d00f      	beq.n	800a7a0 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a780:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a782:	3310      	adds	r3, #16
 800a784:	4618      	mov	r0, r3
 800a786:	f000 ffa7 	bl	800b6d8 <xTaskRemoveFromEventList>
 800a78a:	4603      	mov	r3, r0
 800a78c:	2b00      	cmp	r3, #0
 800a78e:	d007      	beq.n	800a7a0 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a790:	4b3c      	ldr	r3, [pc, #240]	@ (800a884 <xQueueReceive+0x1c0>)
 800a792:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a796:	601a      	str	r2, [r3, #0]
 800a798:	f3bf 8f4f 	dsb	sy
 800a79c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a7a0:	f001 fffc 	bl	800c79c <vPortExitCritical>
				return pdPASS;
 800a7a4:	2301      	movs	r3, #1
 800a7a6:	e069      	b.n	800a87c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	2b00      	cmp	r3, #0
 800a7ac:	d103      	bne.n	800a7b6 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800a7ae:	f001 fff5 	bl	800c79c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a7b2:	2300      	movs	r3, #0
 800a7b4:	e062      	b.n	800a87c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a7b6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d106      	bne.n	800a7ca <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a7bc:	f107 0310 	add.w	r3, r7, #16
 800a7c0:	4618      	mov	r0, r3
 800a7c2:	f000 ffed 	bl	800b7a0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a7c6:	2301      	movs	r3, #1
 800a7c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a7ca:	f001 ffe7 	bl	800c79c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a7ce:	f000 fd55 	bl	800b27c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a7d2:	f001 ffb1 	bl	800c738 <vPortEnterCritical>
 800a7d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7d8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a7dc:	b25b      	sxtb	r3, r3
 800a7de:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a7e2:	d103      	bne.n	800a7ec <xQueueReceive+0x128>
 800a7e4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7e6:	2200      	movs	r2, #0
 800a7e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a7ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7ee:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a7f2:	b25b      	sxtb	r3, r3
 800a7f4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a7f8:	d103      	bne.n	800a802 <xQueueReceive+0x13e>
 800a7fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a7fc:	2200      	movs	r2, #0
 800a7fe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a802:	f001 ffcb 	bl	800c79c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a806:	1d3a      	adds	r2, r7, #4
 800a808:	f107 0310 	add.w	r3, r7, #16
 800a80c:	4611      	mov	r1, r2
 800a80e:	4618      	mov	r0, r3
 800a810:	f000 ffdc 	bl	800b7cc <xTaskCheckForTimeOut>
 800a814:	4603      	mov	r3, r0
 800a816:	2b00      	cmp	r3, #0
 800a818:	d123      	bne.n	800a862 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a81a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a81c:	f000 fa3e 	bl	800ac9c <prvIsQueueEmpty>
 800a820:	4603      	mov	r3, r0
 800a822:	2b00      	cmp	r3, #0
 800a824:	d017      	beq.n	800a856 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800a826:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a828:	3324      	adds	r3, #36	@ 0x24
 800a82a:	687a      	ldr	r2, [r7, #4]
 800a82c:	4611      	mov	r1, r2
 800a82e:	4618      	mov	r0, r3
 800a830:	f000 ff00 	bl	800b634 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800a834:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a836:	f000 f9df 	bl	800abf8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800a83a:	f000 fd2d 	bl	800b298 <xTaskResumeAll>
 800a83e:	4603      	mov	r3, r0
 800a840:	2b00      	cmp	r3, #0
 800a842:	d189      	bne.n	800a758 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800a844:	4b0f      	ldr	r3, [pc, #60]	@ (800a884 <xQueueReceive+0x1c0>)
 800a846:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a84a:	601a      	str	r2, [r3, #0]
 800a84c:	f3bf 8f4f 	dsb	sy
 800a850:	f3bf 8f6f 	isb	sy
 800a854:	e780      	b.n	800a758 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800a856:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a858:	f000 f9ce 	bl	800abf8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800a85c:	f000 fd1c 	bl	800b298 <xTaskResumeAll>
 800a860:	e77a      	b.n	800a758 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800a862:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a864:	f000 f9c8 	bl	800abf8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800a868:	f000 fd16 	bl	800b298 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a86c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a86e:	f000 fa15 	bl	800ac9c <prvIsQueueEmpty>
 800a872:	4603      	mov	r3, r0
 800a874:	2b00      	cmp	r3, #0
 800a876:	f43f af6f 	beq.w	800a758 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800a87a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800a87c:	4618      	mov	r0, r3
 800a87e:	3730      	adds	r7, #48	@ 0x30
 800a880:	46bd      	mov	sp, r7
 800a882:	bd80      	pop	{r7, pc}
 800a884:	e000ed04 	.word	0xe000ed04

0800a888 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800a888:	b580      	push	{r7, lr}
 800a88a:	b08e      	sub	sp, #56	@ 0x38
 800a88c:	af00      	add	r7, sp, #0
 800a88e:	6078      	str	r0, [r7, #4]
 800a890:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800a892:	2300      	movs	r3, #0
 800a894:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800a896:	687b      	ldr	r3, [r7, #4]
 800a898:	62fb      	str	r3, [r7, #44]	@ 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800a89a:	2300      	movs	r3, #0
 800a89c:	633b      	str	r3, [r7, #48]	@ 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800a89e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d10b      	bne.n	800a8bc <xQueueSemaphoreTake+0x34>
	__asm volatile
 800a8a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8a8:	f383 8811 	msr	BASEPRI, r3
 800a8ac:	f3bf 8f6f 	isb	sy
 800a8b0:	f3bf 8f4f 	dsb	sy
 800a8b4:	623b      	str	r3, [r7, #32]
}
 800a8b6:	bf00      	nop
 800a8b8:	bf00      	nop
 800a8ba:	e7fd      	b.n	800a8b8 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800a8bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a8be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800a8c0:	2b00      	cmp	r3, #0
 800a8c2:	d00b      	beq.n	800a8dc <xQueueSemaphoreTake+0x54>
	__asm volatile
 800a8c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8c8:	f383 8811 	msr	BASEPRI, r3
 800a8cc:	f3bf 8f6f 	isb	sy
 800a8d0:	f3bf 8f4f 	dsb	sy
 800a8d4:	61fb      	str	r3, [r7, #28]
}
 800a8d6:	bf00      	nop
 800a8d8:	bf00      	nop
 800a8da:	e7fd      	b.n	800a8d8 <xQueueSemaphoreTake+0x50>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800a8dc:	f001 f8c2 	bl	800ba64 <xTaskGetSchedulerState>
 800a8e0:	4603      	mov	r3, r0
 800a8e2:	2b00      	cmp	r3, #0
 800a8e4:	d102      	bne.n	800a8ec <xQueueSemaphoreTake+0x64>
 800a8e6:	683b      	ldr	r3, [r7, #0]
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d101      	bne.n	800a8f0 <xQueueSemaphoreTake+0x68>
 800a8ec:	2301      	movs	r3, #1
 800a8ee:	e000      	b.n	800a8f2 <xQueueSemaphoreTake+0x6a>
 800a8f0:	2300      	movs	r3, #0
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d10b      	bne.n	800a90e <xQueueSemaphoreTake+0x86>
	__asm volatile
 800a8f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a8fa:	f383 8811 	msr	BASEPRI, r3
 800a8fe:	f3bf 8f6f 	isb	sy
 800a902:	f3bf 8f4f 	dsb	sy
 800a906:	61bb      	str	r3, [r7, #24]
}
 800a908:	bf00      	nop
 800a90a:	bf00      	nop
 800a90c:	e7fd      	b.n	800a90a <xQueueSemaphoreTake+0x82>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800a90e:	f001 ff13 	bl	800c738 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800a912:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a914:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800a916:	62bb      	str	r3, [r7, #40]	@ 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800a918:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a91a:	2b00      	cmp	r3, #0
 800a91c:	d024      	beq.n	800a968 <xQueueSemaphoreTake+0xe0>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800a91e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a920:	1e5a      	subs	r2, r3, #1
 800a922:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a924:	639a      	str	r2, [r3, #56]	@ 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800a926:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	2b00      	cmp	r3, #0
 800a92c:	d104      	bne.n	800a938 <xQueueSemaphoreTake+0xb0>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800a92e:	f001 fa13 	bl	800bd58 <pvTaskIncrementMutexHeldCount>
 800a932:	4602      	mov	r2, r0
 800a934:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a936:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800a938:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a93a:	691b      	ldr	r3, [r3, #16]
 800a93c:	2b00      	cmp	r3, #0
 800a93e:	d00f      	beq.n	800a960 <xQueueSemaphoreTake+0xd8>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800a940:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a942:	3310      	adds	r3, #16
 800a944:	4618      	mov	r0, r3
 800a946:	f000 fec7 	bl	800b6d8 <xTaskRemoveFromEventList>
 800a94a:	4603      	mov	r3, r0
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d007      	beq.n	800a960 <xQueueSemaphoreTake+0xd8>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800a950:	4b54      	ldr	r3, [pc, #336]	@ (800aaa4 <xQueueSemaphoreTake+0x21c>)
 800a952:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a956:	601a      	str	r2, [r3, #0]
 800a958:	f3bf 8f4f 	dsb	sy
 800a95c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800a960:	f001 ff1c 	bl	800c79c <vPortExitCritical>
				return pdPASS;
 800a964:	2301      	movs	r3, #1
 800a966:	e098      	b.n	800aa9a <xQueueSemaphoreTake+0x212>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800a968:	683b      	ldr	r3, [r7, #0]
 800a96a:	2b00      	cmp	r3, #0
 800a96c:	d112      	bne.n	800a994 <xQueueSemaphoreTake+0x10c>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800a96e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a970:	2b00      	cmp	r3, #0
 800a972:	d00b      	beq.n	800a98c <xQueueSemaphoreTake+0x104>
	__asm volatile
 800a974:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a978:	f383 8811 	msr	BASEPRI, r3
 800a97c:	f3bf 8f6f 	isb	sy
 800a980:	f3bf 8f4f 	dsb	sy
 800a984:	617b      	str	r3, [r7, #20]
}
 800a986:	bf00      	nop
 800a988:	bf00      	nop
 800a98a:	e7fd      	b.n	800a988 <xQueueSemaphoreTake+0x100>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800a98c:	f001 ff06 	bl	800c79c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800a990:	2300      	movs	r3, #0
 800a992:	e082      	b.n	800aa9a <xQueueSemaphoreTake+0x212>
				}
				else if( xEntryTimeSet == pdFALSE )
 800a994:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a996:	2b00      	cmp	r3, #0
 800a998:	d106      	bne.n	800a9a8 <xQueueSemaphoreTake+0x120>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800a99a:	f107 030c 	add.w	r3, r7, #12
 800a99e:	4618      	mov	r0, r3
 800a9a0:	f000 fefe 	bl	800b7a0 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800a9a4:	2301      	movs	r3, #1
 800a9a6:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800a9a8:	f001 fef8 	bl	800c79c <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800a9ac:	f000 fc66 	bl	800b27c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800a9b0:	f001 fec2 	bl	800c738 <vPortEnterCritical>
 800a9b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a9b6:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800a9ba:	b25b      	sxtb	r3, r3
 800a9bc:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a9c0:	d103      	bne.n	800a9ca <xQueueSemaphoreTake+0x142>
 800a9c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a9c4:	2200      	movs	r2, #0
 800a9c6:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800a9ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a9cc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800a9d0:	b25b      	sxtb	r3, r3
 800a9d2:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a9d6:	d103      	bne.n	800a9e0 <xQueueSemaphoreTake+0x158>
 800a9d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a9da:	2200      	movs	r2, #0
 800a9dc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800a9e0:	f001 fedc 	bl	800c79c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800a9e4:	463a      	mov	r2, r7
 800a9e6:	f107 030c 	add.w	r3, r7, #12
 800a9ea:	4611      	mov	r1, r2
 800a9ec:	4618      	mov	r0, r3
 800a9ee:	f000 feed 	bl	800b7cc <xTaskCheckForTimeOut>
 800a9f2:	4603      	mov	r3, r0
 800a9f4:	2b00      	cmp	r3, #0
 800a9f6:	d132      	bne.n	800aa5e <xQueueSemaphoreTake+0x1d6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800a9f8:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a9fa:	f000 f94f 	bl	800ac9c <prvIsQueueEmpty>
 800a9fe:	4603      	mov	r3, r0
 800aa00:	2b00      	cmp	r3, #0
 800aa02:	d026      	beq.n	800aa52 <xQueueSemaphoreTake+0x1ca>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800aa04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa06:	681b      	ldr	r3, [r3, #0]
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d109      	bne.n	800aa20 <xQueueSemaphoreTake+0x198>
					{
						taskENTER_CRITICAL();
 800aa0c:	f001 fe94 	bl	800c738 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800aa10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa12:	689b      	ldr	r3, [r3, #8]
 800aa14:	4618      	mov	r0, r3
 800aa16:	f001 f843 	bl	800baa0 <xTaskPriorityInherit>
 800aa1a:	6338      	str	r0, [r7, #48]	@ 0x30
						}
						taskEXIT_CRITICAL();
 800aa1c:	f001 febe 	bl	800c79c <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800aa20:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa22:	3324      	adds	r3, #36	@ 0x24
 800aa24:	683a      	ldr	r2, [r7, #0]
 800aa26:	4611      	mov	r1, r2
 800aa28:	4618      	mov	r0, r3
 800aa2a:	f000 fe03 	bl	800b634 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800aa2e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800aa30:	f000 f8e2 	bl	800abf8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800aa34:	f000 fc30 	bl	800b298 <xTaskResumeAll>
 800aa38:	4603      	mov	r3, r0
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	f47f af67 	bne.w	800a90e <xQueueSemaphoreTake+0x86>
				{
					portYIELD_WITHIN_API();
 800aa40:	4b18      	ldr	r3, [pc, #96]	@ (800aaa4 <xQueueSemaphoreTake+0x21c>)
 800aa42:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800aa46:	601a      	str	r2, [r3, #0]
 800aa48:	f3bf 8f4f 	dsb	sy
 800aa4c:	f3bf 8f6f 	isb	sy
 800aa50:	e75d      	b.n	800a90e <xQueueSemaphoreTake+0x86>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800aa52:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800aa54:	f000 f8d0 	bl	800abf8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800aa58:	f000 fc1e 	bl	800b298 <xTaskResumeAll>
 800aa5c:	e757      	b.n	800a90e <xQueueSemaphoreTake+0x86>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800aa5e:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800aa60:	f000 f8ca 	bl	800abf8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800aa64:	f000 fc18 	bl	800b298 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800aa68:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800aa6a:	f000 f917 	bl	800ac9c <prvIsQueueEmpty>
 800aa6e:	4603      	mov	r3, r0
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	f43f af4c 	beq.w	800a90e <xQueueSemaphoreTake+0x86>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800aa76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d00d      	beq.n	800aa98 <xQueueSemaphoreTake+0x210>
					{
						taskENTER_CRITICAL();
 800aa7c:	f001 fe5c 	bl	800c738 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800aa80:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800aa82:	f000 f811 	bl	800aaa8 <prvGetDisinheritPriorityAfterTimeout>
 800aa86:	6278      	str	r0, [r7, #36]	@ 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800aa88:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aa8a:	689b      	ldr	r3, [r3, #8]
 800aa8c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800aa8e:	4618      	mov	r0, r3
 800aa90:	f001 f8de 	bl	800bc50 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800aa94:	f001 fe82 	bl	800c79c <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800aa98:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800aa9a:	4618      	mov	r0, r3
 800aa9c:	3738      	adds	r7, #56	@ 0x38
 800aa9e:	46bd      	mov	sp, r7
 800aaa0:	bd80      	pop	{r7, pc}
 800aaa2:	bf00      	nop
 800aaa4:	e000ed04 	.word	0xe000ed04

0800aaa8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800aaa8:	b480      	push	{r7}
 800aaaa:	b085      	sub	sp, #20
 800aaac:	af00      	add	r7, sp, #0
 800aaae:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800aab0:	687b      	ldr	r3, [r7, #4]
 800aab2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800aab4:	2b00      	cmp	r3, #0
 800aab6:	d006      	beq.n	800aac6 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800aab8:	687b      	ldr	r3, [r7, #4]
 800aaba:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800aabc:	681b      	ldr	r3, [r3, #0]
 800aabe:	f1c3 0338 	rsb	r3, r3, #56	@ 0x38
 800aac2:	60fb      	str	r3, [r7, #12]
 800aac4:	e001      	b.n	800aaca <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800aac6:	2300      	movs	r3, #0
 800aac8:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800aaca:	68fb      	ldr	r3, [r7, #12]
	}
 800aacc:	4618      	mov	r0, r3
 800aace:	3714      	adds	r7, #20
 800aad0:	46bd      	mov	sp, r7
 800aad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aad6:	4770      	bx	lr

0800aad8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800aad8:	b580      	push	{r7, lr}
 800aada:	b086      	sub	sp, #24
 800aadc:	af00      	add	r7, sp, #0
 800aade:	60f8      	str	r0, [r7, #12]
 800aae0:	60b9      	str	r1, [r7, #8]
 800aae2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800aae4:	2300      	movs	r3, #0
 800aae6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800aae8:	68fb      	ldr	r3, [r7, #12]
 800aaea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800aaec:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800aaee:	68fb      	ldr	r3, [r7, #12]
 800aaf0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800aaf2:	2b00      	cmp	r3, #0
 800aaf4:	d10d      	bne.n	800ab12 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800aaf6:	68fb      	ldr	r3, [r7, #12]
 800aaf8:	681b      	ldr	r3, [r3, #0]
 800aafa:	2b00      	cmp	r3, #0
 800aafc:	d14d      	bne.n	800ab9a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	689b      	ldr	r3, [r3, #8]
 800ab02:	4618      	mov	r0, r3
 800ab04:	f001 f834 	bl	800bb70 <xTaskPriorityDisinherit>
 800ab08:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800ab0a:	68fb      	ldr	r3, [r7, #12]
 800ab0c:	2200      	movs	r2, #0
 800ab0e:	609a      	str	r2, [r3, #8]
 800ab10:	e043      	b.n	800ab9a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800ab12:	687b      	ldr	r3, [r7, #4]
 800ab14:	2b00      	cmp	r3, #0
 800ab16:	d119      	bne.n	800ab4c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	6858      	ldr	r0, [r3, #4]
 800ab1c:	68fb      	ldr	r3, [r7, #12]
 800ab1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ab20:	461a      	mov	r2, r3
 800ab22:	68b9      	ldr	r1, [r7, #8]
 800ab24:	f003 f883 	bl	800dc2e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	685a      	ldr	r2, [r3, #4]
 800ab2c:	68fb      	ldr	r3, [r7, #12]
 800ab2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ab30:	441a      	add	r2, r3
 800ab32:	68fb      	ldr	r3, [r7, #12]
 800ab34:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	685a      	ldr	r2, [r3, #4]
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	689b      	ldr	r3, [r3, #8]
 800ab3e:	429a      	cmp	r2, r3
 800ab40:	d32b      	bcc.n	800ab9a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800ab42:	68fb      	ldr	r3, [r7, #12]
 800ab44:	681a      	ldr	r2, [r3, #0]
 800ab46:	68fb      	ldr	r3, [r7, #12]
 800ab48:	605a      	str	r2, [r3, #4]
 800ab4a:	e026      	b.n	800ab9a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800ab4c:	68fb      	ldr	r3, [r7, #12]
 800ab4e:	68d8      	ldr	r0, [r3, #12]
 800ab50:	68fb      	ldr	r3, [r7, #12]
 800ab52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ab54:	461a      	mov	r2, r3
 800ab56:	68b9      	ldr	r1, [r7, #8]
 800ab58:	f003 f869 	bl	800dc2e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800ab5c:	68fb      	ldr	r3, [r7, #12]
 800ab5e:	68da      	ldr	r2, [r3, #12]
 800ab60:	68fb      	ldr	r3, [r7, #12]
 800ab62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ab64:	425b      	negs	r3, r3
 800ab66:	441a      	add	r2, r3
 800ab68:	68fb      	ldr	r3, [r7, #12]
 800ab6a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	68da      	ldr	r2, [r3, #12]
 800ab70:	68fb      	ldr	r3, [r7, #12]
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	429a      	cmp	r2, r3
 800ab76:	d207      	bcs.n	800ab88 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800ab78:	68fb      	ldr	r3, [r7, #12]
 800ab7a:	689a      	ldr	r2, [r3, #8]
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ab80:	425b      	negs	r3, r3
 800ab82:	441a      	add	r2, r3
 800ab84:	68fb      	ldr	r3, [r7, #12]
 800ab86:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	2b02      	cmp	r3, #2
 800ab8c:	d105      	bne.n	800ab9a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800ab8e:	693b      	ldr	r3, [r7, #16]
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d002      	beq.n	800ab9a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800ab94:	693b      	ldr	r3, [r7, #16]
 800ab96:	3b01      	subs	r3, #1
 800ab98:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ab9a:	693b      	ldr	r3, [r7, #16]
 800ab9c:	1c5a      	adds	r2, r3, #1
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800aba2:	697b      	ldr	r3, [r7, #20]
}
 800aba4:	4618      	mov	r0, r3
 800aba6:	3718      	adds	r7, #24
 800aba8:	46bd      	mov	sp, r7
 800abaa:	bd80      	pop	{r7, pc}

0800abac <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800abac:	b580      	push	{r7, lr}
 800abae:	b082      	sub	sp, #8
 800abb0:	af00      	add	r7, sp, #0
 800abb2:	6078      	str	r0, [r7, #4]
 800abb4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800abba:	2b00      	cmp	r3, #0
 800abbc:	d018      	beq.n	800abf0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800abbe:	687b      	ldr	r3, [r7, #4]
 800abc0:	68da      	ldr	r2, [r3, #12]
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800abc6:	441a      	add	r2, r3
 800abc8:	687b      	ldr	r3, [r7, #4]
 800abca:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	68da      	ldr	r2, [r3, #12]
 800abd0:	687b      	ldr	r3, [r7, #4]
 800abd2:	689b      	ldr	r3, [r3, #8]
 800abd4:	429a      	cmp	r2, r3
 800abd6:	d303      	bcc.n	800abe0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800abd8:	687b      	ldr	r3, [r7, #4]
 800abda:	681a      	ldr	r2, [r3, #0]
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	68d9      	ldr	r1, [r3, #12]
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800abe8:	461a      	mov	r2, r3
 800abea:	6838      	ldr	r0, [r7, #0]
 800abec:	f003 f81f 	bl	800dc2e <memcpy>
	}
}
 800abf0:	bf00      	nop
 800abf2:	3708      	adds	r7, #8
 800abf4:	46bd      	mov	sp, r7
 800abf6:	bd80      	pop	{r7, pc}

0800abf8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800abf8:	b580      	push	{r7, lr}
 800abfa:	b084      	sub	sp, #16
 800abfc:	af00      	add	r7, sp, #0
 800abfe:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800ac00:	f001 fd9a 	bl	800c738 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ac0a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ac0c:	e011      	b.n	800ac32 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ac0e:	687b      	ldr	r3, [r7, #4]
 800ac10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	d012      	beq.n	800ac3c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ac16:	687b      	ldr	r3, [r7, #4]
 800ac18:	3324      	adds	r3, #36	@ 0x24
 800ac1a:	4618      	mov	r0, r3
 800ac1c:	f000 fd5c 	bl	800b6d8 <xTaskRemoveFromEventList>
 800ac20:	4603      	mov	r3, r0
 800ac22:	2b00      	cmp	r3, #0
 800ac24:	d001      	beq.n	800ac2a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800ac26:	f000 fe35 	bl	800b894 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800ac2a:	7bfb      	ldrb	r3, [r7, #15]
 800ac2c:	3b01      	subs	r3, #1
 800ac2e:	b2db      	uxtb	r3, r3
 800ac30:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800ac32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	dce9      	bgt.n	800ac0e <prvUnlockQueue+0x16>
 800ac3a:	e000      	b.n	800ac3e <prvUnlockQueue+0x46>
					break;
 800ac3c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800ac3e:	687b      	ldr	r3, [r7, #4]
 800ac40:	22ff      	movs	r2, #255	@ 0xff
 800ac42:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 800ac46:	f001 fda9 	bl	800c79c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800ac4a:	f001 fd75 	bl	800c738 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800ac4e:	687b      	ldr	r3, [r7, #4]
 800ac50:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ac54:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ac56:	e011      	b.n	800ac7c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	691b      	ldr	r3, [r3, #16]
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d012      	beq.n	800ac86 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800ac60:	687b      	ldr	r3, [r7, #4]
 800ac62:	3310      	adds	r3, #16
 800ac64:	4618      	mov	r0, r3
 800ac66:	f000 fd37 	bl	800b6d8 <xTaskRemoveFromEventList>
 800ac6a:	4603      	mov	r3, r0
 800ac6c:	2b00      	cmp	r3, #0
 800ac6e:	d001      	beq.n	800ac74 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800ac70:	f000 fe10 	bl	800b894 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800ac74:	7bbb      	ldrb	r3, [r7, #14]
 800ac76:	3b01      	subs	r3, #1
 800ac78:	b2db      	uxtb	r3, r3
 800ac7a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800ac7c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	dce9      	bgt.n	800ac58 <prvUnlockQueue+0x60>
 800ac84:	e000      	b.n	800ac88 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800ac86:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	22ff      	movs	r2, #255	@ 0xff
 800ac8c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800ac90:	f001 fd84 	bl	800c79c <vPortExitCritical>
}
 800ac94:	bf00      	nop
 800ac96:	3710      	adds	r7, #16
 800ac98:	46bd      	mov	sp, r7
 800ac9a:	bd80      	pop	{r7, pc}

0800ac9c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800ac9c:	b580      	push	{r7, lr}
 800ac9e:	b084      	sub	sp, #16
 800aca0:	af00      	add	r7, sp, #0
 800aca2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800aca4:	f001 fd48 	bl	800c738 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800acac:	2b00      	cmp	r3, #0
 800acae:	d102      	bne.n	800acb6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800acb0:	2301      	movs	r3, #1
 800acb2:	60fb      	str	r3, [r7, #12]
 800acb4:	e001      	b.n	800acba <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800acb6:	2300      	movs	r3, #0
 800acb8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800acba:	f001 fd6f 	bl	800c79c <vPortExitCritical>

	return xReturn;
 800acbe:	68fb      	ldr	r3, [r7, #12]
}
 800acc0:	4618      	mov	r0, r3
 800acc2:	3710      	adds	r7, #16
 800acc4:	46bd      	mov	sp, r7
 800acc6:	bd80      	pop	{r7, pc}

0800acc8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800acc8:	b580      	push	{r7, lr}
 800acca:	b084      	sub	sp, #16
 800accc:	af00      	add	r7, sp, #0
 800acce:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800acd0:	f001 fd32 	bl	800c738 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800acd4:	687b      	ldr	r3, [r7, #4]
 800acd6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800acdc:	429a      	cmp	r2, r3
 800acde:	d102      	bne.n	800ace6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800ace0:	2301      	movs	r3, #1
 800ace2:	60fb      	str	r3, [r7, #12]
 800ace4:	e001      	b.n	800acea <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800ace6:	2300      	movs	r3, #0
 800ace8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800acea:	f001 fd57 	bl	800c79c <vPortExitCritical>

	return xReturn;
 800acee:	68fb      	ldr	r3, [r7, #12]
}
 800acf0:	4618      	mov	r0, r3
 800acf2:	3710      	adds	r7, #16
 800acf4:	46bd      	mov	sp, r7
 800acf6:	bd80      	pop	{r7, pc}

0800acf8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800acf8:	b480      	push	{r7}
 800acfa:	b085      	sub	sp, #20
 800acfc:	af00      	add	r7, sp, #0
 800acfe:	6078      	str	r0, [r7, #4]
 800ad00:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ad02:	2300      	movs	r3, #0
 800ad04:	60fb      	str	r3, [r7, #12]
 800ad06:	e014      	b.n	800ad32 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800ad08:	4a0f      	ldr	r2, [pc, #60]	@ (800ad48 <vQueueAddToRegistry+0x50>)
 800ad0a:	68fb      	ldr	r3, [r7, #12]
 800ad0c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800ad10:	2b00      	cmp	r3, #0
 800ad12:	d10b      	bne.n	800ad2c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800ad14:	490c      	ldr	r1, [pc, #48]	@ (800ad48 <vQueueAddToRegistry+0x50>)
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	683a      	ldr	r2, [r7, #0]
 800ad1a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800ad1e:	4a0a      	ldr	r2, [pc, #40]	@ (800ad48 <vQueueAddToRegistry+0x50>)
 800ad20:	68fb      	ldr	r3, [r7, #12]
 800ad22:	00db      	lsls	r3, r3, #3
 800ad24:	4413      	add	r3, r2
 800ad26:	687a      	ldr	r2, [r7, #4]
 800ad28:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800ad2a:	e006      	b.n	800ad3a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800ad2c:	68fb      	ldr	r3, [r7, #12]
 800ad2e:	3301      	adds	r3, #1
 800ad30:	60fb      	str	r3, [r7, #12]
 800ad32:	68fb      	ldr	r3, [r7, #12]
 800ad34:	2b07      	cmp	r3, #7
 800ad36:	d9e7      	bls.n	800ad08 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800ad38:	bf00      	nop
 800ad3a:	bf00      	nop
 800ad3c:	3714      	adds	r7, #20
 800ad3e:	46bd      	mov	sp, r7
 800ad40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad44:	4770      	bx	lr
 800ad46:	bf00      	nop
 800ad48:	20000dec 	.word	0x20000dec

0800ad4c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800ad4c:	b580      	push	{r7, lr}
 800ad4e:	b086      	sub	sp, #24
 800ad50:	af00      	add	r7, sp, #0
 800ad52:	60f8      	str	r0, [r7, #12]
 800ad54:	60b9      	str	r1, [r7, #8]
 800ad56:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800ad58:	68fb      	ldr	r3, [r7, #12]
 800ad5a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800ad5c:	f001 fcec 	bl	800c738 <vPortEnterCritical>
 800ad60:	697b      	ldr	r3, [r7, #20]
 800ad62:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800ad66:	b25b      	sxtb	r3, r3
 800ad68:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ad6c:	d103      	bne.n	800ad76 <vQueueWaitForMessageRestricted+0x2a>
 800ad6e:	697b      	ldr	r3, [r7, #20]
 800ad70:	2200      	movs	r2, #0
 800ad72:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800ad76:	697b      	ldr	r3, [r7, #20]
 800ad78:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800ad7c:	b25b      	sxtb	r3, r3
 800ad7e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800ad82:	d103      	bne.n	800ad8c <vQueueWaitForMessageRestricted+0x40>
 800ad84:	697b      	ldr	r3, [r7, #20]
 800ad86:	2200      	movs	r2, #0
 800ad88:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800ad8c:	f001 fd06 	bl	800c79c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800ad90:	697b      	ldr	r3, [r7, #20]
 800ad92:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d106      	bne.n	800ada6 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800ad98:	697b      	ldr	r3, [r7, #20]
 800ad9a:	3324      	adds	r3, #36	@ 0x24
 800ad9c:	687a      	ldr	r2, [r7, #4]
 800ad9e:	68b9      	ldr	r1, [r7, #8]
 800ada0:	4618      	mov	r0, r3
 800ada2:	f000 fc6d 	bl	800b680 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800ada6:	6978      	ldr	r0, [r7, #20]
 800ada8:	f7ff ff26 	bl	800abf8 <prvUnlockQueue>
	}
 800adac:	bf00      	nop
 800adae:	3718      	adds	r7, #24
 800adb0:	46bd      	mov	sp, r7
 800adb2:	bd80      	pop	{r7, pc}

0800adb4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800adb4:	b580      	push	{r7, lr}
 800adb6:	b08e      	sub	sp, #56	@ 0x38
 800adb8:	af04      	add	r7, sp, #16
 800adba:	60f8      	str	r0, [r7, #12]
 800adbc:	60b9      	str	r1, [r7, #8]
 800adbe:	607a      	str	r2, [r7, #4]
 800adc0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800adc2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d10b      	bne.n	800ade0 <xTaskCreateStatic+0x2c>
	__asm volatile
 800adc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800adcc:	f383 8811 	msr	BASEPRI, r3
 800add0:	f3bf 8f6f 	isb	sy
 800add4:	f3bf 8f4f 	dsb	sy
 800add8:	623b      	str	r3, [r7, #32]
}
 800adda:	bf00      	nop
 800addc:	bf00      	nop
 800adde:	e7fd      	b.n	800addc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800ade0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ade2:	2b00      	cmp	r3, #0
 800ade4:	d10b      	bne.n	800adfe <xTaskCreateStatic+0x4a>
	__asm volatile
 800ade6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800adea:	f383 8811 	msr	BASEPRI, r3
 800adee:	f3bf 8f6f 	isb	sy
 800adf2:	f3bf 8f4f 	dsb	sy
 800adf6:	61fb      	str	r3, [r7, #28]
}
 800adf8:	bf00      	nop
 800adfa:	bf00      	nop
 800adfc:	e7fd      	b.n	800adfa <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800adfe:	23a8      	movs	r3, #168	@ 0xa8
 800ae00:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800ae02:	693b      	ldr	r3, [r7, #16]
 800ae04:	2ba8      	cmp	r3, #168	@ 0xa8
 800ae06:	d00b      	beq.n	800ae20 <xTaskCreateStatic+0x6c>
	__asm volatile
 800ae08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ae0c:	f383 8811 	msr	BASEPRI, r3
 800ae10:	f3bf 8f6f 	isb	sy
 800ae14:	f3bf 8f4f 	dsb	sy
 800ae18:	61bb      	str	r3, [r7, #24]
}
 800ae1a:	bf00      	nop
 800ae1c:	bf00      	nop
 800ae1e:	e7fd      	b.n	800ae1c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800ae20:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800ae22:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae24:	2b00      	cmp	r3, #0
 800ae26:	d01e      	beq.n	800ae66 <xTaskCreateStatic+0xb2>
 800ae28:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800ae2a:	2b00      	cmp	r3, #0
 800ae2c:	d01b      	beq.n	800ae66 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ae2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800ae30:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800ae32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae34:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800ae36:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800ae38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae3a:	2202      	movs	r2, #2
 800ae3c:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800ae40:	2300      	movs	r3, #0
 800ae42:	9303      	str	r3, [sp, #12]
 800ae44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ae46:	9302      	str	r3, [sp, #8]
 800ae48:	f107 0314 	add.w	r3, r7, #20
 800ae4c:	9301      	str	r3, [sp, #4]
 800ae4e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800ae50:	9300      	str	r3, [sp, #0]
 800ae52:	683b      	ldr	r3, [r7, #0]
 800ae54:	687a      	ldr	r2, [r7, #4]
 800ae56:	68b9      	ldr	r1, [r7, #8]
 800ae58:	68f8      	ldr	r0, [r7, #12]
 800ae5a:	f000 f851 	bl	800af00 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ae5e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800ae60:	f000 f8f6 	bl	800b050 <prvAddNewTaskToReadyList>
 800ae64:	e001      	b.n	800ae6a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 800ae66:	2300      	movs	r3, #0
 800ae68:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800ae6a:	697b      	ldr	r3, [r7, #20]
	}
 800ae6c:	4618      	mov	r0, r3
 800ae6e:	3728      	adds	r7, #40	@ 0x28
 800ae70:	46bd      	mov	sp, r7
 800ae72:	bd80      	pop	{r7, pc}

0800ae74 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800ae74:	b580      	push	{r7, lr}
 800ae76:	b08c      	sub	sp, #48	@ 0x30
 800ae78:	af04      	add	r7, sp, #16
 800ae7a:	60f8      	str	r0, [r7, #12]
 800ae7c:	60b9      	str	r1, [r7, #8]
 800ae7e:	603b      	str	r3, [r7, #0]
 800ae80:	4613      	mov	r3, r2
 800ae82:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800ae84:	88fb      	ldrh	r3, [r7, #6]
 800ae86:	009b      	lsls	r3, r3, #2
 800ae88:	4618      	mov	r0, r3
 800ae8a:	f001 fd77 	bl	800c97c <pvPortMalloc>
 800ae8e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800ae90:	697b      	ldr	r3, [r7, #20]
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d00e      	beq.n	800aeb4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800ae96:	20a8      	movs	r0, #168	@ 0xa8
 800ae98:	f001 fd70 	bl	800c97c <pvPortMalloc>
 800ae9c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800ae9e:	69fb      	ldr	r3, [r7, #28]
 800aea0:	2b00      	cmp	r3, #0
 800aea2:	d003      	beq.n	800aeac <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800aea4:	69fb      	ldr	r3, [r7, #28]
 800aea6:	697a      	ldr	r2, [r7, #20]
 800aea8:	631a      	str	r2, [r3, #48]	@ 0x30
 800aeaa:	e005      	b.n	800aeb8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800aeac:	6978      	ldr	r0, [r7, #20]
 800aeae:	f001 fe33 	bl	800cb18 <vPortFree>
 800aeb2:	e001      	b.n	800aeb8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800aeb4:	2300      	movs	r3, #0
 800aeb6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800aeb8:	69fb      	ldr	r3, [r7, #28]
 800aeba:	2b00      	cmp	r3, #0
 800aebc:	d017      	beq.n	800aeee <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800aebe:	69fb      	ldr	r3, [r7, #28]
 800aec0:	2200      	movs	r2, #0
 800aec2:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800aec6:	88fa      	ldrh	r2, [r7, #6]
 800aec8:	2300      	movs	r3, #0
 800aeca:	9303      	str	r3, [sp, #12]
 800aecc:	69fb      	ldr	r3, [r7, #28]
 800aece:	9302      	str	r3, [sp, #8]
 800aed0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800aed2:	9301      	str	r3, [sp, #4]
 800aed4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800aed6:	9300      	str	r3, [sp, #0]
 800aed8:	683b      	ldr	r3, [r7, #0]
 800aeda:	68b9      	ldr	r1, [r7, #8]
 800aedc:	68f8      	ldr	r0, [r7, #12]
 800aede:	f000 f80f 	bl	800af00 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800aee2:	69f8      	ldr	r0, [r7, #28]
 800aee4:	f000 f8b4 	bl	800b050 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800aee8:	2301      	movs	r3, #1
 800aeea:	61bb      	str	r3, [r7, #24]
 800aeec:	e002      	b.n	800aef4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800aeee:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800aef2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800aef4:	69bb      	ldr	r3, [r7, #24]
	}
 800aef6:	4618      	mov	r0, r3
 800aef8:	3720      	adds	r7, #32
 800aefa:	46bd      	mov	sp, r7
 800aefc:	bd80      	pop	{r7, pc}
	...

0800af00 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800af00:	b580      	push	{r7, lr}
 800af02:	b088      	sub	sp, #32
 800af04:	af00      	add	r7, sp, #0
 800af06:	60f8      	str	r0, [r7, #12]
 800af08:	60b9      	str	r1, [r7, #8]
 800af0a:	607a      	str	r2, [r7, #4]
 800af0c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800af0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af10:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800af12:	687b      	ldr	r3, [r7, #4]
 800af14:	009b      	lsls	r3, r3, #2
 800af16:	461a      	mov	r2, r3
 800af18:	21a5      	movs	r1, #165	@ 0xa5
 800af1a:	f002 fdb3 	bl	800da84 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800af1e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af20:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800af22:	687b      	ldr	r3, [r7, #4]
 800af24:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 800af28:	3b01      	subs	r3, #1
 800af2a:	009b      	lsls	r3, r3, #2
 800af2c:	4413      	add	r3, r2
 800af2e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800af30:	69bb      	ldr	r3, [r7, #24]
 800af32:	f023 0307 	bic.w	r3, r3, #7
 800af36:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800af38:	69bb      	ldr	r3, [r7, #24]
 800af3a:	f003 0307 	and.w	r3, r3, #7
 800af3e:	2b00      	cmp	r3, #0
 800af40:	d00b      	beq.n	800af5a <prvInitialiseNewTask+0x5a>
	__asm volatile
 800af42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800af46:	f383 8811 	msr	BASEPRI, r3
 800af4a:	f3bf 8f6f 	isb	sy
 800af4e:	f3bf 8f4f 	dsb	sy
 800af52:	617b      	str	r3, [r7, #20]
}
 800af54:	bf00      	nop
 800af56:	bf00      	nop
 800af58:	e7fd      	b.n	800af56 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800af5a:	68bb      	ldr	r3, [r7, #8]
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d01f      	beq.n	800afa0 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800af60:	2300      	movs	r3, #0
 800af62:	61fb      	str	r3, [r7, #28]
 800af64:	e012      	b.n	800af8c <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800af66:	68ba      	ldr	r2, [r7, #8]
 800af68:	69fb      	ldr	r3, [r7, #28]
 800af6a:	4413      	add	r3, r2
 800af6c:	7819      	ldrb	r1, [r3, #0]
 800af6e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800af70:	69fb      	ldr	r3, [r7, #28]
 800af72:	4413      	add	r3, r2
 800af74:	3334      	adds	r3, #52	@ 0x34
 800af76:	460a      	mov	r2, r1
 800af78:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800af7a:	68ba      	ldr	r2, [r7, #8]
 800af7c:	69fb      	ldr	r3, [r7, #28]
 800af7e:	4413      	add	r3, r2
 800af80:	781b      	ldrb	r3, [r3, #0]
 800af82:	2b00      	cmp	r3, #0
 800af84:	d006      	beq.n	800af94 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800af86:	69fb      	ldr	r3, [r7, #28]
 800af88:	3301      	adds	r3, #1
 800af8a:	61fb      	str	r3, [r7, #28]
 800af8c:	69fb      	ldr	r3, [r7, #28]
 800af8e:	2b0f      	cmp	r3, #15
 800af90:	d9e9      	bls.n	800af66 <prvInitialiseNewTask+0x66>
 800af92:	e000      	b.n	800af96 <prvInitialiseNewTask+0x96>
			{
				break;
 800af94:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800af96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800af98:	2200      	movs	r2, #0
 800af9a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800af9e:	e003      	b.n	800afa8 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800afa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afa2:	2200      	movs	r2, #0
 800afa4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800afa8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800afaa:	2b37      	cmp	r3, #55	@ 0x37
 800afac:	d901      	bls.n	800afb2 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800afae:	2337      	movs	r3, #55	@ 0x37
 800afb0:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800afb2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afb4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800afb6:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800afb8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afba:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800afbc:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800afbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afc0:	2200      	movs	r2, #0
 800afc2:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800afc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afc6:	3304      	adds	r3, #4
 800afc8:	4618      	mov	r0, r3
 800afca:	f7fe ff25 	bl	8009e18 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800afce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afd0:	3318      	adds	r3, #24
 800afd2:	4618      	mov	r0, r3
 800afd4:	f7fe ff20 	bl	8009e18 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800afd8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afda:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800afdc:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800afde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800afe0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800afe4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afe6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800afe8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800afea:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800afec:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800afee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aff0:	2200      	movs	r2, #0
 800aff2:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800aff6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800aff8:	2200      	movs	r2, #0
 800affa:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800affe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b000:	3354      	adds	r3, #84	@ 0x54
 800b002:	224c      	movs	r2, #76	@ 0x4c
 800b004:	2100      	movs	r1, #0
 800b006:	4618      	mov	r0, r3
 800b008:	f002 fd3c 	bl	800da84 <memset>
 800b00c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b00e:	4a0d      	ldr	r2, [pc, #52]	@ (800b044 <prvInitialiseNewTask+0x144>)
 800b010:	659a      	str	r2, [r3, #88]	@ 0x58
 800b012:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b014:	4a0c      	ldr	r2, [pc, #48]	@ (800b048 <prvInitialiseNewTask+0x148>)
 800b016:	65da      	str	r2, [r3, #92]	@ 0x5c
 800b018:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b01a:	4a0c      	ldr	r2, [pc, #48]	@ (800b04c <prvInitialiseNewTask+0x14c>)
 800b01c:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800b01e:	683a      	ldr	r2, [r7, #0]
 800b020:	68f9      	ldr	r1, [r7, #12]
 800b022:	69b8      	ldr	r0, [r7, #24]
 800b024:	f001 fa5a 	bl	800c4dc <pxPortInitialiseStack>
 800b028:	4602      	mov	r2, r0
 800b02a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800b02c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800b02e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b030:	2b00      	cmp	r3, #0
 800b032:	d002      	beq.n	800b03a <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800b034:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800b036:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800b038:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b03a:	bf00      	nop
 800b03c:	3720      	adds	r7, #32
 800b03e:	46bd      	mov	sp, r7
 800b040:	bd80      	pop	{r7, pc}
 800b042:	bf00      	nop
 800b044:	20005080 	.word	0x20005080
 800b048:	200050e8 	.word	0x200050e8
 800b04c:	20005150 	.word	0x20005150

0800b050 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800b050:	b580      	push	{r7, lr}
 800b052:	b082      	sub	sp, #8
 800b054:	af00      	add	r7, sp, #0
 800b056:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800b058:	f001 fb6e 	bl	800c738 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800b05c:	4b2d      	ldr	r3, [pc, #180]	@ (800b114 <prvAddNewTaskToReadyList+0xc4>)
 800b05e:	681b      	ldr	r3, [r3, #0]
 800b060:	3301      	adds	r3, #1
 800b062:	4a2c      	ldr	r2, [pc, #176]	@ (800b114 <prvAddNewTaskToReadyList+0xc4>)
 800b064:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800b066:	4b2c      	ldr	r3, [pc, #176]	@ (800b118 <prvAddNewTaskToReadyList+0xc8>)
 800b068:	681b      	ldr	r3, [r3, #0]
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	d109      	bne.n	800b082 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800b06e:	4a2a      	ldr	r2, [pc, #168]	@ (800b118 <prvAddNewTaskToReadyList+0xc8>)
 800b070:	687b      	ldr	r3, [r7, #4]
 800b072:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800b074:	4b27      	ldr	r3, [pc, #156]	@ (800b114 <prvAddNewTaskToReadyList+0xc4>)
 800b076:	681b      	ldr	r3, [r3, #0]
 800b078:	2b01      	cmp	r3, #1
 800b07a:	d110      	bne.n	800b09e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800b07c:	f000 fc2e 	bl	800b8dc <prvInitialiseTaskLists>
 800b080:	e00d      	b.n	800b09e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800b082:	4b26      	ldr	r3, [pc, #152]	@ (800b11c <prvAddNewTaskToReadyList+0xcc>)
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	2b00      	cmp	r3, #0
 800b088:	d109      	bne.n	800b09e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800b08a:	4b23      	ldr	r3, [pc, #140]	@ (800b118 <prvAddNewTaskToReadyList+0xc8>)
 800b08c:	681b      	ldr	r3, [r3, #0]
 800b08e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b090:	687b      	ldr	r3, [r7, #4]
 800b092:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b094:	429a      	cmp	r2, r3
 800b096:	d802      	bhi.n	800b09e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800b098:	4a1f      	ldr	r2, [pc, #124]	@ (800b118 <prvAddNewTaskToReadyList+0xc8>)
 800b09a:	687b      	ldr	r3, [r7, #4]
 800b09c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800b09e:	4b20      	ldr	r3, [pc, #128]	@ (800b120 <prvAddNewTaskToReadyList+0xd0>)
 800b0a0:	681b      	ldr	r3, [r3, #0]
 800b0a2:	3301      	adds	r3, #1
 800b0a4:	4a1e      	ldr	r2, [pc, #120]	@ (800b120 <prvAddNewTaskToReadyList+0xd0>)
 800b0a6:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800b0a8:	4b1d      	ldr	r3, [pc, #116]	@ (800b120 <prvAddNewTaskToReadyList+0xd0>)
 800b0aa:	681a      	ldr	r2, [r3, #0]
 800b0ac:	687b      	ldr	r3, [r7, #4]
 800b0ae:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800b0b0:	687b      	ldr	r3, [r7, #4]
 800b0b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b0b4:	4b1b      	ldr	r3, [pc, #108]	@ (800b124 <prvAddNewTaskToReadyList+0xd4>)
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	429a      	cmp	r2, r3
 800b0ba:	d903      	bls.n	800b0c4 <prvAddNewTaskToReadyList+0x74>
 800b0bc:	687b      	ldr	r3, [r7, #4]
 800b0be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b0c0:	4a18      	ldr	r2, [pc, #96]	@ (800b124 <prvAddNewTaskToReadyList+0xd4>)
 800b0c2:	6013      	str	r3, [r2, #0]
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b0c8:	4613      	mov	r3, r2
 800b0ca:	009b      	lsls	r3, r3, #2
 800b0cc:	4413      	add	r3, r2
 800b0ce:	009b      	lsls	r3, r3, #2
 800b0d0:	4a15      	ldr	r2, [pc, #84]	@ (800b128 <prvAddNewTaskToReadyList+0xd8>)
 800b0d2:	441a      	add	r2, r3
 800b0d4:	687b      	ldr	r3, [r7, #4]
 800b0d6:	3304      	adds	r3, #4
 800b0d8:	4619      	mov	r1, r3
 800b0da:	4610      	mov	r0, r2
 800b0dc:	f7fe fea9 	bl	8009e32 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800b0e0:	f001 fb5c 	bl	800c79c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800b0e4:	4b0d      	ldr	r3, [pc, #52]	@ (800b11c <prvAddNewTaskToReadyList+0xcc>)
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	2b00      	cmp	r3, #0
 800b0ea:	d00e      	beq.n	800b10a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800b0ec:	4b0a      	ldr	r3, [pc, #40]	@ (800b118 <prvAddNewTaskToReadyList+0xc8>)
 800b0ee:	681b      	ldr	r3, [r3, #0]
 800b0f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b0f2:	687b      	ldr	r3, [r7, #4]
 800b0f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b0f6:	429a      	cmp	r2, r3
 800b0f8:	d207      	bcs.n	800b10a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800b0fa:	4b0c      	ldr	r3, [pc, #48]	@ (800b12c <prvAddNewTaskToReadyList+0xdc>)
 800b0fc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b100:	601a      	str	r2, [r3, #0]
 800b102:	f3bf 8f4f 	dsb	sy
 800b106:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b10a:	bf00      	nop
 800b10c:	3708      	adds	r7, #8
 800b10e:	46bd      	mov	sp, r7
 800b110:	bd80      	pop	{r7, pc}
 800b112:	bf00      	nop
 800b114:	20001300 	.word	0x20001300
 800b118:	20000e2c 	.word	0x20000e2c
 800b11c:	2000130c 	.word	0x2000130c
 800b120:	2000131c 	.word	0x2000131c
 800b124:	20001308 	.word	0x20001308
 800b128:	20000e30 	.word	0x20000e30
 800b12c:	e000ed04 	.word	0xe000ed04

0800b130 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800b130:	b580      	push	{r7, lr}
 800b132:	b084      	sub	sp, #16
 800b134:	af00      	add	r7, sp, #0
 800b136:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800b138:	2300      	movs	r3, #0
 800b13a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d018      	beq.n	800b174 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800b142:	4b14      	ldr	r3, [pc, #80]	@ (800b194 <vTaskDelay+0x64>)
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	2b00      	cmp	r3, #0
 800b148:	d00b      	beq.n	800b162 <vTaskDelay+0x32>
	__asm volatile
 800b14a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b14e:	f383 8811 	msr	BASEPRI, r3
 800b152:	f3bf 8f6f 	isb	sy
 800b156:	f3bf 8f4f 	dsb	sy
 800b15a:	60bb      	str	r3, [r7, #8]
}
 800b15c:	bf00      	nop
 800b15e:	bf00      	nop
 800b160:	e7fd      	b.n	800b15e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800b162:	f000 f88b 	bl	800b27c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800b166:	2100      	movs	r1, #0
 800b168:	6878      	ldr	r0, [r7, #4]
 800b16a:	f000 fe09 	bl	800bd80 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800b16e:	f000 f893 	bl	800b298 <xTaskResumeAll>
 800b172:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	2b00      	cmp	r3, #0
 800b178:	d107      	bne.n	800b18a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800b17a:	4b07      	ldr	r3, [pc, #28]	@ (800b198 <vTaskDelay+0x68>)
 800b17c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b180:	601a      	str	r2, [r3, #0]
 800b182:	f3bf 8f4f 	dsb	sy
 800b186:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800b18a:	bf00      	nop
 800b18c:	3710      	adds	r7, #16
 800b18e:	46bd      	mov	sp, r7
 800b190:	bd80      	pop	{r7, pc}
 800b192:	bf00      	nop
 800b194:	20001328 	.word	0x20001328
 800b198:	e000ed04 	.word	0xe000ed04

0800b19c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800b19c:	b580      	push	{r7, lr}
 800b19e:	b08a      	sub	sp, #40	@ 0x28
 800b1a0:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800b1a2:	2300      	movs	r3, #0
 800b1a4:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800b1a6:	2300      	movs	r3, #0
 800b1a8:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800b1aa:	463a      	mov	r2, r7
 800b1ac:	1d39      	adds	r1, r7, #4
 800b1ae:	f107 0308 	add.w	r3, r7, #8
 800b1b2:	4618      	mov	r0, r3
 800b1b4:	f7fe fddc 	bl	8009d70 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800b1b8:	6839      	ldr	r1, [r7, #0]
 800b1ba:	687b      	ldr	r3, [r7, #4]
 800b1bc:	68ba      	ldr	r2, [r7, #8]
 800b1be:	9202      	str	r2, [sp, #8]
 800b1c0:	9301      	str	r3, [sp, #4]
 800b1c2:	2300      	movs	r3, #0
 800b1c4:	9300      	str	r3, [sp, #0]
 800b1c6:	2300      	movs	r3, #0
 800b1c8:	460a      	mov	r2, r1
 800b1ca:	4924      	ldr	r1, [pc, #144]	@ (800b25c <vTaskStartScheduler+0xc0>)
 800b1cc:	4824      	ldr	r0, [pc, #144]	@ (800b260 <vTaskStartScheduler+0xc4>)
 800b1ce:	f7ff fdf1 	bl	800adb4 <xTaskCreateStatic>
 800b1d2:	4603      	mov	r3, r0
 800b1d4:	4a23      	ldr	r2, [pc, #140]	@ (800b264 <vTaskStartScheduler+0xc8>)
 800b1d6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800b1d8:	4b22      	ldr	r3, [pc, #136]	@ (800b264 <vTaskStartScheduler+0xc8>)
 800b1da:	681b      	ldr	r3, [r3, #0]
 800b1dc:	2b00      	cmp	r3, #0
 800b1de:	d002      	beq.n	800b1e6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800b1e0:	2301      	movs	r3, #1
 800b1e2:	617b      	str	r3, [r7, #20]
 800b1e4:	e001      	b.n	800b1ea <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800b1e6:	2300      	movs	r3, #0
 800b1e8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800b1ea:	697b      	ldr	r3, [r7, #20]
 800b1ec:	2b01      	cmp	r3, #1
 800b1ee:	d102      	bne.n	800b1f6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800b1f0:	f000 fe1a 	bl	800be28 <xTimerCreateTimerTask>
 800b1f4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800b1f6:	697b      	ldr	r3, [r7, #20]
 800b1f8:	2b01      	cmp	r3, #1
 800b1fa:	d11b      	bne.n	800b234 <vTaskStartScheduler+0x98>
	__asm volatile
 800b1fc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b200:	f383 8811 	msr	BASEPRI, r3
 800b204:	f3bf 8f6f 	isb	sy
 800b208:	f3bf 8f4f 	dsb	sy
 800b20c:	613b      	str	r3, [r7, #16]
}
 800b20e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b210:	4b15      	ldr	r3, [pc, #84]	@ (800b268 <vTaskStartScheduler+0xcc>)
 800b212:	681b      	ldr	r3, [r3, #0]
 800b214:	3354      	adds	r3, #84	@ 0x54
 800b216:	4a15      	ldr	r2, [pc, #84]	@ (800b26c <vTaskStartScheduler+0xd0>)
 800b218:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800b21a:	4b15      	ldr	r3, [pc, #84]	@ (800b270 <vTaskStartScheduler+0xd4>)
 800b21c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b220:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800b222:	4b14      	ldr	r3, [pc, #80]	@ (800b274 <vTaskStartScheduler+0xd8>)
 800b224:	2201      	movs	r2, #1
 800b226:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800b228:	4b13      	ldr	r3, [pc, #76]	@ (800b278 <vTaskStartScheduler+0xdc>)
 800b22a:	2200      	movs	r2, #0
 800b22c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800b22e:	f001 f9df 	bl	800c5f0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800b232:	e00f      	b.n	800b254 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800b234:	697b      	ldr	r3, [r7, #20]
 800b236:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b23a:	d10b      	bne.n	800b254 <vTaskStartScheduler+0xb8>
	__asm volatile
 800b23c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b240:	f383 8811 	msr	BASEPRI, r3
 800b244:	f3bf 8f6f 	isb	sy
 800b248:	f3bf 8f4f 	dsb	sy
 800b24c:	60fb      	str	r3, [r7, #12]
}
 800b24e:	bf00      	nop
 800b250:	bf00      	nop
 800b252:	e7fd      	b.n	800b250 <vTaskStartScheduler+0xb4>
}
 800b254:	bf00      	nop
 800b256:	3718      	adds	r7, #24
 800b258:	46bd      	mov	sp, r7
 800b25a:	bd80      	pop	{r7, pc}
 800b25c:	08010530 	.word	0x08010530
 800b260:	0800b8ad 	.word	0x0800b8ad
 800b264:	20001324 	.word	0x20001324
 800b268:	20000e2c 	.word	0x20000e2c
 800b26c:	20000028 	.word	0x20000028
 800b270:	20001320 	.word	0x20001320
 800b274:	2000130c 	.word	0x2000130c
 800b278:	20001304 	.word	0x20001304

0800b27c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800b27c:	b480      	push	{r7}
 800b27e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800b280:	4b04      	ldr	r3, [pc, #16]	@ (800b294 <vTaskSuspendAll+0x18>)
 800b282:	681b      	ldr	r3, [r3, #0]
 800b284:	3301      	adds	r3, #1
 800b286:	4a03      	ldr	r2, [pc, #12]	@ (800b294 <vTaskSuspendAll+0x18>)
 800b288:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800b28a:	bf00      	nop
 800b28c:	46bd      	mov	sp, r7
 800b28e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b292:	4770      	bx	lr
 800b294:	20001328 	.word	0x20001328

0800b298 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800b298:	b580      	push	{r7, lr}
 800b29a:	b084      	sub	sp, #16
 800b29c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800b29e:	2300      	movs	r3, #0
 800b2a0:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800b2a2:	2300      	movs	r3, #0
 800b2a4:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800b2a6:	4b42      	ldr	r3, [pc, #264]	@ (800b3b0 <xTaskResumeAll+0x118>)
 800b2a8:	681b      	ldr	r3, [r3, #0]
 800b2aa:	2b00      	cmp	r3, #0
 800b2ac:	d10b      	bne.n	800b2c6 <xTaskResumeAll+0x2e>
	__asm volatile
 800b2ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b2b2:	f383 8811 	msr	BASEPRI, r3
 800b2b6:	f3bf 8f6f 	isb	sy
 800b2ba:	f3bf 8f4f 	dsb	sy
 800b2be:	603b      	str	r3, [r7, #0]
}
 800b2c0:	bf00      	nop
 800b2c2:	bf00      	nop
 800b2c4:	e7fd      	b.n	800b2c2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800b2c6:	f001 fa37 	bl	800c738 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800b2ca:	4b39      	ldr	r3, [pc, #228]	@ (800b3b0 <xTaskResumeAll+0x118>)
 800b2cc:	681b      	ldr	r3, [r3, #0]
 800b2ce:	3b01      	subs	r3, #1
 800b2d0:	4a37      	ldr	r2, [pc, #220]	@ (800b3b0 <xTaskResumeAll+0x118>)
 800b2d2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b2d4:	4b36      	ldr	r3, [pc, #216]	@ (800b3b0 <xTaskResumeAll+0x118>)
 800b2d6:	681b      	ldr	r3, [r3, #0]
 800b2d8:	2b00      	cmp	r3, #0
 800b2da:	d162      	bne.n	800b3a2 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800b2dc:	4b35      	ldr	r3, [pc, #212]	@ (800b3b4 <xTaskResumeAll+0x11c>)
 800b2de:	681b      	ldr	r3, [r3, #0]
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d05e      	beq.n	800b3a2 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b2e4:	e02f      	b.n	800b346 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b2e6:	4b34      	ldr	r3, [pc, #208]	@ (800b3b8 <xTaskResumeAll+0x120>)
 800b2e8:	68db      	ldr	r3, [r3, #12]
 800b2ea:	68db      	ldr	r3, [r3, #12]
 800b2ec:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b2ee:	68fb      	ldr	r3, [r7, #12]
 800b2f0:	3318      	adds	r3, #24
 800b2f2:	4618      	mov	r0, r3
 800b2f4:	f7fe fdfa 	bl	8009eec <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b2f8:	68fb      	ldr	r3, [r7, #12]
 800b2fa:	3304      	adds	r3, #4
 800b2fc:	4618      	mov	r0, r3
 800b2fe:	f7fe fdf5 	bl	8009eec <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800b302:	68fb      	ldr	r3, [r7, #12]
 800b304:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b306:	4b2d      	ldr	r3, [pc, #180]	@ (800b3bc <xTaskResumeAll+0x124>)
 800b308:	681b      	ldr	r3, [r3, #0]
 800b30a:	429a      	cmp	r2, r3
 800b30c:	d903      	bls.n	800b316 <xTaskResumeAll+0x7e>
 800b30e:	68fb      	ldr	r3, [r7, #12]
 800b310:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b312:	4a2a      	ldr	r2, [pc, #168]	@ (800b3bc <xTaskResumeAll+0x124>)
 800b314:	6013      	str	r3, [r2, #0]
 800b316:	68fb      	ldr	r3, [r7, #12]
 800b318:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b31a:	4613      	mov	r3, r2
 800b31c:	009b      	lsls	r3, r3, #2
 800b31e:	4413      	add	r3, r2
 800b320:	009b      	lsls	r3, r3, #2
 800b322:	4a27      	ldr	r2, [pc, #156]	@ (800b3c0 <xTaskResumeAll+0x128>)
 800b324:	441a      	add	r2, r3
 800b326:	68fb      	ldr	r3, [r7, #12]
 800b328:	3304      	adds	r3, #4
 800b32a:	4619      	mov	r1, r3
 800b32c:	4610      	mov	r0, r2
 800b32e:	f7fe fd80 	bl	8009e32 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b332:	68fb      	ldr	r3, [r7, #12]
 800b334:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b336:	4b23      	ldr	r3, [pc, #140]	@ (800b3c4 <xTaskResumeAll+0x12c>)
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b33c:	429a      	cmp	r2, r3
 800b33e:	d302      	bcc.n	800b346 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800b340:	4b21      	ldr	r3, [pc, #132]	@ (800b3c8 <xTaskResumeAll+0x130>)
 800b342:	2201      	movs	r2, #1
 800b344:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800b346:	4b1c      	ldr	r3, [pc, #112]	@ (800b3b8 <xTaskResumeAll+0x120>)
 800b348:	681b      	ldr	r3, [r3, #0]
 800b34a:	2b00      	cmp	r3, #0
 800b34c:	d1cb      	bne.n	800b2e6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800b34e:	68fb      	ldr	r3, [r7, #12]
 800b350:	2b00      	cmp	r3, #0
 800b352:	d001      	beq.n	800b358 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800b354:	f000 fb66 	bl	800ba24 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800b358:	4b1c      	ldr	r3, [pc, #112]	@ (800b3cc <xTaskResumeAll+0x134>)
 800b35a:	681b      	ldr	r3, [r3, #0]
 800b35c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800b35e:	687b      	ldr	r3, [r7, #4]
 800b360:	2b00      	cmp	r3, #0
 800b362:	d010      	beq.n	800b386 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800b364:	f000 f846 	bl	800b3f4 <xTaskIncrementTick>
 800b368:	4603      	mov	r3, r0
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d002      	beq.n	800b374 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800b36e:	4b16      	ldr	r3, [pc, #88]	@ (800b3c8 <xTaskResumeAll+0x130>)
 800b370:	2201      	movs	r2, #1
 800b372:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800b374:	687b      	ldr	r3, [r7, #4]
 800b376:	3b01      	subs	r3, #1
 800b378:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800b37a:	687b      	ldr	r3, [r7, #4]
 800b37c:	2b00      	cmp	r3, #0
 800b37e:	d1f1      	bne.n	800b364 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800b380:	4b12      	ldr	r3, [pc, #72]	@ (800b3cc <xTaskResumeAll+0x134>)
 800b382:	2200      	movs	r2, #0
 800b384:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800b386:	4b10      	ldr	r3, [pc, #64]	@ (800b3c8 <xTaskResumeAll+0x130>)
 800b388:	681b      	ldr	r3, [r3, #0]
 800b38a:	2b00      	cmp	r3, #0
 800b38c:	d009      	beq.n	800b3a2 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800b38e:	2301      	movs	r3, #1
 800b390:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800b392:	4b0f      	ldr	r3, [pc, #60]	@ (800b3d0 <xTaskResumeAll+0x138>)
 800b394:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b398:	601a      	str	r2, [r3, #0]
 800b39a:	f3bf 8f4f 	dsb	sy
 800b39e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800b3a2:	f001 f9fb 	bl	800c79c <vPortExitCritical>

	return xAlreadyYielded;
 800b3a6:	68bb      	ldr	r3, [r7, #8]
}
 800b3a8:	4618      	mov	r0, r3
 800b3aa:	3710      	adds	r7, #16
 800b3ac:	46bd      	mov	sp, r7
 800b3ae:	bd80      	pop	{r7, pc}
 800b3b0:	20001328 	.word	0x20001328
 800b3b4:	20001300 	.word	0x20001300
 800b3b8:	200012c0 	.word	0x200012c0
 800b3bc:	20001308 	.word	0x20001308
 800b3c0:	20000e30 	.word	0x20000e30
 800b3c4:	20000e2c 	.word	0x20000e2c
 800b3c8:	20001314 	.word	0x20001314
 800b3cc:	20001310 	.word	0x20001310
 800b3d0:	e000ed04 	.word	0xe000ed04

0800b3d4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800b3d4:	b480      	push	{r7}
 800b3d6:	b083      	sub	sp, #12
 800b3d8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800b3da:	4b05      	ldr	r3, [pc, #20]	@ (800b3f0 <xTaskGetTickCount+0x1c>)
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800b3e0:	687b      	ldr	r3, [r7, #4]
}
 800b3e2:	4618      	mov	r0, r3
 800b3e4:	370c      	adds	r7, #12
 800b3e6:	46bd      	mov	sp, r7
 800b3e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b3ec:	4770      	bx	lr
 800b3ee:	bf00      	nop
 800b3f0:	20001304 	.word	0x20001304

0800b3f4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800b3f4:	b580      	push	{r7, lr}
 800b3f6:	b086      	sub	sp, #24
 800b3f8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800b3fa:	2300      	movs	r3, #0
 800b3fc:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b3fe:	4b4f      	ldr	r3, [pc, #316]	@ (800b53c <xTaskIncrementTick+0x148>)
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	2b00      	cmp	r3, #0
 800b404:	f040 8090 	bne.w	800b528 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800b408:	4b4d      	ldr	r3, [pc, #308]	@ (800b540 <xTaskIncrementTick+0x14c>)
 800b40a:	681b      	ldr	r3, [r3, #0]
 800b40c:	3301      	adds	r3, #1
 800b40e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800b410:	4a4b      	ldr	r2, [pc, #300]	@ (800b540 <xTaskIncrementTick+0x14c>)
 800b412:	693b      	ldr	r3, [r7, #16]
 800b414:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800b416:	693b      	ldr	r3, [r7, #16]
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d121      	bne.n	800b460 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800b41c:	4b49      	ldr	r3, [pc, #292]	@ (800b544 <xTaskIncrementTick+0x150>)
 800b41e:	681b      	ldr	r3, [r3, #0]
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	2b00      	cmp	r3, #0
 800b424:	d00b      	beq.n	800b43e <xTaskIncrementTick+0x4a>
	__asm volatile
 800b426:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b42a:	f383 8811 	msr	BASEPRI, r3
 800b42e:	f3bf 8f6f 	isb	sy
 800b432:	f3bf 8f4f 	dsb	sy
 800b436:	603b      	str	r3, [r7, #0]
}
 800b438:	bf00      	nop
 800b43a:	bf00      	nop
 800b43c:	e7fd      	b.n	800b43a <xTaskIncrementTick+0x46>
 800b43e:	4b41      	ldr	r3, [pc, #260]	@ (800b544 <xTaskIncrementTick+0x150>)
 800b440:	681b      	ldr	r3, [r3, #0]
 800b442:	60fb      	str	r3, [r7, #12]
 800b444:	4b40      	ldr	r3, [pc, #256]	@ (800b548 <xTaskIncrementTick+0x154>)
 800b446:	681b      	ldr	r3, [r3, #0]
 800b448:	4a3e      	ldr	r2, [pc, #248]	@ (800b544 <xTaskIncrementTick+0x150>)
 800b44a:	6013      	str	r3, [r2, #0]
 800b44c:	4a3e      	ldr	r2, [pc, #248]	@ (800b548 <xTaskIncrementTick+0x154>)
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	6013      	str	r3, [r2, #0]
 800b452:	4b3e      	ldr	r3, [pc, #248]	@ (800b54c <xTaskIncrementTick+0x158>)
 800b454:	681b      	ldr	r3, [r3, #0]
 800b456:	3301      	adds	r3, #1
 800b458:	4a3c      	ldr	r2, [pc, #240]	@ (800b54c <xTaskIncrementTick+0x158>)
 800b45a:	6013      	str	r3, [r2, #0]
 800b45c:	f000 fae2 	bl	800ba24 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800b460:	4b3b      	ldr	r3, [pc, #236]	@ (800b550 <xTaskIncrementTick+0x15c>)
 800b462:	681b      	ldr	r3, [r3, #0]
 800b464:	693a      	ldr	r2, [r7, #16]
 800b466:	429a      	cmp	r2, r3
 800b468:	d349      	bcc.n	800b4fe <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b46a:	4b36      	ldr	r3, [pc, #216]	@ (800b544 <xTaskIncrementTick+0x150>)
 800b46c:	681b      	ldr	r3, [r3, #0]
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	2b00      	cmp	r3, #0
 800b472:	d104      	bne.n	800b47e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800b474:	4b36      	ldr	r3, [pc, #216]	@ (800b550 <xTaskIncrementTick+0x15c>)
 800b476:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800b47a:	601a      	str	r2, [r3, #0]
					break;
 800b47c:	e03f      	b.n	800b4fe <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b47e:	4b31      	ldr	r3, [pc, #196]	@ (800b544 <xTaskIncrementTick+0x150>)
 800b480:	681b      	ldr	r3, [r3, #0]
 800b482:	68db      	ldr	r3, [r3, #12]
 800b484:	68db      	ldr	r3, [r3, #12]
 800b486:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800b488:	68bb      	ldr	r3, [r7, #8]
 800b48a:	685b      	ldr	r3, [r3, #4]
 800b48c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800b48e:	693a      	ldr	r2, [r7, #16]
 800b490:	687b      	ldr	r3, [r7, #4]
 800b492:	429a      	cmp	r2, r3
 800b494:	d203      	bcs.n	800b49e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800b496:	4a2e      	ldr	r2, [pc, #184]	@ (800b550 <xTaskIncrementTick+0x15c>)
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800b49c:	e02f      	b.n	800b4fe <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b49e:	68bb      	ldr	r3, [r7, #8]
 800b4a0:	3304      	adds	r3, #4
 800b4a2:	4618      	mov	r0, r3
 800b4a4:	f7fe fd22 	bl	8009eec <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800b4a8:	68bb      	ldr	r3, [r7, #8]
 800b4aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800b4ac:	2b00      	cmp	r3, #0
 800b4ae:	d004      	beq.n	800b4ba <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800b4b0:	68bb      	ldr	r3, [r7, #8]
 800b4b2:	3318      	adds	r3, #24
 800b4b4:	4618      	mov	r0, r3
 800b4b6:	f7fe fd19 	bl	8009eec <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800b4ba:	68bb      	ldr	r3, [r7, #8]
 800b4bc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b4be:	4b25      	ldr	r3, [pc, #148]	@ (800b554 <xTaskIncrementTick+0x160>)
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	429a      	cmp	r2, r3
 800b4c4:	d903      	bls.n	800b4ce <xTaskIncrementTick+0xda>
 800b4c6:	68bb      	ldr	r3, [r7, #8]
 800b4c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b4ca:	4a22      	ldr	r2, [pc, #136]	@ (800b554 <xTaskIncrementTick+0x160>)
 800b4cc:	6013      	str	r3, [r2, #0]
 800b4ce:	68bb      	ldr	r3, [r7, #8]
 800b4d0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b4d2:	4613      	mov	r3, r2
 800b4d4:	009b      	lsls	r3, r3, #2
 800b4d6:	4413      	add	r3, r2
 800b4d8:	009b      	lsls	r3, r3, #2
 800b4da:	4a1f      	ldr	r2, [pc, #124]	@ (800b558 <xTaskIncrementTick+0x164>)
 800b4dc:	441a      	add	r2, r3
 800b4de:	68bb      	ldr	r3, [r7, #8]
 800b4e0:	3304      	adds	r3, #4
 800b4e2:	4619      	mov	r1, r3
 800b4e4:	4610      	mov	r0, r2
 800b4e6:	f7fe fca4 	bl	8009e32 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800b4ea:	68bb      	ldr	r3, [r7, #8]
 800b4ec:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b4ee:	4b1b      	ldr	r3, [pc, #108]	@ (800b55c <xTaskIncrementTick+0x168>)
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b4f4:	429a      	cmp	r2, r3
 800b4f6:	d3b8      	bcc.n	800b46a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800b4f8:	2301      	movs	r3, #1
 800b4fa:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800b4fc:	e7b5      	b.n	800b46a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800b4fe:	4b17      	ldr	r3, [pc, #92]	@ (800b55c <xTaskIncrementTick+0x168>)
 800b500:	681b      	ldr	r3, [r3, #0]
 800b502:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b504:	4914      	ldr	r1, [pc, #80]	@ (800b558 <xTaskIncrementTick+0x164>)
 800b506:	4613      	mov	r3, r2
 800b508:	009b      	lsls	r3, r3, #2
 800b50a:	4413      	add	r3, r2
 800b50c:	009b      	lsls	r3, r3, #2
 800b50e:	440b      	add	r3, r1
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	2b01      	cmp	r3, #1
 800b514:	d901      	bls.n	800b51a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 800b516:	2301      	movs	r3, #1
 800b518:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800b51a:	4b11      	ldr	r3, [pc, #68]	@ (800b560 <xTaskIncrementTick+0x16c>)
 800b51c:	681b      	ldr	r3, [r3, #0]
 800b51e:	2b00      	cmp	r3, #0
 800b520:	d007      	beq.n	800b532 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800b522:	2301      	movs	r3, #1
 800b524:	617b      	str	r3, [r7, #20]
 800b526:	e004      	b.n	800b532 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800b528:	4b0e      	ldr	r3, [pc, #56]	@ (800b564 <xTaskIncrementTick+0x170>)
 800b52a:	681b      	ldr	r3, [r3, #0]
 800b52c:	3301      	adds	r3, #1
 800b52e:	4a0d      	ldr	r2, [pc, #52]	@ (800b564 <xTaskIncrementTick+0x170>)
 800b530:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800b532:	697b      	ldr	r3, [r7, #20]
}
 800b534:	4618      	mov	r0, r3
 800b536:	3718      	adds	r7, #24
 800b538:	46bd      	mov	sp, r7
 800b53a:	bd80      	pop	{r7, pc}
 800b53c:	20001328 	.word	0x20001328
 800b540:	20001304 	.word	0x20001304
 800b544:	200012b8 	.word	0x200012b8
 800b548:	200012bc 	.word	0x200012bc
 800b54c:	20001318 	.word	0x20001318
 800b550:	20001320 	.word	0x20001320
 800b554:	20001308 	.word	0x20001308
 800b558:	20000e30 	.word	0x20000e30
 800b55c:	20000e2c 	.word	0x20000e2c
 800b560:	20001314 	.word	0x20001314
 800b564:	20001310 	.word	0x20001310

0800b568 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800b568:	b480      	push	{r7}
 800b56a:	b085      	sub	sp, #20
 800b56c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800b56e:	4b2b      	ldr	r3, [pc, #172]	@ (800b61c <vTaskSwitchContext+0xb4>)
 800b570:	681b      	ldr	r3, [r3, #0]
 800b572:	2b00      	cmp	r3, #0
 800b574:	d003      	beq.n	800b57e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800b576:	4b2a      	ldr	r3, [pc, #168]	@ (800b620 <vTaskSwitchContext+0xb8>)
 800b578:	2201      	movs	r2, #1
 800b57a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800b57c:	e047      	b.n	800b60e <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800b57e:	4b28      	ldr	r3, [pc, #160]	@ (800b620 <vTaskSwitchContext+0xb8>)
 800b580:	2200      	movs	r2, #0
 800b582:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b584:	4b27      	ldr	r3, [pc, #156]	@ (800b624 <vTaskSwitchContext+0xbc>)
 800b586:	681b      	ldr	r3, [r3, #0]
 800b588:	60fb      	str	r3, [r7, #12]
 800b58a:	e011      	b.n	800b5b0 <vTaskSwitchContext+0x48>
 800b58c:	68fb      	ldr	r3, [r7, #12]
 800b58e:	2b00      	cmp	r3, #0
 800b590:	d10b      	bne.n	800b5aa <vTaskSwitchContext+0x42>
	__asm volatile
 800b592:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b596:	f383 8811 	msr	BASEPRI, r3
 800b59a:	f3bf 8f6f 	isb	sy
 800b59e:	f3bf 8f4f 	dsb	sy
 800b5a2:	607b      	str	r3, [r7, #4]
}
 800b5a4:	bf00      	nop
 800b5a6:	bf00      	nop
 800b5a8:	e7fd      	b.n	800b5a6 <vTaskSwitchContext+0x3e>
 800b5aa:	68fb      	ldr	r3, [r7, #12]
 800b5ac:	3b01      	subs	r3, #1
 800b5ae:	60fb      	str	r3, [r7, #12]
 800b5b0:	491d      	ldr	r1, [pc, #116]	@ (800b628 <vTaskSwitchContext+0xc0>)
 800b5b2:	68fa      	ldr	r2, [r7, #12]
 800b5b4:	4613      	mov	r3, r2
 800b5b6:	009b      	lsls	r3, r3, #2
 800b5b8:	4413      	add	r3, r2
 800b5ba:	009b      	lsls	r3, r3, #2
 800b5bc:	440b      	add	r3, r1
 800b5be:	681b      	ldr	r3, [r3, #0]
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	d0e3      	beq.n	800b58c <vTaskSwitchContext+0x24>
 800b5c4:	68fa      	ldr	r2, [r7, #12]
 800b5c6:	4613      	mov	r3, r2
 800b5c8:	009b      	lsls	r3, r3, #2
 800b5ca:	4413      	add	r3, r2
 800b5cc:	009b      	lsls	r3, r3, #2
 800b5ce:	4a16      	ldr	r2, [pc, #88]	@ (800b628 <vTaskSwitchContext+0xc0>)
 800b5d0:	4413      	add	r3, r2
 800b5d2:	60bb      	str	r3, [r7, #8]
 800b5d4:	68bb      	ldr	r3, [r7, #8]
 800b5d6:	685b      	ldr	r3, [r3, #4]
 800b5d8:	685a      	ldr	r2, [r3, #4]
 800b5da:	68bb      	ldr	r3, [r7, #8]
 800b5dc:	605a      	str	r2, [r3, #4]
 800b5de:	68bb      	ldr	r3, [r7, #8]
 800b5e0:	685a      	ldr	r2, [r3, #4]
 800b5e2:	68bb      	ldr	r3, [r7, #8]
 800b5e4:	3308      	adds	r3, #8
 800b5e6:	429a      	cmp	r2, r3
 800b5e8:	d104      	bne.n	800b5f4 <vTaskSwitchContext+0x8c>
 800b5ea:	68bb      	ldr	r3, [r7, #8]
 800b5ec:	685b      	ldr	r3, [r3, #4]
 800b5ee:	685a      	ldr	r2, [r3, #4]
 800b5f0:	68bb      	ldr	r3, [r7, #8]
 800b5f2:	605a      	str	r2, [r3, #4]
 800b5f4:	68bb      	ldr	r3, [r7, #8]
 800b5f6:	685b      	ldr	r3, [r3, #4]
 800b5f8:	68db      	ldr	r3, [r3, #12]
 800b5fa:	4a0c      	ldr	r2, [pc, #48]	@ (800b62c <vTaskSwitchContext+0xc4>)
 800b5fc:	6013      	str	r3, [r2, #0]
 800b5fe:	4a09      	ldr	r2, [pc, #36]	@ (800b624 <vTaskSwitchContext+0xbc>)
 800b600:	68fb      	ldr	r3, [r7, #12]
 800b602:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800b604:	4b09      	ldr	r3, [pc, #36]	@ (800b62c <vTaskSwitchContext+0xc4>)
 800b606:	681b      	ldr	r3, [r3, #0]
 800b608:	3354      	adds	r3, #84	@ 0x54
 800b60a:	4a09      	ldr	r2, [pc, #36]	@ (800b630 <vTaskSwitchContext+0xc8>)
 800b60c:	6013      	str	r3, [r2, #0]
}
 800b60e:	bf00      	nop
 800b610:	3714      	adds	r7, #20
 800b612:	46bd      	mov	sp, r7
 800b614:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b618:	4770      	bx	lr
 800b61a:	bf00      	nop
 800b61c:	20001328 	.word	0x20001328
 800b620:	20001314 	.word	0x20001314
 800b624:	20001308 	.word	0x20001308
 800b628:	20000e30 	.word	0x20000e30
 800b62c:	20000e2c 	.word	0x20000e2c
 800b630:	20000028 	.word	0x20000028

0800b634 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800b634:	b580      	push	{r7, lr}
 800b636:	b084      	sub	sp, #16
 800b638:	af00      	add	r7, sp, #0
 800b63a:	6078      	str	r0, [r7, #4]
 800b63c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800b63e:	687b      	ldr	r3, [r7, #4]
 800b640:	2b00      	cmp	r3, #0
 800b642:	d10b      	bne.n	800b65c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 800b644:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b648:	f383 8811 	msr	BASEPRI, r3
 800b64c:	f3bf 8f6f 	isb	sy
 800b650:	f3bf 8f4f 	dsb	sy
 800b654:	60fb      	str	r3, [r7, #12]
}
 800b656:	bf00      	nop
 800b658:	bf00      	nop
 800b65a:	e7fd      	b.n	800b658 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b65c:	4b07      	ldr	r3, [pc, #28]	@ (800b67c <vTaskPlaceOnEventList+0x48>)
 800b65e:	681b      	ldr	r3, [r3, #0]
 800b660:	3318      	adds	r3, #24
 800b662:	4619      	mov	r1, r3
 800b664:	6878      	ldr	r0, [r7, #4]
 800b666:	f7fe fc08 	bl	8009e7a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800b66a:	2101      	movs	r1, #1
 800b66c:	6838      	ldr	r0, [r7, #0]
 800b66e:	f000 fb87 	bl	800bd80 <prvAddCurrentTaskToDelayedList>
}
 800b672:	bf00      	nop
 800b674:	3710      	adds	r7, #16
 800b676:	46bd      	mov	sp, r7
 800b678:	bd80      	pop	{r7, pc}
 800b67a:	bf00      	nop
 800b67c:	20000e2c 	.word	0x20000e2c

0800b680 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800b680:	b580      	push	{r7, lr}
 800b682:	b086      	sub	sp, #24
 800b684:	af00      	add	r7, sp, #0
 800b686:	60f8      	str	r0, [r7, #12]
 800b688:	60b9      	str	r1, [r7, #8]
 800b68a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800b68c:	68fb      	ldr	r3, [r7, #12]
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d10b      	bne.n	800b6aa <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800b692:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b696:	f383 8811 	msr	BASEPRI, r3
 800b69a:	f3bf 8f6f 	isb	sy
 800b69e:	f3bf 8f4f 	dsb	sy
 800b6a2:	617b      	str	r3, [r7, #20]
}
 800b6a4:	bf00      	nop
 800b6a6:	bf00      	nop
 800b6a8:	e7fd      	b.n	800b6a6 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800b6aa:	4b0a      	ldr	r3, [pc, #40]	@ (800b6d4 <vTaskPlaceOnEventListRestricted+0x54>)
 800b6ac:	681b      	ldr	r3, [r3, #0]
 800b6ae:	3318      	adds	r3, #24
 800b6b0:	4619      	mov	r1, r3
 800b6b2:	68f8      	ldr	r0, [r7, #12]
 800b6b4:	f7fe fbbd 	bl	8009e32 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800b6b8:	687b      	ldr	r3, [r7, #4]
 800b6ba:	2b00      	cmp	r3, #0
 800b6bc:	d002      	beq.n	800b6c4 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800b6be:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800b6c2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800b6c4:	6879      	ldr	r1, [r7, #4]
 800b6c6:	68b8      	ldr	r0, [r7, #8]
 800b6c8:	f000 fb5a 	bl	800bd80 <prvAddCurrentTaskToDelayedList>
	}
 800b6cc:	bf00      	nop
 800b6ce:	3718      	adds	r7, #24
 800b6d0:	46bd      	mov	sp, r7
 800b6d2:	bd80      	pop	{r7, pc}
 800b6d4:	20000e2c 	.word	0x20000e2c

0800b6d8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800b6d8:	b580      	push	{r7, lr}
 800b6da:	b086      	sub	sp, #24
 800b6dc:	af00      	add	r7, sp, #0
 800b6de:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b6e0:	687b      	ldr	r3, [r7, #4]
 800b6e2:	68db      	ldr	r3, [r3, #12]
 800b6e4:	68db      	ldr	r3, [r3, #12]
 800b6e6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800b6e8:	693b      	ldr	r3, [r7, #16]
 800b6ea:	2b00      	cmp	r3, #0
 800b6ec:	d10b      	bne.n	800b706 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800b6ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b6f2:	f383 8811 	msr	BASEPRI, r3
 800b6f6:	f3bf 8f6f 	isb	sy
 800b6fa:	f3bf 8f4f 	dsb	sy
 800b6fe:	60fb      	str	r3, [r7, #12]
}
 800b700:	bf00      	nop
 800b702:	bf00      	nop
 800b704:	e7fd      	b.n	800b702 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800b706:	693b      	ldr	r3, [r7, #16]
 800b708:	3318      	adds	r3, #24
 800b70a:	4618      	mov	r0, r3
 800b70c:	f7fe fbee 	bl	8009eec <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800b710:	4b1d      	ldr	r3, [pc, #116]	@ (800b788 <xTaskRemoveFromEventList+0xb0>)
 800b712:	681b      	ldr	r3, [r3, #0]
 800b714:	2b00      	cmp	r3, #0
 800b716:	d11d      	bne.n	800b754 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800b718:	693b      	ldr	r3, [r7, #16]
 800b71a:	3304      	adds	r3, #4
 800b71c:	4618      	mov	r0, r3
 800b71e:	f7fe fbe5 	bl	8009eec <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800b722:	693b      	ldr	r3, [r7, #16]
 800b724:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b726:	4b19      	ldr	r3, [pc, #100]	@ (800b78c <xTaskRemoveFromEventList+0xb4>)
 800b728:	681b      	ldr	r3, [r3, #0]
 800b72a:	429a      	cmp	r2, r3
 800b72c:	d903      	bls.n	800b736 <xTaskRemoveFromEventList+0x5e>
 800b72e:	693b      	ldr	r3, [r7, #16]
 800b730:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b732:	4a16      	ldr	r2, [pc, #88]	@ (800b78c <xTaskRemoveFromEventList+0xb4>)
 800b734:	6013      	str	r3, [r2, #0]
 800b736:	693b      	ldr	r3, [r7, #16]
 800b738:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b73a:	4613      	mov	r3, r2
 800b73c:	009b      	lsls	r3, r3, #2
 800b73e:	4413      	add	r3, r2
 800b740:	009b      	lsls	r3, r3, #2
 800b742:	4a13      	ldr	r2, [pc, #76]	@ (800b790 <xTaskRemoveFromEventList+0xb8>)
 800b744:	441a      	add	r2, r3
 800b746:	693b      	ldr	r3, [r7, #16]
 800b748:	3304      	adds	r3, #4
 800b74a:	4619      	mov	r1, r3
 800b74c:	4610      	mov	r0, r2
 800b74e:	f7fe fb70 	bl	8009e32 <vListInsertEnd>
 800b752:	e005      	b.n	800b760 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800b754:	693b      	ldr	r3, [r7, #16]
 800b756:	3318      	adds	r3, #24
 800b758:	4619      	mov	r1, r3
 800b75a:	480e      	ldr	r0, [pc, #56]	@ (800b794 <xTaskRemoveFromEventList+0xbc>)
 800b75c:	f7fe fb69 	bl	8009e32 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800b760:	693b      	ldr	r3, [r7, #16]
 800b762:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b764:	4b0c      	ldr	r3, [pc, #48]	@ (800b798 <xTaskRemoveFromEventList+0xc0>)
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b76a:	429a      	cmp	r2, r3
 800b76c:	d905      	bls.n	800b77a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800b76e:	2301      	movs	r3, #1
 800b770:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800b772:	4b0a      	ldr	r3, [pc, #40]	@ (800b79c <xTaskRemoveFromEventList+0xc4>)
 800b774:	2201      	movs	r2, #1
 800b776:	601a      	str	r2, [r3, #0]
 800b778:	e001      	b.n	800b77e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800b77a:	2300      	movs	r3, #0
 800b77c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800b77e:	697b      	ldr	r3, [r7, #20]
}
 800b780:	4618      	mov	r0, r3
 800b782:	3718      	adds	r7, #24
 800b784:	46bd      	mov	sp, r7
 800b786:	bd80      	pop	{r7, pc}
 800b788:	20001328 	.word	0x20001328
 800b78c:	20001308 	.word	0x20001308
 800b790:	20000e30 	.word	0x20000e30
 800b794:	200012c0 	.word	0x200012c0
 800b798:	20000e2c 	.word	0x20000e2c
 800b79c:	20001314 	.word	0x20001314

0800b7a0 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800b7a0:	b480      	push	{r7}
 800b7a2:	b083      	sub	sp, #12
 800b7a4:	af00      	add	r7, sp, #0
 800b7a6:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800b7a8:	4b06      	ldr	r3, [pc, #24]	@ (800b7c4 <vTaskInternalSetTimeOutState+0x24>)
 800b7aa:	681a      	ldr	r2, [r3, #0]
 800b7ac:	687b      	ldr	r3, [r7, #4]
 800b7ae:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800b7b0:	4b05      	ldr	r3, [pc, #20]	@ (800b7c8 <vTaskInternalSetTimeOutState+0x28>)
 800b7b2:	681a      	ldr	r2, [r3, #0]
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	605a      	str	r2, [r3, #4]
}
 800b7b8:	bf00      	nop
 800b7ba:	370c      	adds	r7, #12
 800b7bc:	46bd      	mov	sp, r7
 800b7be:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b7c2:	4770      	bx	lr
 800b7c4:	20001318 	.word	0x20001318
 800b7c8:	20001304 	.word	0x20001304

0800b7cc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800b7cc:	b580      	push	{r7, lr}
 800b7ce:	b088      	sub	sp, #32
 800b7d0:	af00      	add	r7, sp, #0
 800b7d2:	6078      	str	r0, [r7, #4]
 800b7d4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800b7d6:	687b      	ldr	r3, [r7, #4]
 800b7d8:	2b00      	cmp	r3, #0
 800b7da:	d10b      	bne.n	800b7f4 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800b7dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b7e0:	f383 8811 	msr	BASEPRI, r3
 800b7e4:	f3bf 8f6f 	isb	sy
 800b7e8:	f3bf 8f4f 	dsb	sy
 800b7ec:	613b      	str	r3, [r7, #16]
}
 800b7ee:	bf00      	nop
 800b7f0:	bf00      	nop
 800b7f2:	e7fd      	b.n	800b7f0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800b7f4:	683b      	ldr	r3, [r7, #0]
 800b7f6:	2b00      	cmp	r3, #0
 800b7f8:	d10b      	bne.n	800b812 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800b7fa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800b7fe:	f383 8811 	msr	BASEPRI, r3
 800b802:	f3bf 8f6f 	isb	sy
 800b806:	f3bf 8f4f 	dsb	sy
 800b80a:	60fb      	str	r3, [r7, #12]
}
 800b80c:	bf00      	nop
 800b80e:	bf00      	nop
 800b810:	e7fd      	b.n	800b80e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800b812:	f000 ff91 	bl	800c738 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800b816:	4b1d      	ldr	r3, [pc, #116]	@ (800b88c <xTaskCheckForTimeOut+0xc0>)
 800b818:	681b      	ldr	r3, [r3, #0]
 800b81a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800b81c:	687b      	ldr	r3, [r7, #4]
 800b81e:	685b      	ldr	r3, [r3, #4]
 800b820:	69ba      	ldr	r2, [r7, #24]
 800b822:	1ad3      	subs	r3, r2, r3
 800b824:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800b826:	683b      	ldr	r3, [r7, #0]
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800b82e:	d102      	bne.n	800b836 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800b830:	2300      	movs	r3, #0
 800b832:	61fb      	str	r3, [r7, #28]
 800b834:	e023      	b.n	800b87e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800b836:	687b      	ldr	r3, [r7, #4]
 800b838:	681a      	ldr	r2, [r3, #0]
 800b83a:	4b15      	ldr	r3, [pc, #84]	@ (800b890 <xTaskCheckForTimeOut+0xc4>)
 800b83c:	681b      	ldr	r3, [r3, #0]
 800b83e:	429a      	cmp	r2, r3
 800b840:	d007      	beq.n	800b852 <xTaskCheckForTimeOut+0x86>
 800b842:	687b      	ldr	r3, [r7, #4]
 800b844:	685b      	ldr	r3, [r3, #4]
 800b846:	69ba      	ldr	r2, [r7, #24]
 800b848:	429a      	cmp	r2, r3
 800b84a:	d302      	bcc.n	800b852 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800b84c:	2301      	movs	r3, #1
 800b84e:	61fb      	str	r3, [r7, #28]
 800b850:	e015      	b.n	800b87e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800b852:	683b      	ldr	r3, [r7, #0]
 800b854:	681b      	ldr	r3, [r3, #0]
 800b856:	697a      	ldr	r2, [r7, #20]
 800b858:	429a      	cmp	r2, r3
 800b85a:	d20b      	bcs.n	800b874 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800b85c:	683b      	ldr	r3, [r7, #0]
 800b85e:	681a      	ldr	r2, [r3, #0]
 800b860:	697b      	ldr	r3, [r7, #20]
 800b862:	1ad2      	subs	r2, r2, r3
 800b864:	683b      	ldr	r3, [r7, #0]
 800b866:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800b868:	6878      	ldr	r0, [r7, #4]
 800b86a:	f7ff ff99 	bl	800b7a0 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800b86e:	2300      	movs	r3, #0
 800b870:	61fb      	str	r3, [r7, #28]
 800b872:	e004      	b.n	800b87e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 800b874:	683b      	ldr	r3, [r7, #0]
 800b876:	2200      	movs	r2, #0
 800b878:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800b87a:	2301      	movs	r3, #1
 800b87c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800b87e:	f000 ff8d 	bl	800c79c <vPortExitCritical>

	return xReturn;
 800b882:	69fb      	ldr	r3, [r7, #28]
}
 800b884:	4618      	mov	r0, r3
 800b886:	3720      	adds	r7, #32
 800b888:	46bd      	mov	sp, r7
 800b88a:	bd80      	pop	{r7, pc}
 800b88c:	20001304 	.word	0x20001304
 800b890:	20001318 	.word	0x20001318

0800b894 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800b894:	b480      	push	{r7}
 800b896:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800b898:	4b03      	ldr	r3, [pc, #12]	@ (800b8a8 <vTaskMissedYield+0x14>)
 800b89a:	2201      	movs	r2, #1
 800b89c:	601a      	str	r2, [r3, #0]
}
 800b89e:	bf00      	nop
 800b8a0:	46bd      	mov	sp, r7
 800b8a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8a6:	4770      	bx	lr
 800b8a8:	20001314 	.word	0x20001314

0800b8ac <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800b8ac:	b580      	push	{r7, lr}
 800b8ae:	b082      	sub	sp, #8
 800b8b0:	af00      	add	r7, sp, #0
 800b8b2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800b8b4:	f000 f852 	bl	800b95c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800b8b8:	4b06      	ldr	r3, [pc, #24]	@ (800b8d4 <prvIdleTask+0x28>)
 800b8ba:	681b      	ldr	r3, [r3, #0]
 800b8bc:	2b01      	cmp	r3, #1
 800b8be:	d9f9      	bls.n	800b8b4 <prvIdleTask+0x8>
			{
				taskYIELD();
 800b8c0:	4b05      	ldr	r3, [pc, #20]	@ (800b8d8 <prvIdleTask+0x2c>)
 800b8c2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800b8c6:	601a      	str	r2, [r3, #0]
 800b8c8:	f3bf 8f4f 	dsb	sy
 800b8cc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800b8d0:	e7f0      	b.n	800b8b4 <prvIdleTask+0x8>
 800b8d2:	bf00      	nop
 800b8d4:	20000e30 	.word	0x20000e30
 800b8d8:	e000ed04 	.word	0xe000ed04

0800b8dc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800b8dc:	b580      	push	{r7, lr}
 800b8de:	b082      	sub	sp, #8
 800b8e0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b8e2:	2300      	movs	r3, #0
 800b8e4:	607b      	str	r3, [r7, #4]
 800b8e6:	e00c      	b.n	800b902 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800b8e8:	687a      	ldr	r2, [r7, #4]
 800b8ea:	4613      	mov	r3, r2
 800b8ec:	009b      	lsls	r3, r3, #2
 800b8ee:	4413      	add	r3, r2
 800b8f0:	009b      	lsls	r3, r3, #2
 800b8f2:	4a12      	ldr	r2, [pc, #72]	@ (800b93c <prvInitialiseTaskLists+0x60>)
 800b8f4:	4413      	add	r3, r2
 800b8f6:	4618      	mov	r0, r3
 800b8f8:	f7fe fa6e 	bl	8009dd8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800b8fc:	687b      	ldr	r3, [r7, #4]
 800b8fe:	3301      	adds	r3, #1
 800b900:	607b      	str	r3, [r7, #4]
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	2b37      	cmp	r3, #55	@ 0x37
 800b906:	d9ef      	bls.n	800b8e8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800b908:	480d      	ldr	r0, [pc, #52]	@ (800b940 <prvInitialiseTaskLists+0x64>)
 800b90a:	f7fe fa65 	bl	8009dd8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800b90e:	480d      	ldr	r0, [pc, #52]	@ (800b944 <prvInitialiseTaskLists+0x68>)
 800b910:	f7fe fa62 	bl	8009dd8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800b914:	480c      	ldr	r0, [pc, #48]	@ (800b948 <prvInitialiseTaskLists+0x6c>)
 800b916:	f7fe fa5f 	bl	8009dd8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800b91a:	480c      	ldr	r0, [pc, #48]	@ (800b94c <prvInitialiseTaskLists+0x70>)
 800b91c:	f7fe fa5c 	bl	8009dd8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800b920:	480b      	ldr	r0, [pc, #44]	@ (800b950 <prvInitialiseTaskLists+0x74>)
 800b922:	f7fe fa59 	bl	8009dd8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800b926:	4b0b      	ldr	r3, [pc, #44]	@ (800b954 <prvInitialiseTaskLists+0x78>)
 800b928:	4a05      	ldr	r2, [pc, #20]	@ (800b940 <prvInitialiseTaskLists+0x64>)
 800b92a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800b92c:	4b0a      	ldr	r3, [pc, #40]	@ (800b958 <prvInitialiseTaskLists+0x7c>)
 800b92e:	4a05      	ldr	r2, [pc, #20]	@ (800b944 <prvInitialiseTaskLists+0x68>)
 800b930:	601a      	str	r2, [r3, #0]
}
 800b932:	bf00      	nop
 800b934:	3708      	adds	r7, #8
 800b936:	46bd      	mov	sp, r7
 800b938:	bd80      	pop	{r7, pc}
 800b93a:	bf00      	nop
 800b93c:	20000e30 	.word	0x20000e30
 800b940:	20001290 	.word	0x20001290
 800b944:	200012a4 	.word	0x200012a4
 800b948:	200012c0 	.word	0x200012c0
 800b94c:	200012d4 	.word	0x200012d4
 800b950:	200012ec 	.word	0x200012ec
 800b954:	200012b8 	.word	0x200012b8
 800b958:	200012bc 	.word	0x200012bc

0800b95c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800b95c:	b580      	push	{r7, lr}
 800b95e:	b082      	sub	sp, #8
 800b960:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b962:	e019      	b.n	800b998 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800b964:	f000 fee8 	bl	800c738 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800b968:	4b10      	ldr	r3, [pc, #64]	@ (800b9ac <prvCheckTasksWaitingTermination+0x50>)
 800b96a:	68db      	ldr	r3, [r3, #12]
 800b96c:	68db      	ldr	r3, [r3, #12]
 800b96e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800b970:	687b      	ldr	r3, [r7, #4]
 800b972:	3304      	adds	r3, #4
 800b974:	4618      	mov	r0, r3
 800b976:	f7fe fab9 	bl	8009eec <uxListRemove>
				--uxCurrentNumberOfTasks;
 800b97a:	4b0d      	ldr	r3, [pc, #52]	@ (800b9b0 <prvCheckTasksWaitingTermination+0x54>)
 800b97c:	681b      	ldr	r3, [r3, #0]
 800b97e:	3b01      	subs	r3, #1
 800b980:	4a0b      	ldr	r2, [pc, #44]	@ (800b9b0 <prvCheckTasksWaitingTermination+0x54>)
 800b982:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800b984:	4b0b      	ldr	r3, [pc, #44]	@ (800b9b4 <prvCheckTasksWaitingTermination+0x58>)
 800b986:	681b      	ldr	r3, [r3, #0]
 800b988:	3b01      	subs	r3, #1
 800b98a:	4a0a      	ldr	r2, [pc, #40]	@ (800b9b4 <prvCheckTasksWaitingTermination+0x58>)
 800b98c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800b98e:	f000 ff05 	bl	800c79c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800b992:	6878      	ldr	r0, [r7, #4]
 800b994:	f000 f810 	bl	800b9b8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800b998:	4b06      	ldr	r3, [pc, #24]	@ (800b9b4 <prvCheckTasksWaitingTermination+0x58>)
 800b99a:	681b      	ldr	r3, [r3, #0]
 800b99c:	2b00      	cmp	r3, #0
 800b99e:	d1e1      	bne.n	800b964 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800b9a0:	bf00      	nop
 800b9a2:	bf00      	nop
 800b9a4:	3708      	adds	r7, #8
 800b9a6:	46bd      	mov	sp, r7
 800b9a8:	bd80      	pop	{r7, pc}
 800b9aa:	bf00      	nop
 800b9ac:	200012d4 	.word	0x200012d4
 800b9b0:	20001300 	.word	0x20001300
 800b9b4:	200012e8 	.word	0x200012e8

0800b9b8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800b9b8:	b580      	push	{r7, lr}
 800b9ba:	b084      	sub	sp, #16
 800b9bc:	af00      	add	r7, sp, #0
 800b9be:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800b9c0:	687b      	ldr	r3, [r7, #4]
 800b9c2:	3354      	adds	r3, #84	@ 0x54
 800b9c4:	4618      	mov	r0, r3
 800b9c6:	f002 f879 	bl	800dabc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800b9ca:	687b      	ldr	r3, [r7, #4]
 800b9cc:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800b9d0:	2b00      	cmp	r3, #0
 800b9d2:	d108      	bne.n	800b9e6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800b9d4:	687b      	ldr	r3, [r7, #4]
 800b9d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800b9d8:	4618      	mov	r0, r3
 800b9da:	f001 f89d 	bl	800cb18 <vPortFree>
				vPortFree( pxTCB );
 800b9de:	6878      	ldr	r0, [r7, #4]
 800b9e0:	f001 f89a 	bl	800cb18 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800b9e4:	e019      	b.n	800ba1a <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800b9e6:	687b      	ldr	r3, [r7, #4]
 800b9e8:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800b9ec:	2b01      	cmp	r3, #1
 800b9ee:	d103      	bne.n	800b9f8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800b9f0:	6878      	ldr	r0, [r7, #4]
 800b9f2:	f001 f891 	bl	800cb18 <vPortFree>
	}
 800b9f6:	e010      	b.n	800ba1a <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800b9fe:	2b02      	cmp	r3, #2
 800ba00:	d00b      	beq.n	800ba1a <prvDeleteTCB+0x62>
	__asm volatile
 800ba02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ba06:	f383 8811 	msr	BASEPRI, r3
 800ba0a:	f3bf 8f6f 	isb	sy
 800ba0e:	f3bf 8f4f 	dsb	sy
 800ba12:	60fb      	str	r3, [r7, #12]
}
 800ba14:	bf00      	nop
 800ba16:	bf00      	nop
 800ba18:	e7fd      	b.n	800ba16 <prvDeleteTCB+0x5e>
	}
 800ba1a:	bf00      	nop
 800ba1c:	3710      	adds	r7, #16
 800ba1e:	46bd      	mov	sp, r7
 800ba20:	bd80      	pop	{r7, pc}
	...

0800ba24 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800ba24:	b480      	push	{r7}
 800ba26:	b083      	sub	sp, #12
 800ba28:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ba2a:	4b0c      	ldr	r3, [pc, #48]	@ (800ba5c <prvResetNextTaskUnblockTime+0x38>)
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	d104      	bne.n	800ba3e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800ba34:	4b0a      	ldr	r3, [pc, #40]	@ (800ba60 <prvResetNextTaskUnblockTime+0x3c>)
 800ba36:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ba3a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800ba3c:	e008      	b.n	800ba50 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ba3e:	4b07      	ldr	r3, [pc, #28]	@ (800ba5c <prvResetNextTaskUnblockTime+0x38>)
 800ba40:	681b      	ldr	r3, [r3, #0]
 800ba42:	68db      	ldr	r3, [r3, #12]
 800ba44:	68db      	ldr	r3, [r3, #12]
 800ba46:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800ba48:	687b      	ldr	r3, [r7, #4]
 800ba4a:	685b      	ldr	r3, [r3, #4]
 800ba4c:	4a04      	ldr	r2, [pc, #16]	@ (800ba60 <prvResetNextTaskUnblockTime+0x3c>)
 800ba4e:	6013      	str	r3, [r2, #0]
}
 800ba50:	bf00      	nop
 800ba52:	370c      	adds	r7, #12
 800ba54:	46bd      	mov	sp, r7
 800ba56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba5a:	4770      	bx	lr
 800ba5c:	200012b8 	.word	0x200012b8
 800ba60:	20001320 	.word	0x20001320

0800ba64 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800ba64:	b480      	push	{r7}
 800ba66:	b083      	sub	sp, #12
 800ba68:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800ba6a:	4b0b      	ldr	r3, [pc, #44]	@ (800ba98 <xTaskGetSchedulerState+0x34>)
 800ba6c:	681b      	ldr	r3, [r3, #0]
 800ba6e:	2b00      	cmp	r3, #0
 800ba70:	d102      	bne.n	800ba78 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800ba72:	2301      	movs	r3, #1
 800ba74:	607b      	str	r3, [r7, #4]
 800ba76:	e008      	b.n	800ba8a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800ba78:	4b08      	ldr	r3, [pc, #32]	@ (800ba9c <xTaskGetSchedulerState+0x38>)
 800ba7a:	681b      	ldr	r3, [r3, #0]
 800ba7c:	2b00      	cmp	r3, #0
 800ba7e:	d102      	bne.n	800ba86 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800ba80:	2302      	movs	r3, #2
 800ba82:	607b      	str	r3, [r7, #4]
 800ba84:	e001      	b.n	800ba8a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800ba86:	2300      	movs	r3, #0
 800ba88:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800ba8a:	687b      	ldr	r3, [r7, #4]
	}
 800ba8c:	4618      	mov	r0, r3
 800ba8e:	370c      	adds	r7, #12
 800ba90:	46bd      	mov	sp, r7
 800ba92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba96:	4770      	bx	lr
 800ba98:	2000130c 	.word	0x2000130c
 800ba9c:	20001328 	.word	0x20001328

0800baa0 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 800baa0:	b580      	push	{r7, lr}
 800baa2:	b084      	sub	sp, #16
 800baa4:	af00      	add	r7, sp, #0
 800baa6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800baa8:	687b      	ldr	r3, [r7, #4]
 800baaa:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 800baac:	2300      	movs	r3, #0
 800baae:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	2b00      	cmp	r3, #0
 800bab4:	d051      	beq.n	800bb5a <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800bab6:	68bb      	ldr	r3, [r7, #8]
 800bab8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800baba:	4b2a      	ldr	r3, [pc, #168]	@ (800bb64 <xTaskPriorityInherit+0xc4>)
 800babc:	681b      	ldr	r3, [r3, #0]
 800babe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bac0:	429a      	cmp	r2, r3
 800bac2:	d241      	bcs.n	800bb48 <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800bac4:	68bb      	ldr	r3, [r7, #8]
 800bac6:	699b      	ldr	r3, [r3, #24]
 800bac8:	2b00      	cmp	r3, #0
 800baca:	db06      	blt.n	800bada <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bacc:	4b25      	ldr	r3, [pc, #148]	@ (800bb64 <xTaskPriorityInherit+0xc4>)
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bad2:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800bad6:	68bb      	ldr	r3, [r7, #8]
 800bad8:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 800bada:	68bb      	ldr	r3, [r7, #8]
 800badc:	6959      	ldr	r1, [r3, #20]
 800bade:	68bb      	ldr	r3, [r7, #8]
 800bae0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bae2:	4613      	mov	r3, r2
 800bae4:	009b      	lsls	r3, r3, #2
 800bae6:	4413      	add	r3, r2
 800bae8:	009b      	lsls	r3, r3, #2
 800baea:	4a1f      	ldr	r2, [pc, #124]	@ (800bb68 <xTaskPriorityInherit+0xc8>)
 800baec:	4413      	add	r3, r2
 800baee:	4299      	cmp	r1, r3
 800baf0:	d122      	bne.n	800bb38 <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800baf2:	68bb      	ldr	r3, [r7, #8]
 800baf4:	3304      	adds	r3, #4
 800baf6:	4618      	mov	r0, r3
 800baf8:	f7fe f9f8 	bl	8009eec <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800bafc:	4b19      	ldr	r3, [pc, #100]	@ (800bb64 <xTaskPriorityInherit+0xc4>)
 800bafe:	681b      	ldr	r3, [r3, #0]
 800bb00:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bb02:	68bb      	ldr	r3, [r7, #8]
 800bb04:	62da      	str	r2, [r3, #44]	@ 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 800bb06:	68bb      	ldr	r3, [r7, #8]
 800bb08:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bb0a:	4b18      	ldr	r3, [pc, #96]	@ (800bb6c <xTaskPriorityInherit+0xcc>)
 800bb0c:	681b      	ldr	r3, [r3, #0]
 800bb0e:	429a      	cmp	r2, r3
 800bb10:	d903      	bls.n	800bb1a <xTaskPriorityInherit+0x7a>
 800bb12:	68bb      	ldr	r3, [r7, #8]
 800bb14:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb16:	4a15      	ldr	r2, [pc, #84]	@ (800bb6c <xTaskPriorityInherit+0xcc>)
 800bb18:	6013      	str	r3, [r2, #0]
 800bb1a:	68bb      	ldr	r3, [r7, #8]
 800bb1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bb1e:	4613      	mov	r3, r2
 800bb20:	009b      	lsls	r3, r3, #2
 800bb22:	4413      	add	r3, r2
 800bb24:	009b      	lsls	r3, r3, #2
 800bb26:	4a10      	ldr	r2, [pc, #64]	@ (800bb68 <xTaskPriorityInherit+0xc8>)
 800bb28:	441a      	add	r2, r3
 800bb2a:	68bb      	ldr	r3, [r7, #8]
 800bb2c:	3304      	adds	r3, #4
 800bb2e:	4619      	mov	r1, r3
 800bb30:	4610      	mov	r0, r2
 800bb32:	f7fe f97e 	bl	8009e32 <vListInsertEnd>
 800bb36:	e004      	b.n	800bb42 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800bb38:	4b0a      	ldr	r3, [pc, #40]	@ (800bb64 <xTaskPriorityInherit+0xc4>)
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bb3e:	68bb      	ldr	r3, [r7, #8]
 800bb40:	62da      	str	r2, [r3, #44]	@ 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 800bb42:	2301      	movs	r3, #1
 800bb44:	60fb      	str	r3, [r7, #12]
 800bb46:	e008      	b.n	800bb5a <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800bb48:	68bb      	ldr	r3, [r7, #8]
 800bb4a:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800bb4c:	4b05      	ldr	r3, [pc, #20]	@ (800bb64 <xTaskPriorityInherit+0xc4>)
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bb52:	429a      	cmp	r2, r3
 800bb54:	d201      	bcs.n	800bb5a <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800bb56:	2301      	movs	r3, #1
 800bb58:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bb5a:	68fb      	ldr	r3, [r7, #12]
	}
 800bb5c:	4618      	mov	r0, r3
 800bb5e:	3710      	adds	r7, #16
 800bb60:	46bd      	mov	sp, r7
 800bb62:	bd80      	pop	{r7, pc}
 800bb64:	20000e2c 	.word	0x20000e2c
 800bb68:	20000e30 	.word	0x20000e30
 800bb6c:	20001308 	.word	0x20001308

0800bb70 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800bb70:	b580      	push	{r7, lr}
 800bb72:	b086      	sub	sp, #24
 800bb74:	af00      	add	r7, sp, #0
 800bb76:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800bb78:	687b      	ldr	r3, [r7, #4]
 800bb7a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800bb7c:	2300      	movs	r3, #0
 800bb7e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	2b00      	cmp	r3, #0
 800bb84:	d058      	beq.n	800bc38 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800bb86:	4b2f      	ldr	r3, [pc, #188]	@ (800bc44 <xTaskPriorityDisinherit+0xd4>)
 800bb88:	681b      	ldr	r3, [r3, #0]
 800bb8a:	693a      	ldr	r2, [r7, #16]
 800bb8c:	429a      	cmp	r2, r3
 800bb8e:	d00b      	beq.n	800bba8 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800bb90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bb94:	f383 8811 	msr	BASEPRI, r3
 800bb98:	f3bf 8f6f 	isb	sy
 800bb9c:	f3bf 8f4f 	dsb	sy
 800bba0:	60fb      	str	r3, [r7, #12]
}
 800bba2:	bf00      	nop
 800bba4:	bf00      	nop
 800bba6:	e7fd      	b.n	800bba4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800bba8:	693b      	ldr	r3, [r7, #16]
 800bbaa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bbac:	2b00      	cmp	r3, #0
 800bbae:	d10b      	bne.n	800bbc8 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800bbb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bbb4:	f383 8811 	msr	BASEPRI, r3
 800bbb8:	f3bf 8f6f 	isb	sy
 800bbbc:	f3bf 8f4f 	dsb	sy
 800bbc0:	60bb      	str	r3, [r7, #8]
}
 800bbc2:	bf00      	nop
 800bbc4:	bf00      	nop
 800bbc6:	e7fd      	b.n	800bbc4 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800bbc8:	693b      	ldr	r3, [r7, #16]
 800bbca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bbcc:	1e5a      	subs	r2, r3, #1
 800bbce:	693b      	ldr	r3, [r7, #16]
 800bbd0:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800bbd2:	693b      	ldr	r3, [r7, #16]
 800bbd4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bbd6:	693b      	ldr	r3, [r7, #16]
 800bbd8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bbda:	429a      	cmp	r2, r3
 800bbdc:	d02c      	beq.n	800bc38 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800bbde:	693b      	ldr	r3, [r7, #16]
 800bbe0:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bbe2:	2b00      	cmp	r3, #0
 800bbe4:	d128      	bne.n	800bc38 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bbe6:	693b      	ldr	r3, [r7, #16]
 800bbe8:	3304      	adds	r3, #4
 800bbea:	4618      	mov	r0, r3
 800bbec:	f7fe f97e 	bl	8009eec <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800bbf0:	693b      	ldr	r3, [r7, #16]
 800bbf2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 800bbf4:	693b      	ldr	r3, [r7, #16]
 800bbf6:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bbf8:	693b      	ldr	r3, [r7, #16]
 800bbfa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bbfc:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800bc00:	693b      	ldr	r3, [r7, #16]
 800bc02:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800bc04:	693b      	ldr	r3, [r7, #16]
 800bc06:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bc08:	4b0f      	ldr	r3, [pc, #60]	@ (800bc48 <xTaskPriorityDisinherit+0xd8>)
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	429a      	cmp	r2, r3
 800bc0e:	d903      	bls.n	800bc18 <xTaskPriorityDisinherit+0xa8>
 800bc10:	693b      	ldr	r3, [r7, #16]
 800bc12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bc14:	4a0c      	ldr	r2, [pc, #48]	@ (800bc48 <xTaskPriorityDisinherit+0xd8>)
 800bc16:	6013      	str	r3, [r2, #0]
 800bc18:	693b      	ldr	r3, [r7, #16]
 800bc1a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bc1c:	4613      	mov	r3, r2
 800bc1e:	009b      	lsls	r3, r3, #2
 800bc20:	4413      	add	r3, r2
 800bc22:	009b      	lsls	r3, r3, #2
 800bc24:	4a09      	ldr	r2, [pc, #36]	@ (800bc4c <xTaskPriorityDisinherit+0xdc>)
 800bc26:	441a      	add	r2, r3
 800bc28:	693b      	ldr	r3, [r7, #16]
 800bc2a:	3304      	adds	r3, #4
 800bc2c:	4619      	mov	r1, r3
 800bc2e:	4610      	mov	r0, r2
 800bc30:	f7fe f8ff 	bl	8009e32 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800bc34:	2301      	movs	r3, #1
 800bc36:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800bc38:	697b      	ldr	r3, [r7, #20]
	}
 800bc3a:	4618      	mov	r0, r3
 800bc3c:	3718      	adds	r7, #24
 800bc3e:	46bd      	mov	sp, r7
 800bc40:	bd80      	pop	{r7, pc}
 800bc42:	bf00      	nop
 800bc44:	20000e2c 	.word	0x20000e2c
 800bc48:	20001308 	.word	0x20001308
 800bc4c:	20000e30 	.word	0x20000e30

0800bc50 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 800bc50:	b580      	push	{r7, lr}
 800bc52:	b088      	sub	sp, #32
 800bc54:	af00      	add	r7, sp, #0
 800bc56:	6078      	str	r0, [r7, #4]
 800bc58:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800bc5e:	2301      	movs	r3, #1
 800bc60:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	2b00      	cmp	r3, #0
 800bc66:	d06c      	beq.n	800bd42 <vTaskPriorityDisinheritAfterTimeout+0xf2>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 800bc68:	69bb      	ldr	r3, [r7, #24]
 800bc6a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	d10b      	bne.n	800bc88 <vTaskPriorityDisinheritAfterTimeout+0x38>
	__asm volatile
 800bc70:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bc74:	f383 8811 	msr	BASEPRI, r3
 800bc78:	f3bf 8f6f 	isb	sy
 800bc7c:	f3bf 8f4f 	dsb	sy
 800bc80:	60fb      	str	r3, [r7, #12]
}
 800bc82:	bf00      	nop
 800bc84:	bf00      	nop
 800bc86:	e7fd      	b.n	800bc84 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 800bc88:	69bb      	ldr	r3, [r7, #24]
 800bc8a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bc8c:	683a      	ldr	r2, [r7, #0]
 800bc8e:	429a      	cmp	r2, r3
 800bc90:	d902      	bls.n	800bc98 <vTaskPriorityDisinheritAfterTimeout+0x48>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 800bc92:	683b      	ldr	r3, [r7, #0]
 800bc94:	61fb      	str	r3, [r7, #28]
 800bc96:	e002      	b.n	800bc9e <vTaskPriorityDisinheritAfterTimeout+0x4e>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 800bc98:	69bb      	ldr	r3, [r7, #24]
 800bc9a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800bc9c:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800bc9e:	69bb      	ldr	r3, [r7, #24]
 800bca0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bca2:	69fa      	ldr	r2, [r7, #28]
 800bca4:	429a      	cmp	r2, r3
 800bca6:	d04c      	beq.n	800bd42 <vTaskPriorityDisinheritAfterTimeout+0xf2>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 800bca8:	69bb      	ldr	r3, [r7, #24]
 800bcaa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800bcac:	697a      	ldr	r2, [r7, #20]
 800bcae:	429a      	cmp	r2, r3
 800bcb0:	d147      	bne.n	800bd42 <vTaskPriorityDisinheritAfterTimeout+0xf2>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 800bcb2:	4b26      	ldr	r3, [pc, #152]	@ (800bd4c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 800bcb4:	681b      	ldr	r3, [r3, #0]
 800bcb6:	69ba      	ldr	r2, [r7, #24]
 800bcb8:	429a      	cmp	r2, r3
 800bcba:	d10b      	bne.n	800bcd4 <vTaskPriorityDisinheritAfterTimeout+0x84>
	__asm volatile
 800bcbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bcc0:	f383 8811 	msr	BASEPRI, r3
 800bcc4:	f3bf 8f6f 	isb	sy
 800bcc8:	f3bf 8f4f 	dsb	sy
 800bccc:	60bb      	str	r3, [r7, #8]
}
 800bcce:	bf00      	nop
 800bcd0:	bf00      	nop
 800bcd2:	e7fd      	b.n	800bcd0 <vTaskPriorityDisinheritAfterTimeout+0x80>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 800bcd4:	69bb      	ldr	r3, [r7, #24]
 800bcd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bcd8:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 800bcda:	69bb      	ldr	r3, [r7, #24]
 800bcdc:	69fa      	ldr	r2, [r7, #28]
 800bcde:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 800bce0:	69bb      	ldr	r3, [r7, #24]
 800bce2:	699b      	ldr	r3, [r3, #24]
 800bce4:	2b00      	cmp	r3, #0
 800bce6:	db04      	blt.n	800bcf2 <vTaskPriorityDisinheritAfterTimeout+0xa2>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800bce8:	69fb      	ldr	r3, [r7, #28]
 800bcea:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800bcee:	69bb      	ldr	r3, [r7, #24]
 800bcf0:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 800bcf2:	69bb      	ldr	r3, [r7, #24]
 800bcf4:	6959      	ldr	r1, [r3, #20]
 800bcf6:	693a      	ldr	r2, [r7, #16]
 800bcf8:	4613      	mov	r3, r2
 800bcfa:	009b      	lsls	r3, r3, #2
 800bcfc:	4413      	add	r3, r2
 800bcfe:	009b      	lsls	r3, r3, #2
 800bd00:	4a13      	ldr	r2, [pc, #76]	@ (800bd50 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800bd02:	4413      	add	r3, r2
 800bd04:	4299      	cmp	r1, r3
 800bd06:	d11c      	bne.n	800bd42 <vTaskPriorityDisinheritAfterTimeout+0xf2>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bd08:	69bb      	ldr	r3, [r7, #24]
 800bd0a:	3304      	adds	r3, #4
 800bd0c:	4618      	mov	r0, r3
 800bd0e:	f7fe f8ed 	bl	8009eec <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 800bd12:	69bb      	ldr	r3, [r7, #24]
 800bd14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bd16:	4b0f      	ldr	r3, [pc, #60]	@ (800bd54 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800bd18:	681b      	ldr	r3, [r3, #0]
 800bd1a:	429a      	cmp	r2, r3
 800bd1c:	d903      	bls.n	800bd26 <vTaskPriorityDisinheritAfterTimeout+0xd6>
 800bd1e:	69bb      	ldr	r3, [r7, #24]
 800bd20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800bd22:	4a0c      	ldr	r2, [pc, #48]	@ (800bd54 <vTaskPriorityDisinheritAfterTimeout+0x104>)
 800bd24:	6013      	str	r3, [r2, #0]
 800bd26:	69bb      	ldr	r3, [r7, #24]
 800bd28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800bd2a:	4613      	mov	r3, r2
 800bd2c:	009b      	lsls	r3, r3, #2
 800bd2e:	4413      	add	r3, r2
 800bd30:	009b      	lsls	r3, r3, #2
 800bd32:	4a07      	ldr	r2, [pc, #28]	@ (800bd50 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 800bd34:	441a      	add	r2, r3
 800bd36:	69bb      	ldr	r3, [r7, #24]
 800bd38:	3304      	adds	r3, #4
 800bd3a:	4619      	mov	r1, r3
 800bd3c:	4610      	mov	r0, r2
 800bd3e:	f7fe f878 	bl	8009e32 <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800bd42:	bf00      	nop
 800bd44:	3720      	adds	r7, #32
 800bd46:	46bd      	mov	sp, r7
 800bd48:	bd80      	pop	{r7, pc}
 800bd4a:	bf00      	nop
 800bd4c:	20000e2c 	.word	0x20000e2c
 800bd50:	20000e30 	.word	0x20000e30
 800bd54:	20001308 	.word	0x20001308

0800bd58 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 800bd58:	b480      	push	{r7}
 800bd5a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 800bd5c:	4b07      	ldr	r3, [pc, #28]	@ (800bd7c <pvTaskIncrementMutexHeldCount+0x24>)
 800bd5e:	681b      	ldr	r3, [r3, #0]
 800bd60:	2b00      	cmp	r3, #0
 800bd62:	d004      	beq.n	800bd6e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 800bd64:	4b05      	ldr	r3, [pc, #20]	@ (800bd7c <pvTaskIncrementMutexHeldCount+0x24>)
 800bd66:	681b      	ldr	r3, [r3, #0]
 800bd68:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 800bd6a:	3201      	adds	r2, #1
 800bd6c:	651a      	str	r2, [r3, #80]	@ 0x50
		}

		return pxCurrentTCB;
 800bd6e:	4b03      	ldr	r3, [pc, #12]	@ (800bd7c <pvTaskIncrementMutexHeldCount+0x24>)
 800bd70:	681b      	ldr	r3, [r3, #0]
	}
 800bd72:	4618      	mov	r0, r3
 800bd74:	46bd      	mov	sp, r7
 800bd76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd7a:	4770      	bx	lr
 800bd7c:	20000e2c 	.word	0x20000e2c

0800bd80 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800bd80:	b580      	push	{r7, lr}
 800bd82:	b084      	sub	sp, #16
 800bd84:	af00      	add	r7, sp, #0
 800bd86:	6078      	str	r0, [r7, #4]
 800bd88:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800bd8a:	4b21      	ldr	r3, [pc, #132]	@ (800be10 <prvAddCurrentTaskToDelayedList+0x90>)
 800bd8c:	681b      	ldr	r3, [r3, #0]
 800bd8e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800bd90:	4b20      	ldr	r3, [pc, #128]	@ (800be14 <prvAddCurrentTaskToDelayedList+0x94>)
 800bd92:	681b      	ldr	r3, [r3, #0]
 800bd94:	3304      	adds	r3, #4
 800bd96:	4618      	mov	r0, r3
 800bd98:	f7fe f8a8 	bl	8009eec <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800bd9c:	687b      	ldr	r3, [r7, #4]
 800bd9e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800bda2:	d10a      	bne.n	800bdba <prvAddCurrentTaskToDelayedList+0x3a>
 800bda4:	683b      	ldr	r3, [r7, #0]
 800bda6:	2b00      	cmp	r3, #0
 800bda8:	d007      	beq.n	800bdba <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bdaa:	4b1a      	ldr	r3, [pc, #104]	@ (800be14 <prvAddCurrentTaskToDelayedList+0x94>)
 800bdac:	681b      	ldr	r3, [r3, #0]
 800bdae:	3304      	adds	r3, #4
 800bdb0:	4619      	mov	r1, r3
 800bdb2:	4819      	ldr	r0, [pc, #100]	@ (800be18 <prvAddCurrentTaskToDelayedList+0x98>)
 800bdb4:	f7fe f83d 	bl	8009e32 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800bdb8:	e026      	b.n	800be08 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800bdba:	68fa      	ldr	r2, [r7, #12]
 800bdbc:	687b      	ldr	r3, [r7, #4]
 800bdbe:	4413      	add	r3, r2
 800bdc0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800bdc2:	4b14      	ldr	r3, [pc, #80]	@ (800be14 <prvAddCurrentTaskToDelayedList+0x94>)
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	68ba      	ldr	r2, [r7, #8]
 800bdc8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800bdca:	68ba      	ldr	r2, [r7, #8]
 800bdcc:	68fb      	ldr	r3, [r7, #12]
 800bdce:	429a      	cmp	r2, r3
 800bdd0:	d209      	bcs.n	800bde6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bdd2:	4b12      	ldr	r3, [pc, #72]	@ (800be1c <prvAddCurrentTaskToDelayedList+0x9c>)
 800bdd4:	681a      	ldr	r2, [r3, #0]
 800bdd6:	4b0f      	ldr	r3, [pc, #60]	@ (800be14 <prvAddCurrentTaskToDelayedList+0x94>)
 800bdd8:	681b      	ldr	r3, [r3, #0]
 800bdda:	3304      	adds	r3, #4
 800bddc:	4619      	mov	r1, r3
 800bdde:	4610      	mov	r0, r2
 800bde0:	f7fe f84b 	bl	8009e7a <vListInsert>
}
 800bde4:	e010      	b.n	800be08 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800bde6:	4b0e      	ldr	r3, [pc, #56]	@ (800be20 <prvAddCurrentTaskToDelayedList+0xa0>)
 800bde8:	681a      	ldr	r2, [r3, #0]
 800bdea:	4b0a      	ldr	r3, [pc, #40]	@ (800be14 <prvAddCurrentTaskToDelayedList+0x94>)
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	3304      	adds	r3, #4
 800bdf0:	4619      	mov	r1, r3
 800bdf2:	4610      	mov	r0, r2
 800bdf4:	f7fe f841 	bl	8009e7a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800bdf8:	4b0a      	ldr	r3, [pc, #40]	@ (800be24 <prvAddCurrentTaskToDelayedList+0xa4>)
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	68ba      	ldr	r2, [r7, #8]
 800bdfe:	429a      	cmp	r2, r3
 800be00:	d202      	bcs.n	800be08 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800be02:	4a08      	ldr	r2, [pc, #32]	@ (800be24 <prvAddCurrentTaskToDelayedList+0xa4>)
 800be04:	68bb      	ldr	r3, [r7, #8]
 800be06:	6013      	str	r3, [r2, #0]
}
 800be08:	bf00      	nop
 800be0a:	3710      	adds	r7, #16
 800be0c:	46bd      	mov	sp, r7
 800be0e:	bd80      	pop	{r7, pc}
 800be10:	20001304 	.word	0x20001304
 800be14:	20000e2c 	.word	0x20000e2c
 800be18:	200012ec 	.word	0x200012ec
 800be1c:	200012bc 	.word	0x200012bc
 800be20:	200012b8 	.word	0x200012b8
 800be24:	20001320 	.word	0x20001320

0800be28 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800be28:	b580      	push	{r7, lr}
 800be2a:	b08a      	sub	sp, #40	@ 0x28
 800be2c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800be2e:	2300      	movs	r3, #0
 800be30:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800be32:	f000 fb13 	bl	800c45c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800be36:	4b1d      	ldr	r3, [pc, #116]	@ (800beac <xTimerCreateTimerTask+0x84>)
 800be38:	681b      	ldr	r3, [r3, #0]
 800be3a:	2b00      	cmp	r3, #0
 800be3c:	d021      	beq.n	800be82 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800be3e:	2300      	movs	r3, #0
 800be40:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800be42:	2300      	movs	r3, #0
 800be44:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800be46:	1d3a      	adds	r2, r7, #4
 800be48:	f107 0108 	add.w	r1, r7, #8
 800be4c:	f107 030c 	add.w	r3, r7, #12
 800be50:	4618      	mov	r0, r3
 800be52:	f7fd ffa7 	bl	8009da4 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800be56:	6879      	ldr	r1, [r7, #4]
 800be58:	68bb      	ldr	r3, [r7, #8]
 800be5a:	68fa      	ldr	r2, [r7, #12]
 800be5c:	9202      	str	r2, [sp, #8]
 800be5e:	9301      	str	r3, [sp, #4]
 800be60:	2302      	movs	r3, #2
 800be62:	9300      	str	r3, [sp, #0]
 800be64:	2300      	movs	r3, #0
 800be66:	460a      	mov	r2, r1
 800be68:	4911      	ldr	r1, [pc, #68]	@ (800beb0 <xTimerCreateTimerTask+0x88>)
 800be6a:	4812      	ldr	r0, [pc, #72]	@ (800beb4 <xTimerCreateTimerTask+0x8c>)
 800be6c:	f7fe ffa2 	bl	800adb4 <xTaskCreateStatic>
 800be70:	4603      	mov	r3, r0
 800be72:	4a11      	ldr	r2, [pc, #68]	@ (800beb8 <xTimerCreateTimerTask+0x90>)
 800be74:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800be76:	4b10      	ldr	r3, [pc, #64]	@ (800beb8 <xTimerCreateTimerTask+0x90>)
 800be78:	681b      	ldr	r3, [r3, #0]
 800be7a:	2b00      	cmp	r3, #0
 800be7c:	d001      	beq.n	800be82 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800be7e:	2301      	movs	r3, #1
 800be80:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800be82:	697b      	ldr	r3, [r7, #20]
 800be84:	2b00      	cmp	r3, #0
 800be86:	d10b      	bne.n	800bea0 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800be88:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800be8c:	f383 8811 	msr	BASEPRI, r3
 800be90:	f3bf 8f6f 	isb	sy
 800be94:	f3bf 8f4f 	dsb	sy
 800be98:	613b      	str	r3, [r7, #16]
}
 800be9a:	bf00      	nop
 800be9c:	bf00      	nop
 800be9e:	e7fd      	b.n	800be9c <xTimerCreateTimerTask+0x74>
	return xReturn;
 800bea0:	697b      	ldr	r3, [r7, #20]
}
 800bea2:	4618      	mov	r0, r3
 800bea4:	3718      	adds	r7, #24
 800bea6:	46bd      	mov	sp, r7
 800bea8:	bd80      	pop	{r7, pc}
 800beaa:	bf00      	nop
 800beac:	2000135c 	.word	0x2000135c
 800beb0:	08010538 	.word	0x08010538
 800beb4:	0800bff5 	.word	0x0800bff5
 800beb8:	20001360 	.word	0x20001360

0800bebc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800bebc:	b580      	push	{r7, lr}
 800bebe:	b08a      	sub	sp, #40	@ 0x28
 800bec0:	af00      	add	r7, sp, #0
 800bec2:	60f8      	str	r0, [r7, #12]
 800bec4:	60b9      	str	r1, [r7, #8]
 800bec6:	607a      	str	r2, [r7, #4]
 800bec8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800beca:	2300      	movs	r3, #0
 800becc:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800bece:	68fb      	ldr	r3, [r7, #12]
 800bed0:	2b00      	cmp	r3, #0
 800bed2:	d10b      	bne.n	800beec <xTimerGenericCommand+0x30>
	__asm volatile
 800bed4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bed8:	f383 8811 	msr	BASEPRI, r3
 800bedc:	f3bf 8f6f 	isb	sy
 800bee0:	f3bf 8f4f 	dsb	sy
 800bee4:	623b      	str	r3, [r7, #32]
}
 800bee6:	bf00      	nop
 800bee8:	bf00      	nop
 800beea:	e7fd      	b.n	800bee8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800beec:	4b19      	ldr	r3, [pc, #100]	@ (800bf54 <xTimerGenericCommand+0x98>)
 800beee:	681b      	ldr	r3, [r3, #0]
 800bef0:	2b00      	cmp	r3, #0
 800bef2:	d02a      	beq.n	800bf4a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800bef4:	68bb      	ldr	r3, [r7, #8]
 800bef6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800befc:	68fb      	ldr	r3, [r7, #12]
 800befe:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800bf00:	68bb      	ldr	r3, [r7, #8]
 800bf02:	2b05      	cmp	r3, #5
 800bf04:	dc18      	bgt.n	800bf38 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800bf06:	f7ff fdad 	bl	800ba64 <xTaskGetSchedulerState>
 800bf0a:	4603      	mov	r3, r0
 800bf0c:	2b02      	cmp	r3, #2
 800bf0e:	d109      	bne.n	800bf24 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800bf10:	4b10      	ldr	r3, [pc, #64]	@ (800bf54 <xTimerGenericCommand+0x98>)
 800bf12:	6818      	ldr	r0, [r3, #0]
 800bf14:	f107 0110 	add.w	r1, r7, #16
 800bf18:	2300      	movs	r3, #0
 800bf1a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800bf1c:	f7fe f9a2 	bl	800a264 <xQueueGenericSend>
 800bf20:	6278      	str	r0, [r7, #36]	@ 0x24
 800bf22:	e012      	b.n	800bf4a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800bf24:	4b0b      	ldr	r3, [pc, #44]	@ (800bf54 <xTimerGenericCommand+0x98>)
 800bf26:	6818      	ldr	r0, [r3, #0]
 800bf28:	f107 0110 	add.w	r1, r7, #16
 800bf2c:	2300      	movs	r3, #0
 800bf2e:	2200      	movs	r2, #0
 800bf30:	f7fe f998 	bl	800a264 <xQueueGenericSend>
 800bf34:	6278      	str	r0, [r7, #36]	@ 0x24
 800bf36:	e008      	b.n	800bf4a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800bf38:	4b06      	ldr	r3, [pc, #24]	@ (800bf54 <xTimerGenericCommand+0x98>)
 800bf3a:	6818      	ldr	r0, [r3, #0]
 800bf3c:	f107 0110 	add.w	r1, r7, #16
 800bf40:	2300      	movs	r3, #0
 800bf42:	683a      	ldr	r2, [r7, #0]
 800bf44:	f7fe fa90 	bl	800a468 <xQueueGenericSendFromISR>
 800bf48:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800bf4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800bf4c:	4618      	mov	r0, r3
 800bf4e:	3728      	adds	r7, #40	@ 0x28
 800bf50:	46bd      	mov	sp, r7
 800bf52:	bd80      	pop	{r7, pc}
 800bf54:	2000135c 	.word	0x2000135c

0800bf58 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800bf58:	b580      	push	{r7, lr}
 800bf5a:	b088      	sub	sp, #32
 800bf5c:	af02      	add	r7, sp, #8
 800bf5e:	6078      	str	r0, [r7, #4]
 800bf60:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800bf62:	4b23      	ldr	r3, [pc, #140]	@ (800bff0 <prvProcessExpiredTimer+0x98>)
 800bf64:	681b      	ldr	r3, [r3, #0]
 800bf66:	68db      	ldr	r3, [r3, #12]
 800bf68:	68db      	ldr	r3, [r3, #12]
 800bf6a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800bf6c:	697b      	ldr	r3, [r7, #20]
 800bf6e:	3304      	adds	r3, #4
 800bf70:	4618      	mov	r0, r3
 800bf72:	f7fd ffbb 	bl	8009eec <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800bf76:	697b      	ldr	r3, [r7, #20]
 800bf78:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bf7c:	f003 0304 	and.w	r3, r3, #4
 800bf80:	2b00      	cmp	r3, #0
 800bf82:	d023      	beq.n	800bfcc <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800bf84:	697b      	ldr	r3, [r7, #20]
 800bf86:	699a      	ldr	r2, [r3, #24]
 800bf88:	687b      	ldr	r3, [r7, #4]
 800bf8a:	18d1      	adds	r1, r2, r3
 800bf8c:	687b      	ldr	r3, [r7, #4]
 800bf8e:	683a      	ldr	r2, [r7, #0]
 800bf90:	6978      	ldr	r0, [r7, #20]
 800bf92:	f000 f8d5 	bl	800c140 <prvInsertTimerInActiveList>
 800bf96:	4603      	mov	r3, r0
 800bf98:	2b00      	cmp	r3, #0
 800bf9a:	d020      	beq.n	800bfde <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800bf9c:	2300      	movs	r3, #0
 800bf9e:	9300      	str	r3, [sp, #0]
 800bfa0:	2300      	movs	r3, #0
 800bfa2:	687a      	ldr	r2, [r7, #4]
 800bfa4:	2100      	movs	r1, #0
 800bfa6:	6978      	ldr	r0, [r7, #20]
 800bfa8:	f7ff ff88 	bl	800bebc <xTimerGenericCommand>
 800bfac:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800bfae:	693b      	ldr	r3, [r7, #16]
 800bfb0:	2b00      	cmp	r3, #0
 800bfb2:	d114      	bne.n	800bfde <prvProcessExpiredTimer+0x86>
	__asm volatile
 800bfb4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800bfb8:	f383 8811 	msr	BASEPRI, r3
 800bfbc:	f3bf 8f6f 	isb	sy
 800bfc0:	f3bf 8f4f 	dsb	sy
 800bfc4:	60fb      	str	r3, [r7, #12]
}
 800bfc6:	bf00      	nop
 800bfc8:	bf00      	nop
 800bfca:	e7fd      	b.n	800bfc8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800bfcc:	697b      	ldr	r3, [r7, #20]
 800bfce:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800bfd2:	f023 0301 	bic.w	r3, r3, #1
 800bfd6:	b2da      	uxtb	r2, r3
 800bfd8:	697b      	ldr	r3, [r7, #20]
 800bfda:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800bfde:	697b      	ldr	r3, [r7, #20]
 800bfe0:	6a1b      	ldr	r3, [r3, #32]
 800bfe2:	6978      	ldr	r0, [r7, #20]
 800bfe4:	4798      	blx	r3
}
 800bfe6:	bf00      	nop
 800bfe8:	3718      	adds	r7, #24
 800bfea:	46bd      	mov	sp, r7
 800bfec:	bd80      	pop	{r7, pc}
 800bfee:	bf00      	nop
 800bff0:	20001354 	.word	0x20001354

0800bff4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800bff4:	b580      	push	{r7, lr}
 800bff6:	b084      	sub	sp, #16
 800bff8:	af00      	add	r7, sp, #0
 800bffa:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800bffc:	f107 0308 	add.w	r3, r7, #8
 800c000:	4618      	mov	r0, r3
 800c002:	f000 f859 	bl	800c0b8 <prvGetNextExpireTime>
 800c006:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800c008:	68bb      	ldr	r3, [r7, #8]
 800c00a:	4619      	mov	r1, r3
 800c00c:	68f8      	ldr	r0, [r7, #12]
 800c00e:	f000 f805 	bl	800c01c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800c012:	f000 f8d7 	bl	800c1c4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800c016:	bf00      	nop
 800c018:	e7f0      	b.n	800bffc <prvTimerTask+0x8>
	...

0800c01c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800c01c:	b580      	push	{r7, lr}
 800c01e:	b084      	sub	sp, #16
 800c020:	af00      	add	r7, sp, #0
 800c022:	6078      	str	r0, [r7, #4]
 800c024:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800c026:	f7ff f929 	bl	800b27c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c02a:	f107 0308 	add.w	r3, r7, #8
 800c02e:	4618      	mov	r0, r3
 800c030:	f000 f866 	bl	800c100 <prvSampleTimeNow>
 800c034:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800c036:	68bb      	ldr	r3, [r7, #8]
 800c038:	2b00      	cmp	r3, #0
 800c03a:	d130      	bne.n	800c09e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800c03c:	683b      	ldr	r3, [r7, #0]
 800c03e:	2b00      	cmp	r3, #0
 800c040:	d10a      	bne.n	800c058 <prvProcessTimerOrBlockTask+0x3c>
 800c042:	687a      	ldr	r2, [r7, #4]
 800c044:	68fb      	ldr	r3, [r7, #12]
 800c046:	429a      	cmp	r2, r3
 800c048:	d806      	bhi.n	800c058 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800c04a:	f7ff f925 	bl	800b298 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800c04e:	68f9      	ldr	r1, [r7, #12]
 800c050:	6878      	ldr	r0, [r7, #4]
 800c052:	f7ff ff81 	bl	800bf58 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800c056:	e024      	b.n	800c0a2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800c058:	683b      	ldr	r3, [r7, #0]
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	d008      	beq.n	800c070 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800c05e:	4b13      	ldr	r3, [pc, #76]	@ (800c0ac <prvProcessTimerOrBlockTask+0x90>)
 800c060:	681b      	ldr	r3, [r3, #0]
 800c062:	681b      	ldr	r3, [r3, #0]
 800c064:	2b00      	cmp	r3, #0
 800c066:	d101      	bne.n	800c06c <prvProcessTimerOrBlockTask+0x50>
 800c068:	2301      	movs	r3, #1
 800c06a:	e000      	b.n	800c06e <prvProcessTimerOrBlockTask+0x52>
 800c06c:	2300      	movs	r3, #0
 800c06e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800c070:	4b0f      	ldr	r3, [pc, #60]	@ (800c0b0 <prvProcessTimerOrBlockTask+0x94>)
 800c072:	6818      	ldr	r0, [r3, #0]
 800c074:	687a      	ldr	r2, [r7, #4]
 800c076:	68fb      	ldr	r3, [r7, #12]
 800c078:	1ad3      	subs	r3, r2, r3
 800c07a:	683a      	ldr	r2, [r7, #0]
 800c07c:	4619      	mov	r1, r3
 800c07e:	f7fe fe65 	bl	800ad4c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800c082:	f7ff f909 	bl	800b298 <xTaskResumeAll>
 800c086:	4603      	mov	r3, r0
 800c088:	2b00      	cmp	r3, #0
 800c08a:	d10a      	bne.n	800c0a2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800c08c:	4b09      	ldr	r3, [pc, #36]	@ (800c0b4 <prvProcessTimerOrBlockTask+0x98>)
 800c08e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c092:	601a      	str	r2, [r3, #0]
 800c094:	f3bf 8f4f 	dsb	sy
 800c098:	f3bf 8f6f 	isb	sy
}
 800c09c:	e001      	b.n	800c0a2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800c09e:	f7ff f8fb 	bl	800b298 <xTaskResumeAll>
}
 800c0a2:	bf00      	nop
 800c0a4:	3710      	adds	r7, #16
 800c0a6:	46bd      	mov	sp, r7
 800c0a8:	bd80      	pop	{r7, pc}
 800c0aa:	bf00      	nop
 800c0ac:	20001358 	.word	0x20001358
 800c0b0:	2000135c 	.word	0x2000135c
 800c0b4:	e000ed04 	.word	0xe000ed04

0800c0b8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800c0b8:	b480      	push	{r7}
 800c0ba:	b085      	sub	sp, #20
 800c0bc:	af00      	add	r7, sp, #0
 800c0be:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800c0c0:	4b0e      	ldr	r3, [pc, #56]	@ (800c0fc <prvGetNextExpireTime+0x44>)
 800c0c2:	681b      	ldr	r3, [r3, #0]
 800c0c4:	681b      	ldr	r3, [r3, #0]
 800c0c6:	2b00      	cmp	r3, #0
 800c0c8:	d101      	bne.n	800c0ce <prvGetNextExpireTime+0x16>
 800c0ca:	2201      	movs	r2, #1
 800c0cc:	e000      	b.n	800c0d0 <prvGetNextExpireTime+0x18>
 800c0ce:	2200      	movs	r2, #0
 800c0d0:	687b      	ldr	r3, [r7, #4]
 800c0d2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	681b      	ldr	r3, [r3, #0]
 800c0d8:	2b00      	cmp	r3, #0
 800c0da:	d105      	bne.n	800c0e8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c0dc:	4b07      	ldr	r3, [pc, #28]	@ (800c0fc <prvGetNextExpireTime+0x44>)
 800c0de:	681b      	ldr	r3, [r3, #0]
 800c0e0:	68db      	ldr	r3, [r3, #12]
 800c0e2:	681b      	ldr	r3, [r3, #0]
 800c0e4:	60fb      	str	r3, [r7, #12]
 800c0e6:	e001      	b.n	800c0ec <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800c0e8:	2300      	movs	r3, #0
 800c0ea:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800c0ec:	68fb      	ldr	r3, [r7, #12]
}
 800c0ee:	4618      	mov	r0, r3
 800c0f0:	3714      	adds	r7, #20
 800c0f2:	46bd      	mov	sp, r7
 800c0f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0f8:	4770      	bx	lr
 800c0fa:	bf00      	nop
 800c0fc:	20001354 	.word	0x20001354

0800c100 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800c100:	b580      	push	{r7, lr}
 800c102:	b084      	sub	sp, #16
 800c104:	af00      	add	r7, sp, #0
 800c106:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800c108:	f7ff f964 	bl	800b3d4 <xTaskGetTickCount>
 800c10c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800c10e:	4b0b      	ldr	r3, [pc, #44]	@ (800c13c <prvSampleTimeNow+0x3c>)
 800c110:	681b      	ldr	r3, [r3, #0]
 800c112:	68fa      	ldr	r2, [r7, #12]
 800c114:	429a      	cmp	r2, r3
 800c116:	d205      	bcs.n	800c124 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800c118:	f000 f93a 	bl	800c390 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800c11c:	687b      	ldr	r3, [r7, #4]
 800c11e:	2201      	movs	r2, #1
 800c120:	601a      	str	r2, [r3, #0]
 800c122:	e002      	b.n	800c12a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800c124:	687b      	ldr	r3, [r7, #4]
 800c126:	2200      	movs	r2, #0
 800c128:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800c12a:	4a04      	ldr	r2, [pc, #16]	@ (800c13c <prvSampleTimeNow+0x3c>)
 800c12c:	68fb      	ldr	r3, [r7, #12]
 800c12e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800c130:	68fb      	ldr	r3, [r7, #12]
}
 800c132:	4618      	mov	r0, r3
 800c134:	3710      	adds	r7, #16
 800c136:	46bd      	mov	sp, r7
 800c138:	bd80      	pop	{r7, pc}
 800c13a:	bf00      	nop
 800c13c:	20001364 	.word	0x20001364

0800c140 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800c140:	b580      	push	{r7, lr}
 800c142:	b086      	sub	sp, #24
 800c144:	af00      	add	r7, sp, #0
 800c146:	60f8      	str	r0, [r7, #12]
 800c148:	60b9      	str	r1, [r7, #8]
 800c14a:	607a      	str	r2, [r7, #4]
 800c14c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800c14e:	2300      	movs	r3, #0
 800c150:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800c152:	68fb      	ldr	r3, [r7, #12]
 800c154:	68ba      	ldr	r2, [r7, #8]
 800c156:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c158:	68fb      	ldr	r3, [r7, #12]
 800c15a:	68fa      	ldr	r2, [r7, #12]
 800c15c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800c15e:	68ba      	ldr	r2, [r7, #8]
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	429a      	cmp	r2, r3
 800c164:	d812      	bhi.n	800c18c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c166:	687a      	ldr	r2, [r7, #4]
 800c168:	683b      	ldr	r3, [r7, #0]
 800c16a:	1ad2      	subs	r2, r2, r3
 800c16c:	68fb      	ldr	r3, [r7, #12]
 800c16e:	699b      	ldr	r3, [r3, #24]
 800c170:	429a      	cmp	r2, r3
 800c172:	d302      	bcc.n	800c17a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800c174:	2301      	movs	r3, #1
 800c176:	617b      	str	r3, [r7, #20]
 800c178:	e01b      	b.n	800c1b2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800c17a:	4b10      	ldr	r3, [pc, #64]	@ (800c1bc <prvInsertTimerInActiveList+0x7c>)
 800c17c:	681a      	ldr	r2, [r3, #0]
 800c17e:	68fb      	ldr	r3, [r7, #12]
 800c180:	3304      	adds	r3, #4
 800c182:	4619      	mov	r1, r3
 800c184:	4610      	mov	r0, r2
 800c186:	f7fd fe78 	bl	8009e7a <vListInsert>
 800c18a:	e012      	b.n	800c1b2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800c18c:	687a      	ldr	r2, [r7, #4]
 800c18e:	683b      	ldr	r3, [r7, #0]
 800c190:	429a      	cmp	r2, r3
 800c192:	d206      	bcs.n	800c1a2 <prvInsertTimerInActiveList+0x62>
 800c194:	68ba      	ldr	r2, [r7, #8]
 800c196:	683b      	ldr	r3, [r7, #0]
 800c198:	429a      	cmp	r2, r3
 800c19a:	d302      	bcc.n	800c1a2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800c19c:	2301      	movs	r3, #1
 800c19e:	617b      	str	r3, [r7, #20]
 800c1a0:	e007      	b.n	800c1b2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c1a2:	4b07      	ldr	r3, [pc, #28]	@ (800c1c0 <prvInsertTimerInActiveList+0x80>)
 800c1a4:	681a      	ldr	r2, [r3, #0]
 800c1a6:	68fb      	ldr	r3, [r7, #12]
 800c1a8:	3304      	adds	r3, #4
 800c1aa:	4619      	mov	r1, r3
 800c1ac:	4610      	mov	r0, r2
 800c1ae:	f7fd fe64 	bl	8009e7a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800c1b2:	697b      	ldr	r3, [r7, #20]
}
 800c1b4:	4618      	mov	r0, r3
 800c1b6:	3718      	adds	r7, #24
 800c1b8:	46bd      	mov	sp, r7
 800c1ba:	bd80      	pop	{r7, pc}
 800c1bc:	20001358 	.word	0x20001358
 800c1c0:	20001354 	.word	0x20001354

0800c1c4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800c1c4:	b580      	push	{r7, lr}
 800c1c6:	b08e      	sub	sp, #56	@ 0x38
 800c1c8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c1ca:	e0ce      	b.n	800c36a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	2b00      	cmp	r3, #0
 800c1d0:	da19      	bge.n	800c206 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800c1d2:	1d3b      	adds	r3, r7, #4
 800c1d4:	3304      	adds	r3, #4
 800c1d6:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800c1d8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c1da:	2b00      	cmp	r3, #0
 800c1dc:	d10b      	bne.n	800c1f6 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800c1de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c1e2:	f383 8811 	msr	BASEPRI, r3
 800c1e6:	f3bf 8f6f 	isb	sy
 800c1ea:	f3bf 8f4f 	dsb	sy
 800c1ee:	61fb      	str	r3, [r7, #28]
}
 800c1f0:	bf00      	nop
 800c1f2:	bf00      	nop
 800c1f4:	e7fd      	b.n	800c1f2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800c1f6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c1fc:	6850      	ldr	r0, [r2, #4]
 800c1fe:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800c200:	6892      	ldr	r2, [r2, #8]
 800c202:	4611      	mov	r1, r2
 800c204:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	2b00      	cmp	r3, #0
 800c20a:	f2c0 80ae 	blt.w	800c36a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800c20e:	68fb      	ldr	r3, [r7, #12]
 800c210:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800c212:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c214:	695b      	ldr	r3, [r3, #20]
 800c216:	2b00      	cmp	r3, #0
 800c218:	d004      	beq.n	800c224 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c21a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c21c:	3304      	adds	r3, #4
 800c21e:	4618      	mov	r0, r3
 800c220:	f7fd fe64 	bl	8009eec <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800c224:	463b      	mov	r3, r7
 800c226:	4618      	mov	r0, r3
 800c228:	f7ff ff6a 	bl	800c100 <prvSampleTimeNow>
 800c22c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800c22e:	687b      	ldr	r3, [r7, #4]
 800c230:	2b09      	cmp	r3, #9
 800c232:	f200 8097 	bhi.w	800c364 <prvProcessReceivedCommands+0x1a0>
 800c236:	a201      	add	r2, pc, #4	@ (adr r2, 800c23c <prvProcessReceivedCommands+0x78>)
 800c238:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c23c:	0800c265 	.word	0x0800c265
 800c240:	0800c265 	.word	0x0800c265
 800c244:	0800c265 	.word	0x0800c265
 800c248:	0800c2db 	.word	0x0800c2db
 800c24c:	0800c2ef 	.word	0x0800c2ef
 800c250:	0800c33b 	.word	0x0800c33b
 800c254:	0800c265 	.word	0x0800c265
 800c258:	0800c265 	.word	0x0800c265
 800c25c:	0800c2db 	.word	0x0800c2db
 800c260:	0800c2ef 	.word	0x0800c2ef
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c264:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c266:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c26a:	f043 0301 	orr.w	r3, r3, #1
 800c26e:	b2da      	uxtb	r2, r3
 800c270:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c272:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800c276:	68ba      	ldr	r2, [r7, #8]
 800c278:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c27a:	699b      	ldr	r3, [r3, #24]
 800c27c:	18d1      	adds	r1, r2, r3
 800c27e:	68bb      	ldr	r3, [r7, #8]
 800c280:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c282:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c284:	f7ff ff5c 	bl	800c140 <prvInsertTimerInActiveList>
 800c288:	4603      	mov	r3, r0
 800c28a:	2b00      	cmp	r3, #0
 800c28c:	d06c      	beq.n	800c368 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c28e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c290:	6a1b      	ldr	r3, [r3, #32]
 800c292:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c294:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c296:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c298:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c29c:	f003 0304 	and.w	r3, r3, #4
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	d061      	beq.n	800c368 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800c2a4:	68ba      	ldr	r2, [r7, #8]
 800c2a6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c2a8:	699b      	ldr	r3, [r3, #24]
 800c2aa:	441a      	add	r2, r3
 800c2ac:	2300      	movs	r3, #0
 800c2ae:	9300      	str	r3, [sp, #0]
 800c2b0:	2300      	movs	r3, #0
 800c2b2:	2100      	movs	r1, #0
 800c2b4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c2b6:	f7ff fe01 	bl	800bebc <xTimerGenericCommand>
 800c2ba:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800c2bc:	6a3b      	ldr	r3, [r7, #32]
 800c2be:	2b00      	cmp	r3, #0
 800c2c0:	d152      	bne.n	800c368 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800c2c2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c2c6:	f383 8811 	msr	BASEPRI, r3
 800c2ca:	f3bf 8f6f 	isb	sy
 800c2ce:	f3bf 8f4f 	dsb	sy
 800c2d2:	61bb      	str	r3, [r7, #24]
}
 800c2d4:	bf00      	nop
 800c2d6:	bf00      	nop
 800c2d8:	e7fd      	b.n	800c2d6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c2da:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c2dc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c2e0:	f023 0301 	bic.w	r3, r3, #1
 800c2e4:	b2da      	uxtb	r2, r3
 800c2e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c2e8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800c2ec:	e03d      	b.n	800c36a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800c2ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c2f0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c2f4:	f043 0301 	orr.w	r3, r3, #1
 800c2f8:	b2da      	uxtb	r2, r3
 800c2fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c2fc:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800c300:	68ba      	ldr	r2, [r7, #8]
 800c302:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c304:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800c306:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c308:	699b      	ldr	r3, [r3, #24]
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	d10b      	bne.n	800c326 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800c30e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c312:	f383 8811 	msr	BASEPRI, r3
 800c316:	f3bf 8f6f 	isb	sy
 800c31a:	f3bf 8f4f 	dsb	sy
 800c31e:	617b      	str	r3, [r7, #20]
}
 800c320:	bf00      	nop
 800c322:	bf00      	nop
 800c324:	e7fd      	b.n	800c322 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800c326:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c328:	699a      	ldr	r2, [r3, #24]
 800c32a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c32c:	18d1      	adds	r1, r2, r3
 800c32e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800c330:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800c332:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c334:	f7ff ff04 	bl	800c140 <prvInsertTimerInActiveList>
					break;
 800c338:	e017      	b.n	800c36a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800c33a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c33c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c340:	f003 0302 	and.w	r3, r3, #2
 800c344:	2b00      	cmp	r3, #0
 800c346:	d103      	bne.n	800c350 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800c348:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800c34a:	f000 fbe5 	bl	800cb18 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800c34e:	e00c      	b.n	800c36a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800c350:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c352:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c356:	f023 0301 	bic.w	r3, r3, #1
 800c35a:	b2da      	uxtb	r2, r3
 800c35c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800c35e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800c362:	e002      	b.n	800c36a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800c364:	bf00      	nop
 800c366:	e000      	b.n	800c36a <prvProcessReceivedCommands+0x1a6>
					break;
 800c368:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800c36a:	4b08      	ldr	r3, [pc, #32]	@ (800c38c <prvProcessReceivedCommands+0x1c8>)
 800c36c:	681b      	ldr	r3, [r3, #0]
 800c36e:	1d39      	adds	r1, r7, #4
 800c370:	2200      	movs	r2, #0
 800c372:	4618      	mov	r0, r3
 800c374:	f7fe f9a6 	bl	800a6c4 <xQueueReceive>
 800c378:	4603      	mov	r3, r0
 800c37a:	2b00      	cmp	r3, #0
 800c37c:	f47f af26 	bne.w	800c1cc <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800c380:	bf00      	nop
 800c382:	bf00      	nop
 800c384:	3730      	adds	r7, #48	@ 0x30
 800c386:	46bd      	mov	sp, r7
 800c388:	bd80      	pop	{r7, pc}
 800c38a:	bf00      	nop
 800c38c:	2000135c 	.word	0x2000135c

0800c390 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800c390:	b580      	push	{r7, lr}
 800c392:	b088      	sub	sp, #32
 800c394:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c396:	e049      	b.n	800c42c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800c398:	4b2e      	ldr	r3, [pc, #184]	@ (800c454 <prvSwitchTimerLists+0xc4>)
 800c39a:	681b      	ldr	r3, [r3, #0]
 800c39c:	68db      	ldr	r3, [r3, #12]
 800c39e:	681b      	ldr	r3, [r3, #0]
 800c3a0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800c3a2:	4b2c      	ldr	r3, [pc, #176]	@ (800c454 <prvSwitchTimerLists+0xc4>)
 800c3a4:	681b      	ldr	r3, [r3, #0]
 800c3a6:	68db      	ldr	r3, [r3, #12]
 800c3a8:	68db      	ldr	r3, [r3, #12]
 800c3aa:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800c3ac:	68fb      	ldr	r3, [r7, #12]
 800c3ae:	3304      	adds	r3, #4
 800c3b0:	4618      	mov	r0, r3
 800c3b2:	f7fd fd9b 	bl	8009eec <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800c3b6:	68fb      	ldr	r3, [r7, #12]
 800c3b8:	6a1b      	ldr	r3, [r3, #32]
 800c3ba:	68f8      	ldr	r0, [r7, #12]
 800c3bc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800c3be:	68fb      	ldr	r3, [r7, #12]
 800c3c0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800c3c4:	f003 0304 	and.w	r3, r3, #4
 800c3c8:	2b00      	cmp	r3, #0
 800c3ca:	d02f      	beq.n	800c42c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800c3cc:	68fb      	ldr	r3, [r7, #12]
 800c3ce:	699b      	ldr	r3, [r3, #24]
 800c3d0:	693a      	ldr	r2, [r7, #16]
 800c3d2:	4413      	add	r3, r2
 800c3d4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800c3d6:	68ba      	ldr	r2, [r7, #8]
 800c3d8:	693b      	ldr	r3, [r7, #16]
 800c3da:	429a      	cmp	r2, r3
 800c3dc:	d90e      	bls.n	800c3fc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800c3de:	68fb      	ldr	r3, [r7, #12]
 800c3e0:	68ba      	ldr	r2, [r7, #8]
 800c3e2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800c3e4:	68fb      	ldr	r3, [r7, #12]
 800c3e6:	68fa      	ldr	r2, [r7, #12]
 800c3e8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800c3ea:	4b1a      	ldr	r3, [pc, #104]	@ (800c454 <prvSwitchTimerLists+0xc4>)
 800c3ec:	681a      	ldr	r2, [r3, #0]
 800c3ee:	68fb      	ldr	r3, [r7, #12]
 800c3f0:	3304      	adds	r3, #4
 800c3f2:	4619      	mov	r1, r3
 800c3f4:	4610      	mov	r0, r2
 800c3f6:	f7fd fd40 	bl	8009e7a <vListInsert>
 800c3fa:	e017      	b.n	800c42c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800c3fc:	2300      	movs	r3, #0
 800c3fe:	9300      	str	r3, [sp, #0]
 800c400:	2300      	movs	r3, #0
 800c402:	693a      	ldr	r2, [r7, #16]
 800c404:	2100      	movs	r1, #0
 800c406:	68f8      	ldr	r0, [r7, #12]
 800c408:	f7ff fd58 	bl	800bebc <xTimerGenericCommand>
 800c40c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	2b00      	cmp	r3, #0
 800c412:	d10b      	bne.n	800c42c <prvSwitchTimerLists+0x9c>
	__asm volatile
 800c414:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c418:	f383 8811 	msr	BASEPRI, r3
 800c41c:	f3bf 8f6f 	isb	sy
 800c420:	f3bf 8f4f 	dsb	sy
 800c424:	603b      	str	r3, [r7, #0]
}
 800c426:	bf00      	nop
 800c428:	bf00      	nop
 800c42a:	e7fd      	b.n	800c428 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800c42c:	4b09      	ldr	r3, [pc, #36]	@ (800c454 <prvSwitchTimerLists+0xc4>)
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	681b      	ldr	r3, [r3, #0]
 800c432:	2b00      	cmp	r3, #0
 800c434:	d1b0      	bne.n	800c398 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800c436:	4b07      	ldr	r3, [pc, #28]	@ (800c454 <prvSwitchTimerLists+0xc4>)
 800c438:	681b      	ldr	r3, [r3, #0]
 800c43a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800c43c:	4b06      	ldr	r3, [pc, #24]	@ (800c458 <prvSwitchTimerLists+0xc8>)
 800c43e:	681b      	ldr	r3, [r3, #0]
 800c440:	4a04      	ldr	r2, [pc, #16]	@ (800c454 <prvSwitchTimerLists+0xc4>)
 800c442:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800c444:	4a04      	ldr	r2, [pc, #16]	@ (800c458 <prvSwitchTimerLists+0xc8>)
 800c446:	697b      	ldr	r3, [r7, #20]
 800c448:	6013      	str	r3, [r2, #0]
}
 800c44a:	bf00      	nop
 800c44c:	3718      	adds	r7, #24
 800c44e:	46bd      	mov	sp, r7
 800c450:	bd80      	pop	{r7, pc}
 800c452:	bf00      	nop
 800c454:	20001354 	.word	0x20001354
 800c458:	20001358 	.word	0x20001358

0800c45c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800c45c:	b580      	push	{r7, lr}
 800c45e:	b082      	sub	sp, #8
 800c460:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800c462:	f000 f969 	bl	800c738 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800c466:	4b15      	ldr	r3, [pc, #84]	@ (800c4bc <prvCheckForValidListAndQueue+0x60>)
 800c468:	681b      	ldr	r3, [r3, #0]
 800c46a:	2b00      	cmp	r3, #0
 800c46c:	d120      	bne.n	800c4b0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800c46e:	4814      	ldr	r0, [pc, #80]	@ (800c4c0 <prvCheckForValidListAndQueue+0x64>)
 800c470:	f7fd fcb2 	bl	8009dd8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800c474:	4813      	ldr	r0, [pc, #76]	@ (800c4c4 <prvCheckForValidListAndQueue+0x68>)
 800c476:	f7fd fcaf 	bl	8009dd8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800c47a:	4b13      	ldr	r3, [pc, #76]	@ (800c4c8 <prvCheckForValidListAndQueue+0x6c>)
 800c47c:	4a10      	ldr	r2, [pc, #64]	@ (800c4c0 <prvCheckForValidListAndQueue+0x64>)
 800c47e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800c480:	4b12      	ldr	r3, [pc, #72]	@ (800c4cc <prvCheckForValidListAndQueue+0x70>)
 800c482:	4a10      	ldr	r2, [pc, #64]	@ (800c4c4 <prvCheckForValidListAndQueue+0x68>)
 800c484:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800c486:	2300      	movs	r3, #0
 800c488:	9300      	str	r3, [sp, #0]
 800c48a:	4b11      	ldr	r3, [pc, #68]	@ (800c4d0 <prvCheckForValidListAndQueue+0x74>)
 800c48c:	4a11      	ldr	r2, [pc, #68]	@ (800c4d4 <prvCheckForValidListAndQueue+0x78>)
 800c48e:	2110      	movs	r1, #16
 800c490:	200a      	movs	r0, #10
 800c492:	f7fd fdbf 	bl	800a014 <xQueueGenericCreateStatic>
 800c496:	4603      	mov	r3, r0
 800c498:	4a08      	ldr	r2, [pc, #32]	@ (800c4bc <prvCheckForValidListAndQueue+0x60>)
 800c49a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800c49c:	4b07      	ldr	r3, [pc, #28]	@ (800c4bc <prvCheckForValidListAndQueue+0x60>)
 800c49e:	681b      	ldr	r3, [r3, #0]
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	d005      	beq.n	800c4b0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800c4a4:	4b05      	ldr	r3, [pc, #20]	@ (800c4bc <prvCheckForValidListAndQueue+0x60>)
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	490b      	ldr	r1, [pc, #44]	@ (800c4d8 <prvCheckForValidListAndQueue+0x7c>)
 800c4aa:	4618      	mov	r0, r3
 800c4ac:	f7fe fc24 	bl	800acf8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800c4b0:	f000 f974 	bl	800c79c <vPortExitCritical>
}
 800c4b4:	bf00      	nop
 800c4b6:	46bd      	mov	sp, r7
 800c4b8:	bd80      	pop	{r7, pc}
 800c4ba:	bf00      	nop
 800c4bc:	2000135c 	.word	0x2000135c
 800c4c0:	2000132c 	.word	0x2000132c
 800c4c4:	20001340 	.word	0x20001340
 800c4c8:	20001354 	.word	0x20001354
 800c4cc:	20001358 	.word	0x20001358
 800c4d0:	20001408 	.word	0x20001408
 800c4d4:	20001368 	.word	0x20001368
 800c4d8:	08010540 	.word	0x08010540

0800c4dc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800c4dc:	b480      	push	{r7}
 800c4de:	b085      	sub	sp, #20
 800c4e0:	af00      	add	r7, sp, #0
 800c4e2:	60f8      	str	r0, [r7, #12]
 800c4e4:	60b9      	str	r1, [r7, #8]
 800c4e6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800c4e8:	68fb      	ldr	r3, [r7, #12]
 800c4ea:	3b04      	subs	r3, #4
 800c4ec:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800c4ee:	68fb      	ldr	r3, [r7, #12]
 800c4f0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800c4f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c4f6:	68fb      	ldr	r3, [r7, #12]
 800c4f8:	3b04      	subs	r3, #4
 800c4fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800c4fc:	68bb      	ldr	r3, [r7, #8]
 800c4fe:	f023 0201 	bic.w	r2, r3, #1
 800c502:	68fb      	ldr	r3, [r7, #12]
 800c504:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800c506:	68fb      	ldr	r3, [r7, #12]
 800c508:	3b04      	subs	r3, #4
 800c50a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800c50c:	4a0c      	ldr	r2, [pc, #48]	@ (800c540 <pxPortInitialiseStack+0x64>)
 800c50e:	68fb      	ldr	r3, [r7, #12]
 800c510:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800c512:	68fb      	ldr	r3, [r7, #12]
 800c514:	3b14      	subs	r3, #20
 800c516:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800c518:	687a      	ldr	r2, [r7, #4]
 800c51a:	68fb      	ldr	r3, [r7, #12]
 800c51c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800c51e:	68fb      	ldr	r3, [r7, #12]
 800c520:	3b04      	subs	r3, #4
 800c522:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800c524:	68fb      	ldr	r3, [r7, #12]
 800c526:	f06f 0202 	mvn.w	r2, #2
 800c52a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800c52c:	68fb      	ldr	r3, [r7, #12]
 800c52e:	3b20      	subs	r3, #32
 800c530:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800c532:	68fb      	ldr	r3, [r7, #12]
}
 800c534:	4618      	mov	r0, r3
 800c536:	3714      	adds	r7, #20
 800c538:	46bd      	mov	sp, r7
 800c53a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c53e:	4770      	bx	lr
 800c540:	0800c545 	.word	0x0800c545

0800c544 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800c544:	b480      	push	{r7}
 800c546:	b085      	sub	sp, #20
 800c548:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800c54a:	2300      	movs	r3, #0
 800c54c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800c54e:	4b13      	ldr	r3, [pc, #76]	@ (800c59c <prvTaskExitError+0x58>)
 800c550:	681b      	ldr	r3, [r3, #0]
 800c552:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800c556:	d00b      	beq.n	800c570 <prvTaskExitError+0x2c>
	__asm volatile
 800c558:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c55c:	f383 8811 	msr	BASEPRI, r3
 800c560:	f3bf 8f6f 	isb	sy
 800c564:	f3bf 8f4f 	dsb	sy
 800c568:	60fb      	str	r3, [r7, #12]
}
 800c56a:	bf00      	nop
 800c56c:	bf00      	nop
 800c56e:	e7fd      	b.n	800c56c <prvTaskExitError+0x28>
	__asm volatile
 800c570:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c574:	f383 8811 	msr	BASEPRI, r3
 800c578:	f3bf 8f6f 	isb	sy
 800c57c:	f3bf 8f4f 	dsb	sy
 800c580:	60bb      	str	r3, [r7, #8]
}
 800c582:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800c584:	bf00      	nop
 800c586:	687b      	ldr	r3, [r7, #4]
 800c588:	2b00      	cmp	r3, #0
 800c58a:	d0fc      	beq.n	800c586 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800c58c:	bf00      	nop
 800c58e:	bf00      	nop
 800c590:	3714      	adds	r7, #20
 800c592:	46bd      	mov	sp, r7
 800c594:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c598:	4770      	bx	lr
 800c59a:	bf00      	nop
 800c59c:	20000018 	.word	0x20000018

0800c5a0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800c5a0:	4b07      	ldr	r3, [pc, #28]	@ (800c5c0 <pxCurrentTCBConst2>)
 800c5a2:	6819      	ldr	r1, [r3, #0]
 800c5a4:	6808      	ldr	r0, [r1, #0]
 800c5a6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5aa:	f380 8809 	msr	PSP, r0
 800c5ae:	f3bf 8f6f 	isb	sy
 800c5b2:	f04f 0000 	mov.w	r0, #0
 800c5b6:	f380 8811 	msr	BASEPRI, r0
 800c5ba:	4770      	bx	lr
 800c5bc:	f3af 8000 	nop.w

0800c5c0 <pxCurrentTCBConst2>:
 800c5c0:	20000e2c 	.word	0x20000e2c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800c5c4:	bf00      	nop
 800c5c6:	bf00      	nop

0800c5c8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800c5c8:	4808      	ldr	r0, [pc, #32]	@ (800c5ec <prvPortStartFirstTask+0x24>)
 800c5ca:	6800      	ldr	r0, [r0, #0]
 800c5cc:	6800      	ldr	r0, [r0, #0]
 800c5ce:	f380 8808 	msr	MSP, r0
 800c5d2:	f04f 0000 	mov.w	r0, #0
 800c5d6:	f380 8814 	msr	CONTROL, r0
 800c5da:	b662      	cpsie	i
 800c5dc:	b661      	cpsie	f
 800c5de:	f3bf 8f4f 	dsb	sy
 800c5e2:	f3bf 8f6f 	isb	sy
 800c5e6:	df00      	svc	0
 800c5e8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800c5ea:	bf00      	nop
 800c5ec:	e000ed08 	.word	0xe000ed08

0800c5f0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800c5f0:	b580      	push	{r7, lr}
 800c5f2:	b086      	sub	sp, #24
 800c5f4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800c5f6:	4b47      	ldr	r3, [pc, #284]	@ (800c714 <xPortStartScheduler+0x124>)
 800c5f8:	681b      	ldr	r3, [r3, #0]
 800c5fa:	4a47      	ldr	r2, [pc, #284]	@ (800c718 <xPortStartScheduler+0x128>)
 800c5fc:	4293      	cmp	r3, r2
 800c5fe:	d10b      	bne.n	800c618 <xPortStartScheduler+0x28>
	__asm volatile
 800c600:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c604:	f383 8811 	msr	BASEPRI, r3
 800c608:	f3bf 8f6f 	isb	sy
 800c60c:	f3bf 8f4f 	dsb	sy
 800c610:	613b      	str	r3, [r7, #16]
}
 800c612:	bf00      	nop
 800c614:	bf00      	nop
 800c616:	e7fd      	b.n	800c614 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800c618:	4b3e      	ldr	r3, [pc, #248]	@ (800c714 <xPortStartScheduler+0x124>)
 800c61a:	681b      	ldr	r3, [r3, #0]
 800c61c:	4a3f      	ldr	r2, [pc, #252]	@ (800c71c <xPortStartScheduler+0x12c>)
 800c61e:	4293      	cmp	r3, r2
 800c620:	d10b      	bne.n	800c63a <xPortStartScheduler+0x4a>
	__asm volatile
 800c622:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c626:	f383 8811 	msr	BASEPRI, r3
 800c62a:	f3bf 8f6f 	isb	sy
 800c62e:	f3bf 8f4f 	dsb	sy
 800c632:	60fb      	str	r3, [r7, #12]
}
 800c634:	bf00      	nop
 800c636:	bf00      	nop
 800c638:	e7fd      	b.n	800c636 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800c63a:	4b39      	ldr	r3, [pc, #228]	@ (800c720 <xPortStartScheduler+0x130>)
 800c63c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800c63e:	697b      	ldr	r3, [r7, #20]
 800c640:	781b      	ldrb	r3, [r3, #0]
 800c642:	b2db      	uxtb	r3, r3
 800c644:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800c646:	697b      	ldr	r3, [r7, #20]
 800c648:	22ff      	movs	r2, #255	@ 0xff
 800c64a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800c64c:	697b      	ldr	r3, [r7, #20]
 800c64e:	781b      	ldrb	r3, [r3, #0]
 800c650:	b2db      	uxtb	r3, r3
 800c652:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800c654:	78fb      	ldrb	r3, [r7, #3]
 800c656:	b2db      	uxtb	r3, r3
 800c658:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800c65c:	b2da      	uxtb	r2, r3
 800c65e:	4b31      	ldr	r3, [pc, #196]	@ (800c724 <xPortStartScheduler+0x134>)
 800c660:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800c662:	4b31      	ldr	r3, [pc, #196]	@ (800c728 <xPortStartScheduler+0x138>)
 800c664:	2207      	movs	r2, #7
 800c666:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c668:	e009      	b.n	800c67e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800c66a:	4b2f      	ldr	r3, [pc, #188]	@ (800c728 <xPortStartScheduler+0x138>)
 800c66c:	681b      	ldr	r3, [r3, #0]
 800c66e:	3b01      	subs	r3, #1
 800c670:	4a2d      	ldr	r2, [pc, #180]	@ (800c728 <xPortStartScheduler+0x138>)
 800c672:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800c674:	78fb      	ldrb	r3, [r7, #3]
 800c676:	b2db      	uxtb	r3, r3
 800c678:	005b      	lsls	r3, r3, #1
 800c67a:	b2db      	uxtb	r3, r3
 800c67c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800c67e:	78fb      	ldrb	r3, [r7, #3]
 800c680:	b2db      	uxtb	r3, r3
 800c682:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800c686:	2b80      	cmp	r3, #128	@ 0x80
 800c688:	d0ef      	beq.n	800c66a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800c68a:	4b27      	ldr	r3, [pc, #156]	@ (800c728 <xPortStartScheduler+0x138>)
 800c68c:	681b      	ldr	r3, [r3, #0]
 800c68e:	f1c3 0307 	rsb	r3, r3, #7
 800c692:	2b04      	cmp	r3, #4
 800c694:	d00b      	beq.n	800c6ae <xPortStartScheduler+0xbe>
	__asm volatile
 800c696:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c69a:	f383 8811 	msr	BASEPRI, r3
 800c69e:	f3bf 8f6f 	isb	sy
 800c6a2:	f3bf 8f4f 	dsb	sy
 800c6a6:	60bb      	str	r3, [r7, #8]
}
 800c6a8:	bf00      	nop
 800c6aa:	bf00      	nop
 800c6ac:	e7fd      	b.n	800c6aa <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800c6ae:	4b1e      	ldr	r3, [pc, #120]	@ (800c728 <xPortStartScheduler+0x138>)
 800c6b0:	681b      	ldr	r3, [r3, #0]
 800c6b2:	021b      	lsls	r3, r3, #8
 800c6b4:	4a1c      	ldr	r2, [pc, #112]	@ (800c728 <xPortStartScheduler+0x138>)
 800c6b6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800c6b8:	4b1b      	ldr	r3, [pc, #108]	@ (800c728 <xPortStartScheduler+0x138>)
 800c6ba:	681b      	ldr	r3, [r3, #0]
 800c6bc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800c6c0:	4a19      	ldr	r2, [pc, #100]	@ (800c728 <xPortStartScheduler+0x138>)
 800c6c2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800c6c4:	687b      	ldr	r3, [r7, #4]
 800c6c6:	b2da      	uxtb	r2, r3
 800c6c8:	697b      	ldr	r3, [r7, #20]
 800c6ca:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800c6cc:	4b17      	ldr	r3, [pc, #92]	@ (800c72c <xPortStartScheduler+0x13c>)
 800c6ce:	681b      	ldr	r3, [r3, #0]
 800c6d0:	4a16      	ldr	r2, [pc, #88]	@ (800c72c <xPortStartScheduler+0x13c>)
 800c6d2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800c6d6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800c6d8:	4b14      	ldr	r3, [pc, #80]	@ (800c72c <xPortStartScheduler+0x13c>)
 800c6da:	681b      	ldr	r3, [r3, #0]
 800c6dc:	4a13      	ldr	r2, [pc, #76]	@ (800c72c <xPortStartScheduler+0x13c>)
 800c6de:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800c6e2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800c6e4:	f000 f8da 	bl	800c89c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800c6e8:	4b11      	ldr	r3, [pc, #68]	@ (800c730 <xPortStartScheduler+0x140>)
 800c6ea:	2200      	movs	r2, #0
 800c6ec:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800c6ee:	f000 f8f9 	bl	800c8e4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800c6f2:	4b10      	ldr	r3, [pc, #64]	@ (800c734 <xPortStartScheduler+0x144>)
 800c6f4:	681b      	ldr	r3, [r3, #0]
 800c6f6:	4a0f      	ldr	r2, [pc, #60]	@ (800c734 <xPortStartScheduler+0x144>)
 800c6f8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800c6fc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800c6fe:	f7ff ff63 	bl	800c5c8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800c702:	f7fe ff31 	bl	800b568 <vTaskSwitchContext>
	prvTaskExitError();
 800c706:	f7ff ff1d 	bl	800c544 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800c70a:	2300      	movs	r3, #0
}
 800c70c:	4618      	mov	r0, r3
 800c70e:	3718      	adds	r7, #24
 800c710:	46bd      	mov	sp, r7
 800c712:	bd80      	pop	{r7, pc}
 800c714:	e000ed00 	.word	0xe000ed00
 800c718:	410fc271 	.word	0x410fc271
 800c71c:	410fc270 	.word	0x410fc270
 800c720:	e000e400 	.word	0xe000e400
 800c724:	20001458 	.word	0x20001458
 800c728:	2000145c 	.word	0x2000145c
 800c72c:	e000ed20 	.word	0xe000ed20
 800c730:	20000018 	.word	0x20000018
 800c734:	e000ef34 	.word	0xe000ef34

0800c738 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800c738:	b480      	push	{r7}
 800c73a:	b083      	sub	sp, #12
 800c73c:	af00      	add	r7, sp, #0
	__asm volatile
 800c73e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c742:	f383 8811 	msr	BASEPRI, r3
 800c746:	f3bf 8f6f 	isb	sy
 800c74a:	f3bf 8f4f 	dsb	sy
 800c74e:	607b      	str	r3, [r7, #4]
}
 800c750:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800c752:	4b10      	ldr	r3, [pc, #64]	@ (800c794 <vPortEnterCritical+0x5c>)
 800c754:	681b      	ldr	r3, [r3, #0]
 800c756:	3301      	adds	r3, #1
 800c758:	4a0e      	ldr	r2, [pc, #56]	@ (800c794 <vPortEnterCritical+0x5c>)
 800c75a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800c75c:	4b0d      	ldr	r3, [pc, #52]	@ (800c794 <vPortEnterCritical+0x5c>)
 800c75e:	681b      	ldr	r3, [r3, #0]
 800c760:	2b01      	cmp	r3, #1
 800c762:	d110      	bne.n	800c786 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800c764:	4b0c      	ldr	r3, [pc, #48]	@ (800c798 <vPortEnterCritical+0x60>)
 800c766:	681b      	ldr	r3, [r3, #0]
 800c768:	b2db      	uxtb	r3, r3
 800c76a:	2b00      	cmp	r3, #0
 800c76c:	d00b      	beq.n	800c786 <vPortEnterCritical+0x4e>
	__asm volatile
 800c76e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c772:	f383 8811 	msr	BASEPRI, r3
 800c776:	f3bf 8f6f 	isb	sy
 800c77a:	f3bf 8f4f 	dsb	sy
 800c77e:	603b      	str	r3, [r7, #0]
}
 800c780:	bf00      	nop
 800c782:	bf00      	nop
 800c784:	e7fd      	b.n	800c782 <vPortEnterCritical+0x4a>
	}
}
 800c786:	bf00      	nop
 800c788:	370c      	adds	r7, #12
 800c78a:	46bd      	mov	sp, r7
 800c78c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c790:	4770      	bx	lr
 800c792:	bf00      	nop
 800c794:	20000018 	.word	0x20000018
 800c798:	e000ed04 	.word	0xe000ed04

0800c79c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800c79c:	b480      	push	{r7}
 800c79e:	b083      	sub	sp, #12
 800c7a0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800c7a2:	4b12      	ldr	r3, [pc, #72]	@ (800c7ec <vPortExitCritical+0x50>)
 800c7a4:	681b      	ldr	r3, [r3, #0]
 800c7a6:	2b00      	cmp	r3, #0
 800c7a8:	d10b      	bne.n	800c7c2 <vPortExitCritical+0x26>
	__asm volatile
 800c7aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c7ae:	f383 8811 	msr	BASEPRI, r3
 800c7b2:	f3bf 8f6f 	isb	sy
 800c7b6:	f3bf 8f4f 	dsb	sy
 800c7ba:	607b      	str	r3, [r7, #4]
}
 800c7bc:	bf00      	nop
 800c7be:	bf00      	nop
 800c7c0:	e7fd      	b.n	800c7be <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800c7c2:	4b0a      	ldr	r3, [pc, #40]	@ (800c7ec <vPortExitCritical+0x50>)
 800c7c4:	681b      	ldr	r3, [r3, #0]
 800c7c6:	3b01      	subs	r3, #1
 800c7c8:	4a08      	ldr	r2, [pc, #32]	@ (800c7ec <vPortExitCritical+0x50>)
 800c7ca:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800c7cc:	4b07      	ldr	r3, [pc, #28]	@ (800c7ec <vPortExitCritical+0x50>)
 800c7ce:	681b      	ldr	r3, [r3, #0]
 800c7d0:	2b00      	cmp	r3, #0
 800c7d2:	d105      	bne.n	800c7e0 <vPortExitCritical+0x44>
 800c7d4:	2300      	movs	r3, #0
 800c7d6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c7d8:	683b      	ldr	r3, [r7, #0]
 800c7da:	f383 8811 	msr	BASEPRI, r3
}
 800c7de:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800c7e0:	bf00      	nop
 800c7e2:	370c      	adds	r7, #12
 800c7e4:	46bd      	mov	sp, r7
 800c7e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ea:	4770      	bx	lr
 800c7ec:	20000018 	.word	0x20000018

0800c7f0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800c7f0:	f3ef 8009 	mrs	r0, PSP
 800c7f4:	f3bf 8f6f 	isb	sy
 800c7f8:	4b15      	ldr	r3, [pc, #84]	@ (800c850 <pxCurrentTCBConst>)
 800c7fa:	681a      	ldr	r2, [r3, #0]
 800c7fc:	f01e 0f10 	tst.w	lr, #16
 800c800:	bf08      	it	eq
 800c802:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800c806:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c80a:	6010      	str	r0, [r2, #0]
 800c80c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800c810:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800c814:	f380 8811 	msr	BASEPRI, r0
 800c818:	f3bf 8f4f 	dsb	sy
 800c81c:	f3bf 8f6f 	isb	sy
 800c820:	f7fe fea2 	bl	800b568 <vTaskSwitchContext>
 800c824:	f04f 0000 	mov.w	r0, #0
 800c828:	f380 8811 	msr	BASEPRI, r0
 800c82c:	bc09      	pop	{r0, r3}
 800c82e:	6819      	ldr	r1, [r3, #0]
 800c830:	6808      	ldr	r0, [r1, #0]
 800c832:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c836:	f01e 0f10 	tst.w	lr, #16
 800c83a:	bf08      	it	eq
 800c83c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800c840:	f380 8809 	msr	PSP, r0
 800c844:	f3bf 8f6f 	isb	sy
 800c848:	4770      	bx	lr
 800c84a:	bf00      	nop
 800c84c:	f3af 8000 	nop.w

0800c850 <pxCurrentTCBConst>:
 800c850:	20000e2c 	.word	0x20000e2c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800c854:	bf00      	nop
 800c856:	bf00      	nop

0800c858 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800c858:	b580      	push	{r7, lr}
 800c85a:	b082      	sub	sp, #8
 800c85c:	af00      	add	r7, sp, #0
	__asm volatile
 800c85e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c862:	f383 8811 	msr	BASEPRI, r3
 800c866:	f3bf 8f6f 	isb	sy
 800c86a:	f3bf 8f4f 	dsb	sy
 800c86e:	607b      	str	r3, [r7, #4]
}
 800c870:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800c872:	f7fe fdbf 	bl	800b3f4 <xTaskIncrementTick>
 800c876:	4603      	mov	r3, r0
 800c878:	2b00      	cmp	r3, #0
 800c87a:	d003      	beq.n	800c884 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800c87c:	4b06      	ldr	r3, [pc, #24]	@ (800c898 <xPortSysTickHandler+0x40>)
 800c87e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800c882:	601a      	str	r2, [r3, #0]
 800c884:	2300      	movs	r3, #0
 800c886:	603b      	str	r3, [r7, #0]
	__asm volatile
 800c888:	683b      	ldr	r3, [r7, #0]
 800c88a:	f383 8811 	msr	BASEPRI, r3
}
 800c88e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800c890:	bf00      	nop
 800c892:	3708      	adds	r7, #8
 800c894:	46bd      	mov	sp, r7
 800c896:	bd80      	pop	{r7, pc}
 800c898:	e000ed04 	.word	0xe000ed04

0800c89c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800c89c:	b480      	push	{r7}
 800c89e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800c8a0:	4b0b      	ldr	r3, [pc, #44]	@ (800c8d0 <vPortSetupTimerInterrupt+0x34>)
 800c8a2:	2200      	movs	r2, #0
 800c8a4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800c8a6:	4b0b      	ldr	r3, [pc, #44]	@ (800c8d4 <vPortSetupTimerInterrupt+0x38>)
 800c8a8:	2200      	movs	r2, #0
 800c8aa:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800c8ac:	4b0a      	ldr	r3, [pc, #40]	@ (800c8d8 <vPortSetupTimerInterrupt+0x3c>)
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	4a0a      	ldr	r2, [pc, #40]	@ (800c8dc <vPortSetupTimerInterrupt+0x40>)
 800c8b2:	fba2 2303 	umull	r2, r3, r2, r3
 800c8b6:	099b      	lsrs	r3, r3, #6
 800c8b8:	4a09      	ldr	r2, [pc, #36]	@ (800c8e0 <vPortSetupTimerInterrupt+0x44>)
 800c8ba:	3b01      	subs	r3, #1
 800c8bc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800c8be:	4b04      	ldr	r3, [pc, #16]	@ (800c8d0 <vPortSetupTimerInterrupt+0x34>)
 800c8c0:	2207      	movs	r2, #7
 800c8c2:	601a      	str	r2, [r3, #0]
}
 800c8c4:	bf00      	nop
 800c8c6:	46bd      	mov	sp, r7
 800c8c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c8cc:	4770      	bx	lr
 800c8ce:	bf00      	nop
 800c8d0:	e000e010 	.word	0xe000e010
 800c8d4:	e000e018 	.word	0xe000e018
 800c8d8:	2000000c 	.word	0x2000000c
 800c8dc:	10624dd3 	.word	0x10624dd3
 800c8e0:	e000e014 	.word	0xe000e014

0800c8e4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800c8e4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800c8f4 <vPortEnableVFP+0x10>
 800c8e8:	6801      	ldr	r1, [r0, #0]
 800c8ea:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800c8ee:	6001      	str	r1, [r0, #0]
 800c8f0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800c8f2:	bf00      	nop
 800c8f4:	e000ed88 	.word	0xe000ed88

0800c8f8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800c8f8:	b480      	push	{r7}
 800c8fa:	b085      	sub	sp, #20
 800c8fc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800c8fe:	f3ef 8305 	mrs	r3, IPSR
 800c902:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800c904:	68fb      	ldr	r3, [r7, #12]
 800c906:	2b0f      	cmp	r3, #15
 800c908:	d915      	bls.n	800c936 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800c90a:	4a18      	ldr	r2, [pc, #96]	@ (800c96c <vPortValidateInterruptPriority+0x74>)
 800c90c:	68fb      	ldr	r3, [r7, #12]
 800c90e:	4413      	add	r3, r2
 800c910:	781b      	ldrb	r3, [r3, #0]
 800c912:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800c914:	4b16      	ldr	r3, [pc, #88]	@ (800c970 <vPortValidateInterruptPriority+0x78>)
 800c916:	781b      	ldrb	r3, [r3, #0]
 800c918:	7afa      	ldrb	r2, [r7, #11]
 800c91a:	429a      	cmp	r2, r3
 800c91c:	d20b      	bcs.n	800c936 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800c91e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c922:	f383 8811 	msr	BASEPRI, r3
 800c926:	f3bf 8f6f 	isb	sy
 800c92a:	f3bf 8f4f 	dsb	sy
 800c92e:	607b      	str	r3, [r7, #4]
}
 800c930:	bf00      	nop
 800c932:	bf00      	nop
 800c934:	e7fd      	b.n	800c932 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800c936:	4b0f      	ldr	r3, [pc, #60]	@ (800c974 <vPortValidateInterruptPriority+0x7c>)
 800c938:	681b      	ldr	r3, [r3, #0]
 800c93a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800c93e:	4b0e      	ldr	r3, [pc, #56]	@ (800c978 <vPortValidateInterruptPriority+0x80>)
 800c940:	681b      	ldr	r3, [r3, #0]
 800c942:	429a      	cmp	r2, r3
 800c944:	d90b      	bls.n	800c95e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800c946:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c94a:	f383 8811 	msr	BASEPRI, r3
 800c94e:	f3bf 8f6f 	isb	sy
 800c952:	f3bf 8f4f 	dsb	sy
 800c956:	603b      	str	r3, [r7, #0]
}
 800c958:	bf00      	nop
 800c95a:	bf00      	nop
 800c95c:	e7fd      	b.n	800c95a <vPortValidateInterruptPriority+0x62>
	}
 800c95e:	bf00      	nop
 800c960:	3714      	adds	r7, #20
 800c962:	46bd      	mov	sp, r7
 800c964:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c968:	4770      	bx	lr
 800c96a:	bf00      	nop
 800c96c:	e000e3f0 	.word	0xe000e3f0
 800c970:	20001458 	.word	0x20001458
 800c974:	e000ed0c 	.word	0xe000ed0c
 800c978:	2000145c 	.word	0x2000145c

0800c97c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800c97c:	b580      	push	{r7, lr}
 800c97e:	b08a      	sub	sp, #40	@ 0x28
 800c980:	af00      	add	r7, sp, #0
 800c982:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800c984:	2300      	movs	r3, #0
 800c986:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800c988:	f7fe fc78 	bl	800b27c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800c98c:	4b5c      	ldr	r3, [pc, #368]	@ (800cb00 <pvPortMalloc+0x184>)
 800c98e:	681b      	ldr	r3, [r3, #0]
 800c990:	2b00      	cmp	r3, #0
 800c992:	d101      	bne.n	800c998 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800c994:	f000 f924 	bl	800cbe0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800c998:	4b5a      	ldr	r3, [pc, #360]	@ (800cb04 <pvPortMalloc+0x188>)
 800c99a:	681a      	ldr	r2, [r3, #0]
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	4013      	ands	r3, r2
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	f040 8095 	bne.w	800cad0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800c9a6:	687b      	ldr	r3, [r7, #4]
 800c9a8:	2b00      	cmp	r3, #0
 800c9aa:	d01e      	beq.n	800c9ea <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800c9ac:	2208      	movs	r2, #8
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	4413      	add	r3, r2
 800c9b2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	f003 0307 	and.w	r3, r3, #7
 800c9ba:	2b00      	cmp	r3, #0
 800c9bc:	d015      	beq.n	800c9ea <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800c9be:	687b      	ldr	r3, [r7, #4]
 800c9c0:	f023 0307 	bic.w	r3, r3, #7
 800c9c4:	3308      	adds	r3, #8
 800c9c6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800c9c8:	687b      	ldr	r3, [r7, #4]
 800c9ca:	f003 0307 	and.w	r3, r3, #7
 800c9ce:	2b00      	cmp	r3, #0
 800c9d0:	d00b      	beq.n	800c9ea <pvPortMalloc+0x6e>
	__asm volatile
 800c9d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800c9d6:	f383 8811 	msr	BASEPRI, r3
 800c9da:	f3bf 8f6f 	isb	sy
 800c9de:	f3bf 8f4f 	dsb	sy
 800c9e2:	617b      	str	r3, [r7, #20]
}
 800c9e4:	bf00      	nop
 800c9e6:	bf00      	nop
 800c9e8:	e7fd      	b.n	800c9e6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800c9ea:	687b      	ldr	r3, [r7, #4]
 800c9ec:	2b00      	cmp	r3, #0
 800c9ee:	d06f      	beq.n	800cad0 <pvPortMalloc+0x154>
 800c9f0:	4b45      	ldr	r3, [pc, #276]	@ (800cb08 <pvPortMalloc+0x18c>)
 800c9f2:	681b      	ldr	r3, [r3, #0]
 800c9f4:	687a      	ldr	r2, [r7, #4]
 800c9f6:	429a      	cmp	r2, r3
 800c9f8:	d86a      	bhi.n	800cad0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800c9fa:	4b44      	ldr	r3, [pc, #272]	@ (800cb0c <pvPortMalloc+0x190>)
 800c9fc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800c9fe:	4b43      	ldr	r3, [pc, #268]	@ (800cb0c <pvPortMalloc+0x190>)
 800ca00:	681b      	ldr	r3, [r3, #0]
 800ca02:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ca04:	e004      	b.n	800ca10 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800ca06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca08:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800ca0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca0c:	681b      	ldr	r3, [r3, #0]
 800ca0e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800ca10:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca12:	685b      	ldr	r3, [r3, #4]
 800ca14:	687a      	ldr	r2, [r7, #4]
 800ca16:	429a      	cmp	r2, r3
 800ca18:	d903      	bls.n	800ca22 <pvPortMalloc+0xa6>
 800ca1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca1c:	681b      	ldr	r3, [r3, #0]
 800ca1e:	2b00      	cmp	r3, #0
 800ca20:	d1f1      	bne.n	800ca06 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800ca22:	4b37      	ldr	r3, [pc, #220]	@ (800cb00 <pvPortMalloc+0x184>)
 800ca24:	681b      	ldr	r3, [r3, #0]
 800ca26:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ca28:	429a      	cmp	r2, r3
 800ca2a:	d051      	beq.n	800cad0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800ca2c:	6a3b      	ldr	r3, [r7, #32]
 800ca2e:	681b      	ldr	r3, [r3, #0]
 800ca30:	2208      	movs	r2, #8
 800ca32:	4413      	add	r3, r2
 800ca34:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800ca36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca38:	681a      	ldr	r2, [r3, #0]
 800ca3a:	6a3b      	ldr	r3, [r7, #32]
 800ca3c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800ca3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca40:	685a      	ldr	r2, [r3, #4]
 800ca42:	687b      	ldr	r3, [r7, #4]
 800ca44:	1ad2      	subs	r2, r2, r3
 800ca46:	2308      	movs	r3, #8
 800ca48:	005b      	lsls	r3, r3, #1
 800ca4a:	429a      	cmp	r2, r3
 800ca4c:	d920      	bls.n	800ca90 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800ca4e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800ca50:	687b      	ldr	r3, [r7, #4]
 800ca52:	4413      	add	r3, r2
 800ca54:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800ca56:	69bb      	ldr	r3, [r7, #24]
 800ca58:	f003 0307 	and.w	r3, r3, #7
 800ca5c:	2b00      	cmp	r3, #0
 800ca5e:	d00b      	beq.n	800ca78 <pvPortMalloc+0xfc>
	__asm volatile
 800ca60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800ca64:	f383 8811 	msr	BASEPRI, r3
 800ca68:	f3bf 8f6f 	isb	sy
 800ca6c:	f3bf 8f4f 	dsb	sy
 800ca70:	613b      	str	r3, [r7, #16]
}
 800ca72:	bf00      	nop
 800ca74:	bf00      	nop
 800ca76:	e7fd      	b.n	800ca74 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800ca78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca7a:	685a      	ldr	r2, [r3, #4]
 800ca7c:	687b      	ldr	r3, [r7, #4]
 800ca7e:	1ad2      	subs	r2, r2, r3
 800ca80:	69bb      	ldr	r3, [r7, #24]
 800ca82:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800ca84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca86:	687a      	ldr	r2, [r7, #4]
 800ca88:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800ca8a:	69b8      	ldr	r0, [r7, #24]
 800ca8c:	f000 f90a 	bl	800cca4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800ca90:	4b1d      	ldr	r3, [pc, #116]	@ (800cb08 <pvPortMalloc+0x18c>)
 800ca92:	681a      	ldr	r2, [r3, #0]
 800ca94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800ca96:	685b      	ldr	r3, [r3, #4]
 800ca98:	1ad3      	subs	r3, r2, r3
 800ca9a:	4a1b      	ldr	r2, [pc, #108]	@ (800cb08 <pvPortMalloc+0x18c>)
 800ca9c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800ca9e:	4b1a      	ldr	r3, [pc, #104]	@ (800cb08 <pvPortMalloc+0x18c>)
 800caa0:	681a      	ldr	r2, [r3, #0]
 800caa2:	4b1b      	ldr	r3, [pc, #108]	@ (800cb10 <pvPortMalloc+0x194>)
 800caa4:	681b      	ldr	r3, [r3, #0]
 800caa6:	429a      	cmp	r2, r3
 800caa8:	d203      	bcs.n	800cab2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800caaa:	4b17      	ldr	r3, [pc, #92]	@ (800cb08 <pvPortMalloc+0x18c>)
 800caac:	681b      	ldr	r3, [r3, #0]
 800caae:	4a18      	ldr	r2, [pc, #96]	@ (800cb10 <pvPortMalloc+0x194>)
 800cab0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800cab2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cab4:	685a      	ldr	r2, [r3, #4]
 800cab6:	4b13      	ldr	r3, [pc, #76]	@ (800cb04 <pvPortMalloc+0x188>)
 800cab8:	681b      	ldr	r3, [r3, #0]
 800caba:	431a      	orrs	r2, r3
 800cabc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cabe:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800cac0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800cac2:	2200      	movs	r2, #0
 800cac4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800cac6:	4b13      	ldr	r3, [pc, #76]	@ (800cb14 <pvPortMalloc+0x198>)
 800cac8:	681b      	ldr	r3, [r3, #0]
 800caca:	3301      	adds	r3, #1
 800cacc:	4a11      	ldr	r2, [pc, #68]	@ (800cb14 <pvPortMalloc+0x198>)
 800cace:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800cad0:	f7fe fbe2 	bl	800b298 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800cad4:	69fb      	ldr	r3, [r7, #28]
 800cad6:	f003 0307 	and.w	r3, r3, #7
 800cada:	2b00      	cmp	r3, #0
 800cadc:	d00b      	beq.n	800caf6 <pvPortMalloc+0x17a>
	__asm volatile
 800cade:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cae2:	f383 8811 	msr	BASEPRI, r3
 800cae6:	f3bf 8f6f 	isb	sy
 800caea:	f3bf 8f4f 	dsb	sy
 800caee:	60fb      	str	r3, [r7, #12]
}
 800caf0:	bf00      	nop
 800caf2:	bf00      	nop
 800caf4:	e7fd      	b.n	800caf2 <pvPortMalloc+0x176>
	return pvReturn;
 800caf6:	69fb      	ldr	r3, [r7, #28]
}
 800caf8:	4618      	mov	r0, r3
 800cafa:	3728      	adds	r7, #40	@ 0x28
 800cafc:	46bd      	mov	sp, r7
 800cafe:	bd80      	pop	{r7, pc}
 800cb00:	20005068 	.word	0x20005068
 800cb04:	2000507c 	.word	0x2000507c
 800cb08:	2000506c 	.word	0x2000506c
 800cb0c:	20005060 	.word	0x20005060
 800cb10:	20005070 	.word	0x20005070
 800cb14:	20005074 	.word	0x20005074

0800cb18 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800cb18:	b580      	push	{r7, lr}
 800cb1a:	b086      	sub	sp, #24
 800cb1c:	af00      	add	r7, sp, #0
 800cb1e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	2b00      	cmp	r3, #0
 800cb28:	d04f      	beq.n	800cbca <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800cb2a:	2308      	movs	r3, #8
 800cb2c:	425b      	negs	r3, r3
 800cb2e:	697a      	ldr	r2, [r7, #20]
 800cb30:	4413      	add	r3, r2
 800cb32:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800cb34:	697b      	ldr	r3, [r7, #20]
 800cb36:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800cb38:	693b      	ldr	r3, [r7, #16]
 800cb3a:	685a      	ldr	r2, [r3, #4]
 800cb3c:	4b25      	ldr	r3, [pc, #148]	@ (800cbd4 <vPortFree+0xbc>)
 800cb3e:	681b      	ldr	r3, [r3, #0]
 800cb40:	4013      	ands	r3, r2
 800cb42:	2b00      	cmp	r3, #0
 800cb44:	d10b      	bne.n	800cb5e <vPortFree+0x46>
	__asm volatile
 800cb46:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb4a:	f383 8811 	msr	BASEPRI, r3
 800cb4e:	f3bf 8f6f 	isb	sy
 800cb52:	f3bf 8f4f 	dsb	sy
 800cb56:	60fb      	str	r3, [r7, #12]
}
 800cb58:	bf00      	nop
 800cb5a:	bf00      	nop
 800cb5c:	e7fd      	b.n	800cb5a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800cb5e:	693b      	ldr	r3, [r7, #16]
 800cb60:	681b      	ldr	r3, [r3, #0]
 800cb62:	2b00      	cmp	r3, #0
 800cb64:	d00b      	beq.n	800cb7e <vPortFree+0x66>
	__asm volatile
 800cb66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800cb6a:	f383 8811 	msr	BASEPRI, r3
 800cb6e:	f3bf 8f6f 	isb	sy
 800cb72:	f3bf 8f4f 	dsb	sy
 800cb76:	60bb      	str	r3, [r7, #8]
}
 800cb78:	bf00      	nop
 800cb7a:	bf00      	nop
 800cb7c:	e7fd      	b.n	800cb7a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800cb7e:	693b      	ldr	r3, [r7, #16]
 800cb80:	685a      	ldr	r2, [r3, #4]
 800cb82:	4b14      	ldr	r3, [pc, #80]	@ (800cbd4 <vPortFree+0xbc>)
 800cb84:	681b      	ldr	r3, [r3, #0]
 800cb86:	4013      	ands	r3, r2
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	d01e      	beq.n	800cbca <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800cb8c:	693b      	ldr	r3, [r7, #16]
 800cb8e:	681b      	ldr	r3, [r3, #0]
 800cb90:	2b00      	cmp	r3, #0
 800cb92:	d11a      	bne.n	800cbca <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800cb94:	693b      	ldr	r3, [r7, #16]
 800cb96:	685a      	ldr	r2, [r3, #4]
 800cb98:	4b0e      	ldr	r3, [pc, #56]	@ (800cbd4 <vPortFree+0xbc>)
 800cb9a:	681b      	ldr	r3, [r3, #0]
 800cb9c:	43db      	mvns	r3, r3
 800cb9e:	401a      	ands	r2, r3
 800cba0:	693b      	ldr	r3, [r7, #16]
 800cba2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800cba4:	f7fe fb6a 	bl	800b27c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800cba8:	693b      	ldr	r3, [r7, #16]
 800cbaa:	685a      	ldr	r2, [r3, #4]
 800cbac:	4b0a      	ldr	r3, [pc, #40]	@ (800cbd8 <vPortFree+0xc0>)
 800cbae:	681b      	ldr	r3, [r3, #0]
 800cbb0:	4413      	add	r3, r2
 800cbb2:	4a09      	ldr	r2, [pc, #36]	@ (800cbd8 <vPortFree+0xc0>)
 800cbb4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800cbb6:	6938      	ldr	r0, [r7, #16]
 800cbb8:	f000 f874 	bl	800cca4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800cbbc:	4b07      	ldr	r3, [pc, #28]	@ (800cbdc <vPortFree+0xc4>)
 800cbbe:	681b      	ldr	r3, [r3, #0]
 800cbc0:	3301      	adds	r3, #1
 800cbc2:	4a06      	ldr	r2, [pc, #24]	@ (800cbdc <vPortFree+0xc4>)
 800cbc4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800cbc6:	f7fe fb67 	bl	800b298 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800cbca:	bf00      	nop
 800cbcc:	3718      	adds	r7, #24
 800cbce:	46bd      	mov	sp, r7
 800cbd0:	bd80      	pop	{r7, pc}
 800cbd2:	bf00      	nop
 800cbd4:	2000507c 	.word	0x2000507c
 800cbd8:	2000506c 	.word	0x2000506c
 800cbdc:	20005078 	.word	0x20005078

0800cbe0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800cbe0:	b480      	push	{r7}
 800cbe2:	b085      	sub	sp, #20
 800cbe4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800cbe6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800cbea:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800cbec:	4b27      	ldr	r3, [pc, #156]	@ (800cc8c <prvHeapInit+0xac>)
 800cbee:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800cbf0:	68fb      	ldr	r3, [r7, #12]
 800cbf2:	f003 0307 	and.w	r3, r3, #7
 800cbf6:	2b00      	cmp	r3, #0
 800cbf8:	d00c      	beq.n	800cc14 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800cbfa:	68fb      	ldr	r3, [r7, #12]
 800cbfc:	3307      	adds	r3, #7
 800cbfe:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cc00:	68fb      	ldr	r3, [r7, #12]
 800cc02:	f023 0307 	bic.w	r3, r3, #7
 800cc06:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800cc08:	68ba      	ldr	r2, [r7, #8]
 800cc0a:	68fb      	ldr	r3, [r7, #12]
 800cc0c:	1ad3      	subs	r3, r2, r3
 800cc0e:	4a1f      	ldr	r2, [pc, #124]	@ (800cc8c <prvHeapInit+0xac>)
 800cc10:	4413      	add	r3, r2
 800cc12:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800cc14:	68fb      	ldr	r3, [r7, #12]
 800cc16:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800cc18:	4a1d      	ldr	r2, [pc, #116]	@ (800cc90 <prvHeapInit+0xb0>)
 800cc1a:	687b      	ldr	r3, [r7, #4]
 800cc1c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800cc1e:	4b1c      	ldr	r3, [pc, #112]	@ (800cc90 <prvHeapInit+0xb0>)
 800cc20:	2200      	movs	r2, #0
 800cc22:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800cc24:	687b      	ldr	r3, [r7, #4]
 800cc26:	68ba      	ldr	r2, [r7, #8]
 800cc28:	4413      	add	r3, r2
 800cc2a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800cc2c:	2208      	movs	r2, #8
 800cc2e:	68fb      	ldr	r3, [r7, #12]
 800cc30:	1a9b      	subs	r3, r3, r2
 800cc32:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800cc34:	68fb      	ldr	r3, [r7, #12]
 800cc36:	f023 0307 	bic.w	r3, r3, #7
 800cc3a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800cc3c:	68fb      	ldr	r3, [r7, #12]
 800cc3e:	4a15      	ldr	r2, [pc, #84]	@ (800cc94 <prvHeapInit+0xb4>)
 800cc40:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800cc42:	4b14      	ldr	r3, [pc, #80]	@ (800cc94 <prvHeapInit+0xb4>)
 800cc44:	681b      	ldr	r3, [r3, #0]
 800cc46:	2200      	movs	r2, #0
 800cc48:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800cc4a:	4b12      	ldr	r3, [pc, #72]	@ (800cc94 <prvHeapInit+0xb4>)
 800cc4c:	681b      	ldr	r3, [r3, #0]
 800cc4e:	2200      	movs	r2, #0
 800cc50:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800cc56:	683b      	ldr	r3, [r7, #0]
 800cc58:	68fa      	ldr	r2, [r7, #12]
 800cc5a:	1ad2      	subs	r2, r2, r3
 800cc5c:	683b      	ldr	r3, [r7, #0]
 800cc5e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800cc60:	4b0c      	ldr	r3, [pc, #48]	@ (800cc94 <prvHeapInit+0xb4>)
 800cc62:	681a      	ldr	r2, [r3, #0]
 800cc64:	683b      	ldr	r3, [r7, #0]
 800cc66:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cc68:	683b      	ldr	r3, [r7, #0]
 800cc6a:	685b      	ldr	r3, [r3, #4]
 800cc6c:	4a0a      	ldr	r2, [pc, #40]	@ (800cc98 <prvHeapInit+0xb8>)
 800cc6e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800cc70:	683b      	ldr	r3, [r7, #0]
 800cc72:	685b      	ldr	r3, [r3, #4]
 800cc74:	4a09      	ldr	r2, [pc, #36]	@ (800cc9c <prvHeapInit+0xbc>)
 800cc76:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800cc78:	4b09      	ldr	r3, [pc, #36]	@ (800cca0 <prvHeapInit+0xc0>)
 800cc7a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800cc7e:	601a      	str	r2, [r3, #0]
}
 800cc80:	bf00      	nop
 800cc82:	3714      	adds	r7, #20
 800cc84:	46bd      	mov	sp, r7
 800cc86:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc8a:	4770      	bx	lr
 800cc8c:	20001460 	.word	0x20001460
 800cc90:	20005060 	.word	0x20005060
 800cc94:	20005068 	.word	0x20005068
 800cc98:	20005070 	.word	0x20005070
 800cc9c:	2000506c 	.word	0x2000506c
 800cca0:	2000507c 	.word	0x2000507c

0800cca4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800cca4:	b480      	push	{r7}
 800cca6:	b085      	sub	sp, #20
 800cca8:	af00      	add	r7, sp, #0
 800ccaa:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800ccac:	4b28      	ldr	r3, [pc, #160]	@ (800cd50 <prvInsertBlockIntoFreeList+0xac>)
 800ccae:	60fb      	str	r3, [r7, #12]
 800ccb0:	e002      	b.n	800ccb8 <prvInsertBlockIntoFreeList+0x14>
 800ccb2:	68fb      	ldr	r3, [r7, #12]
 800ccb4:	681b      	ldr	r3, [r3, #0]
 800ccb6:	60fb      	str	r3, [r7, #12]
 800ccb8:	68fb      	ldr	r3, [r7, #12]
 800ccba:	681b      	ldr	r3, [r3, #0]
 800ccbc:	687a      	ldr	r2, [r7, #4]
 800ccbe:	429a      	cmp	r2, r3
 800ccc0:	d8f7      	bhi.n	800ccb2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ccc2:	68fb      	ldr	r3, [r7, #12]
 800ccc4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ccc6:	68fb      	ldr	r3, [r7, #12]
 800ccc8:	685b      	ldr	r3, [r3, #4]
 800ccca:	68ba      	ldr	r2, [r7, #8]
 800cccc:	4413      	add	r3, r2
 800ccce:	687a      	ldr	r2, [r7, #4]
 800ccd0:	429a      	cmp	r2, r3
 800ccd2:	d108      	bne.n	800cce6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ccd4:	68fb      	ldr	r3, [r7, #12]
 800ccd6:	685a      	ldr	r2, [r3, #4]
 800ccd8:	687b      	ldr	r3, [r7, #4]
 800ccda:	685b      	ldr	r3, [r3, #4]
 800ccdc:	441a      	add	r2, r3
 800ccde:	68fb      	ldr	r3, [r7, #12]
 800cce0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800cce2:	68fb      	ldr	r3, [r7, #12]
 800cce4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	685b      	ldr	r3, [r3, #4]
 800ccee:	68ba      	ldr	r2, [r7, #8]
 800ccf0:	441a      	add	r2, r3
 800ccf2:	68fb      	ldr	r3, [r7, #12]
 800ccf4:	681b      	ldr	r3, [r3, #0]
 800ccf6:	429a      	cmp	r2, r3
 800ccf8:	d118      	bne.n	800cd2c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ccfa:	68fb      	ldr	r3, [r7, #12]
 800ccfc:	681a      	ldr	r2, [r3, #0]
 800ccfe:	4b15      	ldr	r3, [pc, #84]	@ (800cd54 <prvInsertBlockIntoFreeList+0xb0>)
 800cd00:	681b      	ldr	r3, [r3, #0]
 800cd02:	429a      	cmp	r2, r3
 800cd04:	d00d      	beq.n	800cd22 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800cd06:	687b      	ldr	r3, [r7, #4]
 800cd08:	685a      	ldr	r2, [r3, #4]
 800cd0a:	68fb      	ldr	r3, [r7, #12]
 800cd0c:	681b      	ldr	r3, [r3, #0]
 800cd0e:	685b      	ldr	r3, [r3, #4]
 800cd10:	441a      	add	r2, r3
 800cd12:	687b      	ldr	r3, [r7, #4]
 800cd14:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800cd16:	68fb      	ldr	r3, [r7, #12]
 800cd18:	681b      	ldr	r3, [r3, #0]
 800cd1a:	681a      	ldr	r2, [r3, #0]
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	601a      	str	r2, [r3, #0]
 800cd20:	e008      	b.n	800cd34 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800cd22:	4b0c      	ldr	r3, [pc, #48]	@ (800cd54 <prvInsertBlockIntoFreeList+0xb0>)
 800cd24:	681a      	ldr	r2, [r3, #0]
 800cd26:	687b      	ldr	r3, [r7, #4]
 800cd28:	601a      	str	r2, [r3, #0]
 800cd2a:	e003      	b.n	800cd34 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800cd2c:	68fb      	ldr	r3, [r7, #12]
 800cd2e:	681a      	ldr	r2, [r3, #0]
 800cd30:	687b      	ldr	r3, [r7, #4]
 800cd32:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800cd34:	68fa      	ldr	r2, [r7, #12]
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	429a      	cmp	r2, r3
 800cd3a:	d002      	beq.n	800cd42 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800cd3c:	68fb      	ldr	r3, [r7, #12]
 800cd3e:	687a      	ldr	r2, [r7, #4]
 800cd40:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800cd42:	bf00      	nop
 800cd44:	3714      	adds	r7, #20
 800cd46:	46bd      	mov	sp, r7
 800cd48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cd4c:	4770      	bx	lr
 800cd4e:	bf00      	nop
 800cd50:	20005060 	.word	0x20005060
 800cd54:	20005068 	.word	0x20005068

0800cd58 <__cvt>:
 800cd58:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800cd5c:	ec57 6b10 	vmov	r6, r7, d0
 800cd60:	2f00      	cmp	r7, #0
 800cd62:	460c      	mov	r4, r1
 800cd64:	4619      	mov	r1, r3
 800cd66:	463b      	mov	r3, r7
 800cd68:	bfbb      	ittet	lt
 800cd6a:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800cd6e:	461f      	movlt	r7, r3
 800cd70:	2300      	movge	r3, #0
 800cd72:	232d      	movlt	r3, #45	@ 0x2d
 800cd74:	700b      	strb	r3, [r1, #0]
 800cd76:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800cd78:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800cd7c:	4691      	mov	r9, r2
 800cd7e:	f023 0820 	bic.w	r8, r3, #32
 800cd82:	bfbc      	itt	lt
 800cd84:	4632      	movlt	r2, r6
 800cd86:	4616      	movlt	r6, r2
 800cd88:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800cd8c:	d005      	beq.n	800cd9a <__cvt+0x42>
 800cd8e:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800cd92:	d100      	bne.n	800cd96 <__cvt+0x3e>
 800cd94:	3401      	adds	r4, #1
 800cd96:	2102      	movs	r1, #2
 800cd98:	e000      	b.n	800cd9c <__cvt+0x44>
 800cd9a:	2103      	movs	r1, #3
 800cd9c:	ab03      	add	r3, sp, #12
 800cd9e:	9301      	str	r3, [sp, #4]
 800cda0:	ab02      	add	r3, sp, #8
 800cda2:	9300      	str	r3, [sp, #0]
 800cda4:	ec47 6b10 	vmov	d0, r6, r7
 800cda8:	4653      	mov	r3, sl
 800cdaa:	4622      	mov	r2, r4
 800cdac:	f000 ffd8 	bl	800dd60 <_dtoa_r>
 800cdb0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800cdb4:	4605      	mov	r5, r0
 800cdb6:	d119      	bne.n	800cdec <__cvt+0x94>
 800cdb8:	f019 0f01 	tst.w	r9, #1
 800cdbc:	d00e      	beq.n	800cddc <__cvt+0x84>
 800cdbe:	eb00 0904 	add.w	r9, r0, r4
 800cdc2:	2200      	movs	r2, #0
 800cdc4:	2300      	movs	r3, #0
 800cdc6:	4630      	mov	r0, r6
 800cdc8:	4639      	mov	r1, r7
 800cdca:	f7f3 fe7d 	bl	8000ac8 <__aeabi_dcmpeq>
 800cdce:	b108      	cbz	r0, 800cdd4 <__cvt+0x7c>
 800cdd0:	f8cd 900c 	str.w	r9, [sp, #12]
 800cdd4:	2230      	movs	r2, #48	@ 0x30
 800cdd6:	9b03      	ldr	r3, [sp, #12]
 800cdd8:	454b      	cmp	r3, r9
 800cdda:	d31e      	bcc.n	800ce1a <__cvt+0xc2>
 800cddc:	9b03      	ldr	r3, [sp, #12]
 800cdde:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800cde0:	1b5b      	subs	r3, r3, r5
 800cde2:	4628      	mov	r0, r5
 800cde4:	6013      	str	r3, [r2, #0]
 800cde6:	b004      	add	sp, #16
 800cde8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cdec:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800cdf0:	eb00 0904 	add.w	r9, r0, r4
 800cdf4:	d1e5      	bne.n	800cdc2 <__cvt+0x6a>
 800cdf6:	7803      	ldrb	r3, [r0, #0]
 800cdf8:	2b30      	cmp	r3, #48	@ 0x30
 800cdfa:	d10a      	bne.n	800ce12 <__cvt+0xba>
 800cdfc:	2200      	movs	r2, #0
 800cdfe:	2300      	movs	r3, #0
 800ce00:	4630      	mov	r0, r6
 800ce02:	4639      	mov	r1, r7
 800ce04:	f7f3 fe60 	bl	8000ac8 <__aeabi_dcmpeq>
 800ce08:	b918      	cbnz	r0, 800ce12 <__cvt+0xba>
 800ce0a:	f1c4 0401 	rsb	r4, r4, #1
 800ce0e:	f8ca 4000 	str.w	r4, [sl]
 800ce12:	f8da 3000 	ldr.w	r3, [sl]
 800ce16:	4499      	add	r9, r3
 800ce18:	e7d3      	b.n	800cdc2 <__cvt+0x6a>
 800ce1a:	1c59      	adds	r1, r3, #1
 800ce1c:	9103      	str	r1, [sp, #12]
 800ce1e:	701a      	strb	r2, [r3, #0]
 800ce20:	e7d9      	b.n	800cdd6 <__cvt+0x7e>

0800ce22 <__exponent>:
 800ce22:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ce24:	2900      	cmp	r1, #0
 800ce26:	bfba      	itte	lt
 800ce28:	4249      	neglt	r1, r1
 800ce2a:	232d      	movlt	r3, #45	@ 0x2d
 800ce2c:	232b      	movge	r3, #43	@ 0x2b
 800ce2e:	2909      	cmp	r1, #9
 800ce30:	7002      	strb	r2, [r0, #0]
 800ce32:	7043      	strb	r3, [r0, #1]
 800ce34:	dd29      	ble.n	800ce8a <__exponent+0x68>
 800ce36:	f10d 0307 	add.w	r3, sp, #7
 800ce3a:	461d      	mov	r5, r3
 800ce3c:	270a      	movs	r7, #10
 800ce3e:	461a      	mov	r2, r3
 800ce40:	fbb1 f6f7 	udiv	r6, r1, r7
 800ce44:	fb07 1416 	mls	r4, r7, r6, r1
 800ce48:	3430      	adds	r4, #48	@ 0x30
 800ce4a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800ce4e:	460c      	mov	r4, r1
 800ce50:	2c63      	cmp	r4, #99	@ 0x63
 800ce52:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800ce56:	4631      	mov	r1, r6
 800ce58:	dcf1      	bgt.n	800ce3e <__exponent+0x1c>
 800ce5a:	3130      	adds	r1, #48	@ 0x30
 800ce5c:	1e94      	subs	r4, r2, #2
 800ce5e:	f803 1c01 	strb.w	r1, [r3, #-1]
 800ce62:	1c41      	adds	r1, r0, #1
 800ce64:	4623      	mov	r3, r4
 800ce66:	42ab      	cmp	r3, r5
 800ce68:	d30a      	bcc.n	800ce80 <__exponent+0x5e>
 800ce6a:	f10d 0309 	add.w	r3, sp, #9
 800ce6e:	1a9b      	subs	r3, r3, r2
 800ce70:	42ac      	cmp	r4, r5
 800ce72:	bf88      	it	hi
 800ce74:	2300      	movhi	r3, #0
 800ce76:	3302      	adds	r3, #2
 800ce78:	4403      	add	r3, r0
 800ce7a:	1a18      	subs	r0, r3, r0
 800ce7c:	b003      	add	sp, #12
 800ce7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ce80:	f813 6b01 	ldrb.w	r6, [r3], #1
 800ce84:	f801 6f01 	strb.w	r6, [r1, #1]!
 800ce88:	e7ed      	b.n	800ce66 <__exponent+0x44>
 800ce8a:	2330      	movs	r3, #48	@ 0x30
 800ce8c:	3130      	adds	r1, #48	@ 0x30
 800ce8e:	7083      	strb	r3, [r0, #2]
 800ce90:	70c1      	strb	r1, [r0, #3]
 800ce92:	1d03      	adds	r3, r0, #4
 800ce94:	e7f1      	b.n	800ce7a <__exponent+0x58>
	...

0800ce98 <_printf_float>:
 800ce98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce9c:	b08d      	sub	sp, #52	@ 0x34
 800ce9e:	460c      	mov	r4, r1
 800cea0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800cea4:	4616      	mov	r6, r2
 800cea6:	461f      	mov	r7, r3
 800cea8:	4605      	mov	r5, r0
 800ceaa:	f000 fdf3 	bl	800da94 <_localeconv_r>
 800ceae:	6803      	ldr	r3, [r0, #0]
 800ceb0:	9304      	str	r3, [sp, #16]
 800ceb2:	4618      	mov	r0, r3
 800ceb4:	f7f3 f9dc 	bl	8000270 <strlen>
 800ceb8:	2300      	movs	r3, #0
 800ceba:	930a      	str	r3, [sp, #40]	@ 0x28
 800cebc:	f8d8 3000 	ldr.w	r3, [r8]
 800cec0:	9005      	str	r0, [sp, #20]
 800cec2:	3307      	adds	r3, #7
 800cec4:	f023 0307 	bic.w	r3, r3, #7
 800cec8:	f103 0208 	add.w	r2, r3, #8
 800cecc:	f894 a018 	ldrb.w	sl, [r4, #24]
 800ced0:	f8d4 b000 	ldr.w	fp, [r4]
 800ced4:	f8c8 2000 	str.w	r2, [r8]
 800ced8:	e9d3 8900 	ldrd	r8, r9, [r3]
 800cedc:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800cee0:	9307      	str	r3, [sp, #28]
 800cee2:	f8cd 8018 	str.w	r8, [sp, #24]
 800cee6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800ceea:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ceee:	4b9c      	ldr	r3, [pc, #624]	@ (800d160 <_printf_float+0x2c8>)
 800cef0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800cef4:	f7f3 fe1a 	bl	8000b2c <__aeabi_dcmpun>
 800cef8:	bb70      	cbnz	r0, 800cf58 <_printf_float+0xc0>
 800cefa:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800cefe:	4b98      	ldr	r3, [pc, #608]	@ (800d160 <_printf_float+0x2c8>)
 800cf00:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800cf04:	f7f3 fdf4 	bl	8000af0 <__aeabi_dcmple>
 800cf08:	bb30      	cbnz	r0, 800cf58 <_printf_float+0xc0>
 800cf0a:	2200      	movs	r2, #0
 800cf0c:	2300      	movs	r3, #0
 800cf0e:	4640      	mov	r0, r8
 800cf10:	4649      	mov	r1, r9
 800cf12:	f7f3 fde3 	bl	8000adc <__aeabi_dcmplt>
 800cf16:	b110      	cbz	r0, 800cf1e <_printf_float+0x86>
 800cf18:	232d      	movs	r3, #45	@ 0x2d
 800cf1a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cf1e:	4a91      	ldr	r2, [pc, #580]	@ (800d164 <_printf_float+0x2cc>)
 800cf20:	4b91      	ldr	r3, [pc, #580]	@ (800d168 <_printf_float+0x2d0>)
 800cf22:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800cf26:	bf94      	ite	ls
 800cf28:	4690      	movls	r8, r2
 800cf2a:	4698      	movhi	r8, r3
 800cf2c:	2303      	movs	r3, #3
 800cf2e:	6123      	str	r3, [r4, #16]
 800cf30:	f02b 0304 	bic.w	r3, fp, #4
 800cf34:	6023      	str	r3, [r4, #0]
 800cf36:	f04f 0900 	mov.w	r9, #0
 800cf3a:	9700      	str	r7, [sp, #0]
 800cf3c:	4633      	mov	r3, r6
 800cf3e:	aa0b      	add	r2, sp, #44	@ 0x2c
 800cf40:	4621      	mov	r1, r4
 800cf42:	4628      	mov	r0, r5
 800cf44:	f000 f9d2 	bl	800d2ec <_printf_common>
 800cf48:	3001      	adds	r0, #1
 800cf4a:	f040 808d 	bne.w	800d068 <_printf_float+0x1d0>
 800cf4e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800cf52:	b00d      	add	sp, #52	@ 0x34
 800cf54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cf58:	4642      	mov	r2, r8
 800cf5a:	464b      	mov	r3, r9
 800cf5c:	4640      	mov	r0, r8
 800cf5e:	4649      	mov	r1, r9
 800cf60:	f7f3 fde4 	bl	8000b2c <__aeabi_dcmpun>
 800cf64:	b140      	cbz	r0, 800cf78 <_printf_float+0xe0>
 800cf66:	464b      	mov	r3, r9
 800cf68:	2b00      	cmp	r3, #0
 800cf6a:	bfbc      	itt	lt
 800cf6c:	232d      	movlt	r3, #45	@ 0x2d
 800cf6e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800cf72:	4a7e      	ldr	r2, [pc, #504]	@ (800d16c <_printf_float+0x2d4>)
 800cf74:	4b7e      	ldr	r3, [pc, #504]	@ (800d170 <_printf_float+0x2d8>)
 800cf76:	e7d4      	b.n	800cf22 <_printf_float+0x8a>
 800cf78:	6863      	ldr	r3, [r4, #4]
 800cf7a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800cf7e:	9206      	str	r2, [sp, #24]
 800cf80:	1c5a      	adds	r2, r3, #1
 800cf82:	d13b      	bne.n	800cffc <_printf_float+0x164>
 800cf84:	2306      	movs	r3, #6
 800cf86:	6063      	str	r3, [r4, #4]
 800cf88:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800cf8c:	2300      	movs	r3, #0
 800cf8e:	6022      	str	r2, [r4, #0]
 800cf90:	9303      	str	r3, [sp, #12]
 800cf92:	ab0a      	add	r3, sp, #40	@ 0x28
 800cf94:	e9cd a301 	strd	sl, r3, [sp, #4]
 800cf98:	ab09      	add	r3, sp, #36	@ 0x24
 800cf9a:	9300      	str	r3, [sp, #0]
 800cf9c:	6861      	ldr	r1, [r4, #4]
 800cf9e:	ec49 8b10 	vmov	d0, r8, r9
 800cfa2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800cfa6:	4628      	mov	r0, r5
 800cfa8:	f7ff fed6 	bl	800cd58 <__cvt>
 800cfac:	9b06      	ldr	r3, [sp, #24]
 800cfae:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800cfb0:	2b47      	cmp	r3, #71	@ 0x47
 800cfb2:	4680      	mov	r8, r0
 800cfb4:	d129      	bne.n	800d00a <_printf_float+0x172>
 800cfb6:	1cc8      	adds	r0, r1, #3
 800cfb8:	db02      	blt.n	800cfc0 <_printf_float+0x128>
 800cfba:	6863      	ldr	r3, [r4, #4]
 800cfbc:	4299      	cmp	r1, r3
 800cfbe:	dd41      	ble.n	800d044 <_printf_float+0x1ac>
 800cfc0:	f1aa 0a02 	sub.w	sl, sl, #2
 800cfc4:	fa5f fa8a 	uxtb.w	sl, sl
 800cfc8:	3901      	subs	r1, #1
 800cfca:	4652      	mov	r2, sl
 800cfcc:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800cfd0:	9109      	str	r1, [sp, #36]	@ 0x24
 800cfd2:	f7ff ff26 	bl	800ce22 <__exponent>
 800cfd6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800cfd8:	1813      	adds	r3, r2, r0
 800cfda:	2a01      	cmp	r2, #1
 800cfdc:	4681      	mov	r9, r0
 800cfde:	6123      	str	r3, [r4, #16]
 800cfe0:	dc02      	bgt.n	800cfe8 <_printf_float+0x150>
 800cfe2:	6822      	ldr	r2, [r4, #0]
 800cfe4:	07d2      	lsls	r2, r2, #31
 800cfe6:	d501      	bpl.n	800cfec <_printf_float+0x154>
 800cfe8:	3301      	adds	r3, #1
 800cfea:	6123      	str	r3, [r4, #16]
 800cfec:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800cff0:	2b00      	cmp	r3, #0
 800cff2:	d0a2      	beq.n	800cf3a <_printf_float+0xa2>
 800cff4:	232d      	movs	r3, #45	@ 0x2d
 800cff6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800cffa:	e79e      	b.n	800cf3a <_printf_float+0xa2>
 800cffc:	9a06      	ldr	r2, [sp, #24]
 800cffe:	2a47      	cmp	r2, #71	@ 0x47
 800d000:	d1c2      	bne.n	800cf88 <_printf_float+0xf0>
 800d002:	2b00      	cmp	r3, #0
 800d004:	d1c0      	bne.n	800cf88 <_printf_float+0xf0>
 800d006:	2301      	movs	r3, #1
 800d008:	e7bd      	b.n	800cf86 <_printf_float+0xee>
 800d00a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800d00e:	d9db      	bls.n	800cfc8 <_printf_float+0x130>
 800d010:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800d014:	d118      	bne.n	800d048 <_printf_float+0x1b0>
 800d016:	2900      	cmp	r1, #0
 800d018:	6863      	ldr	r3, [r4, #4]
 800d01a:	dd0b      	ble.n	800d034 <_printf_float+0x19c>
 800d01c:	6121      	str	r1, [r4, #16]
 800d01e:	b913      	cbnz	r3, 800d026 <_printf_float+0x18e>
 800d020:	6822      	ldr	r2, [r4, #0]
 800d022:	07d0      	lsls	r0, r2, #31
 800d024:	d502      	bpl.n	800d02c <_printf_float+0x194>
 800d026:	3301      	adds	r3, #1
 800d028:	440b      	add	r3, r1
 800d02a:	6123      	str	r3, [r4, #16]
 800d02c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800d02e:	f04f 0900 	mov.w	r9, #0
 800d032:	e7db      	b.n	800cfec <_printf_float+0x154>
 800d034:	b913      	cbnz	r3, 800d03c <_printf_float+0x1a4>
 800d036:	6822      	ldr	r2, [r4, #0]
 800d038:	07d2      	lsls	r2, r2, #31
 800d03a:	d501      	bpl.n	800d040 <_printf_float+0x1a8>
 800d03c:	3302      	adds	r3, #2
 800d03e:	e7f4      	b.n	800d02a <_printf_float+0x192>
 800d040:	2301      	movs	r3, #1
 800d042:	e7f2      	b.n	800d02a <_printf_float+0x192>
 800d044:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800d048:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800d04a:	4299      	cmp	r1, r3
 800d04c:	db05      	blt.n	800d05a <_printf_float+0x1c2>
 800d04e:	6823      	ldr	r3, [r4, #0]
 800d050:	6121      	str	r1, [r4, #16]
 800d052:	07d8      	lsls	r0, r3, #31
 800d054:	d5ea      	bpl.n	800d02c <_printf_float+0x194>
 800d056:	1c4b      	adds	r3, r1, #1
 800d058:	e7e7      	b.n	800d02a <_printf_float+0x192>
 800d05a:	2900      	cmp	r1, #0
 800d05c:	bfd4      	ite	le
 800d05e:	f1c1 0202 	rsble	r2, r1, #2
 800d062:	2201      	movgt	r2, #1
 800d064:	4413      	add	r3, r2
 800d066:	e7e0      	b.n	800d02a <_printf_float+0x192>
 800d068:	6823      	ldr	r3, [r4, #0]
 800d06a:	055a      	lsls	r2, r3, #21
 800d06c:	d407      	bmi.n	800d07e <_printf_float+0x1e6>
 800d06e:	6923      	ldr	r3, [r4, #16]
 800d070:	4642      	mov	r2, r8
 800d072:	4631      	mov	r1, r6
 800d074:	4628      	mov	r0, r5
 800d076:	47b8      	blx	r7
 800d078:	3001      	adds	r0, #1
 800d07a:	d12b      	bne.n	800d0d4 <_printf_float+0x23c>
 800d07c:	e767      	b.n	800cf4e <_printf_float+0xb6>
 800d07e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800d082:	f240 80dd 	bls.w	800d240 <_printf_float+0x3a8>
 800d086:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800d08a:	2200      	movs	r2, #0
 800d08c:	2300      	movs	r3, #0
 800d08e:	f7f3 fd1b 	bl	8000ac8 <__aeabi_dcmpeq>
 800d092:	2800      	cmp	r0, #0
 800d094:	d033      	beq.n	800d0fe <_printf_float+0x266>
 800d096:	4a37      	ldr	r2, [pc, #220]	@ (800d174 <_printf_float+0x2dc>)
 800d098:	2301      	movs	r3, #1
 800d09a:	4631      	mov	r1, r6
 800d09c:	4628      	mov	r0, r5
 800d09e:	47b8      	blx	r7
 800d0a0:	3001      	adds	r0, #1
 800d0a2:	f43f af54 	beq.w	800cf4e <_printf_float+0xb6>
 800d0a6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800d0aa:	4543      	cmp	r3, r8
 800d0ac:	db02      	blt.n	800d0b4 <_printf_float+0x21c>
 800d0ae:	6823      	ldr	r3, [r4, #0]
 800d0b0:	07d8      	lsls	r0, r3, #31
 800d0b2:	d50f      	bpl.n	800d0d4 <_printf_float+0x23c>
 800d0b4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d0b8:	4631      	mov	r1, r6
 800d0ba:	4628      	mov	r0, r5
 800d0bc:	47b8      	blx	r7
 800d0be:	3001      	adds	r0, #1
 800d0c0:	f43f af45 	beq.w	800cf4e <_printf_float+0xb6>
 800d0c4:	f04f 0900 	mov.w	r9, #0
 800d0c8:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800d0cc:	f104 0a1a 	add.w	sl, r4, #26
 800d0d0:	45c8      	cmp	r8, r9
 800d0d2:	dc09      	bgt.n	800d0e8 <_printf_float+0x250>
 800d0d4:	6823      	ldr	r3, [r4, #0]
 800d0d6:	079b      	lsls	r3, r3, #30
 800d0d8:	f100 8103 	bmi.w	800d2e2 <_printf_float+0x44a>
 800d0dc:	68e0      	ldr	r0, [r4, #12]
 800d0de:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800d0e0:	4298      	cmp	r0, r3
 800d0e2:	bfb8      	it	lt
 800d0e4:	4618      	movlt	r0, r3
 800d0e6:	e734      	b.n	800cf52 <_printf_float+0xba>
 800d0e8:	2301      	movs	r3, #1
 800d0ea:	4652      	mov	r2, sl
 800d0ec:	4631      	mov	r1, r6
 800d0ee:	4628      	mov	r0, r5
 800d0f0:	47b8      	blx	r7
 800d0f2:	3001      	adds	r0, #1
 800d0f4:	f43f af2b 	beq.w	800cf4e <_printf_float+0xb6>
 800d0f8:	f109 0901 	add.w	r9, r9, #1
 800d0fc:	e7e8      	b.n	800d0d0 <_printf_float+0x238>
 800d0fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d100:	2b00      	cmp	r3, #0
 800d102:	dc39      	bgt.n	800d178 <_printf_float+0x2e0>
 800d104:	4a1b      	ldr	r2, [pc, #108]	@ (800d174 <_printf_float+0x2dc>)
 800d106:	2301      	movs	r3, #1
 800d108:	4631      	mov	r1, r6
 800d10a:	4628      	mov	r0, r5
 800d10c:	47b8      	blx	r7
 800d10e:	3001      	adds	r0, #1
 800d110:	f43f af1d 	beq.w	800cf4e <_printf_float+0xb6>
 800d114:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800d118:	ea59 0303 	orrs.w	r3, r9, r3
 800d11c:	d102      	bne.n	800d124 <_printf_float+0x28c>
 800d11e:	6823      	ldr	r3, [r4, #0]
 800d120:	07d9      	lsls	r1, r3, #31
 800d122:	d5d7      	bpl.n	800d0d4 <_printf_float+0x23c>
 800d124:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d128:	4631      	mov	r1, r6
 800d12a:	4628      	mov	r0, r5
 800d12c:	47b8      	blx	r7
 800d12e:	3001      	adds	r0, #1
 800d130:	f43f af0d 	beq.w	800cf4e <_printf_float+0xb6>
 800d134:	f04f 0a00 	mov.w	sl, #0
 800d138:	f104 0b1a 	add.w	fp, r4, #26
 800d13c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d13e:	425b      	negs	r3, r3
 800d140:	4553      	cmp	r3, sl
 800d142:	dc01      	bgt.n	800d148 <_printf_float+0x2b0>
 800d144:	464b      	mov	r3, r9
 800d146:	e793      	b.n	800d070 <_printf_float+0x1d8>
 800d148:	2301      	movs	r3, #1
 800d14a:	465a      	mov	r2, fp
 800d14c:	4631      	mov	r1, r6
 800d14e:	4628      	mov	r0, r5
 800d150:	47b8      	blx	r7
 800d152:	3001      	adds	r0, #1
 800d154:	f43f aefb 	beq.w	800cf4e <_printf_float+0xb6>
 800d158:	f10a 0a01 	add.w	sl, sl, #1
 800d15c:	e7ee      	b.n	800d13c <_printf_float+0x2a4>
 800d15e:	bf00      	nop
 800d160:	7fefffff 	.word	0x7fefffff
 800d164:	08010dcc 	.word	0x08010dcc
 800d168:	08010dd0 	.word	0x08010dd0
 800d16c:	08010dd4 	.word	0x08010dd4
 800d170:	08010dd8 	.word	0x08010dd8
 800d174:	08010ddc 	.word	0x08010ddc
 800d178:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800d17a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800d17e:	4553      	cmp	r3, sl
 800d180:	bfa8      	it	ge
 800d182:	4653      	movge	r3, sl
 800d184:	2b00      	cmp	r3, #0
 800d186:	4699      	mov	r9, r3
 800d188:	dc36      	bgt.n	800d1f8 <_printf_float+0x360>
 800d18a:	f04f 0b00 	mov.w	fp, #0
 800d18e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d192:	f104 021a 	add.w	r2, r4, #26
 800d196:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800d198:	9306      	str	r3, [sp, #24]
 800d19a:	eba3 0309 	sub.w	r3, r3, r9
 800d19e:	455b      	cmp	r3, fp
 800d1a0:	dc31      	bgt.n	800d206 <_printf_float+0x36e>
 800d1a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d1a4:	459a      	cmp	sl, r3
 800d1a6:	dc3a      	bgt.n	800d21e <_printf_float+0x386>
 800d1a8:	6823      	ldr	r3, [r4, #0]
 800d1aa:	07da      	lsls	r2, r3, #31
 800d1ac:	d437      	bmi.n	800d21e <_printf_float+0x386>
 800d1ae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d1b0:	ebaa 0903 	sub.w	r9, sl, r3
 800d1b4:	9b06      	ldr	r3, [sp, #24]
 800d1b6:	ebaa 0303 	sub.w	r3, sl, r3
 800d1ba:	4599      	cmp	r9, r3
 800d1bc:	bfa8      	it	ge
 800d1be:	4699      	movge	r9, r3
 800d1c0:	f1b9 0f00 	cmp.w	r9, #0
 800d1c4:	dc33      	bgt.n	800d22e <_printf_float+0x396>
 800d1c6:	f04f 0800 	mov.w	r8, #0
 800d1ca:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800d1ce:	f104 0b1a 	add.w	fp, r4, #26
 800d1d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d1d4:	ebaa 0303 	sub.w	r3, sl, r3
 800d1d8:	eba3 0309 	sub.w	r3, r3, r9
 800d1dc:	4543      	cmp	r3, r8
 800d1de:	f77f af79 	ble.w	800d0d4 <_printf_float+0x23c>
 800d1e2:	2301      	movs	r3, #1
 800d1e4:	465a      	mov	r2, fp
 800d1e6:	4631      	mov	r1, r6
 800d1e8:	4628      	mov	r0, r5
 800d1ea:	47b8      	blx	r7
 800d1ec:	3001      	adds	r0, #1
 800d1ee:	f43f aeae 	beq.w	800cf4e <_printf_float+0xb6>
 800d1f2:	f108 0801 	add.w	r8, r8, #1
 800d1f6:	e7ec      	b.n	800d1d2 <_printf_float+0x33a>
 800d1f8:	4642      	mov	r2, r8
 800d1fa:	4631      	mov	r1, r6
 800d1fc:	4628      	mov	r0, r5
 800d1fe:	47b8      	blx	r7
 800d200:	3001      	adds	r0, #1
 800d202:	d1c2      	bne.n	800d18a <_printf_float+0x2f2>
 800d204:	e6a3      	b.n	800cf4e <_printf_float+0xb6>
 800d206:	2301      	movs	r3, #1
 800d208:	4631      	mov	r1, r6
 800d20a:	4628      	mov	r0, r5
 800d20c:	9206      	str	r2, [sp, #24]
 800d20e:	47b8      	blx	r7
 800d210:	3001      	adds	r0, #1
 800d212:	f43f ae9c 	beq.w	800cf4e <_printf_float+0xb6>
 800d216:	9a06      	ldr	r2, [sp, #24]
 800d218:	f10b 0b01 	add.w	fp, fp, #1
 800d21c:	e7bb      	b.n	800d196 <_printf_float+0x2fe>
 800d21e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d222:	4631      	mov	r1, r6
 800d224:	4628      	mov	r0, r5
 800d226:	47b8      	blx	r7
 800d228:	3001      	adds	r0, #1
 800d22a:	d1c0      	bne.n	800d1ae <_printf_float+0x316>
 800d22c:	e68f      	b.n	800cf4e <_printf_float+0xb6>
 800d22e:	9a06      	ldr	r2, [sp, #24]
 800d230:	464b      	mov	r3, r9
 800d232:	4442      	add	r2, r8
 800d234:	4631      	mov	r1, r6
 800d236:	4628      	mov	r0, r5
 800d238:	47b8      	blx	r7
 800d23a:	3001      	adds	r0, #1
 800d23c:	d1c3      	bne.n	800d1c6 <_printf_float+0x32e>
 800d23e:	e686      	b.n	800cf4e <_printf_float+0xb6>
 800d240:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800d244:	f1ba 0f01 	cmp.w	sl, #1
 800d248:	dc01      	bgt.n	800d24e <_printf_float+0x3b6>
 800d24a:	07db      	lsls	r3, r3, #31
 800d24c:	d536      	bpl.n	800d2bc <_printf_float+0x424>
 800d24e:	2301      	movs	r3, #1
 800d250:	4642      	mov	r2, r8
 800d252:	4631      	mov	r1, r6
 800d254:	4628      	mov	r0, r5
 800d256:	47b8      	blx	r7
 800d258:	3001      	adds	r0, #1
 800d25a:	f43f ae78 	beq.w	800cf4e <_printf_float+0xb6>
 800d25e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800d262:	4631      	mov	r1, r6
 800d264:	4628      	mov	r0, r5
 800d266:	47b8      	blx	r7
 800d268:	3001      	adds	r0, #1
 800d26a:	f43f ae70 	beq.w	800cf4e <_printf_float+0xb6>
 800d26e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800d272:	2200      	movs	r2, #0
 800d274:	2300      	movs	r3, #0
 800d276:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800d27a:	f7f3 fc25 	bl	8000ac8 <__aeabi_dcmpeq>
 800d27e:	b9c0      	cbnz	r0, 800d2b2 <_printf_float+0x41a>
 800d280:	4653      	mov	r3, sl
 800d282:	f108 0201 	add.w	r2, r8, #1
 800d286:	4631      	mov	r1, r6
 800d288:	4628      	mov	r0, r5
 800d28a:	47b8      	blx	r7
 800d28c:	3001      	adds	r0, #1
 800d28e:	d10c      	bne.n	800d2aa <_printf_float+0x412>
 800d290:	e65d      	b.n	800cf4e <_printf_float+0xb6>
 800d292:	2301      	movs	r3, #1
 800d294:	465a      	mov	r2, fp
 800d296:	4631      	mov	r1, r6
 800d298:	4628      	mov	r0, r5
 800d29a:	47b8      	blx	r7
 800d29c:	3001      	adds	r0, #1
 800d29e:	f43f ae56 	beq.w	800cf4e <_printf_float+0xb6>
 800d2a2:	f108 0801 	add.w	r8, r8, #1
 800d2a6:	45d0      	cmp	r8, sl
 800d2a8:	dbf3      	blt.n	800d292 <_printf_float+0x3fa>
 800d2aa:	464b      	mov	r3, r9
 800d2ac:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800d2b0:	e6df      	b.n	800d072 <_printf_float+0x1da>
 800d2b2:	f04f 0800 	mov.w	r8, #0
 800d2b6:	f104 0b1a 	add.w	fp, r4, #26
 800d2ba:	e7f4      	b.n	800d2a6 <_printf_float+0x40e>
 800d2bc:	2301      	movs	r3, #1
 800d2be:	4642      	mov	r2, r8
 800d2c0:	e7e1      	b.n	800d286 <_printf_float+0x3ee>
 800d2c2:	2301      	movs	r3, #1
 800d2c4:	464a      	mov	r2, r9
 800d2c6:	4631      	mov	r1, r6
 800d2c8:	4628      	mov	r0, r5
 800d2ca:	47b8      	blx	r7
 800d2cc:	3001      	adds	r0, #1
 800d2ce:	f43f ae3e 	beq.w	800cf4e <_printf_float+0xb6>
 800d2d2:	f108 0801 	add.w	r8, r8, #1
 800d2d6:	68e3      	ldr	r3, [r4, #12]
 800d2d8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800d2da:	1a5b      	subs	r3, r3, r1
 800d2dc:	4543      	cmp	r3, r8
 800d2de:	dcf0      	bgt.n	800d2c2 <_printf_float+0x42a>
 800d2e0:	e6fc      	b.n	800d0dc <_printf_float+0x244>
 800d2e2:	f04f 0800 	mov.w	r8, #0
 800d2e6:	f104 0919 	add.w	r9, r4, #25
 800d2ea:	e7f4      	b.n	800d2d6 <_printf_float+0x43e>

0800d2ec <_printf_common>:
 800d2ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d2f0:	4616      	mov	r6, r2
 800d2f2:	4698      	mov	r8, r3
 800d2f4:	688a      	ldr	r2, [r1, #8]
 800d2f6:	690b      	ldr	r3, [r1, #16]
 800d2f8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800d2fc:	4293      	cmp	r3, r2
 800d2fe:	bfb8      	it	lt
 800d300:	4613      	movlt	r3, r2
 800d302:	6033      	str	r3, [r6, #0]
 800d304:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800d308:	4607      	mov	r7, r0
 800d30a:	460c      	mov	r4, r1
 800d30c:	b10a      	cbz	r2, 800d312 <_printf_common+0x26>
 800d30e:	3301      	adds	r3, #1
 800d310:	6033      	str	r3, [r6, #0]
 800d312:	6823      	ldr	r3, [r4, #0]
 800d314:	0699      	lsls	r1, r3, #26
 800d316:	bf42      	ittt	mi
 800d318:	6833      	ldrmi	r3, [r6, #0]
 800d31a:	3302      	addmi	r3, #2
 800d31c:	6033      	strmi	r3, [r6, #0]
 800d31e:	6825      	ldr	r5, [r4, #0]
 800d320:	f015 0506 	ands.w	r5, r5, #6
 800d324:	d106      	bne.n	800d334 <_printf_common+0x48>
 800d326:	f104 0a19 	add.w	sl, r4, #25
 800d32a:	68e3      	ldr	r3, [r4, #12]
 800d32c:	6832      	ldr	r2, [r6, #0]
 800d32e:	1a9b      	subs	r3, r3, r2
 800d330:	42ab      	cmp	r3, r5
 800d332:	dc26      	bgt.n	800d382 <_printf_common+0x96>
 800d334:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800d338:	6822      	ldr	r2, [r4, #0]
 800d33a:	3b00      	subs	r3, #0
 800d33c:	bf18      	it	ne
 800d33e:	2301      	movne	r3, #1
 800d340:	0692      	lsls	r2, r2, #26
 800d342:	d42b      	bmi.n	800d39c <_printf_common+0xb0>
 800d344:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800d348:	4641      	mov	r1, r8
 800d34a:	4638      	mov	r0, r7
 800d34c:	47c8      	blx	r9
 800d34e:	3001      	adds	r0, #1
 800d350:	d01e      	beq.n	800d390 <_printf_common+0xa4>
 800d352:	6823      	ldr	r3, [r4, #0]
 800d354:	6922      	ldr	r2, [r4, #16]
 800d356:	f003 0306 	and.w	r3, r3, #6
 800d35a:	2b04      	cmp	r3, #4
 800d35c:	bf02      	ittt	eq
 800d35e:	68e5      	ldreq	r5, [r4, #12]
 800d360:	6833      	ldreq	r3, [r6, #0]
 800d362:	1aed      	subeq	r5, r5, r3
 800d364:	68a3      	ldr	r3, [r4, #8]
 800d366:	bf0c      	ite	eq
 800d368:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800d36c:	2500      	movne	r5, #0
 800d36e:	4293      	cmp	r3, r2
 800d370:	bfc4      	itt	gt
 800d372:	1a9b      	subgt	r3, r3, r2
 800d374:	18ed      	addgt	r5, r5, r3
 800d376:	2600      	movs	r6, #0
 800d378:	341a      	adds	r4, #26
 800d37a:	42b5      	cmp	r5, r6
 800d37c:	d11a      	bne.n	800d3b4 <_printf_common+0xc8>
 800d37e:	2000      	movs	r0, #0
 800d380:	e008      	b.n	800d394 <_printf_common+0xa8>
 800d382:	2301      	movs	r3, #1
 800d384:	4652      	mov	r2, sl
 800d386:	4641      	mov	r1, r8
 800d388:	4638      	mov	r0, r7
 800d38a:	47c8      	blx	r9
 800d38c:	3001      	adds	r0, #1
 800d38e:	d103      	bne.n	800d398 <_printf_common+0xac>
 800d390:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d394:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d398:	3501      	adds	r5, #1
 800d39a:	e7c6      	b.n	800d32a <_printf_common+0x3e>
 800d39c:	18e1      	adds	r1, r4, r3
 800d39e:	1c5a      	adds	r2, r3, #1
 800d3a0:	2030      	movs	r0, #48	@ 0x30
 800d3a2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800d3a6:	4422      	add	r2, r4
 800d3a8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800d3ac:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800d3b0:	3302      	adds	r3, #2
 800d3b2:	e7c7      	b.n	800d344 <_printf_common+0x58>
 800d3b4:	2301      	movs	r3, #1
 800d3b6:	4622      	mov	r2, r4
 800d3b8:	4641      	mov	r1, r8
 800d3ba:	4638      	mov	r0, r7
 800d3bc:	47c8      	blx	r9
 800d3be:	3001      	adds	r0, #1
 800d3c0:	d0e6      	beq.n	800d390 <_printf_common+0xa4>
 800d3c2:	3601      	adds	r6, #1
 800d3c4:	e7d9      	b.n	800d37a <_printf_common+0x8e>
	...

0800d3c8 <_printf_i>:
 800d3c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800d3cc:	7e0f      	ldrb	r7, [r1, #24]
 800d3ce:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800d3d0:	2f78      	cmp	r7, #120	@ 0x78
 800d3d2:	4691      	mov	r9, r2
 800d3d4:	4680      	mov	r8, r0
 800d3d6:	460c      	mov	r4, r1
 800d3d8:	469a      	mov	sl, r3
 800d3da:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800d3de:	d807      	bhi.n	800d3f0 <_printf_i+0x28>
 800d3e0:	2f62      	cmp	r7, #98	@ 0x62
 800d3e2:	d80a      	bhi.n	800d3fa <_printf_i+0x32>
 800d3e4:	2f00      	cmp	r7, #0
 800d3e6:	f000 80d2 	beq.w	800d58e <_printf_i+0x1c6>
 800d3ea:	2f58      	cmp	r7, #88	@ 0x58
 800d3ec:	f000 80b9 	beq.w	800d562 <_printf_i+0x19a>
 800d3f0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d3f4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800d3f8:	e03a      	b.n	800d470 <_printf_i+0xa8>
 800d3fa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800d3fe:	2b15      	cmp	r3, #21
 800d400:	d8f6      	bhi.n	800d3f0 <_printf_i+0x28>
 800d402:	a101      	add	r1, pc, #4	@ (adr r1, 800d408 <_printf_i+0x40>)
 800d404:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800d408:	0800d461 	.word	0x0800d461
 800d40c:	0800d475 	.word	0x0800d475
 800d410:	0800d3f1 	.word	0x0800d3f1
 800d414:	0800d3f1 	.word	0x0800d3f1
 800d418:	0800d3f1 	.word	0x0800d3f1
 800d41c:	0800d3f1 	.word	0x0800d3f1
 800d420:	0800d475 	.word	0x0800d475
 800d424:	0800d3f1 	.word	0x0800d3f1
 800d428:	0800d3f1 	.word	0x0800d3f1
 800d42c:	0800d3f1 	.word	0x0800d3f1
 800d430:	0800d3f1 	.word	0x0800d3f1
 800d434:	0800d575 	.word	0x0800d575
 800d438:	0800d49f 	.word	0x0800d49f
 800d43c:	0800d52f 	.word	0x0800d52f
 800d440:	0800d3f1 	.word	0x0800d3f1
 800d444:	0800d3f1 	.word	0x0800d3f1
 800d448:	0800d597 	.word	0x0800d597
 800d44c:	0800d3f1 	.word	0x0800d3f1
 800d450:	0800d49f 	.word	0x0800d49f
 800d454:	0800d3f1 	.word	0x0800d3f1
 800d458:	0800d3f1 	.word	0x0800d3f1
 800d45c:	0800d537 	.word	0x0800d537
 800d460:	6833      	ldr	r3, [r6, #0]
 800d462:	1d1a      	adds	r2, r3, #4
 800d464:	681b      	ldr	r3, [r3, #0]
 800d466:	6032      	str	r2, [r6, #0]
 800d468:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800d46c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800d470:	2301      	movs	r3, #1
 800d472:	e09d      	b.n	800d5b0 <_printf_i+0x1e8>
 800d474:	6833      	ldr	r3, [r6, #0]
 800d476:	6820      	ldr	r0, [r4, #0]
 800d478:	1d19      	adds	r1, r3, #4
 800d47a:	6031      	str	r1, [r6, #0]
 800d47c:	0606      	lsls	r6, r0, #24
 800d47e:	d501      	bpl.n	800d484 <_printf_i+0xbc>
 800d480:	681d      	ldr	r5, [r3, #0]
 800d482:	e003      	b.n	800d48c <_printf_i+0xc4>
 800d484:	0645      	lsls	r5, r0, #25
 800d486:	d5fb      	bpl.n	800d480 <_printf_i+0xb8>
 800d488:	f9b3 5000 	ldrsh.w	r5, [r3]
 800d48c:	2d00      	cmp	r5, #0
 800d48e:	da03      	bge.n	800d498 <_printf_i+0xd0>
 800d490:	232d      	movs	r3, #45	@ 0x2d
 800d492:	426d      	negs	r5, r5
 800d494:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d498:	4859      	ldr	r0, [pc, #356]	@ (800d600 <_printf_i+0x238>)
 800d49a:	230a      	movs	r3, #10
 800d49c:	e011      	b.n	800d4c2 <_printf_i+0xfa>
 800d49e:	6821      	ldr	r1, [r4, #0]
 800d4a0:	6833      	ldr	r3, [r6, #0]
 800d4a2:	0608      	lsls	r0, r1, #24
 800d4a4:	f853 5b04 	ldr.w	r5, [r3], #4
 800d4a8:	d402      	bmi.n	800d4b0 <_printf_i+0xe8>
 800d4aa:	0649      	lsls	r1, r1, #25
 800d4ac:	bf48      	it	mi
 800d4ae:	b2ad      	uxthmi	r5, r5
 800d4b0:	2f6f      	cmp	r7, #111	@ 0x6f
 800d4b2:	4853      	ldr	r0, [pc, #332]	@ (800d600 <_printf_i+0x238>)
 800d4b4:	6033      	str	r3, [r6, #0]
 800d4b6:	bf14      	ite	ne
 800d4b8:	230a      	movne	r3, #10
 800d4ba:	2308      	moveq	r3, #8
 800d4bc:	2100      	movs	r1, #0
 800d4be:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800d4c2:	6866      	ldr	r6, [r4, #4]
 800d4c4:	60a6      	str	r6, [r4, #8]
 800d4c6:	2e00      	cmp	r6, #0
 800d4c8:	bfa2      	ittt	ge
 800d4ca:	6821      	ldrge	r1, [r4, #0]
 800d4cc:	f021 0104 	bicge.w	r1, r1, #4
 800d4d0:	6021      	strge	r1, [r4, #0]
 800d4d2:	b90d      	cbnz	r5, 800d4d8 <_printf_i+0x110>
 800d4d4:	2e00      	cmp	r6, #0
 800d4d6:	d04b      	beq.n	800d570 <_printf_i+0x1a8>
 800d4d8:	4616      	mov	r6, r2
 800d4da:	fbb5 f1f3 	udiv	r1, r5, r3
 800d4de:	fb03 5711 	mls	r7, r3, r1, r5
 800d4e2:	5dc7      	ldrb	r7, [r0, r7]
 800d4e4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800d4e8:	462f      	mov	r7, r5
 800d4ea:	42bb      	cmp	r3, r7
 800d4ec:	460d      	mov	r5, r1
 800d4ee:	d9f4      	bls.n	800d4da <_printf_i+0x112>
 800d4f0:	2b08      	cmp	r3, #8
 800d4f2:	d10b      	bne.n	800d50c <_printf_i+0x144>
 800d4f4:	6823      	ldr	r3, [r4, #0]
 800d4f6:	07df      	lsls	r7, r3, #31
 800d4f8:	d508      	bpl.n	800d50c <_printf_i+0x144>
 800d4fa:	6923      	ldr	r3, [r4, #16]
 800d4fc:	6861      	ldr	r1, [r4, #4]
 800d4fe:	4299      	cmp	r1, r3
 800d500:	bfde      	ittt	le
 800d502:	2330      	movle	r3, #48	@ 0x30
 800d504:	f806 3c01 	strble.w	r3, [r6, #-1]
 800d508:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800d50c:	1b92      	subs	r2, r2, r6
 800d50e:	6122      	str	r2, [r4, #16]
 800d510:	f8cd a000 	str.w	sl, [sp]
 800d514:	464b      	mov	r3, r9
 800d516:	aa03      	add	r2, sp, #12
 800d518:	4621      	mov	r1, r4
 800d51a:	4640      	mov	r0, r8
 800d51c:	f7ff fee6 	bl	800d2ec <_printf_common>
 800d520:	3001      	adds	r0, #1
 800d522:	d14a      	bne.n	800d5ba <_printf_i+0x1f2>
 800d524:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d528:	b004      	add	sp, #16
 800d52a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d52e:	6823      	ldr	r3, [r4, #0]
 800d530:	f043 0320 	orr.w	r3, r3, #32
 800d534:	6023      	str	r3, [r4, #0]
 800d536:	4833      	ldr	r0, [pc, #204]	@ (800d604 <_printf_i+0x23c>)
 800d538:	2778      	movs	r7, #120	@ 0x78
 800d53a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800d53e:	6823      	ldr	r3, [r4, #0]
 800d540:	6831      	ldr	r1, [r6, #0]
 800d542:	061f      	lsls	r7, r3, #24
 800d544:	f851 5b04 	ldr.w	r5, [r1], #4
 800d548:	d402      	bmi.n	800d550 <_printf_i+0x188>
 800d54a:	065f      	lsls	r7, r3, #25
 800d54c:	bf48      	it	mi
 800d54e:	b2ad      	uxthmi	r5, r5
 800d550:	6031      	str	r1, [r6, #0]
 800d552:	07d9      	lsls	r1, r3, #31
 800d554:	bf44      	itt	mi
 800d556:	f043 0320 	orrmi.w	r3, r3, #32
 800d55a:	6023      	strmi	r3, [r4, #0]
 800d55c:	b11d      	cbz	r5, 800d566 <_printf_i+0x19e>
 800d55e:	2310      	movs	r3, #16
 800d560:	e7ac      	b.n	800d4bc <_printf_i+0xf4>
 800d562:	4827      	ldr	r0, [pc, #156]	@ (800d600 <_printf_i+0x238>)
 800d564:	e7e9      	b.n	800d53a <_printf_i+0x172>
 800d566:	6823      	ldr	r3, [r4, #0]
 800d568:	f023 0320 	bic.w	r3, r3, #32
 800d56c:	6023      	str	r3, [r4, #0]
 800d56e:	e7f6      	b.n	800d55e <_printf_i+0x196>
 800d570:	4616      	mov	r6, r2
 800d572:	e7bd      	b.n	800d4f0 <_printf_i+0x128>
 800d574:	6833      	ldr	r3, [r6, #0]
 800d576:	6825      	ldr	r5, [r4, #0]
 800d578:	6961      	ldr	r1, [r4, #20]
 800d57a:	1d18      	adds	r0, r3, #4
 800d57c:	6030      	str	r0, [r6, #0]
 800d57e:	062e      	lsls	r6, r5, #24
 800d580:	681b      	ldr	r3, [r3, #0]
 800d582:	d501      	bpl.n	800d588 <_printf_i+0x1c0>
 800d584:	6019      	str	r1, [r3, #0]
 800d586:	e002      	b.n	800d58e <_printf_i+0x1c6>
 800d588:	0668      	lsls	r0, r5, #25
 800d58a:	d5fb      	bpl.n	800d584 <_printf_i+0x1bc>
 800d58c:	8019      	strh	r1, [r3, #0]
 800d58e:	2300      	movs	r3, #0
 800d590:	6123      	str	r3, [r4, #16]
 800d592:	4616      	mov	r6, r2
 800d594:	e7bc      	b.n	800d510 <_printf_i+0x148>
 800d596:	6833      	ldr	r3, [r6, #0]
 800d598:	1d1a      	adds	r2, r3, #4
 800d59a:	6032      	str	r2, [r6, #0]
 800d59c:	681e      	ldr	r6, [r3, #0]
 800d59e:	6862      	ldr	r2, [r4, #4]
 800d5a0:	2100      	movs	r1, #0
 800d5a2:	4630      	mov	r0, r6
 800d5a4:	f7f2 fe14 	bl	80001d0 <memchr>
 800d5a8:	b108      	cbz	r0, 800d5ae <_printf_i+0x1e6>
 800d5aa:	1b80      	subs	r0, r0, r6
 800d5ac:	6060      	str	r0, [r4, #4]
 800d5ae:	6863      	ldr	r3, [r4, #4]
 800d5b0:	6123      	str	r3, [r4, #16]
 800d5b2:	2300      	movs	r3, #0
 800d5b4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800d5b8:	e7aa      	b.n	800d510 <_printf_i+0x148>
 800d5ba:	6923      	ldr	r3, [r4, #16]
 800d5bc:	4632      	mov	r2, r6
 800d5be:	4649      	mov	r1, r9
 800d5c0:	4640      	mov	r0, r8
 800d5c2:	47d0      	blx	sl
 800d5c4:	3001      	adds	r0, #1
 800d5c6:	d0ad      	beq.n	800d524 <_printf_i+0x15c>
 800d5c8:	6823      	ldr	r3, [r4, #0]
 800d5ca:	079b      	lsls	r3, r3, #30
 800d5cc:	d413      	bmi.n	800d5f6 <_printf_i+0x22e>
 800d5ce:	68e0      	ldr	r0, [r4, #12]
 800d5d0:	9b03      	ldr	r3, [sp, #12]
 800d5d2:	4298      	cmp	r0, r3
 800d5d4:	bfb8      	it	lt
 800d5d6:	4618      	movlt	r0, r3
 800d5d8:	e7a6      	b.n	800d528 <_printf_i+0x160>
 800d5da:	2301      	movs	r3, #1
 800d5dc:	4632      	mov	r2, r6
 800d5de:	4649      	mov	r1, r9
 800d5e0:	4640      	mov	r0, r8
 800d5e2:	47d0      	blx	sl
 800d5e4:	3001      	adds	r0, #1
 800d5e6:	d09d      	beq.n	800d524 <_printf_i+0x15c>
 800d5e8:	3501      	adds	r5, #1
 800d5ea:	68e3      	ldr	r3, [r4, #12]
 800d5ec:	9903      	ldr	r1, [sp, #12]
 800d5ee:	1a5b      	subs	r3, r3, r1
 800d5f0:	42ab      	cmp	r3, r5
 800d5f2:	dcf2      	bgt.n	800d5da <_printf_i+0x212>
 800d5f4:	e7eb      	b.n	800d5ce <_printf_i+0x206>
 800d5f6:	2500      	movs	r5, #0
 800d5f8:	f104 0619 	add.w	r6, r4, #25
 800d5fc:	e7f5      	b.n	800d5ea <_printf_i+0x222>
 800d5fe:	bf00      	nop
 800d600:	08010dde 	.word	0x08010dde
 800d604:	08010def 	.word	0x08010def

0800d608 <std>:
 800d608:	2300      	movs	r3, #0
 800d60a:	b510      	push	{r4, lr}
 800d60c:	4604      	mov	r4, r0
 800d60e:	e9c0 3300 	strd	r3, r3, [r0]
 800d612:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d616:	6083      	str	r3, [r0, #8]
 800d618:	8181      	strh	r1, [r0, #12]
 800d61a:	6643      	str	r3, [r0, #100]	@ 0x64
 800d61c:	81c2      	strh	r2, [r0, #14]
 800d61e:	6183      	str	r3, [r0, #24]
 800d620:	4619      	mov	r1, r3
 800d622:	2208      	movs	r2, #8
 800d624:	305c      	adds	r0, #92	@ 0x5c
 800d626:	f000 fa2d 	bl	800da84 <memset>
 800d62a:	4b0d      	ldr	r3, [pc, #52]	@ (800d660 <std+0x58>)
 800d62c:	6263      	str	r3, [r4, #36]	@ 0x24
 800d62e:	4b0d      	ldr	r3, [pc, #52]	@ (800d664 <std+0x5c>)
 800d630:	62a3      	str	r3, [r4, #40]	@ 0x28
 800d632:	4b0d      	ldr	r3, [pc, #52]	@ (800d668 <std+0x60>)
 800d634:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800d636:	4b0d      	ldr	r3, [pc, #52]	@ (800d66c <std+0x64>)
 800d638:	6323      	str	r3, [r4, #48]	@ 0x30
 800d63a:	4b0d      	ldr	r3, [pc, #52]	@ (800d670 <std+0x68>)
 800d63c:	6224      	str	r4, [r4, #32]
 800d63e:	429c      	cmp	r4, r3
 800d640:	d006      	beq.n	800d650 <std+0x48>
 800d642:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800d646:	4294      	cmp	r4, r2
 800d648:	d002      	beq.n	800d650 <std+0x48>
 800d64a:	33d0      	adds	r3, #208	@ 0xd0
 800d64c:	429c      	cmp	r4, r3
 800d64e:	d105      	bne.n	800d65c <std+0x54>
 800d650:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800d654:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d658:	f000 bae6 	b.w	800dc28 <__retarget_lock_init_recursive>
 800d65c:	bd10      	pop	{r4, pc}
 800d65e:	bf00      	nop
 800d660:	0800d8d5 	.word	0x0800d8d5
 800d664:	0800d8f7 	.word	0x0800d8f7
 800d668:	0800d92f 	.word	0x0800d92f
 800d66c:	0800d953 	.word	0x0800d953
 800d670:	20005080 	.word	0x20005080

0800d674 <stdio_exit_handler>:
 800d674:	4a02      	ldr	r2, [pc, #8]	@ (800d680 <stdio_exit_handler+0xc>)
 800d676:	4903      	ldr	r1, [pc, #12]	@ (800d684 <stdio_exit_handler+0x10>)
 800d678:	4803      	ldr	r0, [pc, #12]	@ (800d688 <stdio_exit_handler+0x14>)
 800d67a:	f000 b869 	b.w	800d750 <_fwalk_sglue>
 800d67e:	bf00      	nop
 800d680:	2000001c 	.word	0x2000001c
 800d684:	0800f829 	.word	0x0800f829
 800d688:	2000002c 	.word	0x2000002c

0800d68c <cleanup_stdio>:
 800d68c:	6841      	ldr	r1, [r0, #4]
 800d68e:	4b0c      	ldr	r3, [pc, #48]	@ (800d6c0 <cleanup_stdio+0x34>)
 800d690:	4299      	cmp	r1, r3
 800d692:	b510      	push	{r4, lr}
 800d694:	4604      	mov	r4, r0
 800d696:	d001      	beq.n	800d69c <cleanup_stdio+0x10>
 800d698:	f002 f8c6 	bl	800f828 <_fflush_r>
 800d69c:	68a1      	ldr	r1, [r4, #8]
 800d69e:	4b09      	ldr	r3, [pc, #36]	@ (800d6c4 <cleanup_stdio+0x38>)
 800d6a0:	4299      	cmp	r1, r3
 800d6a2:	d002      	beq.n	800d6aa <cleanup_stdio+0x1e>
 800d6a4:	4620      	mov	r0, r4
 800d6a6:	f002 f8bf 	bl	800f828 <_fflush_r>
 800d6aa:	68e1      	ldr	r1, [r4, #12]
 800d6ac:	4b06      	ldr	r3, [pc, #24]	@ (800d6c8 <cleanup_stdio+0x3c>)
 800d6ae:	4299      	cmp	r1, r3
 800d6b0:	d004      	beq.n	800d6bc <cleanup_stdio+0x30>
 800d6b2:	4620      	mov	r0, r4
 800d6b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d6b8:	f002 b8b6 	b.w	800f828 <_fflush_r>
 800d6bc:	bd10      	pop	{r4, pc}
 800d6be:	bf00      	nop
 800d6c0:	20005080 	.word	0x20005080
 800d6c4:	200050e8 	.word	0x200050e8
 800d6c8:	20005150 	.word	0x20005150

0800d6cc <global_stdio_init.part.0>:
 800d6cc:	b510      	push	{r4, lr}
 800d6ce:	4b0b      	ldr	r3, [pc, #44]	@ (800d6fc <global_stdio_init.part.0+0x30>)
 800d6d0:	4c0b      	ldr	r4, [pc, #44]	@ (800d700 <global_stdio_init.part.0+0x34>)
 800d6d2:	4a0c      	ldr	r2, [pc, #48]	@ (800d704 <global_stdio_init.part.0+0x38>)
 800d6d4:	601a      	str	r2, [r3, #0]
 800d6d6:	4620      	mov	r0, r4
 800d6d8:	2200      	movs	r2, #0
 800d6da:	2104      	movs	r1, #4
 800d6dc:	f7ff ff94 	bl	800d608 <std>
 800d6e0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800d6e4:	2201      	movs	r2, #1
 800d6e6:	2109      	movs	r1, #9
 800d6e8:	f7ff ff8e 	bl	800d608 <std>
 800d6ec:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800d6f0:	2202      	movs	r2, #2
 800d6f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d6f6:	2112      	movs	r1, #18
 800d6f8:	f7ff bf86 	b.w	800d608 <std>
 800d6fc:	200051b8 	.word	0x200051b8
 800d700:	20005080 	.word	0x20005080
 800d704:	0800d675 	.word	0x0800d675

0800d708 <__sfp_lock_acquire>:
 800d708:	4801      	ldr	r0, [pc, #4]	@ (800d710 <__sfp_lock_acquire+0x8>)
 800d70a:	f000 ba8e 	b.w	800dc2a <__retarget_lock_acquire_recursive>
 800d70e:	bf00      	nop
 800d710:	200051c1 	.word	0x200051c1

0800d714 <__sfp_lock_release>:
 800d714:	4801      	ldr	r0, [pc, #4]	@ (800d71c <__sfp_lock_release+0x8>)
 800d716:	f000 ba89 	b.w	800dc2c <__retarget_lock_release_recursive>
 800d71a:	bf00      	nop
 800d71c:	200051c1 	.word	0x200051c1

0800d720 <__sinit>:
 800d720:	b510      	push	{r4, lr}
 800d722:	4604      	mov	r4, r0
 800d724:	f7ff fff0 	bl	800d708 <__sfp_lock_acquire>
 800d728:	6a23      	ldr	r3, [r4, #32]
 800d72a:	b11b      	cbz	r3, 800d734 <__sinit+0x14>
 800d72c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d730:	f7ff bff0 	b.w	800d714 <__sfp_lock_release>
 800d734:	4b04      	ldr	r3, [pc, #16]	@ (800d748 <__sinit+0x28>)
 800d736:	6223      	str	r3, [r4, #32]
 800d738:	4b04      	ldr	r3, [pc, #16]	@ (800d74c <__sinit+0x2c>)
 800d73a:	681b      	ldr	r3, [r3, #0]
 800d73c:	2b00      	cmp	r3, #0
 800d73e:	d1f5      	bne.n	800d72c <__sinit+0xc>
 800d740:	f7ff ffc4 	bl	800d6cc <global_stdio_init.part.0>
 800d744:	e7f2      	b.n	800d72c <__sinit+0xc>
 800d746:	bf00      	nop
 800d748:	0800d68d 	.word	0x0800d68d
 800d74c:	200051b8 	.word	0x200051b8

0800d750 <_fwalk_sglue>:
 800d750:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d754:	4607      	mov	r7, r0
 800d756:	4688      	mov	r8, r1
 800d758:	4614      	mov	r4, r2
 800d75a:	2600      	movs	r6, #0
 800d75c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d760:	f1b9 0901 	subs.w	r9, r9, #1
 800d764:	d505      	bpl.n	800d772 <_fwalk_sglue+0x22>
 800d766:	6824      	ldr	r4, [r4, #0]
 800d768:	2c00      	cmp	r4, #0
 800d76a:	d1f7      	bne.n	800d75c <_fwalk_sglue+0xc>
 800d76c:	4630      	mov	r0, r6
 800d76e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d772:	89ab      	ldrh	r3, [r5, #12]
 800d774:	2b01      	cmp	r3, #1
 800d776:	d907      	bls.n	800d788 <_fwalk_sglue+0x38>
 800d778:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d77c:	3301      	adds	r3, #1
 800d77e:	d003      	beq.n	800d788 <_fwalk_sglue+0x38>
 800d780:	4629      	mov	r1, r5
 800d782:	4638      	mov	r0, r7
 800d784:	47c0      	blx	r8
 800d786:	4306      	orrs	r6, r0
 800d788:	3568      	adds	r5, #104	@ 0x68
 800d78a:	e7e9      	b.n	800d760 <_fwalk_sglue+0x10>

0800d78c <iprintf>:
 800d78c:	b40f      	push	{r0, r1, r2, r3}
 800d78e:	b507      	push	{r0, r1, r2, lr}
 800d790:	4906      	ldr	r1, [pc, #24]	@ (800d7ac <iprintf+0x20>)
 800d792:	ab04      	add	r3, sp, #16
 800d794:	6808      	ldr	r0, [r1, #0]
 800d796:	f853 2b04 	ldr.w	r2, [r3], #4
 800d79a:	6881      	ldr	r1, [r0, #8]
 800d79c:	9301      	str	r3, [sp, #4]
 800d79e:	f001 fea7 	bl	800f4f0 <_vfiprintf_r>
 800d7a2:	b003      	add	sp, #12
 800d7a4:	f85d eb04 	ldr.w	lr, [sp], #4
 800d7a8:	b004      	add	sp, #16
 800d7aa:	4770      	bx	lr
 800d7ac:	20000028 	.word	0x20000028

0800d7b0 <_puts_r>:
 800d7b0:	6a03      	ldr	r3, [r0, #32]
 800d7b2:	b570      	push	{r4, r5, r6, lr}
 800d7b4:	6884      	ldr	r4, [r0, #8]
 800d7b6:	4605      	mov	r5, r0
 800d7b8:	460e      	mov	r6, r1
 800d7ba:	b90b      	cbnz	r3, 800d7c0 <_puts_r+0x10>
 800d7bc:	f7ff ffb0 	bl	800d720 <__sinit>
 800d7c0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d7c2:	07db      	lsls	r3, r3, #31
 800d7c4:	d405      	bmi.n	800d7d2 <_puts_r+0x22>
 800d7c6:	89a3      	ldrh	r3, [r4, #12]
 800d7c8:	0598      	lsls	r0, r3, #22
 800d7ca:	d402      	bmi.n	800d7d2 <_puts_r+0x22>
 800d7cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d7ce:	f000 fa2c 	bl	800dc2a <__retarget_lock_acquire_recursive>
 800d7d2:	89a3      	ldrh	r3, [r4, #12]
 800d7d4:	0719      	lsls	r1, r3, #28
 800d7d6:	d502      	bpl.n	800d7de <_puts_r+0x2e>
 800d7d8:	6923      	ldr	r3, [r4, #16]
 800d7da:	2b00      	cmp	r3, #0
 800d7dc:	d135      	bne.n	800d84a <_puts_r+0x9a>
 800d7de:	4621      	mov	r1, r4
 800d7e0:	4628      	mov	r0, r5
 800d7e2:	f000 f8f9 	bl	800d9d8 <__swsetup_r>
 800d7e6:	b380      	cbz	r0, 800d84a <_puts_r+0x9a>
 800d7e8:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800d7ec:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d7ee:	07da      	lsls	r2, r3, #31
 800d7f0:	d405      	bmi.n	800d7fe <_puts_r+0x4e>
 800d7f2:	89a3      	ldrh	r3, [r4, #12]
 800d7f4:	059b      	lsls	r3, r3, #22
 800d7f6:	d402      	bmi.n	800d7fe <_puts_r+0x4e>
 800d7f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d7fa:	f000 fa17 	bl	800dc2c <__retarget_lock_release_recursive>
 800d7fe:	4628      	mov	r0, r5
 800d800:	bd70      	pop	{r4, r5, r6, pc}
 800d802:	2b00      	cmp	r3, #0
 800d804:	da04      	bge.n	800d810 <_puts_r+0x60>
 800d806:	69a2      	ldr	r2, [r4, #24]
 800d808:	429a      	cmp	r2, r3
 800d80a:	dc17      	bgt.n	800d83c <_puts_r+0x8c>
 800d80c:	290a      	cmp	r1, #10
 800d80e:	d015      	beq.n	800d83c <_puts_r+0x8c>
 800d810:	6823      	ldr	r3, [r4, #0]
 800d812:	1c5a      	adds	r2, r3, #1
 800d814:	6022      	str	r2, [r4, #0]
 800d816:	7019      	strb	r1, [r3, #0]
 800d818:	68a3      	ldr	r3, [r4, #8]
 800d81a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800d81e:	3b01      	subs	r3, #1
 800d820:	60a3      	str	r3, [r4, #8]
 800d822:	2900      	cmp	r1, #0
 800d824:	d1ed      	bne.n	800d802 <_puts_r+0x52>
 800d826:	2b00      	cmp	r3, #0
 800d828:	da11      	bge.n	800d84e <_puts_r+0x9e>
 800d82a:	4622      	mov	r2, r4
 800d82c:	210a      	movs	r1, #10
 800d82e:	4628      	mov	r0, r5
 800d830:	f000 f893 	bl	800d95a <__swbuf_r>
 800d834:	3001      	adds	r0, #1
 800d836:	d0d7      	beq.n	800d7e8 <_puts_r+0x38>
 800d838:	250a      	movs	r5, #10
 800d83a:	e7d7      	b.n	800d7ec <_puts_r+0x3c>
 800d83c:	4622      	mov	r2, r4
 800d83e:	4628      	mov	r0, r5
 800d840:	f000 f88b 	bl	800d95a <__swbuf_r>
 800d844:	3001      	adds	r0, #1
 800d846:	d1e7      	bne.n	800d818 <_puts_r+0x68>
 800d848:	e7ce      	b.n	800d7e8 <_puts_r+0x38>
 800d84a:	3e01      	subs	r6, #1
 800d84c:	e7e4      	b.n	800d818 <_puts_r+0x68>
 800d84e:	6823      	ldr	r3, [r4, #0]
 800d850:	1c5a      	adds	r2, r3, #1
 800d852:	6022      	str	r2, [r4, #0]
 800d854:	220a      	movs	r2, #10
 800d856:	701a      	strb	r2, [r3, #0]
 800d858:	e7ee      	b.n	800d838 <_puts_r+0x88>
	...

0800d85c <puts>:
 800d85c:	4b02      	ldr	r3, [pc, #8]	@ (800d868 <puts+0xc>)
 800d85e:	4601      	mov	r1, r0
 800d860:	6818      	ldr	r0, [r3, #0]
 800d862:	f7ff bfa5 	b.w	800d7b0 <_puts_r>
 800d866:	bf00      	nop
 800d868:	20000028 	.word	0x20000028

0800d86c <sniprintf>:
 800d86c:	b40c      	push	{r2, r3}
 800d86e:	b530      	push	{r4, r5, lr}
 800d870:	4b17      	ldr	r3, [pc, #92]	@ (800d8d0 <sniprintf+0x64>)
 800d872:	1e0c      	subs	r4, r1, #0
 800d874:	681d      	ldr	r5, [r3, #0]
 800d876:	b09d      	sub	sp, #116	@ 0x74
 800d878:	da08      	bge.n	800d88c <sniprintf+0x20>
 800d87a:	238b      	movs	r3, #139	@ 0x8b
 800d87c:	602b      	str	r3, [r5, #0]
 800d87e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d882:	b01d      	add	sp, #116	@ 0x74
 800d884:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d888:	b002      	add	sp, #8
 800d88a:	4770      	bx	lr
 800d88c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800d890:	f8ad 3014 	strh.w	r3, [sp, #20]
 800d894:	bf14      	ite	ne
 800d896:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 800d89a:	4623      	moveq	r3, r4
 800d89c:	9304      	str	r3, [sp, #16]
 800d89e:	9307      	str	r3, [sp, #28]
 800d8a0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800d8a4:	9002      	str	r0, [sp, #8]
 800d8a6:	9006      	str	r0, [sp, #24]
 800d8a8:	f8ad 3016 	strh.w	r3, [sp, #22]
 800d8ac:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800d8ae:	ab21      	add	r3, sp, #132	@ 0x84
 800d8b0:	a902      	add	r1, sp, #8
 800d8b2:	4628      	mov	r0, r5
 800d8b4:	9301      	str	r3, [sp, #4]
 800d8b6:	f001 fcf5 	bl	800f2a4 <_svfiprintf_r>
 800d8ba:	1c43      	adds	r3, r0, #1
 800d8bc:	bfbc      	itt	lt
 800d8be:	238b      	movlt	r3, #139	@ 0x8b
 800d8c0:	602b      	strlt	r3, [r5, #0]
 800d8c2:	2c00      	cmp	r4, #0
 800d8c4:	d0dd      	beq.n	800d882 <sniprintf+0x16>
 800d8c6:	9b02      	ldr	r3, [sp, #8]
 800d8c8:	2200      	movs	r2, #0
 800d8ca:	701a      	strb	r2, [r3, #0]
 800d8cc:	e7d9      	b.n	800d882 <sniprintf+0x16>
 800d8ce:	bf00      	nop
 800d8d0:	20000028 	.word	0x20000028

0800d8d4 <__sread>:
 800d8d4:	b510      	push	{r4, lr}
 800d8d6:	460c      	mov	r4, r1
 800d8d8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d8dc:	f000 f956 	bl	800db8c <_read_r>
 800d8e0:	2800      	cmp	r0, #0
 800d8e2:	bfab      	itete	ge
 800d8e4:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800d8e6:	89a3      	ldrhlt	r3, [r4, #12]
 800d8e8:	181b      	addge	r3, r3, r0
 800d8ea:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800d8ee:	bfac      	ite	ge
 800d8f0:	6563      	strge	r3, [r4, #84]	@ 0x54
 800d8f2:	81a3      	strhlt	r3, [r4, #12]
 800d8f4:	bd10      	pop	{r4, pc}

0800d8f6 <__swrite>:
 800d8f6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d8fa:	461f      	mov	r7, r3
 800d8fc:	898b      	ldrh	r3, [r1, #12]
 800d8fe:	05db      	lsls	r3, r3, #23
 800d900:	4605      	mov	r5, r0
 800d902:	460c      	mov	r4, r1
 800d904:	4616      	mov	r6, r2
 800d906:	d505      	bpl.n	800d914 <__swrite+0x1e>
 800d908:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d90c:	2302      	movs	r3, #2
 800d90e:	2200      	movs	r2, #0
 800d910:	f000 f92a 	bl	800db68 <_lseek_r>
 800d914:	89a3      	ldrh	r3, [r4, #12]
 800d916:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d91a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800d91e:	81a3      	strh	r3, [r4, #12]
 800d920:	4632      	mov	r2, r6
 800d922:	463b      	mov	r3, r7
 800d924:	4628      	mov	r0, r5
 800d926:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d92a:	f000 b941 	b.w	800dbb0 <_write_r>

0800d92e <__sseek>:
 800d92e:	b510      	push	{r4, lr}
 800d930:	460c      	mov	r4, r1
 800d932:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d936:	f000 f917 	bl	800db68 <_lseek_r>
 800d93a:	1c43      	adds	r3, r0, #1
 800d93c:	89a3      	ldrh	r3, [r4, #12]
 800d93e:	bf15      	itete	ne
 800d940:	6560      	strne	r0, [r4, #84]	@ 0x54
 800d942:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800d946:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800d94a:	81a3      	strheq	r3, [r4, #12]
 800d94c:	bf18      	it	ne
 800d94e:	81a3      	strhne	r3, [r4, #12]
 800d950:	bd10      	pop	{r4, pc}

0800d952 <__sclose>:
 800d952:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d956:	f000 b8a1 	b.w	800da9c <_close_r>

0800d95a <__swbuf_r>:
 800d95a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d95c:	460e      	mov	r6, r1
 800d95e:	4614      	mov	r4, r2
 800d960:	4605      	mov	r5, r0
 800d962:	b118      	cbz	r0, 800d96c <__swbuf_r+0x12>
 800d964:	6a03      	ldr	r3, [r0, #32]
 800d966:	b90b      	cbnz	r3, 800d96c <__swbuf_r+0x12>
 800d968:	f7ff feda 	bl	800d720 <__sinit>
 800d96c:	69a3      	ldr	r3, [r4, #24]
 800d96e:	60a3      	str	r3, [r4, #8]
 800d970:	89a3      	ldrh	r3, [r4, #12]
 800d972:	071a      	lsls	r2, r3, #28
 800d974:	d501      	bpl.n	800d97a <__swbuf_r+0x20>
 800d976:	6923      	ldr	r3, [r4, #16]
 800d978:	b943      	cbnz	r3, 800d98c <__swbuf_r+0x32>
 800d97a:	4621      	mov	r1, r4
 800d97c:	4628      	mov	r0, r5
 800d97e:	f000 f82b 	bl	800d9d8 <__swsetup_r>
 800d982:	b118      	cbz	r0, 800d98c <__swbuf_r+0x32>
 800d984:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800d988:	4638      	mov	r0, r7
 800d98a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d98c:	6823      	ldr	r3, [r4, #0]
 800d98e:	6922      	ldr	r2, [r4, #16]
 800d990:	1a98      	subs	r0, r3, r2
 800d992:	6963      	ldr	r3, [r4, #20]
 800d994:	b2f6      	uxtb	r6, r6
 800d996:	4283      	cmp	r3, r0
 800d998:	4637      	mov	r7, r6
 800d99a:	dc05      	bgt.n	800d9a8 <__swbuf_r+0x4e>
 800d99c:	4621      	mov	r1, r4
 800d99e:	4628      	mov	r0, r5
 800d9a0:	f001 ff42 	bl	800f828 <_fflush_r>
 800d9a4:	2800      	cmp	r0, #0
 800d9a6:	d1ed      	bne.n	800d984 <__swbuf_r+0x2a>
 800d9a8:	68a3      	ldr	r3, [r4, #8]
 800d9aa:	3b01      	subs	r3, #1
 800d9ac:	60a3      	str	r3, [r4, #8]
 800d9ae:	6823      	ldr	r3, [r4, #0]
 800d9b0:	1c5a      	adds	r2, r3, #1
 800d9b2:	6022      	str	r2, [r4, #0]
 800d9b4:	701e      	strb	r6, [r3, #0]
 800d9b6:	6962      	ldr	r2, [r4, #20]
 800d9b8:	1c43      	adds	r3, r0, #1
 800d9ba:	429a      	cmp	r2, r3
 800d9bc:	d004      	beq.n	800d9c8 <__swbuf_r+0x6e>
 800d9be:	89a3      	ldrh	r3, [r4, #12]
 800d9c0:	07db      	lsls	r3, r3, #31
 800d9c2:	d5e1      	bpl.n	800d988 <__swbuf_r+0x2e>
 800d9c4:	2e0a      	cmp	r6, #10
 800d9c6:	d1df      	bne.n	800d988 <__swbuf_r+0x2e>
 800d9c8:	4621      	mov	r1, r4
 800d9ca:	4628      	mov	r0, r5
 800d9cc:	f001 ff2c 	bl	800f828 <_fflush_r>
 800d9d0:	2800      	cmp	r0, #0
 800d9d2:	d0d9      	beq.n	800d988 <__swbuf_r+0x2e>
 800d9d4:	e7d6      	b.n	800d984 <__swbuf_r+0x2a>
	...

0800d9d8 <__swsetup_r>:
 800d9d8:	b538      	push	{r3, r4, r5, lr}
 800d9da:	4b29      	ldr	r3, [pc, #164]	@ (800da80 <__swsetup_r+0xa8>)
 800d9dc:	4605      	mov	r5, r0
 800d9de:	6818      	ldr	r0, [r3, #0]
 800d9e0:	460c      	mov	r4, r1
 800d9e2:	b118      	cbz	r0, 800d9ec <__swsetup_r+0x14>
 800d9e4:	6a03      	ldr	r3, [r0, #32]
 800d9e6:	b90b      	cbnz	r3, 800d9ec <__swsetup_r+0x14>
 800d9e8:	f7ff fe9a 	bl	800d720 <__sinit>
 800d9ec:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d9f0:	0719      	lsls	r1, r3, #28
 800d9f2:	d422      	bmi.n	800da3a <__swsetup_r+0x62>
 800d9f4:	06da      	lsls	r2, r3, #27
 800d9f6:	d407      	bmi.n	800da08 <__swsetup_r+0x30>
 800d9f8:	2209      	movs	r2, #9
 800d9fa:	602a      	str	r2, [r5, #0]
 800d9fc:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800da00:	81a3      	strh	r3, [r4, #12]
 800da02:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800da06:	e033      	b.n	800da70 <__swsetup_r+0x98>
 800da08:	0758      	lsls	r0, r3, #29
 800da0a:	d512      	bpl.n	800da32 <__swsetup_r+0x5a>
 800da0c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800da0e:	b141      	cbz	r1, 800da22 <__swsetup_r+0x4a>
 800da10:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800da14:	4299      	cmp	r1, r3
 800da16:	d002      	beq.n	800da1e <__swsetup_r+0x46>
 800da18:	4628      	mov	r0, r5
 800da1a:	f000 ff65 	bl	800e8e8 <_free_r>
 800da1e:	2300      	movs	r3, #0
 800da20:	6363      	str	r3, [r4, #52]	@ 0x34
 800da22:	89a3      	ldrh	r3, [r4, #12]
 800da24:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800da28:	81a3      	strh	r3, [r4, #12]
 800da2a:	2300      	movs	r3, #0
 800da2c:	6063      	str	r3, [r4, #4]
 800da2e:	6923      	ldr	r3, [r4, #16]
 800da30:	6023      	str	r3, [r4, #0]
 800da32:	89a3      	ldrh	r3, [r4, #12]
 800da34:	f043 0308 	orr.w	r3, r3, #8
 800da38:	81a3      	strh	r3, [r4, #12]
 800da3a:	6923      	ldr	r3, [r4, #16]
 800da3c:	b94b      	cbnz	r3, 800da52 <__swsetup_r+0x7a>
 800da3e:	89a3      	ldrh	r3, [r4, #12]
 800da40:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800da44:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800da48:	d003      	beq.n	800da52 <__swsetup_r+0x7a>
 800da4a:	4621      	mov	r1, r4
 800da4c:	4628      	mov	r0, r5
 800da4e:	f001 ff39 	bl	800f8c4 <__smakebuf_r>
 800da52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800da56:	f013 0201 	ands.w	r2, r3, #1
 800da5a:	d00a      	beq.n	800da72 <__swsetup_r+0x9a>
 800da5c:	2200      	movs	r2, #0
 800da5e:	60a2      	str	r2, [r4, #8]
 800da60:	6962      	ldr	r2, [r4, #20]
 800da62:	4252      	negs	r2, r2
 800da64:	61a2      	str	r2, [r4, #24]
 800da66:	6922      	ldr	r2, [r4, #16]
 800da68:	b942      	cbnz	r2, 800da7c <__swsetup_r+0xa4>
 800da6a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800da6e:	d1c5      	bne.n	800d9fc <__swsetup_r+0x24>
 800da70:	bd38      	pop	{r3, r4, r5, pc}
 800da72:	0799      	lsls	r1, r3, #30
 800da74:	bf58      	it	pl
 800da76:	6962      	ldrpl	r2, [r4, #20]
 800da78:	60a2      	str	r2, [r4, #8]
 800da7a:	e7f4      	b.n	800da66 <__swsetup_r+0x8e>
 800da7c:	2000      	movs	r0, #0
 800da7e:	e7f7      	b.n	800da70 <__swsetup_r+0x98>
 800da80:	20000028 	.word	0x20000028

0800da84 <memset>:
 800da84:	4402      	add	r2, r0
 800da86:	4603      	mov	r3, r0
 800da88:	4293      	cmp	r3, r2
 800da8a:	d100      	bne.n	800da8e <memset+0xa>
 800da8c:	4770      	bx	lr
 800da8e:	f803 1b01 	strb.w	r1, [r3], #1
 800da92:	e7f9      	b.n	800da88 <memset+0x4>

0800da94 <_localeconv_r>:
 800da94:	4800      	ldr	r0, [pc, #0]	@ (800da98 <_localeconv_r+0x4>)
 800da96:	4770      	bx	lr
 800da98:	20000168 	.word	0x20000168

0800da9c <_close_r>:
 800da9c:	b538      	push	{r3, r4, r5, lr}
 800da9e:	4d06      	ldr	r5, [pc, #24]	@ (800dab8 <_close_r+0x1c>)
 800daa0:	2300      	movs	r3, #0
 800daa2:	4604      	mov	r4, r0
 800daa4:	4608      	mov	r0, r1
 800daa6:	602b      	str	r3, [r5, #0]
 800daa8:	f7f5 fe8a 	bl	80037c0 <_close>
 800daac:	1c43      	adds	r3, r0, #1
 800daae:	d102      	bne.n	800dab6 <_close_r+0x1a>
 800dab0:	682b      	ldr	r3, [r5, #0]
 800dab2:	b103      	cbz	r3, 800dab6 <_close_r+0x1a>
 800dab4:	6023      	str	r3, [r4, #0]
 800dab6:	bd38      	pop	{r3, r4, r5, pc}
 800dab8:	200051bc 	.word	0x200051bc

0800dabc <_reclaim_reent>:
 800dabc:	4b29      	ldr	r3, [pc, #164]	@ (800db64 <_reclaim_reent+0xa8>)
 800dabe:	681b      	ldr	r3, [r3, #0]
 800dac0:	4283      	cmp	r3, r0
 800dac2:	b570      	push	{r4, r5, r6, lr}
 800dac4:	4604      	mov	r4, r0
 800dac6:	d04b      	beq.n	800db60 <_reclaim_reent+0xa4>
 800dac8:	69c3      	ldr	r3, [r0, #28]
 800daca:	b1ab      	cbz	r3, 800daf8 <_reclaim_reent+0x3c>
 800dacc:	68db      	ldr	r3, [r3, #12]
 800dace:	b16b      	cbz	r3, 800daec <_reclaim_reent+0x30>
 800dad0:	2500      	movs	r5, #0
 800dad2:	69e3      	ldr	r3, [r4, #28]
 800dad4:	68db      	ldr	r3, [r3, #12]
 800dad6:	5959      	ldr	r1, [r3, r5]
 800dad8:	2900      	cmp	r1, #0
 800dada:	d13b      	bne.n	800db54 <_reclaim_reent+0x98>
 800dadc:	3504      	adds	r5, #4
 800dade:	2d80      	cmp	r5, #128	@ 0x80
 800dae0:	d1f7      	bne.n	800dad2 <_reclaim_reent+0x16>
 800dae2:	69e3      	ldr	r3, [r4, #28]
 800dae4:	4620      	mov	r0, r4
 800dae6:	68d9      	ldr	r1, [r3, #12]
 800dae8:	f000 fefe 	bl	800e8e8 <_free_r>
 800daec:	69e3      	ldr	r3, [r4, #28]
 800daee:	6819      	ldr	r1, [r3, #0]
 800daf0:	b111      	cbz	r1, 800daf8 <_reclaim_reent+0x3c>
 800daf2:	4620      	mov	r0, r4
 800daf4:	f000 fef8 	bl	800e8e8 <_free_r>
 800daf8:	6961      	ldr	r1, [r4, #20]
 800dafa:	b111      	cbz	r1, 800db02 <_reclaim_reent+0x46>
 800dafc:	4620      	mov	r0, r4
 800dafe:	f000 fef3 	bl	800e8e8 <_free_r>
 800db02:	69e1      	ldr	r1, [r4, #28]
 800db04:	b111      	cbz	r1, 800db0c <_reclaim_reent+0x50>
 800db06:	4620      	mov	r0, r4
 800db08:	f000 feee 	bl	800e8e8 <_free_r>
 800db0c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800db0e:	b111      	cbz	r1, 800db16 <_reclaim_reent+0x5a>
 800db10:	4620      	mov	r0, r4
 800db12:	f000 fee9 	bl	800e8e8 <_free_r>
 800db16:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800db18:	b111      	cbz	r1, 800db20 <_reclaim_reent+0x64>
 800db1a:	4620      	mov	r0, r4
 800db1c:	f000 fee4 	bl	800e8e8 <_free_r>
 800db20:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800db22:	b111      	cbz	r1, 800db2a <_reclaim_reent+0x6e>
 800db24:	4620      	mov	r0, r4
 800db26:	f000 fedf 	bl	800e8e8 <_free_r>
 800db2a:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 800db2c:	b111      	cbz	r1, 800db34 <_reclaim_reent+0x78>
 800db2e:	4620      	mov	r0, r4
 800db30:	f000 feda 	bl	800e8e8 <_free_r>
 800db34:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 800db36:	b111      	cbz	r1, 800db3e <_reclaim_reent+0x82>
 800db38:	4620      	mov	r0, r4
 800db3a:	f000 fed5 	bl	800e8e8 <_free_r>
 800db3e:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800db40:	b111      	cbz	r1, 800db48 <_reclaim_reent+0x8c>
 800db42:	4620      	mov	r0, r4
 800db44:	f000 fed0 	bl	800e8e8 <_free_r>
 800db48:	6a23      	ldr	r3, [r4, #32]
 800db4a:	b14b      	cbz	r3, 800db60 <_reclaim_reent+0xa4>
 800db4c:	4620      	mov	r0, r4
 800db4e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800db52:	4718      	bx	r3
 800db54:	680e      	ldr	r6, [r1, #0]
 800db56:	4620      	mov	r0, r4
 800db58:	f000 fec6 	bl	800e8e8 <_free_r>
 800db5c:	4631      	mov	r1, r6
 800db5e:	e7bb      	b.n	800dad8 <_reclaim_reent+0x1c>
 800db60:	bd70      	pop	{r4, r5, r6, pc}
 800db62:	bf00      	nop
 800db64:	20000028 	.word	0x20000028

0800db68 <_lseek_r>:
 800db68:	b538      	push	{r3, r4, r5, lr}
 800db6a:	4d07      	ldr	r5, [pc, #28]	@ (800db88 <_lseek_r+0x20>)
 800db6c:	4604      	mov	r4, r0
 800db6e:	4608      	mov	r0, r1
 800db70:	4611      	mov	r1, r2
 800db72:	2200      	movs	r2, #0
 800db74:	602a      	str	r2, [r5, #0]
 800db76:	461a      	mov	r2, r3
 800db78:	f7f5 fe49 	bl	800380e <_lseek>
 800db7c:	1c43      	adds	r3, r0, #1
 800db7e:	d102      	bne.n	800db86 <_lseek_r+0x1e>
 800db80:	682b      	ldr	r3, [r5, #0]
 800db82:	b103      	cbz	r3, 800db86 <_lseek_r+0x1e>
 800db84:	6023      	str	r3, [r4, #0]
 800db86:	bd38      	pop	{r3, r4, r5, pc}
 800db88:	200051bc 	.word	0x200051bc

0800db8c <_read_r>:
 800db8c:	b538      	push	{r3, r4, r5, lr}
 800db8e:	4d07      	ldr	r5, [pc, #28]	@ (800dbac <_read_r+0x20>)
 800db90:	4604      	mov	r4, r0
 800db92:	4608      	mov	r0, r1
 800db94:	4611      	mov	r1, r2
 800db96:	2200      	movs	r2, #0
 800db98:	602a      	str	r2, [r5, #0]
 800db9a:	461a      	mov	r2, r3
 800db9c:	f7f5 fdd7 	bl	800374e <_read>
 800dba0:	1c43      	adds	r3, r0, #1
 800dba2:	d102      	bne.n	800dbaa <_read_r+0x1e>
 800dba4:	682b      	ldr	r3, [r5, #0]
 800dba6:	b103      	cbz	r3, 800dbaa <_read_r+0x1e>
 800dba8:	6023      	str	r3, [r4, #0]
 800dbaa:	bd38      	pop	{r3, r4, r5, pc}
 800dbac:	200051bc 	.word	0x200051bc

0800dbb0 <_write_r>:
 800dbb0:	b538      	push	{r3, r4, r5, lr}
 800dbb2:	4d07      	ldr	r5, [pc, #28]	@ (800dbd0 <_write_r+0x20>)
 800dbb4:	4604      	mov	r4, r0
 800dbb6:	4608      	mov	r0, r1
 800dbb8:	4611      	mov	r1, r2
 800dbba:	2200      	movs	r2, #0
 800dbbc:	602a      	str	r2, [r5, #0]
 800dbbe:	461a      	mov	r2, r3
 800dbc0:	f7f5 fde2 	bl	8003788 <_write>
 800dbc4:	1c43      	adds	r3, r0, #1
 800dbc6:	d102      	bne.n	800dbce <_write_r+0x1e>
 800dbc8:	682b      	ldr	r3, [r5, #0]
 800dbca:	b103      	cbz	r3, 800dbce <_write_r+0x1e>
 800dbcc:	6023      	str	r3, [r4, #0]
 800dbce:	bd38      	pop	{r3, r4, r5, pc}
 800dbd0:	200051bc 	.word	0x200051bc

0800dbd4 <__errno>:
 800dbd4:	4b01      	ldr	r3, [pc, #4]	@ (800dbdc <__errno+0x8>)
 800dbd6:	6818      	ldr	r0, [r3, #0]
 800dbd8:	4770      	bx	lr
 800dbda:	bf00      	nop
 800dbdc:	20000028 	.word	0x20000028

0800dbe0 <__libc_init_array>:
 800dbe0:	b570      	push	{r4, r5, r6, lr}
 800dbe2:	4d0d      	ldr	r5, [pc, #52]	@ (800dc18 <__libc_init_array+0x38>)
 800dbe4:	4c0d      	ldr	r4, [pc, #52]	@ (800dc1c <__libc_init_array+0x3c>)
 800dbe6:	1b64      	subs	r4, r4, r5
 800dbe8:	10a4      	asrs	r4, r4, #2
 800dbea:	2600      	movs	r6, #0
 800dbec:	42a6      	cmp	r6, r4
 800dbee:	d109      	bne.n	800dc04 <__libc_init_array+0x24>
 800dbf0:	4d0b      	ldr	r5, [pc, #44]	@ (800dc20 <__libc_init_array+0x40>)
 800dbf2:	4c0c      	ldr	r4, [pc, #48]	@ (800dc24 <__libc_init_array+0x44>)
 800dbf4:	f002 fa58 	bl	80100a8 <_init>
 800dbf8:	1b64      	subs	r4, r4, r5
 800dbfa:	10a4      	asrs	r4, r4, #2
 800dbfc:	2600      	movs	r6, #0
 800dbfe:	42a6      	cmp	r6, r4
 800dc00:	d105      	bne.n	800dc0e <__libc_init_array+0x2e>
 800dc02:	bd70      	pop	{r4, r5, r6, pc}
 800dc04:	f855 3b04 	ldr.w	r3, [r5], #4
 800dc08:	4798      	blx	r3
 800dc0a:	3601      	adds	r6, #1
 800dc0c:	e7ee      	b.n	800dbec <__libc_init_array+0xc>
 800dc0e:	f855 3b04 	ldr.w	r3, [r5], #4
 800dc12:	4798      	blx	r3
 800dc14:	3601      	adds	r6, #1
 800dc16:	e7f2      	b.n	800dbfe <__libc_init_array+0x1e>
 800dc18:	08011180 	.word	0x08011180
 800dc1c:	08011180 	.word	0x08011180
 800dc20:	08011180 	.word	0x08011180
 800dc24:	08011184 	.word	0x08011184

0800dc28 <__retarget_lock_init_recursive>:
 800dc28:	4770      	bx	lr

0800dc2a <__retarget_lock_acquire_recursive>:
 800dc2a:	4770      	bx	lr

0800dc2c <__retarget_lock_release_recursive>:
 800dc2c:	4770      	bx	lr

0800dc2e <memcpy>:
 800dc2e:	440a      	add	r2, r1
 800dc30:	4291      	cmp	r1, r2
 800dc32:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800dc36:	d100      	bne.n	800dc3a <memcpy+0xc>
 800dc38:	4770      	bx	lr
 800dc3a:	b510      	push	{r4, lr}
 800dc3c:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dc40:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dc44:	4291      	cmp	r1, r2
 800dc46:	d1f9      	bne.n	800dc3c <memcpy+0xe>
 800dc48:	bd10      	pop	{r4, pc}

0800dc4a <quorem>:
 800dc4a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dc4e:	6903      	ldr	r3, [r0, #16]
 800dc50:	690c      	ldr	r4, [r1, #16]
 800dc52:	42a3      	cmp	r3, r4
 800dc54:	4607      	mov	r7, r0
 800dc56:	db7e      	blt.n	800dd56 <quorem+0x10c>
 800dc58:	3c01      	subs	r4, #1
 800dc5a:	f101 0814 	add.w	r8, r1, #20
 800dc5e:	00a3      	lsls	r3, r4, #2
 800dc60:	f100 0514 	add.w	r5, r0, #20
 800dc64:	9300      	str	r3, [sp, #0]
 800dc66:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800dc6a:	9301      	str	r3, [sp, #4]
 800dc6c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800dc70:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800dc74:	3301      	adds	r3, #1
 800dc76:	429a      	cmp	r2, r3
 800dc78:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800dc7c:	fbb2 f6f3 	udiv	r6, r2, r3
 800dc80:	d32e      	bcc.n	800dce0 <quorem+0x96>
 800dc82:	f04f 0a00 	mov.w	sl, #0
 800dc86:	46c4      	mov	ip, r8
 800dc88:	46ae      	mov	lr, r5
 800dc8a:	46d3      	mov	fp, sl
 800dc8c:	f85c 3b04 	ldr.w	r3, [ip], #4
 800dc90:	b298      	uxth	r0, r3
 800dc92:	fb06 a000 	mla	r0, r6, r0, sl
 800dc96:	0c02      	lsrs	r2, r0, #16
 800dc98:	0c1b      	lsrs	r3, r3, #16
 800dc9a:	fb06 2303 	mla	r3, r6, r3, r2
 800dc9e:	f8de 2000 	ldr.w	r2, [lr]
 800dca2:	b280      	uxth	r0, r0
 800dca4:	b292      	uxth	r2, r2
 800dca6:	1a12      	subs	r2, r2, r0
 800dca8:	445a      	add	r2, fp
 800dcaa:	f8de 0000 	ldr.w	r0, [lr]
 800dcae:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800dcb2:	b29b      	uxth	r3, r3
 800dcb4:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800dcb8:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800dcbc:	b292      	uxth	r2, r2
 800dcbe:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800dcc2:	45e1      	cmp	r9, ip
 800dcc4:	f84e 2b04 	str.w	r2, [lr], #4
 800dcc8:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800dccc:	d2de      	bcs.n	800dc8c <quorem+0x42>
 800dcce:	9b00      	ldr	r3, [sp, #0]
 800dcd0:	58eb      	ldr	r3, [r5, r3]
 800dcd2:	b92b      	cbnz	r3, 800dce0 <quorem+0x96>
 800dcd4:	9b01      	ldr	r3, [sp, #4]
 800dcd6:	3b04      	subs	r3, #4
 800dcd8:	429d      	cmp	r5, r3
 800dcda:	461a      	mov	r2, r3
 800dcdc:	d32f      	bcc.n	800dd3e <quorem+0xf4>
 800dcde:	613c      	str	r4, [r7, #16]
 800dce0:	4638      	mov	r0, r7
 800dce2:	f001 f97b 	bl	800efdc <__mcmp>
 800dce6:	2800      	cmp	r0, #0
 800dce8:	db25      	blt.n	800dd36 <quorem+0xec>
 800dcea:	4629      	mov	r1, r5
 800dcec:	2000      	movs	r0, #0
 800dcee:	f858 2b04 	ldr.w	r2, [r8], #4
 800dcf2:	f8d1 c000 	ldr.w	ip, [r1]
 800dcf6:	fa1f fe82 	uxth.w	lr, r2
 800dcfa:	fa1f f38c 	uxth.w	r3, ip
 800dcfe:	eba3 030e 	sub.w	r3, r3, lr
 800dd02:	4403      	add	r3, r0
 800dd04:	0c12      	lsrs	r2, r2, #16
 800dd06:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800dd0a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800dd0e:	b29b      	uxth	r3, r3
 800dd10:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800dd14:	45c1      	cmp	r9, r8
 800dd16:	f841 3b04 	str.w	r3, [r1], #4
 800dd1a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800dd1e:	d2e6      	bcs.n	800dcee <quorem+0xa4>
 800dd20:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800dd24:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800dd28:	b922      	cbnz	r2, 800dd34 <quorem+0xea>
 800dd2a:	3b04      	subs	r3, #4
 800dd2c:	429d      	cmp	r5, r3
 800dd2e:	461a      	mov	r2, r3
 800dd30:	d30b      	bcc.n	800dd4a <quorem+0x100>
 800dd32:	613c      	str	r4, [r7, #16]
 800dd34:	3601      	adds	r6, #1
 800dd36:	4630      	mov	r0, r6
 800dd38:	b003      	add	sp, #12
 800dd3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd3e:	6812      	ldr	r2, [r2, #0]
 800dd40:	3b04      	subs	r3, #4
 800dd42:	2a00      	cmp	r2, #0
 800dd44:	d1cb      	bne.n	800dcde <quorem+0x94>
 800dd46:	3c01      	subs	r4, #1
 800dd48:	e7c6      	b.n	800dcd8 <quorem+0x8e>
 800dd4a:	6812      	ldr	r2, [r2, #0]
 800dd4c:	3b04      	subs	r3, #4
 800dd4e:	2a00      	cmp	r2, #0
 800dd50:	d1ef      	bne.n	800dd32 <quorem+0xe8>
 800dd52:	3c01      	subs	r4, #1
 800dd54:	e7ea      	b.n	800dd2c <quorem+0xe2>
 800dd56:	2000      	movs	r0, #0
 800dd58:	e7ee      	b.n	800dd38 <quorem+0xee>
 800dd5a:	0000      	movs	r0, r0
 800dd5c:	0000      	movs	r0, r0
	...

0800dd60 <_dtoa_r>:
 800dd60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd64:	69c7      	ldr	r7, [r0, #28]
 800dd66:	b099      	sub	sp, #100	@ 0x64
 800dd68:	ed8d 0b02 	vstr	d0, [sp, #8]
 800dd6c:	ec55 4b10 	vmov	r4, r5, d0
 800dd70:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800dd72:	9109      	str	r1, [sp, #36]	@ 0x24
 800dd74:	4683      	mov	fp, r0
 800dd76:	920e      	str	r2, [sp, #56]	@ 0x38
 800dd78:	9313      	str	r3, [sp, #76]	@ 0x4c
 800dd7a:	b97f      	cbnz	r7, 800dd9c <_dtoa_r+0x3c>
 800dd7c:	2010      	movs	r0, #16
 800dd7e:	f000 fdfd 	bl	800e97c <malloc>
 800dd82:	4602      	mov	r2, r0
 800dd84:	f8cb 001c 	str.w	r0, [fp, #28]
 800dd88:	b920      	cbnz	r0, 800dd94 <_dtoa_r+0x34>
 800dd8a:	4ba7      	ldr	r3, [pc, #668]	@ (800e028 <_dtoa_r+0x2c8>)
 800dd8c:	21ef      	movs	r1, #239	@ 0xef
 800dd8e:	48a7      	ldr	r0, [pc, #668]	@ (800e02c <_dtoa_r+0x2cc>)
 800dd90:	f001 fe20 	bl	800f9d4 <__assert_func>
 800dd94:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800dd98:	6007      	str	r7, [r0, #0]
 800dd9a:	60c7      	str	r7, [r0, #12]
 800dd9c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800dda0:	6819      	ldr	r1, [r3, #0]
 800dda2:	b159      	cbz	r1, 800ddbc <_dtoa_r+0x5c>
 800dda4:	685a      	ldr	r2, [r3, #4]
 800dda6:	604a      	str	r2, [r1, #4]
 800dda8:	2301      	movs	r3, #1
 800ddaa:	4093      	lsls	r3, r2
 800ddac:	608b      	str	r3, [r1, #8]
 800ddae:	4658      	mov	r0, fp
 800ddb0:	f000 feda 	bl	800eb68 <_Bfree>
 800ddb4:	f8db 301c 	ldr.w	r3, [fp, #28]
 800ddb8:	2200      	movs	r2, #0
 800ddba:	601a      	str	r2, [r3, #0]
 800ddbc:	1e2b      	subs	r3, r5, #0
 800ddbe:	bfb9      	ittee	lt
 800ddc0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800ddc4:	9303      	strlt	r3, [sp, #12]
 800ddc6:	2300      	movge	r3, #0
 800ddc8:	6033      	strge	r3, [r6, #0]
 800ddca:	9f03      	ldr	r7, [sp, #12]
 800ddcc:	4b98      	ldr	r3, [pc, #608]	@ (800e030 <_dtoa_r+0x2d0>)
 800ddce:	bfbc      	itt	lt
 800ddd0:	2201      	movlt	r2, #1
 800ddd2:	6032      	strlt	r2, [r6, #0]
 800ddd4:	43bb      	bics	r3, r7
 800ddd6:	d112      	bne.n	800ddfe <_dtoa_r+0x9e>
 800ddd8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800ddda:	f242 730f 	movw	r3, #9999	@ 0x270f
 800ddde:	6013      	str	r3, [r2, #0]
 800dde0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800dde4:	4323      	orrs	r3, r4
 800dde6:	f000 854d 	beq.w	800e884 <_dtoa_r+0xb24>
 800ddea:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800ddec:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800e044 <_dtoa_r+0x2e4>
 800ddf0:	2b00      	cmp	r3, #0
 800ddf2:	f000 854f 	beq.w	800e894 <_dtoa_r+0xb34>
 800ddf6:	f10a 0303 	add.w	r3, sl, #3
 800ddfa:	f000 bd49 	b.w	800e890 <_dtoa_r+0xb30>
 800ddfe:	ed9d 7b02 	vldr	d7, [sp, #8]
 800de02:	2200      	movs	r2, #0
 800de04:	ec51 0b17 	vmov	r0, r1, d7
 800de08:	2300      	movs	r3, #0
 800de0a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800de0e:	f7f2 fe5b 	bl	8000ac8 <__aeabi_dcmpeq>
 800de12:	4680      	mov	r8, r0
 800de14:	b158      	cbz	r0, 800de2e <_dtoa_r+0xce>
 800de16:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800de18:	2301      	movs	r3, #1
 800de1a:	6013      	str	r3, [r2, #0]
 800de1c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800de1e:	b113      	cbz	r3, 800de26 <_dtoa_r+0xc6>
 800de20:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800de22:	4b84      	ldr	r3, [pc, #528]	@ (800e034 <_dtoa_r+0x2d4>)
 800de24:	6013      	str	r3, [r2, #0]
 800de26:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800e048 <_dtoa_r+0x2e8>
 800de2a:	f000 bd33 	b.w	800e894 <_dtoa_r+0xb34>
 800de2e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800de32:	aa16      	add	r2, sp, #88	@ 0x58
 800de34:	a917      	add	r1, sp, #92	@ 0x5c
 800de36:	4658      	mov	r0, fp
 800de38:	f001 f980 	bl	800f13c <__d2b>
 800de3c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800de40:	4681      	mov	r9, r0
 800de42:	2e00      	cmp	r6, #0
 800de44:	d077      	beq.n	800df36 <_dtoa_r+0x1d6>
 800de46:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800de48:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800de4c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800de50:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800de54:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800de58:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800de5c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800de60:	4619      	mov	r1, r3
 800de62:	2200      	movs	r2, #0
 800de64:	4b74      	ldr	r3, [pc, #464]	@ (800e038 <_dtoa_r+0x2d8>)
 800de66:	f7f2 fa0f 	bl	8000288 <__aeabi_dsub>
 800de6a:	a369      	add	r3, pc, #420	@ (adr r3, 800e010 <_dtoa_r+0x2b0>)
 800de6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de70:	f7f2 fbc2 	bl	80005f8 <__aeabi_dmul>
 800de74:	a368      	add	r3, pc, #416	@ (adr r3, 800e018 <_dtoa_r+0x2b8>)
 800de76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de7a:	f7f2 fa07 	bl	800028c <__adddf3>
 800de7e:	4604      	mov	r4, r0
 800de80:	4630      	mov	r0, r6
 800de82:	460d      	mov	r5, r1
 800de84:	f7f2 fb4e 	bl	8000524 <__aeabi_i2d>
 800de88:	a365      	add	r3, pc, #404	@ (adr r3, 800e020 <_dtoa_r+0x2c0>)
 800de8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de8e:	f7f2 fbb3 	bl	80005f8 <__aeabi_dmul>
 800de92:	4602      	mov	r2, r0
 800de94:	460b      	mov	r3, r1
 800de96:	4620      	mov	r0, r4
 800de98:	4629      	mov	r1, r5
 800de9a:	f7f2 f9f7 	bl	800028c <__adddf3>
 800de9e:	4604      	mov	r4, r0
 800dea0:	460d      	mov	r5, r1
 800dea2:	f7f2 fe59 	bl	8000b58 <__aeabi_d2iz>
 800dea6:	2200      	movs	r2, #0
 800dea8:	4607      	mov	r7, r0
 800deaa:	2300      	movs	r3, #0
 800deac:	4620      	mov	r0, r4
 800deae:	4629      	mov	r1, r5
 800deb0:	f7f2 fe14 	bl	8000adc <__aeabi_dcmplt>
 800deb4:	b140      	cbz	r0, 800dec8 <_dtoa_r+0x168>
 800deb6:	4638      	mov	r0, r7
 800deb8:	f7f2 fb34 	bl	8000524 <__aeabi_i2d>
 800debc:	4622      	mov	r2, r4
 800debe:	462b      	mov	r3, r5
 800dec0:	f7f2 fe02 	bl	8000ac8 <__aeabi_dcmpeq>
 800dec4:	b900      	cbnz	r0, 800dec8 <_dtoa_r+0x168>
 800dec6:	3f01      	subs	r7, #1
 800dec8:	2f16      	cmp	r7, #22
 800deca:	d851      	bhi.n	800df70 <_dtoa_r+0x210>
 800decc:	4b5b      	ldr	r3, [pc, #364]	@ (800e03c <_dtoa_r+0x2dc>)
 800dece:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800ded2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ded6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800deda:	f7f2 fdff 	bl	8000adc <__aeabi_dcmplt>
 800dede:	2800      	cmp	r0, #0
 800dee0:	d048      	beq.n	800df74 <_dtoa_r+0x214>
 800dee2:	3f01      	subs	r7, #1
 800dee4:	2300      	movs	r3, #0
 800dee6:	9312      	str	r3, [sp, #72]	@ 0x48
 800dee8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800deea:	1b9b      	subs	r3, r3, r6
 800deec:	1e5a      	subs	r2, r3, #1
 800deee:	bf44      	itt	mi
 800def0:	f1c3 0801 	rsbmi	r8, r3, #1
 800def4:	2300      	movmi	r3, #0
 800def6:	9208      	str	r2, [sp, #32]
 800def8:	bf54      	ite	pl
 800defa:	f04f 0800 	movpl.w	r8, #0
 800defe:	9308      	strmi	r3, [sp, #32]
 800df00:	2f00      	cmp	r7, #0
 800df02:	db39      	blt.n	800df78 <_dtoa_r+0x218>
 800df04:	9b08      	ldr	r3, [sp, #32]
 800df06:	970f      	str	r7, [sp, #60]	@ 0x3c
 800df08:	443b      	add	r3, r7
 800df0a:	9308      	str	r3, [sp, #32]
 800df0c:	2300      	movs	r3, #0
 800df0e:	930a      	str	r3, [sp, #40]	@ 0x28
 800df10:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800df12:	2b09      	cmp	r3, #9
 800df14:	d864      	bhi.n	800dfe0 <_dtoa_r+0x280>
 800df16:	2b05      	cmp	r3, #5
 800df18:	bfc4      	itt	gt
 800df1a:	3b04      	subgt	r3, #4
 800df1c:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800df1e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800df20:	f1a3 0302 	sub.w	r3, r3, #2
 800df24:	bfcc      	ite	gt
 800df26:	2400      	movgt	r4, #0
 800df28:	2401      	movle	r4, #1
 800df2a:	2b03      	cmp	r3, #3
 800df2c:	d863      	bhi.n	800dff6 <_dtoa_r+0x296>
 800df2e:	e8df f003 	tbb	[pc, r3]
 800df32:	372a      	.short	0x372a
 800df34:	5535      	.short	0x5535
 800df36:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800df3a:	441e      	add	r6, r3
 800df3c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800df40:	2b20      	cmp	r3, #32
 800df42:	bfc1      	itttt	gt
 800df44:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800df48:	409f      	lslgt	r7, r3
 800df4a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800df4e:	fa24 f303 	lsrgt.w	r3, r4, r3
 800df52:	bfd6      	itet	le
 800df54:	f1c3 0320 	rsble	r3, r3, #32
 800df58:	ea47 0003 	orrgt.w	r0, r7, r3
 800df5c:	fa04 f003 	lslle.w	r0, r4, r3
 800df60:	f7f2 fad0 	bl	8000504 <__aeabi_ui2d>
 800df64:	2201      	movs	r2, #1
 800df66:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800df6a:	3e01      	subs	r6, #1
 800df6c:	9214      	str	r2, [sp, #80]	@ 0x50
 800df6e:	e777      	b.n	800de60 <_dtoa_r+0x100>
 800df70:	2301      	movs	r3, #1
 800df72:	e7b8      	b.n	800dee6 <_dtoa_r+0x186>
 800df74:	9012      	str	r0, [sp, #72]	@ 0x48
 800df76:	e7b7      	b.n	800dee8 <_dtoa_r+0x188>
 800df78:	427b      	negs	r3, r7
 800df7a:	930a      	str	r3, [sp, #40]	@ 0x28
 800df7c:	2300      	movs	r3, #0
 800df7e:	eba8 0807 	sub.w	r8, r8, r7
 800df82:	930f      	str	r3, [sp, #60]	@ 0x3c
 800df84:	e7c4      	b.n	800df10 <_dtoa_r+0x1b0>
 800df86:	2300      	movs	r3, #0
 800df88:	930b      	str	r3, [sp, #44]	@ 0x2c
 800df8a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800df8c:	2b00      	cmp	r3, #0
 800df8e:	dc35      	bgt.n	800dffc <_dtoa_r+0x29c>
 800df90:	2301      	movs	r3, #1
 800df92:	9300      	str	r3, [sp, #0]
 800df94:	9307      	str	r3, [sp, #28]
 800df96:	461a      	mov	r2, r3
 800df98:	920e      	str	r2, [sp, #56]	@ 0x38
 800df9a:	e00b      	b.n	800dfb4 <_dtoa_r+0x254>
 800df9c:	2301      	movs	r3, #1
 800df9e:	e7f3      	b.n	800df88 <_dtoa_r+0x228>
 800dfa0:	2300      	movs	r3, #0
 800dfa2:	930b      	str	r3, [sp, #44]	@ 0x2c
 800dfa4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800dfa6:	18fb      	adds	r3, r7, r3
 800dfa8:	9300      	str	r3, [sp, #0]
 800dfaa:	3301      	adds	r3, #1
 800dfac:	2b01      	cmp	r3, #1
 800dfae:	9307      	str	r3, [sp, #28]
 800dfb0:	bfb8      	it	lt
 800dfb2:	2301      	movlt	r3, #1
 800dfb4:	f8db 001c 	ldr.w	r0, [fp, #28]
 800dfb8:	2100      	movs	r1, #0
 800dfba:	2204      	movs	r2, #4
 800dfbc:	f102 0514 	add.w	r5, r2, #20
 800dfc0:	429d      	cmp	r5, r3
 800dfc2:	d91f      	bls.n	800e004 <_dtoa_r+0x2a4>
 800dfc4:	6041      	str	r1, [r0, #4]
 800dfc6:	4658      	mov	r0, fp
 800dfc8:	f000 fd8e 	bl	800eae8 <_Balloc>
 800dfcc:	4682      	mov	sl, r0
 800dfce:	2800      	cmp	r0, #0
 800dfd0:	d13c      	bne.n	800e04c <_dtoa_r+0x2ec>
 800dfd2:	4b1b      	ldr	r3, [pc, #108]	@ (800e040 <_dtoa_r+0x2e0>)
 800dfd4:	4602      	mov	r2, r0
 800dfd6:	f240 11af 	movw	r1, #431	@ 0x1af
 800dfda:	e6d8      	b.n	800dd8e <_dtoa_r+0x2e>
 800dfdc:	2301      	movs	r3, #1
 800dfde:	e7e0      	b.n	800dfa2 <_dtoa_r+0x242>
 800dfe0:	2401      	movs	r4, #1
 800dfe2:	2300      	movs	r3, #0
 800dfe4:	9309      	str	r3, [sp, #36]	@ 0x24
 800dfe6:	940b      	str	r4, [sp, #44]	@ 0x2c
 800dfe8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800dfec:	9300      	str	r3, [sp, #0]
 800dfee:	9307      	str	r3, [sp, #28]
 800dff0:	2200      	movs	r2, #0
 800dff2:	2312      	movs	r3, #18
 800dff4:	e7d0      	b.n	800df98 <_dtoa_r+0x238>
 800dff6:	2301      	movs	r3, #1
 800dff8:	930b      	str	r3, [sp, #44]	@ 0x2c
 800dffa:	e7f5      	b.n	800dfe8 <_dtoa_r+0x288>
 800dffc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800dffe:	9300      	str	r3, [sp, #0]
 800e000:	9307      	str	r3, [sp, #28]
 800e002:	e7d7      	b.n	800dfb4 <_dtoa_r+0x254>
 800e004:	3101      	adds	r1, #1
 800e006:	0052      	lsls	r2, r2, #1
 800e008:	e7d8      	b.n	800dfbc <_dtoa_r+0x25c>
 800e00a:	bf00      	nop
 800e00c:	f3af 8000 	nop.w
 800e010:	636f4361 	.word	0x636f4361
 800e014:	3fd287a7 	.word	0x3fd287a7
 800e018:	8b60c8b3 	.word	0x8b60c8b3
 800e01c:	3fc68a28 	.word	0x3fc68a28
 800e020:	509f79fb 	.word	0x509f79fb
 800e024:	3fd34413 	.word	0x3fd34413
 800e028:	08010e0d 	.word	0x08010e0d
 800e02c:	08010e24 	.word	0x08010e24
 800e030:	7ff00000 	.word	0x7ff00000
 800e034:	08010ddd 	.word	0x08010ddd
 800e038:	3ff80000 	.word	0x3ff80000
 800e03c:	08010f20 	.word	0x08010f20
 800e040:	08010e7c 	.word	0x08010e7c
 800e044:	08010e09 	.word	0x08010e09
 800e048:	08010ddc 	.word	0x08010ddc
 800e04c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800e050:	6018      	str	r0, [r3, #0]
 800e052:	9b07      	ldr	r3, [sp, #28]
 800e054:	2b0e      	cmp	r3, #14
 800e056:	f200 80a4 	bhi.w	800e1a2 <_dtoa_r+0x442>
 800e05a:	2c00      	cmp	r4, #0
 800e05c:	f000 80a1 	beq.w	800e1a2 <_dtoa_r+0x442>
 800e060:	2f00      	cmp	r7, #0
 800e062:	dd33      	ble.n	800e0cc <_dtoa_r+0x36c>
 800e064:	4bad      	ldr	r3, [pc, #692]	@ (800e31c <_dtoa_r+0x5bc>)
 800e066:	f007 020f 	and.w	r2, r7, #15
 800e06a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e06e:	ed93 7b00 	vldr	d7, [r3]
 800e072:	05f8      	lsls	r0, r7, #23
 800e074:	ed8d 7b04 	vstr	d7, [sp, #16]
 800e078:	ea4f 1427 	mov.w	r4, r7, asr #4
 800e07c:	d516      	bpl.n	800e0ac <_dtoa_r+0x34c>
 800e07e:	4ba8      	ldr	r3, [pc, #672]	@ (800e320 <_dtoa_r+0x5c0>)
 800e080:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e084:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800e088:	f7f2 fbe0 	bl	800084c <__aeabi_ddiv>
 800e08c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e090:	f004 040f 	and.w	r4, r4, #15
 800e094:	2603      	movs	r6, #3
 800e096:	4da2      	ldr	r5, [pc, #648]	@ (800e320 <_dtoa_r+0x5c0>)
 800e098:	b954      	cbnz	r4, 800e0b0 <_dtoa_r+0x350>
 800e09a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e09e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e0a2:	f7f2 fbd3 	bl	800084c <__aeabi_ddiv>
 800e0a6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e0aa:	e028      	b.n	800e0fe <_dtoa_r+0x39e>
 800e0ac:	2602      	movs	r6, #2
 800e0ae:	e7f2      	b.n	800e096 <_dtoa_r+0x336>
 800e0b0:	07e1      	lsls	r1, r4, #31
 800e0b2:	d508      	bpl.n	800e0c6 <_dtoa_r+0x366>
 800e0b4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800e0b8:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e0bc:	f7f2 fa9c 	bl	80005f8 <__aeabi_dmul>
 800e0c0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e0c4:	3601      	adds	r6, #1
 800e0c6:	1064      	asrs	r4, r4, #1
 800e0c8:	3508      	adds	r5, #8
 800e0ca:	e7e5      	b.n	800e098 <_dtoa_r+0x338>
 800e0cc:	f000 80d2 	beq.w	800e274 <_dtoa_r+0x514>
 800e0d0:	427c      	negs	r4, r7
 800e0d2:	4b92      	ldr	r3, [pc, #584]	@ (800e31c <_dtoa_r+0x5bc>)
 800e0d4:	4d92      	ldr	r5, [pc, #584]	@ (800e320 <_dtoa_r+0x5c0>)
 800e0d6:	f004 020f 	and.w	r2, r4, #15
 800e0da:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e0de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e0e2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800e0e6:	f7f2 fa87 	bl	80005f8 <__aeabi_dmul>
 800e0ea:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e0ee:	1124      	asrs	r4, r4, #4
 800e0f0:	2300      	movs	r3, #0
 800e0f2:	2602      	movs	r6, #2
 800e0f4:	2c00      	cmp	r4, #0
 800e0f6:	f040 80b2 	bne.w	800e25e <_dtoa_r+0x4fe>
 800e0fa:	2b00      	cmp	r3, #0
 800e0fc:	d1d3      	bne.n	800e0a6 <_dtoa_r+0x346>
 800e0fe:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800e100:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800e104:	2b00      	cmp	r3, #0
 800e106:	f000 80b7 	beq.w	800e278 <_dtoa_r+0x518>
 800e10a:	4b86      	ldr	r3, [pc, #536]	@ (800e324 <_dtoa_r+0x5c4>)
 800e10c:	2200      	movs	r2, #0
 800e10e:	4620      	mov	r0, r4
 800e110:	4629      	mov	r1, r5
 800e112:	f7f2 fce3 	bl	8000adc <__aeabi_dcmplt>
 800e116:	2800      	cmp	r0, #0
 800e118:	f000 80ae 	beq.w	800e278 <_dtoa_r+0x518>
 800e11c:	9b07      	ldr	r3, [sp, #28]
 800e11e:	2b00      	cmp	r3, #0
 800e120:	f000 80aa 	beq.w	800e278 <_dtoa_r+0x518>
 800e124:	9b00      	ldr	r3, [sp, #0]
 800e126:	2b00      	cmp	r3, #0
 800e128:	dd37      	ble.n	800e19a <_dtoa_r+0x43a>
 800e12a:	1e7b      	subs	r3, r7, #1
 800e12c:	9304      	str	r3, [sp, #16]
 800e12e:	4620      	mov	r0, r4
 800e130:	4b7d      	ldr	r3, [pc, #500]	@ (800e328 <_dtoa_r+0x5c8>)
 800e132:	2200      	movs	r2, #0
 800e134:	4629      	mov	r1, r5
 800e136:	f7f2 fa5f 	bl	80005f8 <__aeabi_dmul>
 800e13a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e13e:	9c00      	ldr	r4, [sp, #0]
 800e140:	3601      	adds	r6, #1
 800e142:	4630      	mov	r0, r6
 800e144:	f7f2 f9ee 	bl	8000524 <__aeabi_i2d>
 800e148:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e14c:	f7f2 fa54 	bl	80005f8 <__aeabi_dmul>
 800e150:	4b76      	ldr	r3, [pc, #472]	@ (800e32c <_dtoa_r+0x5cc>)
 800e152:	2200      	movs	r2, #0
 800e154:	f7f2 f89a 	bl	800028c <__adddf3>
 800e158:	4605      	mov	r5, r0
 800e15a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800e15e:	2c00      	cmp	r4, #0
 800e160:	f040 808d 	bne.w	800e27e <_dtoa_r+0x51e>
 800e164:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e168:	4b71      	ldr	r3, [pc, #452]	@ (800e330 <_dtoa_r+0x5d0>)
 800e16a:	2200      	movs	r2, #0
 800e16c:	f7f2 f88c 	bl	8000288 <__aeabi_dsub>
 800e170:	4602      	mov	r2, r0
 800e172:	460b      	mov	r3, r1
 800e174:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e178:	462a      	mov	r2, r5
 800e17a:	4633      	mov	r3, r6
 800e17c:	f7f2 fccc 	bl	8000b18 <__aeabi_dcmpgt>
 800e180:	2800      	cmp	r0, #0
 800e182:	f040 828b 	bne.w	800e69c <_dtoa_r+0x93c>
 800e186:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e18a:	462a      	mov	r2, r5
 800e18c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800e190:	f7f2 fca4 	bl	8000adc <__aeabi_dcmplt>
 800e194:	2800      	cmp	r0, #0
 800e196:	f040 8128 	bne.w	800e3ea <_dtoa_r+0x68a>
 800e19a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800e19e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800e1a2:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800e1a4:	2b00      	cmp	r3, #0
 800e1a6:	f2c0 815a 	blt.w	800e45e <_dtoa_r+0x6fe>
 800e1aa:	2f0e      	cmp	r7, #14
 800e1ac:	f300 8157 	bgt.w	800e45e <_dtoa_r+0x6fe>
 800e1b0:	4b5a      	ldr	r3, [pc, #360]	@ (800e31c <_dtoa_r+0x5bc>)
 800e1b2:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800e1b6:	ed93 7b00 	vldr	d7, [r3]
 800e1ba:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e1bc:	2b00      	cmp	r3, #0
 800e1be:	ed8d 7b00 	vstr	d7, [sp]
 800e1c2:	da03      	bge.n	800e1cc <_dtoa_r+0x46c>
 800e1c4:	9b07      	ldr	r3, [sp, #28]
 800e1c6:	2b00      	cmp	r3, #0
 800e1c8:	f340 8101 	ble.w	800e3ce <_dtoa_r+0x66e>
 800e1cc:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800e1d0:	4656      	mov	r6, sl
 800e1d2:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e1d6:	4620      	mov	r0, r4
 800e1d8:	4629      	mov	r1, r5
 800e1da:	f7f2 fb37 	bl	800084c <__aeabi_ddiv>
 800e1de:	f7f2 fcbb 	bl	8000b58 <__aeabi_d2iz>
 800e1e2:	4680      	mov	r8, r0
 800e1e4:	f7f2 f99e 	bl	8000524 <__aeabi_i2d>
 800e1e8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e1ec:	f7f2 fa04 	bl	80005f8 <__aeabi_dmul>
 800e1f0:	4602      	mov	r2, r0
 800e1f2:	460b      	mov	r3, r1
 800e1f4:	4620      	mov	r0, r4
 800e1f6:	4629      	mov	r1, r5
 800e1f8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800e1fc:	f7f2 f844 	bl	8000288 <__aeabi_dsub>
 800e200:	f806 4b01 	strb.w	r4, [r6], #1
 800e204:	9d07      	ldr	r5, [sp, #28]
 800e206:	eba6 040a 	sub.w	r4, r6, sl
 800e20a:	42a5      	cmp	r5, r4
 800e20c:	4602      	mov	r2, r0
 800e20e:	460b      	mov	r3, r1
 800e210:	f040 8117 	bne.w	800e442 <_dtoa_r+0x6e2>
 800e214:	f7f2 f83a 	bl	800028c <__adddf3>
 800e218:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e21c:	4604      	mov	r4, r0
 800e21e:	460d      	mov	r5, r1
 800e220:	f7f2 fc7a 	bl	8000b18 <__aeabi_dcmpgt>
 800e224:	2800      	cmp	r0, #0
 800e226:	f040 80f9 	bne.w	800e41c <_dtoa_r+0x6bc>
 800e22a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e22e:	4620      	mov	r0, r4
 800e230:	4629      	mov	r1, r5
 800e232:	f7f2 fc49 	bl	8000ac8 <__aeabi_dcmpeq>
 800e236:	b118      	cbz	r0, 800e240 <_dtoa_r+0x4e0>
 800e238:	f018 0f01 	tst.w	r8, #1
 800e23c:	f040 80ee 	bne.w	800e41c <_dtoa_r+0x6bc>
 800e240:	4649      	mov	r1, r9
 800e242:	4658      	mov	r0, fp
 800e244:	f000 fc90 	bl	800eb68 <_Bfree>
 800e248:	2300      	movs	r3, #0
 800e24a:	7033      	strb	r3, [r6, #0]
 800e24c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800e24e:	3701      	adds	r7, #1
 800e250:	601f      	str	r7, [r3, #0]
 800e252:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e254:	2b00      	cmp	r3, #0
 800e256:	f000 831d 	beq.w	800e894 <_dtoa_r+0xb34>
 800e25a:	601e      	str	r6, [r3, #0]
 800e25c:	e31a      	b.n	800e894 <_dtoa_r+0xb34>
 800e25e:	07e2      	lsls	r2, r4, #31
 800e260:	d505      	bpl.n	800e26e <_dtoa_r+0x50e>
 800e262:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e266:	f7f2 f9c7 	bl	80005f8 <__aeabi_dmul>
 800e26a:	3601      	adds	r6, #1
 800e26c:	2301      	movs	r3, #1
 800e26e:	1064      	asrs	r4, r4, #1
 800e270:	3508      	adds	r5, #8
 800e272:	e73f      	b.n	800e0f4 <_dtoa_r+0x394>
 800e274:	2602      	movs	r6, #2
 800e276:	e742      	b.n	800e0fe <_dtoa_r+0x39e>
 800e278:	9c07      	ldr	r4, [sp, #28]
 800e27a:	9704      	str	r7, [sp, #16]
 800e27c:	e761      	b.n	800e142 <_dtoa_r+0x3e2>
 800e27e:	4b27      	ldr	r3, [pc, #156]	@ (800e31c <_dtoa_r+0x5bc>)
 800e280:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800e282:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e286:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800e28a:	4454      	add	r4, sl
 800e28c:	2900      	cmp	r1, #0
 800e28e:	d053      	beq.n	800e338 <_dtoa_r+0x5d8>
 800e290:	4928      	ldr	r1, [pc, #160]	@ (800e334 <_dtoa_r+0x5d4>)
 800e292:	2000      	movs	r0, #0
 800e294:	f7f2 fada 	bl	800084c <__aeabi_ddiv>
 800e298:	4633      	mov	r3, r6
 800e29a:	462a      	mov	r2, r5
 800e29c:	f7f1 fff4 	bl	8000288 <__aeabi_dsub>
 800e2a0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800e2a4:	4656      	mov	r6, sl
 800e2a6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e2aa:	f7f2 fc55 	bl	8000b58 <__aeabi_d2iz>
 800e2ae:	4605      	mov	r5, r0
 800e2b0:	f7f2 f938 	bl	8000524 <__aeabi_i2d>
 800e2b4:	4602      	mov	r2, r0
 800e2b6:	460b      	mov	r3, r1
 800e2b8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e2bc:	f7f1 ffe4 	bl	8000288 <__aeabi_dsub>
 800e2c0:	3530      	adds	r5, #48	@ 0x30
 800e2c2:	4602      	mov	r2, r0
 800e2c4:	460b      	mov	r3, r1
 800e2c6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e2ca:	f806 5b01 	strb.w	r5, [r6], #1
 800e2ce:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800e2d2:	f7f2 fc03 	bl	8000adc <__aeabi_dcmplt>
 800e2d6:	2800      	cmp	r0, #0
 800e2d8:	d171      	bne.n	800e3be <_dtoa_r+0x65e>
 800e2da:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e2de:	4911      	ldr	r1, [pc, #68]	@ (800e324 <_dtoa_r+0x5c4>)
 800e2e0:	2000      	movs	r0, #0
 800e2e2:	f7f1 ffd1 	bl	8000288 <__aeabi_dsub>
 800e2e6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800e2ea:	f7f2 fbf7 	bl	8000adc <__aeabi_dcmplt>
 800e2ee:	2800      	cmp	r0, #0
 800e2f0:	f040 8095 	bne.w	800e41e <_dtoa_r+0x6be>
 800e2f4:	42a6      	cmp	r6, r4
 800e2f6:	f43f af50 	beq.w	800e19a <_dtoa_r+0x43a>
 800e2fa:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800e2fe:	4b0a      	ldr	r3, [pc, #40]	@ (800e328 <_dtoa_r+0x5c8>)
 800e300:	2200      	movs	r2, #0
 800e302:	f7f2 f979 	bl	80005f8 <__aeabi_dmul>
 800e306:	4b08      	ldr	r3, [pc, #32]	@ (800e328 <_dtoa_r+0x5c8>)
 800e308:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800e30c:	2200      	movs	r2, #0
 800e30e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e312:	f7f2 f971 	bl	80005f8 <__aeabi_dmul>
 800e316:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e31a:	e7c4      	b.n	800e2a6 <_dtoa_r+0x546>
 800e31c:	08010f20 	.word	0x08010f20
 800e320:	08010ef8 	.word	0x08010ef8
 800e324:	3ff00000 	.word	0x3ff00000
 800e328:	40240000 	.word	0x40240000
 800e32c:	401c0000 	.word	0x401c0000
 800e330:	40140000 	.word	0x40140000
 800e334:	3fe00000 	.word	0x3fe00000
 800e338:	4631      	mov	r1, r6
 800e33a:	4628      	mov	r0, r5
 800e33c:	f7f2 f95c 	bl	80005f8 <__aeabi_dmul>
 800e340:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800e344:	9415      	str	r4, [sp, #84]	@ 0x54
 800e346:	4656      	mov	r6, sl
 800e348:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e34c:	f7f2 fc04 	bl	8000b58 <__aeabi_d2iz>
 800e350:	4605      	mov	r5, r0
 800e352:	f7f2 f8e7 	bl	8000524 <__aeabi_i2d>
 800e356:	4602      	mov	r2, r0
 800e358:	460b      	mov	r3, r1
 800e35a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e35e:	f7f1 ff93 	bl	8000288 <__aeabi_dsub>
 800e362:	3530      	adds	r5, #48	@ 0x30
 800e364:	f806 5b01 	strb.w	r5, [r6], #1
 800e368:	4602      	mov	r2, r0
 800e36a:	460b      	mov	r3, r1
 800e36c:	42a6      	cmp	r6, r4
 800e36e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800e372:	f04f 0200 	mov.w	r2, #0
 800e376:	d124      	bne.n	800e3c2 <_dtoa_r+0x662>
 800e378:	4bac      	ldr	r3, [pc, #688]	@ (800e62c <_dtoa_r+0x8cc>)
 800e37a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800e37e:	f7f1 ff85 	bl	800028c <__adddf3>
 800e382:	4602      	mov	r2, r0
 800e384:	460b      	mov	r3, r1
 800e386:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e38a:	f7f2 fbc5 	bl	8000b18 <__aeabi_dcmpgt>
 800e38e:	2800      	cmp	r0, #0
 800e390:	d145      	bne.n	800e41e <_dtoa_r+0x6be>
 800e392:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800e396:	49a5      	ldr	r1, [pc, #660]	@ (800e62c <_dtoa_r+0x8cc>)
 800e398:	2000      	movs	r0, #0
 800e39a:	f7f1 ff75 	bl	8000288 <__aeabi_dsub>
 800e39e:	4602      	mov	r2, r0
 800e3a0:	460b      	mov	r3, r1
 800e3a2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e3a6:	f7f2 fb99 	bl	8000adc <__aeabi_dcmplt>
 800e3aa:	2800      	cmp	r0, #0
 800e3ac:	f43f aef5 	beq.w	800e19a <_dtoa_r+0x43a>
 800e3b0:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800e3b2:	1e73      	subs	r3, r6, #1
 800e3b4:	9315      	str	r3, [sp, #84]	@ 0x54
 800e3b6:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800e3ba:	2b30      	cmp	r3, #48	@ 0x30
 800e3bc:	d0f8      	beq.n	800e3b0 <_dtoa_r+0x650>
 800e3be:	9f04      	ldr	r7, [sp, #16]
 800e3c0:	e73e      	b.n	800e240 <_dtoa_r+0x4e0>
 800e3c2:	4b9b      	ldr	r3, [pc, #620]	@ (800e630 <_dtoa_r+0x8d0>)
 800e3c4:	f7f2 f918 	bl	80005f8 <__aeabi_dmul>
 800e3c8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e3cc:	e7bc      	b.n	800e348 <_dtoa_r+0x5e8>
 800e3ce:	d10c      	bne.n	800e3ea <_dtoa_r+0x68a>
 800e3d0:	4b98      	ldr	r3, [pc, #608]	@ (800e634 <_dtoa_r+0x8d4>)
 800e3d2:	2200      	movs	r2, #0
 800e3d4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e3d8:	f7f2 f90e 	bl	80005f8 <__aeabi_dmul>
 800e3dc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800e3e0:	f7f2 fb90 	bl	8000b04 <__aeabi_dcmpge>
 800e3e4:	2800      	cmp	r0, #0
 800e3e6:	f000 8157 	beq.w	800e698 <_dtoa_r+0x938>
 800e3ea:	2400      	movs	r4, #0
 800e3ec:	4625      	mov	r5, r4
 800e3ee:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800e3f0:	43db      	mvns	r3, r3
 800e3f2:	9304      	str	r3, [sp, #16]
 800e3f4:	4656      	mov	r6, sl
 800e3f6:	2700      	movs	r7, #0
 800e3f8:	4621      	mov	r1, r4
 800e3fa:	4658      	mov	r0, fp
 800e3fc:	f000 fbb4 	bl	800eb68 <_Bfree>
 800e400:	2d00      	cmp	r5, #0
 800e402:	d0dc      	beq.n	800e3be <_dtoa_r+0x65e>
 800e404:	b12f      	cbz	r7, 800e412 <_dtoa_r+0x6b2>
 800e406:	42af      	cmp	r7, r5
 800e408:	d003      	beq.n	800e412 <_dtoa_r+0x6b2>
 800e40a:	4639      	mov	r1, r7
 800e40c:	4658      	mov	r0, fp
 800e40e:	f000 fbab 	bl	800eb68 <_Bfree>
 800e412:	4629      	mov	r1, r5
 800e414:	4658      	mov	r0, fp
 800e416:	f000 fba7 	bl	800eb68 <_Bfree>
 800e41a:	e7d0      	b.n	800e3be <_dtoa_r+0x65e>
 800e41c:	9704      	str	r7, [sp, #16]
 800e41e:	4633      	mov	r3, r6
 800e420:	461e      	mov	r6, r3
 800e422:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e426:	2a39      	cmp	r2, #57	@ 0x39
 800e428:	d107      	bne.n	800e43a <_dtoa_r+0x6da>
 800e42a:	459a      	cmp	sl, r3
 800e42c:	d1f8      	bne.n	800e420 <_dtoa_r+0x6c0>
 800e42e:	9a04      	ldr	r2, [sp, #16]
 800e430:	3201      	adds	r2, #1
 800e432:	9204      	str	r2, [sp, #16]
 800e434:	2230      	movs	r2, #48	@ 0x30
 800e436:	f88a 2000 	strb.w	r2, [sl]
 800e43a:	781a      	ldrb	r2, [r3, #0]
 800e43c:	3201      	adds	r2, #1
 800e43e:	701a      	strb	r2, [r3, #0]
 800e440:	e7bd      	b.n	800e3be <_dtoa_r+0x65e>
 800e442:	4b7b      	ldr	r3, [pc, #492]	@ (800e630 <_dtoa_r+0x8d0>)
 800e444:	2200      	movs	r2, #0
 800e446:	f7f2 f8d7 	bl	80005f8 <__aeabi_dmul>
 800e44a:	2200      	movs	r2, #0
 800e44c:	2300      	movs	r3, #0
 800e44e:	4604      	mov	r4, r0
 800e450:	460d      	mov	r5, r1
 800e452:	f7f2 fb39 	bl	8000ac8 <__aeabi_dcmpeq>
 800e456:	2800      	cmp	r0, #0
 800e458:	f43f aebb 	beq.w	800e1d2 <_dtoa_r+0x472>
 800e45c:	e6f0      	b.n	800e240 <_dtoa_r+0x4e0>
 800e45e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800e460:	2a00      	cmp	r2, #0
 800e462:	f000 80db 	beq.w	800e61c <_dtoa_r+0x8bc>
 800e466:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800e468:	2a01      	cmp	r2, #1
 800e46a:	f300 80bf 	bgt.w	800e5ec <_dtoa_r+0x88c>
 800e46e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800e470:	2a00      	cmp	r2, #0
 800e472:	f000 80b7 	beq.w	800e5e4 <_dtoa_r+0x884>
 800e476:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800e47a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800e47c:	4646      	mov	r6, r8
 800e47e:	9a08      	ldr	r2, [sp, #32]
 800e480:	2101      	movs	r1, #1
 800e482:	441a      	add	r2, r3
 800e484:	4658      	mov	r0, fp
 800e486:	4498      	add	r8, r3
 800e488:	9208      	str	r2, [sp, #32]
 800e48a:	f000 fc21 	bl	800ecd0 <__i2b>
 800e48e:	4605      	mov	r5, r0
 800e490:	b15e      	cbz	r6, 800e4aa <_dtoa_r+0x74a>
 800e492:	9b08      	ldr	r3, [sp, #32]
 800e494:	2b00      	cmp	r3, #0
 800e496:	dd08      	ble.n	800e4aa <_dtoa_r+0x74a>
 800e498:	42b3      	cmp	r3, r6
 800e49a:	9a08      	ldr	r2, [sp, #32]
 800e49c:	bfa8      	it	ge
 800e49e:	4633      	movge	r3, r6
 800e4a0:	eba8 0803 	sub.w	r8, r8, r3
 800e4a4:	1af6      	subs	r6, r6, r3
 800e4a6:	1ad3      	subs	r3, r2, r3
 800e4a8:	9308      	str	r3, [sp, #32]
 800e4aa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e4ac:	b1f3      	cbz	r3, 800e4ec <_dtoa_r+0x78c>
 800e4ae:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e4b0:	2b00      	cmp	r3, #0
 800e4b2:	f000 80b7 	beq.w	800e624 <_dtoa_r+0x8c4>
 800e4b6:	b18c      	cbz	r4, 800e4dc <_dtoa_r+0x77c>
 800e4b8:	4629      	mov	r1, r5
 800e4ba:	4622      	mov	r2, r4
 800e4bc:	4658      	mov	r0, fp
 800e4be:	f000 fcc7 	bl	800ee50 <__pow5mult>
 800e4c2:	464a      	mov	r2, r9
 800e4c4:	4601      	mov	r1, r0
 800e4c6:	4605      	mov	r5, r0
 800e4c8:	4658      	mov	r0, fp
 800e4ca:	f000 fc17 	bl	800ecfc <__multiply>
 800e4ce:	4649      	mov	r1, r9
 800e4d0:	9004      	str	r0, [sp, #16]
 800e4d2:	4658      	mov	r0, fp
 800e4d4:	f000 fb48 	bl	800eb68 <_Bfree>
 800e4d8:	9b04      	ldr	r3, [sp, #16]
 800e4da:	4699      	mov	r9, r3
 800e4dc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e4de:	1b1a      	subs	r2, r3, r4
 800e4e0:	d004      	beq.n	800e4ec <_dtoa_r+0x78c>
 800e4e2:	4649      	mov	r1, r9
 800e4e4:	4658      	mov	r0, fp
 800e4e6:	f000 fcb3 	bl	800ee50 <__pow5mult>
 800e4ea:	4681      	mov	r9, r0
 800e4ec:	2101      	movs	r1, #1
 800e4ee:	4658      	mov	r0, fp
 800e4f0:	f000 fbee 	bl	800ecd0 <__i2b>
 800e4f4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e4f6:	4604      	mov	r4, r0
 800e4f8:	2b00      	cmp	r3, #0
 800e4fa:	f000 81cf 	beq.w	800e89c <_dtoa_r+0xb3c>
 800e4fe:	461a      	mov	r2, r3
 800e500:	4601      	mov	r1, r0
 800e502:	4658      	mov	r0, fp
 800e504:	f000 fca4 	bl	800ee50 <__pow5mult>
 800e508:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e50a:	2b01      	cmp	r3, #1
 800e50c:	4604      	mov	r4, r0
 800e50e:	f300 8095 	bgt.w	800e63c <_dtoa_r+0x8dc>
 800e512:	9b02      	ldr	r3, [sp, #8]
 800e514:	2b00      	cmp	r3, #0
 800e516:	f040 8087 	bne.w	800e628 <_dtoa_r+0x8c8>
 800e51a:	9b03      	ldr	r3, [sp, #12]
 800e51c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800e520:	2b00      	cmp	r3, #0
 800e522:	f040 8089 	bne.w	800e638 <_dtoa_r+0x8d8>
 800e526:	9b03      	ldr	r3, [sp, #12]
 800e528:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800e52c:	0d1b      	lsrs	r3, r3, #20
 800e52e:	051b      	lsls	r3, r3, #20
 800e530:	b12b      	cbz	r3, 800e53e <_dtoa_r+0x7de>
 800e532:	9b08      	ldr	r3, [sp, #32]
 800e534:	3301      	adds	r3, #1
 800e536:	9308      	str	r3, [sp, #32]
 800e538:	f108 0801 	add.w	r8, r8, #1
 800e53c:	2301      	movs	r3, #1
 800e53e:	930a      	str	r3, [sp, #40]	@ 0x28
 800e540:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e542:	2b00      	cmp	r3, #0
 800e544:	f000 81b0 	beq.w	800e8a8 <_dtoa_r+0xb48>
 800e548:	6923      	ldr	r3, [r4, #16]
 800e54a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800e54e:	6918      	ldr	r0, [r3, #16]
 800e550:	f000 fb72 	bl	800ec38 <__hi0bits>
 800e554:	f1c0 0020 	rsb	r0, r0, #32
 800e558:	9b08      	ldr	r3, [sp, #32]
 800e55a:	4418      	add	r0, r3
 800e55c:	f010 001f 	ands.w	r0, r0, #31
 800e560:	d077      	beq.n	800e652 <_dtoa_r+0x8f2>
 800e562:	f1c0 0320 	rsb	r3, r0, #32
 800e566:	2b04      	cmp	r3, #4
 800e568:	dd6b      	ble.n	800e642 <_dtoa_r+0x8e2>
 800e56a:	9b08      	ldr	r3, [sp, #32]
 800e56c:	f1c0 001c 	rsb	r0, r0, #28
 800e570:	4403      	add	r3, r0
 800e572:	4480      	add	r8, r0
 800e574:	4406      	add	r6, r0
 800e576:	9308      	str	r3, [sp, #32]
 800e578:	f1b8 0f00 	cmp.w	r8, #0
 800e57c:	dd05      	ble.n	800e58a <_dtoa_r+0x82a>
 800e57e:	4649      	mov	r1, r9
 800e580:	4642      	mov	r2, r8
 800e582:	4658      	mov	r0, fp
 800e584:	f000 fcbe 	bl	800ef04 <__lshift>
 800e588:	4681      	mov	r9, r0
 800e58a:	9b08      	ldr	r3, [sp, #32]
 800e58c:	2b00      	cmp	r3, #0
 800e58e:	dd05      	ble.n	800e59c <_dtoa_r+0x83c>
 800e590:	4621      	mov	r1, r4
 800e592:	461a      	mov	r2, r3
 800e594:	4658      	mov	r0, fp
 800e596:	f000 fcb5 	bl	800ef04 <__lshift>
 800e59a:	4604      	mov	r4, r0
 800e59c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800e59e:	2b00      	cmp	r3, #0
 800e5a0:	d059      	beq.n	800e656 <_dtoa_r+0x8f6>
 800e5a2:	4621      	mov	r1, r4
 800e5a4:	4648      	mov	r0, r9
 800e5a6:	f000 fd19 	bl	800efdc <__mcmp>
 800e5aa:	2800      	cmp	r0, #0
 800e5ac:	da53      	bge.n	800e656 <_dtoa_r+0x8f6>
 800e5ae:	1e7b      	subs	r3, r7, #1
 800e5b0:	9304      	str	r3, [sp, #16]
 800e5b2:	4649      	mov	r1, r9
 800e5b4:	2300      	movs	r3, #0
 800e5b6:	220a      	movs	r2, #10
 800e5b8:	4658      	mov	r0, fp
 800e5ba:	f000 faf7 	bl	800ebac <__multadd>
 800e5be:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e5c0:	4681      	mov	r9, r0
 800e5c2:	2b00      	cmp	r3, #0
 800e5c4:	f000 8172 	beq.w	800e8ac <_dtoa_r+0xb4c>
 800e5c8:	2300      	movs	r3, #0
 800e5ca:	4629      	mov	r1, r5
 800e5cc:	220a      	movs	r2, #10
 800e5ce:	4658      	mov	r0, fp
 800e5d0:	f000 faec 	bl	800ebac <__multadd>
 800e5d4:	9b00      	ldr	r3, [sp, #0]
 800e5d6:	2b00      	cmp	r3, #0
 800e5d8:	4605      	mov	r5, r0
 800e5da:	dc67      	bgt.n	800e6ac <_dtoa_r+0x94c>
 800e5dc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e5de:	2b02      	cmp	r3, #2
 800e5e0:	dc41      	bgt.n	800e666 <_dtoa_r+0x906>
 800e5e2:	e063      	b.n	800e6ac <_dtoa_r+0x94c>
 800e5e4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800e5e6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800e5ea:	e746      	b.n	800e47a <_dtoa_r+0x71a>
 800e5ec:	9b07      	ldr	r3, [sp, #28]
 800e5ee:	1e5c      	subs	r4, r3, #1
 800e5f0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e5f2:	42a3      	cmp	r3, r4
 800e5f4:	bfbf      	itttt	lt
 800e5f6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800e5f8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800e5fa:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800e5fc:	1ae3      	sublt	r3, r4, r3
 800e5fe:	bfb4      	ite	lt
 800e600:	18d2      	addlt	r2, r2, r3
 800e602:	1b1c      	subge	r4, r3, r4
 800e604:	9b07      	ldr	r3, [sp, #28]
 800e606:	bfbc      	itt	lt
 800e608:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800e60a:	2400      	movlt	r4, #0
 800e60c:	2b00      	cmp	r3, #0
 800e60e:	bfb5      	itete	lt
 800e610:	eba8 0603 	sublt.w	r6, r8, r3
 800e614:	9b07      	ldrge	r3, [sp, #28]
 800e616:	2300      	movlt	r3, #0
 800e618:	4646      	movge	r6, r8
 800e61a:	e730      	b.n	800e47e <_dtoa_r+0x71e>
 800e61c:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800e61e:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800e620:	4646      	mov	r6, r8
 800e622:	e735      	b.n	800e490 <_dtoa_r+0x730>
 800e624:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800e626:	e75c      	b.n	800e4e2 <_dtoa_r+0x782>
 800e628:	2300      	movs	r3, #0
 800e62a:	e788      	b.n	800e53e <_dtoa_r+0x7de>
 800e62c:	3fe00000 	.word	0x3fe00000
 800e630:	40240000 	.word	0x40240000
 800e634:	40140000 	.word	0x40140000
 800e638:	9b02      	ldr	r3, [sp, #8]
 800e63a:	e780      	b.n	800e53e <_dtoa_r+0x7de>
 800e63c:	2300      	movs	r3, #0
 800e63e:	930a      	str	r3, [sp, #40]	@ 0x28
 800e640:	e782      	b.n	800e548 <_dtoa_r+0x7e8>
 800e642:	d099      	beq.n	800e578 <_dtoa_r+0x818>
 800e644:	9a08      	ldr	r2, [sp, #32]
 800e646:	331c      	adds	r3, #28
 800e648:	441a      	add	r2, r3
 800e64a:	4498      	add	r8, r3
 800e64c:	441e      	add	r6, r3
 800e64e:	9208      	str	r2, [sp, #32]
 800e650:	e792      	b.n	800e578 <_dtoa_r+0x818>
 800e652:	4603      	mov	r3, r0
 800e654:	e7f6      	b.n	800e644 <_dtoa_r+0x8e4>
 800e656:	9b07      	ldr	r3, [sp, #28]
 800e658:	9704      	str	r7, [sp, #16]
 800e65a:	2b00      	cmp	r3, #0
 800e65c:	dc20      	bgt.n	800e6a0 <_dtoa_r+0x940>
 800e65e:	9300      	str	r3, [sp, #0]
 800e660:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e662:	2b02      	cmp	r3, #2
 800e664:	dd1e      	ble.n	800e6a4 <_dtoa_r+0x944>
 800e666:	9b00      	ldr	r3, [sp, #0]
 800e668:	2b00      	cmp	r3, #0
 800e66a:	f47f aec0 	bne.w	800e3ee <_dtoa_r+0x68e>
 800e66e:	4621      	mov	r1, r4
 800e670:	2205      	movs	r2, #5
 800e672:	4658      	mov	r0, fp
 800e674:	f000 fa9a 	bl	800ebac <__multadd>
 800e678:	4601      	mov	r1, r0
 800e67a:	4604      	mov	r4, r0
 800e67c:	4648      	mov	r0, r9
 800e67e:	f000 fcad 	bl	800efdc <__mcmp>
 800e682:	2800      	cmp	r0, #0
 800e684:	f77f aeb3 	ble.w	800e3ee <_dtoa_r+0x68e>
 800e688:	4656      	mov	r6, sl
 800e68a:	2331      	movs	r3, #49	@ 0x31
 800e68c:	f806 3b01 	strb.w	r3, [r6], #1
 800e690:	9b04      	ldr	r3, [sp, #16]
 800e692:	3301      	adds	r3, #1
 800e694:	9304      	str	r3, [sp, #16]
 800e696:	e6ae      	b.n	800e3f6 <_dtoa_r+0x696>
 800e698:	9c07      	ldr	r4, [sp, #28]
 800e69a:	9704      	str	r7, [sp, #16]
 800e69c:	4625      	mov	r5, r4
 800e69e:	e7f3      	b.n	800e688 <_dtoa_r+0x928>
 800e6a0:	9b07      	ldr	r3, [sp, #28]
 800e6a2:	9300      	str	r3, [sp, #0]
 800e6a4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e6a6:	2b00      	cmp	r3, #0
 800e6a8:	f000 8104 	beq.w	800e8b4 <_dtoa_r+0xb54>
 800e6ac:	2e00      	cmp	r6, #0
 800e6ae:	dd05      	ble.n	800e6bc <_dtoa_r+0x95c>
 800e6b0:	4629      	mov	r1, r5
 800e6b2:	4632      	mov	r2, r6
 800e6b4:	4658      	mov	r0, fp
 800e6b6:	f000 fc25 	bl	800ef04 <__lshift>
 800e6ba:	4605      	mov	r5, r0
 800e6bc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e6be:	2b00      	cmp	r3, #0
 800e6c0:	d05a      	beq.n	800e778 <_dtoa_r+0xa18>
 800e6c2:	6869      	ldr	r1, [r5, #4]
 800e6c4:	4658      	mov	r0, fp
 800e6c6:	f000 fa0f 	bl	800eae8 <_Balloc>
 800e6ca:	4606      	mov	r6, r0
 800e6cc:	b928      	cbnz	r0, 800e6da <_dtoa_r+0x97a>
 800e6ce:	4b84      	ldr	r3, [pc, #528]	@ (800e8e0 <_dtoa_r+0xb80>)
 800e6d0:	4602      	mov	r2, r0
 800e6d2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800e6d6:	f7ff bb5a 	b.w	800dd8e <_dtoa_r+0x2e>
 800e6da:	692a      	ldr	r2, [r5, #16]
 800e6dc:	3202      	adds	r2, #2
 800e6de:	0092      	lsls	r2, r2, #2
 800e6e0:	f105 010c 	add.w	r1, r5, #12
 800e6e4:	300c      	adds	r0, #12
 800e6e6:	f7ff faa2 	bl	800dc2e <memcpy>
 800e6ea:	2201      	movs	r2, #1
 800e6ec:	4631      	mov	r1, r6
 800e6ee:	4658      	mov	r0, fp
 800e6f0:	f000 fc08 	bl	800ef04 <__lshift>
 800e6f4:	f10a 0301 	add.w	r3, sl, #1
 800e6f8:	9307      	str	r3, [sp, #28]
 800e6fa:	9b00      	ldr	r3, [sp, #0]
 800e6fc:	4453      	add	r3, sl
 800e6fe:	930b      	str	r3, [sp, #44]	@ 0x2c
 800e700:	9b02      	ldr	r3, [sp, #8]
 800e702:	f003 0301 	and.w	r3, r3, #1
 800e706:	462f      	mov	r7, r5
 800e708:	930a      	str	r3, [sp, #40]	@ 0x28
 800e70a:	4605      	mov	r5, r0
 800e70c:	9b07      	ldr	r3, [sp, #28]
 800e70e:	4621      	mov	r1, r4
 800e710:	3b01      	subs	r3, #1
 800e712:	4648      	mov	r0, r9
 800e714:	9300      	str	r3, [sp, #0]
 800e716:	f7ff fa98 	bl	800dc4a <quorem>
 800e71a:	4639      	mov	r1, r7
 800e71c:	9002      	str	r0, [sp, #8]
 800e71e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800e722:	4648      	mov	r0, r9
 800e724:	f000 fc5a 	bl	800efdc <__mcmp>
 800e728:	462a      	mov	r2, r5
 800e72a:	9008      	str	r0, [sp, #32]
 800e72c:	4621      	mov	r1, r4
 800e72e:	4658      	mov	r0, fp
 800e730:	f000 fc70 	bl	800f014 <__mdiff>
 800e734:	68c2      	ldr	r2, [r0, #12]
 800e736:	4606      	mov	r6, r0
 800e738:	bb02      	cbnz	r2, 800e77c <_dtoa_r+0xa1c>
 800e73a:	4601      	mov	r1, r0
 800e73c:	4648      	mov	r0, r9
 800e73e:	f000 fc4d 	bl	800efdc <__mcmp>
 800e742:	4602      	mov	r2, r0
 800e744:	4631      	mov	r1, r6
 800e746:	4658      	mov	r0, fp
 800e748:	920e      	str	r2, [sp, #56]	@ 0x38
 800e74a:	f000 fa0d 	bl	800eb68 <_Bfree>
 800e74e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e750:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800e752:	9e07      	ldr	r6, [sp, #28]
 800e754:	ea43 0102 	orr.w	r1, r3, r2
 800e758:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800e75a:	4319      	orrs	r1, r3
 800e75c:	d110      	bne.n	800e780 <_dtoa_r+0xa20>
 800e75e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800e762:	d029      	beq.n	800e7b8 <_dtoa_r+0xa58>
 800e764:	9b08      	ldr	r3, [sp, #32]
 800e766:	2b00      	cmp	r3, #0
 800e768:	dd02      	ble.n	800e770 <_dtoa_r+0xa10>
 800e76a:	9b02      	ldr	r3, [sp, #8]
 800e76c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800e770:	9b00      	ldr	r3, [sp, #0]
 800e772:	f883 8000 	strb.w	r8, [r3]
 800e776:	e63f      	b.n	800e3f8 <_dtoa_r+0x698>
 800e778:	4628      	mov	r0, r5
 800e77a:	e7bb      	b.n	800e6f4 <_dtoa_r+0x994>
 800e77c:	2201      	movs	r2, #1
 800e77e:	e7e1      	b.n	800e744 <_dtoa_r+0x9e4>
 800e780:	9b08      	ldr	r3, [sp, #32]
 800e782:	2b00      	cmp	r3, #0
 800e784:	db04      	blt.n	800e790 <_dtoa_r+0xa30>
 800e786:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800e788:	430b      	orrs	r3, r1
 800e78a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800e78c:	430b      	orrs	r3, r1
 800e78e:	d120      	bne.n	800e7d2 <_dtoa_r+0xa72>
 800e790:	2a00      	cmp	r2, #0
 800e792:	dded      	ble.n	800e770 <_dtoa_r+0xa10>
 800e794:	4649      	mov	r1, r9
 800e796:	2201      	movs	r2, #1
 800e798:	4658      	mov	r0, fp
 800e79a:	f000 fbb3 	bl	800ef04 <__lshift>
 800e79e:	4621      	mov	r1, r4
 800e7a0:	4681      	mov	r9, r0
 800e7a2:	f000 fc1b 	bl	800efdc <__mcmp>
 800e7a6:	2800      	cmp	r0, #0
 800e7a8:	dc03      	bgt.n	800e7b2 <_dtoa_r+0xa52>
 800e7aa:	d1e1      	bne.n	800e770 <_dtoa_r+0xa10>
 800e7ac:	f018 0f01 	tst.w	r8, #1
 800e7b0:	d0de      	beq.n	800e770 <_dtoa_r+0xa10>
 800e7b2:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800e7b6:	d1d8      	bne.n	800e76a <_dtoa_r+0xa0a>
 800e7b8:	9a00      	ldr	r2, [sp, #0]
 800e7ba:	2339      	movs	r3, #57	@ 0x39
 800e7bc:	7013      	strb	r3, [r2, #0]
 800e7be:	4633      	mov	r3, r6
 800e7c0:	461e      	mov	r6, r3
 800e7c2:	3b01      	subs	r3, #1
 800e7c4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800e7c8:	2a39      	cmp	r2, #57	@ 0x39
 800e7ca:	d052      	beq.n	800e872 <_dtoa_r+0xb12>
 800e7cc:	3201      	adds	r2, #1
 800e7ce:	701a      	strb	r2, [r3, #0]
 800e7d0:	e612      	b.n	800e3f8 <_dtoa_r+0x698>
 800e7d2:	2a00      	cmp	r2, #0
 800e7d4:	dd07      	ble.n	800e7e6 <_dtoa_r+0xa86>
 800e7d6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800e7da:	d0ed      	beq.n	800e7b8 <_dtoa_r+0xa58>
 800e7dc:	9a00      	ldr	r2, [sp, #0]
 800e7de:	f108 0301 	add.w	r3, r8, #1
 800e7e2:	7013      	strb	r3, [r2, #0]
 800e7e4:	e608      	b.n	800e3f8 <_dtoa_r+0x698>
 800e7e6:	9b07      	ldr	r3, [sp, #28]
 800e7e8:	9a07      	ldr	r2, [sp, #28]
 800e7ea:	f803 8c01 	strb.w	r8, [r3, #-1]
 800e7ee:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800e7f0:	4293      	cmp	r3, r2
 800e7f2:	d028      	beq.n	800e846 <_dtoa_r+0xae6>
 800e7f4:	4649      	mov	r1, r9
 800e7f6:	2300      	movs	r3, #0
 800e7f8:	220a      	movs	r2, #10
 800e7fa:	4658      	mov	r0, fp
 800e7fc:	f000 f9d6 	bl	800ebac <__multadd>
 800e800:	42af      	cmp	r7, r5
 800e802:	4681      	mov	r9, r0
 800e804:	f04f 0300 	mov.w	r3, #0
 800e808:	f04f 020a 	mov.w	r2, #10
 800e80c:	4639      	mov	r1, r7
 800e80e:	4658      	mov	r0, fp
 800e810:	d107      	bne.n	800e822 <_dtoa_r+0xac2>
 800e812:	f000 f9cb 	bl	800ebac <__multadd>
 800e816:	4607      	mov	r7, r0
 800e818:	4605      	mov	r5, r0
 800e81a:	9b07      	ldr	r3, [sp, #28]
 800e81c:	3301      	adds	r3, #1
 800e81e:	9307      	str	r3, [sp, #28]
 800e820:	e774      	b.n	800e70c <_dtoa_r+0x9ac>
 800e822:	f000 f9c3 	bl	800ebac <__multadd>
 800e826:	4629      	mov	r1, r5
 800e828:	4607      	mov	r7, r0
 800e82a:	2300      	movs	r3, #0
 800e82c:	220a      	movs	r2, #10
 800e82e:	4658      	mov	r0, fp
 800e830:	f000 f9bc 	bl	800ebac <__multadd>
 800e834:	4605      	mov	r5, r0
 800e836:	e7f0      	b.n	800e81a <_dtoa_r+0xaba>
 800e838:	9b00      	ldr	r3, [sp, #0]
 800e83a:	2b00      	cmp	r3, #0
 800e83c:	bfcc      	ite	gt
 800e83e:	461e      	movgt	r6, r3
 800e840:	2601      	movle	r6, #1
 800e842:	4456      	add	r6, sl
 800e844:	2700      	movs	r7, #0
 800e846:	4649      	mov	r1, r9
 800e848:	2201      	movs	r2, #1
 800e84a:	4658      	mov	r0, fp
 800e84c:	f000 fb5a 	bl	800ef04 <__lshift>
 800e850:	4621      	mov	r1, r4
 800e852:	4681      	mov	r9, r0
 800e854:	f000 fbc2 	bl	800efdc <__mcmp>
 800e858:	2800      	cmp	r0, #0
 800e85a:	dcb0      	bgt.n	800e7be <_dtoa_r+0xa5e>
 800e85c:	d102      	bne.n	800e864 <_dtoa_r+0xb04>
 800e85e:	f018 0f01 	tst.w	r8, #1
 800e862:	d1ac      	bne.n	800e7be <_dtoa_r+0xa5e>
 800e864:	4633      	mov	r3, r6
 800e866:	461e      	mov	r6, r3
 800e868:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800e86c:	2a30      	cmp	r2, #48	@ 0x30
 800e86e:	d0fa      	beq.n	800e866 <_dtoa_r+0xb06>
 800e870:	e5c2      	b.n	800e3f8 <_dtoa_r+0x698>
 800e872:	459a      	cmp	sl, r3
 800e874:	d1a4      	bne.n	800e7c0 <_dtoa_r+0xa60>
 800e876:	9b04      	ldr	r3, [sp, #16]
 800e878:	3301      	adds	r3, #1
 800e87a:	9304      	str	r3, [sp, #16]
 800e87c:	2331      	movs	r3, #49	@ 0x31
 800e87e:	f88a 3000 	strb.w	r3, [sl]
 800e882:	e5b9      	b.n	800e3f8 <_dtoa_r+0x698>
 800e884:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800e886:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800e8e4 <_dtoa_r+0xb84>
 800e88a:	b11b      	cbz	r3, 800e894 <_dtoa_r+0xb34>
 800e88c:	f10a 0308 	add.w	r3, sl, #8
 800e890:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800e892:	6013      	str	r3, [r2, #0]
 800e894:	4650      	mov	r0, sl
 800e896:	b019      	add	sp, #100	@ 0x64
 800e898:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e89c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800e89e:	2b01      	cmp	r3, #1
 800e8a0:	f77f ae37 	ble.w	800e512 <_dtoa_r+0x7b2>
 800e8a4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800e8a6:	930a      	str	r3, [sp, #40]	@ 0x28
 800e8a8:	2001      	movs	r0, #1
 800e8aa:	e655      	b.n	800e558 <_dtoa_r+0x7f8>
 800e8ac:	9b00      	ldr	r3, [sp, #0]
 800e8ae:	2b00      	cmp	r3, #0
 800e8b0:	f77f aed6 	ble.w	800e660 <_dtoa_r+0x900>
 800e8b4:	4656      	mov	r6, sl
 800e8b6:	4621      	mov	r1, r4
 800e8b8:	4648      	mov	r0, r9
 800e8ba:	f7ff f9c6 	bl	800dc4a <quorem>
 800e8be:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800e8c2:	f806 8b01 	strb.w	r8, [r6], #1
 800e8c6:	9b00      	ldr	r3, [sp, #0]
 800e8c8:	eba6 020a 	sub.w	r2, r6, sl
 800e8cc:	4293      	cmp	r3, r2
 800e8ce:	ddb3      	ble.n	800e838 <_dtoa_r+0xad8>
 800e8d0:	4649      	mov	r1, r9
 800e8d2:	2300      	movs	r3, #0
 800e8d4:	220a      	movs	r2, #10
 800e8d6:	4658      	mov	r0, fp
 800e8d8:	f000 f968 	bl	800ebac <__multadd>
 800e8dc:	4681      	mov	r9, r0
 800e8de:	e7ea      	b.n	800e8b6 <_dtoa_r+0xb56>
 800e8e0:	08010e7c 	.word	0x08010e7c
 800e8e4:	08010e00 	.word	0x08010e00

0800e8e8 <_free_r>:
 800e8e8:	b538      	push	{r3, r4, r5, lr}
 800e8ea:	4605      	mov	r5, r0
 800e8ec:	2900      	cmp	r1, #0
 800e8ee:	d041      	beq.n	800e974 <_free_r+0x8c>
 800e8f0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e8f4:	1f0c      	subs	r4, r1, #4
 800e8f6:	2b00      	cmp	r3, #0
 800e8f8:	bfb8      	it	lt
 800e8fa:	18e4      	addlt	r4, r4, r3
 800e8fc:	f000 f8e8 	bl	800ead0 <__malloc_lock>
 800e900:	4a1d      	ldr	r2, [pc, #116]	@ (800e978 <_free_r+0x90>)
 800e902:	6813      	ldr	r3, [r2, #0]
 800e904:	b933      	cbnz	r3, 800e914 <_free_r+0x2c>
 800e906:	6063      	str	r3, [r4, #4]
 800e908:	6014      	str	r4, [r2, #0]
 800e90a:	4628      	mov	r0, r5
 800e90c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e910:	f000 b8e4 	b.w	800eadc <__malloc_unlock>
 800e914:	42a3      	cmp	r3, r4
 800e916:	d908      	bls.n	800e92a <_free_r+0x42>
 800e918:	6820      	ldr	r0, [r4, #0]
 800e91a:	1821      	adds	r1, r4, r0
 800e91c:	428b      	cmp	r3, r1
 800e91e:	bf01      	itttt	eq
 800e920:	6819      	ldreq	r1, [r3, #0]
 800e922:	685b      	ldreq	r3, [r3, #4]
 800e924:	1809      	addeq	r1, r1, r0
 800e926:	6021      	streq	r1, [r4, #0]
 800e928:	e7ed      	b.n	800e906 <_free_r+0x1e>
 800e92a:	461a      	mov	r2, r3
 800e92c:	685b      	ldr	r3, [r3, #4]
 800e92e:	b10b      	cbz	r3, 800e934 <_free_r+0x4c>
 800e930:	42a3      	cmp	r3, r4
 800e932:	d9fa      	bls.n	800e92a <_free_r+0x42>
 800e934:	6811      	ldr	r1, [r2, #0]
 800e936:	1850      	adds	r0, r2, r1
 800e938:	42a0      	cmp	r0, r4
 800e93a:	d10b      	bne.n	800e954 <_free_r+0x6c>
 800e93c:	6820      	ldr	r0, [r4, #0]
 800e93e:	4401      	add	r1, r0
 800e940:	1850      	adds	r0, r2, r1
 800e942:	4283      	cmp	r3, r0
 800e944:	6011      	str	r1, [r2, #0]
 800e946:	d1e0      	bne.n	800e90a <_free_r+0x22>
 800e948:	6818      	ldr	r0, [r3, #0]
 800e94a:	685b      	ldr	r3, [r3, #4]
 800e94c:	6053      	str	r3, [r2, #4]
 800e94e:	4408      	add	r0, r1
 800e950:	6010      	str	r0, [r2, #0]
 800e952:	e7da      	b.n	800e90a <_free_r+0x22>
 800e954:	d902      	bls.n	800e95c <_free_r+0x74>
 800e956:	230c      	movs	r3, #12
 800e958:	602b      	str	r3, [r5, #0]
 800e95a:	e7d6      	b.n	800e90a <_free_r+0x22>
 800e95c:	6820      	ldr	r0, [r4, #0]
 800e95e:	1821      	adds	r1, r4, r0
 800e960:	428b      	cmp	r3, r1
 800e962:	bf04      	itt	eq
 800e964:	6819      	ldreq	r1, [r3, #0]
 800e966:	685b      	ldreq	r3, [r3, #4]
 800e968:	6063      	str	r3, [r4, #4]
 800e96a:	bf04      	itt	eq
 800e96c:	1809      	addeq	r1, r1, r0
 800e96e:	6021      	streq	r1, [r4, #0]
 800e970:	6054      	str	r4, [r2, #4]
 800e972:	e7ca      	b.n	800e90a <_free_r+0x22>
 800e974:	bd38      	pop	{r3, r4, r5, pc}
 800e976:	bf00      	nop
 800e978:	200051c8 	.word	0x200051c8

0800e97c <malloc>:
 800e97c:	4b02      	ldr	r3, [pc, #8]	@ (800e988 <malloc+0xc>)
 800e97e:	4601      	mov	r1, r0
 800e980:	6818      	ldr	r0, [r3, #0]
 800e982:	f000 b825 	b.w	800e9d0 <_malloc_r>
 800e986:	bf00      	nop
 800e988:	20000028 	.word	0x20000028

0800e98c <sbrk_aligned>:
 800e98c:	b570      	push	{r4, r5, r6, lr}
 800e98e:	4e0f      	ldr	r6, [pc, #60]	@ (800e9cc <sbrk_aligned+0x40>)
 800e990:	460c      	mov	r4, r1
 800e992:	6831      	ldr	r1, [r6, #0]
 800e994:	4605      	mov	r5, r0
 800e996:	b911      	cbnz	r1, 800e99e <sbrk_aligned+0x12>
 800e998:	f001 f80c 	bl	800f9b4 <_sbrk_r>
 800e99c:	6030      	str	r0, [r6, #0]
 800e99e:	4621      	mov	r1, r4
 800e9a0:	4628      	mov	r0, r5
 800e9a2:	f001 f807 	bl	800f9b4 <_sbrk_r>
 800e9a6:	1c43      	adds	r3, r0, #1
 800e9a8:	d103      	bne.n	800e9b2 <sbrk_aligned+0x26>
 800e9aa:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800e9ae:	4620      	mov	r0, r4
 800e9b0:	bd70      	pop	{r4, r5, r6, pc}
 800e9b2:	1cc4      	adds	r4, r0, #3
 800e9b4:	f024 0403 	bic.w	r4, r4, #3
 800e9b8:	42a0      	cmp	r0, r4
 800e9ba:	d0f8      	beq.n	800e9ae <sbrk_aligned+0x22>
 800e9bc:	1a21      	subs	r1, r4, r0
 800e9be:	4628      	mov	r0, r5
 800e9c0:	f000 fff8 	bl	800f9b4 <_sbrk_r>
 800e9c4:	3001      	adds	r0, #1
 800e9c6:	d1f2      	bne.n	800e9ae <sbrk_aligned+0x22>
 800e9c8:	e7ef      	b.n	800e9aa <sbrk_aligned+0x1e>
 800e9ca:	bf00      	nop
 800e9cc:	200051c4 	.word	0x200051c4

0800e9d0 <_malloc_r>:
 800e9d0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e9d4:	1ccd      	adds	r5, r1, #3
 800e9d6:	f025 0503 	bic.w	r5, r5, #3
 800e9da:	3508      	adds	r5, #8
 800e9dc:	2d0c      	cmp	r5, #12
 800e9de:	bf38      	it	cc
 800e9e0:	250c      	movcc	r5, #12
 800e9e2:	2d00      	cmp	r5, #0
 800e9e4:	4606      	mov	r6, r0
 800e9e6:	db01      	blt.n	800e9ec <_malloc_r+0x1c>
 800e9e8:	42a9      	cmp	r1, r5
 800e9ea:	d904      	bls.n	800e9f6 <_malloc_r+0x26>
 800e9ec:	230c      	movs	r3, #12
 800e9ee:	6033      	str	r3, [r6, #0]
 800e9f0:	2000      	movs	r0, #0
 800e9f2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e9f6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800eacc <_malloc_r+0xfc>
 800e9fa:	f000 f869 	bl	800ead0 <__malloc_lock>
 800e9fe:	f8d8 3000 	ldr.w	r3, [r8]
 800ea02:	461c      	mov	r4, r3
 800ea04:	bb44      	cbnz	r4, 800ea58 <_malloc_r+0x88>
 800ea06:	4629      	mov	r1, r5
 800ea08:	4630      	mov	r0, r6
 800ea0a:	f7ff ffbf 	bl	800e98c <sbrk_aligned>
 800ea0e:	1c43      	adds	r3, r0, #1
 800ea10:	4604      	mov	r4, r0
 800ea12:	d158      	bne.n	800eac6 <_malloc_r+0xf6>
 800ea14:	f8d8 4000 	ldr.w	r4, [r8]
 800ea18:	4627      	mov	r7, r4
 800ea1a:	2f00      	cmp	r7, #0
 800ea1c:	d143      	bne.n	800eaa6 <_malloc_r+0xd6>
 800ea1e:	2c00      	cmp	r4, #0
 800ea20:	d04b      	beq.n	800eaba <_malloc_r+0xea>
 800ea22:	6823      	ldr	r3, [r4, #0]
 800ea24:	4639      	mov	r1, r7
 800ea26:	4630      	mov	r0, r6
 800ea28:	eb04 0903 	add.w	r9, r4, r3
 800ea2c:	f000 ffc2 	bl	800f9b4 <_sbrk_r>
 800ea30:	4581      	cmp	r9, r0
 800ea32:	d142      	bne.n	800eaba <_malloc_r+0xea>
 800ea34:	6821      	ldr	r1, [r4, #0]
 800ea36:	1a6d      	subs	r5, r5, r1
 800ea38:	4629      	mov	r1, r5
 800ea3a:	4630      	mov	r0, r6
 800ea3c:	f7ff ffa6 	bl	800e98c <sbrk_aligned>
 800ea40:	3001      	adds	r0, #1
 800ea42:	d03a      	beq.n	800eaba <_malloc_r+0xea>
 800ea44:	6823      	ldr	r3, [r4, #0]
 800ea46:	442b      	add	r3, r5
 800ea48:	6023      	str	r3, [r4, #0]
 800ea4a:	f8d8 3000 	ldr.w	r3, [r8]
 800ea4e:	685a      	ldr	r2, [r3, #4]
 800ea50:	bb62      	cbnz	r2, 800eaac <_malloc_r+0xdc>
 800ea52:	f8c8 7000 	str.w	r7, [r8]
 800ea56:	e00f      	b.n	800ea78 <_malloc_r+0xa8>
 800ea58:	6822      	ldr	r2, [r4, #0]
 800ea5a:	1b52      	subs	r2, r2, r5
 800ea5c:	d420      	bmi.n	800eaa0 <_malloc_r+0xd0>
 800ea5e:	2a0b      	cmp	r2, #11
 800ea60:	d917      	bls.n	800ea92 <_malloc_r+0xc2>
 800ea62:	1961      	adds	r1, r4, r5
 800ea64:	42a3      	cmp	r3, r4
 800ea66:	6025      	str	r5, [r4, #0]
 800ea68:	bf18      	it	ne
 800ea6a:	6059      	strne	r1, [r3, #4]
 800ea6c:	6863      	ldr	r3, [r4, #4]
 800ea6e:	bf08      	it	eq
 800ea70:	f8c8 1000 	streq.w	r1, [r8]
 800ea74:	5162      	str	r2, [r4, r5]
 800ea76:	604b      	str	r3, [r1, #4]
 800ea78:	4630      	mov	r0, r6
 800ea7a:	f000 f82f 	bl	800eadc <__malloc_unlock>
 800ea7e:	f104 000b 	add.w	r0, r4, #11
 800ea82:	1d23      	adds	r3, r4, #4
 800ea84:	f020 0007 	bic.w	r0, r0, #7
 800ea88:	1ac2      	subs	r2, r0, r3
 800ea8a:	bf1c      	itt	ne
 800ea8c:	1a1b      	subne	r3, r3, r0
 800ea8e:	50a3      	strne	r3, [r4, r2]
 800ea90:	e7af      	b.n	800e9f2 <_malloc_r+0x22>
 800ea92:	6862      	ldr	r2, [r4, #4]
 800ea94:	42a3      	cmp	r3, r4
 800ea96:	bf0c      	ite	eq
 800ea98:	f8c8 2000 	streq.w	r2, [r8]
 800ea9c:	605a      	strne	r2, [r3, #4]
 800ea9e:	e7eb      	b.n	800ea78 <_malloc_r+0xa8>
 800eaa0:	4623      	mov	r3, r4
 800eaa2:	6864      	ldr	r4, [r4, #4]
 800eaa4:	e7ae      	b.n	800ea04 <_malloc_r+0x34>
 800eaa6:	463c      	mov	r4, r7
 800eaa8:	687f      	ldr	r7, [r7, #4]
 800eaaa:	e7b6      	b.n	800ea1a <_malloc_r+0x4a>
 800eaac:	461a      	mov	r2, r3
 800eaae:	685b      	ldr	r3, [r3, #4]
 800eab0:	42a3      	cmp	r3, r4
 800eab2:	d1fb      	bne.n	800eaac <_malloc_r+0xdc>
 800eab4:	2300      	movs	r3, #0
 800eab6:	6053      	str	r3, [r2, #4]
 800eab8:	e7de      	b.n	800ea78 <_malloc_r+0xa8>
 800eaba:	230c      	movs	r3, #12
 800eabc:	6033      	str	r3, [r6, #0]
 800eabe:	4630      	mov	r0, r6
 800eac0:	f000 f80c 	bl	800eadc <__malloc_unlock>
 800eac4:	e794      	b.n	800e9f0 <_malloc_r+0x20>
 800eac6:	6005      	str	r5, [r0, #0]
 800eac8:	e7d6      	b.n	800ea78 <_malloc_r+0xa8>
 800eaca:	bf00      	nop
 800eacc:	200051c8 	.word	0x200051c8

0800ead0 <__malloc_lock>:
 800ead0:	4801      	ldr	r0, [pc, #4]	@ (800ead8 <__malloc_lock+0x8>)
 800ead2:	f7ff b8aa 	b.w	800dc2a <__retarget_lock_acquire_recursive>
 800ead6:	bf00      	nop
 800ead8:	200051c0 	.word	0x200051c0

0800eadc <__malloc_unlock>:
 800eadc:	4801      	ldr	r0, [pc, #4]	@ (800eae4 <__malloc_unlock+0x8>)
 800eade:	f7ff b8a5 	b.w	800dc2c <__retarget_lock_release_recursive>
 800eae2:	bf00      	nop
 800eae4:	200051c0 	.word	0x200051c0

0800eae8 <_Balloc>:
 800eae8:	b570      	push	{r4, r5, r6, lr}
 800eaea:	69c6      	ldr	r6, [r0, #28]
 800eaec:	4604      	mov	r4, r0
 800eaee:	460d      	mov	r5, r1
 800eaf0:	b976      	cbnz	r6, 800eb10 <_Balloc+0x28>
 800eaf2:	2010      	movs	r0, #16
 800eaf4:	f7ff ff42 	bl	800e97c <malloc>
 800eaf8:	4602      	mov	r2, r0
 800eafa:	61e0      	str	r0, [r4, #28]
 800eafc:	b920      	cbnz	r0, 800eb08 <_Balloc+0x20>
 800eafe:	4b18      	ldr	r3, [pc, #96]	@ (800eb60 <_Balloc+0x78>)
 800eb00:	4818      	ldr	r0, [pc, #96]	@ (800eb64 <_Balloc+0x7c>)
 800eb02:	216b      	movs	r1, #107	@ 0x6b
 800eb04:	f000 ff66 	bl	800f9d4 <__assert_func>
 800eb08:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800eb0c:	6006      	str	r6, [r0, #0]
 800eb0e:	60c6      	str	r6, [r0, #12]
 800eb10:	69e6      	ldr	r6, [r4, #28]
 800eb12:	68f3      	ldr	r3, [r6, #12]
 800eb14:	b183      	cbz	r3, 800eb38 <_Balloc+0x50>
 800eb16:	69e3      	ldr	r3, [r4, #28]
 800eb18:	68db      	ldr	r3, [r3, #12]
 800eb1a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800eb1e:	b9b8      	cbnz	r0, 800eb50 <_Balloc+0x68>
 800eb20:	2101      	movs	r1, #1
 800eb22:	fa01 f605 	lsl.w	r6, r1, r5
 800eb26:	1d72      	adds	r2, r6, #5
 800eb28:	0092      	lsls	r2, r2, #2
 800eb2a:	4620      	mov	r0, r4
 800eb2c:	f000 ff70 	bl	800fa10 <_calloc_r>
 800eb30:	b160      	cbz	r0, 800eb4c <_Balloc+0x64>
 800eb32:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800eb36:	e00e      	b.n	800eb56 <_Balloc+0x6e>
 800eb38:	2221      	movs	r2, #33	@ 0x21
 800eb3a:	2104      	movs	r1, #4
 800eb3c:	4620      	mov	r0, r4
 800eb3e:	f000 ff67 	bl	800fa10 <_calloc_r>
 800eb42:	69e3      	ldr	r3, [r4, #28]
 800eb44:	60f0      	str	r0, [r6, #12]
 800eb46:	68db      	ldr	r3, [r3, #12]
 800eb48:	2b00      	cmp	r3, #0
 800eb4a:	d1e4      	bne.n	800eb16 <_Balloc+0x2e>
 800eb4c:	2000      	movs	r0, #0
 800eb4e:	bd70      	pop	{r4, r5, r6, pc}
 800eb50:	6802      	ldr	r2, [r0, #0]
 800eb52:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800eb56:	2300      	movs	r3, #0
 800eb58:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800eb5c:	e7f7      	b.n	800eb4e <_Balloc+0x66>
 800eb5e:	bf00      	nop
 800eb60:	08010e0d 	.word	0x08010e0d
 800eb64:	08010e8d 	.word	0x08010e8d

0800eb68 <_Bfree>:
 800eb68:	b570      	push	{r4, r5, r6, lr}
 800eb6a:	69c6      	ldr	r6, [r0, #28]
 800eb6c:	4605      	mov	r5, r0
 800eb6e:	460c      	mov	r4, r1
 800eb70:	b976      	cbnz	r6, 800eb90 <_Bfree+0x28>
 800eb72:	2010      	movs	r0, #16
 800eb74:	f7ff ff02 	bl	800e97c <malloc>
 800eb78:	4602      	mov	r2, r0
 800eb7a:	61e8      	str	r0, [r5, #28]
 800eb7c:	b920      	cbnz	r0, 800eb88 <_Bfree+0x20>
 800eb7e:	4b09      	ldr	r3, [pc, #36]	@ (800eba4 <_Bfree+0x3c>)
 800eb80:	4809      	ldr	r0, [pc, #36]	@ (800eba8 <_Bfree+0x40>)
 800eb82:	218f      	movs	r1, #143	@ 0x8f
 800eb84:	f000 ff26 	bl	800f9d4 <__assert_func>
 800eb88:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800eb8c:	6006      	str	r6, [r0, #0]
 800eb8e:	60c6      	str	r6, [r0, #12]
 800eb90:	b13c      	cbz	r4, 800eba2 <_Bfree+0x3a>
 800eb92:	69eb      	ldr	r3, [r5, #28]
 800eb94:	6862      	ldr	r2, [r4, #4]
 800eb96:	68db      	ldr	r3, [r3, #12]
 800eb98:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800eb9c:	6021      	str	r1, [r4, #0]
 800eb9e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800eba2:	bd70      	pop	{r4, r5, r6, pc}
 800eba4:	08010e0d 	.word	0x08010e0d
 800eba8:	08010e8d 	.word	0x08010e8d

0800ebac <__multadd>:
 800ebac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ebb0:	690d      	ldr	r5, [r1, #16]
 800ebb2:	4607      	mov	r7, r0
 800ebb4:	460c      	mov	r4, r1
 800ebb6:	461e      	mov	r6, r3
 800ebb8:	f101 0c14 	add.w	ip, r1, #20
 800ebbc:	2000      	movs	r0, #0
 800ebbe:	f8dc 3000 	ldr.w	r3, [ip]
 800ebc2:	b299      	uxth	r1, r3
 800ebc4:	fb02 6101 	mla	r1, r2, r1, r6
 800ebc8:	0c1e      	lsrs	r6, r3, #16
 800ebca:	0c0b      	lsrs	r3, r1, #16
 800ebcc:	fb02 3306 	mla	r3, r2, r6, r3
 800ebd0:	b289      	uxth	r1, r1
 800ebd2:	3001      	adds	r0, #1
 800ebd4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ebd8:	4285      	cmp	r5, r0
 800ebda:	f84c 1b04 	str.w	r1, [ip], #4
 800ebde:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ebe2:	dcec      	bgt.n	800ebbe <__multadd+0x12>
 800ebe4:	b30e      	cbz	r6, 800ec2a <__multadd+0x7e>
 800ebe6:	68a3      	ldr	r3, [r4, #8]
 800ebe8:	42ab      	cmp	r3, r5
 800ebea:	dc19      	bgt.n	800ec20 <__multadd+0x74>
 800ebec:	6861      	ldr	r1, [r4, #4]
 800ebee:	4638      	mov	r0, r7
 800ebf0:	3101      	adds	r1, #1
 800ebf2:	f7ff ff79 	bl	800eae8 <_Balloc>
 800ebf6:	4680      	mov	r8, r0
 800ebf8:	b928      	cbnz	r0, 800ec06 <__multadd+0x5a>
 800ebfa:	4602      	mov	r2, r0
 800ebfc:	4b0c      	ldr	r3, [pc, #48]	@ (800ec30 <__multadd+0x84>)
 800ebfe:	480d      	ldr	r0, [pc, #52]	@ (800ec34 <__multadd+0x88>)
 800ec00:	21ba      	movs	r1, #186	@ 0xba
 800ec02:	f000 fee7 	bl	800f9d4 <__assert_func>
 800ec06:	6922      	ldr	r2, [r4, #16]
 800ec08:	3202      	adds	r2, #2
 800ec0a:	f104 010c 	add.w	r1, r4, #12
 800ec0e:	0092      	lsls	r2, r2, #2
 800ec10:	300c      	adds	r0, #12
 800ec12:	f7ff f80c 	bl	800dc2e <memcpy>
 800ec16:	4621      	mov	r1, r4
 800ec18:	4638      	mov	r0, r7
 800ec1a:	f7ff ffa5 	bl	800eb68 <_Bfree>
 800ec1e:	4644      	mov	r4, r8
 800ec20:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ec24:	3501      	adds	r5, #1
 800ec26:	615e      	str	r6, [r3, #20]
 800ec28:	6125      	str	r5, [r4, #16]
 800ec2a:	4620      	mov	r0, r4
 800ec2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ec30:	08010e7c 	.word	0x08010e7c
 800ec34:	08010e8d 	.word	0x08010e8d

0800ec38 <__hi0bits>:
 800ec38:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800ec3c:	4603      	mov	r3, r0
 800ec3e:	bf36      	itet	cc
 800ec40:	0403      	lslcc	r3, r0, #16
 800ec42:	2000      	movcs	r0, #0
 800ec44:	2010      	movcc	r0, #16
 800ec46:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800ec4a:	bf3c      	itt	cc
 800ec4c:	021b      	lslcc	r3, r3, #8
 800ec4e:	3008      	addcc	r0, #8
 800ec50:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800ec54:	bf3c      	itt	cc
 800ec56:	011b      	lslcc	r3, r3, #4
 800ec58:	3004      	addcc	r0, #4
 800ec5a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800ec5e:	bf3c      	itt	cc
 800ec60:	009b      	lslcc	r3, r3, #2
 800ec62:	3002      	addcc	r0, #2
 800ec64:	2b00      	cmp	r3, #0
 800ec66:	db05      	blt.n	800ec74 <__hi0bits+0x3c>
 800ec68:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800ec6c:	f100 0001 	add.w	r0, r0, #1
 800ec70:	bf08      	it	eq
 800ec72:	2020      	moveq	r0, #32
 800ec74:	4770      	bx	lr

0800ec76 <__lo0bits>:
 800ec76:	6803      	ldr	r3, [r0, #0]
 800ec78:	4602      	mov	r2, r0
 800ec7a:	f013 0007 	ands.w	r0, r3, #7
 800ec7e:	d00b      	beq.n	800ec98 <__lo0bits+0x22>
 800ec80:	07d9      	lsls	r1, r3, #31
 800ec82:	d421      	bmi.n	800ecc8 <__lo0bits+0x52>
 800ec84:	0798      	lsls	r0, r3, #30
 800ec86:	bf49      	itett	mi
 800ec88:	085b      	lsrmi	r3, r3, #1
 800ec8a:	089b      	lsrpl	r3, r3, #2
 800ec8c:	2001      	movmi	r0, #1
 800ec8e:	6013      	strmi	r3, [r2, #0]
 800ec90:	bf5c      	itt	pl
 800ec92:	6013      	strpl	r3, [r2, #0]
 800ec94:	2002      	movpl	r0, #2
 800ec96:	4770      	bx	lr
 800ec98:	b299      	uxth	r1, r3
 800ec9a:	b909      	cbnz	r1, 800eca0 <__lo0bits+0x2a>
 800ec9c:	0c1b      	lsrs	r3, r3, #16
 800ec9e:	2010      	movs	r0, #16
 800eca0:	b2d9      	uxtb	r1, r3
 800eca2:	b909      	cbnz	r1, 800eca8 <__lo0bits+0x32>
 800eca4:	3008      	adds	r0, #8
 800eca6:	0a1b      	lsrs	r3, r3, #8
 800eca8:	0719      	lsls	r1, r3, #28
 800ecaa:	bf04      	itt	eq
 800ecac:	091b      	lsreq	r3, r3, #4
 800ecae:	3004      	addeq	r0, #4
 800ecb0:	0799      	lsls	r1, r3, #30
 800ecb2:	bf04      	itt	eq
 800ecb4:	089b      	lsreq	r3, r3, #2
 800ecb6:	3002      	addeq	r0, #2
 800ecb8:	07d9      	lsls	r1, r3, #31
 800ecba:	d403      	bmi.n	800ecc4 <__lo0bits+0x4e>
 800ecbc:	085b      	lsrs	r3, r3, #1
 800ecbe:	f100 0001 	add.w	r0, r0, #1
 800ecc2:	d003      	beq.n	800eccc <__lo0bits+0x56>
 800ecc4:	6013      	str	r3, [r2, #0]
 800ecc6:	4770      	bx	lr
 800ecc8:	2000      	movs	r0, #0
 800ecca:	4770      	bx	lr
 800eccc:	2020      	movs	r0, #32
 800ecce:	4770      	bx	lr

0800ecd0 <__i2b>:
 800ecd0:	b510      	push	{r4, lr}
 800ecd2:	460c      	mov	r4, r1
 800ecd4:	2101      	movs	r1, #1
 800ecd6:	f7ff ff07 	bl	800eae8 <_Balloc>
 800ecda:	4602      	mov	r2, r0
 800ecdc:	b928      	cbnz	r0, 800ecea <__i2b+0x1a>
 800ecde:	4b05      	ldr	r3, [pc, #20]	@ (800ecf4 <__i2b+0x24>)
 800ece0:	4805      	ldr	r0, [pc, #20]	@ (800ecf8 <__i2b+0x28>)
 800ece2:	f240 1145 	movw	r1, #325	@ 0x145
 800ece6:	f000 fe75 	bl	800f9d4 <__assert_func>
 800ecea:	2301      	movs	r3, #1
 800ecec:	6144      	str	r4, [r0, #20]
 800ecee:	6103      	str	r3, [r0, #16]
 800ecf0:	bd10      	pop	{r4, pc}
 800ecf2:	bf00      	nop
 800ecf4:	08010e7c 	.word	0x08010e7c
 800ecf8:	08010e8d 	.word	0x08010e8d

0800ecfc <__multiply>:
 800ecfc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ed00:	4614      	mov	r4, r2
 800ed02:	690a      	ldr	r2, [r1, #16]
 800ed04:	6923      	ldr	r3, [r4, #16]
 800ed06:	429a      	cmp	r2, r3
 800ed08:	bfa8      	it	ge
 800ed0a:	4623      	movge	r3, r4
 800ed0c:	460f      	mov	r7, r1
 800ed0e:	bfa4      	itt	ge
 800ed10:	460c      	movge	r4, r1
 800ed12:	461f      	movge	r7, r3
 800ed14:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800ed18:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800ed1c:	68a3      	ldr	r3, [r4, #8]
 800ed1e:	6861      	ldr	r1, [r4, #4]
 800ed20:	eb0a 0609 	add.w	r6, sl, r9
 800ed24:	42b3      	cmp	r3, r6
 800ed26:	b085      	sub	sp, #20
 800ed28:	bfb8      	it	lt
 800ed2a:	3101      	addlt	r1, #1
 800ed2c:	f7ff fedc 	bl	800eae8 <_Balloc>
 800ed30:	b930      	cbnz	r0, 800ed40 <__multiply+0x44>
 800ed32:	4602      	mov	r2, r0
 800ed34:	4b44      	ldr	r3, [pc, #272]	@ (800ee48 <__multiply+0x14c>)
 800ed36:	4845      	ldr	r0, [pc, #276]	@ (800ee4c <__multiply+0x150>)
 800ed38:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800ed3c:	f000 fe4a 	bl	800f9d4 <__assert_func>
 800ed40:	f100 0514 	add.w	r5, r0, #20
 800ed44:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800ed48:	462b      	mov	r3, r5
 800ed4a:	2200      	movs	r2, #0
 800ed4c:	4543      	cmp	r3, r8
 800ed4e:	d321      	bcc.n	800ed94 <__multiply+0x98>
 800ed50:	f107 0114 	add.w	r1, r7, #20
 800ed54:	f104 0214 	add.w	r2, r4, #20
 800ed58:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800ed5c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800ed60:	9302      	str	r3, [sp, #8]
 800ed62:	1b13      	subs	r3, r2, r4
 800ed64:	3b15      	subs	r3, #21
 800ed66:	f023 0303 	bic.w	r3, r3, #3
 800ed6a:	3304      	adds	r3, #4
 800ed6c:	f104 0715 	add.w	r7, r4, #21
 800ed70:	42ba      	cmp	r2, r7
 800ed72:	bf38      	it	cc
 800ed74:	2304      	movcc	r3, #4
 800ed76:	9301      	str	r3, [sp, #4]
 800ed78:	9b02      	ldr	r3, [sp, #8]
 800ed7a:	9103      	str	r1, [sp, #12]
 800ed7c:	428b      	cmp	r3, r1
 800ed7e:	d80c      	bhi.n	800ed9a <__multiply+0x9e>
 800ed80:	2e00      	cmp	r6, #0
 800ed82:	dd03      	ble.n	800ed8c <__multiply+0x90>
 800ed84:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ed88:	2b00      	cmp	r3, #0
 800ed8a:	d05b      	beq.n	800ee44 <__multiply+0x148>
 800ed8c:	6106      	str	r6, [r0, #16]
 800ed8e:	b005      	add	sp, #20
 800ed90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ed94:	f843 2b04 	str.w	r2, [r3], #4
 800ed98:	e7d8      	b.n	800ed4c <__multiply+0x50>
 800ed9a:	f8b1 a000 	ldrh.w	sl, [r1]
 800ed9e:	f1ba 0f00 	cmp.w	sl, #0
 800eda2:	d024      	beq.n	800edee <__multiply+0xf2>
 800eda4:	f104 0e14 	add.w	lr, r4, #20
 800eda8:	46a9      	mov	r9, r5
 800edaa:	f04f 0c00 	mov.w	ip, #0
 800edae:	f85e 7b04 	ldr.w	r7, [lr], #4
 800edb2:	f8d9 3000 	ldr.w	r3, [r9]
 800edb6:	fa1f fb87 	uxth.w	fp, r7
 800edba:	b29b      	uxth	r3, r3
 800edbc:	fb0a 330b 	mla	r3, sl, fp, r3
 800edc0:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800edc4:	f8d9 7000 	ldr.w	r7, [r9]
 800edc8:	4463      	add	r3, ip
 800edca:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800edce:	fb0a c70b 	mla	r7, sl, fp, ip
 800edd2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800edd6:	b29b      	uxth	r3, r3
 800edd8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800eddc:	4572      	cmp	r2, lr
 800edde:	f849 3b04 	str.w	r3, [r9], #4
 800ede2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800ede6:	d8e2      	bhi.n	800edae <__multiply+0xb2>
 800ede8:	9b01      	ldr	r3, [sp, #4]
 800edea:	f845 c003 	str.w	ip, [r5, r3]
 800edee:	9b03      	ldr	r3, [sp, #12]
 800edf0:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800edf4:	3104      	adds	r1, #4
 800edf6:	f1b9 0f00 	cmp.w	r9, #0
 800edfa:	d021      	beq.n	800ee40 <__multiply+0x144>
 800edfc:	682b      	ldr	r3, [r5, #0]
 800edfe:	f104 0c14 	add.w	ip, r4, #20
 800ee02:	46ae      	mov	lr, r5
 800ee04:	f04f 0a00 	mov.w	sl, #0
 800ee08:	f8bc b000 	ldrh.w	fp, [ip]
 800ee0c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800ee10:	fb09 770b 	mla	r7, r9, fp, r7
 800ee14:	4457      	add	r7, sl
 800ee16:	b29b      	uxth	r3, r3
 800ee18:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800ee1c:	f84e 3b04 	str.w	r3, [lr], #4
 800ee20:	f85c 3b04 	ldr.w	r3, [ip], #4
 800ee24:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ee28:	f8be 3000 	ldrh.w	r3, [lr]
 800ee2c:	fb09 330a 	mla	r3, r9, sl, r3
 800ee30:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800ee34:	4562      	cmp	r2, ip
 800ee36:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ee3a:	d8e5      	bhi.n	800ee08 <__multiply+0x10c>
 800ee3c:	9f01      	ldr	r7, [sp, #4]
 800ee3e:	51eb      	str	r3, [r5, r7]
 800ee40:	3504      	adds	r5, #4
 800ee42:	e799      	b.n	800ed78 <__multiply+0x7c>
 800ee44:	3e01      	subs	r6, #1
 800ee46:	e79b      	b.n	800ed80 <__multiply+0x84>
 800ee48:	08010e7c 	.word	0x08010e7c
 800ee4c:	08010e8d 	.word	0x08010e8d

0800ee50 <__pow5mult>:
 800ee50:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800ee54:	4615      	mov	r5, r2
 800ee56:	f012 0203 	ands.w	r2, r2, #3
 800ee5a:	4607      	mov	r7, r0
 800ee5c:	460e      	mov	r6, r1
 800ee5e:	d007      	beq.n	800ee70 <__pow5mult+0x20>
 800ee60:	4c25      	ldr	r4, [pc, #148]	@ (800eef8 <__pow5mult+0xa8>)
 800ee62:	3a01      	subs	r2, #1
 800ee64:	2300      	movs	r3, #0
 800ee66:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ee6a:	f7ff fe9f 	bl	800ebac <__multadd>
 800ee6e:	4606      	mov	r6, r0
 800ee70:	10ad      	asrs	r5, r5, #2
 800ee72:	d03d      	beq.n	800eef0 <__pow5mult+0xa0>
 800ee74:	69fc      	ldr	r4, [r7, #28]
 800ee76:	b97c      	cbnz	r4, 800ee98 <__pow5mult+0x48>
 800ee78:	2010      	movs	r0, #16
 800ee7a:	f7ff fd7f 	bl	800e97c <malloc>
 800ee7e:	4602      	mov	r2, r0
 800ee80:	61f8      	str	r0, [r7, #28]
 800ee82:	b928      	cbnz	r0, 800ee90 <__pow5mult+0x40>
 800ee84:	4b1d      	ldr	r3, [pc, #116]	@ (800eefc <__pow5mult+0xac>)
 800ee86:	481e      	ldr	r0, [pc, #120]	@ (800ef00 <__pow5mult+0xb0>)
 800ee88:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800ee8c:	f000 fda2 	bl	800f9d4 <__assert_func>
 800ee90:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800ee94:	6004      	str	r4, [r0, #0]
 800ee96:	60c4      	str	r4, [r0, #12]
 800ee98:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800ee9c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800eea0:	b94c      	cbnz	r4, 800eeb6 <__pow5mult+0x66>
 800eea2:	f240 2171 	movw	r1, #625	@ 0x271
 800eea6:	4638      	mov	r0, r7
 800eea8:	f7ff ff12 	bl	800ecd0 <__i2b>
 800eeac:	2300      	movs	r3, #0
 800eeae:	f8c8 0008 	str.w	r0, [r8, #8]
 800eeb2:	4604      	mov	r4, r0
 800eeb4:	6003      	str	r3, [r0, #0]
 800eeb6:	f04f 0900 	mov.w	r9, #0
 800eeba:	07eb      	lsls	r3, r5, #31
 800eebc:	d50a      	bpl.n	800eed4 <__pow5mult+0x84>
 800eebe:	4631      	mov	r1, r6
 800eec0:	4622      	mov	r2, r4
 800eec2:	4638      	mov	r0, r7
 800eec4:	f7ff ff1a 	bl	800ecfc <__multiply>
 800eec8:	4631      	mov	r1, r6
 800eeca:	4680      	mov	r8, r0
 800eecc:	4638      	mov	r0, r7
 800eece:	f7ff fe4b 	bl	800eb68 <_Bfree>
 800eed2:	4646      	mov	r6, r8
 800eed4:	106d      	asrs	r5, r5, #1
 800eed6:	d00b      	beq.n	800eef0 <__pow5mult+0xa0>
 800eed8:	6820      	ldr	r0, [r4, #0]
 800eeda:	b938      	cbnz	r0, 800eeec <__pow5mult+0x9c>
 800eedc:	4622      	mov	r2, r4
 800eede:	4621      	mov	r1, r4
 800eee0:	4638      	mov	r0, r7
 800eee2:	f7ff ff0b 	bl	800ecfc <__multiply>
 800eee6:	6020      	str	r0, [r4, #0]
 800eee8:	f8c0 9000 	str.w	r9, [r0]
 800eeec:	4604      	mov	r4, r0
 800eeee:	e7e4      	b.n	800eeba <__pow5mult+0x6a>
 800eef0:	4630      	mov	r0, r6
 800eef2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800eef6:	bf00      	nop
 800eef8:	08010ee8 	.word	0x08010ee8
 800eefc:	08010e0d 	.word	0x08010e0d
 800ef00:	08010e8d 	.word	0x08010e8d

0800ef04 <__lshift>:
 800ef04:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ef08:	460c      	mov	r4, r1
 800ef0a:	6849      	ldr	r1, [r1, #4]
 800ef0c:	6923      	ldr	r3, [r4, #16]
 800ef0e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ef12:	68a3      	ldr	r3, [r4, #8]
 800ef14:	4607      	mov	r7, r0
 800ef16:	4691      	mov	r9, r2
 800ef18:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ef1c:	f108 0601 	add.w	r6, r8, #1
 800ef20:	42b3      	cmp	r3, r6
 800ef22:	db0b      	blt.n	800ef3c <__lshift+0x38>
 800ef24:	4638      	mov	r0, r7
 800ef26:	f7ff fddf 	bl	800eae8 <_Balloc>
 800ef2a:	4605      	mov	r5, r0
 800ef2c:	b948      	cbnz	r0, 800ef42 <__lshift+0x3e>
 800ef2e:	4602      	mov	r2, r0
 800ef30:	4b28      	ldr	r3, [pc, #160]	@ (800efd4 <__lshift+0xd0>)
 800ef32:	4829      	ldr	r0, [pc, #164]	@ (800efd8 <__lshift+0xd4>)
 800ef34:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800ef38:	f000 fd4c 	bl	800f9d4 <__assert_func>
 800ef3c:	3101      	adds	r1, #1
 800ef3e:	005b      	lsls	r3, r3, #1
 800ef40:	e7ee      	b.n	800ef20 <__lshift+0x1c>
 800ef42:	2300      	movs	r3, #0
 800ef44:	f100 0114 	add.w	r1, r0, #20
 800ef48:	f100 0210 	add.w	r2, r0, #16
 800ef4c:	4618      	mov	r0, r3
 800ef4e:	4553      	cmp	r3, sl
 800ef50:	db33      	blt.n	800efba <__lshift+0xb6>
 800ef52:	6920      	ldr	r0, [r4, #16]
 800ef54:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ef58:	f104 0314 	add.w	r3, r4, #20
 800ef5c:	f019 091f 	ands.w	r9, r9, #31
 800ef60:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ef64:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800ef68:	d02b      	beq.n	800efc2 <__lshift+0xbe>
 800ef6a:	f1c9 0e20 	rsb	lr, r9, #32
 800ef6e:	468a      	mov	sl, r1
 800ef70:	2200      	movs	r2, #0
 800ef72:	6818      	ldr	r0, [r3, #0]
 800ef74:	fa00 f009 	lsl.w	r0, r0, r9
 800ef78:	4310      	orrs	r0, r2
 800ef7a:	f84a 0b04 	str.w	r0, [sl], #4
 800ef7e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ef82:	459c      	cmp	ip, r3
 800ef84:	fa22 f20e 	lsr.w	r2, r2, lr
 800ef88:	d8f3      	bhi.n	800ef72 <__lshift+0x6e>
 800ef8a:	ebac 0304 	sub.w	r3, ip, r4
 800ef8e:	3b15      	subs	r3, #21
 800ef90:	f023 0303 	bic.w	r3, r3, #3
 800ef94:	3304      	adds	r3, #4
 800ef96:	f104 0015 	add.w	r0, r4, #21
 800ef9a:	4584      	cmp	ip, r0
 800ef9c:	bf38      	it	cc
 800ef9e:	2304      	movcc	r3, #4
 800efa0:	50ca      	str	r2, [r1, r3]
 800efa2:	b10a      	cbz	r2, 800efa8 <__lshift+0xa4>
 800efa4:	f108 0602 	add.w	r6, r8, #2
 800efa8:	3e01      	subs	r6, #1
 800efaa:	4638      	mov	r0, r7
 800efac:	612e      	str	r6, [r5, #16]
 800efae:	4621      	mov	r1, r4
 800efb0:	f7ff fdda 	bl	800eb68 <_Bfree>
 800efb4:	4628      	mov	r0, r5
 800efb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800efba:	f842 0f04 	str.w	r0, [r2, #4]!
 800efbe:	3301      	adds	r3, #1
 800efc0:	e7c5      	b.n	800ef4e <__lshift+0x4a>
 800efc2:	3904      	subs	r1, #4
 800efc4:	f853 2b04 	ldr.w	r2, [r3], #4
 800efc8:	f841 2f04 	str.w	r2, [r1, #4]!
 800efcc:	459c      	cmp	ip, r3
 800efce:	d8f9      	bhi.n	800efc4 <__lshift+0xc0>
 800efd0:	e7ea      	b.n	800efa8 <__lshift+0xa4>
 800efd2:	bf00      	nop
 800efd4:	08010e7c 	.word	0x08010e7c
 800efd8:	08010e8d 	.word	0x08010e8d

0800efdc <__mcmp>:
 800efdc:	690a      	ldr	r2, [r1, #16]
 800efde:	4603      	mov	r3, r0
 800efe0:	6900      	ldr	r0, [r0, #16]
 800efe2:	1a80      	subs	r0, r0, r2
 800efe4:	b530      	push	{r4, r5, lr}
 800efe6:	d10e      	bne.n	800f006 <__mcmp+0x2a>
 800efe8:	3314      	adds	r3, #20
 800efea:	3114      	adds	r1, #20
 800efec:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800eff0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800eff4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800eff8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800effc:	4295      	cmp	r5, r2
 800effe:	d003      	beq.n	800f008 <__mcmp+0x2c>
 800f000:	d205      	bcs.n	800f00e <__mcmp+0x32>
 800f002:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f006:	bd30      	pop	{r4, r5, pc}
 800f008:	42a3      	cmp	r3, r4
 800f00a:	d3f3      	bcc.n	800eff4 <__mcmp+0x18>
 800f00c:	e7fb      	b.n	800f006 <__mcmp+0x2a>
 800f00e:	2001      	movs	r0, #1
 800f010:	e7f9      	b.n	800f006 <__mcmp+0x2a>
	...

0800f014 <__mdiff>:
 800f014:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f018:	4689      	mov	r9, r1
 800f01a:	4606      	mov	r6, r0
 800f01c:	4611      	mov	r1, r2
 800f01e:	4648      	mov	r0, r9
 800f020:	4614      	mov	r4, r2
 800f022:	f7ff ffdb 	bl	800efdc <__mcmp>
 800f026:	1e05      	subs	r5, r0, #0
 800f028:	d112      	bne.n	800f050 <__mdiff+0x3c>
 800f02a:	4629      	mov	r1, r5
 800f02c:	4630      	mov	r0, r6
 800f02e:	f7ff fd5b 	bl	800eae8 <_Balloc>
 800f032:	4602      	mov	r2, r0
 800f034:	b928      	cbnz	r0, 800f042 <__mdiff+0x2e>
 800f036:	4b3f      	ldr	r3, [pc, #252]	@ (800f134 <__mdiff+0x120>)
 800f038:	f240 2137 	movw	r1, #567	@ 0x237
 800f03c:	483e      	ldr	r0, [pc, #248]	@ (800f138 <__mdiff+0x124>)
 800f03e:	f000 fcc9 	bl	800f9d4 <__assert_func>
 800f042:	2301      	movs	r3, #1
 800f044:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800f048:	4610      	mov	r0, r2
 800f04a:	b003      	add	sp, #12
 800f04c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f050:	bfbc      	itt	lt
 800f052:	464b      	movlt	r3, r9
 800f054:	46a1      	movlt	r9, r4
 800f056:	4630      	mov	r0, r6
 800f058:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800f05c:	bfba      	itte	lt
 800f05e:	461c      	movlt	r4, r3
 800f060:	2501      	movlt	r5, #1
 800f062:	2500      	movge	r5, #0
 800f064:	f7ff fd40 	bl	800eae8 <_Balloc>
 800f068:	4602      	mov	r2, r0
 800f06a:	b918      	cbnz	r0, 800f074 <__mdiff+0x60>
 800f06c:	4b31      	ldr	r3, [pc, #196]	@ (800f134 <__mdiff+0x120>)
 800f06e:	f240 2145 	movw	r1, #581	@ 0x245
 800f072:	e7e3      	b.n	800f03c <__mdiff+0x28>
 800f074:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800f078:	6926      	ldr	r6, [r4, #16]
 800f07a:	60c5      	str	r5, [r0, #12]
 800f07c:	f109 0310 	add.w	r3, r9, #16
 800f080:	f109 0514 	add.w	r5, r9, #20
 800f084:	f104 0e14 	add.w	lr, r4, #20
 800f088:	f100 0b14 	add.w	fp, r0, #20
 800f08c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800f090:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800f094:	9301      	str	r3, [sp, #4]
 800f096:	46d9      	mov	r9, fp
 800f098:	f04f 0c00 	mov.w	ip, #0
 800f09c:	9b01      	ldr	r3, [sp, #4]
 800f09e:	f85e 0b04 	ldr.w	r0, [lr], #4
 800f0a2:	f853 af04 	ldr.w	sl, [r3, #4]!
 800f0a6:	9301      	str	r3, [sp, #4]
 800f0a8:	fa1f f38a 	uxth.w	r3, sl
 800f0ac:	4619      	mov	r1, r3
 800f0ae:	b283      	uxth	r3, r0
 800f0b0:	1acb      	subs	r3, r1, r3
 800f0b2:	0c00      	lsrs	r0, r0, #16
 800f0b4:	4463      	add	r3, ip
 800f0b6:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800f0ba:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800f0be:	b29b      	uxth	r3, r3
 800f0c0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800f0c4:	4576      	cmp	r6, lr
 800f0c6:	f849 3b04 	str.w	r3, [r9], #4
 800f0ca:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800f0ce:	d8e5      	bhi.n	800f09c <__mdiff+0x88>
 800f0d0:	1b33      	subs	r3, r6, r4
 800f0d2:	3b15      	subs	r3, #21
 800f0d4:	f023 0303 	bic.w	r3, r3, #3
 800f0d8:	3415      	adds	r4, #21
 800f0da:	3304      	adds	r3, #4
 800f0dc:	42a6      	cmp	r6, r4
 800f0de:	bf38      	it	cc
 800f0e0:	2304      	movcc	r3, #4
 800f0e2:	441d      	add	r5, r3
 800f0e4:	445b      	add	r3, fp
 800f0e6:	461e      	mov	r6, r3
 800f0e8:	462c      	mov	r4, r5
 800f0ea:	4544      	cmp	r4, r8
 800f0ec:	d30e      	bcc.n	800f10c <__mdiff+0xf8>
 800f0ee:	f108 0103 	add.w	r1, r8, #3
 800f0f2:	1b49      	subs	r1, r1, r5
 800f0f4:	f021 0103 	bic.w	r1, r1, #3
 800f0f8:	3d03      	subs	r5, #3
 800f0fa:	45a8      	cmp	r8, r5
 800f0fc:	bf38      	it	cc
 800f0fe:	2100      	movcc	r1, #0
 800f100:	440b      	add	r3, r1
 800f102:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800f106:	b191      	cbz	r1, 800f12e <__mdiff+0x11a>
 800f108:	6117      	str	r7, [r2, #16]
 800f10a:	e79d      	b.n	800f048 <__mdiff+0x34>
 800f10c:	f854 1b04 	ldr.w	r1, [r4], #4
 800f110:	46e6      	mov	lr, ip
 800f112:	0c08      	lsrs	r0, r1, #16
 800f114:	fa1c fc81 	uxtah	ip, ip, r1
 800f118:	4471      	add	r1, lr
 800f11a:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800f11e:	b289      	uxth	r1, r1
 800f120:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800f124:	f846 1b04 	str.w	r1, [r6], #4
 800f128:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800f12c:	e7dd      	b.n	800f0ea <__mdiff+0xd6>
 800f12e:	3f01      	subs	r7, #1
 800f130:	e7e7      	b.n	800f102 <__mdiff+0xee>
 800f132:	bf00      	nop
 800f134:	08010e7c 	.word	0x08010e7c
 800f138:	08010e8d 	.word	0x08010e8d

0800f13c <__d2b>:
 800f13c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800f140:	460f      	mov	r7, r1
 800f142:	2101      	movs	r1, #1
 800f144:	ec59 8b10 	vmov	r8, r9, d0
 800f148:	4616      	mov	r6, r2
 800f14a:	f7ff fccd 	bl	800eae8 <_Balloc>
 800f14e:	4604      	mov	r4, r0
 800f150:	b930      	cbnz	r0, 800f160 <__d2b+0x24>
 800f152:	4602      	mov	r2, r0
 800f154:	4b23      	ldr	r3, [pc, #140]	@ (800f1e4 <__d2b+0xa8>)
 800f156:	4824      	ldr	r0, [pc, #144]	@ (800f1e8 <__d2b+0xac>)
 800f158:	f240 310f 	movw	r1, #783	@ 0x30f
 800f15c:	f000 fc3a 	bl	800f9d4 <__assert_func>
 800f160:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800f164:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800f168:	b10d      	cbz	r5, 800f16e <__d2b+0x32>
 800f16a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800f16e:	9301      	str	r3, [sp, #4]
 800f170:	f1b8 0300 	subs.w	r3, r8, #0
 800f174:	d023      	beq.n	800f1be <__d2b+0x82>
 800f176:	4668      	mov	r0, sp
 800f178:	9300      	str	r3, [sp, #0]
 800f17a:	f7ff fd7c 	bl	800ec76 <__lo0bits>
 800f17e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800f182:	b1d0      	cbz	r0, 800f1ba <__d2b+0x7e>
 800f184:	f1c0 0320 	rsb	r3, r0, #32
 800f188:	fa02 f303 	lsl.w	r3, r2, r3
 800f18c:	430b      	orrs	r3, r1
 800f18e:	40c2      	lsrs	r2, r0
 800f190:	6163      	str	r3, [r4, #20]
 800f192:	9201      	str	r2, [sp, #4]
 800f194:	9b01      	ldr	r3, [sp, #4]
 800f196:	61a3      	str	r3, [r4, #24]
 800f198:	2b00      	cmp	r3, #0
 800f19a:	bf0c      	ite	eq
 800f19c:	2201      	moveq	r2, #1
 800f19e:	2202      	movne	r2, #2
 800f1a0:	6122      	str	r2, [r4, #16]
 800f1a2:	b1a5      	cbz	r5, 800f1ce <__d2b+0x92>
 800f1a4:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800f1a8:	4405      	add	r5, r0
 800f1aa:	603d      	str	r5, [r7, #0]
 800f1ac:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800f1b0:	6030      	str	r0, [r6, #0]
 800f1b2:	4620      	mov	r0, r4
 800f1b4:	b003      	add	sp, #12
 800f1b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800f1ba:	6161      	str	r1, [r4, #20]
 800f1bc:	e7ea      	b.n	800f194 <__d2b+0x58>
 800f1be:	a801      	add	r0, sp, #4
 800f1c0:	f7ff fd59 	bl	800ec76 <__lo0bits>
 800f1c4:	9b01      	ldr	r3, [sp, #4]
 800f1c6:	6163      	str	r3, [r4, #20]
 800f1c8:	3020      	adds	r0, #32
 800f1ca:	2201      	movs	r2, #1
 800f1cc:	e7e8      	b.n	800f1a0 <__d2b+0x64>
 800f1ce:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800f1d2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800f1d6:	6038      	str	r0, [r7, #0]
 800f1d8:	6918      	ldr	r0, [r3, #16]
 800f1da:	f7ff fd2d 	bl	800ec38 <__hi0bits>
 800f1de:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800f1e2:	e7e5      	b.n	800f1b0 <__d2b+0x74>
 800f1e4:	08010e7c 	.word	0x08010e7c
 800f1e8:	08010e8d 	.word	0x08010e8d

0800f1ec <__ssputs_r>:
 800f1ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800f1f0:	688e      	ldr	r6, [r1, #8]
 800f1f2:	461f      	mov	r7, r3
 800f1f4:	42be      	cmp	r6, r7
 800f1f6:	680b      	ldr	r3, [r1, #0]
 800f1f8:	4682      	mov	sl, r0
 800f1fa:	460c      	mov	r4, r1
 800f1fc:	4690      	mov	r8, r2
 800f1fe:	d82d      	bhi.n	800f25c <__ssputs_r+0x70>
 800f200:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f204:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800f208:	d026      	beq.n	800f258 <__ssputs_r+0x6c>
 800f20a:	6965      	ldr	r5, [r4, #20]
 800f20c:	6909      	ldr	r1, [r1, #16]
 800f20e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800f212:	eba3 0901 	sub.w	r9, r3, r1
 800f216:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800f21a:	1c7b      	adds	r3, r7, #1
 800f21c:	444b      	add	r3, r9
 800f21e:	106d      	asrs	r5, r5, #1
 800f220:	429d      	cmp	r5, r3
 800f222:	bf38      	it	cc
 800f224:	461d      	movcc	r5, r3
 800f226:	0553      	lsls	r3, r2, #21
 800f228:	d527      	bpl.n	800f27a <__ssputs_r+0x8e>
 800f22a:	4629      	mov	r1, r5
 800f22c:	f7ff fbd0 	bl	800e9d0 <_malloc_r>
 800f230:	4606      	mov	r6, r0
 800f232:	b360      	cbz	r0, 800f28e <__ssputs_r+0xa2>
 800f234:	6921      	ldr	r1, [r4, #16]
 800f236:	464a      	mov	r2, r9
 800f238:	f7fe fcf9 	bl	800dc2e <memcpy>
 800f23c:	89a3      	ldrh	r3, [r4, #12]
 800f23e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800f242:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f246:	81a3      	strh	r3, [r4, #12]
 800f248:	6126      	str	r6, [r4, #16]
 800f24a:	6165      	str	r5, [r4, #20]
 800f24c:	444e      	add	r6, r9
 800f24e:	eba5 0509 	sub.w	r5, r5, r9
 800f252:	6026      	str	r6, [r4, #0]
 800f254:	60a5      	str	r5, [r4, #8]
 800f256:	463e      	mov	r6, r7
 800f258:	42be      	cmp	r6, r7
 800f25a:	d900      	bls.n	800f25e <__ssputs_r+0x72>
 800f25c:	463e      	mov	r6, r7
 800f25e:	6820      	ldr	r0, [r4, #0]
 800f260:	4632      	mov	r2, r6
 800f262:	4641      	mov	r1, r8
 800f264:	f000 fb6a 	bl	800f93c <memmove>
 800f268:	68a3      	ldr	r3, [r4, #8]
 800f26a:	1b9b      	subs	r3, r3, r6
 800f26c:	60a3      	str	r3, [r4, #8]
 800f26e:	6823      	ldr	r3, [r4, #0]
 800f270:	4433      	add	r3, r6
 800f272:	6023      	str	r3, [r4, #0]
 800f274:	2000      	movs	r0, #0
 800f276:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800f27a:	462a      	mov	r2, r5
 800f27c:	f000 fbee 	bl	800fa5c <_realloc_r>
 800f280:	4606      	mov	r6, r0
 800f282:	2800      	cmp	r0, #0
 800f284:	d1e0      	bne.n	800f248 <__ssputs_r+0x5c>
 800f286:	6921      	ldr	r1, [r4, #16]
 800f288:	4650      	mov	r0, sl
 800f28a:	f7ff fb2d 	bl	800e8e8 <_free_r>
 800f28e:	230c      	movs	r3, #12
 800f290:	f8ca 3000 	str.w	r3, [sl]
 800f294:	89a3      	ldrh	r3, [r4, #12]
 800f296:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f29a:	81a3      	strh	r3, [r4, #12]
 800f29c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f2a0:	e7e9      	b.n	800f276 <__ssputs_r+0x8a>
	...

0800f2a4 <_svfiprintf_r>:
 800f2a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f2a8:	4698      	mov	r8, r3
 800f2aa:	898b      	ldrh	r3, [r1, #12]
 800f2ac:	061b      	lsls	r3, r3, #24
 800f2ae:	b09d      	sub	sp, #116	@ 0x74
 800f2b0:	4607      	mov	r7, r0
 800f2b2:	460d      	mov	r5, r1
 800f2b4:	4614      	mov	r4, r2
 800f2b6:	d510      	bpl.n	800f2da <_svfiprintf_r+0x36>
 800f2b8:	690b      	ldr	r3, [r1, #16]
 800f2ba:	b973      	cbnz	r3, 800f2da <_svfiprintf_r+0x36>
 800f2bc:	2140      	movs	r1, #64	@ 0x40
 800f2be:	f7ff fb87 	bl	800e9d0 <_malloc_r>
 800f2c2:	6028      	str	r0, [r5, #0]
 800f2c4:	6128      	str	r0, [r5, #16]
 800f2c6:	b930      	cbnz	r0, 800f2d6 <_svfiprintf_r+0x32>
 800f2c8:	230c      	movs	r3, #12
 800f2ca:	603b      	str	r3, [r7, #0]
 800f2cc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f2d0:	b01d      	add	sp, #116	@ 0x74
 800f2d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f2d6:	2340      	movs	r3, #64	@ 0x40
 800f2d8:	616b      	str	r3, [r5, #20]
 800f2da:	2300      	movs	r3, #0
 800f2dc:	9309      	str	r3, [sp, #36]	@ 0x24
 800f2de:	2320      	movs	r3, #32
 800f2e0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f2e4:	f8cd 800c 	str.w	r8, [sp, #12]
 800f2e8:	2330      	movs	r3, #48	@ 0x30
 800f2ea:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800f488 <_svfiprintf_r+0x1e4>
 800f2ee:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f2f2:	f04f 0901 	mov.w	r9, #1
 800f2f6:	4623      	mov	r3, r4
 800f2f8:	469a      	mov	sl, r3
 800f2fa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f2fe:	b10a      	cbz	r2, 800f304 <_svfiprintf_r+0x60>
 800f300:	2a25      	cmp	r2, #37	@ 0x25
 800f302:	d1f9      	bne.n	800f2f8 <_svfiprintf_r+0x54>
 800f304:	ebba 0b04 	subs.w	fp, sl, r4
 800f308:	d00b      	beq.n	800f322 <_svfiprintf_r+0x7e>
 800f30a:	465b      	mov	r3, fp
 800f30c:	4622      	mov	r2, r4
 800f30e:	4629      	mov	r1, r5
 800f310:	4638      	mov	r0, r7
 800f312:	f7ff ff6b 	bl	800f1ec <__ssputs_r>
 800f316:	3001      	adds	r0, #1
 800f318:	f000 80a7 	beq.w	800f46a <_svfiprintf_r+0x1c6>
 800f31c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f31e:	445a      	add	r2, fp
 800f320:	9209      	str	r2, [sp, #36]	@ 0x24
 800f322:	f89a 3000 	ldrb.w	r3, [sl]
 800f326:	2b00      	cmp	r3, #0
 800f328:	f000 809f 	beq.w	800f46a <_svfiprintf_r+0x1c6>
 800f32c:	2300      	movs	r3, #0
 800f32e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800f332:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f336:	f10a 0a01 	add.w	sl, sl, #1
 800f33a:	9304      	str	r3, [sp, #16]
 800f33c:	9307      	str	r3, [sp, #28]
 800f33e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f342:	931a      	str	r3, [sp, #104]	@ 0x68
 800f344:	4654      	mov	r4, sl
 800f346:	2205      	movs	r2, #5
 800f348:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f34c:	484e      	ldr	r0, [pc, #312]	@ (800f488 <_svfiprintf_r+0x1e4>)
 800f34e:	f7f0 ff3f 	bl	80001d0 <memchr>
 800f352:	9a04      	ldr	r2, [sp, #16]
 800f354:	b9d8      	cbnz	r0, 800f38e <_svfiprintf_r+0xea>
 800f356:	06d0      	lsls	r0, r2, #27
 800f358:	bf44      	itt	mi
 800f35a:	2320      	movmi	r3, #32
 800f35c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f360:	0711      	lsls	r1, r2, #28
 800f362:	bf44      	itt	mi
 800f364:	232b      	movmi	r3, #43	@ 0x2b
 800f366:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f36a:	f89a 3000 	ldrb.w	r3, [sl]
 800f36e:	2b2a      	cmp	r3, #42	@ 0x2a
 800f370:	d015      	beq.n	800f39e <_svfiprintf_r+0xfa>
 800f372:	9a07      	ldr	r2, [sp, #28]
 800f374:	4654      	mov	r4, sl
 800f376:	2000      	movs	r0, #0
 800f378:	f04f 0c0a 	mov.w	ip, #10
 800f37c:	4621      	mov	r1, r4
 800f37e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f382:	3b30      	subs	r3, #48	@ 0x30
 800f384:	2b09      	cmp	r3, #9
 800f386:	d94b      	bls.n	800f420 <_svfiprintf_r+0x17c>
 800f388:	b1b0      	cbz	r0, 800f3b8 <_svfiprintf_r+0x114>
 800f38a:	9207      	str	r2, [sp, #28]
 800f38c:	e014      	b.n	800f3b8 <_svfiprintf_r+0x114>
 800f38e:	eba0 0308 	sub.w	r3, r0, r8
 800f392:	fa09 f303 	lsl.w	r3, r9, r3
 800f396:	4313      	orrs	r3, r2
 800f398:	9304      	str	r3, [sp, #16]
 800f39a:	46a2      	mov	sl, r4
 800f39c:	e7d2      	b.n	800f344 <_svfiprintf_r+0xa0>
 800f39e:	9b03      	ldr	r3, [sp, #12]
 800f3a0:	1d19      	adds	r1, r3, #4
 800f3a2:	681b      	ldr	r3, [r3, #0]
 800f3a4:	9103      	str	r1, [sp, #12]
 800f3a6:	2b00      	cmp	r3, #0
 800f3a8:	bfbb      	ittet	lt
 800f3aa:	425b      	neglt	r3, r3
 800f3ac:	f042 0202 	orrlt.w	r2, r2, #2
 800f3b0:	9307      	strge	r3, [sp, #28]
 800f3b2:	9307      	strlt	r3, [sp, #28]
 800f3b4:	bfb8      	it	lt
 800f3b6:	9204      	strlt	r2, [sp, #16]
 800f3b8:	7823      	ldrb	r3, [r4, #0]
 800f3ba:	2b2e      	cmp	r3, #46	@ 0x2e
 800f3bc:	d10a      	bne.n	800f3d4 <_svfiprintf_r+0x130>
 800f3be:	7863      	ldrb	r3, [r4, #1]
 800f3c0:	2b2a      	cmp	r3, #42	@ 0x2a
 800f3c2:	d132      	bne.n	800f42a <_svfiprintf_r+0x186>
 800f3c4:	9b03      	ldr	r3, [sp, #12]
 800f3c6:	1d1a      	adds	r2, r3, #4
 800f3c8:	681b      	ldr	r3, [r3, #0]
 800f3ca:	9203      	str	r2, [sp, #12]
 800f3cc:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f3d0:	3402      	adds	r4, #2
 800f3d2:	9305      	str	r3, [sp, #20]
 800f3d4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800f498 <_svfiprintf_r+0x1f4>
 800f3d8:	7821      	ldrb	r1, [r4, #0]
 800f3da:	2203      	movs	r2, #3
 800f3dc:	4650      	mov	r0, sl
 800f3de:	f7f0 fef7 	bl	80001d0 <memchr>
 800f3e2:	b138      	cbz	r0, 800f3f4 <_svfiprintf_r+0x150>
 800f3e4:	9b04      	ldr	r3, [sp, #16]
 800f3e6:	eba0 000a 	sub.w	r0, r0, sl
 800f3ea:	2240      	movs	r2, #64	@ 0x40
 800f3ec:	4082      	lsls	r2, r0
 800f3ee:	4313      	orrs	r3, r2
 800f3f0:	3401      	adds	r4, #1
 800f3f2:	9304      	str	r3, [sp, #16]
 800f3f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f3f8:	4824      	ldr	r0, [pc, #144]	@ (800f48c <_svfiprintf_r+0x1e8>)
 800f3fa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f3fe:	2206      	movs	r2, #6
 800f400:	f7f0 fee6 	bl	80001d0 <memchr>
 800f404:	2800      	cmp	r0, #0
 800f406:	d036      	beq.n	800f476 <_svfiprintf_r+0x1d2>
 800f408:	4b21      	ldr	r3, [pc, #132]	@ (800f490 <_svfiprintf_r+0x1ec>)
 800f40a:	bb1b      	cbnz	r3, 800f454 <_svfiprintf_r+0x1b0>
 800f40c:	9b03      	ldr	r3, [sp, #12]
 800f40e:	3307      	adds	r3, #7
 800f410:	f023 0307 	bic.w	r3, r3, #7
 800f414:	3308      	adds	r3, #8
 800f416:	9303      	str	r3, [sp, #12]
 800f418:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f41a:	4433      	add	r3, r6
 800f41c:	9309      	str	r3, [sp, #36]	@ 0x24
 800f41e:	e76a      	b.n	800f2f6 <_svfiprintf_r+0x52>
 800f420:	fb0c 3202 	mla	r2, ip, r2, r3
 800f424:	460c      	mov	r4, r1
 800f426:	2001      	movs	r0, #1
 800f428:	e7a8      	b.n	800f37c <_svfiprintf_r+0xd8>
 800f42a:	2300      	movs	r3, #0
 800f42c:	3401      	adds	r4, #1
 800f42e:	9305      	str	r3, [sp, #20]
 800f430:	4619      	mov	r1, r3
 800f432:	f04f 0c0a 	mov.w	ip, #10
 800f436:	4620      	mov	r0, r4
 800f438:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f43c:	3a30      	subs	r2, #48	@ 0x30
 800f43e:	2a09      	cmp	r2, #9
 800f440:	d903      	bls.n	800f44a <_svfiprintf_r+0x1a6>
 800f442:	2b00      	cmp	r3, #0
 800f444:	d0c6      	beq.n	800f3d4 <_svfiprintf_r+0x130>
 800f446:	9105      	str	r1, [sp, #20]
 800f448:	e7c4      	b.n	800f3d4 <_svfiprintf_r+0x130>
 800f44a:	fb0c 2101 	mla	r1, ip, r1, r2
 800f44e:	4604      	mov	r4, r0
 800f450:	2301      	movs	r3, #1
 800f452:	e7f0      	b.n	800f436 <_svfiprintf_r+0x192>
 800f454:	ab03      	add	r3, sp, #12
 800f456:	9300      	str	r3, [sp, #0]
 800f458:	462a      	mov	r2, r5
 800f45a:	4b0e      	ldr	r3, [pc, #56]	@ (800f494 <_svfiprintf_r+0x1f0>)
 800f45c:	a904      	add	r1, sp, #16
 800f45e:	4638      	mov	r0, r7
 800f460:	f7fd fd1a 	bl	800ce98 <_printf_float>
 800f464:	1c42      	adds	r2, r0, #1
 800f466:	4606      	mov	r6, r0
 800f468:	d1d6      	bne.n	800f418 <_svfiprintf_r+0x174>
 800f46a:	89ab      	ldrh	r3, [r5, #12]
 800f46c:	065b      	lsls	r3, r3, #25
 800f46e:	f53f af2d 	bmi.w	800f2cc <_svfiprintf_r+0x28>
 800f472:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f474:	e72c      	b.n	800f2d0 <_svfiprintf_r+0x2c>
 800f476:	ab03      	add	r3, sp, #12
 800f478:	9300      	str	r3, [sp, #0]
 800f47a:	462a      	mov	r2, r5
 800f47c:	4b05      	ldr	r3, [pc, #20]	@ (800f494 <_svfiprintf_r+0x1f0>)
 800f47e:	a904      	add	r1, sp, #16
 800f480:	4638      	mov	r0, r7
 800f482:	f7fd ffa1 	bl	800d3c8 <_printf_i>
 800f486:	e7ed      	b.n	800f464 <_svfiprintf_r+0x1c0>
 800f488:	08010fe8 	.word	0x08010fe8
 800f48c:	08010ff2 	.word	0x08010ff2
 800f490:	0800ce99 	.word	0x0800ce99
 800f494:	0800f1ed 	.word	0x0800f1ed
 800f498:	08010fee 	.word	0x08010fee

0800f49c <__sfputc_r>:
 800f49c:	6893      	ldr	r3, [r2, #8]
 800f49e:	3b01      	subs	r3, #1
 800f4a0:	2b00      	cmp	r3, #0
 800f4a2:	b410      	push	{r4}
 800f4a4:	6093      	str	r3, [r2, #8]
 800f4a6:	da08      	bge.n	800f4ba <__sfputc_r+0x1e>
 800f4a8:	6994      	ldr	r4, [r2, #24]
 800f4aa:	42a3      	cmp	r3, r4
 800f4ac:	db01      	blt.n	800f4b2 <__sfputc_r+0x16>
 800f4ae:	290a      	cmp	r1, #10
 800f4b0:	d103      	bne.n	800f4ba <__sfputc_r+0x1e>
 800f4b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f4b6:	f7fe ba50 	b.w	800d95a <__swbuf_r>
 800f4ba:	6813      	ldr	r3, [r2, #0]
 800f4bc:	1c58      	adds	r0, r3, #1
 800f4be:	6010      	str	r0, [r2, #0]
 800f4c0:	7019      	strb	r1, [r3, #0]
 800f4c2:	4608      	mov	r0, r1
 800f4c4:	f85d 4b04 	ldr.w	r4, [sp], #4
 800f4c8:	4770      	bx	lr

0800f4ca <__sfputs_r>:
 800f4ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f4cc:	4606      	mov	r6, r0
 800f4ce:	460f      	mov	r7, r1
 800f4d0:	4614      	mov	r4, r2
 800f4d2:	18d5      	adds	r5, r2, r3
 800f4d4:	42ac      	cmp	r4, r5
 800f4d6:	d101      	bne.n	800f4dc <__sfputs_r+0x12>
 800f4d8:	2000      	movs	r0, #0
 800f4da:	e007      	b.n	800f4ec <__sfputs_r+0x22>
 800f4dc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f4e0:	463a      	mov	r2, r7
 800f4e2:	4630      	mov	r0, r6
 800f4e4:	f7ff ffda 	bl	800f49c <__sfputc_r>
 800f4e8:	1c43      	adds	r3, r0, #1
 800f4ea:	d1f3      	bne.n	800f4d4 <__sfputs_r+0xa>
 800f4ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800f4f0 <_vfiprintf_r>:
 800f4f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f4f4:	460d      	mov	r5, r1
 800f4f6:	b09d      	sub	sp, #116	@ 0x74
 800f4f8:	4614      	mov	r4, r2
 800f4fa:	4698      	mov	r8, r3
 800f4fc:	4606      	mov	r6, r0
 800f4fe:	b118      	cbz	r0, 800f508 <_vfiprintf_r+0x18>
 800f500:	6a03      	ldr	r3, [r0, #32]
 800f502:	b90b      	cbnz	r3, 800f508 <_vfiprintf_r+0x18>
 800f504:	f7fe f90c 	bl	800d720 <__sinit>
 800f508:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f50a:	07d9      	lsls	r1, r3, #31
 800f50c:	d405      	bmi.n	800f51a <_vfiprintf_r+0x2a>
 800f50e:	89ab      	ldrh	r3, [r5, #12]
 800f510:	059a      	lsls	r2, r3, #22
 800f512:	d402      	bmi.n	800f51a <_vfiprintf_r+0x2a>
 800f514:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f516:	f7fe fb88 	bl	800dc2a <__retarget_lock_acquire_recursive>
 800f51a:	89ab      	ldrh	r3, [r5, #12]
 800f51c:	071b      	lsls	r3, r3, #28
 800f51e:	d501      	bpl.n	800f524 <_vfiprintf_r+0x34>
 800f520:	692b      	ldr	r3, [r5, #16]
 800f522:	b99b      	cbnz	r3, 800f54c <_vfiprintf_r+0x5c>
 800f524:	4629      	mov	r1, r5
 800f526:	4630      	mov	r0, r6
 800f528:	f7fe fa56 	bl	800d9d8 <__swsetup_r>
 800f52c:	b170      	cbz	r0, 800f54c <_vfiprintf_r+0x5c>
 800f52e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f530:	07dc      	lsls	r4, r3, #31
 800f532:	d504      	bpl.n	800f53e <_vfiprintf_r+0x4e>
 800f534:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f538:	b01d      	add	sp, #116	@ 0x74
 800f53a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f53e:	89ab      	ldrh	r3, [r5, #12]
 800f540:	0598      	lsls	r0, r3, #22
 800f542:	d4f7      	bmi.n	800f534 <_vfiprintf_r+0x44>
 800f544:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f546:	f7fe fb71 	bl	800dc2c <__retarget_lock_release_recursive>
 800f54a:	e7f3      	b.n	800f534 <_vfiprintf_r+0x44>
 800f54c:	2300      	movs	r3, #0
 800f54e:	9309      	str	r3, [sp, #36]	@ 0x24
 800f550:	2320      	movs	r3, #32
 800f552:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800f556:	f8cd 800c 	str.w	r8, [sp, #12]
 800f55a:	2330      	movs	r3, #48	@ 0x30
 800f55c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800f70c <_vfiprintf_r+0x21c>
 800f560:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800f564:	f04f 0901 	mov.w	r9, #1
 800f568:	4623      	mov	r3, r4
 800f56a:	469a      	mov	sl, r3
 800f56c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f570:	b10a      	cbz	r2, 800f576 <_vfiprintf_r+0x86>
 800f572:	2a25      	cmp	r2, #37	@ 0x25
 800f574:	d1f9      	bne.n	800f56a <_vfiprintf_r+0x7a>
 800f576:	ebba 0b04 	subs.w	fp, sl, r4
 800f57a:	d00b      	beq.n	800f594 <_vfiprintf_r+0xa4>
 800f57c:	465b      	mov	r3, fp
 800f57e:	4622      	mov	r2, r4
 800f580:	4629      	mov	r1, r5
 800f582:	4630      	mov	r0, r6
 800f584:	f7ff ffa1 	bl	800f4ca <__sfputs_r>
 800f588:	3001      	adds	r0, #1
 800f58a:	f000 80a7 	beq.w	800f6dc <_vfiprintf_r+0x1ec>
 800f58e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800f590:	445a      	add	r2, fp
 800f592:	9209      	str	r2, [sp, #36]	@ 0x24
 800f594:	f89a 3000 	ldrb.w	r3, [sl]
 800f598:	2b00      	cmp	r3, #0
 800f59a:	f000 809f 	beq.w	800f6dc <_vfiprintf_r+0x1ec>
 800f59e:	2300      	movs	r3, #0
 800f5a0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800f5a4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800f5a8:	f10a 0a01 	add.w	sl, sl, #1
 800f5ac:	9304      	str	r3, [sp, #16]
 800f5ae:	9307      	str	r3, [sp, #28]
 800f5b0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800f5b4:	931a      	str	r3, [sp, #104]	@ 0x68
 800f5b6:	4654      	mov	r4, sl
 800f5b8:	2205      	movs	r2, #5
 800f5ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f5be:	4853      	ldr	r0, [pc, #332]	@ (800f70c <_vfiprintf_r+0x21c>)
 800f5c0:	f7f0 fe06 	bl	80001d0 <memchr>
 800f5c4:	9a04      	ldr	r2, [sp, #16]
 800f5c6:	b9d8      	cbnz	r0, 800f600 <_vfiprintf_r+0x110>
 800f5c8:	06d1      	lsls	r1, r2, #27
 800f5ca:	bf44      	itt	mi
 800f5cc:	2320      	movmi	r3, #32
 800f5ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f5d2:	0713      	lsls	r3, r2, #28
 800f5d4:	bf44      	itt	mi
 800f5d6:	232b      	movmi	r3, #43	@ 0x2b
 800f5d8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800f5dc:	f89a 3000 	ldrb.w	r3, [sl]
 800f5e0:	2b2a      	cmp	r3, #42	@ 0x2a
 800f5e2:	d015      	beq.n	800f610 <_vfiprintf_r+0x120>
 800f5e4:	9a07      	ldr	r2, [sp, #28]
 800f5e6:	4654      	mov	r4, sl
 800f5e8:	2000      	movs	r0, #0
 800f5ea:	f04f 0c0a 	mov.w	ip, #10
 800f5ee:	4621      	mov	r1, r4
 800f5f0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800f5f4:	3b30      	subs	r3, #48	@ 0x30
 800f5f6:	2b09      	cmp	r3, #9
 800f5f8:	d94b      	bls.n	800f692 <_vfiprintf_r+0x1a2>
 800f5fa:	b1b0      	cbz	r0, 800f62a <_vfiprintf_r+0x13a>
 800f5fc:	9207      	str	r2, [sp, #28]
 800f5fe:	e014      	b.n	800f62a <_vfiprintf_r+0x13a>
 800f600:	eba0 0308 	sub.w	r3, r0, r8
 800f604:	fa09 f303 	lsl.w	r3, r9, r3
 800f608:	4313      	orrs	r3, r2
 800f60a:	9304      	str	r3, [sp, #16]
 800f60c:	46a2      	mov	sl, r4
 800f60e:	e7d2      	b.n	800f5b6 <_vfiprintf_r+0xc6>
 800f610:	9b03      	ldr	r3, [sp, #12]
 800f612:	1d19      	adds	r1, r3, #4
 800f614:	681b      	ldr	r3, [r3, #0]
 800f616:	9103      	str	r1, [sp, #12]
 800f618:	2b00      	cmp	r3, #0
 800f61a:	bfbb      	ittet	lt
 800f61c:	425b      	neglt	r3, r3
 800f61e:	f042 0202 	orrlt.w	r2, r2, #2
 800f622:	9307      	strge	r3, [sp, #28]
 800f624:	9307      	strlt	r3, [sp, #28]
 800f626:	bfb8      	it	lt
 800f628:	9204      	strlt	r2, [sp, #16]
 800f62a:	7823      	ldrb	r3, [r4, #0]
 800f62c:	2b2e      	cmp	r3, #46	@ 0x2e
 800f62e:	d10a      	bne.n	800f646 <_vfiprintf_r+0x156>
 800f630:	7863      	ldrb	r3, [r4, #1]
 800f632:	2b2a      	cmp	r3, #42	@ 0x2a
 800f634:	d132      	bne.n	800f69c <_vfiprintf_r+0x1ac>
 800f636:	9b03      	ldr	r3, [sp, #12]
 800f638:	1d1a      	adds	r2, r3, #4
 800f63a:	681b      	ldr	r3, [r3, #0]
 800f63c:	9203      	str	r2, [sp, #12]
 800f63e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800f642:	3402      	adds	r4, #2
 800f644:	9305      	str	r3, [sp, #20]
 800f646:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800f71c <_vfiprintf_r+0x22c>
 800f64a:	7821      	ldrb	r1, [r4, #0]
 800f64c:	2203      	movs	r2, #3
 800f64e:	4650      	mov	r0, sl
 800f650:	f7f0 fdbe 	bl	80001d0 <memchr>
 800f654:	b138      	cbz	r0, 800f666 <_vfiprintf_r+0x176>
 800f656:	9b04      	ldr	r3, [sp, #16]
 800f658:	eba0 000a 	sub.w	r0, r0, sl
 800f65c:	2240      	movs	r2, #64	@ 0x40
 800f65e:	4082      	lsls	r2, r0
 800f660:	4313      	orrs	r3, r2
 800f662:	3401      	adds	r4, #1
 800f664:	9304      	str	r3, [sp, #16]
 800f666:	f814 1b01 	ldrb.w	r1, [r4], #1
 800f66a:	4829      	ldr	r0, [pc, #164]	@ (800f710 <_vfiprintf_r+0x220>)
 800f66c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800f670:	2206      	movs	r2, #6
 800f672:	f7f0 fdad 	bl	80001d0 <memchr>
 800f676:	2800      	cmp	r0, #0
 800f678:	d03f      	beq.n	800f6fa <_vfiprintf_r+0x20a>
 800f67a:	4b26      	ldr	r3, [pc, #152]	@ (800f714 <_vfiprintf_r+0x224>)
 800f67c:	bb1b      	cbnz	r3, 800f6c6 <_vfiprintf_r+0x1d6>
 800f67e:	9b03      	ldr	r3, [sp, #12]
 800f680:	3307      	adds	r3, #7
 800f682:	f023 0307 	bic.w	r3, r3, #7
 800f686:	3308      	adds	r3, #8
 800f688:	9303      	str	r3, [sp, #12]
 800f68a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800f68c:	443b      	add	r3, r7
 800f68e:	9309      	str	r3, [sp, #36]	@ 0x24
 800f690:	e76a      	b.n	800f568 <_vfiprintf_r+0x78>
 800f692:	fb0c 3202 	mla	r2, ip, r2, r3
 800f696:	460c      	mov	r4, r1
 800f698:	2001      	movs	r0, #1
 800f69a:	e7a8      	b.n	800f5ee <_vfiprintf_r+0xfe>
 800f69c:	2300      	movs	r3, #0
 800f69e:	3401      	adds	r4, #1
 800f6a0:	9305      	str	r3, [sp, #20]
 800f6a2:	4619      	mov	r1, r3
 800f6a4:	f04f 0c0a 	mov.w	ip, #10
 800f6a8:	4620      	mov	r0, r4
 800f6aa:	f810 2b01 	ldrb.w	r2, [r0], #1
 800f6ae:	3a30      	subs	r2, #48	@ 0x30
 800f6b0:	2a09      	cmp	r2, #9
 800f6b2:	d903      	bls.n	800f6bc <_vfiprintf_r+0x1cc>
 800f6b4:	2b00      	cmp	r3, #0
 800f6b6:	d0c6      	beq.n	800f646 <_vfiprintf_r+0x156>
 800f6b8:	9105      	str	r1, [sp, #20]
 800f6ba:	e7c4      	b.n	800f646 <_vfiprintf_r+0x156>
 800f6bc:	fb0c 2101 	mla	r1, ip, r1, r2
 800f6c0:	4604      	mov	r4, r0
 800f6c2:	2301      	movs	r3, #1
 800f6c4:	e7f0      	b.n	800f6a8 <_vfiprintf_r+0x1b8>
 800f6c6:	ab03      	add	r3, sp, #12
 800f6c8:	9300      	str	r3, [sp, #0]
 800f6ca:	462a      	mov	r2, r5
 800f6cc:	4b12      	ldr	r3, [pc, #72]	@ (800f718 <_vfiprintf_r+0x228>)
 800f6ce:	a904      	add	r1, sp, #16
 800f6d0:	4630      	mov	r0, r6
 800f6d2:	f7fd fbe1 	bl	800ce98 <_printf_float>
 800f6d6:	4607      	mov	r7, r0
 800f6d8:	1c78      	adds	r0, r7, #1
 800f6da:	d1d6      	bne.n	800f68a <_vfiprintf_r+0x19a>
 800f6dc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800f6de:	07d9      	lsls	r1, r3, #31
 800f6e0:	d405      	bmi.n	800f6ee <_vfiprintf_r+0x1fe>
 800f6e2:	89ab      	ldrh	r3, [r5, #12]
 800f6e4:	059a      	lsls	r2, r3, #22
 800f6e6:	d402      	bmi.n	800f6ee <_vfiprintf_r+0x1fe>
 800f6e8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800f6ea:	f7fe fa9f 	bl	800dc2c <__retarget_lock_release_recursive>
 800f6ee:	89ab      	ldrh	r3, [r5, #12]
 800f6f0:	065b      	lsls	r3, r3, #25
 800f6f2:	f53f af1f 	bmi.w	800f534 <_vfiprintf_r+0x44>
 800f6f6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800f6f8:	e71e      	b.n	800f538 <_vfiprintf_r+0x48>
 800f6fa:	ab03      	add	r3, sp, #12
 800f6fc:	9300      	str	r3, [sp, #0]
 800f6fe:	462a      	mov	r2, r5
 800f700:	4b05      	ldr	r3, [pc, #20]	@ (800f718 <_vfiprintf_r+0x228>)
 800f702:	a904      	add	r1, sp, #16
 800f704:	4630      	mov	r0, r6
 800f706:	f7fd fe5f 	bl	800d3c8 <_printf_i>
 800f70a:	e7e4      	b.n	800f6d6 <_vfiprintf_r+0x1e6>
 800f70c:	08010fe8 	.word	0x08010fe8
 800f710:	08010ff2 	.word	0x08010ff2
 800f714:	0800ce99 	.word	0x0800ce99
 800f718:	0800f4cb 	.word	0x0800f4cb
 800f71c:	08010fee 	.word	0x08010fee

0800f720 <__sflush_r>:
 800f720:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800f724:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f728:	0716      	lsls	r6, r2, #28
 800f72a:	4605      	mov	r5, r0
 800f72c:	460c      	mov	r4, r1
 800f72e:	d454      	bmi.n	800f7da <__sflush_r+0xba>
 800f730:	684b      	ldr	r3, [r1, #4]
 800f732:	2b00      	cmp	r3, #0
 800f734:	dc02      	bgt.n	800f73c <__sflush_r+0x1c>
 800f736:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800f738:	2b00      	cmp	r3, #0
 800f73a:	dd48      	ble.n	800f7ce <__sflush_r+0xae>
 800f73c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f73e:	2e00      	cmp	r6, #0
 800f740:	d045      	beq.n	800f7ce <__sflush_r+0xae>
 800f742:	2300      	movs	r3, #0
 800f744:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800f748:	682f      	ldr	r7, [r5, #0]
 800f74a:	6a21      	ldr	r1, [r4, #32]
 800f74c:	602b      	str	r3, [r5, #0]
 800f74e:	d030      	beq.n	800f7b2 <__sflush_r+0x92>
 800f750:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800f752:	89a3      	ldrh	r3, [r4, #12]
 800f754:	0759      	lsls	r1, r3, #29
 800f756:	d505      	bpl.n	800f764 <__sflush_r+0x44>
 800f758:	6863      	ldr	r3, [r4, #4]
 800f75a:	1ad2      	subs	r2, r2, r3
 800f75c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800f75e:	b10b      	cbz	r3, 800f764 <__sflush_r+0x44>
 800f760:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800f762:	1ad2      	subs	r2, r2, r3
 800f764:	2300      	movs	r3, #0
 800f766:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800f768:	6a21      	ldr	r1, [r4, #32]
 800f76a:	4628      	mov	r0, r5
 800f76c:	47b0      	blx	r6
 800f76e:	1c43      	adds	r3, r0, #1
 800f770:	89a3      	ldrh	r3, [r4, #12]
 800f772:	d106      	bne.n	800f782 <__sflush_r+0x62>
 800f774:	6829      	ldr	r1, [r5, #0]
 800f776:	291d      	cmp	r1, #29
 800f778:	d82b      	bhi.n	800f7d2 <__sflush_r+0xb2>
 800f77a:	4a2a      	ldr	r2, [pc, #168]	@ (800f824 <__sflush_r+0x104>)
 800f77c:	410a      	asrs	r2, r1
 800f77e:	07d6      	lsls	r6, r2, #31
 800f780:	d427      	bmi.n	800f7d2 <__sflush_r+0xb2>
 800f782:	2200      	movs	r2, #0
 800f784:	6062      	str	r2, [r4, #4]
 800f786:	04d9      	lsls	r1, r3, #19
 800f788:	6922      	ldr	r2, [r4, #16]
 800f78a:	6022      	str	r2, [r4, #0]
 800f78c:	d504      	bpl.n	800f798 <__sflush_r+0x78>
 800f78e:	1c42      	adds	r2, r0, #1
 800f790:	d101      	bne.n	800f796 <__sflush_r+0x76>
 800f792:	682b      	ldr	r3, [r5, #0]
 800f794:	b903      	cbnz	r3, 800f798 <__sflush_r+0x78>
 800f796:	6560      	str	r0, [r4, #84]	@ 0x54
 800f798:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800f79a:	602f      	str	r7, [r5, #0]
 800f79c:	b1b9      	cbz	r1, 800f7ce <__sflush_r+0xae>
 800f79e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800f7a2:	4299      	cmp	r1, r3
 800f7a4:	d002      	beq.n	800f7ac <__sflush_r+0x8c>
 800f7a6:	4628      	mov	r0, r5
 800f7a8:	f7ff f89e 	bl	800e8e8 <_free_r>
 800f7ac:	2300      	movs	r3, #0
 800f7ae:	6363      	str	r3, [r4, #52]	@ 0x34
 800f7b0:	e00d      	b.n	800f7ce <__sflush_r+0xae>
 800f7b2:	2301      	movs	r3, #1
 800f7b4:	4628      	mov	r0, r5
 800f7b6:	47b0      	blx	r6
 800f7b8:	4602      	mov	r2, r0
 800f7ba:	1c50      	adds	r0, r2, #1
 800f7bc:	d1c9      	bne.n	800f752 <__sflush_r+0x32>
 800f7be:	682b      	ldr	r3, [r5, #0]
 800f7c0:	2b00      	cmp	r3, #0
 800f7c2:	d0c6      	beq.n	800f752 <__sflush_r+0x32>
 800f7c4:	2b1d      	cmp	r3, #29
 800f7c6:	d001      	beq.n	800f7cc <__sflush_r+0xac>
 800f7c8:	2b16      	cmp	r3, #22
 800f7ca:	d11e      	bne.n	800f80a <__sflush_r+0xea>
 800f7cc:	602f      	str	r7, [r5, #0]
 800f7ce:	2000      	movs	r0, #0
 800f7d0:	e022      	b.n	800f818 <__sflush_r+0xf8>
 800f7d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f7d6:	b21b      	sxth	r3, r3
 800f7d8:	e01b      	b.n	800f812 <__sflush_r+0xf2>
 800f7da:	690f      	ldr	r7, [r1, #16]
 800f7dc:	2f00      	cmp	r7, #0
 800f7de:	d0f6      	beq.n	800f7ce <__sflush_r+0xae>
 800f7e0:	0793      	lsls	r3, r2, #30
 800f7e2:	680e      	ldr	r6, [r1, #0]
 800f7e4:	bf08      	it	eq
 800f7e6:	694b      	ldreq	r3, [r1, #20]
 800f7e8:	600f      	str	r7, [r1, #0]
 800f7ea:	bf18      	it	ne
 800f7ec:	2300      	movne	r3, #0
 800f7ee:	eba6 0807 	sub.w	r8, r6, r7
 800f7f2:	608b      	str	r3, [r1, #8]
 800f7f4:	f1b8 0f00 	cmp.w	r8, #0
 800f7f8:	dde9      	ble.n	800f7ce <__sflush_r+0xae>
 800f7fa:	6a21      	ldr	r1, [r4, #32]
 800f7fc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800f7fe:	4643      	mov	r3, r8
 800f800:	463a      	mov	r2, r7
 800f802:	4628      	mov	r0, r5
 800f804:	47b0      	blx	r6
 800f806:	2800      	cmp	r0, #0
 800f808:	dc08      	bgt.n	800f81c <__sflush_r+0xfc>
 800f80a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f80e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800f812:	81a3      	strh	r3, [r4, #12]
 800f814:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800f818:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f81c:	4407      	add	r7, r0
 800f81e:	eba8 0800 	sub.w	r8, r8, r0
 800f822:	e7e7      	b.n	800f7f4 <__sflush_r+0xd4>
 800f824:	dfbffffe 	.word	0xdfbffffe

0800f828 <_fflush_r>:
 800f828:	b538      	push	{r3, r4, r5, lr}
 800f82a:	690b      	ldr	r3, [r1, #16]
 800f82c:	4605      	mov	r5, r0
 800f82e:	460c      	mov	r4, r1
 800f830:	b913      	cbnz	r3, 800f838 <_fflush_r+0x10>
 800f832:	2500      	movs	r5, #0
 800f834:	4628      	mov	r0, r5
 800f836:	bd38      	pop	{r3, r4, r5, pc}
 800f838:	b118      	cbz	r0, 800f842 <_fflush_r+0x1a>
 800f83a:	6a03      	ldr	r3, [r0, #32]
 800f83c:	b90b      	cbnz	r3, 800f842 <_fflush_r+0x1a>
 800f83e:	f7fd ff6f 	bl	800d720 <__sinit>
 800f842:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f846:	2b00      	cmp	r3, #0
 800f848:	d0f3      	beq.n	800f832 <_fflush_r+0xa>
 800f84a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800f84c:	07d0      	lsls	r0, r2, #31
 800f84e:	d404      	bmi.n	800f85a <_fflush_r+0x32>
 800f850:	0599      	lsls	r1, r3, #22
 800f852:	d402      	bmi.n	800f85a <_fflush_r+0x32>
 800f854:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f856:	f7fe f9e8 	bl	800dc2a <__retarget_lock_acquire_recursive>
 800f85a:	4628      	mov	r0, r5
 800f85c:	4621      	mov	r1, r4
 800f85e:	f7ff ff5f 	bl	800f720 <__sflush_r>
 800f862:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800f864:	07da      	lsls	r2, r3, #31
 800f866:	4605      	mov	r5, r0
 800f868:	d4e4      	bmi.n	800f834 <_fflush_r+0xc>
 800f86a:	89a3      	ldrh	r3, [r4, #12]
 800f86c:	059b      	lsls	r3, r3, #22
 800f86e:	d4e1      	bmi.n	800f834 <_fflush_r+0xc>
 800f870:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800f872:	f7fe f9db 	bl	800dc2c <__retarget_lock_release_recursive>
 800f876:	e7dd      	b.n	800f834 <_fflush_r+0xc>

0800f878 <__swhatbuf_r>:
 800f878:	b570      	push	{r4, r5, r6, lr}
 800f87a:	460c      	mov	r4, r1
 800f87c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f880:	2900      	cmp	r1, #0
 800f882:	b096      	sub	sp, #88	@ 0x58
 800f884:	4615      	mov	r5, r2
 800f886:	461e      	mov	r6, r3
 800f888:	da0d      	bge.n	800f8a6 <__swhatbuf_r+0x2e>
 800f88a:	89a3      	ldrh	r3, [r4, #12]
 800f88c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800f890:	f04f 0100 	mov.w	r1, #0
 800f894:	bf14      	ite	ne
 800f896:	2340      	movne	r3, #64	@ 0x40
 800f898:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800f89c:	2000      	movs	r0, #0
 800f89e:	6031      	str	r1, [r6, #0]
 800f8a0:	602b      	str	r3, [r5, #0]
 800f8a2:	b016      	add	sp, #88	@ 0x58
 800f8a4:	bd70      	pop	{r4, r5, r6, pc}
 800f8a6:	466a      	mov	r2, sp
 800f8a8:	f000 f862 	bl	800f970 <_fstat_r>
 800f8ac:	2800      	cmp	r0, #0
 800f8ae:	dbec      	blt.n	800f88a <__swhatbuf_r+0x12>
 800f8b0:	9901      	ldr	r1, [sp, #4]
 800f8b2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800f8b6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800f8ba:	4259      	negs	r1, r3
 800f8bc:	4159      	adcs	r1, r3
 800f8be:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800f8c2:	e7eb      	b.n	800f89c <__swhatbuf_r+0x24>

0800f8c4 <__smakebuf_r>:
 800f8c4:	898b      	ldrh	r3, [r1, #12]
 800f8c6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800f8c8:	079d      	lsls	r5, r3, #30
 800f8ca:	4606      	mov	r6, r0
 800f8cc:	460c      	mov	r4, r1
 800f8ce:	d507      	bpl.n	800f8e0 <__smakebuf_r+0x1c>
 800f8d0:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800f8d4:	6023      	str	r3, [r4, #0]
 800f8d6:	6123      	str	r3, [r4, #16]
 800f8d8:	2301      	movs	r3, #1
 800f8da:	6163      	str	r3, [r4, #20]
 800f8dc:	b003      	add	sp, #12
 800f8de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f8e0:	ab01      	add	r3, sp, #4
 800f8e2:	466a      	mov	r2, sp
 800f8e4:	f7ff ffc8 	bl	800f878 <__swhatbuf_r>
 800f8e8:	9f00      	ldr	r7, [sp, #0]
 800f8ea:	4605      	mov	r5, r0
 800f8ec:	4639      	mov	r1, r7
 800f8ee:	4630      	mov	r0, r6
 800f8f0:	f7ff f86e 	bl	800e9d0 <_malloc_r>
 800f8f4:	b948      	cbnz	r0, 800f90a <__smakebuf_r+0x46>
 800f8f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f8fa:	059a      	lsls	r2, r3, #22
 800f8fc:	d4ee      	bmi.n	800f8dc <__smakebuf_r+0x18>
 800f8fe:	f023 0303 	bic.w	r3, r3, #3
 800f902:	f043 0302 	orr.w	r3, r3, #2
 800f906:	81a3      	strh	r3, [r4, #12]
 800f908:	e7e2      	b.n	800f8d0 <__smakebuf_r+0xc>
 800f90a:	89a3      	ldrh	r3, [r4, #12]
 800f90c:	6020      	str	r0, [r4, #0]
 800f90e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800f912:	81a3      	strh	r3, [r4, #12]
 800f914:	9b01      	ldr	r3, [sp, #4]
 800f916:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800f91a:	b15b      	cbz	r3, 800f934 <__smakebuf_r+0x70>
 800f91c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f920:	4630      	mov	r0, r6
 800f922:	f000 f837 	bl	800f994 <_isatty_r>
 800f926:	b128      	cbz	r0, 800f934 <__smakebuf_r+0x70>
 800f928:	89a3      	ldrh	r3, [r4, #12]
 800f92a:	f023 0303 	bic.w	r3, r3, #3
 800f92e:	f043 0301 	orr.w	r3, r3, #1
 800f932:	81a3      	strh	r3, [r4, #12]
 800f934:	89a3      	ldrh	r3, [r4, #12]
 800f936:	431d      	orrs	r5, r3
 800f938:	81a5      	strh	r5, [r4, #12]
 800f93a:	e7cf      	b.n	800f8dc <__smakebuf_r+0x18>

0800f93c <memmove>:
 800f93c:	4288      	cmp	r0, r1
 800f93e:	b510      	push	{r4, lr}
 800f940:	eb01 0402 	add.w	r4, r1, r2
 800f944:	d902      	bls.n	800f94c <memmove+0x10>
 800f946:	4284      	cmp	r4, r0
 800f948:	4623      	mov	r3, r4
 800f94a:	d807      	bhi.n	800f95c <memmove+0x20>
 800f94c:	1e43      	subs	r3, r0, #1
 800f94e:	42a1      	cmp	r1, r4
 800f950:	d008      	beq.n	800f964 <memmove+0x28>
 800f952:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f956:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f95a:	e7f8      	b.n	800f94e <memmove+0x12>
 800f95c:	4402      	add	r2, r0
 800f95e:	4601      	mov	r1, r0
 800f960:	428a      	cmp	r2, r1
 800f962:	d100      	bne.n	800f966 <memmove+0x2a>
 800f964:	bd10      	pop	{r4, pc}
 800f966:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f96a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f96e:	e7f7      	b.n	800f960 <memmove+0x24>

0800f970 <_fstat_r>:
 800f970:	b538      	push	{r3, r4, r5, lr}
 800f972:	4d07      	ldr	r5, [pc, #28]	@ (800f990 <_fstat_r+0x20>)
 800f974:	2300      	movs	r3, #0
 800f976:	4604      	mov	r4, r0
 800f978:	4608      	mov	r0, r1
 800f97a:	4611      	mov	r1, r2
 800f97c:	602b      	str	r3, [r5, #0]
 800f97e:	f7f3 ff2b 	bl	80037d8 <_fstat>
 800f982:	1c43      	adds	r3, r0, #1
 800f984:	d102      	bne.n	800f98c <_fstat_r+0x1c>
 800f986:	682b      	ldr	r3, [r5, #0]
 800f988:	b103      	cbz	r3, 800f98c <_fstat_r+0x1c>
 800f98a:	6023      	str	r3, [r4, #0]
 800f98c:	bd38      	pop	{r3, r4, r5, pc}
 800f98e:	bf00      	nop
 800f990:	200051bc 	.word	0x200051bc

0800f994 <_isatty_r>:
 800f994:	b538      	push	{r3, r4, r5, lr}
 800f996:	4d06      	ldr	r5, [pc, #24]	@ (800f9b0 <_isatty_r+0x1c>)
 800f998:	2300      	movs	r3, #0
 800f99a:	4604      	mov	r4, r0
 800f99c:	4608      	mov	r0, r1
 800f99e:	602b      	str	r3, [r5, #0]
 800f9a0:	f7f3 ff2a 	bl	80037f8 <_isatty>
 800f9a4:	1c43      	adds	r3, r0, #1
 800f9a6:	d102      	bne.n	800f9ae <_isatty_r+0x1a>
 800f9a8:	682b      	ldr	r3, [r5, #0]
 800f9aa:	b103      	cbz	r3, 800f9ae <_isatty_r+0x1a>
 800f9ac:	6023      	str	r3, [r4, #0]
 800f9ae:	bd38      	pop	{r3, r4, r5, pc}
 800f9b0:	200051bc 	.word	0x200051bc

0800f9b4 <_sbrk_r>:
 800f9b4:	b538      	push	{r3, r4, r5, lr}
 800f9b6:	4d06      	ldr	r5, [pc, #24]	@ (800f9d0 <_sbrk_r+0x1c>)
 800f9b8:	2300      	movs	r3, #0
 800f9ba:	4604      	mov	r4, r0
 800f9bc:	4608      	mov	r0, r1
 800f9be:	602b      	str	r3, [r5, #0]
 800f9c0:	f7f3 ff32 	bl	8003828 <_sbrk>
 800f9c4:	1c43      	adds	r3, r0, #1
 800f9c6:	d102      	bne.n	800f9ce <_sbrk_r+0x1a>
 800f9c8:	682b      	ldr	r3, [r5, #0]
 800f9ca:	b103      	cbz	r3, 800f9ce <_sbrk_r+0x1a>
 800f9cc:	6023      	str	r3, [r4, #0]
 800f9ce:	bd38      	pop	{r3, r4, r5, pc}
 800f9d0:	200051bc 	.word	0x200051bc

0800f9d4 <__assert_func>:
 800f9d4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800f9d6:	4614      	mov	r4, r2
 800f9d8:	461a      	mov	r2, r3
 800f9da:	4b09      	ldr	r3, [pc, #36]	@ (800fa00 <__assert_func+0x2c>)
 800f9dc:	681b      	ldr	r3, [r3, #0]
 800f9de:	4605      	mov	r5, r0
 800f9e0:	68d8      	ldr	r0, [r3, #12]
 800f9e2:	b954      	cbnz	r4, 800f9fa <__assert_func+0x26>
 800f9e4:	4b07      	ldr	r3, [pc, #28]	@ (800fa04 <__assert_func+0x30>)
 800f9e6:	461c      	mov	r4, r3
 800f9e8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800f9ec:	9100      	str	r1, [sp, #0]
 800f9ee:	462b      	mov	r3, r5
 800f9f0:	4905      	ldr	r1, [pc, #20]	@ (800fa08 <__assert_func+0x34>)
 800f9f2:	f000 f86f 	bl	800fad4 <fiprintf>
 800f9f6:	f000 f87f 	bl	800faf8 <abort>
 800f9fa:	4b04      	ldr	r3, [pc, #16]	@ (800fa0c <__assert_func+0x38>)
 800f9fc:	e7f4      	b.n	800f9e8 <__assert_func+0x14>
 800f9fe:	bf00      	nop
 800fa00:	20000028 	.word	0x20000028
 800fa04:	0801103e 	.word	0x0801103e
 800fa08:	08011010 	.word	0x08011010
 800fa0c:	08011003 	.word	0x08011003

0800fa10 <_calloc_r>:
 800fa10:	b570      	push	{r4, r5, r6, lr}
 800fa12:	fba1 5402 	umull	r5, r4, r1, r2
 800fa16:	b93c      	cbnz	r4, 800fa28 <_calloc_r+0x18>
 800fa18:	4629      	mov	r1, r5
 800fa1a:	f7fe ffd9 	bl	800e9d0 <_malloc_r>
 800fa1e:	4606      	mov	r6, r0
 800fa20:	b928      	cbnz	r0, 800fa2e <_calloc_r+0x1e>
 800fa22:	2600      	movs	r6, #0
 800fa24:	4630      	mov	r0, r6
 800fa26:	bd70      	pop	{r4, r5, r6, pc}
 800fa28:	220c      	movs	r2, #12
 800fa2a:	6002      	str	r2, [r0, #0]
 800fa2c:	e7f9      	b.n	800fa22 <_calloc_r+0x12>
 800fa2e:	462a      	mov	r2, r5
 800fa30:	4621      	mov	r1, r4
 800fa32:	f7fe f827 	bl	800da84 <memset>
 800fa36:	e7f5      	b.n	800fa24 <_calloc_r+0x14>

0800fa38 <__ascii_mbtowc>:
 800fa38:	b082      	sub	sp, #8
 800fa3a:	b901      	cbnz	r1, 800fa3e <__ascii_mbtowc+0x6>
 800fa3c:	a901      	add	r1, sp, #4
 800fa3e:	b142      	cbz	r2, 800fa52 <__ascii_mbtowc+0x1a>
 800fa40:	b14b      	cbz	r3, 800fa56 <__ascii_mbtowc+0x1e>
 800fa42:	7813      	ldrb	r3, [r2, #0]
 800fa44:	600b      	str	r3, [r1, #0]
 800fa46:	7812      	ldrb	r2, [r2, #0]
 800fa48:	1e10      	subs	r0, r2, #0
 800fa4a:	bf18      	it	ne
 800fa4c:	2001      	movne	r0, #1
 800fa4e:	b002      	add	sp, #8
 800fa50:	4770      	bx	lr
 800fa52:	4610      	mov	r0, r2
 800fa54:	e7fb      	b.n	800fa4e <__ascii_mbtowc+0x16>
 800fa56:	f06f 0001 	mvn.w	r0, #1
 800fa5a:	e7f8      	b.n	800fa4e <__ascii_mbtowc+0x16>

0800fa5c <_realloc_r>:
 800fa5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800fa60:	4680      	mov	r8, r0
 800fa62:	4615      	mov	r5, r2
 800fa64:	460c      	mov	r4, r1
 800fa66:	b921      	cbnz	r1, 800fa72 <_realloc_r+0x16>
 800fa68:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800fa6c:	4611      	mov	r1, r2
 800fa6e:	f7fe bfaf 	b.w	800e9d0 <_malloc_r>
 800fa72:	b92a      	cbnz	r2, 800fa80 <_realloc_r+0x24>
 800fa74:	f7fe ff38 	bl	800e8e8 <_free_r>
 800fa78:	2400      	movs	r4, #0
 800fa7a:	4620      	mov	r0, r4
 800fa7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800fa80:	f000 f841 	bl	800fb06 <_malloc_usable_size_r>
 800fa84:	4285      	cmp	r5, r0
 800fa86:	4606      	mov	r6, r0
 800fa88:	d802      	bhi.n	800fa90 <_realloc_r+0x34>
 800fa8a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800fa8e:	d8f4      	bhi.n	800fa7a <_realloc_r+0x1e>
 800fa90:	4629      	mov	r1, r5
 800fa92:	4640      	mov	r0, r8
 800fa94:	f7fe ff9c 	bl	800e9d0 <_malloc_r>
 800fa98:	4607      	mov	r7, r0
 800fa9a:	2800      	cmp	r0, #0
 800fa9c:	d0ec      	beq.n	800fa78 <_realloc_r+0x1c>
 800fa9e:	42b5      	cmp	r5, r6
 800faa0:	462a      	mov	r2, r5
 800faa2:	4621      	mov	r1, r4
 800faa4:	bf28      	it	cs
 800faa6:	4632      	movcs	r2, r6
 800faa8:	f7fe f8c1 	bl	800dc2e <memcpy>
 800faac:	4621      	mov	r1, r4
 800faae:	4640      	mov	r0, r8
 800fab0:	f7fe ff1a 	bl	800e8e8 <_free_r>
 800fab4:	463c      	mov	r4, r7
 800fab6:	e7e0      	b.n	800fa7a <_realloc_r+0x1e>

0800fab8 <__ascii_wctomb>:
 800fab8:	4603      	mov	r3, r0
 800faba:	4608      	mov	r0, r1
 800fabc:	b141      	cbz	r1, 800fad0 <__ascii_wctomb+0x18>
 800fabe:	2aff      	cmp	r2, #255	@ 0xff
 800fac0:	d904      	bls.n	800facc <__ascii_wctomb+0x14>
 800fac2:	228a      	movs	r2, #138	@ 0x8a
 800fac4:	601a      	str	r2, [r3, #0]
 800fac6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800faca:	4770      	bx	lr
 800facc:	700a      	strb	r2, [r1, #0]
 800face:	2001      	movs	r0, #1
 800fad0:	4770      	bx	lr
	...

0800fad4 <fiprintf>:
 800fad4:	b40e      	push	{r1, r2, r3}
 800fad6:	b503      	push	{r0, r1, lr}
 800fad8:	4601      	mov	r1, r0
 800fada:	ab03      	add	r3, sp, #12
 800fadc:	4805      	ldr	r0, [pc, #20]	@ (800faf4 <fiprintf+0x20>)
 800fade:	f853 2b04 	ldr.w	r2, [r3], #4
 800fae2:	6800      	ldr	r0, [r0, #0]
 800fae4:	9301      	str	r3, [sp, #4]
 800fae6:	f7ff fd03 	bl	800f4f0 <_vfiprintf_r>
 800faea:	b002      	add	sp, #8
 800faec:	f85d eb04 	ldr.w	lr, [sp], #4
 800faf0:	b003      	add	sp, #12
 800faf2:	4770      	bx	lr
 800faf4:	20000028 	.word	0x20000028

0800faf8 <abort>:
 800faf8:	b508      	push	{r3, lr}
 800fafa:	2006      	movs	r0, #6
 800fafc:	f000 f834 	bl	800fb68 <raise>
 800fb00:	2001      	movs	r0, #1
 800fb02:	f7f3 fe19 	bl	8003738 <_exit>

0800fb06 <_malloc_usable_size_r>:
 800fb06:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800fb0a:	1f18      	subs	r0, r3, #4
 800fb0c:	2b00      	cmp	r3, #0
 800fb0e:	bfbc      	itt	lt
 800fb10:	580b      	ldrlt	r3, [r1, r0]
 800fb12:	18c0      	addlt	r0, r0, r3
 800fb14:	4770      	bx	lr

0800fb16 <_raise_r>:
 800fb16:	291f      	cmp	r1, #31
 800fb18:	b538      	push	{r3, r4, r5, lr}
 800fb1a:	4605      	mov	r5, r0
 800fb1c:	460c      	mov	r4, r1
 800fb1e:	d904      	bls.n	800fb2a <_raise_r+0x14>
 800fb20:	2316      	movs	r3, #22
 800fb22:	6003      	str	r3, [r0, #0]
 800fb24:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800fb28:	bd38      	pop	{r3, r4, r5, pc}
 800fb2a:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800fb2c:	b112      	cbz	r2, 800fb34 <_raise_r+0x1e>
 800fb2e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800fb32:	b94b      	cbnz	r3, 800fb48 <_raise_r+0x32>
 800fb34:	4628      	mov	r0, r5
 800fb36:	f000 f831 	bl	800fb9c <_getpid_r>
 800fb3a:	4622      	mov	r2, r4
 800fb3c:	4601      	mov	r1, r0
 800fb3e:	4628      	mov	r0, r5
 800fb40:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800fb44:	f000 b818 	b.w	800fb78 <_kill_r>
 800fb48:	2b01      	cmp	r3, #1
 800fb4a:	d00a      	beq.n	800fb62 <_raise_r+0x4c>
 800fb4c:	1c59      	adds	r1, r3, #1
 800fb4e:	d103      	bne.n	800fb58 <_raise_r+0x42>
 800fb50:	2316      	movs	r3, #22
 800fb52:	6003      	str	r3, [r0, #0]
 800fb54:	2001      	movs	r0, #1
 800fb56:	e7e7      	b.n	800fb28 <_raise_r+0x12>
 800fb58:	2100      	movs	r1, #0
 800fb5a:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800fb5e:	4620      	mov	r0, r4
 800fb60:	4798      	blx	r3
 800fb62:	2000      	movs	r0, #0
 800fb64:	e7e0      	b.n	800fb28 <_raise_r+0x12>
	...

0800fb68 <raise>:
 800fb68:	4b02      	ldr	r3, [pc, #8]	@ (800fb74 <raise+0xc>)
 800fb6a:	4601      	mov	r1, r0
 800fb6c:	6818      	ldr	r0, [r3, #0]
 800fb6e:	f7ff bfd2 	b.w	800fb16 <_raise_r>
 800fb72:	bf00      	nop
 800fb74:	20000028 	.word	0x20000028

0800fb78 <_kill_r>:
 800fb78:	b538      	push	{r3, r4, r5, lr}
 800fb7a:	4d07      	ldr	r5, [pc, #28]	@ (800fb98 <_kill_r+0x20>)
 800fb7c:	2300      	movs	r3, #0
 800fb7e:	4604      	mov	r4, r0
 800fb80:	4608      	mov	r0, r1
 800fb82:	4611      	mov	r1, r2
 800fb84:	602b      	str	r3, [r5, #0]
 800fb86:	f7f3 fdc7 	bl	8003718 <_kill>
 800fb8a:	1c43      	adds	r3, r0, #1
 800fb8c:	d102      	bne.n	800fb94 <_kill_r+0x1c>
 800fb8e:	682b      	ldr	r3, [r5, #0]
 800fb90:	b103      	cbz	r3, 800fb94 <_kill_r+0x1c>
 800fb92:	6023      	str	r3, [r4, #0]
 800fb94:	bd38      	pop	{r3, r4, r5, pc}
 800fb96:	bf00      	nop
 800fb98:	200051bc 	.word	0x200051bc

0800fb9c <_getpid_r>:
 800fb9c:	f7f3 bdb4 	b.w	8003708 <_getpid>

0800fba0 <sqrt>:
 800fba0:	b538      	push	{r3, r4, r5, lr}
 800fba2:	ed2d 8b02 	vpush	{d8}
 800fba6:	ec55 4b10 	vmov	r4, r5, d0
 800fbaa:	f000 f827 	bl	800fbfc <__ieee754_sqrt>
 800fbae:	4622      	mov	r2, r4
 800fbb0:	462b      	mov	r3, r5
 800fbb2:	4620      	mov	r0, r4
 800fbb4:	4629      	mov	r1, r5
 800fbb6:	eeb0 8a40 	vmov.f32	s16, s0
 800fbba:	eef0 8a60 	vmov.f32	s17, s1
 800fbbe:	f7f0 ffb5 	bl	8000b2c <__aeabi_dcmpun>
 800fbc2:	b990      	cbnz	r0, 800fbea <sqrt+0x4a>
 800fbc4:	2200      	movs	r2, #0
 800fbc6:	2300      	movs	r3, #0
 800fbc8:	4620      	mov	r0, r4
 800fbca:	4629      	mov	r1, r5
 800fbcc:	f7f0 ff86 	bl	8000adc <__aeabi_dcmplt>
 800fbd0:	b158      	cbz	r0, 800fbea <sqrt+0x4a>
 800fbd2:	f7fd ffff 	bl	800dbd4 <__errno>
 800fbd6:	2321      	movs	r3, #33	@ 0x21
 800fbd8:	6003      	str	r3, [r0, #0]
 800fbda:	2200      	movs	r2, #0
 800fbdc:	2300      	movs	r3, #0
 800fbde:	4610      	mov	r0, r2
 800fbe0:	4619      	mov	r1, r3
 800fbe2:	f7f0 fe33 	bl	800084c <__aeabi_ddiv>
 800fbe6:	ec41 0b18 	vmov	d8, r0, r1
 800fbea:	eeb0 0a48 	vmov.f32	s0, s16
 800fbee:	eef0 0a68 	vmov.f32	s1, s17
 800fbf2:	ecbd 8b02 	vpop	{d8}
 800fbf6:	bd38      	pop	{r3, r4, r5, pc}

0800fbf8 <atan2f>:
 800fbf8:	f000 b8da 	b.w	800fdb0 <__ieee754_atan2f>

0800fbfc <__ieee754_sqrt>:
 800fbfc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fc00:	4a68      	ldr	r2, [pc, #416]	@ (800fda4 <__ieee754_sqrt+0x1a8>)
 800fc02:	ec55 4b10 	vmov	r4, r5, d0
 800fc06:	43aa      	bics	r2, r5
 800fc08:	462b      	mov	r3, r5
 800fc0a:	4621      	mov	r1, r4
 800fc0c:	d110      	bne.n	800fc30 <__ieee754_sqrt+0x34>
 800fc0e:	4622      	mov	r2, r4
 800fc10:	4620      	mov	r0, r4
 800fc12:	4629      	mov	r1, r5
 800fc14:	f7f0 fcf0 	bl	80005f8 <__aeabi_dmul>
 800fc18:	4602      	mov	r2, r0
 800fc1a:	460b      	mov	r3, r1
 800fc1c:	4620      	mov	r0, r4
 800fc1e:	4629      	mov	r1, r5
 800fc20:	f7f0 fb34 	bl	800028c <__adddf3>
 800fc24:	4604      	mov	r4, r0
 800fc26:	460d      	mov	r5, r1
 800fc28:	ec45 4b10 	vmov	d0, r4, r5
 800fc2c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800fc30:	2d00      	cmp	r5, #0
 800fc32:	dc0e      	bgt.n	800fc52 <__ieee754_sqrt+0x56>
 800fc34:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800fc38:	4322      	orrs	r2, r4
 800fc3a:	d0f5      	beq.n	800fc28 <__ieee754_sqrt+0x2c>
 800fc3c:	b19d      	cbz	r5, 800fc66 <__ieee754_sqrt+0x6a>
 800fc3e:	4622      	mov	r2, r4
 800fc40:	4620      	mov	r0, r4
 800fc42:	4629      	mov	r1, r5
 800fc44:	f7f0 fb20 	bl	8000288 <__aeabi_dsub>
 800fc48:	4602      	mov	r2, r0
 800fc4a:	460b      	mov	r3, r1
 800fc4c:	f7f0 fdfe 	bl	800084c <__aeabi_ddiv>
 800fc50:	e7e8      	b.n	800fc24 <__ieee754_sqrt+0x28>
 800fc52:	152a      	asrs	r2, r5, #20
 800fc54:	d115      	bne.n	800fc82 <__ieee754_sqrt+0x86>
 800fc56:	2000      	movs	r0, #0
 800fc58:	e009      	b.n	800fc6e <__ieee754_sqrt+0x72>
 800fc5a:	0acb      	lsrs	r3, r1, #11
 800fc5c:	3a15      	subs	r2, #21
 800fc5e:	0549      	lsls	r1, r1, #21
 800fc60:	2b00      	cmp	r3, #0
 800fc62:	d0fa      	beq.n	800fc5a <__ieee754_sqrt+0x5e>
 800fc64:	e7f7      	b.n	800fc56 <__ieee754_sqrt+0x5a>
 800fc66:	462a      	mov	r2, r5
 800fc68:	e7fa      	b.n	800fc60 <__ieee754_sqrt+0x64>
 800fc6a:	005b      	lsls	r3, r3, #1
 800fc6c:	3001      	adds	r0, #1
 800fc6e:	02dc      	lsls	r4, r3, #11
 800fc70:	d5fb      	bpl.n	800fc6a <__ieee754_sqrt+0x6e>
 800fc72:	1e44      	subs	r4, r0, #1
 800fc74:	1b12      	subs	r2, r2, r4
 800fc76:	f1c0 0420 	rsb	r4, r0, #32
 800fc7a:	fa21 f404 	lsr.w	r4, r1, r4
 800fc7e:	4323      	orrs	r3, r4
 800fc80:	4081      	lsls	r1, r0
 800fc82:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800fc86:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800fc8a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800fc8e:	07d2      	lsls	r2, r2, #31
 800fc90:	bf5c      	itt	pl
 800fc92:	005b      	lslpl	r3, r3, #1
 800fc94:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800fc98:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800fc9c:	bf58      	it	pl
 800fc9e:	0049      	lslpl	r1, r1, #1
 800fca0:	2600      	movs	r6, #0
 800fca2:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800fca6:	106d      	asrs	r5, r5, #1
 800fca8:	0049      	lsls	r1, r1, #1
 800fcaa:	2016      	movs	r0, #22
 800fcac:	4632      	mov	r2, r6
 800fcae:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800fcb2:	1917      	adds	r7, r2, r4
 800fcb4:	429f      	cmp	r7, r3
 800fcb6:	bfde      	ittt	le
 800fcb8:	193a      	addle	r2, r7, r4
 800fcba:	1bdb      	suble	r3, r3, r7
 800fcbc:	1936      	addle	r6, r6, r4
 800fcbe:	0fcf      	lsrs	r7, r1, #31
 800fcc0:	3801      	subs	r0, #1
 800fcc2:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800fcc6:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800fcca:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800fcce:	d1f0      	bne.n	800fcb2 <__ieee754_sqrt+0xb6>
 800fcd0:	4604      	mov	r4, r0
 800fcd2:	2720      	movs	r7, #32
 800fcd4:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800fcd8:	429a      	cmp	r2, r3
 800fcda:	eb00 0e0c 	add.w	lr, r0, ip
 800fcde:	db02      	blt.n	800fce6 <__ieee754_sqrt+0xea>
 800fce0:	d113      	bne.n	800fd0a <__ieee754_sqrt+0x10e>
 800fce2:	458e      	cmp	lr, r1
 800fce4:	d811      	bhi.n	800fd0a <__ieee754_sqrt+0x10e>
 800fce6:	f1be 0f00 	cmp.w	lr, #0
 800fcea:	eb0e 000c 	add.w	r0, lr, ip
 800fcee:	da42      	bge.n	800fd76 <__ieee754_sqrt+0x17a>
 800fcf0:	2800      	cmp	r0, #0
 800fcf2:	db40      	blt.n	800fd76 <__ieee754_sqrt+0x17a>
 800fcf4:	f102 0801 	add.w	r8, r2, #1
 800fcf8:	1a9b      	subs	r3, r3, r2
 800fcfa:	458e      	cmp	lr, r1
 800fcfc:	bf88      	it	hi
 800fcfe:	f103 33ff 	addhi.w	r3, r3, #4294967295	@ 0xffffffff
 800fd02:	eba1 010e 	sub.w	r1, r1, lr
 800fd06:	4464      	add	r4, ip
 800fd08:	4642      	mov	r2, r8
 800fd0a:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800fd0e:	3f01      	subs	r7, #1
 800fd10:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800fd14:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800fd18:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800fd1c:	d1dc      	bne.n	800fcd8 <__ieee754_sqrt+0xdc>
 800fd1e:	4319      	orrs	r1, r3
 800fd20:	d01b      	beq.n	800fd5a <__ieee754_sqrt+0x15e>
 800fd22:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800fda8 <__ieee754_sqrt+0x1ac>
 800fd26:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800fdac <__ieee754_sqrt+0x1b0>
 800fd2a:	e9da 0100 	ldrd	r0, r1, [sl]
 800fd2e:	e9db 2300 	ldrd	r2, r3, [fp]
 800fd32:	f7f0 faa9 	bl	8000288 <__aeabi_dsub>
 800fd36:	e9da 8900 	ldrd	r8, r9, [sl]
 800fd3a:	4602      	mov	r2, r0
 800fd3c:	460b      	mov	r3, r1
 800fd3e:	4640      	mov	r0, r8
 800fd40:	4649      	mov	r1, r9
 800fd42:	f7f0 fed5 	bl	8000af0 <__aeabi_dcmple>
 800fd46:	b140      	cbz	r0, 800fd5a <__ieee754_sqrt+0x15e>
 800fd48:	f1b4 3fff 	cmp.w	r4, #4294967295	@ 0xffffffff
 800fd4c:	e9da 0100 	ldrd	r0, r1, [sl]
 800fd50:	e9db 2300 	ldrd	r2, r3, [fp]
 800fd54:	d111      	bne.n	800fd7a <__ieee754_sqrt+0x17e>
 800fd56:	3601      	adds	r6, #1
 800fd58:	463c      	mov	r4, r7
 800fd5a:	1072      	asrs	r2, r6, #1
 800fd5c:	0863      	lsrs	r3, r4, #1
 800fd5e:	07f1      	lsls	r1, r6, #31
 800fd60:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800fd64:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800fd68:	bf48      	it	mi
 800fd6a:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800fd6e:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800fd72:	4618      	mov	r0, r3
 800fd74:	e756      	b.n	800fc24 <__ieee754_sqrt+0x28>
 800fd76:	4690      	mov	r8, r2
 800fd78:	e7be      	b.n	800fcf8 <__ieee754_sqrt+0xfc>
 800fd7a:	f7f0 fa87 	bl	800028c <__adddf3>
 800fd7e:	e9da 8900 	ldrd	r8, r9, [sl]
 800fd82:	4602      	mov	r2, r0
 800fd84:	460b      	mov	r3, r1
 800fd86:	4640      	mov	r0, r8
 800fd88:	4649      	mov	r1, r9
 800fd8a:	f7f0 fea7 	bl	8000adc <__aeabi_dcmplt>
 800fd8e:	b120      	cbz	r0, 800fd9a <__ieee754_sqrt+0x19e>
 800fd90:	1ca0      	adds	r0, r4, #2
 800fd92:	bf08      	it	eq
 800fd94:	3601      	addeq	r6, #1
 800fd96:	3402      	adds	r4, #2
 800fd98:	e7df      	b.n	800fd5a <__ieee754_sqrt+0x15e>
 800fd9a:	1c63      	adds	r3, r4, #1
 800fd9c:	f023 0401 	bic.w	r4, r3, #1
 800fda0:	e7db      	b.n	800fd5a <__ieee754_sqrt+0x15e>
 800fda2:	bf00      	nop
 800fda4:	7ff00000 	.word	0x7ff00000
 800fda8:	200001f0 	.word	0x200001f0
 800fdac:	200001e8 	.word	0x200001e8

0800fdb0 <__ieee754_atan2f>:
 800fdb0:	ee10 2a90 	vmov	r2, s1
 800fdb4:	f022 4100 	bic.w	r1, r2, #2147483648	@ 0x80000000
 800fdb8:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800fdbc:	b510      	push	{r4, lr}
 800fdbe:	eef0 7a40 	vmov.f32	s15, s0
 800fdc2:	d806      	bhi.n	800fdd2 <__ieee754_atan2f+0x22>
 800fdc4:	ee10 0a10 	vmov	r0, s0
 800fdc8:	f020 4300 	bic.w	r3, r0, #2147483648	@ 0x80000000
 800fdcc:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800fdd0:	d904      	bls.n	800fddc <__ieee754_atan2f+0x2c>
 800fdd2:	ee77 7aa0 	vadd.f32	s15, s15, s1
 800fdd6:	eeb0 0a67 	vmov.f32	s0, s15
 800fdda:	bd10      	pop	{r4, pc}
 800fddc:	f1b2 5f7e 	cmp.w	r2, #1065353216	@ 0x3f800000
 800fde0:	d103      	bne.n	800fdea <__ieee754_atan2f+0x3a>
 800fde2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800fde6:	f000 b883 	b.w	800fef0 <atanf>
 800fdea:	1794      	asrs	r4, r2, #30
 800fdec:	f004 0402 	and.w	r4, r4, #2
 800fdf0:	ea44 74d0 	orr.w	r4, r4, r0, lsr #31
 800fdf4:	b943      	cbnz	r3, 800fe08 <__ieee754_atan2f+0x58>
 800fdf6:	2c02      	cmp	r4, #2
 800fdf8:	d05e      	beq.n	800feb8 <__ieee754_atan2f+0x108>
 800fdfa:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 800fecc <__ieee754_atan2f+0x11c>
 800fdfe:	2c03      	cmp	r4, #3
 800fe00:	bf08      	it	eq
 800fe02:	eef0 7a47 	vmoveq.f32	s15, s14
 800fe06:	e7e6      	b.n	800fdd6 <__ieee754_atan2f+0x26>
 800fe08:	b941      	cbnz	r1, 800fe1c <__ieee754_atan2f+0x6c>
 800fe0a:	eddf 7a31 	vldr	s15, [pc, #196]	@ 800fed0 <__ieee754_atan2f+0x120>
 800fe0e:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 800fed4 <__ieee754_atan2f+0x124>
 800fe12:	2800      	cmp	r0, #0
 800fe14:	bfb8      	it	lt
 800fe16:	eef0 7a47 	vmovlt.f32	s15, s14
 800fe1a:	e7dc      	b.n	800fdd6 <__ieee754_atan2f+0x26>
 800fe1c:	f1b1 4fff 	cmp.w	r1, #2139095040	@ 0x7f800000
 800fe20:	d110      	bne.n	800fe44 <__ieee754_atan2f+0x94>
 800fe22:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800fe26:	f104 34ff 	add.w	r4, r4, #4294967295	@ 0xffffffff
 800fe2a:	d107      	bne.n	800fe3c <__ieee754_atan2f+0x8c>
 800fe2c:	2c02      	cmp	r4, #2
 800fe2e:	d846      	bhi.n	800febe <__ieee754_atan2f+0x10e>
 800fe30:	4b29      	ldr	r3, [pc, #164]	@ (800fed8 <__ieee754_atan2f+0x128>)
 800fe32:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800fe36:	edd3 7a00 	vldr	s15, [r3]
 800fe3a:	e7cc      	b.n	800fdd6 <__ieee754_atan2f+0x26>
 800fe3c:	2c02      	cmp	r4, #2
 800fe3e:	d841      	bhi.n	800fec4 <__ieee754_atan2f+0x114>
 800fe40:	4b26      	ldr	r3, [pc, #152]	@ (800fedc <__ieee754_atan2f+0x12c>)
 800fe42:	e7f6      	b.n	800fe32 <__ieee754_atan2f+0x82>
 800fe44:	f1b3 4fff 	cmp.w	r3, #2139095040	@ 0x7f800000
 800fe48:	d0df      	beq.n	800fe0a <__ieee754_atan2f+0x5a>
 800fe4a:	1a5b      	subs	r3, r3, r1
 800fe4c:	f1b3 5ff4 	cmp.w	r3, #511705088	@ 0x1e800000
 800fe50:	ea4f 51e3 	mov.w	r1, r3, asr #23
 800fe54:	da1a      	bge.n	800fe8c <__ieee754_atan2f+0xdc>
 800fe56:	2a00      	cmp	r2, #0
 800fe58:	da01      	bge.n	800fe5e <__ieee754_atan2f+0xae>
 800fe5a:	313c      	adds	r1, #60	@ 0x3c
 800fe5c:	db19      	blt.n	800fe92 <__ieee754_atan2f+0xe2>
 800fe5e:	ee87 0aa0 	vdiv.f32	s0, s15, s1
 800fe62:	f000 f919 	bl	8010098 <fabsf>
 800fe66:	f000 f843 	bl	800fef0 <atanf>
 800fe6a:	eef0 7a40 	vmov.f32	s15, s0
 800fe6e:	2c01      	cmp	r4, #1
 800fe70:	d012      	beq.n	800fe98 <__ieee754_atan2f+0xe8>
 800fe72:	2c02      	cmp	r4, #2
 800fe74:	d017      	beq.n	800fea6 <__ieee754_atan2f+0xf6>
 800fe76:	2c00      	cmp	r4, #0
 800fe78:	d0ad      	beq.n	800fdd6 <__ieee754_atan2f+0x26>
 800fe7a:	ed9f 7a19 	vldr	s14, [pc, #100]	@ 800fee0 <__ieee754_atan2f+0x130>
 800fe7e:	ee77 7a87 	vadd.f32	s15, s15, s14
 800fe82:	ed9f 7a18 	vldr	s14, [pc, #96]	@ 800fee4 <__ieee754_atan2f+0x134>
 800fe86:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800fe8a:	e7a4      	b.n	800fdd6 <__ieee754_atan2f+0x26>
 800fe8c:	eddf 7a10 	vldr	s15, [pc, #64]	@ 800fed0 <__ieee754_atan2f+0x120>
 800fe90:	e7ed      	b.n	800fe6e <__ieee754_atan2f+0xbe>
 800fe92:	eddf 7a15 	vldr	s15, [pc, #84]	@ 800fee8 <__ieee754_atan2f+0x138>
 800fe96:	e7ea      	b.n	800fe6e <__ieee754_atan2f+0xbe>
 800fe98:	ee17 3a90 	vmov	r3, s15
 800fe9c:	f103 4300 	add.w	r3, r3, #2147483648	@ 0x80000000
 800fea0:	ee07 3a90 	vmov	s15, r3
 800fea4:	e797      	b.n	800fdd6 <__ieee754_atan2f+0x26>
 800fea6:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 800fee0 <__ieee754_atan2f+0x130>
 800feaa:	ee77 7a87 	vadd.f32	s15, s15, s14
 800feae:	ed9f 7a0d 	vldr	s14, [pc, #52]	@ 800fee4 <__ieee754_atan2f+0x134>
 800feb2:	ee77 7a67 	vsub.f32	s15, s14, s15
 800feb6:	e78e      	b.n	800fdd6 <__ieee754_atan2f+0x26>
 800feb8:	eddf 7a0a 	vldr	s15, [pc, #40]	@ 800fee4 <__ieee754_atan2f+0x134>
 800febc:	e78b      	b.n	800fdd6 <__ieee754_atan2f+0x26>
 800febe:	eddf 7a0b 	vldr	s15, [pc, #44]	@ 800feec <__ieee754_atan2f+0x13c>
 800fec2:	e788      	b.n	800fdd6 <__ieee754_atan2f+0x26>
 800fec4:	eddf 7a08 	vldr	s15, [pc, #32]	@ 800fee8 <__ieee754_atan2f+0x138>
 800fec8:	e785      	b.n	800fdd6 <__ieee754_atan2f+0x26>
 800feca:	bf00      	nop
 800fecc:	c0490fdb 	.word	0xc0490fdb
 800fed0:	3fc90fdb 	.word	0x3fc90fdb
 800fed4:	bfc90fdb 	.word	0xbfc90fdb
 800fed8:	0801114c 	.word	0x0801114c
 800fedc:	08011140 	.word	0x08011140
 800fee0:	33bbbd2e 	.word	0x33bbbd2e
 800fee4:	40490fdb 	.word	0x40490fdb
 800fee8:	00000000 	.word	0x00000000
 800feec:	3f490fdb 	.word	0x3f490fdb

0800fef0 <atanf>:
 800fef0:	b538      	push	{r3, r4, r5, lr}
 800fef2:	ee10 5a10 	vmov	r5, s0
 800fef6:	f025 4400 	bic.w	r4, r5, #2147483648	@ 0x80000000
 800fefa:	f1b4 4fa1 	cmp.w	r4, #1350565888	@ 0x50800000
 800fefe:	eef0 7a40 	vmov.f32	s15, s0
 800ff02:	d310      	bcc.n	800ff26 <atanf+0x36>
 800ff04:	f1b4 4fff 	cmp.w	r4, #2139095040	@ 0x7f800000
 800ff08:	d904      	bls.n	800ff14 <atanf+0x24>
 800ff0a:	ee70 7a00 	vadd.f32	s15, s0, s0
 800ff0e:	eeb0 0a67 	vmov.f32	s0, s15
 800ff12:	bd38      	pop	{r3, r4, r5, pc}
 800ff14:	eddf 7a4d 	vldr	s15, [pc, #308]	@ 801004c <atanf+0x15c>
 800ff18:	ed9f 7a4d 	vldr	s14, [pc, #308]	@ 8010050 <atanf+0x160>
 800ff1c:	2d00      	cmp	r5, #0
 800ff1e:	bfc8      	it	gt
 800ff20:	eef0 7a47 	vmovgt.f32	s15, s14
 800ff24:	e7f3      	b.n	800ff0e <atanf+0x1e>
 800ff26:	4b4b      	ldr	r3, [pc, #300]	@ (8010054 <atanf+0x164>)
 800ff28:	429c      	cmp	r4, r3
 800ff2a:	d810      	bhi.n	800ff4e <atanf+0x5e>
 800ff2c:	f1b4 5f44 	cmp.w	r4, #822083584	@ 0x31000000
 800ff30:	d20a      	bcs.n	800ff48 <atanf+0x58>
 800ff32:	ed9f 7a49 	vldr	s14, [pc, #292]	@ 8010058 <atanf+0x168>
 800ff36:	ee30 7a07 	vadd.f32	s14, s0, s14
 800ff3a:	eef7 6a00 	vmov.f32	s13, #112	@ 0x3f800000  1.0
 800ff3e:	eeb4 7ae6 	vcmpe.f32	s14, s13
 800ff42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800ff46:	dce2      	bgt.n	800ff0e <atanf+0x1e>
 800ff48:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800ff4c:	e013      	b.n	800ff76 <atanf+0x86>
 800ff4e:	f000 f8a3 	bl	8010098 <fabsf>
 800ff52:	4b42      	ldr	r3, [pc, #264]	@ (801005c <atanf+0x16c>)
 800ff54:	429c      	cmp	r4, r3
 800ff56:	d84f      	bhi.n	800fff8 <atanf+0x108>
 800ff58:	f5a3 03d0 	sub.w	r3, r3, #6815744	@ 0x680000
 800ff5c:	429c      	cmp	r4, r3
 800ff5e:	d841      	bhi.n	800ffe4 <atanf+0xf4>
 800ff60:	eef0 7a00 	vmov.f32	s15, #0	@ 0x40000000  2.0
 800ff64:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 800ff68:	eea0 7a27 	vfma.f32	s14, s0, s15
 800ff6c:	2300      	movs	r3, #0
 800ff6e:	ee30 0a27 	vadd.f32	s0, s0, s15
 800ff72:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800ff76:	1c5a      	adds	r2, r3, #1
 800ff78:	ee27 6aa7 	vmul.f32	s12, s15, s15
 800ff7c:	ed9f 7a38 	vldr	s14, [pc, #224]	@ 8010060 <atanf+0x170>
 800ff80:	eddf 5a38 	vldr	s11, [pc, #224]	@ 8010064 <atanf+0x174>
 800ff84:	ed9f 5a38 	vldr	s10, [pc, #224]	@ 8010068 <atanf+0x178>
 800ff88:	ee66 6a06 	vmul.f32	s13, s12, s12
 800ff8c:	eee6 5a87 	vfma.f32	s11, s13, s14
 800ff90:	ed9f 7a36 	vldr	s14, [pc, #216]	@ 801006c <atanf+0x17c>
 800ff94:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800ff98:	eddf 5a35 	vldr	s11, [pc, #212]	@ 8010070 <atanf+0x180>
 800ff9c:	eee7 5a26 	vfma.f32	s11, s14, s13
 800ffa0:	ed9f 7a34 	vldr	s14, [pc, #208]	@ 8010074 <atanf+0x184>
 800ffa4:	eea5 7aa6 	vfma.f32	s14, s11, s13
 800ffa8:	eddf 5a33 	vldr	s11, [pc, #204]	@ 8010078 <atanf+0x188>
 800ffac:	eee7 5a26 	vfma.f32	s11, s14, s13
 800ffb0:	ed9f 7a32 	vldr	s14, [pc, #200]	@ 801007c <atanf+0x18c>
 800ffb4:	eea6 5a87 	vfma.f32	s10, s13, s14
 800ffb8:	ed9f 7a31 	vldr	s14, [pc, #196]	@ 8010080 <atanf+0x190>
 800ffbc:	eea5 7a26 	vfma.f32	s14, s10, s13
 800ffc0:	ed9f 5a30 	vldr	s10, [pc, #192]	@ 8010084 <atanf+0x194>
 800ffc4:	eea7 5a26 	vfma.f32	s10, s14, s13
 800ffc8:	ed9f 7a2f 	vldr	s14, [pc, #188]	@ 8010088 <atanf+0x198>
 800ffcc:	eea5 7a26 	vfma.f32	s14, s10, s13
 800ffd0:	ee27 7a26 	vmul.f32	s14, s14, s13
 800ffd4:	eea5 7a86 	vfma.f32	s14, s11, s12
 800ffd8:	ee27 7a87 	vmul.f32	s14, s15, s14
 800ffdc:	d121      	bne.n	8010022 <atanf+0x132>
 800ffde:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800ffe2:	e794      	b.n	800ff0e <atanf+0x1e>
 800ffe4:	eef7 7a00 	vmov.f32	s15, #112	@ 0x3f800000  1.0
 800ffe8:	ee30 7a67 	vsub.f32	s14, s0, s15
 800ffec:	ee30 0a27 	vadd.f32	s0, s0, s15
 800fff0:	2301      	movs	r3, #1
 800fff2:	eec7 7a00 	vdiv.f32	s15, s14, s0
 800fff6:	e7be      	b.n	800ff76 <atanf+0x86>
 800fff8:	4b24      	ldr	r3, [pc, #144]	@ (801008c <atanf+0x19c>)
 800fffa:	429c      	cmp	r4, r3
 800fffc:	d80b      	bhi.n	8010016 <atanf+0x126>
 800fffe:	eef7 7a08 	vmov.f32	s15, #120	@ 0x3fc00000  1.5
 8010002:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8010006:	eea0 7a27 	vfma.f32	s14, s0, s15
 801000a:	2302      	movs	r3, #2
 801000c:	ee70 6a67 	vsub.f32	s13, s0, s15
 8010010:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8010014:	e7af      	b.n	800ff76 <atanf+0x86>
 8010016:	eebf 7a00 	vmov.f32	s14, #240	@ 0xbf800000 -1.0
 801001a:	eec7 7a00 	vdiv.f32	s15, s14, s0
 801001e:	2303      	movs	r3, #3
 8010020:	e7a9      	b.n	800ff76 <atanf+0x86>
 8010022:	4a1b      	ldr	r2, [pc, #108]	@ (8010090 <atanf+0x1a0>)
 8010024:	491b      	ldr	r1, [pc, #108]	@ (8010094 <atanf+0x1a4>)
 8010026:	eb02 0283 	add.w	r2, r2, r3, lsl #2
 801002a:	eb01 0383 	add.w	r3, r1, r3, lsl #2
 801002e:	edd3 6a00 	vldr	s13, [r3]
 8010032:	ee37 7a66 	vsub.f32	s14, s14, s13
 8010036:	2d00      	cmp	r5, #0
 8010038:	ee37 7a67 	vsub.f32	s14, s14, s15
 801003c:	edd2 7a00 	vldr	s15, [r2]
 8010040:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8010044:	bfb8      	it	lt
 8010046:	eef1 7a67 	vneglt.f32	s15, s15
 801004a:	e760      	b.n	800ff0e <atanf+0x1e>
 801004c:	bfc90fdb 	.word	0xbfc90fdb
 8010050:	3fc90fdb 	.word	0x3fc90fdb
 8010054:	3edfffff 	.word	0x3edfffff
 8010058:	7149f2ca 	.word	0x7149f2ca
 801005c:	3f97ffff 	.word	0x3f97ffff
 8010060:	3c8569d7 	.word	0x3c8569d7
 8010064:	3d4bda59 	.word	0x3d4bda59
 8010068:	bd6ef16b 	.word	0xbd6ef16b
 801006c:	3d886b35 	.word	0x3d886b35
 8010070:	3dba2e6e 	.word	0x3dba2e6e
 8010074:	3e124925 	.word	0x3e124925
 8010078:	3eaaaaab 	.word	0x3eaaaaab
 801007c:	bd15a221 	.word	0xbd15a221
 8010080:	bd9d8795 	.word	0xbd9d8795
 8010084:	bde38e38 	.word	0xbde38e38
 8010088:	be4ccccd 	.word	0xbe4ccccd
 801008c:	401bffff 	.word	0x401bffff
 8010090:	08011168 	.word	0x08011168
 8010094:	08011158 	.word	0x08011158

08010098 <fabsf>:
 8010098:	ee10 3a10 	vmov	r3, s0
 801009c:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 80100a0:	ee00 3a10 	vmov	s0, r3
 80100a4:	4770      	bx	lr
	...

080100a8 <_init>:
 80100a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80100aa:	bf00      	nop
 80100ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80100ae:	bc08      	pop	{r3}
 80100b0:	469e      	mov	lr, r3
 80100b2:	4770      	bx	lr

080100b4 <_fini>:
 80100b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80100b6:	bf00      	nop
 80100b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80100ba:	bc08      	pop	{r3}
 80100bc:	469e      	mov	lr, r3
 80100be:	4770      	bx	lr
