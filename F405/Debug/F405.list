
F405.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c578  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000ca8  0800c708  0800c708  0000d708  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d3b0  0800d3b0  0000f288  2**0
                  CONTENTS
  4 .ARM          00000008  0800d3b0  0800d3b0  0000e3b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d3b8  0800d3b8  0000f288  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d3b8  0800d3b8  0000e3b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800d3bc  0800d3bc  0000e3bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000288  20000000  0800d3c0  0000f000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000f288  2**0
                  CONTENTS
 10 .bss          000005e0  20000288  20000288  0000f288  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  20000868  20000868  0000f288  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000f288  2**0
                  CONTENTS, READONLY
 13 .debug_info   000106d8  00000000  00000000  0000f2b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002c6e  00000000  00000000  0001f990  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e18  00000000  00000000  00022600  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ace  00000000  00000000  00023418  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00021eae  00000000  00000000  00023ee6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000134a6  00000000  00000000  00045d94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c4bba  00000000  00000000  0005923a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0011ddf4  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00004fdc  00000000  00000000  0011de38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000058  00000000  00000000  00122e14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000288 	.word	0x20000288
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c6f0 	.word	0x0800c6f0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000028c 	.word	0x2000028c
 80001cc:	0800c6f0 	.word	0x0800c6f0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_frsub>:
 8000c48:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000c4c:	e002      	b.n	8000c54 <__addsf3>
 8000c4e:	bf00      	nop

08000c50 <__aeabi_fsub>:
 8000c50:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000c54 <__addsf3>:
 8000c54:	0042      	lsls	r2, r0, #1
 8000c56:	bf1f      	itttt	ne
 8000c58:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c5c:	ea92 0f03 	teqne	r2, r3
 8000c60:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c64:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c68:	d06a      	beq.n	8000d40 <__addsf3+0xec>
 8000c6a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c6e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c72:	bfc1      	itttt	gt
 8000c74:	18d2      	addgt	r2, r2, r3
 8000c76:	4041      	eorgt	r1, r0
 8000c78:	4048      	eorgt	r0, r1
 8000c7a:	4041      	eorgt	r1, r0
 8000c7c:	bfb8      	it	lt
 8000c7e:	425b      	neglt	r3, r3
 8000c80:	2b19      	cmp	r3, #25
 8000c82:	bf88      	it	hi
 8000c84:	4770      	bxhi	lr
 8000c86:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000c8a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c8e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000c92:	bf18      	it	ne
 8000c94:	4240      	negne	r0, r0
 8000c96:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000c9a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000c9e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000ca2:	bf18      	it	ne
 8000ca4:	4249      	negne	r1, r1
 8000ca6:	ea92 0f03 	teq	r2, r3
 8000caa:	d03f      	beq.n	8000d2c <__addsf3+0xd8>
 8000cac:	f1a2 0201 	sub.w	r2, r2, #1
 8000cb0:	fa41 fc03 	asr.w	ip, r1, r3
 8000cb4:	eb10 000c 	adds.w	r0, r0, ip
 8000cb8:	f1c3 0320 	rsb	r3, r3, #32
 8000cbc:	fa01 f103 	lsl.w	r1, r1, r3
 8000cc0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000cc4:	d502      	bpl.n	8000ccc <__addsf3+0x78>
 8000cc6:	4249      	negs	r1, r1
 8000cc8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000ccc:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000cd0:	d313      	bcc.n	8000cfa <__addsf3+0xa6>
 8000cd2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000cd6:	d306      	bcc.n	8000ce6 <__addsf3+0x92>
 8000cd8:	0840      	lsrs	r0, r0, #1
 8000cda:	ea4f 0131 	mov.w	r1, r1, rrx
 8000cde:	f102 0201 	add.w	r2, r2, #1
 8000ce2:	2afe      	cmp	r2, #254	@ 0xfe
 8000ce4:	d251      	bcs.n	8000d8a <__addsf3+0x136>
 8000ce6:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000cea:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000cee:	bf08      	it	eq
 8000cf0:	f020 0001 	biceq.w	r0, r0, #1
 8000cf4:	ea40 0003 	orr.w	r0, r0, r3
 8000cf8:	4770      	bx	lr
 8000cfa:	0049      	lsls	r1, r1, #1
 8000cfc:	eb40 0000 	adc.w	r0, r0, r0
 8000d00:	3a01      	subs	r2, #1
 8000d02:	bf28      	it	cs
 8000d04:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000d08:	d2ed      	bcs.n	8000ce6 <__addsf3+0x92>
 8000d0a:	fab0 fc80 	clz	ip, r0
 8000d0e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d12:	ebb2 020c 	subs.w	r2, r2, ip
 8000d16:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d1a:	bfaa      	itet	ge
 8000d1c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d20:	4252      	neglt	r2, r2
 8000d22:	4318      	orrge	r0, r3
 8000d24:	bfbc      	itt	lt
 8000d26:	40d0      	lsrlt	r0, r2
 8000d28:	4318      	orrlt	r0, r3
 8000d2a:	4770      	bx	lr
 8000d2c:	f092 0f00 	teq	r2, #0
 8000d30:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000d34:	bf06      	itte	eq
 8000d36:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000d3a:	3201      	addeq	r2, #1
 8000d3c:	3b01      	subne	r3, #1
 8000d3e:	e7b5      	b.n	8000cac <__addsf3+0x58>
 8000d40:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d44:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d48:	bf18      	it	ne
 8000d4a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d4e:	d021      	beq.n	8000d94 <__addsf3+0x140>
 8000d50:	ea92 0f03 	teq	r2, r3
 8000d54:	d004      	beq.n	8000d60 <__addsf3+0x10c>
 8000d56:	f092 0f00 	teq	r2, #0
 8000d5a:	bf08      	it	eq
 8000d5c:	4608      	moveq	r0, r1
 8000d5e:	4770      	bx	lr
 8000d60:	ea90 0f01 	teq	r0, r1
 8000d64:	bf1c      	itt	ne
 8000d66:	2000      	movne	r0, #0
 8000d68:	4770      	bxne	lr
 8000d6a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000d6e:	d104      	bne.n	8000d7a <__addsf3+0x126>
 8000d70:	0040      	lsls	r0, r0, #1
 8000d72:	bf28      	it	cs
 8000d74:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000d78:	4770      	bx	lr
 8000d7a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000d7e:	bf3c      	itt	cc
 8000d80:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000d84:	4770      	bxcc	lr
 8000d86:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000d8a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000d8e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d92:	4770      	bx	lr
 8000d94:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d98:	bf16      	itet	ne
 8000d9a:	4608      	movne	r0, r1
 8000d9c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000da0:	4601      	movne	r1, r0
 8000da2:	0242      	lsls	r2, r0, #9
 8000da4:	bf06      	itte	eq
 8000da6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000daa:	ea90 0f01 	teqeq	r0, r1
 8000dae:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000db2:	4770      	bx	lr

08000db4 <__aeabi_ui2f>:
 8000db4:	f04f 0300 	mov.w	r3, #0
 8000db8:	e004      	b.n	8000dc4 <__aeabi_i2f+0x8>
 8000dba:	bf00      	nop

08000dbc <__aeabi_i2f>:
 8000dbc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000dc0:	bf48      	it	mi
 8000dc2:	4240      	negmi	r0, r0
 8000dc4:	ea5f 0c00 	movs.w	ip, r0
 8000dc8:	bf08      	it	eq
 8000dca:	4770      	bxeq	lr
 8000dcc:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000dd0:	4601      	mov	r1, r0
 8000dd2:	f04f 0000 	mov.w	r0, #0
 8000dd6:	e01c      	b.n	8000e12 <__aeabi_l2f+0x2a>

08000dd8 <__aeabi_ul2f>:
 8000dd8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ddc:	bf08      	it	eq
 8000dde:	4770      	bxeq	lr
 8000de0:	f04f 0300 	mov.w	r3, #0
 8000de4:	e00a      	b.n	8000dfc <__aeabi_l2f+0x14>
 8000de6:	bf00      	nop

08000de8 <__aeabi_l2f>:
 8000de8:	ea50 0201 	orrs.w	r2, r0, r1
 8000dec:	bf08      	it	eq
 8000dee:	4770      	bxeq	lr
 8000df0:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000df4:	d502      	bpl.n	8000dfc <__aeabi_l2f+0x14>
 8000df6:	4240      	negs	r0, r0
 8000df8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000dfc:	ea5f 0c01 	movs.w	ip, r1
 8000e00:	bf02      	ittt	eq
 8000e02:	4684      	moveq	ip, r0
 8000e04:	4601      	moveq	r1, r0
 8000e06:	2000      	moveq	r0, #0
 8000e08:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000e0c:	bf08      	it	eq
 8000e0e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000e12:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000e16:	fabc f28c 	clz	r2, ip
 8000e1a:	3a08      	subs	r2, #8
 8000e1c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e20:	db10      	blt.n	8000e44 <__aeabi_l2f+0x5c>
 8000e22:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e26:	4463      	add	r3, ip
 8000e28:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e2c:	f1c2 0220 	rsb	r2, r2, #32
 8000e30:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000e34:	fa20 f202 	lsr.w	r2, r0, r2
 8000e38:	eb43 0002 	adc.w	r0, r3, r2
 8000e3c:	bf08      	it	eq
 8000e3e:	f020 0001 	biceq.w	r0, r0, #1
 8000e42:	4770      	bx	lr
 8000e44:	f102 0220 	add.w	r2, r2, #32
 8000e48:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e4c:	f1c2 0220 	rsb	r2, r2, #32
 8000e50:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e54:	fa21 f202 	lsr.w	r2, r1, r2
 8000e58:	eb43 0002 	adc.w	r0, r3, r2
 8000e5c:	bf08      	it	eq
 8000e5e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e62:	4770      	bx	lr

08000e64 <__aeabi_uldivmod>:
 8000e64:	b953      	cbnz	r3, 8000e7c <__aeabi_uldivmod+0x18>
 8000e66:	b94a      	cbnz	r2, 8000e7c <__aeabi_uldivmod+0x18>
 8000e68:	2900      	cmp	r1, #0
 8000e6a:	bf08      	it	eq
 8000e6c:	2800      	cmpeq	r0, #0
 8000e6e:	bf1c      	itt	ne
 8000e70:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000e74:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000e78:	f000 b988 	b.w	800118c <__aeabi_idiv0>
 8000e7c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000e80:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000e84:	f000 f824 	bl	8000ed0 <__udivmoddi4>
 8000e88:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e8c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e90:	b004      	add	sp, #16
 8000e92:	4770      	bx	lr

08000e94 <__aeabi_d2ulz>:
 8000e94:	b5d0      	push	{r4, r6, r7, lr}
 8000e96:	4b0c      	ldr	r3, [pc, #48]	@ (8000ec8 <__aeabi_d2ulz+0x34>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	4606      	mov	r6, r0
 8000e9c:	460f      	mov	r7, r1
 8000e9e:	f7ff fbab 	bl	80005f8 <__aeabi_dmul>
 8000ea2:	f000 f975 	bl	8001190 <__aeabi_d2uiz>
 8000ea6:	4604      	mov	r4, r0
 8000ea8:	f7ff fb2c 	bl	8000504 <__aeabi_ui2d>
 8000eac:	4b07      	ldr	r3, [pc, #28]	@ (8000ecc <__aeabi_d2ulz+0x38>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	f7ff fba2 	bl	80005f8 <__aeabi_dmul>
 8000eb4:	4602      	mov	r2, r0
 8000eb6:	460b      	mov	r3, r1
 8000eb8:	4630      	mov	r0, r6
 8000eba:	4639      	mov	r1, r7
 8000ebc:	f7ff f9e4 	bl	8000288 <__aeabi_dsub>
 8000ec0:	f000 f966 	bl	8001190 <__aeabi_d2uiz>
 8000ec4:	4621      	mov	r1, r4
 8000ec6:	bdd0      	pop	{r4, r6, r7, pc}
 8000ec8:	3df00000 	.word	0x3df00000
 8000ecc:	41f00000 	.word	0x41f00000

08000ed0 <__udivmoddi4>:
 8000ed0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ed4:	9d08      	ldr	r5, [sp, #32]
 8000ed6:	460c      	mov	r4, r1
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d14e      	bne.n	8000f7a <__udivmoddi4+0xaa>
 8000edc:	4694      	mov	ip, r2
 8000ede:	458c      	cmp	ip, r1
 8000ee0:	4686      	mov	lr, r0
 8000ee2:	fab2 f282 	clz	r2, r2
 8000ee6:	d962      	bls.n	8000fae <__udivmoddi4+0xde>
 8000ee8:	b14a      	cbz	r2, 8000efe <__udivmoddi4+0x2e>
 8000eea:	f1c2 0320 	rsb	r3, r2, #32
 8000eee:	4091      	lsls	r1, r2
 8000ef0:	fa20 f303 	lsr.w	r3, r0, r3
 8000ef4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ef8:	4319      	orrs	r1, r3
 8000efa:	fa00 fe02 	lsl.w	lr, r0, r2
 8000efe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f02:	fa1f f68c 	uxth.w	r6, ip
 8000f06:	fbb1 f4f7 	udiv	r4, r1, r7
 8000f0a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000f0e:	fb07 1114 	mls	r1, r7, r4, r1
 8000f12:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f16:	fb04 f106 	mul.w	r1, r4, r6
 8000f1a:	4299      	cmp	r1, r3
 8000f1c:	d90a      	bls.n	8000f34 <__udivmoddi4+0x64>
 8000f1e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f22:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000f26:	f080 8112 	bcs.w	800114e <__udivmoddi4+0x27e>
 8000f2a:	4299      	cmp	r1, r3
 8000f2c:	f240 810f 	bls.w	800114e <__udivmoddi4+0x27e>
 8000f30:	3c02      	subs	r4, #2
 8000f32:	4463      	add	r3, ip
 8000f34:	1a59      	subs	r1, r3, r1
 8000f36:	fa1f f38e 	uxth.w	r3, lr
 8000f3a:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f3e:	fb07 1110 	mls	r1, r7, r0, r1
 8000f42:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f46:	fb00 f606 	mul.w	r6, r0, r6
 8000f4a:	429e      	cmp	r6, r3
 8000f4c:	d90a      	bls.n	8000f64 <__udivmoddi4+0x94>
 8000f4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f52:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000f56:	f080 80fc 	bcs.w	8001152 <__udivmoddi4+0x282>
 8000f5a:	429e      	cmp	r6, r3
 8000f5c:	f240 80f9 	bls.w	8001152 <__udivmoddi4+0x282>
 8000f60:	4463      	add	r3, ip
 8000f62:	3802      	subs	r0, #2
 8000f64:	1b9b      	subs	r3, r3, r6
 8000f66:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000f6a:	2100      	movs	r1, #0
 8000f6c:	b11d      	cbz	r5, 8000f76 <__udivmoddi4+0xa6>
 8000f6e:	40d3      	lsrs	r3, r2
 8000f70:	2200      	movs	r2, #0
 8000f72:	e9c5 3200 	strd	r3, r2, [r5]
 8000f76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f7a:	428b      	cmp	r3, r1
 8000f7c:	d905      	bls.n	8000f8a <__udivmoddi4+0xba>
 8000f7e:	b10d      	cbz	r5, 8000f84 <__udivmoddi4+0xb4>
 8000f80:	e9c5 0100 	strd	r0, r1, [r5]
 8000f84:	2100      	movs	r1, #0
 8000f86:	4608      	mov	r0, r1
 8000f88:	e7f5      	b.n	8000f76 <__udivmoddi4+0xa6>
 8000f8a:	fab3 f183 	clz	r1, r3
 8000f8e:	2900      	cmp	r1, #0
 8000f90:	d146      	bne.n	8001020 <__udivmoddi4+0x150>
 8000f92:	42a3      	cmp	r3, r4
 8000f94:	d302      	bcc.n	8000f9c <__udivmoddi4+0xcc>
 8000f96:	4290      	cmp	r0, r2
 8000f98:	f0c0 80f0 	bcc.w	800117c <__udivmoddi4+0x2ac>
 8000f9c:	1a86      	subs	r6, r0, r2
 8000f9e:	eb64 0303 	sbc.w	r3, r4, r3
 8000fa2:	2001      	movs	r0, #1
 8000fa4:	2d00      	cmp	r5, #0
 8000fa6:	d0e6      	beq.n	8000f76 <__udivmoddi4+0xa6>
 8000fa8:	e9c5 6300 	strd	r6, r3, [r5]
 8000fac:	e7e3      	b.n	8000f76 <__udivmoddi4+0xa6>
 8000fae:	2a00      	cmp	r2, #0
 8000fb0:	f040 8090 	bne.w	80010d4 <__udivmoddi4+0x204>
 8000fb4:	eba1 040c 	sub.w	r4, r1, ip
 8000fb8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000fbc:	fa1f f78c 	uxth.w	r7, ip
 8000fc0:	2101      	movs	r1, #1
 8000fc2:	fbb4 f6f8 	udiv	r6, r4, r8
 8000fc6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000fca:	fb08 4416 	mls	r4, r8, r6, r4
 8000fce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000fd2:	fb07 f006 	mul.w	r0, r7, r6
 8000fd6:	4298      	cmp	r0, r3
 8000fd8:	d908      	bls.n	8000fec <__udivmoddi4+0x11c>
 8000fda:	eb1c 0303 	adds.w	r3, ip, r3
 8000fde:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000fe2:	d202      	bcs.n	8000fea <__udivmoddi4+0x11a>
 8000fe4:	4298      	cmp	r0, r3
 8000fe6:	f200 80cd 	bhi.w	8001184 <__udivmoddi4+0x2b4>
 8000fea:	4626      	mov	r6, r4
 8000fec:	1a1c      	subs	r4, r3, r0
 8000fee:	fa1f f38e 	uxth.w	r3, lr
 8000ff2:	fbb4 f0f8 	udiv	r0, r4, r8
 8000ff6:	fb08 4410 	mls	r4, r8, r0, r4
 8000ffa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ffe:	fb00 f707 	mul.w	r7, r0, r7
 8001002:	429f      	cmp	r7, r3
 8001004:	d908      	bls.n	8001018 <__udivmoddi4+0x148>
 8001006:	eb1c 0303 	adds.w	r3, ip, r3
 800100a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800100e:	d202      	bcs.n	8001016 <__udivmoddi4+0x146>
 8001010:	429f      	cmp	r7, r3
 8001012:	f200 80b0 	bhi.w	8001176 <__udivmoddi4+0x2a6>
 8001016:	4620      	mov	r0, r4
 8001018:	1bdb      	subs	r3, r3, r7
 800101a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800101e:	e7a5      	b.n	8000f6c <__udivmoddi4+0x9c>
 8001020:	f1c1 0620 	rsb	r6, r1, #32
 8001024:	408b      	lsls	r3, r1
 8001026:	fa22 f706 	lsr.w	r7, r2, r6
 800102a:	431f      	orrs	r7, r3
 800102c:	fa20 fc06 	lsr.w	ip, r0, r6
 8001030:	fa04 f301 	lsl.w	r3, r4, r1
 8001034:	ea43 030c 	orr.w	r3, r3, ip
 8001038:	40f4      	lsrs	r4, r6
 800103a:	fa00 f801 	lsl.w	r8, r0, r1
 800103e:	0c38      	lsrs	r0, r7, #16
 8001040:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8001044:	fbb4 fef0 	udiv	lr, r4, r0
 8001048:	fa1f fc87 	uxth.w	ip, r7
 800104c:	fb00 441e 	mls	r4, r0, lr, r4
 8001050:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8001054:	fb0e f90c 	mul.w	r9, lr, ip
 8001058:	45a1      	cmp	r9, r4
 800105a:	fa02 f201 	lsl.w	r2, r2, r1
 800105e:	d90a      	bls.n	8001076 <__udivmoddi4+0x1a6>
 8001060:	193c      	adds	r4, r7, r4
 8001062:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8001066:	f080 8084 	bcs.w	8001172 <__udivmoddi4+0x2a2>
 800106a:	45a1      	cmp	r9, r4
 800106c:	f240 8081 	bls.w	8001172 <__udivmoddi4+0x2a2>
 8001070:	f1ae 0e02 	sub.w	lr, lr, #2
 8001074:	443c      	add	r4, r7
 8001076:	eba4 0409 	sub.w	r4, r4, r9
 800107a:	fa1f f983 	uxth.w	r9, r3
 800107e:	fbb4 f3f0 	udiv	r3, r4, r0
 8001082:	fb00 4413 	mls	r4, r0, r3, r4
 8001086:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800108a:	fb03 fc0c 	mul.w	ip, r3, ip
 800108e:	45a4      	cmp	ip, r4
 8001090:	d907      	bls.n	80010a2 <__udivmoddi4+0x1d2>
 8001092:	193c      	adds	r4, r7, r4
 8001094:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8001098:	d267      	bcs.n	800116a <__udivmoddi4+0x29a>
 800109a:	45a4      	cmp	ip, r4
 800109c:	d965      	bls.n	800116a <__udivmoddi4+0x29a>
 800109e:	3b02      	subs	r3, #2
 80010a0:	443c      	add	r4, r7
 80010a2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80010a6:	fba0 9302 	umull	r9, r3, r0, r2
 80010aa:	eba4 040c 	sub.w	r4, r4, ip
 80010ae:	429c      	cmp	r4, r3
 80010b0:	46ce      	mov	lr, r9
 80010b2:	469c      	mov	ip, r3
 80010b4:	d351      	bcc.n	800115a <__udivmoddi4+0x28a>
 80010b6:	d04e      	beq.n	8001156 <__udivmoddi4+0x286>
 80010b8:	b155      	cbz	r5, 80010d0 <__udivmoddi4+0x200>
 80010ba:	ebb8 030e 	subs.w	r3, r8, lr
 80010be:	eb64 040c 	sbc.w	r4, r4, ip
 80010c2:	fa04 f606 	lsl.w	r6, r4, r6
 80010c6:	40cb      	lsrs	r3, r1
 80010c8:	431e      	orrs	r6, r3
 80010ca:	40cc      	lsrs	r4, r1
 80010cc:	e9c5 6400 	strd	r6, r4, [r5]
 80010d0:	2100      	movs	r1, #0
 80010d2:	e750      	b.n	8000f76 <__udivmoddi4+0xa6>
 80010d4:	f1c2 0320 	rsb	r3, r2, #32
 80010d8:	fa20 f103 	lsr.w	r1, r0, r3
 80010dc:	fa0c fc02 	lsl.w	ip, ip, r2
 80010e0:	fa24 f303 	lsr.w	r3, r4, r3
 80010e4:	4094      	lsls	r4, r2
 80010e6:	430c      	orrs	r4, r1
 80010e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80010ec:	fa00 fe02 	lsl.w	lr, r0, r2
 80010f0:	fa1f f78c 	uxth.w	r7, ip
 80010f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80010f8:	fb08 3110 	mls	r1, r8, r0, r3
 80010fc:	0c23      	lsrs	r3, r4, #16
 80010fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001102:	fb00 f107 	mul.w	r1, r0, r7
 8001106:	4299      	cmp	r1, r3
 8001108:	d908      	bls.n	800111c <__udivmoddi4+0x24c>
 800110a:	eb1c 0303 	adds.w	r3, ip, r3
 800110e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8001112:	d22c      	bcs.n	800116e <__udivmoddi4+0x29e>
 8001114:	4299      	cmp	r1, r3
 8001116:	d92a      	bls.n	800116e <__udivmoddi4+0x29e>
 8001118:	3802      	subs	r0, #2
 800111a:	4463      	add	r3, ip
 800111c:	1a5b      	subs	r3, r3, r1
 800111e:	b2a4      	uxth	r4, r4
 8001120:	fbb3 f1f8 	udiv	r1, r3, r8
 8001124:	fb08 3311 	mls	r3, r8, r1, r3
 8001128:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800112c:	fb01 f307 	mul.w	r3, r1, r7
 8001130:	42a3      	cmp	r3, r4
 8001132:	d908      	bls.n	8001146 <__udivmoddi4+0x276>
 8001134:	eb1c 0404 	adds.w	r4, ip, r4
 8001138:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800113c:	d213      	bcs.n	8001166 <__udivmoddi4+0x296>
 800113e:	42a3      	cmp	r3, r4
 8001140:	d911      	bls.n	8001166 <__udivmoddi4+0x296>
 8001142:	3902      	subs	r1, #2
 8001144:	4464      	add	r4, ip
 8001146:	1ae4      	subs	r4, r4, r3
 8001148:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800114c:	e739      	b.n	8000fc2 <__udivmoddi4+0xf2>
 800114e:	4604      	mov	r4, r0
 8001150:	e6f0      	b.n	8000f34 <__udivmoddi4+0x64>
 8001152:	4608      	mov	r0, r1
 8001154:	e706      	b.n	8000f64 <__udivmoddi4+0x94>
 8001156:	45c8      	cmp	r8, r9
 8001158:	d2ae      	bcs.n	80010b8 <__udivmoddi4+0x1e8>
 800115a:	ebb9 0e02 	subs.w	lr, r9, r2
 800115e:	eb63 0c07 	sbc.w	ip, r3, r7
 8001162:	3801      	subs	r0, #1
 8001164:	e7a8      	b.n	80010b8 <__udivmoddi4+0x1e8>
 8001166:	4631      	mov	r1, r6
 8001168:	e7ed      	b.n	8001146 <__udivmoddi4+0x276>
 800116a:	4603      	mov	r3, r0
 800116c:	e799      	b.n	80010a2 <__udivmoddi4+0x1d2>
 800116e:	4630      	mov	r0, r6
 8001170:	e7d4      	b.n	800111c <__udivmoddi4+0x24c>
 8001172:	46d6      	mov	lr, sl
 8001174:	e77f      	b.n	8001076 <__udivmoddi4+0x1a6>
 8001176:	4463      	add	r3, ip
 8001178:	3802      	subs	r0, #2
 800117a:	e74d      	b.n	8001018 <__udivmoddi4+0x148>
 800117c:	4606      	mov	r6, r0
 800117e:	4623      	mov	r3, r4
 8001180:	4608      	mov	r0, r1
 8001182:	e70f      	b.n	8000fa4 <__udivmoddi4+0xd4>
 8001184:	3e02      	subs	r6, #2
 8001186:	4463      	add	r3, ip
 8001188:	e730      	b.n	8000fec <__udivmoddi4+0x11c>
 800118a:	bf00      	nop

0800118c <__aeabi_idiv0>:
 800118c:	4770      	bx	lr
 800118e:	bf00      	nop

08001190 <__aeabi_d2uiz>:
 8001190:	004a      	lsls	r2, r1, #1
 8001192:	d211      	bcs.n	80011b8 <__aeabi_d2uiz+0x28>
 8001194:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8001198:	d211      	bcs.n	80011be <__aeabi_d2uiz+0x2e>
 800119a:	d50d      	bpl.n	80011b8 <__aeabi_d2uiz+0x28>
 800119c:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80011a0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80011a4:	d40e      	bmi.n	80011c4 <__aeabi_d2uiz+0x34>
 80011a6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80011aa:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80011ae:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80011b2:	fa23 f002 	lsr.w	r0, r3, r2
 80011b6:	4770      	bx	lr
 80011b8:	f04f 0000 	mov.w	r0, #0
 80011bc:	4770      	bx	lr
 80011be:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80011c2:	d102      	bne.n	80011ca <__aeabi_d2uiz+0x3a>
 80011c4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80011c8:	4770      	bx	lr
 80011ca:	f04f 0000 	mov.w	r0, #0
 80011ce:	4770      	bx	lr

080011d0 <I2C_ReadOneByte>:
 //Raspberry 3B+ platform's default I2C device file



uint8_t I2C_ReadOneByte(uint8_t DevAddr, uint8_t RegAddr)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b088      	sub	sp, #32
 80011d4:	af04      	add	r7, sp, #16
 80011d6:	4603      	mov	r3, r0
 80011d8:	460a      	mov	r2, r1
 80011da:	71fb      	strb	r3, [r7, #7]
 80011dc:	4613      	mov	r3, r2
 80011de:	71bb      	strb	r3, [r7, #6]
  uint8_t u8Ret[1]={0};
 80011e0:	2300      	movs	r3, #0
 80011e2:	733b      	strb	r3, [r7, #12]
  HAL_I2C_Mem_Read(&hi2c1, DevAddr,RegAddr,I2C_MEMADD_SIZE_8BIT,u8Ret,1,1000);
 80011e4:	79fb      	ldrb	r3, [r7, #7]
 80011e6:	b299      	uxth	r1, r3
 80011e8:	79bb      	ldrb	r3, [r7, #6]
 80011ea:	b29a      	uxth	r2, r3
 80011ec:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011f0:	9302      	str	r3, [sp, #8]
 80011f2:	2301      	movs	r3, #1
 80011f4:	9301      	str	r3, [sp, #4]
 80011f6:	f107 030c 	add.w	r3, r7, #12
 80011fa:	9300      	str	r3, [sp, #0]
 80011fc:	2301      	movs	r3, #1
 80011fe:	4804      	ldr	r0, [pc, #16]	@ (8001210 <I2C_ReadOneByte+0x40>)
 8001200:	f004 fb54 	bl	80058ac <HAL_I2C_Mem_Read>
  return u8Ret[0];
 8001204:	7b3b      	ldrb	r3, [r7, #12]
}
 8001206:	4618      	mov	r0, r3
 8001208:	3710      	adds	r7, #16
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	200005fc 	.word	0x200005fc

08001214 <I2C_WriteOneByte>:

void I2C_WriteOneByte(uint8_t DevAddr, uint8_t RegAddr, uint8_t value)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b086      	sub	sp, #24
 8001218:	af02      	add	r7, sp, #8
 800121a:	4603      	mov	r3, r0
 800121c:	71fb      	strb	r3, [r7, #7]
 800121e:	460b      	mov	r3, r1
 8001220:	71bb      	strb	r3, [r7, #6]
 8001222:	4613      	mov	r3, r2
 8001224:	717b      	strb	r3, [r7, #5]
  uint8_t buf[2]={0};
 8001226:	2300      	movs	r3, #0
 8001228:	81bb      	strh	r3, [r7, #12]

  buf[0] = RegAddr;
 800122a:	79bb      	ldrb	r3, [r7, #6]
 800122c:	733b      	strb	r3, [r7, #12]
  buf[1] = value;
 800122e:	797b      	ldrb	r3, [r7, #5]
 8001230:	737b      	strb	r3, [r7, #13]
  HAL_I2C_Master_Transmit(&hi2c1,DevAddr,buf,2,100);
 8001232:	79fb      	ldrb	r3, [r7, #7]
 8001234:	b299      	uxth	r1, r3
 8001236:	f107 020c 	add.w	r2, r7, #12
 800123a:	2364      	movs	r3, #100	@ 0x64
 800123c:	9300      	str	r3, [sp, #0]
 800123e:	2302      	movs	r3, #2
 8001240:	4803      	ldr	r0, [pc, #12]	@ (8001250 <I2C_WriteOneByte+0x3c>)
 8001242:	f004 f93b 	bl	80054bc <HAL_I2C_Master_Transmit>

}
 8001246:	bf00      	nop
 8001248:	3710      	adds	r7, #16
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	200005fc 	.word	0x200005fc

08001254 <imuInit>:

float angles[3];
float q0, q1, q2, q3; 

void imuInit(IMU_EN_SENSOR_TYPE *penMotionSensorType, IMU_EN_SENSOR_TYPE *penPressureType)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b084      	sub	sp, #16
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
 800125c:	6039      	str	r1, [r7, #0]
  bool bRet = false;
 800125e:	2300      	movs	r3, #0
 8001260:	73fb      	strb	r3, [r7, #15]
  
  bRet = icm20948Check();
 8001262:	f000 fedf 	bl	8002024 <icm20948Check>
 8001266:	4603      	mov	r3, r0
 8001268:	73fb      	strb	r3, [r7, #15]
  if( true == bRet)
 800126a:	7bfb      	ldrb	r3, [r7, #15]
 800126c:	2b01      	cmp	r3, #1
 800126e:	d105      	bne.n	800127c <imuInit+0x28>
  {
    *penMotionSensorType = IMU_EN_SENSOR_TYPE_ICM20948;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	2201      	movs	r2, #1
 8001274:	701a      	strb	r2, [r3, #0]
    icm20948init();
 8001276:	f000 fe95 	bl	8001fa4 <icm20948init>
 800127a:	e002      	b.n	8001282 <imuInit+0x2e>
  }
  else
  {
    *penMotionSensorType = IMU_EN_SENSOR_TYPE_NULL;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	2200      	movs	r2, #0
 8001280:	701a      	strb	r2, [r3, #0]
  }
  
  bRet = bmp280Check();
 8001282:	f001 fa4b 	bl	800271c <bmp280Check>
 8001286:	4603      	mov	r3, r0
 8001288:	73fb      	strb	r3, [r7, #15]
  if( true == bRet)
 800128a:	7bfb      	ldrb	r3, [r7, #15]
 800128c:	2b01      	cmp	r3, #1
 800128e:	d105      	bne.n	800129c <imuInit+0x48>
  {
    *penPressureType = IMU_EN_SENSOR_TYPE_BMP280;
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	2202      	movs	r2, #2
 8001294:	701a      	strb	r2, [r3, #0]
    bmp280Init();
 8001296:	f001 fb5d 	bl	8002954 <bmp280Init>
 800129a:	e002      	b.n	80012a2 <imuInit+0x4e>
  }
  else
  {
    *penPressureType = IMU_EN_SENSOR_TYPE_NULL;
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	2200      	movs	r2, #0
 80012a0:	701a      	strb	r2, [r3, #0]
  }

  q0 = 1.0f;  
 80012a2:	4b0a      	ldr	r3, [pc, #40]	@ (80012cc <imuInit+0x78>)
 80012a4:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80012a8:	601a      	str	r2, [r3, #0]
  q1 = 0.0f;
 80012aa:	4b09      	ldr	r3, [pc, #36]	@ (80012d0 <imuInit+0x7c>)
 80012ac:	f04f 0200 	mov.w	r2, #0
 80012b0:	601a      	str	r2, [r3, #0]
  q2 = 0.0f;
 80012b2:	4b08      	ldr	r3, [pc, #32]	@ (80012d4 <imuInit+0x80>)
 80012b4:	f04f 0200 	mov.w	r2, #0
 80012b8:	601a      	str	r2, [r3, #0]
  q3 = 0.0f;
 80012ba:	4b07      	ldr	r3, [pc, #28]	@ (80012d8 <imuInit+0x84>)
 80012bc:	f04f 0200 	mov.w	r2, #0
 80012c0:	601a      	str	r2, [r3, #0]

  return;
 80012c2:	bf00      	nop
}
 80012c4:	3710      	adds	r7, #16
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	200002ac 	.word	0x200002ac
 80012d0:	200002b0 	.word	0x200002b0
 80012d4:	200002b4 	.word	0x200002b4
 80012d8:	200002b8 	.word	0x200002b8
 80012dc:	00000000 	.word	0x00000000

080012e0 <imuDataGet>:

void imuDataGet(IMU_ST_ANGLES_DATA *pstAngles, 
                IMU_ST_SENSOR_DATA *pstGyroRawData,
                IMU_ST_SENSOR_DATA *pstAccelRawData,
                IMU_ST_SENSOR_DATA *pstMagnRawData)
{
 80012e0:	b5b0      	push	{r4, r5, r7, lr}
 80012e2:	b094      	sub	sp, #80	@ 0x50
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	60f8      	str	r0, [r7, #12]
 80012e8:	60b9      	str	r1, [r7, #8]
 80012ea:	607a      	str	r2, [r7, #4]
 80012ec:	603b      	str	r3, [r7, #0]
  float MotionVal[9];
  int16_t s16Gyro[3], s16Accel[3], s16Magn[3];

  icm20948AccelRead(&s16Accel[0], &s16Accel[1], &s16Accel[2]);
 80012ee:	f107 031c 	add.w	r3, r7, #28
 80012f2:	1d1a      	adds	r2, r3, #4
 80012f4:	f107 031c 	add.w	r3, r7, #28
 80012f8:	1c99      	adds	r1, r3, #2
 80012fa:	f107 031c 	add.w	r3, r7, #28
 80012fe:	4618      	mov	r0, r3
 8001300:	f000 ff60 	bl	80021c4 <icm20948AccelRead>
  icm20948GyroRead(&s16Gyro[0], &s16Gyro[1], &s16Gyro[2]);
 8001304:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001308:	1d1a      	adds	r2, r3, #4
 800130a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800130e:	1c99      	adds	r1, r3, #2
 8001310:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001314:	4618      	mov	r0, r3
 8001316:	f000 fe99 	bl	800204c <icm20948GyroRead>
  icm20948MagRead(&s16Magn[0], &s16Magn[1], &s16Magn[2]);
 800131a:	f107 0314 	add.w	r3, r7, #20
 800131e:	1d1a      	adds	r2, r3, #4
 8001320:	f107 0314 	add.w	r3, r7, #20
 8001324:	1c99      	adds	r1, r3, #2
 8001326:	f107 0314 	add.w	r3, r7, #20
 800132a:	4618      	mov	r0, r3
 800132c:	f000 ffe4 	bl	80022f8 <icm20948MagRead>

  MotionVal[0]=s16Gyro[0]/32.8;
 8001330:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001334:	4618      	mov	r0, r3
 8001336:	f7ff f8f5 	bl	8000524 <__aeabi_i2d>
 800133a:	a3df      	add	r3, pc, #892	@ (adr r3, 80016b8 <imuDataGet+0x3d8>)
 800133c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001340:	f7ff fa84 	bl	800084c <__aeabi_ddiv>
 8001344:	4602      	mov	r2, r0
 8001346:	460b      	mov	r3, r1
 8001348:	4610      	mov	r0, r2
 800134a:	4619      	mov	r1, r3
 800134c:	f7ff fc2c 	bl	8000ba8 <__aeabi_d2f>
 8001350:	4603      	mov	r3, r0
 8001352:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MotionVal[1]=s16Gyro[1]/32.8;
 8001354:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8001358:	4618      	mov	r0, r3
 800135a:	f7ff f8e3 	bl	8000524 <__aeabi_i2d>
 800135e:	a3d6      	add	r3, pc, #856	@ (adr r3, 80016b8 <imuDataGet+0x3d8>)
 8001360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001364:	f7ff fa72 	bl	800084c <__aeabi_ddiv>
 8001368:	4602      	mov	r2, r0
 800136a:	460b      	mov	r3, r1
 800136c:	4610      	mov	r0, r2
 800136e:	4619      	mov	r1, r3
 8001370:	f7ff fc1a 	bl	8000ba8 <__aeabi_d2f>
 8001374:	4603      	mov	r3, r0
 8001376:	633b      	str	r3, [r7, #48]	@ 0x30
  MotionVal[2]=s16Gyro[2]/32.8;
 8001378:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 800137c:	4618      	mov	r0, r3
 800137e:	f7ff f8d1 	bl	8000524 <__aeabi_i2d>
 8001382:	a3cd      	add	r3, pc, #820	@ (adr r3, 80016b8 <imuDataGet+0x3d8>)
 8001384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001388:	f7ff fa60 	bl	800084c <__aeabi_ddiv>
 800138c:	4602      	mov	r2, r0
 800138e:	460b      	mov	r3, r1
 8001390:	4610      	mov	r0, r2
 8001392:	4619      	mov	r1, r3
 8001394:	f7ff fc08 	bl	8000ba8 <__aeabi_d2f>
 8001398:	4603      	mov	r3, r0
 800139a:	637b      	str	r3, [r7, #52]	@ 0x34
  MotionVal[3]=s16Accel[0];
 800139c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80013a0:	ee07 3a90 	vmov	s15, r3
 80013a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013a8:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
  MotionVal[4]=s16Accel[1];
 80013ac:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80013b0:	ee07 3a90 	vmov	s15, r3
 80013b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013b8:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
  MotionVal[5]=s16Accel[2];
 80013bc:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80013c0:	ee07 3a90 	vmov	s15, r3
 80013c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013c8:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
  MotionVal[6]=s16Magn[0];
 80013cc:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80013d0:	ee07 3a90 	vmov	s15, r3
 80013d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013d8:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
  MotionVal[7]=s16Magn[1];
 80013dc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80013e0:	ee07 3a90 	vmov	s15, r3
 80013e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013e8:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
  MotionVal[8]=s16Magn[2];
 80013ec:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80013f0:	ee07 3a90 	vmov	s15, r3
 80013f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013f8:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
  imuAHRSupdate((float)MotionVal[0] * 0.0175, (float)MotionVal[1] * 0.0175, (float)MotionVal[2] * 0.0175,
 80013fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80013fe:	4618      	mov	r0, r3
 8001400:	f7ff f8a2 	bl	8000548 <__aeabi_f2d>
 8001404:	a3ae      	add	r3, pc, #696	@ (adr r3, 80016c0 <imuDataGet+0x3e0>)
 8001406:	e9d3 2300 	ldrd	r2, r3, [r3]
 800140a:	f7ff f8f5 	bl	80005f8 <__aeabi_dmul>
 800140e:	4602      	mov	r2, r0
 8001410:	460b      	mov	r3, r1
 8001412:	4610      	mov	r0, r2
 8001414:	4619      	mov	r1, r3
 8001416:	f7ff fbc7 	bl	8000ba8 <__aeabi_d2f>
 800141a:	4604      	mov	r4, r0
 800141c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800141e:	4618      	mov	r0, r3
 8001420:	f7ff f892 	bl	8000548 <__aeabi_f2d>
 8001424:	a3a6      	add	r3, pc, #664	@ (adr r3, 80016c0 <imuDataGet+0x3e0>)
 8001426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800142a:	f7ff f8e5 	bl	80005f8 <__aeabi_dmul>
 800142e:	4602      	mov	r2, r0
 8001430:	460b      	mov	r3, r1
 8001432:	4610      	mov	r0, r2
 8001434:	4619      	mov	r1, r3
 8001436:	f7ff fbb7 	bl	8000ba8 <__aeabi_d2f>
 800143a:	4605      	mov	r5, r0
 800143c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800143e:	4618      	mov	r0, r3
 8001440:	f7ff f882 	bl	8000548 <__aeabi_f2d>
 8001444:	a39e      	add	r3, pc, #632	@ (adr r3, 80016c0 <imuDataGet+0x3e0>)
 8001446:	e9d3 2300 	ldrd	r2, r3, [r3]
 800144a:	f7ff f8d5 	bl	80005f8 <__aeabi_dmul>
 800144e:	4602      	mov	r2, r0
 8001450:	460b      	mov	r3, r1
 8001452:	4610      	mov	r0, r2
 8001454:	4619      	mov	r1, r3
 8001456:	f7ff fba7 	bl	8000ba8 <__aeabi_d2f>
 800145a:	4603      	mov	r3, r0
 800145c:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8001460:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8001464:	edd7 6a10 	vldr	s13, [r7, #64]	@ 0x40
 8001468:	ed97 6a11 	vldr	s12, [r7, #68]	@ 0x44
 800146c:	edd7 5a12 	vldr	s11, [r7, #72]	@ 0x48
 8001470:	ed97 5a13 	vldr	s10, [r7, #76]	@ 0x4c
 8001474:	eeb0 4a45 	vmov.f32	s8, s10
 8001478:	eef0 3a65 	vmov.f32	s7, s11
 800147c:	eeb0 3a46 	vmov.f32	s6, s12
 8001480:	eef0 2a66 	vmov.f32	s5, s13
 8001484:	eeb0 2a47 	vmov.f32	s4, s14
 8001488:	eef0 1a67 	vmov.f32	s3, s15
 800148c:	ee01 3a10 	vmov	s2, r3
 8001490:	ee00 5a90 	vmov	s1, r5
 8001494:	ee00 4a10 	vmov	s0, r4
 8001498:	f000 f916 	bl	80016c8 <imuAHRSupdate>
                (float)MotionVal[3], (float)MotionVal[4], (float)MotionVal[5], 
                (float)MotionVal[6], (float)MotionVal[7], MotionVal[8]);


  pstAngles->fPitch = asin(-2 * q1 * q3 + 2 * q0* q2)* 57.3; // pitch
 800149c:	4b82      	ldr	r3, [pc, #520]	@ (80016a8 <imuDataGet+0x3c8>)
 800149e:	edd3 7a00 	vldr	s15, [r3]
 80014a2:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 80014a6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80014aa:	4b80      	ldr	r3, [pc, #512]	@ (80016ac <imuDataGet+0x3cc>)
 80014ac:	edd3 7a00 	vldr	s15, [r3]
 80014b0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014b4:	4b7e      	ldr	r3, [pc, #504]	@ (80016b0 <imuDataGet+0x3d0>)
 80014b6:	edd3 7a00 	vldr	s15, [r3]
 80014ba:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80014be:	4b7d      	ldr	r3, [pc, #500]	@ (80016b4 <imuDataGet+0x3d4>)
 80014c0:	edd3 7a00 	vldr	s15, [r3]
 80014c4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014cc:	ee17 0a90 	vmov	r0, s15
 80014d0:	f7ff f83a 	bl	8000548 <__aeabi_f2d>
 80014d4:	4602      	mov	r2, r0
 80014d6:	460b      	mov	r3, r1
 80014d8:	ec43 2b10 	vmov	d0, r2, r3
 80014dc:	f009 fcda 	bl	800ae94 <asin>
 80014e0:	ec51 0b10 	vmov	r0, r1, d0
 80014e4:	a36e      	add	r3, pc, #440	@ (adr r3, 80016a0 <imuDataGet+0x3c0>)
 80014e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014ea:	f7ff f885 	bl	80005f8 <__aeabi_dmul>
 80014ee:	4602      	mov	r2, r0
 80014f0:	460b      	mov	r3, r1
 80014f2:	4610      	mov	r0, r2
 80014f4:	4619      	mov	r1, r3
 80014f6:	f7ff fb57 	bl	8000ba8 <__aeabi_d2f>
 80014fa:	4602      	mov	r2, r0
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	605a      	str	r2, [r3, #4]
  pstAngles->fRoll = atan2(2 * q2 * q3 + 2 * q0 * q1, -2 * q1 * q1 - 2 * q2* q2 + 1)* 57.3; // roll
 8001500:	4b6c      	ldr	r3, [pc, #432]	@ (80016b4 <imuDataGet+0x3d4>)
 8001502:	edd3 7a00 	vldr	s15, [r3]
 8001506:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800150a:	4b68      	ldr	r3, [pc, #416]	@ (80016ac <imuDataGet+0x3cc>)
 800150c:	edd3 7a00 	vldr	s15, [r3]
 8001510:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001514:	4b66      	ldr	r3, [pc, #408]	@ (80016b0 <imuDataGet+0x3d0>)
 8001516:	edd3 7a00 	vldr	s15, [r3]
 800151a:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800151e:	4b62      	ldr	r3, [pc, #392]	@ (80016a8 <imuDataGet+0x3c8>)
 8001520:	edd3 7a00 	vldr	s15, [r3]
 8001524:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001528:	ee77 7a27 	vadd.f32	s15, s14, s15
 800152c:	ee17 0a90 	vmov	r0, s15
 8001530:	f7ff f80a 	bl	8000548 <__aeabi_f2d>
 8001534:	4604      	mov	r4, r0
 8001536:	460d      	mov	r5, r1
 8001538:	4b5b      	ldr	r3, [pc, #364]	@ (80016a8 <imuDataGet+0x3c8>)
 800153a:	edd3 7a00 	vldr	s15, [r3]
 800153e:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 8001542:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001546:	4b58      	ldr	r3, [pc, #352]	@ (80016a8 <imuDataGet+0x3c8>)
 8001548:	edd3 7a00 	vldr	s15, [r3]
 800154c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001550:	4b58      	ldr	r3, [pc, #352]	@ (80016b4 <imuDataGet+0x3d4>)
 8001552:	edd3 7a00 	vldr	s15, [r3]
 8001556:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800155a:	4b56      	ldr	r3, [pc, #344]	@ (80016b4 <imuDataGet+0x3d4>)
 800155c:	edd3 7a00 	vldr	s15, [r3]
 8001560:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001564:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001568:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800156c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001570:	ee17 0a90 	vmov	r0, s15
 8001574:	f7fe ffe8 	bl	8000548 <__aeabi_f2d>
 8001578:	4602      	mov	r2, r0
 800157a:	460b      	mov	r3, r1
 800157c:	ec43 2b11 	vmov	d1, r2, r3
 8001580:	ec45 4b10 	vmov	d0, r4, r5
 8001584:	f009 fcba 	bl	800aefc <atan2>
 8001588:	ec51 0b10 	vmov	r0, r1, d0
 800158c:	a344      	add	r3, pc, #272	@ (adr r3, 80016a0 <imuDataGet+0x3c0>)
 800158e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001592:	f7ff f831 	bl	80005f8 <__aeabi_dmul>
 8001596:	4602      	mov	r2, r0
 8001598:	460b      	mov	r3, r1
 800159a:	4610      	mov	r0, r2
 800159c:	4619      	mov	r1, r3
 800159e:	f7ff fb03 	bl	8000ba8 <__aeabi_d2f>
 80015a2:	4602      	mov	r2, r0
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	609a      	str	r2, [r3, #8]
  pstAngles->fYaw = atan2(-2 * q1 * q2 - 2 * q0 * q3, 2 * q2 * q2 + 2 * q3 * q3 - 1) * 57.3; 
 80015a8:	4b3f      	ldr	r3, [pc, #252]	@ (80016a8 <imuDataGet+0x3c8>)
 80015aa:	edd3 7a00 	vldr	s15, [r3]
 80015ae:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 80015b2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80015b6:	4b3f      	ldr	r3, [pc, #252]	@ (80016b4 <imuDataGet+0x3d4>)
 80015b8:	edd3 7a00 	vldr	s15, [r3]
 80015bc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80015c0:	4b3b      	ldr	r3, [pc, #236]	@ (80016b0 <imuDataGet+0x3d0>)
 80015c2:	edd3 7a00 	vldr	s15, [r3]
 80015c6:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80015ca:	4b38      	ldr	r3, [pc, #224]	@ (80016ac <imuDataGet+0x3cc>)
 80015cc:	edd3 7a00 	vldr	s15, [r3]
 80015d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80015d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015d8:	ee17 0a90 	vmov	r0, s15
 80015dc:	f7fe ffb4 	bl	8000548 <__aeabi_f2d>
 80015e0:	4604      	mov	r4, r0
 80015e2:	460d      	mov	r5, r1
 80015e4:	4b33      	ldr	r3, [pc, #204]	@ (80016b4 <imuDataGet+0x3d4>)
 80015e6:	edd3 7a00 	vldr	s15, [r3]
 80015ea:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80015ee:	4b31      	ldr	r3, [pc, #196]	@ (80016b4 <imuDataGet+0x3d4>)
 80015f0:	edd3 7a00 	vldr	s15, [r3]
 80015f4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80015f8:	4b2c      	ldr	r3, [pc, #176]	@ (80016ac <imuDataGet+0x3cc>)
 80015fa:	edd3 7a00 	vldr	s15, [r3]
 80015fe:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001602:	4b2a      	ldr	r3, [pc, #168]	@ (80016ac <imuDataGet+0x3cc>)
 8001604:	edd3 7a00 	vldr	s15, [r3]
 8001608:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800160c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001610:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001614:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001618:	ee17 0a90 	vmov	r0, s15
 800161c:	f7fe ff94 	bl	8000548 <__aeabi_f2d>
 8001620:	4602      	mov	r2, r0
 8001622:	460b      	mov	r3, r1
 8001624:	ec43 2b11 	vmov	d1, r2, r3
 8001628:	ec45 4b10 	vmov	d0, r4, r5
 800162c:	f009 fc66 	bl	800aefc <atan2>
 8001630:	ec51 0b10 	vmov	r0, r1, d0
 8001634:	a31a      	add	r3, pc, #104	@ (adr r3, 80016a0 <imuDataGet+0x3c0>)
 8001636:	e9d3 2300 	ldrd	r2, r3, [r3]
 800163a:	f7fe ffdd 	bl	80005f8 <__aeabi_dmul>
 800163e:	4602      	mov	r2, r0
 8001640:	460b      	mov	r3, r1
 8001642:	4610      	mov	r0, r2
 8001644:	4619      	mov	r1, r3
 8001646:	f7ff faaf 	bl	8000ba8 <__aeabi_d2f>
 800164a:	4602      	mov	r2, r0
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	601a      	str	r2, [r3, #0]

  pstGyroRawData->s16X = s16Gyro[0];
 8001650:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 8001654:	68bb      	ldr	r3, [r7, #8]
 8001656:	801a      	strh	r2, [r3, #0]
  pstGyroRawData->s16Y = s16Gyro[1];
 8001658:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 800165c:	68bb      	ldr	r3, [r7, #8]
 800165e:	805a      	strh	r2, [r3, #2]
  pstGyroRawData->s16Z = s16Gyro[2];
 8001660:	f9b7 2028 	ldrsh.w	r2, [r7, #40]	@ 0x28
 8001664:	68bb      	ldr	r3, [r7, #8]
 8001666:	809a      	strh	r2, [r3, #4]

  pstAccelRawData->s16X = s16Accel[0];
 8001668:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	801a      	strh	r2, [r3, #0]
  pstAccelRawData->s16Y = s16Accel[1];
 8001670:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	805a      	strh	r2, [r3, #2]
  pstAccelRawData->s16Z  = s16Accel[2];
 8001678:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	809a      	strh	r2, [r3, #4]

  pstMagnRawData->s16X = s16Magn[0];
 8001680:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	801a      	strh	r2, [r3, #0]
  pstMagnRawData->s16Y = s16Magn[1];
 8001688:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	805a      	strh	r2, [r3, #2]
  pstMagnRawData->s16Z = s16Magn[2];  
 8001690:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	809a      	strh	r2, [r3, #4]

  return;  
 8001698:	bf00      	nop
}
 800169a:	3750      	adds	r7, #80	@ 0x50
 800169c:	46bd      	mov	sp, r7
 800169e:	bdb0      	pop	{r4, r5, r7, pc}
 80016a0:	66666666 	.word	0x66666666
 80016a4:	404ca666 	.word	0x404ca666
 80016a8:	200002b0 	.word	0x200002b0
 80016ac:	200002b8 	.word	0x200002b8
 80016b0:	200002ac 	.word	0x200002ac
 80016b4:	200002b4 	.word	0x200002b4
 80016b8:	66666666 	.word	0x66666666
 80016bc:	40406666 	.word	0x40406666
 80016c0:	1eb851ec 	.word	0x1eb851ec
 80016c4:	3f91eb85 	.word	0x3f91eb85

080016c8 <imuAHRSupdate>:

void imuAHRSupdate(float gx, float gy, float gz, float ax, float ay, float az, float mx, float my, float mz) 
{
 80016c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80016cc:	b0a8      	sub	sp, #160	@ 0xa0
 80016ce:	af00      	add	r7, sp, #0
 80016d0:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
 80016d4:	edc7 0a08 	vstr	s1, [r7, #32]
 80016d8:	ed87 1a07 	vstr	s2, [r7, #28]
 80016dc:	edc7 1a06 	vstr	s3, [r7, #24]
 80016e0:	ed87 2a05 	vstr	s4, [r7, #20]
 80016e4:	edc7 2a04 	vstr	s5, [r7, #16]
 80016e8:	ed87 3a03 	vstr	s6, [r7, #12]
 80016ec:	edc7 3a02 	vstr	s7, [r7, #8]
 80016f0:	ed87 4a01 	vstr	s8, [r7, #4]
  float norm;
  float hx, hy, hz, bx, bz;
  float vx, vy, vz, wx, wy, wz;
  float exInt = 0.0, eyInt = 0.0, ezInt = 0.0;
 80016f4:	f04f 0300 	mov.w	r3, #0
 80016f8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80016fc:	f04f 0300 	mov.w	r3, #0
 8001700:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001704:	f04f 0300 	mov.w	r3, #0
 8001708:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  float ex, ey, ez, halfT = 0.024f;
 800170c:	4bef      	ldr	r3, [pc, #956]	@ (8001acc <imuAHRSupdate+0x404>)
 800170e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  float q0q0 = q0 * q0;
 8001712:	4bef      	ldr	r3, [pc, #956]	@ (8001ad0 <imuAHRSupdate+0x408>)
 8001714:	ed93 7a00 	vldr	s14, [r3]
 8001718:	4bed      	ldr	r3, [pc, #948]	@ (8001ad0 <imuAHRSupdate+0x408>)
 800171a:	edd3 7a00 	vldr	s15, [r3]
 800171e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001722:	edc7 7a23 	vstr	s15, [r7, #140]	@ 0x8c
  float q0q1 = q0 * q1;
 8001726:	4bea      	ldr	r3, [pc, #936]	@ (8001ad0 <imuAHRSupdate+0x408>)
 8001728:	ed93 7a00 	vldr	s14, [r3]
 800172c:	4be9      	ldr	r3, [pc, #932]	@ (8001ad4 <imuAHRSupdate+0x40c>)
 800172e:	edd3 7a00 	vldr	s15, [r3]
 8001732:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001736:	edc7 7a22 	vstr	s15, [r7, #136]	@ 0x88
  float q0q2 = q0 * q2;
 800173a:	4be5      	ldr	r3, [pc, #916]	@ (8001ad0 <imuAHRSupdate+0x408>)
 800173c:	ed93 7a00 	vldr	s14, [r3]
 8001740:	4be5      	ldr	r3, [pc, #916]	@ (8001ad8 <imuAHRSupdate+0x410>)
 8001742:	edd3 7a00 	vldr	s15, [r3]
 8001746:	ee67 7a27 	vmul.f32	s15, s14, s15
 800174a:	edc7 7a21 	vstr	s15, [r7, #132]	@ 0x84
  float q0q3 = q0 * q3;
 800174e:	4be0      	ldr	r3, [pc, #896]	@ (8001ad0 <imuAHRSupdate+0x408>)
 8001750:	ed93 7a00 	vldr	s14, [r3]
 8001754:	4be1      	ldr	r3, [pc, #900]	@ (8001adc <imuAHRSupdate+0x414>)
 8001756:	edd3 7a00 	vldr	s15, [r3]
 800175a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800175e:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80
  float q1q1 = q1 * q1;
 8001762:	4bdc      	ldr	r3, [pc, #880]	@ (8001ad4 <imuAHRSupdate+0x40c>)
 8001764:	ed93 7a00 	vldr	s14, [r3]
 8001768:	4bda      	ldr	r3, [pc, #872]	@ (8001ad4 <imuAHRSupdate+0x40c>)
 800176a:	edd3 7a00 	vldr	s15, [r3]
 800176e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001772:	edc7 7a1f 	vstr	s15, [r7, #124]	@ 0x7c
  float q1q2 = q1 * q2;
 8001776:	4bd7      	ldr	r3, [pc, #860]	@ (8001ad4 <imuAHRSupdate+0x40c>)
 8001778:	ed93 7a00 	vldr	s14, [r3]
 800177c:	4bd6      	ldr	r3, [pc, #856]	@ (8001ad8 <imuAHRSupdate+0x410>)
 800177e:	edd3 7a00 	vldr	s15, [r3]
 8001782:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001786:	edc7 7a1e 	vstr	s15, [r7, #120]	@ 0x78
  float q1q3 = q1 * q3;
 800178a:	4bd2      	ldr	r3, [pc, #840]	@ (8001ad4 <imuAHRSupdate+0x40c>)
 800178c:	ed93 7a00 	vldr	s14, [r3]
 8001790:	4bd2      	ldr	r3, [pc, #840]	@ (8001adc <imuAHRSupdate+0x414>)
 8001792:	edd3 7a00 	vldr	s15, [r3]
 8001796:	ee67 7a27 	vmul.f32	s15, s14, s15
 800179a:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74
  float q2q2 = q2 * q2;   
 800179e:	4bce      	ldr	r3, [pc, #824]	@ (8001ad8 <imuAHRSupdate+0x410>)
 80017a0:	ed93 7a00 	vldr	s14, [r3]
 80017a4:	4bcc      	ldr	r3, [pc, #816]	@ (8001ad8 <imuAHRSupdate+0x410>)
 80017a6:	edd3 7a00 	vldr	s15, [r3]
 80017aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017ae:	edc7 7a1c 	vstr	s15, [r7, #112]	@ 0x70
  float q2q3 = q2 * q3;
 80017b2:	4bc9      	ldr	r3, [pc, #804]	@ (8001ad8 <imuAHRSupdate+0x410>)
 80017b4:	ed93 7a00 	vldr	s14, [r3]
 80017b8:	4bc8      	ldr	r3, [pc, #800]	@ (8001adc <imuAHRSupdate+0x414>)
 80017ba:	edd3 7a00 	vldr	s15, [r3]
 80017be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017c2:	edc7 7a1b 	vstr	s15, [r7, #108]	@ 0x6c
  float q3q3 = q3 * q3;          
 80017c6:	4bc5      	ldr	r3, [pc, #788]	@ (8001adc <imuAHRSupdate+0x414>)
 80017c8:	ed93 7a00 	vldr	s14, [r3]
 80017cc:	4bc3      	ldr	r3, [pc, #780]	@ (8001adc <imuAHRSupdate+0x414>)
 80017ce:	edd3 7a00 	vldr	s15, [r3]
 80017d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017d6:	edc7 7a1a 	vstr	s15, [r7, #104]	@ 0x68

  norm = invSqrt(ax * ax + ay * ay + az * az);       
 80017da:	edd7 7a06 	vldr	s15, [r7, #24]
 80017de:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80017e2:	edd7 7a05 	vldr	s15, [r7, #20]
 80017e6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80017ea:	ee37 7a27 	vadd.f32	s14, s14, s15
 80017ee:	edd7 7a04 	vldr	s15, [r7, #16]
 80017f2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80017f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017fa:	eeb0 0a67 	vmov.f32	s0, s15
 80017fe:	f000 fb95 	bl	8001f2c <invSqrt>
 8001802:	ed87 0a19 	vstr	s0, [r7, #100]	@ 0x64
  ax = ax * norm;
 8001806:	ed97 7a06 	vldr	s14, [r7, #24]
 800180a:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 800180e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001812:	edc7 7a06 	vstr	s15, [r7, #24]
  ay = ay * norm;
 8001816:	ed97 7a05 	vldr	s14, [r7, #20]
 800181a:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 800181e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001822:	edc7 7a05 	vstr	s15, [r7, #20]
  az = az * norm;
 8001826:	ed97 7a04 	vldr	s14, [r7, #16]
 800182a:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 800182e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001832:	edc7 7a04 	vstr	s15, [r7, #16]

  norm = invSqrt(mx * mx + my * my + mz * mz);          
 8001836:	edd7 7a03 	vldr	s15, [r7, #12]
 800183a:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800183e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001842:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001846:	ee37 7a27 	vadd.f32	s14, s14, s15
 800184a:	edd7 7a01 	vldr	s15, [r7, #4]
 800184e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001852:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001856:	eeb0 0a67 	vmov.f32	s0, s15
 800185a:	f000 fb67 	bl	8001f2c <invSqrt>
 800185e:	ed87 0a19 	vstr	s0, [r7, #100]	@ 0x64
  mx = mx * norm;
 8001862:	ed97 7a03 	vldr	s14, [r7, #12]
 8001866:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 800186a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800186e:	edc7 7a03 	vstr	s15, [r7, #12]
  my = my * norm;
 8001872:	ed97 7a02 	vldr	s14, [r7, #8]
 8001876:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 800187a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800187e:	edc7 7a02 	vstr	s15, [r7, #8]
  mz = mz * norm;
 8001882:	ed97 7a01 	vldr	s14, [r7, #4]
 8001886:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 800188a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800188e:	edc7 7a01 	vstr	s15, [r7, #4]

  // compute reference direction of flux
  hx = 2 * mx * (0.5f - q2q2 - q3q3) + 2 * my * (q1q2 - q0q3) + 2 * mz * (q1q3 + q0q2);
 8001892:	edd7 7a03 	vldr	s15, [r7, #12]
 8001896:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800189a:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 800189e:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 80018a2:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80018a6:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 80018aa:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80018ae:	ee27 7a27 	vmul.f32	s14, s14, s15
 80018b2:	edd7 7a02 	vldr	s15, [r7, #8]
 80018b6:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80018ba:	ed97 6a1e 	vldr	s12, [r7, #120]	@ 0x78
 80018be:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 80018c2:	ee76 7a67 	vsub.f32	s15, s12, s15
 80018c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018ca:	ee37 7a27 	vadd.f32	s14, s14, s15
 80018ce:	edd7 7a01 	vldr	s15, [r7, #4]
 80018d2:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80018d6:	ed97 6a1d 	vldr	s12, [r7, #116]	@ 0x74
 80018da:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 80018de:	ee76 7a27 	vadd.f32	s15, s12, s15
 80018e2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018ea:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
  hy = 2 * mx * (q1q2 + q0q3) + 2 * my * (0.5f - q1q1 - q3q3) + 2 * mz * (q2q3 - q0q1);
 80018ee:	edd7 7a03 	vldr	s15, [r7, #12]
 80018f2:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80018f6:	edd7 6a1e 	vldr	s13, [r7, #120]	@ 0x78
 80018fa:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 80018fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001902:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001906:	edd7 7a02 	vldr	s15, [r7, #8]
 800190a:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800190e:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 8001912:	edd7 7a1f 	vldr	s15, [r7, #124]	@ 0x7c
 8001916:	ee36 6a67 	vsub.f32	s12, s12, s15
 800191a:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 800191e:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001922:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001926:	ee37 7a27 	vadd.f32	s14, s14, s15
 800192a:	edd7 7a01 	vldr	s15, [r7, #4]
 800192e:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001932:	ed97 6a1b 	vldr	s12, [r7, #108]	@ 0x6c
 8001936:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 800193a:	ee76 7a67 	vsub.f32	s15, s12, s15
 800193e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001942:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001946:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
  hz = 2 * mx * (q1q3 - q0q2) + 2 * my * (q2q3 + q0q1) + 2 * mz * (0.5f - q1q1 - q2q2);         
 800194a:	edd7 7a03 	vldr	s15, [r7, #12]
 800194e:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001952:	edd7 6a1d 	vldr	s13, [r7, #116]	@ 0x74
 8001956:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 800195a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800195e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001962:	edd7 7a02 	vldr	s15, [r7, #8]
 8001966:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800196a:	ed97 6a1b 	vldr	s12, [r7, #108]	@ 0x6c
 800196e:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 8001972:	ee76 7a27 	vadd.f32	s15, s12, s15
 8001976:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800197a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800197e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001982:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001986:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 800198a:	edd7 7a1f 	vldr	s15, [r7, #124]	@ 0x7c
 800198e:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001992:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 8001996:	ee76 7a67 	vsub.f32	s15, s12, s15
 800199a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800199e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019a2:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
  bx = sqrt((hx * hx) + (hy * hy));
 80019a6:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 80019aa:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80019ae:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 80019b2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80019b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019ba:	ee17 0a90 	vmov	r0, s15
 80019be:	f7fe fdc3 	bl	8000548 <__aeabi_f2d>
 80019c2:	4602      	mov	r2, r0
 80019c4:	460b      	mov	r3, r1
 80019c6:	ec43 2b10 	vmov	d0, r2, r3
 80019ca:	f009 fb09 	bl	800afe0 <sqrt>
 80019ce:	ec53 2b10 	vmov	r2, r3, d0
 80019d2:	4610      	mov	r0, r2
 80019d4:	4619      	mov	r1, r3
 80019d6:	f7ff f8e7 	bl	8000ba8 <__aeabi_d2f>
 80019da:	4603      	mov	r3, r0
 80019dc:	657b      	str	r3, [r7, #84]	@ 0x54
  bz = hz;     
 80019de:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80019e0:	653b      	str	r3, [r7, #80]	@ 0x50

  // estimated direction of gravity and flux (v and w)
  vx = 2 * (q1q3 - q0q2);
 80019e2:	ed97 7a1d 	vldr	s14, [r7, #116]	@ 0x74
 80019e6:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 80019ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019ee:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80019f2:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
  vy = 2 * (q0q1 + q2q3);
 80019f6:	ed97 7a22 	vldr	s14, [r7, #136]	@ 0x88
 80019fa:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 80019fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a02:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001a06:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
  vz = q0q0 - q1q1 - q2q2 + q3q3;
 8001a0a:	ed97 7a23 	vldr	s14, [r7, #140]	@ 0x8c
 8001a0e:	edd7 7a1f 	vldr	s15, [r7, #124]	@ 0x7c
 8001a12:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001a16:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 8001a1a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a1e:	ed97 7a1a 	vldr	s14, [r7, #104]	@ 0x68
 8001a22:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a26:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
  wx = 2 * bx * (0.5 - q2q2 - q3q3) + 2 * bz * (q1q3 - q0q2);
 8001a2a:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8001a2e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001a32:	ee17 0a90 	vmov	r0, s15
 8001a36:	f7fe fd87 	bl	8000548 <__aeabi_f2d>
 8001a3a:	4604      	mov	r4, r0
 8001a3c:	460d      	mov	r5, r1
 8001a3e:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8001a40:	f7fe fd82 	bl	8000548 <__aeabi_f2d>
 8001a44:	4602      	mov	r2, r0
 8001a46:	460b      	mov	r3, r1
 8001a48:	f04f 0000 	mov.w	r0, #0
 8001a4c:	4924      	ldr	r1, [pc, #144]	@ (8001ae0 <imuAHRSupdate+0x418>)
 8001a4e:	f7fe fc1b 	bl	8000288 <__aeabi_dsub>
 8001a52:	4602      	mov	r2, r0
 8001a54:	460b      	mov	r3, r1
 8001a56:	4690      	mov	r8, r2
 8001a58:	4699      	mov	r9, r3
 8001a5a:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 8001a5c:	f7fe fd74 	bl	8000548 <__aeabi_f2d>
 8001a60:	4602      	mov	r2, r0
 8001a62:	460b      	mov	r3, r1
 8001a64:	4640      	mov	r0, r8
 8001a66:	4649      	mov	r1, r9
 8001a68:	f7fe fc0e 	bl	8000288 <__aeabi_dsub>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	460b      	mov	r3, r1
 8001a70:	4620      	mov	r0, r4
 8001a72:	4629      	mov	r1, r5
 8001a74:	f7fe fdc0 	bl	80005f8 <__aeabi_dmul>
 8001a78:	4602      	mov	r2, r0
 8001a7a:	460b      	mov	r3, r1
 8001a7c:	4614      	mov	r4, r2
 8001a7e:	461d      	mov	r5, r3
 8001a80:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 8001a84:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001a88:	edd7 6a1d 	vldr	s13, [r7, #116]	@ 0x74
 8001a8c:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 8001a90:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001a94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a98:	ee17 0a90 	vmov	r0, s15
 8001a9c:	f7fe fd54 	bl	8000548 <__aeabi_f2d>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	460b      	mov	r3, r1
 8001aa4:	4620      	mov	r0, r4
 8001aa6:	4629      	mov	r1, r5
 8001aa8:	f7fe fbf0 	bl	800028c <__adddf3>
 8001aac:	4602      	mov	r2, r0
 8001aae:	460b      	mov	r3, r1
 8001ab0:	4610      	mov	r0, r2
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	f7ff f878 	bl	8000ba8 <__aeabi_d2f>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	643b      	str	r3, [r7, #64]	@ 0x40
  wy = 2 * bx * (q1q2 - q0q3) + 2 * bz * (q0q1 + q2q3);
 8001abc:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8001ac0:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001ac4:	edd7 6a1e 	vldr	s13, [r7, #120]	@ 0x78
 8001ac8:	e00c      	b.n	8001ae4 <imuAHRSupdate+0x41c>
 8001aca:	bf00      	nop
 8001acc:	3cc49ba6 	.word	0x3cc49ba6
 8001ad0:	200002ac 	.word	0x200002ac
 8001ad4:	200002b0 	.word	0x200002b0
 8001ad8:	200002b4 	.word	0x200002b4
 8001adc:	200002b8 	.word	0x200002b8
 8001ae0:	3fe00000 	.word	0x3fe00000
 8001ae4:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 8001ae8:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001aec:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001af0:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 8001af4:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001af8:	ed97 6a22 	vldr	s12, [r7, #136]	@ 0x88
 8001afc:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 8001b00:	ee76 7a27 	vadd.f32	s15, s12, s15
 8001b04:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b08:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b0c:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
  wz = 2 * bx * (q0q2 + q1q3) + 2 * bz * (0.5 - q1q1 - q2q2);  
 8001b10:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8001b14:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001b18:	edd7 6a21 	vldr	s13, [r7, #132]	@ 0x84
 8001b1c:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 8001b20:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001b24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b28:	ee17 0a90 	vmov	r0, s15
 8001b2c:	f7fe fd0c 	bl	8000548 <__aeabi_f2d>
 8001b30:	4604      	mov	r4, r0
 8001b32:	460d      	mov	r5, r1
 8001b34:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 8001b38:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001b3c:	ee17 0a90 	vmov	r0, s15
 8001b40:	f7fe fd02 	bl	8000548 <__aeabi_f2d>
 8001b44:	4680      	mov	r8, r0
 8001b46:	4689      	mov	r9, r1
 8001b48:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 8001b4a:	f7fe fcfd 	bl	8000548 <__aeabi_f2d>
 8001b4e:	4602      	mov	r2, r0
 8001b50:	460b      	mov	r3, r1
 8001b52:	f04f 0000 	mov.w	r0, #0
 8001b56:	49e7      	ldr	r1, [pc, #924]	@ (8001ef4 <imuAHRSupdate+0x82c>)
 8001b58:	f7fe fb96 	bl	8000288 <__aeabi_dsub>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	460b      	mov	r3, r1
 8001b60:	4692      	mov	sl, r2
 8001b62:	469b      	mov	fp, r3
 8001b64:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8001b66:	f7fe fcef 	bl	8000548 <__aeabi_f2d>
 8001b6a:	4602      	mov	r2, r0
 8001b6c:	460b      	mov	r3, r1
 8001b6e:	4650      	mov	r0, sl
 8001b70:	4659      	mov	r1, fp
 8001b72:	f7fe fb89 	bl	8000288 <__aeabi_dsub>
 8001b76:	4602      	mov	r2, r0
 8001b78:	460b      	mov	r3, r1
 8001b7a:	4640      	mov	r0, r8
 8001b7c:	4649      	mov	r1, r9
 8001b7e:	f7fe fd3b 	bl	80005f8 <__aeabi_dmul>
 8001b82:	4602      	mov	r2, r0
 8001b84:	460b      	mov	r3, r1
 8001b86:	4620      	mov	r0, r4
 8001b88:	4629      	mov	r1, r5
 8001b8a:	f7fe fb7f 	bl	800028c <__adddf3>
 8001b8e:	4602      	mov	r2, r0
 8001b90:	460b      	mov	r3, r1
 8001b92:	4610      	mov	r0, r2
 8001b94:	4619      	mov	r1, r3
 8001b96:	f7ff f807 	bl	8000ba8 <__aeabi_d2f>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	63bb      	str	r3, [r7, #56]	@ 0x38

  // error is sum of cross product between reference direction of fields and direction measured by sensors
  ex = (ay * vz - az * vy) + (my * wz - mz * wy);
 8001b9e:	ed97 7a05 	vldr	s14, [r7, #20]
 8001ba2:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8001ba6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001baa:	edd7 6a04 	vldr	s13, [r7, #16]
 8001bae:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8001bb2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bb6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001bba:	edd7 6a02 	vldr	s13, [r7, #8]
 8001bbe:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8001bc2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001bc6:	ed97 6a01 	vldr	s12, [r7, #4]
 8001bca:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8001bce:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001bd2:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001bd6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bda:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
  ey = (az * vx - ax * vz) + (mz * wx - mx * wz);
 8001bde:	ed97 7a04 	vldr	s14, [r7, #16]
 8001be2:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8001be6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001bea:	edd7 6a06 	vldr	s13, [r7, #24]
 8001bee:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8001bf2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bf6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001bfa:	edd7 6a01 	vldr	s13, [r7, #4]
 8001bfe:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8001c02:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001c06:	ed97 6a03 	vldr	s12, [r7, #12]
 8001c0a:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8001c0e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001c12:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001c16:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c1a:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
  ez = (ax * vy - ay * vx) + (mx * wy - my * wx);
 8001c1e:	ed97 7a06 	vldr	s14, [r7, #24]
 8001c22:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8001c26:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c2a:	edd7 6a05 	vldr	s13, [r7, #20]
 8001c2e:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8001c32:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c36:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001c3a:	edd7 6a03 	vldr	s13, [r7, #12]
 8001c3e:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8001c42:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001c46:	ed97 6a02 	vldr	s12, [r7, #8]
 8001c4a:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8001c4e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001c52:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001c56:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c5a:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

  if(ex != 0.0f && ey != 0.0f && ez != 0.0f)
 8001c5e:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001c62:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001c66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c6a:	d061      	beq.n	8001d30 <imuAHRSupdate+0x668>
 8001c6c:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001c70:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001c74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c78:	d05a      	beq.n	8001d30 <imuAHRSupdate+0x668>
 8001c7a:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001c7e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001c82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c86:	d053      	beq.n	8001d30 <imuAHRSupdate+0x668>
  {
    exInt = exInt + ex * Ki * halfT;
 8001c88:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8001c8c:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 8001c90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c94:	ed97 7a27 	vldr	s14, [r7, #156]	@ 0x9c
 8001c98:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c9c:	edc7 7a27 	vstr	s15, [r7, #156]	@ 0x9c
    eyInt = eyInt + ey * Ki * halfT;  
 8001ca0:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8001ca4:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 8001ca8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cac:	ed97 7a26 	vldr	s14, [r7, #152]	@ 0x98
 8001cb0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cb4:	edc7 7a26 	vstr	s15, [r7, #152]	@ 0x98
    ezInt = ezInt + ez * Ki * halfT;
 8001cb8:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8001cbc:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 8001cc0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cc4:	ed97 7a25 	vldr	s14, [r7, #148]	@ 0x94
 8001cc8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ccc:	edc7 7a25 	vstr	s15, [r7, #148]	@ 0x94

    gx = gx + Kp * ex + exInt;
 8001cd0:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001cd4:	eeb1 7a02 	vmov.f32	s14, #18	@ 0x40900000  4.5
 8001cd8:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001cdc:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001ce0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ce4:	ed97 7a27 	vldr	s14, [r7, #156]	@ 0x9c
 8001ce8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cec:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    gy = gy + Kp * ey + eyInt;
 8001cf0:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001cf4:	eeb1 7a02 	vmov.f32	s14, #18	@ 0x40900000  4.5
 8001cf8:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001cfc:	edd7 7a08 	vldr	s15, [r7, #32]
 8001d00:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d04:	ed97 7a26 	vldr	s14, [r7, #152]	@ 0x98
 8001d08:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d0c:	edc7 7a08 	vstr	s15, [r7, #32]
    gz = gz + Kp * ez + ezInt;
 8001d10:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001d14:	eeb1 7a02 	vmov.f32	s14, #18	@ 0x40900000  4.5
 8001d18:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001d1c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001d20:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d24:	ed97 7a25 	vldr	s14, [r7, #148]	@ 0x94
 8001d28:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d2c:	edc7 7a07 	vstr	s15, [r7, #28]
  }

  q0 = q0 + (-q1 * gx - q2 * gy - q3 * gz) * halfT;
 8001d30:	4b71      	ldr	r3, [pc, #452]	@ (8001ef8 <imuAHRSupdate+0x830>)
 8001d32:	edd3 7a00 	vldr	s15, [r3]
 8001d36:	eeb1 7a67 	vneg.f32	s14, s15
 8001d3a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001d3e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d42:	4b6e      	ldr	r3, [pc, #440]	@ (8001efc <imuAHRSupdate+0x834>)
 8001d44:	edd3 6a00 	vldr	s13, [r3]
 8001d48:	edd7 7a08 	vldr	s15, [r7, #32]
 8001d4c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d50:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001d54:	4b6a      	ldr	r3, [pc, #424]	@ (8001f00 <imuAHRSupdate+0x838>)
 8001d56:	edd3 6a00 	vldr	s13, [r3]
 8001d5a:	edd7 7a07 	vldr	s15, [r7, #28]
 8001d5e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d62:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001d66:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 8001d6a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d6e:	4b65      	ldr	r3, [pc, #404]	@ (8001f04 <imuAHRSupdate+0x83c>)
 8001d70:	edd3 7a00 	vldr	s15, [r3]
 8001d74:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d78:	4b62      	ldr	r3, [pc, #392]	@ (8001f04 <imuAHRSupdate+0x83c>)
 8001d7a:	edc3 7a00 	vstr	s15, [r3]
  q1 = q1 + (q0 * gx + q2 * gz - q3 * gy) * halfT;
 8001d7e:	4b61      	ldr	r3, [pc, #388]	@ (8001f04 <imuAHRSupdate+0x83c>)
 8001d80:	ed93 7a00 	vldr	s14, [r3]
 8001d84:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001d88:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d8c:	4b5b      	ldr	r3, [pc, #364]	@ (8001efc <imuAHRSupdate+0x834>)
 8001d8e:	edd3 6a00 	vldr	s13, [r3]
 8001d92:	edd7 7a07 	vldr	s15, [r7, #28]
 8001d96:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d9a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d9e:	4b58      	ldr	r3, [pc, #352]	@ (8001f00 <imuAHRSupdate+0x838>)
 8001da0:	edd3 6a00 	vldr	s13, [r3]
 8001da4:	edd7 7a08 	vldr	s15, [r7, #32]
 8001da8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001dac:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001db0:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 8001db4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001db8:	4b4f      	ldr	r3, [pc, #316]	@ (8001ef8 <imuAHRSupdate+0x830>)
 8001dba:	edd3 7a00 	vldr	s15, [r3]
 8001dbe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001dc2:	4b4d      	ldr	r3, [pc, #308]	@ (8001ef8 <imuAHRSupdate+0x830>)
 8001dc4:	edc3 7a00 	vstr	s15, [r3]
  q2 = q2 + (q0 * gy - q1 * gz + q3 * gx) * halfT;
 8001dc8:	4b4e      	ldr	r3, [pc, #312]	@ (8001f04 <imuAHRSupdate+0x83c>)
 8001dca:	ed93 7a00 	vldr	s14, [r3]
 8001dce:	edd7 7a08 	vldr	s15, [r7, #32]
 8001dd2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001dd6:	4b48      	ldr	r3, [pc, #288]	@ (8001ef8 <imuAHRSupdate+0x830>)
 8001dd8:	edd3 6a00 	vldr	s13, [r3]
 8001ddc:	edd7 7a07 	vldr	s15, [r7, #28]
 8001de0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001de4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001de8:	4b45      	ldr	r3, [pc, #276]	@ (8001f00 <imuAHRSupdate+0x838>)
 8001dea:	edd3 6a00 	vldr	s13, [r3]
 8001dee:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001df2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001df6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001dfa:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 8001dfe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e02:	4b3e      	ldr	r3, [pc, #248]	@ (8001efc <imuAHRSupdate+0x834>)
 8001e04:	edd3 7a00 	vldr	s15, [r3]
 8001e08:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e0c:	4b3b      	ldr	r3, [pc, #236]	@ (8001efc <imuAHRSupdate+0x834>)
 8001e0e:	edc3 7a00 	vstr	s15, [r3]
  q3 = q3 + (q0 * gz + q1 * gy - q2 * gx) * halfT;  
 8001e12:	4b3c      	ldr	r3, [pc, #240]	@ (8001f04 <imuAHRSupdate+0x83c>)
 8001e14:	ed93 7a00 	vldr	s14, [r3]
 8001e18:	edd7 7a07 	vldr	s15, [r7, #28]
 8001e1c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e20:	4b35      	ldr	r3, [pc, #212]	@ (8001ef8 <imuAHRSupdate+0x830>)
 8001e22:	edd3 6a00 	vldr	s13, [r3]
 8001e26:	edd7 7a08 	vldr	s15, [r7, #32]
 8001e2a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e2e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e32:	4b32      	ldr	r3, [pc, #200]	@ (8001efc <imuAHRSupdate+0x834>)
 8001e34:	edd3 6a00 	vldr	s13, [r3]
 8001e38:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001e3c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e40:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001e44:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 8001e48:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e4c:	4b2c      	ldr	r3, [pc, #176]	@ (8001f00 <imuAHRSupdate+0x838>)
 8001e4e:	edd3 7a00 	vldr	s15, [r3]
 8001e52:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e56:	4b2a      	ldr	r3, [pc, #168]	@ (8001f00 <imuAHRSupdate+0x838>)
 8001e58:	edc3 7a00 	vstr	s15, [r3]

  norm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 8001e5c:	4b29      	ldr	r3, [pc, #164]	@ (8001f04 <imuAHRSupdate+0x83c>)
 8001e5e:	ed93 7a00 	vldr	s14, [r3]
 8001e62:	4b28      	ldr	r3, [pc, #160]	@ (8001f04 <imuAHRSupdate+0x83c>)
 8001e64:	edd3 7a00 	vldr	s15, [r3]
 8001e68:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e6c:	4b22      	ldr	r3, [pc, #136]	@ (8001ef8 <imuAHRSupdate+0x830>)
 8001e6e:	edd3 6a00 	vldr	s13, [r3]
 8001e72:	4b21      	ldr	r3, [pc, #132]	@ (8001ef8 <imuAHRSupdate+0x830>)
 8001e74:	edd3 7a00 	vldr	s15, [r3]
 8001e78:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e7c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e80:	4b1e      	ldr	r3, [pc, #120]	@ (8001efc <imuAHRSupdate+0x834>)
 8001e82:	edd3 6a00 	vldr	s13, [r3]
 8001e86:	4b1d      	ldr	r3, [pc, #116]	@ (8001efc <imuAHRSupdate+0x834>)
 8001e88:	edd3 7a00 	vldr	s15, [r3]
 8001e8c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e90:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e94:	4b1a      	ldr	r3, [pc, #104]	@ (8001f00 <imuAHRSupdate+0x838>)
 8001e96:	edd3 6a00 	vldr	s13, [r3]
 8001e9a:	4b19      	ldr	r3, [pc, #100]	@ (8001f00 <imuAHRSupdate+0x838>)
 8001e9c:	edd3 7a00 	vldr	s15, [r3]
 8001ea0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ea4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ea8:	eeb0 0a67 	vmov.f32	s0, s15
 8001eac:	f000 f83e 	bl	8001f2c <invSqrt>
 8001eb0:	ed87 0a19 	vstr	s0, [r7, #100]	@ 0x64
  q0 = q0 * norm;
 8001eb4:	4b13      	ldr	r3, [pc, #76]	@ (8001f04 <imuAHRSupdate+0x83c>)
 8001eb6:	ed93 7a00 	vldr	s14, [r3]
 8001eba:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8001ebe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ec2:	4b10      	ldr	r3, [pc, #64]	@ (8001f04 <imuAHRSupdate+0x83c>)
 8001ec4:	edc3 7a00 	vstr	s15, [r3]
  q1 = q1 * norm;
 8001ec8:	4b0b      	ldr	r3, [pc, #44]	@ (8001ef8 <imuAHRSupdate+0x830>)
 8001eca:	ed93 7a00 	vldr	s14, [r3]
 8001ece:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8001ed2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ed6:	4b08      	ldr	r3, [pc, #32]	@ (8001ef8 <imuAHRSupdate+0x830>)
 8001ed8:	edc3 7a00 	vstr	s15, [r3]
  q2 = q2 * norm;
 8001edc:	4b07      	ldr	r3, [pc, #28]	@ (8001efc <imuAHRSupdate+0x834>)
 8001ede:	ed93 7a00 	vldr	s14, [r3]
 8001ee2:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8001ee6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001eea:	4b04      	ldr	r3, [pc, #16]	@ (8001efc <imuAHRSupdate+0x834>)
 8001eec:	edc3 7a00 	vstr	s15, [r3]
 8001ef0:	e00a      	b.n	8001f08 <imuAHRSupdate+0x840>
 8001ef2:	bf00      	nop
 8001ef4:	3fe00000 	.word	0x3fe00000
 8001ef8:	200002b0 	.word	0x200002b0
 8001efc:	200002b4 	.word	0x200002b4
 8001f00:	200002b8 	.word	0x200002b8
 8001f04:	200002ac 	.word	0x200002ac
  q3 = q3 * norm;
 8001f08:	4b07      	ldr	r3, [pc, #28]	@ (8001f28 <imuAHRSupdate+0x860>)
 8001f0a:	ed93 7a00 	vldr	s14, [r3]
 8001f0e:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8001f12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f16:	4b04      	ldr	r3, [pc, #16]	@ (8001f28 <imuAHRSupdate+0x860>)
 8001f18:	edc3 7a00 	vstr	s15, [r3]
}
 8001f1c:	bf00      	nop
 8001f1e:	37a0      	adds	r7, #160	@ 0xa0
 8001f20:	46bd      	mov	sp, r7
 8001f22:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001f26:	bf00      	nop
 8001f28:	200002b8 	.word	0x200002b8

08001f2c <invSqrt>:

float invSqrt(float x) 
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b087      	sub	sp, #28
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	ed87 0a01 	vstr	s0, [r7, #4]
  float halfx = 0.5f * x;
 8001f36:	edd7 7a01 	vldr	s15, [r7, #4]
 8001f3a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001f3e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f42:	edc7 7a05 	vstr	s15, [r7, #20]
  float y = x;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	613b      	str	r3, [r7, #16]
  
  long i = *(long*)&y;                //get bits for floating value
 8001f4a:	f107 0310 	add.w	r3, r7, #16
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	60fb      	str	r3, [r7, #12]
  i = 0x5f3759df - (i >> 1);          //gives initial guss you
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	105a      	asrs	r2, r3, #1
 8001f56:	4b12      	ldr	r3, [pc, #72]	@ (8001fa0 <invSqrt+0x74>)
 8001f58:	1a9b      	subs	r3, r3, r2
 8001f5a:	60fb      	str	r3, [r7, #12]
  y = *(float*)&i;                    //convert bits back to float
 8001f5c:	f107 030c 	add.w	r3, r7, #12
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	613b      	str	r3, [r7, #16]
  y = y * (1.5f - (halfx * y * y));   //newtop step, repeating increases accuracy
 8001f64:	ed97 7a04 	vldr	s14, [r7, #16]
 8001f68:	edd7 7a05 	vldr	s15, [r7, #20]
 8001f6c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f70:	edd7 7a04 	vldr	s15, [r7, #16]
 8001f74:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f78:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 8001f7c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001f80:	edd7 7a04 	vldr	s15, [r7, #16]
 8001f84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f88:	edc7 7a04 	vstr	s15, [r7, #16]
  
  return y;
 8001f8c:	693b      	ldr	r3, [r7, #16]
 8001f8e:	ee07 3a90 	vmov	s15, r3
}
 8001f92:	eeb0 0a67 	vmov.f32	s0, s15
 8001f96:	371c      	adds	r7, #28
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9e:	4770      	bx	lr
 8001fa0:	5f3759df 	.word	0x5f3759df

08001fa4 <icm20948init>:
/******************************************************************************
 * icm20948 sensor device                                                     *
 ******************************************************************************/
void icm20948init(void)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	af00      	add	r7, sp, #0

  /* user bank 0 register */
  I2C_WriteOneByte(I2C_ADD_ICM20948, REG_ADD_REG_BANK_SEL, REG_VAL_REG_BANK_0);
 8001fa8:	2200      	movs	r2, #0
 8001faa:	217f      	movs	r1, #127	@ 0x7f
 8001fac:	20d0      	movs	r0, #208	@ 0xd0
 8001fae:	f7ff f931 	bl	8001214 <I2C_WriteOneByte>
  I2C_WriteOneByte(I2C_ADD_ICM20948, REG_ADD_PWR_MIGMT_1,  REG_VAL_ALL_RGE_RESET);
 8001fb2:	2280      	movs	r2, #128	@ 0x80
 8001fb4:	2106      	movs	r1, #6
 8001fb6:	20d0      	movs	r0, #208	@ 0xd0
 8001fb8:	f7ff f92c 	bl	8001214 <I2C_WriteOneByte>
  HAL_Delay(10);
 8001fbc:	200a      	movs	r0, #10
 8001fbe:	f002 fe47 	bl	8004c50 <HAL_Delay>
  I2C_WriteOneByte(I2C_ADD_ICM20948, REG_ADD_PWR_MIGMT_1,  REG_VAL_RUN_MODE);  
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	2106      	movs	r1, #6
 8001fc6:	20d0      	movs	r0, #208	@ 0xd0
 8001fc8:	f7ff f924 	bl	8001214 <I2C_WriteOneByte>

  /* user bank 2 register */
  I2C_WriteOneByte(I2C_ADD_ICM20948, REG_ADD_REG_BANK_SEL, REG_VAL_REG_BANK_2);
 8001fcc:	2220      	movs	r2, #32
 8001fce:	217f      	movs	r1, #127	@ 0x7f
 8001fd0:	20d0      	movs	r0, #208	@ 0xd0
 8001fd2:	f7ff f91f 	bl	8001214 <I2C_WriteOneByte>
  I2C_WriteOneByte( I2C_ADD_ICM20948, REG_ADD_GYRO_SMPLRT_DIV, 0x07);
 8001fd6:	2207      	movs	r2, #7
 8001fd8:	2100      	movs	r1, #0
 8001fda:	20d0      	movs	r0, #208	@ 0xd0
 8001fdc:	f7ff f91a 	bl	8001214 <I2C_WriteOneByte>
  I2C_WriteOneByte( I2C_ADD_ICM20948, REG_ADD_GYRO_CONFIG_1,   
 8001fe0:	2235      	movs	r2, #53	@ 0x35
 8001fe2:	2101      	movs	r1, #1
 8001fe4:	20d0      	movs	r0, #208	@ 0xd0
 8001fe6:	f7ff f915 	bl	8001214 <I2C_WriteOneByte>
                  REG_VAL_BIT_GYRO_DLPCFG_6 | REG_VAL_BIT_GYRO_FS_1000DPS | REG_VAL_BIT_GYRO_DLPF);
  I2C_WriteOneByte( I2C_ADD_ICM20948, REG_ADD_ACCEL_SMPLRT_DIV_2,  0x07);
 8001fea:	2207      	movs	r2, #7
 8001fec:	2111      	movs	r1, #17
 8001fee:	20d0      	movs	r0, #208	@ 0xd0
 8001ff0:	f7ff f910 	bl	8001214 <I2C_WriteOneByte>
  I2C_WriteOneByte( I2C_ADD_ICM20948, REG_ADD_ACCEL_CONFIG,
 8001ff4:	2231      	movs	r2, #49	@ 0x31
 8001ff6:	2114      	movs	r1, #20
 8001ff8:	20d0      	movs	r0, #208	@ 0xd0
 8001ffa:	f7ff f90b 	bl	8001214 <I2C_WriteOneByte>
                  REG_VAL_BIT_ACCEL_DLPCFG_6 | REG_VAL_BIT_ACCEL_FS_2g | REG_VAL_BIT_ACCEL_DLPF);

  /* user bank 0 register */
  I2C_WriteOneByte(I2C_ADD_ICM20948, REG_ADD_REG_BANK_SEL, REG_VAL_REG_BANK_0); 
 8001ffe:	2200      	movs	r2, #0
 8002000:	217f      	movs	r1, #127	@ 0x7f
 8002002:	20d0      	movs	r0, #208	@ 0xd0
 8002004:	f7ff f906 	bl	8001214 <I2C_WriteOneByte>

  HAL_Delay(100);
 8002008:	2064      	movs	r0, #100	@ 0x64
 800200a:	f002 fe21 	bl	8004c50 <HAL_Delay>
  /* offset */
  icm20948GyroOffset();
 800200e:	f000 fb25 	bl	800265c <icm20948GyroOffset>

  icm20948MagCheck();
 8002012:	f000 fb6b 	bl	80026ec <icm20948MagCheck>

  icm20948WriteSecondary( I2C_ADD_ICM20948_AK09916|I2C_ADD_ICM20948_AK09916_WRITE,
 8002016:	2204      	movs	r2, #4
 8002018:	2131      	movs	r1, #49	@ 0x31
 800201a:	200c      	movs	r0, #12
 800201c:	f000 fa81 	bl	8002522 <icm20948WriteSecondary>
                               REG_ADD_MAG_CNTL2, REG_VAL_MAG_MODE_20HZ);  
  return;
 8002020:	bf00      	nop
}
 8002022:	bd80      	pop	{r7, pc}

08002024 <icm20948Check>:

bool icm20948Check(void)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b082      	sub	sp, #8
 8002028:	af00      	add	r7, sp, #0
    bool bRet = false;
 800202a:	2300      	movs	r3, #0
 800202c:	71fb      	strb	r3, [r7, #7]
    if(REG_VAL_WIA == I2C_ReadOneByte(I2C_ADD_ICM20948, REG_ADD_WIA))
 800202e:	2100      	movs	r1, #0
 8002030:	20d0      	movs	r0, #208	@ 0xd0
 8002032:	f7ff f8cd 	bl	80011d0 <I2C_ReadOneByte>
 8002036:	4603      	mov	r3, r0
 8002038:	2bea      	cmp	r3, #234	@ 0xea
 800203a:	d101      	bne.n	8002040 <icm20948Check+0x1c>
    {
        bRet = true;
 800203c:	2301      	movs	r3, #1
 800203e:	71fb      	strb	r3, [r7, #7]
    }
    return bRet;
 8002040:	79fb      	ldrb	r3, [r7, #7]
}
 8002042:	4618      	mov	r0, r3
 8002044:	3708      	adds	r7, #8
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}
	...

0800204c <icm20948GyroRead>:
void icm20948GyroRead(int16_t* ps16X, int16_t* ps16Y, int16_t* ps16Z)
{
 800204c:	b590      	push	{r4, r7, lr}
 800204e:	b08d      	sub	sp, #52	@ 0x34
 8002050:	af00      	add	r7, sp, #0
 8002052:	60f8      	str	r0, [r7, #12]
 8002054:	60b9      	str	r1, [r7, #8]
 8002056:	607a      	str	r2, [r7, #4]
   uint8_t u8Buf[6];
    int16_t s16Buf[3] = {0}; 
 8002058:	f107 0320 	add.w	r3, r7, #32
 800205c:	2200      	movs	r2, #0
 800205e:	601a      	str	r2, [r3, #0]
 8002060:	809a      	strh	r2, [r3, #4]
    uint8_t i;
    int32_t s32OutBuf[3] = {0};
 8002062:	f107 0314 	add.w	r3, r7, #20
 8002066:	2200      	movs	r2, #0
 8002068:	601a      	str	r2, [r3, #0]
 800206a:	605a      	str	r2, [r3, #4]
 800206c:	609a      	str	r2, [r3, #8]
    static ICM20948_ST_AVG_DATA sstAvgBuf[3];
    static int16_t ss16c = 0;
    ss16c++;
 800206e:	4b52      	ldr	r3, [pc, #328]	@ (80021b8 <icm20948GyroRead+0x16c>)
 8002070:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002074:	b29b      	uxth	r3, r3
 8002076:	3301      	adds	r3, #1
 8002078:	b29b      	uxth	r3, r3
 800207a:	b21a      	sxth	r2, r3
 800207c:	4b4e      	ldr	r3, [pc, #312]	@ (80021b8 <icm20948GyroRead+0x16c>)
 800207e:	801a      	strh	r2, [r3, #0]

    u8Buf[0]=I2C_ReadOneByte(I2C_ADD_ICM20948,REG_ADD_GYRO_XOUT_L); 
 8002080:	2134      	movs	r1, #52	@ 0x34
 8002082:	20d0      	movs	r0, #208	@ 0xd0
 8002084:	f7ff f8a4 	bl	80011d0 <I2C_ReadOneByte>
 8002088:	4603      	mov	r3, r0
 800208a:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    u8Buf[1]=I2C_ReadOneByte(I2C_ADD_ICM20948,REG_ADD_GYRO_XOUT_H);
 800208e:	2133      	movs	r1, #51	@ 0x33
 8002090:	20d0      	movs	r0, #208	@ 0xd0
 8002092:	f7ff f89d 	bl	80011d0 <I2C_ReadOneByte>
 8002096:	4603      	mov	r3, r0
 8002098:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
    s16Buf[0]=  (u8Buf[1]<<8)|u8Buf[0];
 800209c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80020a0:	021b      	lsls	r3, r3, #8
 80020a2:	b21a      	sxth	r2, r3
 80020a4:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80020a8:	b21b      	sxth	r3, r3
 80020aa:	4313      	orrs	r3, r2
 80020ac:	b21b      	sxth	r3, r3
 80020ae:	843b      	strh	r3, [r7, #32]

    u8Buf[0]=I2C_ReadOneByte(I2C_ADD_ICM20948,REG_ADD_GYRO_YOUT_L); 
 80020b0:	2136      	movs	r1, #54	@ 0x36
 80020b2:	20d0      	movs	r0, #208	@ 0xd0
 80020b4:	f7ff f88c 	bl	80011d0 <I2C_ReadOneByte>
 80020b8:	4603      	mov	r3, r0
 80020ba:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    u8Buf[1]=I2C_ReadOneByte(I2C_ADD_ICM20948,REG_ADD_GYRO_YOUT_H);
 80020be:	2135      	movs	r1, #53	@ 0x35
 80020c0:	20d0      	movs	r0, #208	@ 0xd0
 80020c2:	f7ff f885 	bl	80011d0 <I2C_ReadOneByte>
 80020c6:	4603      	mov	r3, r0
 80020c8:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
    s16Buf[1]=  (u8Buf[1]<<8)|u8Buf[0];
 80020cc:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80020d0:	021b      	lsls	r3, r3, #8
 80020d2:	b21a      	sxth	r2, r3
 80020d4:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80020d8:	b21b      	sxth	r3, r3
 80020da:	4313      	orrs	r3, r2
 80020dc:	b21b      	sxth	r3, r3
 80020de:	847b      	strh	r3, [r7, #34]	@ 0x22

    u8Buf[0]=I2C_ReadOneByte(I2C_ADD_ICM20948,REG_ADD_GYRO_ZOUT_L); 
 80020e0:	2138      	movs	r1, #56	@ 0x38
 80020e2:	20d0      	movs	r0, #208	@ 0xd0
 80020e4:	f7ff f874 	bl	80011d0 <I2C_ReadOneByte>
 80020e8:	4603      	mov	r3, r0
 80020ea:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    u8Buf[1]=I2C_ReadOneByte(I2C_ADD_ICM20948,REG_ADD_GYRO_ZOUT_H);
 80020ee:	2137      	movs	r1, #55	@ 0x37
 80020f0:	20d0      	movs	r0, #208	@ 0xd0
 80020f2:	f7ff f86d 	bl	80011d0 <I2C_ReadOneByte>
 80020f6:	4603      	mov	r3, r0
 80020f8:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
    s16Buf[2]=  (u8Buf[1]<<8)|u8Buf[0];
 80020fc:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8002100:	021b      	lsls	r3, r3, #8
 8002102:	b21a      	sxth	r2, r3
 8002104:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002108:	b21b      	sxth	r3, r3
 800210a:	4313      	orrs	r3, r2
 800210c:	b21b      	sxth	r3, r3
 800210e:	84bb      	strh	r3, [r7, #36]	@ 0x24

    for(i = 0; i < 3; i ++) 
 8002110:	2300      	movs	r3, #0
 8002112:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8002116:	e025      	b.n	8002164 <icm20948GyroRead+0x118>
    {
        icm20948CalAvgValue(&sstAvgBuf[i].u8Index, sstAvgBuf[i].s16AvgBuffer, s16Buf[i], s32OutBuf + i);
 8002118:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800211c:	4613      	mov	r3, r2
 800211e:	00db      	lsls	r3, r3, #3
 8002120:	4413      	add	r3, r2
 8002122:	005b      	lsls	r3, r3, #1
 8002124:	4a25      	ldr	r2, [pc, #148]	@ (80021bc <icm20948GyroRead+0x170>)
 8002126:	1898      	adds	r0, r3, r2
 8002128:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800212c:	4613      	mov	r3, r2
 800212e:	00db      	lsls	r3, r3, #3
 8002130:	4413      	add	r3, r2
 8002132:	005b      	lsls	r3, r3, #1
 8002134:	4a21      	ldr	r2, [pc, #132]	@ (80021bc <icm20948GyroRead+0x170>)
 8002136:	4413      	add	r3, r2
 8002138:	1c99      	adds	r1, r3, #2
 800213a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800213e:	005b      	lsls	r3, r3, #1
 8002140:	3330      	adds	r3, #48	@ 0x30
 8002142:	443b      	add	r3, r7
 8002144:	f933 4c10 	ldrsh.w	r4, [r3, #-16]
 8002148:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800214c:	009b      	lsls	r3, r3, #2
 800214e:	f107 0214 	add.w	r2, r7, #20
 8002152:	4413      	add	r3, r2
 8002154:	4622      	mov	r2, r4
 8002156:	f000 fa45 	bl	80025e4 <icm20948CalAvgValue>
    for(i = 0; i < 3; i ++) 
 800215a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800215e:	3301      	adds	r3, #1
 8002160:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8002164:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002168:	2b02      	cmp	r3, #2
 800216a:	d9d5      	bls.n	8002118 <icm20948GyroRead+0xcc>
    }
    *ps16X = s32OutBuf[0] - gstGyroOffset.s16X;
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	b29a      	uxth	r2, r3
 8002170:	4b13      	ldr	r3, [pc, #76]	@ (80021c0 <icm20948GyroRead+0x174>)
 8002172:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002176:	b29b      	uxth	r3, r3
 8002178:	1ad3      	subs	r3, r2, r3
 800217a:	b29b      	uxth	r3, r3
 800217c:	b21a      	sxth	r2, r3
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	801a      	strh	r2, [r3, #0]
    *ps16Y = s32OutBuf[1] - gstGyroOffset.s16Y;
 8002182:	69bb      	ldr	r3, [r7, #24]
 8002184:	b29a      	uxth	r2, r3
 8002186:	4b0e      	ldr	r3, [pc, #56]	@ (80021c0 <icm20948GyroRead+0x174>)
 8002188:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800218c:	b29b      	uxth	r3, r3
 800218e:	1ad3      	subs	r3, r2, r3
 8002190:	b29b      	uxth	r3, r3
 8002192:	b21a      	sxth	r2, r3
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	801a      	strh	r2, [r3, #0]
    *ps16Z = s32OutBuf[2] - gstGyroOffset.s16Z;
 8002198:	69fb      	ldr	r3, [r7, #28]
 800219a:	b29a      	uxth	r2, r3
 800219c:	4b08      	ldr	r3, [pc, #32]	@ (80021c0 <icm20948GyroRead+0x174>)
 800219e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80021a2:	b29b      	uxth	r3, r3
 80021a4:	1ad3      	subs	r3, r2, r3
 80021a6:	b29b      	uxth	r3, r3
 80021a8:	b21a      	sxth	r2, r3
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	801a      	strh	r2, [r3, #0]
    
    return;
 80021ae:	bf00      	nop
}
 80021b0:	3734      	adds	r7, #52	@ 0x34
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd90      	pop	{r4, r7, pc}
 80021b6:	bf00      	nop
 80021b8:	200002d8 	.word	0x200002d8
 80021bc:	200002dc 	.word	0x200002dc
 80021c0:	200002a4 	.word	0x200002a4

080021c4 <icm20948AccelRead>:
void icm20948AccelRead(int16_t* ps16X, int16_t* ps16Y, int16_t* ps16Z)
{
 80021c4:	b590      	push	{r4, r7, lr}
 80021c6:	b08b      	sub	sp, #44	@ 0x2c
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	60f8      	str	r0, [r7, #12]
 80021cc:	60b9      	str	r1, [r7, #8]
 80021ce:	607a      	str	r2, [r7, #4]
    uint8_t u8Buf[2];
    int16_t s16Buf[3] = {0}; 
 80021d0:	f107 031c 	add.w	r3, r7, #28
 80021d4:	2200      	movs	r2, #0
 80021d6:	601a      	str	r2, [r3, #0]
 80021d8:	809a      	strh	r2, [r3, #4]
    uint8_t i;
    int32_t s32OutBuf[3] = {0};
 80021da:	f107 0310 	add.w	r3, r7, #16
 80021de:	2200      	movs	r2, #0
 80021e0:	601a      	str	r2, [r3, #0]
 80021e2:	605a      	str	r2, [r3, #4]
 80021e4:	609a      	str	r2, [r3, #8]
    static ICM20948_ST_AVG_DATA sstAvgBuf[3];

    u8Buf[0]=I2C_ReadOneByte(I2C_ADD_ICM20948,REG_ADD_ACCEL_XOUT_L); 
 80021e6:	212e      	movs	r1, #46	@ 0x2e
 80021e8:	20d0      	movs	r0, #208	@ 0xd0
 80021ea:	f7fe fff1 	bl	80011d0 <I2C_ReadOneByte>
 80021ee:	4603      	mov	r3, r0
 80021f0:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    u8Buf[1]=I2C_ReadOneByte(I2C_ADD_ICM20948,REG_ADD_ACCEL_XOUT_H);
 80021f4:	212d      	movs	r1, #45	@ 0x2d
 80021f6:	20d0      	movs	r0, #208	@ 0xd0
 80021f8:	f7fe ffea 	bl	80011d0 <I2C_ReadOneByte>
 80021fc:	4603      	mov	r3, r0
 80021fe:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
    s16Buf[0]=  (u8Buf[1]<<8)|u8Buf[0];
 8002202:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8002206:	021b      	lsls	r3, r3, #8
 8002208:	b21a      	sxth	r2, r3
 800220a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800220e:	b21b      	sxth	r3, r3
 8002210:	4313      	orrs	r3, r2
 8002212:	b21b      	sxth	r3, r3
 8002214:	83bb      	strh	r3, [r7, #28]

    u8Buf[0]=I2C_ReadOneByte(I2C_ADD_ICM20948,REG_ADD_ACCEL_YOUT_L); 
 8002216:	2130      	movs	r1, #48	@ 0x30
 8002218:	20d0      	movs	r0, #208	@ 0xd0
 800221a:	f7fe ffd9 	bl	80011d0 <I2C_ReadOneByte>
 800221e:	4603      	mov	r3, r0
 8002220:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    u8Buf[1]=I2C_ReadOneByte(I2C_ADD_ICM20948,REG_ADD_ACCEL_YOUT_H);
 8002224:	212f      	movs	r1, #47	@ 0x2f
 8002226:	20d0      	movs	r0, #208	@ 0xd0
 8002228:	f7fe ffd2 	bl	80011d0 <I2C_ReadOneByte>
 800222c:	4603      	mov	r3, r0
 800222e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
    s16Buf[1]=  (u8Buf[1]<<8)|u8Buf[0];
 8002232:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8002236:	021b      	lsls	r3, r3, #8
 8002238:	b21a      	sxth	r2, r3
 800223a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800223e:	b21b      	sxth	r3, r3
 8002240:	4313      	orrs	r3, r2
 8002242:	b21b      	sxth	r3, r3
 8002244:	83fb      	strh	r3, [r7, #30]

    u8Buf[0]=I2C_ReadOneByte(I2C_ADD_ICM20948,REG_ADD_ACCEL_ZOUT_L); 
 8002246:	2132      	movs	r1, #50	@ 0x32
 8002248:	20d0      	movs	r0, #208	@ 0xd0
 800224a:	f7fe ffc1 	bl	80011d0 <I2C_ReadOneByte>
 800224e:	4603      	mov	r3, r0
 8002250:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    u8Buf[1]=I2C_ReadOneByte(I2C_ADD_ICM20948,REG_ADD_ACCEL_ZOUT_H);
 8002254:	2131      	movs	r1, #49	@ 0x31
 8002256:	20d0      	movs	r0, #208	@ 0xd0
 8002258:	f7fe ffba 	bl	80011d0 <I2C_ReadOneByte>
 800225c:	4603      	mov	r3, r0
 800225e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
    s16Buf[2]=  (u8Buf[1]<<8)|u8Buf[0];
 8002262:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8002266:	021b      	lsls	r3, r3, #8
 8002268:	b21a      	sxth	r2, r3
 800226a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800226e:	b21b      	sxth	r3, r3
 8002270:	4313      	orrs	r3, r2
 8002272:	b21b      	sxth	r3, r3
 8002274:	843b      	strh	r3, [r7, #32]

    for(i = 0; i < 3; i ++) 
 8002276:	2300      	movs	r3, #0
 8002278:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800227c:	e025      	b.n	80022ca <icm20948AccelRead+0x106>
    {
        icm20948CalAvgValue(&sstAvgBuf[i].u8Index, sstAvgBuf[i].s16AvgBuffer, s16Buf[i], s32OutBuf + i);
 800227e:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8002282:	4613      	mov	r3, r2
 8002284:	00db      	lsls	r3, r3, #3
 8002286:	4413      	add	r3, r2
 8002288:	005b      	lsls	r3, r3, #1
 800228a:	4a1a      	ldr	r2, [pc, #104]	@ (80022f4 <icm20948AccelRead+0x130>)
 800228c:	1898      	adds	r0, r3, r2
 800228e:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8002292:	4613      	mov	r3, r2
 8002294:	00db      	lsls	r3, r3, #3
 8002296:	4413      	add	r3, r2
 8002298:	005b      	lsls	r3, r3, #1
 800229a:	4a16      	ldr	r2, [pc, #88]	@ (80022f4 <icm20948AccelRead+0x130>)
 800229c:	4413      	add	r3, r2
 800229e:	1c99      	adds	r1, r3, #2
 80022a0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80022a4:	005b      	lsls	r3, r3, #1
 80022a6:	3328      	adds	r3, #40	@ 0x28
 80022a8:	443b      	add	r3, r7
 80022aa:	f933 4c0c 	ldrsh.w	r4, [r3, #-12]
 80022ae:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80022b2:	009b      	lsls	r3, r3, #2
 80022b4:	f107 0210 	add.w	r2, r7, #16
 80022b8:	4413      	add	r3, r2
 80022ba:	4622      	mov	r2, r4
 80022bc:	f000 f992 	bl	80025e4 <icm20948CalAvgValue>
    for(i = 0; i < 3; i ++) 
 80022c0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80022c4:	3301      	adds	r3, #1
 80022c6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80022ca:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80022ce:	2b02      	cmp	r3, #2
 80022d0:	d9d5      	bls.n	800227e <icm20948AccelRead+0xba>
    }
    *ps16X = s32OutBuf[0];
 80022d2:	693b      	ldr	r3, [r7, #16]
 80022d4:	b21a      	sxth	r2, r3
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	801a      	strh	r2, [r3, #0]
    *ps16Y = s32OutBuf[1];
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	b21a      	sxth	r2, r3
 80022de:	68bb      	ldr	r3, [r7, #8]
 80022e0:	801a      	strh	r2, [r3, #0]
    *ps16Z = s32OutBuf[2];
 80022e2:	69bb      	ldr	r3, [r7, #24]
 80022e4:	b21a      	sxth	r2, r3
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	801a      	strh	r2, [r3, #0]
  
    return;
 80022ea:	bf00      	nop

}
 80022ec:	372c      	adds	r7, #44	@ 0x2c
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd90      	pop	{r4, r7, pc}
 80022f2:	bf00      	nop
 80022f4:	20000314 	.word	0x20000314

080022f8 <icm20948MagRead>:
void icm20948MagRead(int16_t* ps16X, int16_t* ps16Y, int16_t* ps16Z)
{
 80022f8:	b590      	push	{r4, r7, lr}
 80022fa:	b08d      	sub	sp, #52	@ 0x34
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	60f8      	str	r0, [r7, #12]
 8002300:	60b9      	str	r1, [r7, #8]
 8002302:	607a      	str	r2, [r7, #4]
    uint8_t counter = 20;
 8002304:	2314      	movs	r3, #20
 8002306:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    uint8_t u8Data[MAG_DATA_LEN];
    int16_t s16Buf[3] = {0}; 
 800230a:	f107 0320 	add.w	r3, r7, #32
 800230e:	2200      	movs	r2, #0
 8002310:	601a      	str	r2, [r3, #0]
 8002312:	809a      	strh	r2, [r3, #4]
    uint8_t i;
    int32_t s32OutBuf[3] = {0};
 8002314:	f107 0314 	add.w	r3, r7, #20
 8002318:	2200      	movs	r2, #0
 800231a:	601a      	str	r2, [r3, #0]
 800231c:	605a      	str	r2, [r3, #4]
 800231e:	609a      	str	r2, [r3, #8]
    static ICM20948_ST_AVG_DATA sstAvgBuf[3];
    while( counter>0 )
 8002320:	e014      	b.n	800234c <icm20948MagRead+0x54>
    {
        HAL_Delay(10);
 8002322:	200a      	movs	r0, #10
 8002324:	f002 fc94 	bl	8004c50 <HAL_Delay>
        icm20948ReadSecondary( I2C_ADD_ICM20948_AK09916|I2C_ADD_ICM20948_AK09916_READ, 
 8002328:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800232c:	2201      	movs	r2, #1
 800232e:	2110      	movs	r1, #16
 8002330:	208c      	movs	r0, #140	@ 0x8c
 8002332:	f000 f881 	bl	8002438 <icm20948ReadSecondary>
                                    REG_ADD_MAG_ST2, 1, u8Data);
        
        if ((u8Data[0] & 0x01) != 0)
 8002336:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800233a:	f003 0301 	and.w	r3, r3, #1
 800233e:	2b00      	cmp	r3, #0
 8002340:	d109      	bne.n	8002356 <icm20948MagRead+0x5e>
            break;
        
        counter--;
 8002342:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002346:	3b01      	subs	r3, #1
 8002348:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    while( counter>0 )
 800234c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002350:	2b00      	cmp	r3, #0
 8002352:	d1e6      	bne.n	8002322 <icm20948MagRead+0x2a>
 8002354:	e000      	b.n	8002358 <icm20948MagRead+0x60>
            break;
 8002356:	bf00      	nop
    }
    
    if(counter != 0)
 8002358:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800235c:	2b00      	cmp	r3, #0
 800235e:	d024      	beq.n	80023aa <icm20948MagRead+0xb2>
    {
        icm20948ReadSecondary( I2C_ADD_ICM20948_AK09916|I2C_ADD_ICM20948_AK09916_READ, 
 8002360:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002364:	2206      	movs	r2, #6
 8002366:	2111      	movs	r1, #17
 8002368:	208c      	movs	r0, #140	@ 0x8c
 800236a:	f000 f865 	bl	8002438 <icm20948ReadSecondary>
                                    REG_ADD_MAG_DATA, 
                                    MAG_DATA_LEN,
                                    u8Data);
        s16Buf[0] = ((int16_t)u8Data[1]<<8) | u8Data[0];
 800236e:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8002372:	021b      	lsls	r3, r3, #8
 8002374:	b21a      	sxth	r2, r3
 8002376:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800237a:	b21b      	sxth	r3, r3
 800237c:	4313      	orrs	r3, r2
 800237e:	b21b      	sxth	r3, r3
 8002380:	843b      	strh	r3, [r7, #32]
        s16Buf[1] = ((int16_t)u8Data[3]<<8) | u8Data[2];
 8002382:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002386:	021b      	lsls	r3, r3, #8
 8002388:	b21a      	sxth	r2, r3
 800238a:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800238e:	b21b      	sxth	r3, r3
 8002390:	4313      	orrs	r3, r2
 8002392:	b21b      	sxth	r3, r3
 8002394:	847b      	strh	r3, [r7, #34]	@ 0x22
        s16Buf[2] = ((int16_t)u8Data[5]<<8) | u8Data[4];       
 8002396:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800239a:	021b      	lsls	r3, r3, #8
 800239c:	b21a      	sxth	r2, r3
 800239e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80023a2:	b21b      	sxth	r3, r3
 80023a4:	4313      	orrs	r3, r2
 80023a6:	b21b      	sxth	r3, r3
 80023a8:	84bb      	strh	r3, [r7, #36]	@ 0x24
    }

    for(i = 0; i < 3; i ++) 
 80023aa:	2300      	movs	r3, #0
 80023ac:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 80023b0:	e025      	b.n	80023fe <icm20948MagRead+0x106>
    {
        icm20948CalAvgValue(&sstAvgBuf[i].u8Index, sstAvgBuf[i].s16AvgBuffer, s16Buf[i], s32OutBuf + i);
 80023b2:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 80023b6:	4613      	mov	r3, r2
 80023b8:	00db      	lsls	r3, r3, #3
 80023ba:	4413      	add	r3, r2
 80023bc:	005b      	lsls	r3, r3, #1
 80023be:	4a1d      	ldr	r2, [pc, #116]	@ (8002434 <icm20948MagRead+0x13c>)
 80023c0:	1898      	adds	r0, r3, r2
 80023c2:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 80023c6:	4613      	mov	r3, r2
 80023c8:	00db      	lsls	r3, r3, #3
 80023ca:	4413      	add	r3, r2
 80023cc:	005b      	lsls	r3, r3, #1
 80023ce:	4a19      	ldr	r2, [pc, #100]	@ (8002434 <icm20948MagRead+0x13c>)
 80023d0:	4413      	add	r3, r2
 80023d2:	1c99      	adds	r1, r3, #2
 80023d4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80023d8:	005b      	lsls	r3, r3, #1
 80023da:	3330      	adds	r3, #48	@ 0x30
 80023dc:	443b      	add	r3, r7
 80023de:	f933 4c10 	ldrsh.w	r4, [r3, #-16]
 80023e2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80023e6:	009b      	lsls	r3, r3, #2
 80023e8:	f107 0214 	add.w	r2, r7, #20
 80023ec:	4413      	add	r3, r2
 80023ee:	4622      	mov	r2, r4
 80023f0:	f000 f8f8 	bl	80025e4 <icm20948CalAvgValue>
    for(i = 0; i < 3; i ++) 
 80023f4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80023f8:	3301      	adds	r3, #1
 80023fa:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 80023fe:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8002402:	2b02      	cmp	r3, #2
 8002404:	d9d5      	bls.n	80023b2 <icm20948MagRead+0xba>
    }
    
    *ps16X =  s32OutBuf[0];
 8002406:	697b      	ldr	r3, [r7, #20]
 8002408:	b21a      	sxth	r2, r3
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	801a      	strh	r2, [r3, #0]
    *ps16Y = -s32OutBuf[1];
 800240e:	69bb      	ldr	r3, [r7, #24]
 8002410:	b29b      	uxth	r3, r3
 8002412:	425b      	negs	r3, r3
 8002414:	b29b      	uxth	r3, r3
 8002416:	b21a      	sxth	r2, r3
 8002418:	68bb      	ldr	r3, [r7, #8]
 800241a:	801a      	strh	r2, [r3, #0]
    *ps16Z = -s32OutBuf[2];
 800241c:	69fb      	ldr	r3, [r7, #28]
 800241e:	b29b      	uxth	r3, r3
 8002420:	425b      	negs	r3, r3
 8002422:	b29b      	uxth	r3, r3
 8002424:	b21a      	sxth	r2, r3
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	801a      	strh	r2, [r3, #0]
    return;
 800242a:	bf00      	nop
}
 800242c:	3734      	adds	r7, #52	@ 0x34
 800242e:	46bd      	mov	sp, r7
 8002430:	bd90      	pop	{r4, r7, pc}
 8002432:	bf00      	nop
 8002434:	2000034c 	.word	0x2000034c

08002438 <icm20948ReadSecondary>:

void icm20948ReadSecondary(uint8_t u8I2CAddr, uint8_t u8RegAddr, uint8_t u8Len, uint8_t *pu8data)
{
 8002438:	b590      	push	{r4, r7, lr}
 800243a:	b085      	sub	sp, #20
 800243c:	af00      	add	r7, sp, #0
 800243e:	603b      	str	r3, [r7, #0]
 8002440:	4603      	mov	r3, r0
 8002442:	71fb      	strb	r3, [r7, #7]
 8002444:	460b      	mov	r3, r1
 8002446:	71bb      	strb	r3, [r7, #6]
 8002448:	4613      	mov	r3, r2
 800244a:	717b      	strb	r3, [r7, #5]
    uint8_t i;
    uint8_t u8Temp;

    I2C_WriteOneByte(I2C_ADD_ICM20948, REG_ADD_REG_BANK_SEL,  REG_VAL_REG_BANK_3); //swtich bank3
 800244c:	2230      	movs	r2, #48	@ 0x30
 800244e:	217f      	movs	r1, #127	@ 0x7f
 8002450:	20d0      	movs	r0, #208	@ 0xd0
 8002452:	f7fe fedf 	bl	8001214 <I2C_WriteOneByte>
    I2C_WriteOneByte(I2C_ADD_ICM20948, REG_ADD_I2C_SLV0_ADDR, u8I2CAddr);
 8002456:	79fb      	ldrb	r3, [r7, #7]
 8002458:	461a      	mov	r2, r3
 800245a:	2103      	movs	r1, #3
 800245c:	20d0      	movs	r0, #208	@ 0xd0
 800245e:	f7fe fed9 	bl	8001214 <I2C_WriteOneByte>
    I2C_WriteOneByte(I2C_ADD_ICM20948, REG_ADD_I2C_SLV0_REG,  u8RegAddr);
 8002462:	79bb      	ldrb	r3, [r7, #6]
 8002464:	461a      	mov	r2, r3
 8002466:	2104      	movs	r1, #4
 8002468:	20d0      	movs	r0, #208	@ 0xd0
 800246a:	f7fe fed3 	bl	8001214 <I2C_WriteOneByte>
    I2C_WriteOneByte(I2C_ADD_ICM20948, REG_ADD_I2C_SLV0_CTRL, REG_VAL_BIT_SLV0_EN|u8Len);
 800246e:	797b      	ldrb	r3, [r7, #5]
 8002470:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002474:	b2db      	uxtb	r3, r3
 8002476:	461a      	mov	r2, r3
 8002478:	2105      	movs	r1, #5
 800247a:	20d0      	movs	r0, #208	@ 0xd0
 800247c:	f7fe feca 	bl	8001214 <I2C_WriteOneByte>

    I2C_WriteOneByte(I2C_ADD_ICM20948, REG_ADD_REG_BANK_SEL, REG_VAL_REG_BANK_0); //swtich bank0
 8002480:	2200      	movs	r2, #0
 8002482:	217f      	movs	r1, #127	@ 0x7f
 8002484:	20d0      	movs	r0, #208	@ 0xd0
 8002486:	f7fe fec5 	bl	8001214 <I2C_WriteOneByte>
    
    u8Temp = I2C_ReadOneByte(I2C_ADD_ICM20948,REG_ADD_USER_CTRL);
 800248a:	2103      	movs	r1, #3
 800248c:	20d0      	movs	r0, #208	@ 0xd0
 800248e:	f7fe fe9f 	bl	80011d0 <I2C_ReadOneByte>
 8002492:	4603      	mov	r3, r0
 8002494:	73bb      	strb	r3, [r7, #14]
    u8Temp |= REG_VAL_BIT_I2C_MST_EN;
 8002496:	7bbb      	ldrb	r3, [r7, #14]
 8002498:	f043 0320 	orr.w	r3, r3, #32
 800249c:	73bb      	strb	r3, [r7, #14]
    I2C_WriteOneByte(I2C_ADD_ICM20948, REG_ADD_USER_CTRL, u8Temp);
 800249e:	7bbb      	ldrb	r3, [r7, #14]
 80024a0:	461a      	mov	r2, r3
 80024a2:	2103      	movs	r1, #3
 80024a4:	20d0      	movs	r0, #208	@ 0xd0
 80024a6:	f7fe feb5 	bl	8001214 <I2C_WriteOneByte>
    HAL_Delay(5);
 80024aa:	2005      	movs	r0, #5
 80024ac:	f002 fbd0 	bl	8004c50 <HAL_Delay>
    u8Temp &= ~REG_VAL_BIT_I2C_MST_EN;
 80024b0:	7bbb      	ldrb	r3, [r7, #14]
 80024b2:	f023 0320 	bic.w	r3, r3, #32
 80024b6:	73bb      	strb	r3, [r7, #14]
    I2C_WriteOneByte(I2C_ADD_ICM20948, REG_ADD_USER_CTRL, u8Temp);
 80024b8:	7bbb      	ldrb	r3, [r7, #14]
 80024ba:	461a      	mov	r2, r3
 80024bc:	2103      	movs	r1, #3
 80024be:	20d0      	movs	r0, #208	@ 0xd0
 80024c0:	f7fe fea8 	bl	8001214 <I2C_WriteOneByte>
    
    for(i=0; i<u8Len; i++)
 80024c4:	2300      	movs	r3, #0
 80024c6:	73fb      	strb	r3, [r7, #15]
 80024c8:	e00d      	b.n	80024e6 <icm20948ReadSecondary+0xae>
    {
        *(pu8data+i) = I2C_ReadOneByte(I2C_ADD_ICM20948, REG_ADD_EXT_SENS_DATA_00+i);
 80024ca:	7bfb      	ldrb	r3, [r7, #15]
 80024cc:	333b      	adds	r3, #59	@ 0x3b
 80024ce:	b2d9      	uxtb	r1, r3
 80024d0:	7bfb      	ldrb	r3, [r7, #15]
 80024d2:	683a      	ldr	r2, [r7, #0]
 80024d4:	18d4      	adds	r4, r2, r3
 80024d6:	20d0      	movs	r0, #208	@ 0xd0
 80024d8:	f7fe fe7a 	bl	80011d0 <I2C_ReadOneByte>
 80024dc:	4603      	mov	r3, r0
 80024de:	7023      	strb	r3, [r4, #0]
    for(i=0; i<u8Len; i++)
 80024e0:	7bfb      	ldrb	r3, [r7, #15]
 80024e2:	3301      	adds	r3, #1
 80024e4:	73fb      	strb	r3, [r7, #15]
 80024e6:	7bfa      	ldrb	r2, [r7, #15]
 80024e8:	797b      	ldrb	r3, [r7, #5]
 80024ea:	429a      	cmp	r2, r3
 80024ec:	d3ed      	bcc.n	80024ca <icm20948ReadSecondary+0x92>
        
    }
    I2C_WriteOneByte(I2C_ADD_ICM20948, REG_ADD_REG_BANK_SEL, REG_VAL_REG_BANK_3); //swtich bank3
 80024ee:	2230      	movs	r2, #48	@ 0x30
 80024f0:	217f      	movs	r1, #127	@ 0x7f
 80024f2:	20d0      	movs	r0, #208	@ 0xd0
 80024f4:	f7fe fe8e 	bl	8001214 <I2C_WriteOneByte>
    
    u8Temp = I2C_ReadOneByte(I2C_ADD_ICM20948,REG_ADD_I2C_SLV0_CTRL);
 80024f8:	2105      	movs	r1, #5
 80024fa:	20d0      	movs	r0, #208	@ 0xd0
 80024fc:	f7fe fe68 	bl	80011d0 <I2C_ReadOneByte>
 8002500:	4603      	mov	r3, r0
 8002502:	73bb      	strb	r3, [r7, #14]
    u8Temp &= ~((REG_VAL_BIT_I2C_MST_EN)&(REG_VAL_BIT_MASK_LEN));
    I2C_WriteOneByte(I2C_ADD_ICM20948, REG_ADD_I2C_SLV0_CTRL,  u8Temp);
 8002504:	7bbb      	ldrb	r3, [r7, #14]
 8002506:	461a      	mov	r2, r3
 8002508:	2105      	movs	r1, #5
 800250a:	20d0      	movs	r0, #208	@ 0xd0
 800250c:	f7fe fe82 	bl	8001214 <I2C_WriteOneByte>
    
    I2C_WriteOneByte(I2C_ADD_ICM20948, REG_ADD_REG_BANK_SEL, REG_VAL_REG_BANK_0); //swtich bank0
 8002510:	2200      	movs	r2, #0
 8002512:	217f      	movs	r1, #127	@ 0x7f
 8002514:	20d0      	movs	r0, #208	@ 0xd0
 8002516:	f7fe fe7d 	bl	8001214 <I2C_WriteOneByte>

}
 800251a:	bf00      	nop
 800251c:	3714      	adds	r7, #20
 800251e:	46bd      	mov	sp, r7
 8002520:	bd90      	pop	{r4, r7, pc}

08002522 <icm20948WriteSecondary>:

void icm20948WriteSecondary(uint8_t u8I2CAddr, uint8_t u8RegAddr, uint8_t u8data)
{
 8002522:	b580      	push	{r7, lr}
 8002524:	b084      	sub	sp, #16
 8002526:	af00      	add	r7, sp, #0
 8002528:	4603      	mov	r3, r0
 800252a:	71fb      	strb	r3, [r7, #7]
 800252c:	460b      	mov	r3, r1
 800252e:	71bb      	strb	r3, [r7, #6]
 8002530:	4613      	mov	r3, r2
 8002532:	717b      	strb	r3, [r7, #5]
  uint8_t u8Temp;
  I2C_WriteOneByte(I2C_ADD_ICM20948, REG_ADD_REG_BANK_SEL,  REG_VAL_REG_BANK_3); //swtich bank3
 8002534:	2230      	movs	r2, #48	@ 0x30
 8002536:	217f      	movs	r1, #127	@ 0x7f
 8002538:	20d0      	movs	r0, #208	@ 0xd0
 800253a:	f7fe fe6b 	bl	8001214 <I2C_WriteOneByte>
  I2C_WriteOneByte(I2C_ADD_ICM20948, REG_ADD_I2C_SLV1_ADDR, u8I2CAddr);
 800253e:	79fb      	ldrb	r3, [r7, #7]
 8002540:	461a      	mov	r2, r3
 8002542:	2107      	movs	r1, #7
 8002544:	20d0      	movs	r0, #208	@ 0xd0
 8002546:	f7fe fe65 	bl	8001214 <I2C_WriteOneByte>
  I2C_WriteOneByte(I2C_ADD_ICM20948, REG_ADD_I2C_SLV1_REG,  u8RegAddr);
 800254a:	79bb      	ldrb	r3, [r7, #6]
 800254c:	461a      	mov	r2, r3
 800254e:	2108      	movs	r1, #8
 8002550:	20d0      	movs	r0, #208	@ 0xd0
 8002552:	f7fe fe5f 	bl	8001214 <I2C_WriteOneByte>
  I2C_WriteOneByte(I2C_ADD_ICM20948, REG_ADD_I2C_SLV1_DO,   u8data);
 8002556:	797b      	ldrb	r3, [r7, #5]
 8002558:	461a      	mov	r2, r3
 800255a:	210a      	movs	r1, #10
 800255c:	20d0      	movs	r0, #208	@ 0xd0
 800255e:	f7fe fe59 	bl	8001214 <I2C_WriteOneByte>
  I2C_WriteOneByte(I2C_ADD_ICM20948, REG_ADD_I2C_SLV1_CTRL, REG_VAL_BIT_SLV0_EN|1);
 8002562:	2281      	movs	r2, #129	@ 0x81
 8002564:	2109      	movs	r1, #9
 8002566:	20d0      	movs	r0, #208	@ 0xd0
 8002568:	f7fe fe54 	bl	8001214 <I2C_WriteOneByte>

  I2C_WriteOneByte(I2C_ADD_ICM20948, REG_ADD_REG_BANK_SEL, REG_VAL_REG_BANK_0); //swtich bank0
 800256c:	2200      	movs	r2, #0
 800256e:	217f      	movs	r1, #127	@ 0x7f
 8002570:	20d0      	movs	r0, #208	@ 0xd0
 8002572:	f7fe fe4f 	bl	8001214 <I2C_WriteOneByte>

  u8Temp = I2C_ReadOneByte(I2C_ADD_ICM20948,REG_ADD_USER_CTRL);
 8002576:	2103      	movs	r1, #3
 8002578:	20d0      	movs	r0, #208	@ 0xd0
 800257a:	f7fe fe29 	bl	80011d0 <I2C_ReadOneByte>
 800257e:	4603      	mov	r3, r0
 8002580:	73fb      	strb	r3, [r7, #15]
  u8Temp |= REG_VAL_BIT_I2C_MST_EN;
 8002582:	7bfb      	ldrb	r3, [r7, #15]
 8002584:	f043 0320 	orr.w	r3, r3, #32
 8002588:	73fb      	strb	r3, [r7, #15]
  I2C_WriteOneByte(I2C_ADD_ICM20948, REG_ADD_USER_CTRL, u8Temp);
 800258a:	7bfb      	ldrb	r3, [r7, #15]
 800258c:	461a      	mov	r2, r3
 800258e:	2103      	movs	r1, #3
 8002590:	20d0      	movs	r0, #208	@ 0xd0
 8002592:	f7fe fe3f 	bl	8001214 <I2C_WriteOneByte>
  HAL_Delay(5);
 8002596:	2005      	movs	r0, #5
 8002598:	f002 fb5a 	bl	8004c50 <HAL_Delay>
  u8Temp &= ~REG_VAL_BIT_I2C_MST_EN;
 800259c:	7bfb      	ldrb	r3, [r7, #15]
 800259e:	f023 0320 	bic.w	r3, r3, #32
 80025a2:	73fb      	strb	r3, [r7, #15]
  I2C_WriteOneByte(I2C_ADD_ICM20948, REG_ADD_USER_CTRL, u8Temp);
 80025a4:	7bfb      	ldrb	r3, [r7, #15]
 80025a6:	461a      	mov	r2, r3
 80025a8:	2103      	movs	r1, #3
 80025aa:	20d0      	movs	r0, #208	@ 0xd0
 80025ac:	f7fe fe32 	bl	8001214 <I2C_WriteOneByte>

  I2C_WriteOneByte(I2C_ADD_ICM20948, REG_ADD_REG_BANK_SEL, REG_VAL_REG_BANK_3); //swtich bank3
 80025b0:	2230      	movs	r2, #48	@ 0x30
 80025b2:	217f      	movs	r1, #127	@ 0x7f
 80025b4:	20d0      	movs	r0, #208	@ 0xd0
 80025b6:	f7fe fe2d 	bl	8001214 <I2C_WriteOneByte>

  u8Temp = I2C_ReadOneByte(I2C_ADD_ICM20948,REG_ADD_I2C_SLV0_CTRL);
 80025ba:	2105      	movs	r1, #5
 80025bc:	20d0      	movs	r0, #208	@ 0xd0
 80025be:	f7fe fe07 	bl	80011d0 <I2C_ReadOneByte>
 80025c2:	4603      	mov	r3, r0
 80025c4:	73fb      	strb	r3, [r7, #15]
  u8Temp &= ~((REG_VAL_BIT_I2C_MST_EN)&(REG_VAL_BIT_MASK_LEN));
  I2C_WriteOneByte(I2C_ADD_ICM20948, REG_ADD_I2C_SLV0_CTRL,  u8Temp);
 80025c6:	7bfb      	ldrb	r3, [r7, #15]
 80025c8:	461a      	mov	r2, r3
 80025ca:	2105      	movs	r1, #5
 80025cc:	20d0      	movs	r0, #208	@ 0xd0
 80025ce:	f7fe fe21 	bl	8001214 <I2C_WriteOneByte>

  I2C_WriteOneByte(I2C_ADD_ICM20948, REG_ADD_REG_BANK_SEL, REG_VAL_REG_BANK_0); //swtich bank0
 80025d2:	2200      	movs	r2, #0
 80025d4:	217f      	movs	r1, #127	@ 0x7f
 80025d6:	20d0      	movs	r0, #208	@ 0xd0
 80025d8:	f7fe fe1c 	bl	8001214 <I2C_WriteOneByte>
    
    return;
 80025dc:	bf00      	nop
}
 80025de:	3710      	adds	r7, #16
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bd80      	pop	{r7, pc}

080025e4 <icm20948CalAvgValue>:

void icm20948CalAvgValue(uint8_t *pIndex, int16_t *pAvgBuffer, int16_t InVal, int32_t *pOutVal)
{ 
 80025e4:	b480      	push	{r7}
 80025e6:	b087      	sub	sp, #28
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	60f8      	str	r0, [r7, #12]
 80025ec:	60b9      	str	r1, [r7, #8]
 80025ee:	603b      	str	r3, [r7, #0]
 80025f0:	4613      	mov	r3, r2
 80025f2:	80fb      	strh	r3, [r7, #6]
  uint8_t i;
  
  *(pAvgBuffer + ((*pIndex) ++)) = InVal;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	781b      	ldrb	r3, [r3, #0]
 80025f8:	1c5a      	adds	r2, r3, #1
 80025fa:	b2d1      	uxtb	r1, r2
 80025fc:	68fa      	ldr	r2, [r7, #12]
 80025fe:	7011      	strb	r1, [r2, #0]
 8002600:	005b      	lsls	r3, r3, #1
 8002602:	68ba      	ldr	r2, [r7, #8]
 8002604:	4413      	add	r3, r2
 8002606:	88fa      	ldrh	r2, [r7, #6]
 8002608:	801a      	strh	r2, [r3, #0]
    *pIndex &= 0x07;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	781b      	ldrb	r3, [r3, #0]
 800260e:	f003 0307 	and.w	r3, r3, #7
 8002612:	b2da      	uxtb	r2, r3
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	701a      	strb	r2, [r3, #0]
    
    *pOutVal = 0;
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	2200      	movs	r2, #0
 800261c:	601a      	str	r2, [r3, #0]
  for(i = 0; i < 8; i ++) 
 800261e:	2300      	movs	r3, #0
 8002620:	75fb      	strb	r3, [r7, #23]
 8002622:	e00d      	b.n	8002640 <icm20948CalAvgValue+0x5c>
    {
      *pOutVal += *(pAvgBuffer + i);
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	7dfa      	ldrb	r2, [r7, #23]
 800262a:	0052      	lsls	r2, r2, #1
 800262c:	68b9      	ldr	r1, [r7, #8]
 800262e:	440a      	add	r2, r1
 8002630:	f9b2 2000 	ldrsh.w	r2, [r2]
 8002634:	441a      	add	r2, r3
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	601a      	str	r2, [r3, #0]
  for(i = 0; i < 8; i ++) 
 800263a:	7dfb      	ldrb	r3, [r7, #23]
 800263c:	3301      	adds	r3, #1
 800263e:	75fb      	strb	r3, [r7, #23]
 8002640:	7dfb      	ldrb	r3, [r7, #23]
 8002642:	2b07      	cmp	r3, #7
 8002644:	d9ee      	bls.n	8002624 <icm20948CalAvgValue+0x40>
    }
    *pOutVal >>= 3;
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	10da      	asrs	r2, r3, #3
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	601a      	str	r2, [r3, #0]
}
 8002650:	bf00      	nop
 8002652:	371c      	adds	r7, #28
 8002654:	46bd      	mov	sp, r7
 8002656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265a:	4770      	bx	lr

0800265c <icm20948GyroOffset>:

void icm20948GyroOffset(void)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b086      	sub	sp, #24
 8002660:	af00      	add	r7, sp, #0
  uint8_t i;
  int16_t s16Gx = 0, s16Gy = 0, s16Gz = 0;
 8002662:	2300      	movs	r3, #0
 8002664:	80fb      	strh	r3, [r7, #6]
 8002666:	2300      	movs	r3, #0
 8002668:	80bb      	strh	r3, [r7, #4]
 800266a:	2300      	movs	r3, #0
 800266c:	807b      	strh	r3, [r7, #2]
  int32_t s32TempGx = 0, s32TempGy = 0, s32TempGz = 0;
 800266e:	2300      	movs	r3, #0
 8002670:	613b      	str	r3, [r7, #16]
 8002672:	2300      	movs	r3, #0
 8002674:	60fb      	str	r3, [r7, #12]
 8002676:	2300      	movs	r3, #0
 8002678:	60bb      	str	r3, [r7, #8]
  for(i = 0; i < 32; i ++)
 800267a:	2300      	movs	r3, #0
 800267c:	75fb      	strb	r3, [r7, #23]
 800267e:	e01d      	b.n	80026bc <icm20948GyroOffset+0x60>
  {
    icm20948GyroRead(&s16Gx, &s16Gy, &s16Gz);
 8002680:	1cba      	adds	r2, r7, #2
 8002682:	1d39      	adds	r1, r7, #4
 8002684:	1dbb      	adds	r3, r7, #6
 8002686:	4618      	mov	r0, r3
 8002688:	f7ff fce0 	bl	800204c <icm20948GyroRead>
    s32TempGx += s16Gx;
 800268c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002690:	461a      	mov	r2, r3
 8002692:	693b      	ldr	r3, [r7, #16]
 8002694:	4413      	add	r3, r2
 8002696:	613b      	str	r3, [r7, #16]
    s32TempGy += s16Gy;
 8002698:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800269c:	461a      	mov	r2, r3
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	4413      	add	r3, r2
 80026a2:	60fb      	str	r3, [r7, #12]
    s32TempGz += s16Gz;
 80026a4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80026a8:	461a      	mov	r2, r3
 80026aa:	68bb      	ldr	r3, [r7, #8]
 80026ac:	4413      	add	r3, r2
 80026ae:	60bb      	str	r3, [r7, #8]
    HAL_Delay(10);
 80026b0:	200a      	movs	r0, #10
 80026b2:	f002 facd 	bl	8004c50 <HAL_Delay>
  for(i = 0; i < 32; i ++)
 80026b6:	7dfb      	ldrb	r3, [r7, #23]
 80026b8:	3301      	adds	r3, #1
 80026ba:	75fb      	strb	r3, [r7, #23]
 80026bc:	7dfb      	ldrb	r3, [r7, #23]
 80026be:	2b1f      	cmp	r3, #31
 80026c0:	d9de      	bls.n	8002680 <icm20948GyroOffset+0x24>
  }
  gstGyroOffset.s16X = s32TempGx >> 5;
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	115b      	asrs	r3, r3, #5
 80026c6:	b21a      	sxth	r2, r3
 80026c8:	4b07      	ldr	r3, [pc, #28]	@ (80026e8 <icm20948GyroOffset+0x8c>)
 80026ca:	801a      	strh	r2, [r3, #0]
  gstGyroOffset.s16Y = s32TempGy >> 5;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	115b      	asrs	r3, r3, #5
 80026d0:	b21a      	sxth	r2, r3
 80026d2:	4b05      	ldr	r3, [pc, #20]	@ (80026e8 <icm20948GyroOffset+0x8c>)
 80026d4:	805a      	strh	r2, [r3, #2]
  gstGyroOffset.s16Z = s32TempGz >> 5;
 80026d6:	68bb      	ldr	r3, [r7, #8]
 80026d8:	115b      	asrs	r3, r3, #5
 80026da:	b21a      	sxth	r2, r3
 80026dc:	4b02      	ldr	r3, [pc, #8]	@ (80026e8 <icm20948GyroOffset+0x8c>)
 80026de:	809a      	strh	r2, [r3, #4]
  return;
 80026e0:	bf00      	nop
}
 80026e2:	3718      	adds	r7, #24
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bd80      	pop	{r7, pc}
 80026e8:	200002a4 	.word	0x200002a4

080026ec <icm20948MagCheck>:

bool icm20948MagCheck(void)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b082      	sub	sp, #8
 80026f0:	af00      	add	r7, sp, #0
    bool bRet = false;
 80026f2:	2300      	movs	r3, #0
 80026f4:	71fb      	strb	r3, [r7, #7]
    uint8_t u8Ret[2];
    
    icm20948ReadSecondary( I2C_ADD_ICM20948_AK09916|I2C_ADD_ICM20948_AK09916_READ,
 80026f6:	1d3b      	adds	r3, r7, #4
 80026f8:	2202      	movs	r2, #2
 80026fa:	2100      	movs	r1, #0
 80026fc:	208c      	movs	r0, #140	@ 0x8c
 80026fe:	f7ff fe9b 	bl	8002438 <icm20948ReadSecondary>
                                REG_ADD_MAG_WIA1, 2,u8Ret);
    if( (u8Ret[0] == REG_VAL_MAG_WIA1) && ( u8Ret[1] == REG_VAL_MAG_WIA2) )
 8002702:	793b      	ldrb	r3, [r7, #4]
 8002704:	2b48      	cmp	r3, #72	@ 0x48
 8002706:	d104      	bne.n	8002712 <icm20948MagCheck+0x26>
 8002708:	797b      	ldrb	r3, [r7, #5]
 800270a:	2b09      	cmp	r3, #9
 800270c:	d101      	bne.n	8002712 <icm20948MagCheck+0x26>
    {
        bRet = true;
 800270e:	2301      	movs	r3, #1
 8002710:	71fb      	strb	r3, [r7, #7]
    }
    
    return bRet;
 8002712:	79fb      	ldrb	r3, [r7, #7]
}
 8002714:	4618      	mov	r0, r3
 8002716:	3708      	adds	r7, #8
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}

0800271c <bmp280Check>:

BMP280_HandleTypeDef bmp280;
int32_t gs32Pressure0 = MSLP; 

bool bmp280Check(void)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b082      	sub	sp, #8
 8002720:	af00      	add	r7, sp, #0
    bool bRet = false;
 8002722:	2300      	movs	r3, #0
 8002724:	71fb      	strb	r3, [r7, #7]
    if(0x58 == I2C_ReadOneByte(BMP280_ADDR, BMP280_REGISTER_CHIPID))
 8002726:	21d0      	movs	r1, #208	@ 0xd0
 8002728:	20ee      	movs	r0, #238	@ 0xee
 800272a:	f7fe fd51 	bl	80011d0 <I2C_ReadOneByte>
 800272e:	4603      	mov	r3, r0
 8002730:	2b58      	cmp	r3, #88	@ 0x58
 8002732:	d101      	bne.n	8002738 <bmp280Check+0x1c>
    {
        bRet = true;
 8002734:	2301      	movs	r3, #1
 8002736:	71fb      	strb	r3, [r7, #7]
    }
    return bRet;
 8002738:	79fb      	ldrb	r3, [r7, #7]
}
 800273a:	4618      	mov	r0, r3
 800273c:	3708      	adds	r7, #8
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}
	...

08002744 <bmp280ReadCalibration>:

void bmp280ReadCalibration(void)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b082      	sub	sp, #8
 8002748:	af00      	add	r7, sp, #0
  uint8_t lsb, msb; 
  
  /* read the temperature calibration parameters */  
  lsb = I2C_ReadOneByte(BMP280_ADDR, BMP280_DIG_T1_LSB_REG);
 800274a:	2188      	movs	r1, #136	@ 0x88
 800274c:	20ee      	movs	r0, #238	@ 0xee
 800274e:	f7fe fd3f 	bl	80011d0 <I2C_ReadOneByte>
 8002752:	4603      	mov	r3, r0
 8002754:	71fb      	strb	r3, [r7, #7]
  msb = I2C_ReadOneByte(BMP280_ADDR, BMP280_DIG_T1_MSB_REG);
 8002756:	2189      	movs	r1, #137	@ 0x89
 8002758:	20ee      	movs	r0, #238	@ 0xee
 800275a:	f7fe fd39 	bl	80011d0 <I2C_ReadOneByte>
 800275e:	4603      	mov	r3, r0
 8002760:	71bb      	strb	r3, [r7, #6]
  dig_T1 = msb << 8 | lsb;
 8002762:	79bb      	ldrb	r3, [r7, #6]
 8002764:	021b      	lsls	r3, r3, #8
 8002766:	b21a      	sxth	r2, r3
 8002768:	79fb      	ldrb	r3, [r7, #7]
 800276a:	b21b      	sxth	r3, r3
 800276c:	4313      	orrs	r3, r2
 800276e:	b21b      	sxth	r3, r3
 8002770:	b29a      	uxth	r2, r3
 8002772:	4b77      	ldr	r3, [pc, #476]	@ (8002950 <bmp280ReadCalibration+0x20c>)
 8002774:	801a      	strh	r2, [r3, #0]
  lsb = I2C_ReadOneByte(BMP280_ADDR, BMP280_DIG_T2_LSB_REG);
 8002776:	218a      	movs	r1, #138	@ 0x8a
 8002778:	20ee      	movs	r0, #238	@ 0xee
 800277a:	f7fe fd29 	bl	80011d0 <I2C_ReadOneByte>
 800277e:	4603      	mov	r3, r0
 8002780:	71fb      	strb	r3, [r7, #7]
  msb = I2C_ReadOneByte(BMP280_ADDR, BMP280_DIG_T2_MSB_REG);
 8002782:	218b      	movs	r1, #139	@ 0x8b
 8002784:	20ee      	movs	r0, #238	@ 0xee
 8002786:	f7fe fd23 	bl	80011d0 <I2C_ReadOneByte>
 800278a:	4603      	mov	r3, r0
 800278c:	71bb      	strb	r3, [r7, #6]
  dig_T2 = msb << 8 | lsb;  
 800278e:	79bb      	ldrb	r3, [r7, #6]
 8002790:	021b      	lsls	r3, r3, #8
 8002792:	b21a      	sxth	r2, r3
 8002794:	79fb      	ldrb	r3, [r7, #7]
 8002796:	b21b      	sxth	r3, r3
 8002798:	4313      	orrs	r3, r2
 800279a:	b21a      	sxth	r2, r3
 800279c:	4b6c      	ldr	r3, [pc, #432]	@ (8002950 <bmp280ReadCalibration+0x20c>)
 800279e:	805a      	strh	r2, [r3, #2]
  lsb = I2C_ReadOneByte(BMP280_ADDR, BMP280_DIG_T3_LSB_REG);
 80027a0:	218c      	movs	r1, #140	@ 0x8c
 80027a2:	20ee      	movs	r0, #238	@ 0xee
 80027a4:	f7fe fd14 	bl	80011d0 <I2C_ReadOneByte>
 80027a8:	4603      	mov	r3, r0
 80027aa:	71fb      	strb	r3, [r7, #7]
  msb = I2C_ReadOneByte(BMP280_ADDR, BMP280_DIG_T3_MSB_REG);
 80027ac:	218d      	movs	r1, #141	@ 0x8d
 80027ae:	20ee      	movs	r0, #238	@ 0xee
 80027b0:	f7fe fd0e 	bl	80011d0 <I2C_ReadOneByte>
 80027b4:	4603      	mov	r3, r0
 80027b6:	71bb      	strb	r3, [r7, #6]
  dig_T3 = msb << 8 | lsb;  
 80027b8:	79bb      	ldrb	r3, [r7, #6]
 80027ba:	021b      	lsls	r3, r3, #8
 80027bc:	b21a      	sxth	r2, r3
 80027be:	79fb      	ldrb	r3, [r7, #7]
 80027c0:	b21b      	sxth	r3, r3
 80027c2:	4313      	orrs	r3, r2
 80027c4:	b21a      	sxth	r2, r3
 80027c6:	4b62      	ldr	r3, [pc, #392]	@ (8002950 <bmp280ReadCalibration+0x20c>)
 80027c8:	809a      	strh	r2, [r3, #4]
  
  /* read the pressure calibration parameters */  
  lsb = I2C_ReadOneByte(BMP280_ADDR, BMP280_DIG_P1_LSB_REG);
 80027ca:	218e      	movs	r1, #142	@ 0x8e
 80027cc:	20ee      	movs	r0, #238	@ 0xee
 80027ce:	f7fe fcff 	bl	80011d0 <I2C_ReadOneByte>
 80027d2:	4603      	mov	r3, r0
 80027d4:	71fb      	strb	r3, [r7, #7]
  msb = I2C_ReadOneByte(BMP280_ADDR, BMP280_DIG_P1_MSB_REG);    
 80027d6:	218f      	movs	r1, #143	@ 0x8f
 80027d8:	20ee      	movs	r0, #238	@ 0xee
 80027da:	f7fe fcf9 	bl	80011d0 <I2C_ReadOneByte>
 80027de:	4603      	mov	r3, r0
 80027e0:	71bb      	strb	r3, [r7, #6]
  dig_P1 = msb << 8 | lsb;  
 80027e2:	79bb      	ldrb	r3, [r7, #6]
 80027e4:	021b      	lsls	r3, r3, #8
 80027e6:	b21a      	sxth	r2, r3
 80027e8:	79fb      	ldrb	r3, [r7, #7]
 80027ea:	b21b      	sxth	r3, r3
 80027ec:	4313      	orrs	r3, r2
 80027ee:	b21b      	sxth	r3, r3
 80027f0:	b29a      	uxth	r2, r3
 80027f2:	4b57      	ldr	r3, [pc, #348]	@ (8002950 <bmp280ReadCalibration+0x20c>)
 80027f4:	80da      	strh	r2, [r3, #6]
  lsb = I2C_ReadOneByte(BMP280_ADDR, BMP280_DIG_P2_LSB_REG);
 80027f6:	2190      	movs	r1, #144	@ 0x90
 80027f8:	20ee      	movs	r0, #238	@ 0xee
 80027fa:	f7fe fce9 	bl	80011d0 <I2C_ReadOneByte>
 80027fe:	4603      	mov	r3, r0
 8002800:	71fb      	strb	r3, [r7, #7]
  msb = I2C_ReadOneByte(BMP280_ADDR, BMP280_DIG_P2_MSB_REG);      
 8002802:	2191      	movs	r1, #145	@ 0x91
 8002804:	20ee      	movs	r0, #238	@ 0xee
 8002806:	f7fe fce3 	bl	80011d0 <I2C_ReadOneByte>
 800280a:	4603      	mov	r3, r0
 800280c:	71bb      	strb	r3, [r7, #6]
  dig_P2 = msb << 8 | lsb;  
 800280e:	79bb      	ldrb	r3, [r7, #6]
 8002810:	021b      	lsls	r3, r3, #8
 8002812:	b21a      	sxth	r2, r3
 8002814:	79fb      	ldrb	r3, [r7, #7]
 8002816:	b21b      	sxth	r3, r3
 8002818:	4313      	orrs	r3, r2
 800281a:	b21a      	sxth	r2, r3
 800281c:	4b4c      	ldr	r3, [pc, #304]	@ (8002950 <bmp280ReadCalibration+0x20c>)
 800281e:	811a      	strh	r2, [r3, #8]
  lsb = I2C_ReadOneByte(BMP280_ADDR, BMP280_DIG_P3_LSB_REG);
 8002820:	2192      	movs	r1, #146	@ 0x92
 8002822:	20ee      	movs	r0, #238	@ 0xee
 8002824:	f7fe fcd4 	bl	80011d0 <I2C_ReadOneByte>
 8002828:	4603      	mov	r3, r0
 800282a:	71fb      	strb	r3, [r7, #7]
  msb = I2C_ReadOneByte(BMP280_ADDR, BMP280_DIG_P3_MSB_REG);  
 800282c:	2193      	movs	r1, #147	@ 0x93
 800282e:	20ee      	movs	r0, #238	@ 0xee
 8002830:	f7fe fcce 	bl	80011d0 <I2C_ReadOneByte>
 8002834:	4603      	mov	r3, r0
 8002836:	71bb      	strb	r3, [r7, #6]
  dig_P3 = msb << 8 | lsb;  
 8002838:	79bb      	ldrb	r3, [r7, #6]
 800283a:	021b      	lsls	r3, r3, #8
 800283c:	b21a      	sxth	r2, r3
 800283e:	79fb      	ldrb	r3, [r7, #7]
 8002840:	b21b      	sxth	r3, r3
 8002842:	4313      	orrs	r3, r2
 8002844:	b21a      	sxth	r2, r3
 8002846:	4b42      	ldr	r3, [pc, #264]	@ (8002950 <bmp280ReadCalibration+0x20c>)
 8002848:	815a      	strh	r2, [r3, #10]
  lsb = I2C_ReadOneByte(BMP280_ADDR, BMP280_DIG_P4_LSB_REG);
 800284a:	2194      	movs	r1, #148	@ 0x94
 800284c:	20ee      	movs	r0, #238	@ 0xee
 800284e:	f7fe fcbf 	bl	80011d0 <I2C_ReadOneByte>
 8002852:	4603      	mov	r3, r0
 8002854:	71fb      	strb	r3, [r7, #7]
  msb = I2C_ReadOneByte(BMP280_ADDR, BMP280_DIG_P4_MSB_REG);         
 8002856:	2195      	movs	r1, #149	@ 0x95
 8002858:	20ee      	movs	r0, #238	@ 0xee
 800285a:	f7fe fcb9 	bl	80011d0 <I2C_ReadOneByte>
 800285e:	4603      	mov	r3, r0
 8002860:	71bb      	strb	r3, [r7, #6]
  dig_P4 = msb << 8 | lsb;    
 8002862:	79bb      	ldrb	r3, [r7, #6]
 8002864:	021b      	lsls	r3, r3, #8
 8002866:	b21a      	sxth	r2, r3
 8002868:	79fb      	ldrb	r3, [r7, #7]
 800286a:	b21b      	sxth	r3, r3
 800286c:	4313      	orrs	r3, r2
 800286e:	b21a      	sxth	r2, r3
 8002870:	4b37      	ldr	r3, [pc, #220]	@ (8002950 <bmp280ReadCalibration+0x20c>)
 8002872:	819a      	strh	r2, [r3, #12]
  lsb = I2C_ReadOneByte(BMP280_ADDR, BMP280_DIG_P5_LSB_REG);
 8002874:	2196      	movs	r1, #150	@ 0x96
 8002876:	20ee      	movs	r0, #238	@ 0xee
 8002878:	f7fe fcaa 	bl	80011d0 <I2C_ReadOneByte>
 800287c:	4603      	mov	r3, r0
 800287e:	71fb      	strb	r3, [r7, #7]
  msb = I2C_ReadOneByte(BMP280_ADDR, BMP280_DIG_P5_MSB_REG);           
 8002880:	2197      	movs	r1, #151	@ 0x97
 8002882:	20ee      	movs	r0, #238	@ 0xee
 8002884:	f7fe fca4 	bl	80011d0 <I2C_ReadOneByte>
 8002888:	4603      	mov	r3, r0
 800288a:	71bb      	strb	r3, [r7, #6]
  dig_P5 = msb << 8 | lsb;  
 800288c:	79bb      	ldrb	r3, [r7, #6]
 800288e:	021b      	lsls	r3, r3, #8
 8002890:	b21a      	sxth	r2, r3
 8002892:	79fb      	ldrb	r3, [r7, #7]
 8002894:	b21b      	sxth	r3, r3
 8002896:	4313      	orrs	r3, r2
 8002898:	b21a      	sxth	r2, r3
 800289a:	4b2d      	ldr	r3, [pc, #180]	@ (8002950 <bmp280ReadCalibration+0x20c>)
 800289c:	81da      	strh	r2, [r3, #14]
  lsb = I2C_ReadOneByte(BMP280_ADDR, BMP280_DIG_P6_LSB_REG);
 800289e:	2198      	movs	r1, #152	@ 0x98
 80028a0:	20ee      	movs	r0, #238	@ 0xee
 80028a2:	f7fe fc95 	bl	80011d0 <I2C_ReadOneByte>
 80028a6:	4603      	mov	r3, r0
 80028a8:	71fb      	strb	r3, [r7, #7]
  msb = I2C_ReadOneByte(BMP280_ADDR, BMP280_DIG_P6_MSB_REG);          
 80028aa:	2199      	movs	r1, #153	@ 0x99
 80028ac:	20ee      	movs	r0, #238	@ 0xee
 80028ae:	f7fe fc8f 	bl	80011d0 <I2C_ReadOneByte>
 80028b2:	4603      	mov	r3, r0
 80028b4:	71bb      	strb	r3, [r7, #6]
  dig_P6 = msb << 8 | lsb;  
 80028b6:	79bb      	ldrb	r3, [r7, #6]
 80028b8:	021b      	lsls	r3, r3, #8
 80028ba:	b21a      	sxth	r2, r3
 80028bc:	79fb      	ldrb	r3, [r7, #7]
 80028be:	b21b      	sxth	r3, r3
 80028c0:	4313      	orrs	r3, r2
 80028c2:	b21a      	sxth	r2, r3
 80028c4:	4b22      	ldr	r3, [pc, #136]	@ (8002950 <bmp280ReadCalibration+0x20c>)
 80028c6:	821a      	strh	r2, [r3, #16]
  lsb = I2C_ReadOneByte(BMP280_ADDR, BMP280_DIG_P7_LSB_REG);
 80028c8:	219a      	movs	r1, #154	@ 0x9a
 80028ca:	20ee      	movs	r0, #238	@ 0xee
 80028cc:	f7fe fc80 	bl	80011d0 <I2C_ReadOneByte>
 80028d0:	4603      	mov	r3, r0
 80028d2:	71fb      	strb	r3, [r7, #7]
  msb = I2C_ReadOneByte(BMP280_ADDR, BMP280_DIG_P7_MSB_REG);           
 80028d4:	219b      	movs	r1, #155	@ 0x9b
 80028d6:	20ee      	movs	r0, #238	@ 0xee
 80028d8:	f7fe fc7a 	bl	80011d0 <I2C_ReadOneByte>
 80028dc:	4603      	mov	r3, r0
 80028de:	71bb      	strb	r3, [r7, #6]
  dig_P7 = msb << 8 | lsb;  
 80028e0:	79bb      	ldrb	r3, [r7, #6]
 80028e2:	021b      	lsls	r3, r3, #8
 80028e4:	b21a      	sxth	r2, r3
 80028e6:	79fb      	ldrb	r3, [r7, #7]
 80028e8:	b21b      	sxth	r3, r3
 80028ea:	4313      	orrs	r3, r2
 80028ec:	b21a      	sxth	r2, r3
 80028ee:	4b18      	ldr	r3, [pc, #96]	@ (8002950 <bmp280ReadCalibration+0x20c>)
 80028f0:	825a      	strh	r2, [r3, #18]
  lsb = I2C_ReadOneByte(BMP280_ADDR, BMP280_DIG_P8_LSB_REG);
 80028f2:	219c      	movs	r1, #156	@ 0x9c
 80028f4:	20ee      	movs	r0, #238	@ 0xee
 80028f6:	f7fe fc6b 	bl	80011d0 <I2C_ReadOneByte>
 80028fa:	4603      	mov	r3, r0
 80028fc:	71fb      	strb	r3, [r7, #7]
  msb = I2C_ReadOneByte(BMP280_ADDR, BMP280_DIG_P8_MSB_REG);         
 80028fe:	219d      	movs	r1, #157	@ 0x9d
 8002900:	20ee      	movs	r0, #238	@ 0xee
 8002902:	f7fe fc65 	bl	80011d0 <I2C_ReadOneByte>
 8002906:	4603      	mov	r3, r0
 8002908:	71bb      	strb	r3, [r7, #6]
  dig_P8 = msb << 8 | lsb;  
 800290a:	79bb      	ldrb	r3, [r7, #6]
 800290c:	021b      	lsls	r3, r3, #8
 800290e:	b21a      	sxth	r2, r3
 8002910:	79fb      	ldrb	r3, [r7, #7]
 8002912:	b21b      	sxth	r3, r3
 8002914:	4313      	orrs	r3, r2
 8002916:	b21a      	sxth	r2, r3
 8002918:	4b0d      	ldr	r3, [pc, #52]	@ (8002950 <bmp280ReadCalibration+0x20c>)
 800291a:	829a      	strh	r2, [r3, #20]
  lsb = I2C_ReadOneByte(BMP280_ADDR, BMP280_DIG_P9_LSB_REG);
 800291c:	219e      	movs	r1, #158	@ 0x9e
 800291e:	20ee      	movs	r0, #238	@ 0xee
 8002920:	f7fe fc56 	bl	80011d0 <I2C_ReadOneByte>
 8002924:	4603      	mov	r3, r0
 8002926:	71fb      	strb	r3, [r7, #7]
  msb = I2C_ReadOneByte(BMP280_ADDR, BMP280_DIG_P9_MSB_REG);            
 8002928:	219f      	movs	r1, #159	@ 0x9f
 800292a:	20ee      	movs	r0, #238	@ 0xee
 800292c:	f7fe fc50 	bl	80011d0 <I2C_ReadOneByte>
 8002930:	4603      	mov	r3, r0
 8002932:	71bb      	strb	r3, [r7, #6]
  dig_P9 = msb << 8 | lsb; 
 8002934:	79bb      	ldrb	r3, [r7, #6]
 8002936:	021b      	lsls	r3, r3, #8
 8002938:	b21a      	sxth	r2, r3
 800293a:	79fb      	ldrb	r3, [r7, #7]
 800293c:	b21b      	sxth	r3, r3
 800293e:	4313      	orrs	r3, r2
 8002940:	b21a      	sxth	r2, r3
 8002942:	4b03      	ldr	r3, [pc, #12]	@ (8002950 <bmp280ReadCalibration+0x20c>)
 8002944:	82da      	strh	r2, [r3, #22]

}
 8002946:	bf00      	nop
 8002948:	3708      	adds	r7, #8
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}
 800294e:	bf00      	nop
 8002950:	200002bc 	.word	0x200002bc

08002954 <bmp280Init>:

void bmp280Init(void)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	af00      	add	r7, sp, #0
  I2C_WriteOneByte(BMP280_ADDR, BMP280_REGISTER_CONTROL, 0xFF);
 8002958:	22ff      	movs	r2, #255	@ 0xff
 800295a:	21f4      	movs	r1, #244	@ 0xf4
 800295c:	20ee      	movs	r0, #238	@ 0xee
 800295e:	f7fe fc59 	bl	8001214 <I2C_WriteOneByte>
  I2C_WriteOneByte(BMP280_ADDR, BMP280_REGISTER_CONFIG, 0x14);
 8002962:	2214      	movs	r2, #20
 8002964:	21f5      	movs	r1, #245	@ 0xf5
 8002966:	20ee      	movs	r0, #238	@ 0xee
 8002968:	f7fe fc54 	bl	8001214 <I2C_WriteOneByte>
  bmp280ReadCalibration();
 800296c:	f7ff feea 	bl	8002744 <bmp280ReadCalibration>
}
 8002970:	bf00      	nop
 8002972:	bd80      	pop	{r7, pc}

08002974 <bmp280CompensateTemperature>:

float bmp280CompensateTemperature(int32_t adc_T)  
{  
 8002974:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002978:	b0a2      	sub	sp, #136	@ 0x88
 800297a:	af00      	add	r7, sp, #0
 800297c:	66f8      	str	r0, [r7, #108]	@ 0x6c
  int64_t var1, var2, temperature; 

  var1  = ((((adc_T>>3) - ((int64_t)dig_T1 <<1))) *((int64_t)dig_T2)) >> 11;
 800297e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002980:	10db      	asrs	r3, r3, #3
 8002982:	17da      	asrs	r2, r3, #31
 8002984:	653b      	str	r3, [r7, #80]	@ 0x50
 8002986:	657a      	str	r2, [r7, #84]	@ 0x54
 8002988:	4b69      	ldr	r3, [pc, #420]	@ (8002b30 <bmp280CompensateTemperature+0x1bc>)
 800298a:	881b      	ldrh	r3, [r3, #0]
 800298c:	b29b      	uxth	r3, r3
 800298e:	2200      	movs	r2, #0
 8002990:	461c      	mov	r4, r3
 8002992:	4615      	mov	r5, r2
 8002994:	1923      	adds	r3, r4, r4
 8002996:	60bb      	str	r3, [r7, #8]
 8002998:	eb45 0305 	adc.w	r3, r5, r5
 800299c:	60fb      	str	r3, [r7, #12]
 800299e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80029a2:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 80029a6:	4621      	mov	r1, r4
 80029a8:	ebb1 0a02 	subs.w	sl, r1, r2
 80029ac:	4629      	mov	r1, r5
 80029ae:	eb61 0b03 	sbc.w	fp, r1, r3
 80029b2:	4b5f      	ldr	r3, [pc, #380]	@ (8002b30 <bmp280CompensateTemperature+0x1bc>)
 80029b4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80029b8:	b21b      	sxth	r3, r3
 80029ba:	17da      	asrs	r2, r3, #31
 80029bc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80029be:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80029c0:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 80029c4:	4603      	mov	r3, r0
 80029c6:	fb03 f20b 	mul.w	r2, r3, fp
 80029ca:	460b      	mov	r3, r1
 80029cc:	fb0a f303 	mul.w	r3, sl, r3
 80029d0:	4413      	add	r3, r2
 80029d2:	4602      	mov	r2, r0
 80029d4:	fbaa 8902 	umull	r8, r9, sl, r2
 80029d8:	444b      	add	r3, r9
 80029da:	4699      	mov	r9, r3
 80029dc:	f04f 0200 	mov.w	r2, #0
 80029e0:	f04f 0300 	mov.w	r3, #0
 80029e4:	ea4f 22d8 	mov.w	r2, r8, lsr #11
 80029e8:	ea42 5249 	orr.w	r2, r2, r9, lsl #21
 80029ec:	ea4f 23e9 	mov.w	r3, r9, asr #11
 80029f0:	e9c7 2320 	strd	r2, r3, [r7, #128]	@ 0x80
  var2  = (((((adc_T>>4) - ((int64_t)dig_T1)) *((adc_T>>4) - ((int64_t)dig_T1))) >> 12) *
 80029f4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80029f6:	111b      	asrs	r3, r3, #4
 80029f8:	17da      	asrs	r2, r3, #31
 80029fa:	643b      	str	r3, [r7, #64]	@ 0x40
 80029fc:	647a      	str	r2, [r7, #68]	@ 0x44
 80029fe:	4b4c      	ldr	r3, [pc, #304]	@ (8002b30 <bmp280CompensateTemperature+0x1bc>)
 8002a00:	881b      	ldrh	r3, [r3, #0]
 8002a02:	b29b      	uxth	r3, r3
 8002a04:	2200      	movs	r2, #0
 8002a06:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002a08:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002a0a:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	@ 0x40
 8002a0e:	4623      	mov	r3, r4
 8002a10:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8002a14:	4602      	mov	r2, r0
 8002a16:	1a9b      	subs	r3, r3, r2
 8002a18:	633b      	str	r3, [r7, #48]	@ 0x30
 8002a1a:	462b      	mov	r3, r5
 8002a1c:	460a      	mov	r2, r1
 8002a1e:	eb63 0302 	sbc.w	r3, r3, r2
 8002a22:	637b      	str	r3, [r7, #52]	@ 0x34
 8002a24:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002a26:	111b      	asrs	r3, r3, #4
 8002a28:	17da      	asrs	r2, r3, #31
 8002a2a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002a2c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002a2e:	4b40      	ldr	r3, [pc, #256]	@ (8002b30 <bmp280CompensateTemperature+0x1bc>)
 8002a30:	881b      	ldrh	r3, [r3, #0]
 8002a32:	b29b      	uxth	r3, r3
 8002a34:	2200      	movs	r2, #0
 8002a36:	623b      	str	r3, [r7, #32]
 8002a38:	627a      	str	r2, [r7, #36]	@ 0x24
 8002a3a:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 8002a3e:	4623      	mov	r3, r4
 8002a40:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002a44:	4602      	mov	r2, r0
 8002a46:	1a9b      	subs	r3, r3, r2
 8002a48:	61bb      	str	r3, [r7, #24]
 8002a4a:	462b      	mov	r3, r5
 8002a4c:	460a      	mov	r2, r1
 8002a4e:	eb63 0302 	sbc.w	r3, r3, r2
 8002a52:	61fb      	str	r3, [r7, #28]
 8002a54:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002a58:	462b      	mov	r3, r5
 8002a5a:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8002a5e:	4642      	mov	r2, r8
 8002a60:	fb02 f203 	mul.w	r2, r2, r3
 8002a64:	464b      	mov	r3, r9
 8002a66:	4621      	mov	r1, r4
 8002a68:	fb01 f303 	mul.w	r3, r1, r3
 8002a6c:	4413      	add	r3, r2
 8002a6e:	4622      	mov	r2, r4
 8002a70:	4641      	mov	r1, r8
 8002a72:	fba2 1201 	umull	r1, r2, r2, r1
 8002a76:	667a      	str	r2, [r7, #100]	@ 0x64
 8002a78:	460a      	mov	r2, r1
 8002a7a:	663a      	str	r2, [r7, #96]	@ 0x60
 8002a7c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8002a7e:	4413      	add	r3, r2
 8002a80:	667b      	str	r3, [r7, #100]	@ 0x64
 8002a82:	f04f 0200 	mov.w	r2, #0
 8002a86:	f04f 0300 	mov.w	r3, #0
 8002a8a:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002a8e:	4621      	mov	r1, r4
 8002a90:	0b0a      	lsrs	r2, r1, #12
 8002a92:	4629      	mov	r1, r5
 8002a94:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 8002a98:	4629      	mov	r1, r5
 8002a9a:	130b      	asrs	r3, r1, #12
          ((int64_t)dig_T3)) >> 14;
 8002a9c:	4924      	ldr	r1, [pc, #144]	@ (8002b30 <bmp280CompensateTemperature+0x1bc>)
 8002a9e:	f9b1 1004 	ldrsh.w	r1, [r1, #4]
 8002aa2:	b209      	sxth	r1, r1
 8002aa4:	17c8      	asrs	r0, r1, #31
 8002aa6:	6139      	str	r1, [r7, #16]
 8002aa8:	6178      	str	r0, [r7, #20]
  var2  = (((((adc_T>>4) - ((int64_t)dig_T1)) *((adc_T>>4) - ((int64_t)dig_T1))) >> 12) *
 8002aaa:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002aae:	4621      	mov	r1, r4
 8002ab0:	fb01 f003 	mul.w	r0, r1, r3
 8002ab4:	4629      	mov	r1, r5
 8002ab6:	fb02 f101 	mul.w	r1, r2, r1
 8002aba:	4401      	add	r1, r0
 8002abc:	4620      	mov	r0, r4
 8002abe:	fba2 2300 	umull	r2, r3, r2, r0
 8002ac2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002ac4:	4613      	mov	r3, r2
 8002ac6:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002ac8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002aca:	18cb      	adds	r3, r1, r3
 8002acc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002ace:	f04f 0200 	mov.w	r2, #0
 8002ad2:	f04f 0300 	mov.w	r3, #0
 8002ad6:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 8002ada:	4621      	mov	r1, r4
 8002adc:	0b8a      	lsrs	r2, r1, #14
 8002ade:	4629      	mov	r1, r5
 8002ae0:	ea42 4281 	orr.w	r2, r2, r1, lsl #18
 8002ae4:	4629      	mov	r1, r5
 8002ae6:	138b      	asrs	r3, r1, #14
 8002ae8:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
  t_fine = var1 + var2;
 8002aec:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002af0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002af2:	4413      	add	r3, r2
 8002af4:	461a      	mov	r2, r3
 8002af6:	4b0e      	ldr	r3, [pc, #56]	@ (8002b30 <bmp280CompensateTemperature+0x1bc>)
 8002af8:	619a      	str	r2, [r3, #24]

  temperature = (t_fine * 5 + 128) >> 8; 
 8002afa:	4b0d      	ldr	r3, [pc, #52]	@ (8002b30 <bmp280CompensateTemperature+0x1bc>)
 8002afc:	699a      	ldr	r2, [r3, #24]
 8002afe:	4613      	mov	r3, r2
 8002b00:	009b      	lsls	r3, r3, #2
 8002b02:	4413      	add	r3, r2
 8002b04:	3380      	adds	r3, #128	@ 0x80
 8002b06:	121b      	asrs	r3, r3, #8
 8002b08:	17da      	asrs	r2, r3, #31
 8002b0a:	603b      	str	r3, [r7, #0]
 8002b0c:	607a      	str	r2, [r7, #4]
 8002b0e:	e9d7 3400 	ldrd	r3, r4, [r7]
 8002b12:	e9c7 341c 	strd	r3, r4, [r7, #112]	@ 0x70
 
  return (float)temperature;  
 8002b16:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8002b1a:	f7fe f965 	bl	8000de8 <__aeabi_l2f>
 8002b1e:	4603      	mov	r3, r0
 8002b20:	ee07 3a90 	vmov	s15, r3
} 
 8002b24:	eeb0 0a67 	vmov.f32	s0, s15
 8002b28:	3788      	adds	r7, #136	@ 0x88
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002b30:	200002bc 	.word	0x200002bc

08002b34 <bmp280CompensatePressure>:

float bmp280CompensatePressure(int32_t adc_P)
{  
 8002b34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b38:	b0c6      	sub	sp, #280	@ 0x118
 8002b3a:	af00      	add	r7, sp, #0
 8002b3c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
  int64_t var1, var2;
  uint64_t pressure;  
#if 1
  var1 = ((int64_t)t_fine) - 128000;
 8002b40:	4bae      	ldr	r3, [pc, #696]	@ (8002dfc <bmp280CompensatePressure+0x2c8>)
 8002b42:	699b      	ldr	r3, [r3, #24]
 8002b44:	17da      	asrs	r2, r3, #31
 8002b46:	461c      	mov	r4, r3
 8002b48:	4615      	mov	r5, r2
 8002b4a:	f5b4 3afa 	subs.w	sl, r4, #128000	@ 0x1f400
 8002b4e:	f145 3bff 	adc.w	fp, r5, #4294967295	@ 0xffffffff
 8002b52:	e9c7 ab44 	strd	sl, fp, [r7, #272]	@ 0x110
  var2 = var1 * var1 * (int64_t)dig_P6; 
 8002b56:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8002b5a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002b5e:	fb03 f102 	mul.w	r1, r3, r2
 8002b62:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8002b66:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002b6a:	fb02 f303 	mul.w	r3, r2, r3
 8002b6e:	18ca      	adds	r2, r1, r3
 8002b70:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002b74:	fba3 8903 	umull	r8, r9, r3, r3
 8002b78:	eb02 0309 	add.w	r3, r2, r9
 8002b7c:	4699      	mov	r9, r3
 8002b7e:	4b9f      	ldr	r3, [pc, #636]	@ (8002dfc <bmp280CompensatePressure+0x2c8>)
 8002b80:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8002b84:	b21b      	sxth	r3, r3
 8002b86:	17da      	asrs	r2, r3, #31
 8002b88:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002b8c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002b90:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	@ 0xa8
 8002b94:	4603      	mov	r3, r0
 8002b96:	fb03 f209 	mul.w	r2, r3, r9
 8002b9a:	460b      	mov	r3, r1
 8002b9c:	fb08 f303 	mul.w	r3, r8, r3
 8002ba0:	4413      	add	r3, r2
 8002ba2:	4602      	mov	r2, r0
 8002ba4:	fba8 1202 	umull	r1, r2, r8, r2
 8002ba8:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8002bac:	460a      	mov	r2, r1
 8002bae:	f8c7 20b0 	str.w	r2, [r7, #176]	@ 0xb0
 8002bb2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002bb6:	4413      	add	r3, r2
 8002bb8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002bbc:	e9d7 342c 	ldrd	r3, r4, [r7, #176]	@ 0xb0
 8002bc0:	e9c7 3442 	strd	r3, r4, [r7, #264]	@ 0x108
 8002bc4:	e9c7 3442 	strd	r3, r4, [r7, #264]	@ 0x108
  var2 = var2 + ((var1*(int64_t)dig_P5)<<17);
 8002bc8:	4b8c      	ldr	r3, [pc, #560]	@ (8002dfc <bmp280CompensatePressure+0x2c8>)
 8002bca:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8002bce:	b21b      	sxth	r3, r3
 8002bd0:	17da      	asrs	r2, r3, #31
 8002bd2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002bd6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002bda:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002bde:	e9d7 4528 	ldrd	r4, r5, [r7, #160]	@ 0xa0
 8002be2:	462a      	mov	r2, r5
 8002be4:	fb02 f203 	mul.w	r2, r2, r3
 8002be8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002bec:	4621      	mov	r1, r4
 8002bee:	fb01 f303 	mul.w	r3, r1, r3
 8002bf2:	441a      	add	r2, r3
 8002bf4:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002bf8:	4621      	mov	r1, r4
 8002bfa:	fba3 1301 	umull	r1, r3, r3, r1
 8002bfe:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8002c02:	460b      	mov	r3, r1
 8002c04:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8002c08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c0c:	18d3      	adds	r3, r2, r3
 8002c0e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8002c12:	f04f 0000 	mov.w	r0, #0
 8002c16:	f04f 0100 	mov.w	r1, #0
 8002c1a:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	@ 0xf0
 8002c1e:	462b      	mov	r3, r5
 8002c20:	0459      	lsls	r1, r3, #17
 8002c22:	4623      	mov	r3, r4
 8002c24:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 8002c28:	4623      	mov	r3, r4
 8002c2a:	0458      	lsls	r0, r3, #17
 8002c2c:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	@ 0x108
 8002c30:	1814      	adds	r4, r2, r0
 8002c32:	63bc      	str	r4, [r7, #56]	@ 0x38
 8002c34:	414b      	adcs	r3, r1
 8002c36:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002c38:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 8002c3c:	e9c7 3442 	strd	r3, r4, [r7, #264]	@ 0x108
  var2 = var2 + (((int64_t)dig_P4)<<35);
 8002c40:	4b6e      	ldr	r3, [pc, #440]	@ (8002dfc <bmp280CompensatePressure+0x2c8>)
 8002c42:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8002c46:	b21b      	sxth	r3, r3
 8002c48:	17da      	asrs	r2, r3, #31
 8002c4a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002c4e:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8002c52:	f04f 0000 	mov.w	r0, #0
 8002c56:	f04f 0100 	mov.w	r1, #0
 8002c5a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002c5e:	00d9      	lsls	r1, r3, #3
 8002c60:	2000      	movs	r0, #0
 8002c62:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	@ 0x108
 8002c66:	1814      	adds	r4, r2, r0
 8002c68:	633c      	str	r4, [r7, #48]	@ 0x30
 8002c6a:	414b      	adcs	r3, r1
 8002c6c:	637b      	str	r3, [r7, #52]	@ 0x34
 8002c6e:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8002c72:	e9c7 3442 	strd	r3, r4, [r7, #264]	@ 0x108
  var1 = ((var1 * var1 * (int64_t)dig_P3)>>8) + ((var1 * (int64_t)dig_P2)<<12);
 8002c76:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8002c7a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002c7e:	fb03 f102 	mul.w	r1, r3, r2
 8002c82:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8002c86:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002c8a:	fb02 f303 	mul.w	r3, r2, r3
 8002c8e:	18ca      	adds	r2, r1, r3
 8002c90:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002c94:	fba3 1303 	umull	r1, r3, r3, r3
 8002c98:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8002c9c:	460b      	mov	r3, r1
 8002c9e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002ca2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8002ca6:	18d3      	adds	r3, r2, r3
 8002ca8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8002cac:	4b53      	ldr	r3, [pc, #332]	@ (8002dfc <bmp280CompensatePressure+0x2c8>)
 8002cae:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8002cb2:	b21b      	sxth	r3, r3
 8002cb4:	17da      	asrs	r2, r3, #31
 8002cb6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002cba:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002cbe:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002cc2:	462b      	mov	r3, r5
 8002cc4:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	@ 0x90
 8002cc8:	4642      	mov	r2, r8
 8002cca:	fb02 f203 	mul.w	r2, r2, r3
 8002cce:	464b      	mov	r3, r9
 8002cd0:	4621      	mov	r1, r4
 8002cd2:	fb01 f303 	mul.w	r3, r1, r3
 8002cd6:	4413      	add	r3, r2
 8002cd8:	4622      	mov	r2, r4
 8002cda:	4641      	mov	r1, r8
 8002cdc:	fba2 1201 	umull	r1, r2, r2, r1
 8002ce0:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 8002ce4:	460a      	mov	r2, r1
 8002ce6:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 8002cea:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8002cee:	4413      	add	r3, r2
 8002cf0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002cf4:	f04f 0000 	mov.w	r0, #0
 8002cf8:	f04f 0100 	mov.w	r1, #0
 8002cfc:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 8002d00:	4623      	mov	r3, r4
 8002d02:	0a18      	lsrs	r0, r3, #8
 8002d04:	462b      	mov	r3, r5
 8002d06:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8002d0a:	462b      	mov	r3, r5
 8002d0c:	1219      	asrs	r1, r3, #8
 8002d0e:	4b3b      	ldr	r3, [pc, #236]	@ (8002dfc <bmp280CompensatePressure+0x2c8>)
 8002d10:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002d14:	b21b      	sxth	r3, r3
 8002d16:	17da      	asrs	r2, r3, #31
 8002d18:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002d1c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002d20:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002d24:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002d28:	464a      	mov	r2, r9
 8002d2a:	fb02 f203 	mul.w	r2, r2, r3
 8002d2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d32:	4644      	mov	r4, r8
 8002d34:	fb04 f303 	mul.w	r3, r4, r3
 8002d38:	441a      	add	r2, r3
 8002d3a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002d3e:	4644      	mov	r4, r8
 8002d40:	fba3 4304 	umull	r4, r3, r3, r4
 8002d44:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8002d48:	4623      	mov	r3, r4
 8002d4a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002d4e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002d52:	18d3      	adds	r3, r2, r3
 8002d54:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8002d58:	f04f 0200 	mov.w	r2, #0
 8002d5c:	f04f 0300 	mov.w	r3, #0
 8002d60:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	@ 0xd8
 8002d64:	464c      	mov	r4, r9
 8002d66:	0323      	lsls	r3, r4, #12
 8002d68:	4644      	mov	r4, r8
 8002d6a:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8002d6e:	4644      	mov	r4, r8
 8002d70:	0322      	lsls	r2, r4, #12
 8002d72:	1884      	adds	r4, r0, r2
 8002d74:	62bc      	str	r4, [r7, #40]	@ 0x28
 8002d76:	eb41 0303 	adc.w	r3, r1, r3
 8002d7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002d7c:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 8002d80:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
  var1 = (((((int64_t)1)<<47)+var1))*((int64_t)dig_P1)>>33; 
 8002d84:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8002d88:	f503 4100 	add.w	r1, r3, #32768	@ 0x8000
 8002d8c:	f8c7 1084 	str.w	r1, [r7, #132]	@ 0x84
 8002d90:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002d94:	4b19      	ldr	r3, [pc, #100]	@ (8002dfc <bmp280CompensatePressure+0x2c8>)
 8002d96:	88db      	ldrh	r3, [r3, #6]
 8002d98:	b29b      	uxth	r3, r3
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002d9e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002da0:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 8002da4:	462b      	mov	r3, r5
 8002da6:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002daa:	4642      	mov	r2, r8
 8002dac:	fb02 f203 	mul.w	r2, r2, r3
 8002db0:	464b      	mov	r3, r9
 8002db2:	4621      	mov	r1, r4
 8002db4:	fb01 f303 	mul.w	r3, r1, r3
 8002db8:	4413      	add	r3, r2
 8002dba:	4622      	mov	r2, r4
 8002dbc:	4641      	mov	r1, r8
 8002dbe:	fba2 1201 	umull	r1, r2, r2, r1
 8002dc2:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002dc6:	460a      	mov	r2, r1
 8002dc8:	f8c7 20d0 	str.w	r2, [r7, #208]	@ 0xd0
 8002dcc:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8002dd0:	4413      	add	r3, r2
 8002dd2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8002dd6:	f04f 0200 	mov.w	r2, #0
 8002dda:	f04f 0300 	mov.w	r3, #0
 8002dde:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 8002de2:	4629      	mov	r1, r5
 8002de4:	104a      	asrs	r2, r1, #1
 8002de6:	4629      	mov	r1, r5
 8002de8:	17cb      	asrs	r3, r1, #31
 8002dea:	e9c7 2344 	strd	r2, r3, [r7, #272]	@ 0x110

  if (var1 == 0) {  
 8002dee:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8002df2:	4313      	orrs	r3, r2
 8002df4:	d106      	bne.n	8002e04 <bmp280CompensatePressure+0x2d0>
    return 0; // avoid exception caused by division by zero  
 8002df6:	eddf 7a02 	vldr	s15, [pc, #8]	@ 8002e00 <bmp280CompensatePressure+0x2cc>
 8002dfa:	e157      	b.n	80030ac <bmp280CompensatePressure+0x578>
 8002dfc:	200002bc 	.word	0x200002bc
 8002e00:	00000000 	.word	0x00000000
  }  

  pressure = 1048576.0 - adc_P;  
 8002e04:	f8d7 00fc 	ldr.w	r0, [r7, #252]	@ 0xfc
 8002e08:	f7fd fb8c 	bl	8000524 <__aeabi_i2d>
 8002e0c:	4602      	mov	r2, r0
 8002e0e:	460b      	mov	r3, r1
 8002e10:	f04f 0000 	mov.w	r0, #0
 8002e14:	49a9      	ldr	r1, [pc, #676]	@ (80030bc <bmp280CompensatePressure+0x588>)
 8002e16:	f7fd fa37 	bl	8000288 <__aeabi_dsub>
 8002e1a:	4602      	mov	r2, r0
 8002e1c:	460b      	mov	r3, r1
 8002e1e:	4610      	mov	r0, r2
 8002e20:	4619      	mov	r1, r3
 8002e22:	f7fe f837 	bl	8000e94 <__aeabi_d2ulz>
 8002e26:	4602      	mov	r2, r0
 8002e28:	460b      	mov	r3, r1
 8002e2a:	e9c7 2340 	strd	r2, r3, [r7, #256]	@ 0x100
  pressure = (((pressure<<31) - var2)*3125) / var1; 
 8002e2e:	e9d7 2340 	ldrd	r2, r3, [r7, #256]	@ 0x100
 8002e32:	f04f 0000 	mov.w	r0, #0
 8002e36:	f04f 0100 	mov.w	r1, #0
 8002e3a:	07d9      	lsls	r1, r3, #31
 8002e3c:	ea41 0152 	orr.w	r1, r1, r2, lsr #1
 8002e40:	07d0      	lsls	r0, r2, #31
 8002e42:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	@ 0x108
 8002e46:	1a84      	subs	r4, r0, r2
 8002e48:	673c      	str	r4, [r7, #112]	@ 0x70
 8002e4a:	eb61 0303 	sbc.w	r3, r1, r3
 8002e4e:	677b      	str	r3, [r7, #116]	@ 0x74
 8002e50:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	@ 0x70
 8002e54:	4622      	mov	r2, r4
 8002e56:	462b      	mov	r3, r5
 8002e58:	1891      	adds	r1, r2, r2
 8002e5a:	6239      	str	r1, [r7, #32]
 8002e5c:	415b      	adcs	r3, r3
 8002e5e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e60:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002e64:	4621      	mov	r1, r4
 8002e66:	1851      	adds	r1, r2, r1
 8002e68:	61b9      	str	r1, [r7, #24]
 8002e6a:	4629      	mov	r1, r5
 8002e6c:	414b      	adcs	r3, r1
 8002e6e:	61fb      	str	r3, [r7, #28]
 8002e70:	f04f 0200 	mov.w	r2, #0
 8002e74:	f04f 0300 	mov.w	r3, #0
 8002e78:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8002e7c:	4649      	mov	r1, r9
 8002e7e:	018b      	lsls	r3, r1, #6
 8002e80:	4641      	mov	r1, r8
 8002e82:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002e86:	4641      	mov	r1, r8
 8002e88:	018a      	lsls	r2, r1, #6
 8002e8a:	4641      	mov	r1, r8
 8002e8c:	1889      	adds	r1, r1, r2
 8002e8e:	6139      	str	r1, [r7, #16]
 8002e90:	4649      	mov	r1, r9
 8002e92:	eb43 0101 	adc.w	r1, r3, r1
 8002e96:	6179      	str	r1, [r7, #20]
 8002e98:	f04f 0200 	mov.w	r2, #0
 8002e9c:	f04f 0300 	mov.w	r3, #0
 8002ea0:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8002ea4:	4649      	mov	r1, r9
 8002ea6:	008b      	lsls	r3, r1, #2
 8002ea8:	4641      	mov	r1, r8
 8002eaa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002eae:	4641      	mov	r1, r8
 8002eb0:	008a      	lsls	r2, r1, #2
 8002eb2:	4610      	mov	r0, r2
 8002eb4:	4619      	mov	r1, r3
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	4622      	mov	r2, r4
 8002eba:	189b      	adds	r3, r3, r2
 8002ebc:	60bb      	str	r3, [r7, #8]
 8002ebe:	460b      	mov	r3, r1
 8002ec0:	462a      	mov	r2, r5
 8002ec2:	eb42 0303 	adc.w	r3, r2, r3
 8002ec6:	60fb      	str	r3, [r7, #12]
 8002ec8:	f04f 0200 	mov.w	r2, #0
 8002ecc:	f04f 0300 	mov.w	r3, #0
 8002ed0:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8002ed4:	4649      	mov	r1, r9
 8002ed6:	008b      	lsls	r3, r1, #2
 8002ed8:	4641      	mov	r1, r8
 8002eda:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002ede:	4641      	mov	r1, r8
 8002ee0:	008a      	lsls	r2, r1, #2
 8002ee2:	4610      	mov	r0, r2
 8002ee4:	4619      	mov	r1, r3
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	4622      	mov	r2, r4
 8002eea:	189b      	adds	r3, r3, r2
 8002eec:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002eee:	462b      	mov	r3, r5
 8002ef0:	460a      	mov	r2, r1
 8002ef2:	eb42 0303 	adc.w	r3, r2, r3
 8002ef6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002ef8:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8002efc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002f00:	f7fd ffb0 	bl	8000e64 <__aeabi_uldivmod>
 8002f04:	4602      	mov	r2, r0
 8002f06:	460b      	mov	r3, r1
 8002f08:	e9c7 2340 	strd	r2, r3, [r7, #256]	@ 0x100
  var1 = (((int64_t)dig_P9) * (pressure>>13) * (pressure>>13)) >> 25;
 8002f0c:	4b6c      	ldr	r3, [pc, #432]	@ (80030c0 <bmp280CompensatePressure+0x58c>)
 8002f0e:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8002f12:	b21b      	sxth	r3, r3
 8002f14:	17da      	asrs	r2, r3, #31
 8002f16:	663b      	str	r3, [r7, #96]	@ 0x60
 8002f18:	667a      	str	r2, [r7, #100]	@ 0x64
 8002f1a:	e9d7 2340 	ldrd	r2, r3, [r7, #256]	@ 0x100
 8002f1e:	f04f 0000 	mov.w	r0, #0
 8002f22:	f04f 0100 	mov.w	r1, #0
 8002f26:	0b50      	lsrs	r0, r2, #13
 8002f28:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8002f2c:	0b59      	lsrs	r1, r3, #13
 8002f2e:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002f32:	462b      	mov	r3, r5
 8002f34:	fb00 f203 	mul.w	r2, r0, r3
 8002f38:	4623      	mov	r3, r4
 8002f3a:	fb03 f301 	mul.w	r3, r3, r1
 8002f3e:	4413      	add	r3, r2
 8002f40:	4622      	mov	r2, r4
 8002f42:	fba2 1200 	umull	r1, r2, r2, r0
 8002f46:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 8002f4a:	460a      	mov	r2, r1
 8002f4c:	f8c7 20c8 	str.w	r2, [r7, #200]	@ 0xc8
 8002f50:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 8002f54:	4413      	add	r3, r2
 8002f56:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002f5a:	e9d7 2340 	ldrd	r2, r3, [r7, #256]	@ 0x100
 8002f5e:	f04f 0000 	mov.w	r0, #0
 8002f62:	f04f 0100 	mov.w	r1, #0
 8002f66:	0b50      	lsrs	r0, r2, #13
 8002f68:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8002f6c:	0b59      	lsrs	r1, r3, #13
 8002f6e:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	@ 0xc8
 8002f72:	462b      	mov	r3, r5
 8002f74:	fb00 f203 	mul.w	r2, r0, r3
 8002f78:	4623      	mov	r3, r4
 8002f7a:	fb03 f301 	mul.w	r3, r3, r1
 8002f7e:	4413      	add	r3, r2
 8002f80:	4622      	mov	r2, r4
 8002f82:	fba2 1200 	umull	r1, r2, r2, r0
 8002f86:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002f8a:	460a      	mov	r2, r1
 8002f8c:	f8c7 20c0 	str.w	r2, [r7, #192]	@ 0xc0
 8002f90:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002f94:	4413      	add	r3, r2
 8002f96:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002f9a:	f04f 0200 	mov.w	r2, #0
 8002f9e:	f04f 0300 	mov.w	r3, #0
 8002fa2:	e9d7 4530 	ldrd	r4, r5, [r7, #192]	@ 0xc0
 8002fa6:	4621      	mov	r1, r4
 8002fa8:	0e4a      	lsrs	r2, r1, #25
 8002faa:	4629      	mov	r1, r5
 8002fac:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8002fb0:	4629      	mov	r1, r5
 8002fb2:	0e4b      	lsrs	r3, r1, #25
 8002fb4:	e9c7 2344 	strd	r2, r3, [r7, #272]	@ 0x110
  var2 = (((int64_t)dig_P8) * pressure) >> 19;
 8002fb8:	4b41      	ldr	r3, [pc, #260]	@ (80030c0 <bmp280CompensatePressure+0x58c>)
 8002fba:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8002fbe:	b21b      	sxth	r3, r3
 8002fc0:	17da      	asrs	r2, r3, #31
 8002fc2:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002fc4:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002fc6:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8002fca:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 8002fce:	462a      	mov	r2, r5
 8002fd0:	fb02 f203 	mul.w	r2, r2, r3
 8002fd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002fd8:	4621      	mov	r1, r4
 8002fda:	fb01 f303 	mul.w	r3, r1, r3
 8002fde:	4413      	add	r3, r2
 8002fe0:	f8d7 2100 	ldr.w	r2, [r7, #256]	@ 0x100
 8002fe4:	4621      	mov	r1, r4
 8002fe6:	fba2 1201 	umull	r1, r2, r2, r1
 8002fea:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002fee:	460a      	mov	r2, r1
 8002ff0:	f8c7 20b8 	str.w	r2, [r7, #184]	@ 0xb8
 8002ff4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8002ff8:	4413      	add	r3, r2
 8002ffa:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8002ffe:	f04f 0200 	mov.w	r2, #0
 8003002:	f04f 0300 	mov.w	r3, #0
 8003006:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	@ 0xb8
 800300a:	4621      	mov	r1, r4
 800300c:	0cca      	lsrs	r2, r1, #19
 800300e:	4629      	mov	r1, r5
 8003010:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8003014:	4629      	mov	r1, r5
 8003016:	0ccb      	lsrs	r3, r1, #19
 8003018:	e9c7 2342 	strd	r2, r3, [r7, #264]	@ 0x108
  pressure = ((pressure + var1 + var2) >> 8) + (((int64_t)dig_P7)<<4);
 800301c:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	@ 0x110
 8003020:	e9d7 2340 	ldrd	r2, r3, [r7, #256]	@ 0x100
 8003024:	1884      	adds	r4, r0, r2
 8003026:	653c      	str	r4, [r7, #80]	@ 0x50
 8003028:	eb41 0303 	adc.w	r3, r1, r3
 800302c:	657b      	str	r3, [r7, #84]	@ 0x54
 800302e:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	@ 0x108
 8003032:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 8003036:	4621      	mov	r1, r4
 8003038:	1889      	adds	r1, r1, r2
 800303a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800303c:	4629      	mov	r1, r5
 800303e:	eb43 0101 	adc.w	r1, r3, r1
 8003042:	64f9      	str	r1, [r7, #76]	@ 0x4c
 8003044:	f04f 0000 	mov.w	r0, #0
 8003048:	f04f 0100 	mov.w	r1, #0
 800304c:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8003050:	4623      	mov	r3, r4
 8003052:	0a18      	lsrs	r0, r3, #8
 8003054:	462b      	mov	r3, r5
 8003056:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 800305a:	462b      	mov	r3, r5
 800305c:	0a19      	lsrs	r1, r3, #8
 800305e:	4b18      	ldr	r3, [pc, #96]	@ (80030c0 <bmp280CompensatePressure+0x58c>)
 8003060:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8003064:	b21b      	sxth	r3, r3
 8003066:	17da      	asrs	r2, r3, #31
 8003068:	643b      	str	r3, [r7, #64]	@ 0x40
 800306a:	647a      	str	r2, [r7, #68]	@ 0x44
 800306c:	f04f 0200 	mov.w	r2, #0
 8003070:	f04f 0300 	mov.w	r3, #0
 8003074:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8003078:	464c      	mov	r4, r9
 800307a:	0123      	lsls	r3, r4, #4
 800307c:	4644      	mov	r4, r8
 800307e:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8003082:	4644      	mov	r4, r8
 8003084:	0122      	lsls	r2, r4, #4
 8003086:	1884      	adds	r4, r0, r2
 8003088:	603c      	str	r4, [r7, #0]
 800308a:	eb41 0303 	adc.w	r3, r1, r3
 800308e:	607b      	str	r3, [r7, #4]
 8003090:	e9d7 3400 	ldrd	r3, r4, [r7]
 8003094:	e9c7 3440 	strd	r3, r4, [r7, #256]	@ 0x100
   return (float)pressure/256;  
 8003098:	e9d7 0140 	ldrd	r0, r1, [r7, #256]	@ 0x100
 800309c:	f7fd fe9c 	bl	8000dd8 <__aeabi_ul2f>
 80030a0:	ee06 0a90 	vmov	s13, r0
 80030a4:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 80030c4 <bmp280CompensatePressure+0x590>
 80030a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
  var2 = (((int64_t)(pressure>>2))*((int64_t)dig_P8))>>13;
  pressure = (uint64_t)((int64_t)pressure) +((var1 + var2 + dig_P7)>>4);
  return (float)pressure; 
#endif
  
}  
 80030ac:	eeb0 0a67 	vmov.f32	s0, s15
 80030b0:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 80030b4:	46bd      	mov	sp, r7
 80030b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80030ba:	bf00      	nop
 80030bc:	41300000 	.word	0x41300000
 80030c0:	200002bc 	.word	0x200002bc
 80030c4:	43800000 	.word	0x43800000

080030c8 <bmp280TandPGet>:

void bmp280TandPGet(float *temperature, float *pressure)  
{  
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b086      	sub	sp, #24
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
 80030d0:	6039      	str	r1, [r7, #0]
  uint8_t lsb, msb, xlsb;  
  int32_t adc_P,adc_T;
    
  xlsb = I2C_ReadOneByte(BMP280_ADDR, BMP280_TEMP_XLSB_REG);
 80030d2:	21fc      	movs	r1, #252	@ 0xfc
 80030d4:	20ee      	movs	r0, #238	@ 0xee
 80030d6:	f7fe f87b 	bl	80011d0 <I2C_ReadOneByte>
 80030da:	4603      	mov	r3, r0
 80030dc:	75fb      	strb	r3, [r7, #23]
  lsb = I2C_ReadOneByte(BMP280_ADDR, BMP280_TEMP_LSB_REG);
 80030de:	21fb      	movs	r1, #251	@ 0xfb
 80030e0:	20ee      	movs	r0, #238	@ 0xee
 80030e2:	f7fe f875 	bl	80011d0 <I2C_ReadOneByte>
 80030e6:	4603      	mov	r3, r0
 80030e8:	75bb      	strb	r3, [r7, #22]
  msb = I2C_ReadOneByte(BMP280_ADDR, BMP280_TEMP_MSB_REG);
 80030ea:	21fa      	movs	r1, #250	@ 0xfa
 80030ec:	20ee      	movs	r0, #238	@ 0xee
 80030ee:	f7fe f86f 	bl	80011d0 <I2C_ReadOneByte>
 80030f2:	4603      	mov	r3, r0
 80030f4:	757b      	strb	r3, [r7, #21]
  //adc_T = (msb << 12) | (lsb << 4) | (xlsb >> 4); 
  adc_T = msb;
 80030f6:	7d7b      	ldrb	r3, [r7, #21]
 80030f8:	613b      	str	r3, [r7, #16]
  adc_T <<= 8;
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	021b      	lsls	r3, r3, #8
 80030fe:	613b      	str	r3, [r7, #16]
  adc_T |= lsb;
 8003100:	7dbb      	ldrb	r3, [r7, #22]
 8003102:	693a      	ldr	r2, [r7, #16]
 8003104:	4313      	orrs	r3, r2
 8003106:	613b      	str	r3, [r7, #16]
  adc_T <<= 8;
 8003108:	693b      	ldr	r3, [r7, #16]
 800310a:	021b      	lsls	r3, r3, #8
 800310c:	613b      	str	r3, [r7, #16]
  adc_T |= xlsb;
 800310e:	7dfb      	ldrb	r3, [r7, #23]
 8003110:	693a      	ldr	r2, [r7, #16]
 8003112:	4313      	orrs	r3, r2
 8003114:	613b      	str	r3, [r7, #16]
  adc_T >>= 4;
 8003116:	693b      	ldr	r3, [r7, #16]
 8003118:	111b      	asrs	r3, r3, #4
 800311a:	613b      	str	r3, [r7, #16]
  //adc_T = 415148;
  *temperature = bmp280CompensateTemperature(adc_T);
 800311c:	6938      	ldr	r0, [r7, #16]
 800311e:	f7ff fc29 	bl	8002974 <bmp280CompensateTemperature>
 8003122:	eef0 7a40 	vmov.f32	s15, s0
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	edc3 7a00 	vstr	s15, [r3]

  xlsb = I2C_ReadOneByte(BMP280_ADDR, BMP280_PRESS_XLSB_REG);
 800312c:	21f9      	movs	r1, #249	@ 0xf9
 800312e:	20ee      	movs	r0, #238	@ 0xee
 8003130:	f7fe f84e 	bl	80011d0 <I2C_ReadOneByte>
 8003134:	4603      	mov	r3, r0
 8003136:	75fb      	strb	r3, [r7, #23]
  lsb = I2C_ReadOneByte(BMP280_ADDR, BMP280_PRESS_LSB_REG);
 8003138:	21f8      	movs	r1, #248	@ 0xf8
 800313a:	20ee      	movs	r0, #238	@ 0xee
 800313c:	f7fe f848 	bl	80011d0 <I2C_ReadOneByte>
 8003140:	4603      	mov	r3, r0
 8003142:	75bb      	strb	r3, [r7, #22]
  msb = I2C_ReadOneByte(BMP280_ADDR, BMP280_PRESS_MSB_REG);
 8003144:	21f7      	movs	r1, #247	@ 0xf7
 8003146:	20ee      	movs	r0, #238	@ 0xee
 8003148:	f7fe f842 	bl	80011d0 <I2C_ReadOneByte>
 800314c:	4603      	mov	r3, r0
 800314e:	757b      	strb	r3, [r7, #21]
  //adc_P = (msb << 12) | (lsb << 4) | (xlsb >> 4); 
  adc_P = msb;
 8003150:	7d7b      	ldrb	r3, [r7, #21]
 8003152:	60fb      	str	r3, [r7, #12]
  adc_P <<= 8;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	021b      	lsls	r3, r3, #8
 8003158:	60fb      	str	r3, [r7, #12]
  adc_P |= lsb;
 800315a:	7dbb      	ldrb	r3, [r7, #22]
 800315c:	68fa      	ldr	r2, [r7, #12]
 800315e:	4313      	orrs	r3, r2
 8003160:	60fb      	str	r3, [r7, #12]
  adc_P <<= 8;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	021b      	lsls	r3, r3, #8
 8003166:	60fb      	str	r3, [r7, #12]
  adc_P |= xlsb;
 8003168:	7dfb      	ldrb	r3, [r7, #23]
 800316a:	68fa      	ldr	r2, [r7, #12]
 800316c:	4313      	orrs	r3, r2
 800316e:	60fb      	str	r3, [r7, #12]
  adc_P >>= 4;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	111b      	asrs	r3, r3, #4
 8003174:	60fb      	str	r3, [r7, #12]
  //adc_P = 51988;
  *pressure = bmp280CompensatePressure(adc_P);     
 8003176:	68f8      	ldr	r0, [r7, #12]
 8003178:	f7ff fcdc 	bl	8002b34 <bmp280CompensatePressure>
 800317c:	eef0 7a40 	vmov.f32	s15, s0
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	edc3 7a00 	vstr	s15, [r3]
} 
 8003186:	bf00      	nop
 8003188:	3718      	adds	r7, #24
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}

0800318e <bmp280CalAvgValue>:

void bmp280CalAvgValue(uint8_t *pIndex, int32_t *pAvgBuffer, int32_t InVal, int32_t *pOutVal)
{ 
 800318e:	b480      	push	{r7}
 8003190:	b087      	sub	sp, #28
 8003192:	af00      	add	r7, sp, #0
 8003194:	60f8      	str	r0, [r7, #12]
 8003196:	60b9      	str	r1, [r7, #8]
 8003198:	607a      	str	r2, [r7, #4]
 800319a:	603b      	str	r3, [r7, #0]
  uint8_t i;

  *(pAvgBuffer + ((*pIndex) ++)) = InVal;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	781b      	ldrb	r3, [r3, #0]
 80031a0:	1c5a      	adds	r2, r3, #1
 80031a2:	b2d1      	uxtb	r1, r2
 80031a4:	68fa      	ldr	r2, [r7, #12]
 80031a6:	7011      	strb	r1, [r2, #0]
 80031a8:	009b      	lsls	r3, r3, #2
 80031aa:	68ba      	ldr	r2, [r7, #8]
 80031ac:	4413      	add	r3, r2
 80031ae:	687a      	ldr	r2, [r7, #4]
 80031b0:	601a      	str	r2, [r3, #0]
  *pIndex &= 0x07;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	781b      	ldrb	r3, [r3, #0]
 80031b6:	f003 0307 	and.w	r3, r3, #7
 80031ba:	b2da      	uxtb	r2, r3
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	701a      	strb	r2, [r3, #0]

  *pOutVal = 0;
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	2200      	movs	r2, #0
 80031c4:	601a      	str	r2, [r3, #0]
  for(i = 0; i < 8; i ++) 
 80031c6:	2300      	movs	r3, #0
 80031c8:	75fb      	strb	r3, [r7, #23]
 80031ca:	e00c      	b.n	80031e6 <bmp280CalAvgValue+0x58>
  {
    *pOutVal += *(pAvgBuffer + i);
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	681a      	ldr	r2, [r3, #0]
 80031d0:	7dfb      	ldrb	r3, [r7, #23]
 80031d2:	009b      	lsls	r3, r3, #2
 80031d4:	68b9      	ldr	r1, [r7, #8]
 80031d6:	440b      	add	r3, r1
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	441a      	add	r2, r3
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	601a      	str	r2, [r3, #0]
  for(i = 0; i < 8; i ++) 
 80031e0:	7dfb      	ldrb	r3, [r7, #23]
 80031e2:	3301      	adds	r3, #1
 80031e4:	75fb      	strb	r3, [r7, #23]
 80031e6:	7dfb      	ldrb	r3, [r7, #23]
 80031e8:	2b07      	cmp	r3, #7
 80031ea:	d9ef      	bls.n	80031cc <bmp280CalAvgValue+0x3e>
  }
  *pOutVal >>= 3;
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	10da      	asrs	r2, r3, #3
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	601a      	str	r2, [r3, #0]
}
 80031f6:	bf00      	nop
 80031f8:	371c      	adds	r7, #28
 80031fa:	46bd      	mov	sp, r7
 80031fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003200:	4770      	bx	lr
 8003202:	0000      	movs	r0, r0
 8003204:	0000      	movs	r0, r0
	...

08003208 <bmp280CalculateAbsoluteAltitude>:

void bmp280CalculateAbsoluteAltitude(int32_t *pAltitude, int32_t PressureVal)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b082      	sub	sp, #8
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
 8003210:	6039      	str	r1, [r7, #0]
  *pAltitude = 4433000 * (1 - pow((PressureVal / (float)gs32Pressure0), 0.1903)); 
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	ee07 3a90 	vmov	s15, r3
 8003218:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800321c:	4b1c      	ldr	r3, [pc, #112]	@ (8003290 <bmp280CalculateAbsoluteAltitude+0x88>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	ee07 3a90 	vmov	s15, r3
 8003224:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003228:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800322c:	ee16 0a90 	vmov	r0, s13
 8003230:	f7fd f98a 	bl	8000548 <__aeabi_f2d>
 8003234:	4602      	mov	r2, r0
 8003236:	460b      	mov	r3, r1
 8003238:	ed9f 1b11 	vldr	d1, [pc, #68]	@ 8003280 <bmp280CalculateAbsoluteAltitude+0x78>
 800323c:	ec43 2b10 	vmov	d0, r2, r3
 8003240:	f007 fe5e 	bl	800af00 <pow>
 8003244:	ec53 2b10 	vmov	r2, r3, d0
 8003248:	f04f 0000 	mov.w	r0, #0
 800324c:	4911      	ldr	r1, [pc, #68]	@ (8003294 <bmp280CalculateAbsoluteAltitude+0x8c>)
 800324e:	f7fd f81b 	bl	8000288 <__aeabi_dsub>
 8003252:	4602      	mov	r2, r0
 8003254:	460b      	mov	r3, r1
 8003256:	4610      	mov	r0, r2
 8003258:	4619      	mov	r1, r3
 800325a:	a30b      	add	r3, pc, #44	@ (adr r3, 8003288 <bmp280CalculateAbsoluteAltitude+0x80>)
 800325c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003260:	f7fd f9ca 	bl	80005f8 <__aeabi_dmul>
 8003264:	4602      	mov	r2, r0
 8003266:	460b      	mov	r3, r1
 8003268:	4610      	mov	r0, r2
 800326a:	4619      	mov	r1, r3
 800326c:	f7fd fc74 	bl	8000b58 <__aeabi_d2iz>
 8003270:	4602      	mov	r2, r0
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	601a      	str	r2, [r3, #0]
}
 8003276:	bf00      	nop
 8003278:	3708      	adds	r7, #8
 800327a:	46bd      	mov	sp, r7
 800327c:	bd80      	pop	{r7, pc}
 800327e:	bf00      	nop
 8003280:	1a36e2eb 	.word	0x1a36e2eb
 8003284:	3fc85bc0 	.word	0x3fc85bc0
 8003288:	00000000 	.word	0x00000000
 800328c:	4150e91a 	.word	0x4150e91a
 8003290:	20000000 	.word	0x20000000
 8003294:	3ff00000 	.word	0x3ff00000

08003298 <pressSensorDataGet>:

void pressSensorDataGet(int32_t *ps32Temperature, int32_t *ps32Pressure, int32_t *ps32Altitude)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b088      	sub	sp, #32
 800329c:	af00      	add	r7, sp, #0
 800329e:	60f8      	str	r0, [r7, #12]
 80032a0:	60b9      	str	r1, [r7, #8]
 80032a2:	607a      	str	r2, [r7, #4]
  float CurPressure, CurTemperature;
  int32_t CurAltitude;
  static BMP280_AvgTypeDef BMP280_Filter[3];

  bmp280TandPGet(&CurTemperature, &CurPressure);
 80032a4:	f107 021c 	add.w	r2, r7, #28
 80032a8:	f107 0318 	add.w	r3, r7, #24
 80032ac:	4611      	mov	r1, r2
 80032ae:	4618      	mov	r0, r3
 80032b0:	f7ff ff0a 	bl	80030c8 <bmp280TandPGet>
  bmp280CalAvgValue(&BMP280_Filter[0].Index, BMP280_Filter[0].AvgBuffer, (int32_t)(CurPressure), ps32Pressure);
 80032b4:	edd7 7a07 	vldr	s15, [r7, #28]
 80032b8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80032bc:	68bb      	ldr	r3, [r7, #8]
 80032be:	ee17 2a90 	vmov	r2, s15
 80032c2:	4910      	ldr	r1, [pc, #64]	@ (8003304 <pressSensorDataGet+0x6c>)
 80032c4:	4810      	ldr	r0, [pc, #64]	@ (8003308 <pressSensorDataGet+0x70>)
 80032c6:	f7ff ff62 	bl	800318e <bmp280CalAvgValue>

  bmp280CalculateAbsoluteAltitude(&CurAltitude, (*ps32Pressure));
 80032ca:	68bb      	ldr	r3, [r7, #8]
 80032cc:	681a      	ldr	r2, [r3, #0]
 80032ce:	f107 0314 	add.w	r3, r7, #20
 80032d2:	4611      	mov	r1, r2
 80032d4:	4618      	mov	r0, r3
 80032d6:	f7ff ff97 	bl	8003208 <bmp280CalculateAbsoluteAltitude>
  bmp280CalAvgValue(&BMP280_Filter[1].Index, BMP280_Filter[1].AvgBuffer, CurAltitude, ps32Altitude);
 80032da:	697a      	ldr	r2, [r7, #20]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	490b      	ldr	r1, [pc, #44]	@ (800330c <pressSensorDataGet+0x74>)
 80032e0:	480b      	ldr	r0, [pc, #44]	@ (8003310 <pressSensorDataGet+0x78>)
 80032e2:	f7ff ff54 	bl	800318e <bmp280CalAvgValue>
  bmp280CalAvgValue(&BMP280_Filter[2].Index, BMP280_Filter[2].AvgBuffer, (int32_t)CurTemperature, ps32Temperature);
 80032e6:	edd7 7a06 	vldr	s15, [r7, #24]
 80032ea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	ee17 2a90 	vmov	r2, s15
 80032f4:	4907      	ldr	r1, [pc, #28]	@ (8003314 <pressSensorDataGet+0x7c>)
 80032f6:	4808      	ldr	r0, [pc, #32]	@ (8003318 <pressSensorDataGet+0x80>)
 80032f8:	f7ff ff49 	bl	800318e <bmp280CalAvgValue>
  return;
 80032fc:	bf00      	nop
}
 80032fe:	3720      	adds	r7, #32
 8003300:	46bd      	mov	sp, r7
 8003302:	bd80      	pop	{r7, pc}
 8003304:	20000388 	.word	0x20000388
 8003308:	20000384 	.word	0x20000384
 800330c:	200003ac 	.word	0x200003ac
 8003310:	200003a8 	.word	0x200003a8
 8003314:	200003d0 	.word	0x200003d0
 8003318:	200003cc 	.word	0x200003cc

0800331c <MPU6050_Init>:
    .Q_bias = 0.003f,
    .R_measure = 0.03f,
};

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b088      	sub	sp, #32
 8003320:	af04      	add	r7, sp, #16
 8003322:	6078      	str	r0, [r7, #4]
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_StatusTypeDef ret = HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 8003324:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003328:	9302      	str	r3, [sp, #8]
 800332a:	2301      	movs	r3, #1
 800332c:	9301      	str	r3, [sp, #4]
 800332e:	f107 030e 	add.w	r3, r7, #14
 8003332:	9300      	str	r3, [sp, #0]
 8003334:	2301      	movs	r3, #1
 8003336:	2275      	movs	r2, #117	@ 0x75
 8003338:	21d2      	movs	r1, #210	@ 0xd2
 800333a:	6878      	ldr	r0, [r7, #4]
 800333c:	f002 fab6 	bl	80058ac <HAL_I2C_Mem_Read>
 8003340:	4603      	mov	r3, r0
 8003342:	73fb      	strb	r3, [r7, #15]
    /*if (ret == HAL_OK) {
        printf("MPU6050 WHO_AM_I: 0x%02X\r\n", check);  // Should print 0x68
    } else {
        printf("I2C Read Error: %d\r\n", ret);
    }*/
    if (check == 104) // 0x68 will be returned by the sensor if everything goes well
 8003344:	7bbb      	ldrb	r3, [r7, #14]
 8003346:	2b68      	cmp	r3, #104	@ 0x68
 8003348:	d141      	bne.n	80033ce <MPU6050_Init+0xb2>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 800334a:	2300      	movs	r3, #0
 800334c:	737b      	strb	r3, [r7, #13]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 800334e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003352:	9302      	str	r3, [sp, #8]
 8003354:	2301      	movs	r3, #1
 8003356:	9301      	str	r3, [sp, #4]
 8003358:	f107 030d 	add.w	r3, r7, #13
 800335c:	9300      	str	r3, [sp, #0]
 800335e:	2301      	movs	r3, #1
 8003360:	226b      	movs	r2, #107	@ 0x6b
 8003362:	21d2      	movs	r1, #210	@ 0xd2
 8003364:	6878      	ldr	r0, [r7, #4]
 8003366:	f002 f9a7 	bl	80056b8 <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 800336a:	2307      	movs	r3, #7
 800336c:	737b      	strb	r3, [r7, #13]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 800336e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003372:	9302      	str	r3, [sp, #8]
 8003374:	2301      	movs	r3, #1
 8003376:	9301      	str	r3, [sp, #4]
 8003378:	f107 030d 	add.w	r3, r7, #13
 800337c:	9300      	str	r3, [sp, #0]
 800337e:	2301      	movs	r3, #1
 8003380:	2219      	movs	r2, #25
 8003382:	21d2      	movs	r1, #210	@ 0xd2
 8003384:	6878      	ldr	r0, [r7, #4]
 8003386:	f002 f997 	bl	80056b8 <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x00;
 800338a:	2300      	movs	r3, #0
 800338c:	737b      	strb	r3, [r7, #13]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 800338e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003392:	9302      	str	r3, [sp, #8]
 8003394:	2301      	movs	r3, #1
 8003396:	9301      	str	r3, [sp, #4]
 8003398:	f107 030d 	add.w	r3, r7, #13
 800339c:	9300      	str	r3, [sp, #0]
 800339e:	2301      	movs	r3, #1
 80033a0:	221c      	movs	r2, #28
 80033a2:	21d2      	movs	r1, #210	@ 0xd2
 80033a4:	6878      	ldr	r0, [r7, #4]
 80033a6:	f002 f987 	bl	80056b8 <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x00;
 80033aa:	2300      	movs	r3, #0
 80033ac:	737b      	strb	r3, [r7, #13]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 80033ae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80033b2:	9302      	str	r3, [sp, #8]
 80033b4:	2301      	movs	r3, #1
 80033b6:	9301      	str	r3, [sp, #4]
 80033b8:	f107 030d 	add.w	r3, r7, #13
 80033bc:	9300      	str	r3, [sp, #0]
 80033be:	2301      	movs	r3, #1
 80033c0:	221b      	movs	r2, #27
 80033c2:	21d2      	movs	r1, #210	@ 0xd2
 80033c4:	6878      	ldr	r0, [r7, #4]
 80033c6:	f002 f977 	bl	80056b8 <HAL_I2C_Mem_Write>
        return 0;
 80033ca:	2300      	movs	r3, #0
 80033cc:	e000      	b.n	80033d0 <MPU6050_Init+0xb4>
    }
    return 1;
 80033ce:	2301      	movs	r3, #1
}
 80033d0:	4618      	mov	r0, r3
 80033d2:	3710      	adds	r7, #16
 80033d4:	46bd      	mov	sp, r7
 80033d6:	bd80      	pop	{r7, pc}

080033d8 <MPU6050_Read_All>:
    temp = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
}

void MPU6050_Read_All(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct)
{
 80033d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80033dc:	b094      	sub	sp, #80	@ 0x50
 80033de:	af04      	add	r7, sp, #16
 80033e0:	6078      	str	r0, [r7, #4]
 80033e2:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[14];
    int16_t temp;

    // Read 14 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
 80033e4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80033e8:	9302      	str	r3, [sp, #8]
 80033ea:	230e      	movs	r3, #14
 80033ec:	9301      	str	r3, [sp, #4]
 80033ee:	f107 0308 	add.w	r3, r7, #8
 80033f2:	9300      	str	r3, [sp, #0]
 80033f4:	2301      	movs	r3, #1
 80033f6:	223b      	movs	r2, #59	@ 0x3b
 80033f8:	21d2      	movs	r1, #210	@ 0xd2
 80033fa:	6878      	ldr	r0, [r7, #4]
 80033fc:	f002 fa56 	bl	80058ac <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 8003400:	7a3b      	ldrb	r3, [r7, #8]
 8003402:	021b      	lsls	r3, r3, #8
 8003404:	b21a      	sxth	r2, r3
 8003406:	7a7b      	ldrb	r3, [r7, #9]
 8003408:	b21b      	sxth	r3, r3
 800340a:	4313      	orrs	r3, r2
 800340c:	b21a      	sxth	r2, r3
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 8003412:	7abb      	ldrb	r3, [r7, #10]
 8003414:	021b      	lsls	r3, r3, #8
 8003416:	b21a      	sxth	r2, r3
 8003418:	7afb      	ldrb	r3, [r7, #11]
 800341a:	b21b      	sxth	r3, r3
 800341c:	4313      	orrs	r3, r2
 800341e:	b21a      	sxth	r2, r3
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 8003424:	7b3b      	ldrb	r3, [r7, #12]
 8003426:	021b      	lsls	r3, r3, #8
 8003428:	b21a      	sxth	r2, r3
 800342a:	7b7b      	ldrb	r3, [r7, #13]
 800342c:	b21b      	sxth	r3, r3
 800342e:	4313      	orrs	r3, r2
 8003430:	b21a      	sxth	r2, r3
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	809a      	strh	r2, [r3, #4]
    temp = (int16_t)(Rec_Data[6] << 8 | Rec_Data[7]);
 8003436:	7bbb      	ldrb	r3, [r7, #14]
 8003438:	021b      	lsls	r3, r3, #8
 800343a:	b21a      	sxth	r2, r3
 800343c:	7bfb      	ldrb	r3, [r7, #15]
 800343e:	b21b      	sxth	r3, r3
 8003440:	4313      	orrs	r3, r2
 8003442:	86fb      	strh	r3, [r7, #54]	@ 0x36
    DataStruct->Gyro_X_RAW = (int16_t)(Rec_Data[8] << 8 | Rec_Data[9]);
 8003444:	7c3b      	ldrb	r3, [r7, #16]
 8003446:	021b      	lsls	r3, r3, #8
 8003448:	b21a      	sxth	r2, r3
 800344a:	7c7b      	ldrb	r3, [r7, #17]
 800344c:	b21b      	sxth	r3, r3
 800344e:	4313      	orrs	r3, r2
 8003450:	b21a      	sxth	r2, r3
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	841a      	strh	r2, [r3, #32]
    DataStruct->Gyro_Y_RAW = (int16_t)(Rec_Data[10] << 8 | Rec_Data[11]);
 8003456:	7cbb      	ldrb	r3, [r7, #18]
 8003458:	021b      	lsls	r3, r3, #8
 800345a:	b21a      	sxth	r2, r3
 800345c:	7cfb      	ldrb	r3, [r7, #19]
 800345e:	b21b      	sxth	r3, r3
 8003460:	4313      	orrs	r3, r2
 8003462:	b21a      	sxth	r2, r3
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	845a      	strh	r2, [r3, #34]	@ 0x22
    DataStruct->Gyro_Z_RAW = (int16_t)(Rec_Data[12] << 8 | Rec_Data[13]);
 8003468:	7d3b      	ldrb	r3, [r7, #20]
 800346a:	021b      	lsls	r3, r3, #8
 800346c:	b21a      	sxth	r2, r3
 800346e:	7d7b      	ldrb	r3, [r7, #21]
 8003470:	b21b      	sxth	r3, r3
 8003472:	4313      	orrs	r3, r2
 8003474:	b21a      	sxth	r2, r3
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	849a      	strh	r2, [r3, #36]	@ 0x24

    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003480:	4618      	mov	r0, r3
 8003482:	f7fd f84f 	bl	8000524 <__aeabi_i2d>
 8003486:	f04f 0200 	mov.w	r2, #0
 800348a:	4bbd      	ldr	r3, [pc, #756]	@ (8003780 <MPU6050_Read_All+0x3a8>)
 800348c:	f7fd f9de 	bl	800084c <__aeabi_ddiv>
 8003490:	4602      	mov	r2, r0
 8003492:	460b      	mov	r3, r1
 8003494:	6839      	ldr	r1, [r7, #0]
 8003496:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80034a0:	4618      	mov	r0, r3
 80034a2:	f7fd f83f 	bl	8000524 <__aeabi_i2d>
 80034a6:	f04f 0200 	mov.w	r2, #0
 80034aa:	4bb5      	ldr	r3, [pc, #724]	@ (8003780 <MPU6050_Read_All+0x3a8>)
 80034ac:	f7fd f9ce 	bl	800084c <__aeabi_ddiv>
 80034b0:	4602      	mov	r2, r0
 80034b2:	460b      	mov	r3, r1
 80034b4:	6839      	ldr	r1, [r7, #0]
 80034b6:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80034c0:	4618      	mov	r0, r3
 80034c2:	f7fd f82f 	bl	8000524 <__aeabi_i2d>
 80034c6:	a3a8      	add	r3, pc, #672	@ (adr r3, 8003768 <MPU6050_Read_All+0x390>)
 80034c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034cc:	f7fd f9be 	bl	800084c <__aeabi_ddiv>
 80034d0:	4602      	mov	r2, r0
 80034d2:	460b      	mov	r3, r1
 80034d4:	6839      	ldr	r1, [r7, #0]
 80034d6:	e9c1 2306 	strd	r2, r3, [r1, #24]
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
 80034da:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 80034de:	ee07 3a90 	vmov	s15, r3
 80034e2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80034e6:	eddf 6aa7 	vldr	s13, [pc, #668]	@ 8003784 <MPU6050_Read_All+0x3ac>
 80034ea:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80034ee:	ed9f 7aa6 	vldr	s14, [pc, #664]	@ 8003788 <MPU6050_Read_All+0x3b0>
 80034f2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8003502:	4618      	mov	r0, r3
 8003504:	f7fd f80e 	bl	8000524 <__aeabi_i2d>
 8003508:	a399      	add	r3, pc, #612	@ (adr r3, 8003770 <MPU6050_Read_All+0x398>)
 800350a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800350e:	f7fd f99d 	bl	800084c <__aeabi_ddiv>
 8003512:	4602      	mov	r2, r0
 8003514:	460b      	mov	r3, r1
 8003516:	6839      	ldr	r1, [r7, #0]
 8003518:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	@ 0x22
 8003522:	4618      	mov	r0, r3
 8003524:	f7fc fffe 	bl	8000524 <__aeabi_i2d>
 8003528:	a391      	add	r3, pc, #580	@ (adr r3, 8003770 <MPU6050_Read_All+0x398>)
 800352a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800352e:	f7fd f98d 	bl	800084c <__aeabi_ddiv>
 8003532:	4602      	mov	r2, r0
 8003534:	460b      	mov	r3, r1
 8003536:	6839      	ldr	r1, [r7, #0]
 8003538:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	@ 0x24
 8003542:	4618      	mov	r0, r3
 8003544:	f7fc ffee 	bl	8000524 <__aeabi_i2d>
 8003548:	a389      	add	r3, pc, #548	@ (adr r3, 8003770 <MPU6050_Read_All+0x398>)
 800354a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800354e:	f7fd f97d 	bl	800084c <__aeabi_ddiv>
 8003552:	4602      	mov	r2, r0
 8003554:	460b      	mov	r3, r1
 8003556:	6839      	ldr	r1, [r7, #0]
 8003558:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38

    // Kalman angle solve
    double dt = (double)(HAL_GetTick() - timer) / 1000;
 800355c:	f001 fb6c 	bl	8004c38 <HAL_GetTick>
 8003560:	4602      	mov	r2, r0
 8003562:	4b8a      	ldr	r3, [pc, #552]	@ (800378c <MPU6050_Read_All+0x3b4>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	1ad3      	subs	r3, r2, r3
 8003568:	4618      	mov	r0, r3
 800356a:	f7fc ffcb 	bl	8000504 <__aeabi_ui2d>
 800356e:	f04f 0200 	mov.w	r2, #0
 8003572:	4b87      	ldr	r3, [pc, #540]	@ (8003790 <MPU6050_Read_All+0x3b8>)
 8003574:	f7fd f96a 	bl	800084c <__aeabi_ddiv>
 8003578:	4602      	mov	r2, r0
 800357a:	460b      	mov	r3, r1
 800357c:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    timer = HAL_GetTick();
 8003580:	f001 fb5a 	bl	8004c38 <HAL_GetTick>
 8003584:	4603      	mov	r3, r0
 8003586:	4a81      	ldr	r2, [pc, #516]	@ (800378c <MPU6050_Read_All+0x3b4>)
 8003588:	6013      	str	r3, [r2, #0]
    double roll;
    double roll_sqrt = sqrt(
        DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003590:	461a      	mov	r2, r3
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003598:	fb03 f202 	mul.w	r2, r3, r2
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80035a2:	4619      	mov	r1, r3
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80035aa:	fb01 f303 	mul.w	r3, r1, r3
 80035ae:	4413      	add	r3, r2
    double roll_sqrt = sqrt(
 80035b0:	4618      	mov	r0, r3
 80035b2:	f7fc ffb7 	bl	8000524 <__aeabi_i2d>
 80035b6:	4602      	mov	r2, r0
 80035b8:	460b      	mov	r3, r1
 80035ba:	ec43 2b10 	vmov	d0, r2, r3
 80035be:	f007 fd0f 	bl	800afe0 <sqrt>
 80035c2:	ed87 0b08 	vstr	d0, [r7, #32]
    if (roll_sqrt != 0.0)
 80035c6:	f04f 0200 	mov.w	r2, #0
 80035ca:	f04f 0300 	mov.w	r3, #0
 80035ce:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80035d2:	f7fd fa79 	bl	8000ac8 <__aeabi_dcmpeq>
 80035d6:	4603      	mov	r3, r0
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d11f      	bne.n	800361c <MPU6050_Read_All+0x244>
    {
        roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80035e2:	4618      	mov	r0, r3
 80035e4:	f7fc ff9e 	bl	8000524 <__aeabi_i2d>
 80035e8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80035ec:	f7fd f92e 	bl	800084c <__aeabi_ddiv>
 80035f0:	4602      	mov	r2, r0
 80035f2:	460b      	mov	r3, r1
 80035f4:	ec43 2b17 	vmov	d7, r2, r3
 80035f8:	eeb0 0a47 	vmov.f32	s0, s14
 80035fc:	eef0 0a67 	vmov.f32	s1, s15
 8003600:	f007 fd1a 	bl	800b038 <atan>
 8003604:	ec51 0b10 	vmov	r0, r1, d0
 8003608:	a35b      	add	r3, pc, #364	@ (adr r3, 8003778 <MPU6050_Read_All+0x3a0>)
 800360a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800360e:	f7fc fff3 	bl	80005f8 <__aeabi_dmul>
 8003612:	4602      	mov	r2, r0
 8003614:	460b      	mov	r3, r1
 8003616:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
 800361a:	e005      	b.n	8003628 <MPU6050_Read_All+0x250>
    }
    else
    {
        roll = 0.0;
 800361c:	f04f 0200 	mov.w	r2, #0
 8003620:	f04f 0300 	mov.w	r3, #0
 8003624:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    }
    double pitch = atan2(-DataStruct->Accel_X_RAW, DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800362e:	425b      	negs	r3, r3
 8003630:	4618      	mov	r0, r3
 8003632:	f7fc ff77 	bl	8000524 <__aeabi_i2d>
 8003636:	4682      	mov	sl, r0
 8003638:	468b      	mov	fp, r1
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003640:	4618      	mov	r0, r3
 8003642:	f7fc ff6f 	bl	8000524 <__aeabi_i2d>
 8003646:	4602      	mov	r2, r0
 8003648:	460b      	mov	r3, r1
 800364a:	ec43 2b11 	vmov	d1, r2, r3
 800364e:	ec4b ab10 	vmov	d0, sl, fp
 8003652:	f007 fc53 	bl	800aefc <atan2>
 8003656:	ec51 0b10 	vmov	r0, r1, d0
 800365a:	a347      	add	r3, pc, #284	@ (adr r3, 8003778 <MPU6050_Read_All+0x3a0>)
 800365c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003660:	f7fc ffca 	bl	80005f8 <__aeabi_dmul>
 8003664:	4602      	mov	r2, r0
 8003666:	460b      	mov	r3, r1
 8003668:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if ((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90))
 800366c:	f04f 0200 	mov.w	r2, #0
 8003670:	4b48      	ldr	r3, [pc, #288]	@ (8003794 <MPU6050_Read_All+0x3bc>)
 8003672:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003676:	f7fd fa31 	bl	8000adc <__aeabi_dcmplt>
 800367a:	4603      	mov	r3, r0
 800367c:	2b00      	cmp	r3, #0
 800367e:	d00a      	beq.n	8003696 <MPU6050_Read_All+0x2be>
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 8003686:	f04f 0200 	mov.w	r2, #0
 800368a:	4b43      	ldr	r3, [pc, #268]	@ (8003798 <MPU6050_Read_All+0x3c0>)
 800368c:	f7fd fa44 	bl	8000b18 <__aeabi_dcmpgt>
 8003690:	4603      	mov	r3, r0
 8003692:	2b00      	cmp	r3, #0
 8003694:	d114      	bne.n	80036c0 <MPU6050_Read_All+0x2e8>
 8003696:	f04f 0200 	mov.w	r2, #0
 800369a:	4b3f      	ldr	r3, [pc, #252]	@ (8003798 <MPU6050_Read_All+0x3c0>)
 800369c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80036a0:	f7fd fa3a 	bl	8000b18 <__aeabi_dcmpgt>
 80036a4:	4603      	mov	r3, r0
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d015      	beq.n	80036d6 <MPU6050_Read_All+0x2fe>
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 80036b0:	f04f 0200 	mov.w	r2, #0
 80036b4:	4b37      	ldr	r3, [pc, #220]	@ (8003794 <MPU6050_Read_All+0x3bc>)
 80036b6:	f7fd fa11 	bl	8000adc <__aeabi_dcmplt>
 80036ba:	4603      	mov	r3, r0
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d00a      	beq.n	80036d6 <MPU6050_Read_All+0x2fe>
    {
        KalmanY.angle = pitch;
 80036c0:	4936      	ldr	r1, [pc, #216]	@ (800379c <MPU6050_Read_All+0x3c4>)
 80036c2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80036c6:	e9c1 2306 	strd	r2, r3, [r1, #24]
        DataStruct->KalmanAngleY = pitch;
 80036ca:	6839      	ldr	r1, [r7, #0]
 80036cc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80036d0:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
 80036d4:	e014      	b.n	8003700 <MPU6050_Read_All+0x328>
    }
    else
    {
        DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch, DataStruct->Gy, dt);
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	ed93 7b0c 	vldr	d7, [r3, #48]	@ 0x30
 80036dc:	ed97 2b0a 	vldr	d2, [r7, #40]	@ 0x28
 80036e0:	eeb0 1a47 	vmov.f32	s2, s14
 80036e4:	eef0 1a67 	vmov.f32	s3, s15
 80036e8:	ed97 0b06 	vldr	d0, [r7, #24]
 80036ec:	482b      	ldr	r0, [pc, #172]	@ (800379c <MPU6050_Read_All+0x3c4>)
 80036ee:	f000 f859 	bl	80037a4 <Kalman_getAngle>
 80036f2:	eeb0 7a40 	vmov.f32	s14, s0
 80036f6:	eef0 7a60 	vmov.f32	s15, s1
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	ed83 7b14 	vstr	d7, [r3, #80]	@ 0x50
    }
    if (fabs(DataStruct->KalmanAngleY) > 90)
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 8003706:	4690      	mov	r8, r2
 8003708:	f023 4900 	bic.w	r9, r3, #2147483648	@ 0x80000000
 800370c:	f04f 0200 	mov.w	r2, #0
 8003710:	4b21      	ldr	r3, [pc, #132]	@ (8003798 <MPU6050_Read_All+0x3c0>)
 8003712:	4640      	mov	r0, r8
 8003714:	4649      	mov	r1, r9
 8003716:	f7fd f9ff 	bl	8000b18 <__aeabi_dcmpgt>
 800371a:	4603      	mov	r3, r0
 800371c:	2b00      	cmp	r3, #0
 800371e:	d008      	beq.n	8003732 <MPU6050_Read_All+0x35a>
        DataStruct->Gx = -DataStruct->Gx;
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8003726:	4614      	mov	r4, r2
 8003728:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	e9c3 450a 	strd	r4, r5, [r3, #40]	@ 0x28
    DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gx, dt);
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	ed93 7b0a 	vldr	d7, [r3, #40]	@ 0x28
 8003738:	ed97 2b0a 	vldr	d2, [r7, #40]	@ 0x28
 800373c:	eeb0 1a47 	vmov.f32	s2, s14
 8003740:	eef0 1a67 	vmov.f32	s3, s15
 8003744:	ed97 0b0e 	vldr	d0, [r7, #56]	@ 0x38
 8003748:	4815      	ldr	r0, [pc, #84]	@ (80037a0 <MPU6050_Read_All+0x3c8>)
 800374a:	f000 f82b 	bl	80037a4 <Kalman_getAngle>
 800374e:	eeb0 7a40 	vmov.f32	s14, s0
 8003752:	eef0 7a60 	vmov.f32	s15, s1
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	ed83 7b12 	vstr	d7, [r3, #72]	@ 0x48
}
 800375c:	bf00      	nop
 800375e:	3740      	adds	r7, #64	@ 0x40
 8003760:	46bd      	mov	sp, r7
 8003762:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003766:	bf00      	nop
 8003768:	00000000 	.word	0x00000000
 800376c:	40cc2900 	.word	0x40cc2900
 8003770:	00000000 	.word	0x00000000
 8003774:	40606000 	.word	0x40606000
 8003778:	1a63c1f8 	.word	0x1a63c1f8
 800377c:	404ca5dc 	.word	0x404ca5dc
 8003780:	40d00000 	.word	0x40d00000
 8003784:	43aa0000 	.word	0x43aa0000
 8003788:	42121eb8 	.word	0x42121eb8
 800378c:	200003f0 	.word	0x200003f0
 8003790:	408f4000 	.word	0x408f4000
 8003794:	c0568000 	.word	0xc0568000
 8003798:	40568000 	.word	0x40568000
 800379c:	20000050 	.word	0x20000050
 80037a0:	20000008 	.word	0x20000008

080037a4 <Kalman_getAngle>:

double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt)
{
 80037a4:	b5b0      	push	{r4, r5, r7, lr}
 80037a6:	b096      	sub	sp, #88	@ 0x58
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	61f8      	str	r0, [r7, #28]
 80037ac:	ed87 0b04 	vstr	d0, [r7, #16]
 80037b0:	ed87 1b02 	vstr	d1, [r7, #8]
 80037b4:	ed87 2b00 	vstr	d2, [r7]
    double rate = newRate - Kalman->bias;
 80037b8:	69fb      	ldr	r3, [r7, #28]
 80037ba:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80037be:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80037c2:	f7fc fd61 	bl	8000288 <__aeabi_dsub>
 80037c6:	4602      	mov	r2, r0
 80037c8:	460b      	mov	r3, r1
 80037ca:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    Kalman->angle += dt * rate;
 80037ce:	69fb      	ldr	r3, [r7, #28]
 80037d0:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 80037d4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80037d8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80037dc:	f7fc ff0c 	bl	80005f8 <__aeabi_dmul>
 80037e0:	4602      	mov	r2, r0
 80037e2:	460b      	mov	r3, r1
 80037e4:	4620      	mov	r0, r4
 80037e6:	4629      	mov	r1, r5
 80037e8:	f7fc fd50 	bl	800028c <__adddf3>
 80037ec:	4602      	mov	r2, r0
 80037ee:	460b      	mov	r3, r1
 80037f0:	69f9      	ldr	r1, [r7, #28]
 80037f2:	e9c1 2306 	strd	r2, r3, [r1, #24]

    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 80037f6:	69fb      	ldr	r3, [r7, #28]
 80037f8:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	@ 0x28
 80037fc:	69fb      	ldr	r3, [r7, #28]
 80037fe:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 8003802:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003806:	f7fc fef7 	bl	80005f8 <__aeabi_dmul>
 800380a:	4602      	mov	r2, r0
 800380c:	460b      	mov	r3, r1
 800380e:	4610      	mov	r0, r2
 8003810:	4619      	mov	r1, r3
 8003812:	69fb      	ldr	r3, [r7, #28]
 8003814:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8003818:	f7fc fd36 	bl	8000288 <__aeabi_dsub>
 800381c:	4602      	mov	r2, r0
 800381e:	460b      	mov	r3, r1
 8003820:	4610      	mov	r0, r2
 8003822:	4619      	mov	r1, r3
 8003824:	69fb      	ldr	r3, [r7, #28]
 8003826:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800382a:	f7fc fd2d 	bl	8000288 <__aeabi_dsub>
 800382e:	4602      	mov	r2, r0
 8003830:	460b      	mov	r3, r1
 8003832:	4610      	mov	r0, r2
 8003834:	4619      	mov	r1, r3
 8003836:	69fb      	ldr	r3, [r7, #28]
 8003838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800383c:	f7fc fd26 	bl	800028c <__adddf3>
 8003840:	4602      	mov	r2, r0
 8003842:	460b      	mov	r3, r1
 8003844:	4610      	mov	r0, r2
 8003846:	4619      	mov	r1, r3
 8003848:	e9d7 2300 	ldrd	r2, r3, [r7]
 800384c:	f7fc fed4 	bl	80005f8 <__aeabi_dmul>
 8003850:	4602      	mov	r2, r0
 8003852:	460b      	mov	r3, r1
 8003854:	4620      	mov	r0, r4
 8003856:	4629      	mov	r1, r5
 8003858:	f7fc fd18 	bl	800028c <__adddf3>
 800385c:	4602      	mov	r2, r0
 800385e:	460b      	mov	r3, r1
 8003860:	69f9      	ldr	r1, [r7, #28]
 8003862:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 8003866:	69fb      	ldr	r3, [r7, #28]
 8003868:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	@ 0x30
 800386c:	69fb      	ldr	r3, [r7, #28]
 800386e:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 8003872:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003876:	f7fc febf 	bl	80005f8 <__aeabi_dmul>
 800387a:	4602      	mov	r2, r0
 800387c:	460b      	mov	r3, r1
 800387e:	4620      	mov	r0, r4
 8003880:	4629      	mov	r1, r5
 8003882:	f7fc fd01 	bl	8000288 <__aeabi_dsub>
 8003886:	4602      	mov	r2, r0
 8003888:	460b      	mov	r3, r1
 800388a:	69f9      	ldr	r1, [r7, #28]
 800388c:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 8003890:	69fb      	ldr	r3, [r7, #28]
 8003892:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	@ 0x38
 8003896:	69fb      	ldr	r3, [r7, #28]
 8003898:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 800389c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80038a0:	f7fc feaa 	bl	80005f8 <__aeabi_dmul>
 80038a4:	4602      	mov	r2, r0
 80038a6:	460b      	mov	r3, r1
 80038a8:	4620      	mov	r0, r4
 80038aa:	4629      	mov	r1, r5
 80038ac:	f7fc fcec 	bl	8000288 <__aeabi_dsub>
 80038b0:	4602      	mov	r2, r0
 80038b2:	460b      	mov	r3, r1
 80038b4:	69f9      	ldr	r1, [r7, #28]
 80038b6:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 80038ba:	69fb      	ldr	r3, [r7, #28]
 80038bc:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	@ 0x40
 80038c0:	69fb      	ldr	r3, [r7, #28]
 80038c2:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80038c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80038ca:	f7fc fe95 	bl	80005f8 <__aeabi_dmul>
 80038ce:	4602      	mov	r2, r0
 80038d0:	460b      	mov	r3, r1
 80038d2:	4620      	mov	r0, r4
 80038d4:	4629      	mov	r1, r5
 80038d6:	f7fc fcd9 	bl	800028c <__adddf3>
 80038da:	4602      	mov	r2, r0
 80038dc:	460b      	mov	r3, r1
 80038de:	69f9      	ldr	r1, [r7, #28]
 80038e0:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40

    double S = Kalman->P[0][0] + Kalman->R_measure;
 80038e4:	69fb      	ldr	r3, [r7, #28]
 80038e6:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 80038ea:	69fb      	ldr	r3, [r7, #28]
 80038ec:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80038f0:	f7fc fccc 	bl	800028c <__adddf3>
 80038f4:	4602      	mov	r2, r0
 80038f6:	460b      	mov	r3, r1
 80038f8:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 80038fc:	69fb      	ldr	r3, [r7, #28]
 80038fe:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8003902:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003906:	f7fc ffa1 	bl	800084c <__aeabi_ddiv>
 800390a:	4602      	mov	r2, r0
 800390c:	460b      	mov	r3, r1
 800390e:	e9c7 2308 	strd	r2, r3, [r7, #32]
    K[1] = Kalman->P[1][0] / S;
 8003912:	69fb      	ldr	r3, [r7, #28]
 8003914:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 8003918:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800391c:	f7fc ff96 	bl	800084c <__aeabi_ddiv>
 8003920:	4602      	mov	r2, r0
 8003922:	460b      	mov	r3, r1
 8003924:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28

    double y = newAngle - Kalman->angle;
 8003928:	69fb      	ldr	r3, [r7, #28]
 800392a:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800392e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003932:	f7fc fca9 	bl	8000288 <__aeabi_dsub>
 8003936:	4602      	mov	r2, r0
 8003938:	460b      	mov	r3, r1
 800393a:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
    Kalman->angle += K[0] * y;
 800393e:	69fb      	ldr	r3, [r7, #28]
 8003940:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8003944:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003948:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800394c:	f7fc fe54 	bl	80005f8 <__aeabi_dmul>
 8003950:	4602      	mov	r2, r0
 8003952:	460b      	mov	r3, r1
 8003954:	4620      	mov	r0, r4
 8003956:	4629      	mov	r1, r5
 8003958:	f7fc fc98 	bl	800028c <__adddf3>
 800395c:	4602      	mov	r2, r0
 800395e:	460b      	mov	r3, r1
 8003960:	69f9      	ldr	r1, [r7, #28]
 8003962:	e9c1 2306 	strd	r2, r3, [r1, #24]
    Kalman->bias += K[1] * y;
 8003966:	69fb      	ldr	r3, [r7, #28]
 8003968:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 800396c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003970:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003974:	f7fc fe40 	bl	80005f8 <__aeabi_dmul>
 8003978:	4602      	mov	r2, r0
 800397a:	460b      	mov	r3, r1
 800397c:	4620      	mov	r0, r4
 800397e:	4629      	mov	r1, r5
 8003980:	f7fc fc84 	bl	800028c <__adddf3>
 8003984:	4602      	mov	r2, r0
 8003986:	460b      	mov	r3, r1
 8003988:	69f9      	ldr	r1, [r7, #28]
 800398a:	e9c1 2308 	strd	r2, r3, [r1, #32]

    double P00_temp = Kalman->P[0][0];
 800398e:	69fb      	ldr	r3, [r7, #28]
 8003990:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8003994:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    double P01_temp = Kalman->P[0][1];
 8003998:	69fb      	ldr	r3, [r7, #28]
 800399a:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 800399e:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    Kalman->P[0][0] -= K[0] * P00_temp;
 80039a2:	69fb      	ldr	r3, [r7, #28]
 80039a4:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	@ 0x28
 80039a8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80039ac:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80039b0:	f7fc fe22 	bl	80005f8 <__aeabi_dmul>
 80039b4:	4602      	mov	r2, r0
 80039b6:	460b      	mov	r3, r1
 80039b8:	4620      	mov	r0, r4
 80039ba:	4629      	mov	r1, r5
 80039bc:	f7fc fc64 	bl	8000288 <__aeabi_dsub>
 80039c0:	4602      	mov	r2, r0
 80039c2:	460b      	mov	r3, r1
 80039c4:	69f9      	ldr	r1, [r7, #28]
 80039c6:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    Kalman->P[0][1] -= K[0] * P01_temp;
 80039ca:	69fb      	ldr	r3, [r7, #28]
 80039cc:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	@ 0x30
 80039d0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80039d4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80039d8:	f7fc fe0e 	bl	80005f8 <__aeabi_dmul>
 80039dc:	4602      	mov	r2, r0
 80039de:	460b      	mov	r3, r1
 80039e0:	4620      	mov	r0, r4
 80039e2:	4629      	mov	r1, r5
 80039e4:	f7fc fc50 	bl	8000288 <__aeabi_dsub>
 80039e8:	4602      	mov	r2, r0
 80039ea:	460b      	mov	r3, r1
 80039ec:	69f9      	ldr	r1, [r7, #28]
 80039ee:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    Kalman->P[1][0] -= K[1] * P00_temp;
 80039f2:	69fb      	ldr	r3, [r7, #28]
 80039f4:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	@ 0x38
 80039f8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80039fc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003a00:	f7fc fdfa 	bl	80005f8 <__aeabi_dmul>
 8003a04:	4602      	mov	r2, r0
 8003a06:	460b      	mov	r3, r1
 8003a08:	4620      	mov	r0, r4
 8003a0a:	4629      	mov	r1, r5
 8003a0c:	f7fc fc3c 	bl	8000288 <__aeabi_dsub>
 8003a10:	4602      	mov	r2, r0
 8003a12:	460b      	mov	r3, r1
 8003a14:	69f9      	ldr	r1, [r7, #28]
 8003a16:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
    Kalman->P[1][1] -= K[1] * P01_temp;
 8003a1a:	69fb      	ldr	r3, [r7, #28]
 8003a1c:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	@ 0x40
 8003a20:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003a24:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8003a28:	f7fc fde6 	bl	80005f8 <__aeabi_dmul>
 8003a2c:	4602      	mov	r2, r0
 8003a2e:	460b      	mov	r3, r1
 8003a30:	4620      	mov	r0, r4
 8003a32:	4629      	mov	r1, r5
 8003a34:	f7fc fc28 	bl	8000288 <__aeabi_dsub>
 8003a38:	4602      	mov	r2, r0
 8003a3a:	460b      	mov	r3, r1
 8003a3c:	69f9      	ldr	r1, [r7, #28]
 8003a3e:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40

    return Kalman->angle;
 8003a42:	69fb      	ldr	r3, [r7, #28]
 8003a44:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8003a48:	ec43 2b17 	vmov	d7, r2, r3
};
 8003a4c:	eeb0 0a47 	vmov.f32	s0, s14
 8003a50:	eef0 0a67 	vmov.f32	s1, s15
 8003a54:	3758      	adds	r7, #88	@ 0x58
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bdb0      	pop	{r4, r5, r7, pc}

08003a5a <width>:
SSD1306_Geometry display_geometry = SSD1306_GEOMETRY;

//
//  Get a width and height screen size
//
static const uint16_t width(void)  { return SSD1306_WIDTH; };
 8003a5a:	b480      	push	{r7}
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	2380      	movs	r3, #128	@ 0x80
 8003a60:	4618      	mov	r0, r3
 8003a62:	46bd      	mov	sp, r7
 8003a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a68:	4770      	bx	lr

08003a6a <height>:
static const uint16_t height(void)  { return SSD1306_HEIGHT; };
 8003a6a:	b480      	push	{r7}
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	2320      	movs	r3, #32
 8003a70:	4618      	mov	r0, r3
 8003a72:	46bd      	mov	sp, r7
 8003a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a78:	4770      	bx	lr

08003a7a <ssd1306_GetWidth>:

uint16_t ssd1306_GetWidth(void)
{
 8003a7a:	b480      	push	{r7}
 8003a7c:	af00      	add	r7, sp, #0
  return SSD1306_WIDTH;
 8003a7e:	2380      	movs	r3, #128	@ 0x80
}
 8003a80:	4618      	mov	r0, r3
 8003a82:	46bd      	mov	sp, r7
 8003a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a88:	4770      	bx	lr

08003a8a <ssd1306_GetHeight>:

uint16_t ssd1306_GetHeight(void)
{
 8003a8a:	b480      	push	{r7}
 8003a8c:	af00      	add	r7, sp, #0
  return SSD1306_HEIGHT;
 8003a8e:	2320      	movs	r3, #32
}
 8003a90:	4618      	mov	r0, r3
 8003a92:	46bd      	mov	sp, r7
 8003a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a98:	4770      	bx	lr
	...

08003a9c <ssd1306_Init>:
  SSD1306.Color = color;
}

//  Initialize the oled screen
uint8_t ssd1306_Init(void)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	af00      	add	r7, sp, #0
  /* Check if LCD connected to I2C */
  if (HAL_I2C_IsDeviceReady(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 5, 1000) != HAL_OK)
 8003aa0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003aa4:	2205      	movs	r2, #5
 8003aa6:	2178      	movs	r1, #120	@ 0x78
 8003aa8:	4847      	ldr	r0, [pc, #284]	@ (8003bc8 <ssd1306_Init+0x12c>)
 8003aaa:	f002 f931 	bl	8005d10 <HAL_I2C_IsDeviceReady>
 8003aae:	4603      	mov	r3, r0
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d004      	beq.n	8003abe <ssd1306_Init+0x22>
  {
    SSD1306.Initialized = 0;
 8003ab4:	4b45      	ldr	r3, [pc, #276]	@ (8003bcc <ssd1306_Init+0x130>)
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	719a      	strb	r2, [r3, #6]
    /* Return false */
    return 0;
 8003aba:	2300      	movs	r3, #0
 8003abc:	e082      	b.n	8003bc4 <ssd1306_Init+0x128>
  }

  // Wait for the screen to boot
  HAL_Delay(100);
 8003abe:	2064      	movs	r0, #100	@ 0x64
 8003ac0:	f001 f8c6 	bl	8004c50 <HAL_Delay>

  /* Init LCD */
  ssd1306_WriteCommand(DISPLAYOFF);
 8003ac4:	20ae      	movs	r0, #174	@ 0xae
 8003ac6:	f000 f9d5 	bl	8003e74 <ssd1306_WriteCommand>
  ssd1306_WriteCommand(SETDISPLAYCLOCKDIV);
 8003aca:	20d5      	movs	r0, #213	@ 0xd5
 8003acc:	f000 f9d2 	bl	8003e74 <ssd1306_WriteCommand>
  ssd1306_WriteCommand(0xF0); // Increase speed of the display max ~96Hz
 8003ad0:	20f0      	movs	r0, #240	@ 0xf0
 8003ad2:	f000 f9cf 	bl	8003e74 <ssd1306_WriteCommand>
  ssd1306_WriteCommand(SETMULTIPLEX);
 8003ad6:	20a8      	movs	r0, #168	@ 0xa8
 8003ad8:	f000 f9cc 	bl	8003e74 <ssd1306_WriteCommand>
  ssd1306_WriteCommand(height() - 1);
 8003adc:	f7ff ffc5 	bl	8003a6a <height>
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	b2db      	uxtb	r3, r3
 8003ae4:	3b01      	subs	r3, #1
 8003ae6:	b2db      	uxtb	r3, r3
 8003ae8:	4618      	mov	r0, r3
 8003aea:	f000 f9c3 	bl	8003e74 <ssd1306_WriteCommand>
  ssd1306_WriteCommand(SETDISPLAYOFFSET);
 8003aee:	20d3      	movs	r0, #211	@ 0xd3
 8003af0:	f000 f9c0 	bl	8003e74 <ssd1306_WriteCommand>
  ssd1306_WriteCommand(0x00);
 8003af4:	2000      	movs	r0, #0
 8003af6:	f000 f9bd 	bl	8003e74 <ssd1306_WriteCommand>
  ssd1306_WriteCommand(SETSTARTLINE);
 8003afa:	2040      	movs	r0, #64	@ 0x40
 8003afc:	f000 f9ba 	bl	8003e74 <ssd1306_WriteCommand>
  ssd1306_WriteCommand(CHARGEPUMP);
 8003b00:	208d      	movs	r0, #141	@ 0x8d
 8003b02:	f000 f9b7 	bl	8003e74 <ssd1306_WriteCommand>
  ssd1306_WriteCommand(0x14);
 8003b06:	2014      	movs	r0, #20
 8003b08:	f000 f9b4 	bl	8003e74 <ssd1306_WriteCommand>
  ssd1306_WriteCommand(MEMORYMODE);
 8003b0c:	2020      	movs	r0, #32
 8003b0e:	f000 f9b1 	bl	8003e74 <ssd1306_WriteCommand>
  ssd1306_WriteCommand(0x00);
 8003b12:	2000      	movs	r0, #0
 8003b14:	f000 f9ae 	bl	8003e74 <ssd1306_WriteCommand>
  ssd1306_WriteCommand(SEGREMAP);
 8003b18:	20a0      	movs	r0, #160	@ 0xa0
 8003b1a:	f000 f9ab 	bl	8003e74 <ssd1306_WriteCommand>
  ssd1306_WriteCommand(COMSCANINC);
 8003b1e:	20c0      	movs	r0, #192	@ 0xc0
 8003b20:	f000 f9a8 	bl	8003e74 <ssd1306_WriteCommand>
  ssd1306_WriteCommand(SETCOMPINS);
 8003b24:	20da      	movs	r0, #218	@ 0xda
 8003b26:	f000 f9a5 	bl	8003e74 <ssd1306_WriteCommand>

  if (display_geometry == GEOMETRY_128_64)
 8003b2a:	4b29      	ldr	r3, [pc, #164]	@ (8003bd0 <ssd1306_Init+0x134>)
 8003b2c:	781b      	ldrb	r3, [r3, #0]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d103      	bne.n	8003b3a <ssd1306_Init+0x9e>
  {
    ssd1306_WriteCommand(0x12);
 8003b32:	2012      	movs	r0, #18
 8003b34:	f000 f99e 	bl	8003e74 <ssd1306_WriteCommand>
 8003b38:	e006      	b.n	8003b48 <ssd1306_Init+0xac>
  }
  else if (display_geometry == GEOMETRY_128_32)
 8003b3a:	4b25      	ldr	r3, [pc, #148]	@ (8003bd0 <ssd1306_Init+0x134>)
 8003b3c:	781b      	ldrb	r3, [r3, #0]
 8003b3e:	2b01      	cmp	r3, #1
 8003b40:	d102      	bne.n	8003b48 <ssd1306_Init+0xac>
  {
    ssd1306_WriteCommand(0x02);
 8003b42:	2002      	movs	r0, #2
 8003b44:	f000 f996 	bl	8003e74 <ssd1306_WriteCommand>
  }

  ssd1306_WriteCommand(SETCONTRAST);
 8003b48:	2081      	movs	r0, #129	@ 0x81
 8003b4a:	f000 f993 	bl	8003e74 <ssd1306_WriteCommand>

  if (display_geometry == GEOMETRY_128_64)
 8003b4e:	4b20      	ldr	r3, [pc, #128]	@ (8003bd0 <ssd1306_Init+0x134>)
 8003b50:	781b      	ldrb	r3, [r3, #0]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d103      	bne.n	8003b5e <ssd1306_Init+0xc2>
  {
    ssd1306_WriteCommand(0xCF);
 8003b56:	20cf      	movs	r0, #207	@ 0xcf
 8003b58:	f000 f98c 	bl	8003e74 <ssd1306_WriteCommand>
 8003b5c:	e006      	b.n	8003b6c <ssd1306_Init+0xd0>
  }
  else if (display_geometry == GEOMETRY_128_32)
 8003b5e:	4b1c      	ldr	r3, [pc, #112]	@ (8003bd0 <ssd1306_Init+0x134>)
 8003b60:	781b      	ldrb	r3, [r3, #0]
 8003b62:	2b01      	cmp	r3, #1
 8003b64:	d102      	bne.n	8003b6c <ssd1306_Init+0xd0>
  {
    ssd1306_WriteCommand(0x8F);
 8003b66:	208f      	movs	r0, #143	@ 0x8f
 8003b68:	f000 f984 	bl	8003e74 <ssd1306_WriteCommand>
  }

  ssd1306_WriteCommand(SETPRECHARGE);
 8003b6c:	20d9      	movs	r0, #217	@ 0xd9
 8003b6e:	f000 f981 	bl	8003e74 <ssd1306_WriteCommand>
  ssd1306_WriteCommand(0xF1);
 8003b72:	20f1      	movs	r0, #241	@ 0xf1
 8003b74:	f000 f97e 	bl	8003e74 <ssd1306_WriteCommand>
  ssd1306_WriteCommand(SETVCOMDETECT); //0xDB, (additionally needed to lower the contrast)
 8003b78:	20db      	movs	r0, #219	@ 0xdb
 8003b7a:	f000 f97b 	bl	8003e74 <ssd1306_WriteCommand>
  ssd1306_WriteCommand(0x40);          //0x40 default, to lower the contrast, put 0
 8003b7e:	2040      	movs	r0, #64	@ 0x40
 8003b80:	f000 f978 	bl	8003e74 <ssd1306_WriteCommand>
  ssd1306_WriteCommand(DISPLAYALLON_RESUME);
 8003b84:	20a4      	movs	r0, #164	@ 0xa4
 8003b86:	f000 f975 	bl	8003e74 <ssd1306_WriteCommand>
  ssd1306_WriteCommand(NORMALDISPLAY);
 8003b8a:	20a6      	movs	r0, #166	@ 0xa6
 8003b8c:	f000 f972 	bl	8003e74 <ssd1306_WriteCommand>
  ssd1306_WriteCommand(0x2e);            // stop scroll
 8003b90:	202e      	movs	r0, #46	@ 0x2e
 8003b92:	f000 f96f 	bl	8003e74 <ssd1306_WriteCommand>
  ssd1306_WriteCommand(DISPLAYON);
 8003b96:	20af      	movs	r0, #175	@ 0xaf
 8003b98:	f000 f96c 	bl	8003e74 <ssd1306_WriteCommand>

  // Set default values for screen object
  SSD1306.CurrentX = 0;
 8003b9c:	4b0b      	ldr	r3, [pc, #44]	@ (8003bcc <ssd1306_Init+0x130>)
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	801a      	strh	r2, [r3, #0]
  SSD1306.CurrentY = 0;
 8003ba2:	4b0a      	ldr	r3, [pc, #40]	@ (8003bcc <ssd1306_Init+0x130>)
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	805a      	strh	r2, [r3, #2]
  SSD1306.Color = Black;
 8003ba8:	4b08      	ldr	r3, [pc, #32]	@ (8003bcc <ssd1306_Init+0x130>)
 8003baa:	2200      	movs	r2, #0
 8003bac:	715a      	strb	r2, [r3, #5]
  SSD1306.Inverted = 1;
 8003bae:	4b07      	ldr	r3, [pc, #28]	@ (8003bcc <ssd1306_Init+0x130>)
 8003bb0:	2201      	movs	r2, #1
 8003bb2:	711a      	strb	r2, [r3, #4]
  // Clear screen
  ssd1306_Clear();
 8003bb4:	f000 f952 	bl	8003e5c <ssd1306_Clear>

  // Continuous Update on
  ssd1306_ContUpdateEnable();

  // Flush buffer to screen
  ssd1306_UpdateScreen();
 8003bb8:	f000 f98c 	bl	8003ed4 <ssd1306_UpdateScreen>

  SSD1306.Initialized = 1;
 8003bbc:	4b03      	ldr	r3, [pc, #12]	@ (8003bcc <ssd1306_Init+0x130>)
 8003bbe:	2201      	movs	r2, #1
 8003bc0:	719a      	strb	r2, [r3, #6]


  /* Return OK */
  return 1;
 8003bc2:	2301      	movs	r3, #1
}
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	bd80      	pop	{r7, pc}
 8003bc8:	200005fc 	.word	0x200005fc
 8003bcc:	200003f4 	.word	0x200003f4
 8003bd0:	200000a0 	.word	0x200000a0

08003bd4 <ssd1306_DrawPixel>:
//  X => X Coordinate
//  Y => Y Coordinate
//  color => Pixel color
//
void ssd1306_DrawPixel(uint8_t x, uint8_t y)
{
 8003bd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003bd6:	b085      	sub	sp, #20
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	4603      	mov	r3, r0
 8003bdc:	460a      	mov	r2, r1
 8003bde:	71fb      	strb	r3, [r7, #7]
 8003be0:	4613      	mov	r3, r2
 8003be2:	71bb      	strb	r3, [r7, #6]
  SSD1306_COLOR color = SSD1306.Color;
 8003be4:	4b34      	ldr	r3, [pc, #208]	@ (8003cb8 <ssd1306_DrawPixel+0xe4>)
 8003be6:	795b      	ldrb	r3, [r3, #5]
 8003be8:	73fb      	strb	r3, [r7, #15]

  if (x >= ssd1306_GetWidth() || y >= ssd1306_GetHeight())
 8003bea:	79fb      	ldrb	r3, [r7, #7]
 8003bec:	b29c      	uxth	r4, r3
 8003bee:	f7ff ff44 	bl	8003a7a <ssd1306_GetWidth>
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	429c      	cmp	r4, r3
 8003bf6:	d25a      	bcs.n	8003cae <ssd1306_DrawPixel+0xda>
 8003bf8:	79bb      	ldrb	r3, [r7, #6]
 8003bfa:	b29c      	uxth	r4, r3
 8003bfc:	f7ff ff45 	bl	8003a8a <ssd1306_GetHeight>
 8003c00:	4603      	mov	r3, r0
 8003c02:	429c      	cmp	r4, r3
 8003c04:	d253      	bcs.n	8003cae <ssd1306_DrawPixel+0xda>
    // Don't write outside the buffer
    return;
  }

  // Check if pixel should be inverted
  if (SSD1306.Inverted)
 8003c06:	4b2c      	ldr	r3, [pc, #176]	@ (8003cb8 <ssd1306_DrawPixel+0xe4>)
 8003c08:	791b      	ldrb	r3, [r3, #4]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d006      	beq.n	8003c1c <ssd1306_DrawPixel+0x48>
  {
    color = (SSD1306_COLOR) !color;
 8003c0e:	7bfb      	ldrb	r3, [r7, #15]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	bf0c      	ite	eq
 8003c14:	2301      	moveq	r3, #1
 8003c16:	2300      	movne	r3, #0
 8003c18:	b2db      	uxtb	r3, r3
 8003c1a:	73fb      	strb	r3, [r7, #15]
  }

  // Draw in the right color
  if (color == White)
 8003c1c:	7bfb      	ldrb	r3, [r7, #15]
 8003c1e:	2b01      	cmp	r3, #1
 8003c20:	d121      	bne.n	8003c66 <ssd1306_DrawPixel+0x92>
  {
    SSD1306_Buffer[x + (y / 8) * width()] |= 1 << (y % 8);
 8003c22:	79fc      	ldrb	r4, [r7, #7]
 8003c24:	79bb      	ldrb	r3, [r7, #6]
 8003c26:	08db      	lsrs	r3, r3, #3
 8003c28:	b2dd      	uxtb	r5, r3
 8003c2a:	462e      	mov	r6, r5
 8003c2c:	f7ff ff15 	bl	8003a5a <width>
 8003c30:	4603      	mov	r3, r0
 8003c32:	4618      	mov	r0, r3
 8003c34:	4603      	mov	r3, r0
 8003c36:	fb06 f303 	mul.w	r3, r6, r3
 8003c3a:	4423      	add	r3, r4
 8003c3c:	4a1f      	ldr	r2, [pc, #124]	@ (8003cbc <ssd1306_DrawPixel+0xe8>)
 8003c3e:	5cd3      	ldrb	r3, [r2, r3]
 8003c40:	b25a      	sxtb	r2, r3
 8003c42:	79bb      	ldrb	r3, [r7, #6]
 8003c44:	f003 0307 	and.w	r3, r3, #7
 8003c48:	2101      	movs	r1, #1
 8003c4a:	fa01 f303 	lsl.w	r3, r1, r3
 8003c4e:	b25b      	sxtb	r3, r3
 8003c50:	4313      	orrs	r3, r2
 8003c52:	b259      	sxtb	r1, r3
 8003c54:	79fa      	ldrb	r2, [r7, #7]
 8003c56:	462b      	mov	r3, r5
 8003c58:	fb00 f303 	mul.w	r3, r0, r3
 8003c5c:	4413      	add	r3, r2
 8003c5e:	b2c9      	uxtb	r1, r1
 8003c60:	4a16      	ldr	r2, [pc, #88]	@ (8003cbc <ssd1306_DrawPixel+0xe8>)
 8003c62:	54d1      	strb	r1, [r2, r3]
 8003c64:	e024      	b.n	8003cb0 <ssd1306_DrawPixel+0xdc>
  }
  else
  {
    SSD1306_Buffer[x + (y / 8) * width()] &= ~(1 << (y % 8));
 8003c66:	79fc      	ldrb	r4, [r7, #7]
 8003c68:	79bb      	ldrb	r3, [r7, #6]
 8003c6a:	08db      	lsrs	r3, r3, #3
 8003c6c:	b2dd      	uxtb	r5, r3
 8003c6e:	462e      	mov	r6, r5
 8003c70:	f7ff fef3 	bl	8003a5a <width>
 8003c74:	4603      	mov	r3, r0
 8003c76:	4618      	mov	r0, r3
 8003c78:	4603      	mov	r3, r0
 8003c7a:	fb06 f303 	mul.w	r3, r6, r3
 8003c7e:	4423      	add	r3, r4
 8003c80:	4a0e      	ldr	r2, [pc, #56]	@ (8003cbc <ssd1306_DrawPixel+0xe8>)
 8003c82:	5cd3      	ldrb	r3, [r2, r3]
 8003c84:	b25a      	sxtb	r2, r3
 8003c86:	79bb      	ldrb	r3, [r7, #6]
 8003c88:	f003 0307 	and.w	r3, r3, #7
 8003c8c:	2101      	movs	r1, #1
 8003c8e:	fa01 f303 	lsl.w	r3, r1, r3
 8003c92:	b25b      	sxtb	r3, r3
 8003c94:	43db      	mvns	r3, r3
 8003c96:	b25b      	sxtb	r3, r3
 8003c98:	4013      	ands	r3, r2
 8003c9a:	b259      	sxtb	r1, r3
 8003c9c:	79fa      	ldrb	r2, [r7, #7]
 8003c9e:	462b      	mov	r3, r5
 8003ca0:	fb00 f303 	mul.w	r3, r0, r3
 8003ca4:	4413      	add	r3, r2
 8003ca6:	b2c9      	uxtb	r1, r1
 8003ca8:	4a04      	ldr	r2, [pc, #16]	@ (8003cbc <ssd1306_DrawPixel+0xe8>)
 8003caa:	54d1      	strb	r1, [r2, r3]
 8003cac:	e000      	b.n	8003cb0 <ssd1306_DrawPixel+0xdc>
    return;
 8003cae:	bf00      	nop
  }
}
 8003cb0:	3714      	adds	r7, #20
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003cb6:	bf00      	nop
 8003cb8:	200003f4 	.word	0x200003f4
 8003cbc:	200003fc 	.word	0x200003fc

08003cc0 <ssd1306_WriteChar>:
    pY += 8;
  }
}

char ssd1306_WriteChar(char ch, FontDef Font)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b088      	sub	sp, #32
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	1d3b      	adds	r3, r7, #4
 8003cc8:	e883 0006 	stmia.w	r3, {r1, r2}
 8003ccc:	4603      	mov	r3, r0
 8003cce:	73fb      	strb	r3, [r7, #15]
  uint32_t i, b, j;

  // Check remaining space on current line
  if (width() <= (SSD1306.CurrentX + Font.FontWidth) ||
 8003cd0:	f7ff fec3 	bl	8003a5a <width>
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	461a      	mov	r2, r3
 8003cd8:	4b40      	ldr	r3, [pc, #256]	@ (8003ddc <ssd1306_WriteChar+0x11c>)
 8003cda:	881b      	ldrh	r3, [r3, #0]
 8003cdc:	4619      	mov	r1, r3
 8003cde:	793b      	ldrb	r3, [r7, #4]
 8003ce0:	440b      	add	r3, r1
 8003ce2:	429a      	cmp	r2, r3
 8003ce4:	dd0a      	ble.n	8003cfc <ssd1306_WriteChar+0x3c>
    height() <= (SSD1306.CurrentY + Font.FontHeight))
 8003ce6:	f7ff fec0 	bl	8003a6a <height>
 8003cea:	4603      	mov	r3, r0
 8003cec:	461a      	mov	r2, r3
 8003cee:	4b3b      	ldr	r3, [pc, #236]	@ (8003ddc <ssd1306_WriteChar+0x11c>)
 8003cf0:	885b      	ldrh	r3, [r3, #2]
 8003cf2:	4619      	mov	r1, r3
 8003cf4:	797b      	ldrb	r3, [r7, #5]
 8003cf6:	440b      	add	r3, r1
  if (width() <= (SSD1306.CurrentX + Font.FontWidth) ||
 8003cf8:	429a      	cmp	r2, r3
 8003cfa:	dc01      	bgt.n	8003d00 <ssd1306_WriteChar+0x40>
  {
    // Not enough space on current line
    return 0;
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	e069      	b.n	8003dd4 <ssd1306_WriteChar+0x114>
  }

  // Use the font to write
  for (i = 0; i < Font.FontHeight; i++)
 8003d00:	2300      	movs	r3, #0
 8003d02:	61fb      	str	r3, [r7, #28]
 8003d04:	e059      	b.n	8003dba <ssd1306_WriteChar+0xfa>
  {
    b = Font.data[(ch - 32) * Font.FontHeight + i];
 8003d06:	68ba      	ldr	r2, [r7, #8]
 8003d08:	7bfb      	ldrb	r3, [r7, #15]
 8003d0a:	3b20      	subs	r3, #32
 8003d0c:	7979      	ldrb	r1, [r7, #5]
 8003d0e:	fb01 f303 	mul.w	r3, r1, r3
 8003d12:	4619      	mov	r1, r3
 8003d14:	69fb      	ldr	r3, [r7, #28]
 8003d16:	440b      	add	r3, r1
 8003d18:	005b      	lsls	r3, r3, #1
 8003d1a:	4413      	add	r3, r2
 8003d1c:	881b      	ldrh	r3, [r3, #0]
 8003d1e:	617b      	str	r3, [r7, #20]
    for (j = 0; j < Font.FontWidth; j++)
 8003d20:	2300      	movs	r3, #0
 8003d22:	61bb      	str	r3, [r7, #24]
 8003d24:	e041      	b.n	8003daa <ssd1306_WriteChar+0xea>
    {
      if ((b << j) & 0x8000)
 8003d26:	697a      	ldr	r2, [r7, #20]
 8003d28:	69bb      	ldr	r3, [r7, #24]
 8003d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d2e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d011      	beq.n	8003d5a <ssd1306_WriteChar+0x9a>
      {
        ssd1306_DrawPixel(SSD1306.CurrentX + j, SSD1306.CurrentY + i);
 8003d36:	4b29      	ldr	r3, [pc, #164]	@ (8003ddc <ssd1306_WriteChar+0x11c>)
 8003d38:	881b      	ldrh	r3, [r3, #0]
 8003d3a:	b2da      	uxtb	r2, r3
 8003d3c:	69bb      	ldr	r3, [r7, #24]
 8003d3e:	b2db      	uxtb	r3, r3
 8003d40:	4413      	add	r3, r2
 8003d42:	b2d8      	uxtb	r0, r3
 8003d44:	4b25      	ldr	r3, [pc, #148]	@ (8003ddc <ssd1306_WriteChar+0x11c>)
 8003d46:	885b      	ldrh	r3, [r3, #2]
 8003d48:	b2da      	uxtb	r2, r3
 8003d4a:	69fb      	ldr	r3, [r7, #28]
 8003d4c:	b2db      	uxtb	r3, r3
 8003d4e:	4413      	add	r3, r2
 8003d50:	b2db      	uxtb	r3, r3
 8003d52:	4619      	mov	r1, r3
 8003d54:	f7ff ff3e 	bl	8003bd4 <ssd1306_DrawPixel>
 8003d58:	e024      	b.n	8003da4 <ssd1306_WriteChar+0xe4>
      }
      else
      {
        SSD1306.Color = !SSD1306.Color;
 8003d5a:	4b20      	ldr	r3, [pc, #128]	@ (8003ddc <ssd1306_WriteChar+0x11c>)
 8003d5c:	795b      	ldrb	r3, [r3, #5]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	bf0c      	ite	eq
 8003d62:	2301      	moveq	r3, #1
 8003d64:	2300      	movne	r3, #0
 8003d66:	b2db      	uxtb	r3, r3
 8003d68:	461a      	mov	r2, r3
 8003d6a:	4b1c      	ldr	r3, [pc, #112]	@ (8003ddc <ssd1306_WriteChar+0x11c>)
 8003d6c:	715a      	strb	r2, [r3, #5]
        ssd1306_DrawPixel(SSD1306.CurrentX + j, SSD1306.CurrentY + i);
 8003d6e:	4b1b      	ldr	r3, [pc, #108]	@ (8003ddc <ssd1306_WriteChar+0x11c>)
 8003d70:	881b      	ldrh	r3, [r3, #0]
 8003d72:	b2da      	uxtb	r2, r3
 8003d74:	69bb      	ldr	r3, [r7, #24]
 8003d76:	b2db      	uxtb	r3, r3
 8003d78:	4413      	add	r3, r2
 8003d7a:	b2d8      	uxtb	r0, r3
 8003d7c:	4b17      	ldr	r3, [pc, #92]	@ (8003ddc <ssd1306_WriteChar+0x11c>)
 8003d7e:	885b      	ldrh	r3, [r3, #2]
 8003d80:	b2da      	uxtb	r2, r3
 8003d82:	69fb      	ldr	r3, [r7, #28]
 8003d84:	b2db      	uxtb	r3, r3
 8003d86:	4413      	add	r3, r2
 8003d88:	b2db      	uxtb	r3, r3
 8003d8a:	4619      	mov	r1, r3
 8003d8c:	f7ff ff22 	bl	8003bd4 <ssd1306_DrawPixel>
        SSD1306.Color = !SSD1306.Color;
 8003d90:	4b12      	ldr	r3, [pc, #72]	@ (8003ddc <ssd1306_WriteChar+0x11c>)
 8003d92:	795b      	ldrb	r3, [r3, #5]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	bf0c      	ite	eq
 8003d98:	2301      	moveq	r3, #1
 8003d9a:	2300      	movne	r3, #0
 8003d9c:	b2db      	uxtb	r3, r3
 8003d9e:	461a      	mov	r2, r3
 8003da0:	4b0e      	ldr	r3, [pc, #56]	@ (8003ddc <ssd1306_WriteChar+0x11c>)
 8003da2:	715a      	strb	r2, [r3, #5]
    for (j = 0; j < Font.FontWidth; j++)
 8003da4:	69bb      	ldr	r3, [r7, #24]
 8003da6:	3301      	adds	r3, #1
 8003da8:	61bb      	str	r3, [r7, #24]
 8003daa:	793b      	ldrb	r3, [r7, #4]
 8003dac:	461a      	mov	r2, r3
 8003dae:	69bb      	ldr	r3, [r7, #24]
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d3b8      	bcc.n	8003d26 <ssd1306_WriteChar+0x66>
  for (i = 0; i < Font.FontHeight; i++)
 8003db4:	69fb      	ldr	r3, [r7, #28]
 8003db6:	3301      	adds	r3, #1
 8003db8:	61fb      	str	r3, [r7, #28]
 8003dba:	797b      	ldrb	r3, [r7, #5]
 8003dbc:	461a      	mov	r2, r3
 8003dbe:	69fb      	ldr	r3, [r7, #28]
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d3a0      	bcc.n	8003d06 <ssd1306_WriteChar+0x46>
      }
    }
  }

  // The current space is now taken
  SSD1306.CurrentX += Font.FontWidth;
 8003dc4:	4b05      	ldr	r3, [pc, #20]	@ (8003ddc <ssd1306_WriteChar+0x11c>)
 8003dc6:	881b      	ldrh	r3, [r3, #0]
 8003dc8:	793a      	ldrb	r2, [r7, #4]
 8003dca:	4413      	add	r3, r2
 8003dcc:	b29a      	uxth	r2, r3
 8003dce:	4b03      	ldr	r3, [pc, #12]	@ (8003ddc <ssd1306_WriteChar+0x11c>)
 8003dd0:	801a      	strh	r2, [r3, #0]

  // Return written char for validation
  return ch;
 8003dd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	3720      	adds	r7, #32
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	bd80      	pop	{r7, pc}
 8003ddc:	200003f4 	.word	0x200003f4

08003de0 <ssd1306_WriteString>:

//
//  Write full string to screenbuffer
//
char ssd1306_WriteString(char* str, FontDef Font)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b084      	sub	sp, #16
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	60f8      	str	r0, [r7, #12]
 8003de8:	1d3b      	adds	r3, r7, #4
 8003dea:	e883 0006 	stmia.w	r3, {r1, r2}
  // Write until null-byte
  while (*str)
 8003dee:	e012      	b.n	8003e16 <ssd1306_WriteString+0x36>
  {
    if (ssd1306_WriteChar(*str, Font) != *str)
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	7818      	ldrb	r0, [r3, #0]
 8003df4:	1d3b      	adds	r3, r7, #4
 8003df6:	e893 0006 	ldmia.w	r3, {r1, r2}
 8003dfa:	f7ff ff61 	bl	8003cc0 <ssd1306_WriteChar>
 8003dfe:	4603      	mov	r3, r0
 8003e00:	461a      	mov	r2, r3
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	781b      	ldrb	r3, [r3, #0]
 8003e06:	429a      	cmp	r2, r3
 8003e08:	d002      	beq.n	8003e10 <ssd1306_WriteString+0x30>
    {
      // Char could not be written
      return *str;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	781b      	ldrb	r3, [r3, #0]
 8003e0e:	e008      	b.n	8003e22 <ssd1306_WriteString+0x42>
    }

    // Next char
    str++;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	3301      	adds	r3, #1
 8003e14:	60fb      	str	r3, [r7, #12]
  while (*str)
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	781b      	ldrb	r3, [r3, #0]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d1e8      	bne.n	8003df0 <ssd1306_WriteString+0x10>
  }

  // Everything ok
  return *str;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	781b      	ldrb	r3, [r3, #0]
}
 8003e22:	4618      	mov	r0, r3
 8003e24:	3710      	adds	r7, #16
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bd80      	pop	{r7, pc}
	...

08003e2c <ssd1306_SetCursor>:

//
//  Position the cursor
//
void ssd1306_SetCursor(uint8_t x, uint8_t y)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	b083      	sub	sp, #12
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	4603      	mov	r3, r0
 8003e34:	460a      	mov	r2, r1
 8003e36:	71fb      	strb	r3, [r7, #7]
 8003e38:	4613      	mov	r3, r2
 8003e3a:	71bb      	strb	r3, [r7, #6]
  SSD1306.CurrentX = x;
 8003e3c:	79fb      	ldrb	r3, [r7, #7]
 8003e3e:	b29a      	uxth	r2, r3
 8003e40:	4b05      	ldr	r3, [pc, #20]	@ (8003e58 <ssd1306_SetCursor+0x2c>)
 8003e42:	801a      	strh	r2, [r3, #0]
  SSD1306.CurrentY = y;
 8003e44:	79bb      	ldrb	r3, [r7, #6]
 8003e46:	b29a      	uxth	r2, r3
 8003e48:	4b03      	ldr	r3, [pc, #12]	@ (8003e58 <ssd1306_SetCursor+0x2c>)
 8003e4a:	805a      	strh	r2, [r3, #2]
}
 8003e4c:	bf00      	nop
 8003e4e:	370c      	adds	r7, #12
 8003e50:	46bd      	mov	sp, r7
 8003e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e56:	4770      	bx	lr
 8003e58:	200003f4 	.word	0x200003f4

08003e5c <ssd1306_Clear>:

void ssd1306_Clear()
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	af00      	add	r7, sp, #0
  memset(SSD1306_Buffer, 0, SSD1306_BUFFER_SIZE);
 8003e60:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003e64:	2100      	movs	r1, #0
 8003e66:	4802      	ldr	r0, [pc, #8]	@ (8003e70 <ssd1306_Clear+0x14>)
 8003e68:	f004 ffde 	bl	8008e28 <memset>
}
 8003e6c:	bf00      	nop
 8003e6e:	bd80      	pop	{r7, pc}
 8003e70:	200003fc 	.word	0x200003fc

08003e74 <ssd1306_WriteCommand>:

//
//  Send a byte to the command register
//
void ssd1306_WriteCommand(uint8_t command)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b086      	sub	sp, #24
 8003e78:	af04      	add	r7, sp, #16
 8003e7a:	4603      	mov	r3, r0
 8003e7c:	71fb      	strb	r3, [r7, #7]
  HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &command, 1, 10);
 8003e7e:	230a      	movs	r3, #10
 8003e80:	9302      	str	r3, [sp, #8]
 8003e82:	2301      	movs	r3, #1
 8003e84:	9301      	str	r3, [sp, #4]
 8003e86:	1dfb      	adds	r3, r7, #7
 8003e88:	9300      	str	r3, [sp, #0]
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	2178      	movs	r1, #120	@ 0x78
 8003e90:	4803      	ldr	r0, [pc, #12]	@ (8003ea0 <ssd1306_WriteCommand+0x2c>)
 8003e92:	f001 fc11 	bl	80056b8 <HAL_I2C_Mem_Write>
}
 8003e96:	bf00      	nop
 8003e98:	3708      	adds	r7, #8
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bd80      	pop	{r7, pc}
 8003e9e:	bf00      	nop
 8003ea0:	200005fc 	.word	0x200005fc

08003ea4 <ssd1306_WriteData>:

void ssd1306_WriteData(uint8_t* data, uint16_t size)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b086      	sub	sp, #24
 8003ea8:	af04      	add	r7, sp, #16
 8003eaa:	6078      	str	r0, [r7, #4]
 8003eac:	460b      	mov	r3, r1
 8003eae:	807b      	strh	r3, [r7, #2]
  HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, data, size, 100);
 8003eb0:	2364      	movs	r3, #100	@ 0x64
 8003eb2:	9302      	str	r3, [sp, #8]
 8003eb4:	887b      	ldrh	r3, [r7, #2]
 8003eb6:	9301      	str	r3, [sp, #4]
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	9300      	str	r3, [sp, #0]
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	2240      	movs	r2, #64	@ 0x40
 8003ec0:	2178      	movs	r1, #120	@ 0x78
 8003ec2:	4803      	ldr	r0, [pc, #12]	@ (8003ed0 <ssd1306_WriteData+0x2c>)
 8003ec4:	f001 fbf8 	bl	80056b8 <HAL_I2C_Mem_Write>
}
 8003ec8:	bf00      	nop
 8003eca:	3708      	adds	r7, #8
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	bd80      	pop	{r7, pc}
 8003ed0:	200005fc 	.word	0x200005fc

08003ed4 <ssd1306_UpdateScreen>:

//
//  Write the screenbuffer with changed to the screen
//
void ssd1306_UpdateScreen(void)
{
 8003ed4:	b590      	push	{r4, r7, lr}
 8003ed6:	b083      	sub	sp, #12
 8003ed8:	af00      	add	r7, sp, #0
  uint8_t i;
  for (i = 0; i < SSD1306_HEIGHT / 8; i++)
 8003eda:	2300      	movs	r3, #0
 8003edc:	71fb      	strb	r3, [r7, #7]
 8003ede:	e019      	b.n	8003f14 <ssd1306_UpdateScreen+0x40>
  {
    ssd1306_WriteCommand(0xB0 + i);
 8003ee0:	79fb      	ldrb	r3, [r7, #7]
 8003ee2:	3b50      	subs	r3, #80	@ 0x50
 8003ee4:	b2db      	uxtb	r3, r3
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	f7ff ffc4 	bl	8003e74 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(SETLOWCOLUMN);
 8003eec:	2000      	movs	r0, #0
 8003eee:	f7ff ffc1 	bl	8003e74 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(SETHIGHCOLUMN);
 8003ef2:	2010      	movs	r0, #16
 8003ef4:	f7ff ffbe 	bl	8003e74 <ssd1306_WriteCommand>
    ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH * i], width());
 8003ef8:	79fb      	ldrb	r3, [r7, #7]
 8003efa:	01db      	lsls	r3, r3, #7
 8003efc:	4a09      	ldr	r2, [pc, #36]	@ (8003f24 <ssd1306_UpdateScreen+0x50>)
 8003efe:	189c      	adds	r4, r3, r2
 8003f00:	f7ff fdab 	bl	8003a5a <width>
 8003f04:	4603      	mov	r3, r0
 8003f06:	4619      	mov	r1, r3
 8003f08:	4620      	mov	r0, r4
 8003f0a:	f7ff ffcb 	bl	8003ea4 <ssd1306_WriteData>
  for (i = 0; i < SSD1306_HEIGHT / 8; i++)
 8003f0e:	79fb      	ldrb	r3, [r7, #7]
 8003f10:	3301      	adds	r3, #1
 8003f12:	71fb      	strb	r3, [r7, #7]
 8003f14:	79fb      	ldrb	r3, [r7, #7]
 8003f16:	2b03      	cmp	r3, #3
 8003f18:	d9e2      	bls.n	8003ee0 <ssd1306_UpdateScreen+0xc>
  }
}
 8003f1a:	bf00      	nop
 8003f1c:	bf00      	nop
 8003f1e:	370c      	adds	r7, #12
 8003f20:	46bd      	mov	sp, r7
 8003f22:	bd90      	pop	{r4, r7, pc}
 8003f24:	200003fc 	.word	0x200003fc

08003f28 <board_button_init>:
---------------------------------------*/

#include "board.h"

void board_button_init(void)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b086      	sub	sp, #24
 8003f2c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f2e:	1d3b      	adds	r3, r7, #4
 8003f30:	2200      	movs	r2, #0
 8003f32:	601a      	str	r2, [r3, #0]
 8003f34:	605a      	str	r2, [r3, #4]
 8003f36:	609a      	str	r2, [r3, #8]
 8003f38:	60da      	str	r2, [r3, #12]
 8003f3a:	611a      	str	r2, [r3, #16]
  
  /* GPIO Ports Clock Enable */
  KEY_GPIO_CLK_ENABLE();
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	603b      	str	r3, [r7, #0]
 8003f40:	4b0d      	ldr	r3, [pc, #52]	@ (8003f78 <board_button_init+0x50>)
 8003f42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f44:	4a0c      	ldr	r2, [pc, #48]	@ (8003f78 <board_button_init+0x50>)
 8003f46:	f043 0304 	orr.w	r3, r3, #4
 8003f4a:	6313      	str	r3, [r2, #48]	@ 0x30
 8003f4c:	4b0a      	ldr	r3, [pc, #40]	@ (8003f78 <board_button_init+0x50>)
 8003f4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f50:	f003 0304 	and.w	r3, r3, #4
 8003f54:	603b      	str	r3, [r7, #0]
 8003f56:	683b      	ldr	r3, [r7, #0]
  
  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY_Pin;
 8003f58:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003f5c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003f5e:	2300      	movs	r3, #0
 8003f60:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003f62:	2302      	movs	r3, #2
 8003f64:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(KEY_GPIO_Port, &GPIO_InitStruct);
 8003f66:	1d3b      	adds	r3, r7, #4
 8003f68:	4619      	mov	r1, r3
 8003f6a:	4804      	ldr	r0, [pc, #16]	@ (8003f7c <board_button_init+0x54>)
 8003f6c:	f000 ff7a 	bl	8004e64 <HAL_GPIO_Init>
}
 8003f70:	bf00      	nop
 8003f72:	3718      	adds	r7, #24
 8003f74:	46bd      	mov	sp, r7
 8003f76:	bd80      	pop	{r7, pc}
 8003f78:	40023800 	.word	0x40023800
 8003f7c:	40020800 	.word	0x40020800

08003f80 <board_button_getstate>:

uint8_t board_button_getstate(void)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	af00      	add	r7, sp, #0
  return HAL_GPIO_ReadPin(KEY_GPIO_Port,KEY_Pin)==GPIO_PIN_SET?1:0;
 8003f84:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003f88:	4805      	ldr	r0, [pc, #20]	@ (8003fa0 <board_button_getstate+0x20>)
 8003f8a:	f001 f907 	bl	800519c <HAL_GPIO_ReadPin>
 8003f8e:	4603      	mov	r3, r0
 8003f90:	2b01      	cmp	r3, #1
 8003f92:	bf0c      	ite	eq
 8003f94:	2301      	moveq	r3, #1
 8003f96:	2300      	movne	r3, #0
 8003f98:	b2db      	uxtb	r3, r3
}
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	bd80      	pop	{r7, pc}
 8003f9e:	bf00      	nop
 8003fa0:	40020800 	.word	0x40020800

08003fa4 <board_led_init>:

void board_led_init(void)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b086      	sub	sp, #24
 8003fa8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003faa:	1d3b      	adds	r3, r7, #4
 8003fac:	2200      	movs	r2, #0
 8003fae:	601a      	str	r2, [r3, #0]
 8003fb0:	605a      	str	r2, [r3, #4]
 8003fb2:	609a      	str	r2, [r3, #8]
 8003fb4:	60da      	str	r2, [r3, #12]
 8003fb6:	611a      	str	r2, [r3, #16]
  
  /* GPIO Ports Clock Enable */
  LED_GPIO_CLK_ENABLE();
 8003fb8:	2300      	movs	r3, #0
 8003fba:	603b      	str	r3, [r7, #0]
 8003fbc:	4b10      	ldr	r3, [pc, #64]	@ (8004000 <board_led_init+0x5c>)
 8003fbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fc0:	4a0f      	ldr	r2, [pc, #60]	@ (8004000 <board_led_init+0x5c>)
 8003fc2:	f043 0302 	orr.w	r3, r3, #2
 8003fc6:	6313      	str	r3, [r2, #48]	@ 0x30
 8003fc8:	4b0d      	ldr	r3, [pc, #52]	@ (8004000 <board_led_init+0x5c>)
 8003fca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fcc:	f003 0302 	and.w	r3, r3, #2
 8003fd0:	603b      	str	r3, [r7, #0]
 8003fd2:	683b      	ldr	r3, [r7, #0]
  
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	2104      	movs	r1, #4
 8003fd8:	480a      	ldr	r0, [pc, #40]	@ (8004004 <board_led_init+0x60>)
 8003fda:	f001 f8f7 	bl	80051cc <HAL_GPIO_WritePin>
  
  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8003fde:	2304      	movs	r3, #4
 8003fe0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003fea:	2300      	movs	r3, #0
 8003fec:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8003fee:	1d3b      	adds	r3, r7, #4
 8003ff0:	4619      	mov	r1, r3
 8003ff2:	4804      	ldr	r0, [pc, #16]	@ (8004004 <board_led_init+0x60>)
 8003ff4:	f000 ff36 	bl	8004e64 <HAL_GPIO_Init>
}
 8003ff8:	bf00      	nop
 8003ffa:	3718      	adds	r7, #24
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	bd80      	pop	{r7, pc}
 8004000:	40023800 	.word	0x40023800
 8004004:	40020400 	.word	0x40020400

08004008 <board_led_toggle>:

void board_led_toggle(void)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	af00      	add	r7, sp, #0
    HAL_GPIO_TogglePin(LED_GPIO_Port,LED_Pin);
 800400c:	2104      	movs	r1, #4
 800400e:	4802      	ldr	r0, [pc, #8]	@ (8004018 <board_led_toggle+0x10>)
 8004010:	f001 f8f5 	bl	80051fe <HAL_GPIO_TogglePin>
}
 8004014:	bf00      	nop
 8004016:	bd80      	pop	{r7, pc}
 8004018:	40020400 	.word	0x40020400

0800401c <board_led_set>:

void board_led_set(uint8_t set)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b082      	sub	sp, #8
 8004020:	af00      	add	r7, sp, #0
 8004022:	4603      	mov	r3, r0
 8004024:	71fb      	strb	r3, [r7, #7]
    if (set)
 8004026:	79fb      	ldrb	r3, [r7, #7]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d005      	beq.n	8004038 <board_led_set+0x1c>
        HAL_GPIO_WritePin(LED_GPIO_Port,LED_Pin,GPIO_PIN_SET);
 800402c:	2201      	movs	r2, #1
 800402e:	2104      	movs	r1, #4
 8004030:	4806      	ldr	r0, [pc, #24]	@ (800404c <board_led_set+0x30>)
 8004032:	f001 f8cb 	bl	80051cc <HAL_GPIO_WritePin>
    else
        HAL_GPIO_WritePin(LED_GPIO_Port,LED_Pin,GPIO_PIN_RESET);
}
 8004036:	e004      	b.n	8004042 <board_led_set+0x26>
        HAL_GPIO_WritePin(LED_GPIO_Port,LED_Pin,GPIO_PIN_RESET);
 8004038:	2200      	movs	r2, #0
 800403a:	2104      	movs	r1, #4
 800403c:	4803      	ldr	r0, [pc, #12]	@ (800404c <board_led_set+0x30>)
 800403e:	f001 f8c5 	bl	80051cc <HAL_GPIO_WritePin>
}
 8004042:	bf00      	nop
 8004044:	3708      	adds	r7, #8
 8004046:	46bd      	mov	sp, r7
 8004048:	bd80      	pop	{r7, pc}
 800404a:	bf00      	nop
 800404c:	40020400 	.word	0x40020400

08004050 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8004050:	b480      	push	{r7}
 8004052:	b085      	sub	sp, #20
 8004054:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004056:	2300      	movs	r3, #0
 8004058:	60fb      	str	r3, [r7, #12]
 800405a:	4b1e      	ldr	r3, [pc, #120]	@ (80040d4 <MX_GPIO_Init+0x84>)
 800405c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800405e:	4a1d      	ldr	r2, [pc, #116]	@ (80040d4 <MX_GPIO_Init+0x84>)
 8004060:	f043 0304 	orr.w	r3, r3, #4
 8004064:	6313      	str	r3, [r2, #48]	@ 0x30
 8004066:	4b1b      	ldr	r3, [pc, #108]	@ (80040d4 <MX_GPIO_Init+0x84>)
 8004068:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800406a:	f003 0304 	and.w	r3, r3, #4
 800406e:	60fb      	str	r3, [r7, #12]
 8004070:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8004072:	2300      	movs	r3, #0
 8004074:	60bb      	str	r3, [r7, #8]
 8004076:	4b17      	ldr	r3, [pc, #92]	@ (80040d4 <MX_GPIO_Init+0x84>)
 8004078:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800407a:	4a16      	ldr	r2, [pc, #88]	@ (80040d4 <MX_GPIO_Init+0x84>)
 800407c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004080:	6313      	str	r3, [r2, #48]	@ 0x30
 8004082:	4b14      	ldr	r3, [pc, #80]	@ (80040d4 <MX_GPIO_Init+0x84>)
 8004084:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004086:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800408a:	60bb      	str	r3, [r7, #8]
 800408c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800408e:	2300      	movs	r3, #0
 8004090:	607b      	str	r3, [r7, #4]
 8004092:	4b10      	ldr	r3, [pc, #64]	@ (80040d4 <MX_GPIO_Init+0x84>)
 8004094:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004096:	4a0f      	ldr	r2, [pc, #60]	@ (80040d4 <MX_GPIO_Init+0x84>)
 8004098:	f043 0301 	orr.w	r3, r3, #1
 800409c:	6313      	str	r3, [r2, #48]	@ 0x30
 800409e:	4b0d      	ldr	r3, [pc, #52]	@ (80040d4 <MX_GPIO_Init+0x84>)
 80040a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040a2:	f003 0301 	and.w	r3, r3, #1
 80040a6:	607b      	str	r3, [r7, #4]
 80040a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80040aa:	2300      	movs	r3, #0
 80040ac:	603b      	str	r3, [r7, #0]
 80040ae:	4b09      	ldr	r3, [pc, #36]	@ (80040d4 <MX_GPIO_Init+0x84>)
 80040b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040b2:	4a08      	ldr	r2, [pc, #32]	@ (80040d4 <MX_GPIO_Init+0x84>)
 80040b4:	f043 0302 	orr.w	r3, r3, #2
 80040b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80040ba:	4b06      	ldr	r3, [pc, #24]	@ (80040d4 <MX_GPIO_Init+0x84>)
 80040bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040be:	f003 0302 	and.w	r3, r3, #2
 80040c2:	603b      	str	r3, [r7, #0]
 80040c4:	683b      	ldr	r3, [r7, #0]

}
 80040c6:	bf00      	nop
 80040c8:	3714      	adds	r7, #20
 80040ca:	46bd      	mov	sp, r7
 80040cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040d0:	4770      	bx	lr
 80040d2:	bf00      	nop
 80040d4:	40023800 	.word	0x40023800

080040d8 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 80040d8:	b580      	push	{r7, lr}
 80040da:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80040dc:	4b12      	ldr	r3, [pc, #72]	@ (8004128 <MX_I2C1_Init+0x50>)
 80040de:	4a13      	ldr	r2, [pc, #76]	@ (800412c <MX_I2C1_Init+0x54>)
 80040e0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 80040e2:	4b11      	ldr	r3, [pc, #68]	@ (8004128 <MX_I2C1_Init+0x50>)
 80040e4:	4a12      	ldr	r2, [pc, #72]	@ (8004130 <MX_I2C1_Init+0x58>)
 80040e6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80040e8:	4b0f      	ldr	r3, [pc, #60]	@ (8004128 <MX_I2C1_Init+0x50>)
 80040ea:	2200      	movs	r2, #0
 80040ec:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80040ee:	4b0e      	ldr	r3, [pc, #56]	@ (8004128 <MX_I2C1_Init+0x50>)
 80040f0:	2200      	movs	r2, #0
 80040f2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80040f4:	4b0c      	ldr	r3, [pc, #48]	@ (8004128 <MX_I2C1_Init+0x50>)
 80040f6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80040fa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80040fc:	4b0a      	ldr	r3, [pc, #40]	@ (8004128 <MX_I2C1_Init+0x50>)
 80040fe:	2200      	movs	r2, #0
 8004100:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8004102:	4b09      	ldr	r3, [pc, #36]	@ (8004128 <MX_I2C1_Init+0x50>)
 8004104:	2200      	movs	r2, #0
 8004106:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8004108:	4b07      	ldr	r3, [pc, #28]	@ (8004128 <MX_I2C1_Init+0x50>)
 800410a:	2200      	movs	r2, #0
 800410c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800410e:	4b06      	ldr	r3, [pc, #24]	@ (8004128 <MX_I2C1_Init+0x50>)
 8004110:	2200      	movs	r2, #0
 8004112:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004114:	4804      	ldr	r0, [pc, #16]	@ (8004128 <MX_I2C1_Init+0x50>)
 8004116:	f001 f88d 	bl	8005234 <HAL_I2C_Init>
 800411a:	4603      	mov	r3, r0
 800411c:	2b00      	cmp	r3, #0
 800411e:	d001      	beq.n	8004124 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8004120:	f000 face 	bl	80046c0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8004124:	bf00      	nop
 8004126:	bd80      	pop	{r7, pc}
 8004128:	200005fc 	.word	0x200005fc
 800412c:	40005400 	.word	0x40005400
 8004130:	00061a80 	.word	0x00061a80

08004134 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b08a      	sub	sp, #40	@ 0x28
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800413c:	f107 0314 	add.w	r3, r7, #20
 8004140:	2200      	movs	r2, #0
 8004142:	601a      	str	r2, [r3, #0]
 8004144:	605a      	str	r2, [r3, #4]
 8004146:	609a      	str	r2, [r3, #8]
 8004148:	60da      	str	r2, [r3, #12]
 800414a:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	4a19      	ldr	r2, [pc, #100]	@ (80041b8 <HAL_I2C_MspInit+0x84>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d12c      	bne.n	80041b0 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8004156:	2300      	movs	r3, #0
 8004158:	613b      	str	r3, [r7, #16]
 800415a:	4b18      	ldr	r3, [pc, #96]	@ (80041bc <HAL_I2C_MspInit+0x88>)
 800415c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800415e:	4a17      	ldr	r2, [pc, #92]	@ (80041bc <HAL_I2C_MspInit+0x88>)
 8004160:	f043 0302 	orr.w	r3, r3, #2
 8004164:	6313      	str	r3, [r2, #48]	@ 0x30
 8004166:	4b15      	ldr	r3, [pc, #84]	@ (80041bc <HAL_I2C_MspInit+0x88>)
 8004168:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800416a:	f003 0302 	and.w	r3, r3, #2
 800416e:	613b      	str	r3, [r7, #16]
 8004170:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 8004172:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 8004176:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8004178:	2312      	movs	r3, #18
 800417a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800417c:	2301      	movs	r3, #1
 800417e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004180:	2303      	movs	r3, #3
 8004182:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8004184:	2304      	movs	r3, #4
 8004186:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8004188:	f107 0314 	add.w	r3, r7, #20
 800418c:	4619      	mov	r1, r3
 800418e:	480c      	ldr	r0, [pc, #48]	@ (80041c0 <HAL_I2C_MspInit+0x8c>)
 8004190:	f000 fe68 	bl	8004e64 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8004194:	2300      	movs	r3, #0
 8004196:	60fb      	str	r3, [r7, #12]
 8004198:	4b08      	ldr	r3, [pc, #32]	@ (80041bc <HAL_I2C_MspInit+0x88>)
 800419a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800419c:	4a07      	ldr	r2, [pc, #28]	@ (80041bc <HAL_I2C_MspInit+0x88>)
 800419e:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80041a2:	6413      	str	r3, [r2, #64]	@ 0x40
 80041a4:	4b05      	ldr	r3, [pc, #20]	@ (80041bc <HAL_I2C_MspInit+0x88>)
 80041a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041a8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80041ac:	60fb      	str	r3, [r7, #12]
 80041ae:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80041b0:	bf00      	nop
 80041b2:	3728      	adds	r7, #40	@ 0x28
 80041b4:	46bd      	mov	sp, r7
 80041b6:	bd80      	pop	{r7, pc}
 80041b8:	40005400 	.word	0x40005400
 80041bc:	40023800 	.word	0x40023800
 80041c0:	40020400 	.word	0x40020400

080041c4 <__io_putchar>:
  int __io_putchar(int ch)
#else
  // For other compilers, implement fputc for printf redirection
  int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b082      	sub	sp, #8
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
    // Transmit the character over UART1
    HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 80041cc:	1d39      	adds	r1, r7, #4
 80041ce:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80041d2:	2201      	movs	r2, #1
 80041d4:	4803      	ldr	r0, [pc, #12]	@ (80041e4 <__io_putchar+0x20>)
 80041d6:	f003 fbd5 	bl	8007984 <HAL_UART_Transmit>
    return ch;
 80041da:	687b      	ldr	r3, [r7, #4]
}
 80041dc:	4618      	mov	r0, r3
 80041de:	3708      	adds	r7, #8
 80041e0:	46bd      	mov	sp, r7
 80041e2:	bd80      	pop	{r7, pc}
 80041e4:	200006d0 	.word	0x200006d0

080041e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	ed2d 8b04 	vpush	{d8-d9}
 80041ee:	b096      	sub	sp, #88	@ 0x58
 80041f0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80041f2:	f000 fcbb 	bl	8004b6c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80041f6:	f000 f901 	bl	80043fc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80041fa:	f7ff ff29 	bl	8004050 <MX_GPIO_Init>
  MX_RTC_Init();
 80041fe:	f000 fa65 	bl	80046cc <MX_RTC_Init>
  MX_USART1_UART_Init();
 8004202:	f000 fc17 	bl	8004a34 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8004206:	f7ff ff67 	bl	80040d8 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  I2C_Scan();
 800420a:	f000 f963 	bl	80044d4 <I2C_Scan>
  while (MPU6050_Init(&hi2c1) == 1);
 800420e:	bf00      	nop
 8004210:	486f      	ldr	r0, [pc, #444]	@ (80043d0 <main+0x1e8>)
 8004212:	f7ff f883 	bl	800331c <MPU6050_Init>
 8004216:	4603      	mov	r3, r0
 8004218:	2b01      	cmp	r3, #1
 800421a:	d0f9      	beq.n	8004210 <main+0x28>
  ssd1306_Init();
 800421c:	f7ff fc3e 	bl	8003a9c <ssd1306_Init>
  ssd1306_WriteString("Hello World", Font_7x10);
 8004220:	4b6c      	ldr	r3, [pc, #432]	@ (80043d4 <main+0x1ec>)
 8004222:	e893 0006 	ldmia.w	r3, {r1, r2}
 8004226:	486c      	ldr	r0, [pc, #432]	@ (80043d8 <main+0x1f0>)
 8004228:	f7ff fdda 	bl	8003de0 <ssd1306_WriteString>
  ssd1306_UpdateScreen();
 800422c:	f7ff fe52 	bl	8003ed4 <ssd1306_UpdateScreen>
  IMU_EN_SENSOR_TYPE enMotionSensorType, enPressureType;
  IMU_ST_ANGLES_DATA stAngles;
  IMU_ST_SENSOR_DATA stGyroRawData;
  IMU_ST_SENSOR_DATA stAccelRawData;
  IMU_ST_SENSOR_DATA stMagnRawData;
  int32_t s32PressureVal = 0, s32TemperatureVal = 0, s32AltitudeVal = 0;
 8004230:	2300      	movs	r3, #0
 8004232:	627b      	str	r3, [r7, #36]	@ 0x24
 8004234:	2300      	movs	r3, #0
 8004236:	623b      	str	r3, [r7, #32]
 8004238:	2300      	movs	r3, #0
 800423a:	61fb      	str	r3, [r7, #28]

  imuInit(&enMotionSensorType, &enPressureType);
 800423c:	f107 024e 	add.w	r2, r7, #78	@ 0x4e
 8004240:	f107 034f 	add.w	r3, r7, #79	@ 0x4f
 8004244:	4611      	mov	r1, r2
 8004246:	4618      	mov	r0, r3
 8004248:	f7fd f804 	bl	8001254 <imuInit>
  if(IMU_EN_SENSOR_TYPE_ICM20948 == enMotionSensorType)
 800424c:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8004250:	2b01      	cmp	r3, #1
 8004252:	d103      	bne.n	800425c <main+0x74>
  {
	  printf("Motion sersor is ICM-20948\r\n" );
 8004254:	4861      	ldr	r0, [pc, #388]	@ (80043dc <main+0x1f4>)
 8004256:	f004 fcd3 	bl	8008c00 <puts>
 800425a:	e002      	b.n	8004262 <main+0x7a>
  }
  else
  {
	  printf("Motion sersor NULL\r\n");
 800425c:	4860      	ldr	r0, [pc, #384]	@ (80043e0 <main+0x1f8>)
 800425e:	f004 fccf 	bl	8008c00 <puts>
  }
  if(IMU_EN_SENSOR_TYPE_BMP280 == enPressureType)
 8004262:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8004266:	2b02      	cmp	r3, #2
 8004268:	d103      	bne.n	8004272 <main+0x8a>
  {
	  printf("Pressure sersor is BMP280\r\n");
 800426a:	485e      	ldr	r0, [pc, #376]	@ (80043e4 <main+0x1fc>)
 800426c:	f004 fcc8 	bl	8008c00 <puts>
 8004270:	e002      	b.n	8004278 <main+0x90>
  }
  else
  {
	  printf("Pressure sersor NULL\r\n");
 8004272:	485d      	ldr	r0, [pc, #372]	@ (80043e8 <main+0x200>)
 8004274:	f004 fcc4 	bl	8008c00 <puts>
  }

  board_button_init();
 8004278:	f7ff fe56 	bl	8003f28 <board_button_init>
  board_led_init();
 800427c:	f7ff fe92 	bl	8003fa4 <board_led_init>

  uint32_t tick,tick_now;
  tick = HAL_GetTick() + 200;
 8004280:	f000 fcda 	bl	8004c38 <HAL_GetTick>
 8004284:	4603      	mov	r3, r0
 8004286:	33c8      	adds	r3, #200	@ 0xc8
 8004288:	657b      	str	r3, [r7, #84]	@ 0x54
  tick_now = HAL_GetTick();
 800428a:	f000 fcd5 	bl	8004c38 <HAL_GetTick>
 800428e:	6538      	str	r0, [r7, #80]	@ 0x50
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  tick_now = HAL_GetTick();
 8004290:	f000 fcd2 	bl	8004c38 <HAL_GetTick>
 8004294:	6538      	str	r0, [r7, #80]	@ 0x50
	  if(board_button_getstate())
 8004296:	f7ff fe73 	bl	8003f80 <board_button_getstate>
 800429a:	4603      	mov	r3, r0
 800429c:	2b00      	cmp	r3, #0
 800429e:	d009      	beq.n	80042b4 <main+0xcc>
	  {
		  if(tick_now >= tick)
 80042a0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80042a2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80042a4:	429a      	cmp	r2, r3
 80042a6:	d3f3      	bcc.n	8004290 <main+0xa8>
		  {
			  tick = tick_now + 200;
 80042a8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80042aa:	33c8      	adds	r3, #200	@ 0xc8
 80042ac:	657b      	str	r3, [r7, #84]	@ 0x54
			  board_led_toggle();
 80042ae:	f7ff feab 	bl	8004008 <board_led_toggle>
 80042b2:	e7ed      	b.n	8004290 <main+0xa8>
		  }
	  }
	  else
	  {
		  if(tick_now >= tick)
 80042b4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80042b6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80042b8:	429a      	cmp	r2, r3
 80042ba:	d3e9      	bcc.n	8004290 <main+0xa8>
		  {
			  MPU6050_Read_All(&hi2c1, &MPU6050);
 80042bc:	494b      	ldr	r1, [pc, #300]	@ (80043ec <main+0x204>)
 80042be:	4844      	ldr	r0, [pc, #272]	@ (80043d0 <main+0x1e8>)
 80042c0:	f7ff f88a 	bl	80033d8 <MPU6050_Read_All>
			  //printf("Ax: %.5f Ay: %.5f Az: %.5f\r\n", MPU6050.Ax, MPU6050.Ay, MPU6050.Az);
			  Display_Accel_Data(MPU6050.Ax, MPU6050.Ay, MPU6050.Az, 0);
 80042c4:	4b49      	ldr	r3, [pc, #292]	@ (80043ec <main+0x204>)
 80042c6:	ed93 7b02 	vldr	d7, [r3, #8]
 80042ca:	4b48      	ldr	r3, [pc, #288]	@ (80043ec <main+0x204>)
 80042cc:	ed93 6b04 	vldr	d6, [r3, #16]
 80042d0:	4b46      	ldr	r3, [pc, #280]	@ (80043ec <main+0x204>)
 80042d2:	ed93 5b06 	vldr	d5, [r3, #24]
 80042d6:	2000      	movs	r0, #0
 80042d8:	eeb0 2a45 	vmov.f32	s4, s10
 80042dc:	eef0 2a65 	vmov.f32	s5, s11
 80042e0:	eeb0 1a46 	vmov.f32	s2, s12
 80042e4:	eef0 1a66 	vmov.f32	s3, s13
 80042e8:	eeb0 0a47 	vmov.f32	s0, s14
 80042ec:	eef0 0a67 	vmov.f32	s1, s15
 80042f0:	f000 f93e 	bl	8004570 <Display_Accel_Data>
			  imuDataGet( &stAngles, &stGyroRawData, &stAccelRawData, &stMagnRawData);
 80042f4:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80042f8:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 80042fc:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 8004300:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 8004304:	f7fc ffec 	bl	80012e0 <imuDataGet>
			  pressSensorDataGet(&s32TemperatureVal, &s32PressureVal, &s32AltitudeVal);
 8004308:	f107 021c 	add.w	r2, r7, #28
 800430c:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8004310:	f107 0320 	add.w	r3, r7, #32
 8004314:	4618      	mov	r0, r3
 8004316:	f7fe ffbf 	bl	8003298 <pressSensorDataGet>
			  Display_Accel_Data(-stAccelRawData.s16Y/16384., stAccelRawData.s16X/16384., stAccelRawData.s16Z/16384., 1);
 800431a:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 800431e:	425b      	negs	r3, r3
 8004320:	4618      	mov	r0, r3
 8004322:	f7fc f8ff 	bl	8000524 <__aeabi_i2d>
 8004326:	f04f 0200 	mov.w	r2, #0
 800432a:	4b31      	ldr	r3, [pc, #196]	@ (80043f0 <main+0x208>)
 800432c:	f7fc fa8e 	bl	800084c <__aeabi_ddiv>
 8004330:	4602      	mov	r2, r0
 8004332:	460b      	mov	r3, r1
 8004334:	ec43 2b18 	vmov	d8, r2, r3
 8004338:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	@ 0x30
 800433c:	4618      	mov	r0, r3
 800433e:	f7fc f8f1 	bl	8000524 <__aeabi_i2d>
 8004342:	f04f 0200 	mov.w	r2, #0
 8004346:	4b2a      	ldr	r3, [pc, #168]	@ (80043f0 <main+0x208>)
 8004348:	f7fc fa80 	bl	800084c <__aeabi_ddiv>
 800434c:	4602      	mov	r2, r0
 800434e:	460b      	mov	r3, r1
 8004350:	ec43 2b19 	vmov	d9, r2, r3
 8004354:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	@ 0x34
 8004358:	4618      	mov	r0, r3
 800435a:	f7fc f8e3 	bl	8000524 <__aeabi_i2d>
 800435e:	f04f 0200 	mov.w	r2, #0
 8004362:	4b23      	ldr	r3, [pc, #140]	@ (80043f0 <main+0x208>)
 8004364:	f7fc fa72 	bl	800084c <__aeabi_ddiv>
 8004368:	4602      	mov	r2, r0
 800436a:	460b      	mov	r3, r1
 800436c:	ec43 2b17 	vmov	d7, r2, r3
 8004370:	2001      	movs	r0, #1
 8004372:	eeb0 2a47 	vmov.f32	s4, s14
 8004376:	eef0 2a67 	vmov.f32	s5, s15
 800437a:	eeb0 1a49 	vmov.f32	s2, s18
 800437e:	eef0 1a69 	vmov.f32	s3, s19
 8004382:	eeb0 0a48 	vmov.f32	s0, s16
 8004386:	eef0 0a68 	vmov.f32	s1, s17
 800438a:	f000 f8f1 	bl	8004570 <Display_Accel_Data>

			  tick = tick_now + 50;
 800438e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004390:	3332      	adds	r3, #50	@ 0x32
 8004392:	657b      	str	r3, [r7, #84]	@ 0x54
			  RTC_DateTypeDef sdatestructureget;
			  RTC_TimeTypeDef stimestructureget;
			  static uint8_t Seconds_o;

			  /* Get the RTC current Time */
			  HAL_RTC_GetTime(&hrtc, &stimestructureget, RTC_FORMAT_BIN);
 8004394:	1d3b      	adds	r3, r7, #4
 8004396:	2200      	movs	r2, #0
 8004398:	4619      	mov	r1, r3
 800439a:	4816      	ldr	r0, [pc, #88]	@ (80043f4 <main+0x20c>)
 800439c:	f003 f8b3 	bl	8007506 <HAL_RTC_GetTime>
			  /* Get the RTC current Date */
			  HAL_RTC_GetDate(&hrtc, &sdatestructureget, RTC_FORMAT_BIN);
 80043a0:	f107 0318 	add.w	r3, r7, #24
 80043a4:	2200      	movs	r2, #0
 80043a6:	4619      	mov	r1, r3
 80043a8:	4812      	ldr	r0, [pc, #72]	@ (80043f4 <main+0x20c>)
 80043aa:	f003 f98e 	bl	80076ca <HAL_RTC_GetDate>
 			  if(Seconds_o != stimestructureget.Seconds)
 80043ae:	79ba      	ldrb	r2, [r7, #6]
 80043b0:	4b11      	ldr	r3, [pc, #68]	@ (80043f8 <main+0x210>)
 80043b2:	781b      	ldrb	r3, [r3, #0]
 80043b4:	429a      	cmp	r2, r3
 80043b6:	d006      	beq.n	80043c6 <main+0x1de>
  			  {

 				  Seconds_o = stimestructureget.Seconds;
 80043b8:	79ba      	ldrb	r2, [r7, #6]
 80043ba:	4b0f      	ldr	r3, [pc, #60]	@ (80043f8 <main+0x210>)
 80043bc:	701a      	strb	r2, [r3, #0]
	  					sdatestructureget.Month,
	  					sdatestructureget.Date,
	  					stimestructureget.Hours,
	  					stimestructureget.Minutes,
	  					stimestructureget.Seconds);*/
 				  board_led_set(1);
 80043be:	2001      	movs	r0, #1
 80043c0:	f7ff fe2c 	bl	800401c <board_led_set>
 80043c4:	e764      	b.n	8004290 <main+0xa8>
  			  }
	  		  else
	  		  {
	  			  board_led_set(0);
 80043c6:	2000      	movs	r0, #0
 80043c8:	f7ff fe28 	bl	800401c <board_led_set>
	  tick_now = HAL_GetTick();
 80043cc:	e760      	b.n	8004290 <main+0xa8>
 80043ce:	bf00      	nop
 80043d0:	200005fc 	.word	0x200005fc
 80043d4:	20000098 	.word	0x20000098
 80043d8:	0800c708 	.word	0x0800c708
 80043dc:	0800c714 	.word	0x0800c714
 80043e0:	0800c730 	.word	0x0800c730
 80043e4:	0800c744 	.word	0x0800c744
 80043e8:	0800c760 	.word	0x0800c760
 80043ec:	20000650 	.word	0x20000650
 80043f0:	40d00000 	.word	0x40d00000
 80043f4:	200006ac 	.word	0x200006ac
 80043f8:	200006a8 	.word	0x200006a8

080043fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	b094      	sub	sp, #80	@ 0x50
 8004400:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004402:	f107 0320 	add.w	r3, r7, #32
 8004406:	2230      	movs	r2, #48	@ 0x30
 8004408:	2100      	movs	r1, #0
 800440a:	4618      	mov	r0, r3
 800440c:	f004 fd0c 	bl	8008e28 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004410:	f107 030c 	add.w	r3, r7, #12
 8004414:	2200      	movs	r2, #0
 8004416:	601a      	str	r2, [r3, #0]
 8004418:	605a      	str	r2, [r3, #4]
 800441a:	609a      	str	r2, [r3, #8]
 800441c:	60da      	str	r2, [r3, #12]
 800441e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004420:	2300      	movs	r3, #0
 8004422:	60bb      	str	r3, [r7, #8]
 8004424:	4b29      	ldr	r3, [pc, #164]	@ (80044cc <SystemClock_Config+0xd0>)
 8004426:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004428:	4a28      	ldr	r2, [pc, #160]	@ (80044cc <SystemClock_Config+0xd0>)
 800442a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800442e:	6413      	str	r3, [r2, #64]	@ 0x40
 8004430:	4b26      	ldr	r3, [pc, #152]	@ (80044cc <SystemClock_Config+0xd0>)
 8004432:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004434:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004438:	60bb      	str	r3, [r7, #8]
 800443a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800443c:	2300      	movs	r3, #0
 800443e:	607b      	str	r3, [r7, #4]
 8004440:	4b23      	ldr	r3, [pc, #140]	@ (80044d0 <SystemClock_Config+0xd4>)
 8004442:	681b      	ldr	r3, [r3, #0]
 8004444:	4a22      	ldr	r2, [pc, #136]	@ (80044d0 <SystemClock_Config+0xd4>)
 8004446:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800444a:	6013      	str	r3, [r2, #0]
 800444c:	4b20      	ldr	r3, [pc, #128]	@ (80044d0 <SystemClock_Config+0xd4>)
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004454:	607b      	str	r3, [r7, #4]
 8004456:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8004458:	2305      	movs	r3, #5
 800445a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800445c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8004460:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8004462:	2301      	movs	r3, #1
 8004464:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8004466:	2302      	movs	r3, #2
 8004468:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800446a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800446e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8004470:	2304      	movs	r3, #4
 8004472:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8004474:	23a8      	movs	r3, #168	@ 0xa8
 8004476:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8004478:	2302      	movs	r3, #2
 800447a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800447c:	2304      	movs	r3, #4
 800447e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8004480:	f107 0320 	add.w	r3, r7, #32
 8004484:	4618      	mov	r0, r3
 8004486:	f002 f9a7 	bl	80067d8 <HAL_RCC_OscConfig>
 800448a:	4603      	mov	r3, r0
 800448c:	2b00      	cmp	r3, #0
 800448e:	d001      	beq.n	8004494 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8004490:	f000 f916 	bl	80046c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8004494:	230f      	movs	r3, #15
 8004496:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8004498:	2302      	movs	r3, #2
 800449a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800449c:	2300      	movs	r3, #0
 800449e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80044a0:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80044a4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80044a6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80044aa:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80044ac:	f107 030c 	add.w	r3, r7, #12
 80044b0:	2105      	movs	r1, #5
 80044b2:	4618      	mov	r0, r3
 80044b4:	f002 fc08 	bl	8006cc8 <HAL_RCC_ClockConfig>
 80044b8:	4603      	mov	r3, r0
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d001      	beq.n	80044c2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80044be:	f000 f8ff 	bl	80046c0 <Error_Handler>
  }
}
 80044c2:	bf00      	nop
 80044c4:	3750      	adds	r7, #80	@ 0x50
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bd80      	pop	{r7, pc}
 80044ca:	bf00      	nop
 80044cc:	40023800 	.word	0x40023800
 80044d0:	40007000 	.word	0x40007000

080044d4 <I2C_Scan>:

/* USER CODE BEGIN 4 */
void I2C_Scan(void)
{
 80044d4:	b5b0      	push	{r4, r5, r7, lr}
 80044d6:	b08c      	sub	sp, #48	@ 0x30
 80044d8:	af04      	add	r7, sp, #16

	RTC_DateTypeDef sdatestructureget;
	RTC_TimeTypeDef stimestructureget;
	HAL_RTC_GetTime(&hrtc, &stimestructureget, RTC_FORMAT_BIN);
 80044da:	1d3b      	adds	r3, r7, #4
 80044dc:	2200      	movs	r2, #0
 80044de:	4619      	mov	r1, r3
 80044e0:	481e      	ldr	r0, [pc, #120]	@ (800455c <I2C_Scan+0x88>)
 80044e2:	f003 f810 	bl	8007506 <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sdatestructureget, RTC_FORMAT_BIN);
 80044e6:	f107 0318 	add.w	r3, r7, #24
 80044ea:	2200      	movs	r2, #0
 80044ec:	4619      	mov	r1, r3
 80044ee:	481b      	ldr	r0, [pc, #108]	@ (800455c <I2C_Scan+0x88>)
 80044f0:	f003 f8eb 	bl	80076ca <HAL_RTC_GetDate>
    printf("Scanning I2C bus on Y20%02d.M%02d.D%02d at %02d:%02d:%02d...\r\n",
    		sdatestructureget.Year,
 80044f4:	7efb      	ldrb	r3, [r7, #27]
    printf("Scanning I2C bus on Y20%02d.M%02d.D%02d at %02d:%02d:%02d...\r\n",
 80044f6:	4618      	mov	r0, r3
			sdatestructureget.Month,
 80044f8:	7e7b      	ldrb	r3, [r7, #25]
    printf("Scanning I2C bus on Y20%02d.M%02d.D%02d at %02d:%02d:%02d...\r\n",
 80044fa:	461c      	mov	r4, r3
			sdatestructureget.Date,
 80044fc:	7ebb      	ldrb	r3, [r7, #26]
    printf("Scanning I2C bus on Y20%02d.M%02d.D%02d at %02d:%02d:%02d...\r\n",
 80044fe:	461d      	mov	r5, r3
			stimestructureget.Hours,
 8004500:	793b      	ldrb	r3, [r7, #4]
			stimestructureget.Minutes,
 8004502:	797a      	ldrb	r2, [r7, #5]
			stimestructureget.Seconds);
 8004504:	79b9      	ldrb	r1, [r7, #6]
    printf("Scanning I2C bus on Y20%02d.M%02d.D%02d at %02d:%02d:%02d...\r\n",
 8004506:	9102      	str	r1, [sp, #8]
 8004508:	9201      	str	r2, [sp, #4]
 800450a:	9300      	str	r3, [sp, #0]
 800450c:	462b      	mov	r3, r5
 800450e:	4622      	mov	r2, r4
 8004510:	4601      	mov	r1, r0
 8004512:	4813      	ldr	r0, [pc, #76]	@ (8004560 <I2C_Scan+0x8c>)
 8004514:	f004 fb0c 	bl	8008b30 <iprintf>
    for (uint16_t addr = 0; addr < 128; addr++)
 8004518:	2300      	movs	r3, #0
 800451a:	83fb      	strh	r3, [r7, #30]
 800451c:	e013      	b.n	8004546 <I2C_Scan+0x72>
    {
        if (HAL_I2C_IsDeviceReady(&hi2c1, addr << 1, 1, HAL_MAX_DELAY) == HAL_OK)
 800451e:	8bfb      	ldrh	r3, [r7, #30]
 8004520:	005b      	lsls	r3, r3, #1
 8004522:	b299      	uxth	r1, r3
 8004524:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004528:	2201      	movs	r2, #1
 800452a:	480e      	ldr	r0, [pc, #56]	@ (8004564 <I2C_Scan+0x90>)
 800452c:	f001 fbf0 	bl	8005d10 <HAL_I2C_IsDeviceReady>
 8004530:	4603      	mov	r3, r0
 8004532:	2b00      	cmp	r3, #0
 8004534:	d104      	bne.n	8004540 <I2C_Scan+0x6c>
        {
            printf("Device found at 0x%02X\r\n", addr);
 8004536:	8bfb      	ldrh	r3, [r7, #30]
 8004538:	4619      	mov	r1, r3
 800453a:	480b      	ldr	r0, [pc, #44]	@ (8004568 <I2C_Scan+0x94>)
 800453c:	f004 faf8 	bl	8008b30 <iprintf>
    for (uint16_t addr = 0; addr < 128; addr++)
 8004540:	8bfb      	ldrh	r3, [r7, #30]
 8004542:	3301      	adds	r3, #1
 8004544:	83fb      	strh	r3, [r7, #30]
 8004546:	8bfb      	ldrh	r3, [r7, #30]
 8004548:	2b7f      	cmp	r3, #127	@ 0x7f
 800454a:	d9e8      	bls.n	800451e <I2C_Scan+0x4a>
        }
    }
    printf("Scanning I2C DONE!...\r\n");
 800454c:	4807      	ldr	r0, [pc, #28]	@ (800456c <I2C_Scan+0x98>)
 800454e:	f004 fb57 	bl	8008c00 <puts>
}
 8004552:	bf00      	nop
 8004554:	3720      	adds	r7, #32
 8004556:	46bd      	mov	sp, r7
 8004558:	bdb0      	pop	{r4, r5, r7, pc}
 800455a:	bf00      	nop
 800455c:	200006ac 	.word	0x200006ac
 8004560:	0800c778 	.word	0x0800c778
 8004564:	200005fc 	.word	0x200005fc
 8004568:	0800c7b8 	.word	0x0800c7b8
 800456c:	0800c7d4 	.word	0x0800c7d4

08004570 <Display_Accel_Data>:

void Display_Accel_Data(double Ax, double Ay, double Az, uint8_t col) {
 8004570:	b580      	push	{r7, lr}
 8004572:	b090      	sub	sp, #64	@ 0x40
 8004574:	af02      	add	r7, sp, #8
 8004576:	ed87 0b06 	vstr	d0, [r7, #24]
 800457a:	ed87 1b04 	vstr	d1, [r7, #16]
 800457e:	ed87 2b02 	vstr	d2, [r7, #8]
 8004582:	4603      	mov	r3, r0
 8004584:	71fb      	strb	r3, [r7, #7]
    char buffer[20];  // Buffer to hold the text
    uint8_t len = 75;
 8004586:	234b      	movs	r3, #75	@ 0x4b
 8004588:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    // Clear the screen
    ssd1306_Clear();
 800458c:	f7ff fc66 	bl	8003e5c <ssd1306_Clear>

    if(!col)
 8004590:	79fb      	ldrb	r3, [r7, #7]
 8004592:	2b00      	cmp	r3, #0
 8004594:	d13f      	bne.n	8004616 <Display_Accel_Data+0xa6>
    {
    	// Display the Ax value
    	snprintf(buffer, sizeof(buffer), "x:%8.5f|", Ax);
 8004596:	f107 0020 	add.w	r0, r7, #32
 800459a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800459e:	e9cd 2300 	strd	r2, r3, [sp]
 80045a2:	4a42      	ldr	r2, [pc, #264]	@ (80046ac <Display_Accel_Data+0x13c>)
 80045a4:	2114      	movs	r1, #20
 80045a6:	f004 fb33 	bl	8008c10 <sniprintf>
		ssd1306_SetCursor(0, 0);
 80045aa:	2100      	movs	r1, #0
 80045ac:	2000      	movs	r0, #0
 80045ae:	f7ff fc3d 	bl	8003e2c <ssd1306_SetCursor>
		ssd1306_WriteString(buffer, Font_7x10);
 80045b2:	4a3f      	ldr	r2, [pc, #252]	@ (80046b0 <Display_Accel_Data+0x140>)
 80045b4:	f107 0320 	add.w	r3, r7, #32
 80045b8:	ca06      	ldmia	r2, {r1, r2}
 80045ba:	4618      	mov	r0, r3
 80045bc:	f7ff fc10 	bl	8003de0 <ssd1306_WriteString>

		// Display the Ay value
		snprintf(buffer, sizeof(buffer), "y:%8.5f|", Ay);
 80045c0:	f107 0020 	add.w	r0, r7, #32
 80045c4:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 80045c8:	e9cd 2300 	strd	r2, r3, [sp]
 80045cc:	4a39      	ldr	r2, [pc, #228]	@ (80046b4 <Display_Accel_Data+0x144>)
 80045ce:	2114      	movs	r1, #20
 80045d0:	f004 fb1e 	bl	8008c10 <sniprintf>
		ssd1306_SetCursor(0, 10);
 80045d4:	210a      	movs	r1, #10
 80045d6:	2000      	movs	r0, #0
 80045d8:	f7ff fc28 	bl	8003e2c <ssd1306_SetCursor>
		ssd1306_WriteString(buffer, Font_7x10);
 80045dc:	4a34      	ldr	r2, [pc, #208]	@ (80046b0 <Display_Accel_Data+0x140>)
 80045de:	f107 0320 	add.w	r3, r7, #32
 80045e2:	ca06      	ldmia	r2, {r1, r2}
 80045e4:	4618      	mov	r0, r3
 80045e6:	f7ff fbfb 	bl	8003de0 <ssd1306_WriteString>

		// Display the Az value
		snprintf(buffer, sizeof(buffer), "z:%8.5f|", Az);
 80045ea:	f107 0020 	add.w	r0, r7, #32
 80045ee:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80045f2:	e9cd 2300 	strd	r2, r3, [sp]
 80045f6:	4a30      	ldr	r2, [pc, #192]	@ (80046b8 <Display_Accel_Data+0x148>)
 80045f8:	2114      	movs	r1, #20
 80045fa:	f004 fb09 	bl	8008c10 <sniprintf>
		ssd1306_SetCursor(0, 20);
 80045fe:	2114      	movs	r1, #20
 8004600:	2000      	movs	r0, #0
 8004602:	f7ff fc13 	bl	8003e2c <ssd1306_SetCursor>
		ssd1306_WriteString(buffer, Font_7x10);
 8004606:	4a2a      	ldr	r2, [pc, #168]	@ (80046b0 <Display_Accel_Data+0x140>)
 8004608:	f107 0320 	add.w	r3, r7, #32
 800460c:	ca06      	ldmia	r2, {r1, r2}
 800460e:	4618      	mov	r0, r3
 8004610:	f7ff fbe6 	bl	8003de0 <ssd1306_WriteString>
 8004614:	e044      	b.n	80046a0 <Display_Accel_Data+0x130>
    }
    else
    {
    	// Display the Ax value
		snprintf(buffer, sizeof(buffer), "%8.5f", Ax);
 8004616:	f107 0020 	add.w	r0, r7, #32
 800461a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800461e:	e9cd 2300 	strd	r2, r3, [sp]
 8004622:	4a26      	ldr	r2, [pc, #152]	@ (80046bc <Display_Accel_Data+0x14c>)
 8004624:	2114      	movs	r1, #20
 8004626:	f004 faf3 	bl	8008c10 <sniprintf>
		ssd1306_SetCursor(len, 0);
 800462a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800462e:	2100      	movs	r1, #0
 8004630:	4618      	mov	r0, r3
 8004632:	f7ff fbfb 	bl	8003e2c <ssd1306_SetCursor>
		ssd1306_WriteString(buffer, Font_7x10);
 8004636:	4a1e      	ldr	r2, [pc, #120]	@ (80046b0 <Display_Accel_Data+0x140>)
 8004638:	f107 0320 	add.w	r3, r7, #32
 800463c:	ca06      	ldmia	r2, {r1, r2}
 800463e:	4618      	mov	r0, r3
 8004640:	f7ff fbce 	bl	8003de0 <ssd1306_WriteString>

		// Display the Ay value
		snprintf(buffer, sizeof(buffer), "%8.5f", Ay);
 8004644:	f107 0020 	add.w	r0, r7, #32
 8004648:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800464c:	e9cd 2300 	strd	r2, r3, [sp]
 8004650:	4a1a      	ldr	r2, [pc, #104]	@ (80046bc <Display_Accel_Data+0x14c>)
 8004652:	2114      	movs	r1, #20
 8004654:	f004 fadc 	bl	8008c10 <sniprintf>
		ssd1306_SetCursor(len, 10);
 8004658:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800465c:	210a      	movs	r1, #10
 800465e:	4618      	mov	r0, r3
 8004660:	f7ff fbe4 	bl	8003e2c <ssd1306_SetCursor>
		ssd1306_WriteString(buffer, Font_7x10);
 8004664:	4a12      	ldr	r2, [pc, #72]	@ (80046b0 <Display_Accel_Data+0x140>)
 8004666:	f107 0320 	add.w	r3, r7, #32
 800466a:	ca06      	ldmia	r2, {r1, r2}
 800466c:	4618      	mov	r0, r3
 800466e:	f7ff fbb7 	bl	8003de0 <ssd1306_WriteString>

		// Display the Az value
		snprintf(buffer, sizeof(buffer), "%8.5f", Az);
 8004672:	f107 0020 	add.w	r0, r7, #32
 8004676:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800467a:	e9cd 2300 	strd	r2, r3, [sp]
 800467e:	4a0f      	ldr	r2, [pc, #60]	@ (80046bc <Display_Accel_Data+0x14c>)
 8004680:	2114      	movs	r1, #20
 8004682:	f004 fac5 	bl	8008c10 <sniprintf>
		ssd1306_SetCursor(len, 20);
 8004686:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800468a:	2114      	movs	r1, #20
 800468c:	4618      	mov	r0, r3
 800468e:	f7ff fbcd 	bl	8003e2c <ssd1306_SetCursor>
		ssd1306_WriteString(buffer, Font_7x10);
 8004692:	4a07      	ldr	r2, [pc, #28]	@ (80046b0 <Display_Accel_Data+0x140>)
 8004694:	f107 0320 	add.w	r3, r7, #32
 8004698:	ca06      	ldmia	r2, {r1, r2}
 800469a:	4618      	mov	r0, r3
 800469c:	f7ff fba0 	bl	8003de0 <ssd1306_WriteString>
    }


    // Update the screen
    ssd1306_UpdateScreen();
 80046a0:	f7ff fc18 	bl	8003ed4 <ssd1306_UpdateScreen>
}
 80046a4:	bf00      	nop
 80046a6:	3738      	adds	r7, #56	@ 0x38
 80046a8:	46bd      	mov	sp, r7
 80046aa:	bd80      	pop	{r7, pc}
 80046ac:	0800c7ec 	.word	0x0800c7ec
 80046b0:	20000098 	.word	0x20000098
 80046b4:	0800c7f8 	.word	0x0800c7f8
 80046b8:	0800c804 	.word	0x0800c804
 80046bc:	0800c810 	.word	0x0800c810

080046c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80046c0:	b480      	push	{r7}
 80046c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80046c4:	b672      	cpsid	i
}
 80046c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80046c8:	bf00      	nop
 80046ca:	e7fd      	b.n	80046c8 <Error_Handler+0x8>

080046cc <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80046cc:	b580      	push	{r7, lr}
 80046ce:	b086      	sub	sp, #24
 80046d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 80046d2:	1d3b      	adds	r3, r7, #4
 80046d4:	2200      	movs	r2, #0
 80046d6:	601a      	str	r2, [r3, #0]
 80046d8:	605a      	str	r2, [r3, #4]
 80046da:	609a      	str	r2, [r3, #8]
 80046dc:	60da      	str	r2, [r3, #12]
 80046de:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 80046e0:	2300      	movs	r3, #0
 80046e2:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80046e4:	4b24      	ldr	r3, [pc, #144]	@ (8004778 <MX_RTC_Init+0xac>)
 80046e6:	4a25      	ldr	r2, [pc, #148]	@ (800477c <MX_RTC_Init+0xb0>)
 80046e8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80046ea:	4b23      	ldr	r3, [pc, #140]	@ (8004778 <MX_RTC_Init+0xac>)
 80046ec:	2200      	movs	r2, #0
 80046ee:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80046f0:	4b21      	ldr	r3, [pc, #132]	@ (8004778 <MX_RTC_Init+0xac>)
 80046f2:	227f      	movs	r2, #127	@ 0x7f
 80046f4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80046f6:	4b20      	ldr	r3, [pc, #128]	@ (8004778 <MX_RTC_Init+0xac>)
 80046f8:	22ff      	movs	r2, #255	@ 0xff
 80046fa:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80046fc:	4b1e      	ldr	r3, [pc, #120]	@ (8004778 <MX_RTC_Init+0xac>)
 80046fe:	2200      	movs	r2, #0
 8004700:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8004702:	4b1d      	ldr	r3, [pc, #116]	@ (8004778 <MX_RTC_Init+0xac>)
 8004704:	2200      	movs	r2, #0
 8004706:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8004708:	4b1b      	ldr	r3, [pc, #108]	@ (8004778 <MX_RTC_Init+0xac>)
 800470a:	2200      	movs	r2, #0
 800470c:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800470e:	481a      	ldr	r0, [pc, #104]	@ (8004778 <MX_RTC_Init+0xac>)
 8004710:	f002 fddc 	bl	80072cc <HAL_RTC_Init>
 8004714:	4603      	mov	r3, r0
 8004716:	2b00      	cmp	r3, #0
 8004718:	d001      	beq.n	800471e <MX_RTC_Init+0x52>
  {
    Error_Handler();
 800471a:	f7ff ffd1 	bl	80046c0 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 800471e:	2300      	movs	r3, #0
 8004720:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8004722:	2300      	movs	r3, #0
 8004724:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8004726:	2300      	movs	r3, #0
 8004728:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800472a:	2300      	movs	r3, #0
 800472c:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800472e:	2300      	movs	r3, #0
 8004730:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8004732:	1d3b      	adds	r3, r7, #4
 8004734:	2201      	movs	r2, #1
 8004736:	4619      	mov	r1, r3
 8004738:	480f      	ldr	r0, [pc, #60]	@ (8004778 <MX_RTC_Init+0xac>)
 800473a:	f002 fe4a 	bl	80073d2 <HAL_RTC_SetTime>
 800473e:	4603      	mov	r3, r0
 8004740:	2b00      	cmp	r3, #0
 8004742:	d001      	beq.n	8004748 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8004744:	f7ff ffbc 	bl	80046c0 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8004748:	2301      	movs	r3, #1
 800474a:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_AUGUST;
 800474c:	2308      	movs	r3, #8
 800474e:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x7;
 8004750:	2307      	movs	r3, #7
 8004752:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x23;
 8004754:	2323      	movs	r3, #35	@ 0x23
 8004756:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8004758:	463b      	mov	r3, r7
 800475a:	2201      	movs	r2, #1
 800475c:	4619      	mov	r1, r3
 800475e:	4806      	ldr	r0, [pc, #24]	@ (8004778 <MX_RTC_Init+0xac>)
 8004760:	f002 ff2f 	bl	80075c2 <HAL_RTC_SetDate>
 8004764:	4603      	mov	r3, r0
 8004766:	2b00      	cmp	r3, #0
 8004768:	d001      	beq.n	800476e <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 800476a:	f7ff ffa9 	bl	80046c0 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800476e:	bf00      	nop
 8004770:	3718      	adds	r7, #24
 8004772:	46bd      	mov	sp, r7
 8004774:	bd80      	pop	{r7, pc}
 8004776:	bf00      	nop
 8004778:	200006ac 	.word	0x200006ac
 800477c:	40002800 	.word	0x40002800

08004780 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b086      	sub	sp, #24
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8004788:	f107 0308 	add.w	r3, r7, #8
 800478c:	2200      	movs	r2, #0
 800478e:	601a      	str	r2, [r3, #0]
 8004790:	605a      	str	r2, [r3, #4]
 8004792:	609a      	str	r2, [r3, #8]
 8004794:	60da      	str	r2, [r3, #12]
  if(rtcHandle->Instance==RTC)
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	4a0c      	ldr	r2, [pc, #48]	@ (80047cc <HAL_RTC_MspInit+0x4c>)
 800479c:	4293      	cmp	r3, r2
 800479e:	d111      	bne.n	80047c4 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80047a0:	2302      	movs	r3, #2
 80047a2:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80047a4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80047a8:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80047aa:	f107 0308 	add.w	r3, r7, #8
 80047ae:	4618      	mov	r0, r3
 80047b0:	f002 fcaa 	bl	8007108 <HAL_RCCEx_PeriphCLKConfig>
 80047b4:	4603      	mov	r3, r0
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d001      	beq.n	80047be <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 80047ba:	f7ff ff81 	bl	80046c0 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80047be:	4b04      	ldr	r3, [pc, #16]	@ (80047d0 <HAL_RTC_MspInit+0x50>)
 80047c0:	2201      	movs	r2, #1
 80047c2:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80047c4:	bf00      	nop
 80047c6:	3718      	adds	r7, #24
 80047c8:	46bd      	mov	sp, r7
 80047ca:	bd80      	pop	{r7, pc}
 80047cc:	40002800 	.word	0x40002800
 80047d0:	42470e3c 	.word	0x42470e3c

080047d4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80047d4:	b480      	push	{r7}
 80047d6:	b083      	sub	sp, #12
 80047d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80047da:	2300      	movs	r3, #0
 80047dc:	607b      	str	r3, [r7, #4]
 80047de:	4b10      	ldr	r3, [pc, #64]	@ (8004820 <HAL_MspInit+0x4c>)
 80047e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047e2:	4a0f      	ldr	r2, [pc, #60]	@ (8004820 <HAL_MspInit+0x4c>)
 80047e4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80047e8:	6453      	str	r3, [r2, #68]	@ 0x44
 80047ea:	4b0d      	ldr	r3, [pc, #52]	@ (8004820 <HAL_MspInit+0x4c>)
 80047ec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80047ee:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80047f2:	607b      	str	r3, [r7, #4]
 80047f4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80047f6:	2300      	movs	r3, #0
 80047f8:	603b      	str	r3, [r7, #0]
 80047fa:	4b09      	ldr	r3, [pc, #36]	@ (8004820 <HAL_MspInit+0x4c>)
 80047fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047fe:	4a08      	ldr	r2, [pc, #32]	@ (8004820 <HAL_MspInit+0x4c>)
 8004800:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004804:	6413      	str	r3, [r2, #64]	@ 0x40
 8004806:	4b06      	ldr	r3, [pc, #24]	@ (8004820 <HAL_MspInit+0x4c>)
 8004808:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800480a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800480e:	603b      	str	r3, [r7, #0]
 8004810:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8004812:	bf00      	nop
 8004814:	370c      	adds	r7, #12
 8004816:	46bd      	mov	sp, r7
 8004818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800481c:	4770      	bx	lr
 800481e:	bf00      	nop
 8004820:	40023800 	.word	0x40023800

08004824 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004824:	b480      	push	{r7}
 8004826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004828:	bf00      	nop
 800482a:	e7fd      	b.n	8004828 <NMI_Handler+0x4>

0800482c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800482c:	b480      	push	{r7}
 800482e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004830:	bf00      	nop
 8004832:	e7fd      	b.n	8004830 <HardFault_Handler+0x4>

08004834 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004834:	b480      	push	{r7}
 8004836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004838:	bf00      	nop
 800483a:	e7fd      	b.n	8004838 <MemManage_Handler+0x4>

0800483c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800483c:	b480      	push	{r7}
 800483e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004840:	bf00      	nop
 8004842:	e7fd      	b.n	8004840 <BusFault_Handler+0x4>

08004844 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004844:	b480      	push	{r7}
 8004846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004848:	bf00      	nop
 800484a:	e7fd      	b.n	8004848 <UsageFault_Handler+0x4>

0800484c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800484c:	b480      	push	{r7}
 800484e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004850:	bf00      	nop
 8004852:	46bd      	mov	sp, r7
 8004854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004858:	4770      	bx	lr

0800485a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800485a:	b480      	push	{r7}
 800485c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800485e:	bf00      	nop
 8004860:	46bd      	mov	sp, r7
 8004862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004866:	4770      	bx	lr

08004868 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004868:	b480      	push	{r7}
 800486a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800486c:	bf00      	nop
 800486e:	46bd      	mov	sp, r7
 8004870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004874:	4770      	bx	lr

08004876 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004876:	b580      	push	{r7, lr}
 8004878:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800487a:	f000 f9c9 	bl	8004c10 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800487e:	bf00      	nop
 8004880:	bd80      	pop	{r7, pc}

08004882 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8004882:	b480      	push	{r7}
 8004884:	af00      	add	r7, sp, #0
  return 1;
 8004886:	2301      	movs	r3, #1
}
 8004888:	4618      	mov	r0, r3
 800488a:	46bd      	mov	sp, r7
 800488c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004890:	4770      	bx	lr

08004892 <_kill>:

int _kill(int pid, int sig)
{
 8004892:	b580      	push	{r7, lr}
 8004894:	b082      	sub	sp, #8
 8004896:	af00      	add	r7, sp, #0
 8004898:	6078      	str	r0, [r7, #4]
 800489a:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800489c:	f004 fb16 	bl	8008ecc <__errno>
 80048a0:	4603      	mov	r3, r0
 80048a2:	2216      	movs	r2, #22
 80048a4:	601a      	str	r2, [r3, #0]
  return -1;
 80048a6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80048aa:	4618      	mov	r0, r3
 80048ac:	3708      	adds	r7, #8
 80048ae:	46bd      	mov	sp, r7
 80048b0:	bd80      	pop	{r7, pc}

080048b2 <_exit>:

void _exit (int status)
{
 80048b2:	b580      	push	{r7, lr}
 80048b4:	b082      	sub	sp, #8
 80048b6:	af00      	add	r7, sp, #0
 80048b8:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80048ba:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80048be:	6878      	ldr	r0, [r7, #4]
 80048c0:	f7ff ffe7 	bl	8004892 <_kill>
  while (1) {}    /* Make sure we hang here */
 80048c4:	bf00      	nop
 80048c6:	e7fd      	b.n	80048c4 <_exit+0x12>

080048c8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b086      	sub	sp, #24
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	60f8      	str	r0, [r7, #12]
 80048d0:	60b9      	str	r1, [r7, #8]
 80048d2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80048d4:	2300      	movs	r3, #0
 80048d6:	617b      	str	r3, [r7, #20]
 80048d8:	e00a      	b.n	80048f0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80048da:	f3af 8000 	nop.w
 80048de:	4601      	mov	r1, r0
 80048e0:	68bb      	ldr	r3, [r7, #8]
 80048e2:	1c5a      	adds	r2, r3, #1
 80048e4:	60ba      	str	r2, [r7, #8]
 80048e6:	b2ca      	uxtb	r2, r1
 80048e8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80048ea:	697b      	ldr	r3, [r7, #20]
 80048ec:	3301      	adds	r3, #1
 80048ee:	617b      	str	r3, [r7, #20]
 80048f0:	697a      	ldr	r2, [r7, #20]
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	429a      	cmp	r2, r3
 80048f6:	dbf0      	blt.n	80048da <_read+0x12>
  }

  return len;
 80048f8:	687b      	ldr	r3, [r7, #4]
}
 80048fa:	4618      	mov	r0, r3
 80048fc:	3718      	adds	r7, #24
 80048fe:	46bd      	mov	sp, r7
 8004900:	bd80      	pop	{r7, pc}

08004902 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8004902:	b580      	push	{r7, lr}
 8004904:	b086      	sub	sp, #24
 8004906:	af00      	add	r7, sp, #0
 8004908:	60f8      	str	r0, [r7, #12]
 800490a:	60b9      	str	r1, [r7, #8]
 800490c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800490e:	2300      	movs	r3, #0
 8004910:	617b      	str	r3, [r7, #20]
 8004912:	e009      	b.n	8004928 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8004914:	68bb      	ldr	r3, [r7, #8]
 8004916:	1c5a      	adds	r2, r3, #1
 8004918:	60ba      	str	r2, [r7, #8]
 800491a:	781b      	ldrb	r3, [r3, #0]
 800491c:	4618      	mov	r0, r3
 800491e:	f7ff fc51 	bl	80041c4 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004922:	697b      	ldr	r3, [r7, #20]
 8004924:	3301      	adds	r3, #1
 8004926:	617b      	str	r3, [r7, #20]
 8004928:	697a      	ldr	r2, [r7, #20]
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	429a      	cmp	r2, r3
 800492e:	dbf1      	blt.n	8004914 <_write+0x12>
  }
  return len;
 8004930:	687b      	ldr	r3, [r7, #4]
}
 8004932:	4618      	mov	r0, r3
 8004934:	3718      	adds	r7, #24
 8004936:	46bd      	mov	sp, r7
 8004938:	bd80      	pop	{r7, pc}

0800493a <_close>:

int _close(int file)
{
 800493a:	b480      	push	{r7}
 800493c:	b083      	sub	sp, #12
 800493e:	af00      	add	r7, sp, #0
 8004940:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8004942:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8004946:	4618      	mov	r0, r3
 8004948:	370c      	adds	r7, #12
 800494a:	46bd      	mov	sp, r7
 800494c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004950:	4770      	bx	lr

08004952 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004952:	b480      	push	{r7}
 8004954:	b083      	sub	sp, #12
 8004956:	af00      	add	r7, sp, #0
 8004958:	6078      	str	r0, [r7, #4]
 800495a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800495c:	683b      	ldr	r3, [r7, #0]
 800495e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004962:	605a      	str	r2, [r3, #4]
  return 0;
 8004964:	2300      	movs	r3, #0
}
 8004966:	4618      	mov	r0, r3
 8004968:	370c      	adds	r7, #12
 800496a:	46bd      	mov	sp, r7
 800496c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004970:	4770      	bx	lr

08004972 <_isatty>:

int _isatty(int file)
{
 8004972:	b480      	push	{r7}
 8004974:	b083      	sub	sp, #12
 8004976:	af00      	add	r7, sp, #0
 8004978:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800497a:	2301      	movs	r3, #1
}
 800497c:	4618      	mov	r0, r3
 800497e:	370c      	adds	r7, #12
 8004980:	46bd      	mov	sp, r7
 8004982:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004986:	4770      	bx	lr

08004988 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8004988:	b480      	push	{r7}
 800498a:	b085      	sub	sp, #20
 800498c:	af00      	add	r7, sp, #0
 800498e:	60f8      	str	r0, [r7, #12]
 8004990:	60b9      	str	r1, [r7, #8]
 8004992:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004994:	2300      	movs	r3, #0
}
 8004996:	4618      	mov	r0, r3
 8004998:	3714      	adds	r7, #20
 800499a:	46bd      	mov	sp, r7
 800499c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049a0:	4770      	bx	lr
	...

080049a4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b086      	sub	sp, #24
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80049ac:	4a14      	ldr	r2, [pc, #80]	@ (8004a00 <_sbrk+0x5c>)
 80049ae:	4b15      	ldr	r3, [pc, #84]	@ (8004a04 <_sbrk+0x60>)
 80049b0:	1ad3      	subs	r3, r2, r3
 80049b2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80049b4:	697b      	ldr	r3, [r7, #20]
 80049b6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80049b8:	4b13      	ldr	r3, [pc, #76]	@ (8004a08 <_sbrk+0x64>)
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	2b00      	cmp	r3, #0
 80049be:	d102      	bne.n	80049c6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80049c0:	4b11      	ldr	r3, [pc, #68]	@ (8004a08 <_sbrk+0x64>)
 80049c2:	4a12      	ldr	r2, [pc, #72]	@ (8004a0c <_sbrk+0x68>)
 80049c4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80049c6:	4b10      	ldr	r3, [pc, #64]	@ (8004a08 <_sbrk+0x64>)
 80049c8:	681a      	ldr	r2, [r3, #0]
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	4413      	add	r3, r2
 80049ce:	693a      	ldr	r2, [r7, #16]
 80049d0:	429a      	cmp	r2, r3
 80049d2:	d207      	bcs.n	80049e4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80049d4:	f004 fa7a 	bl	8008ecc <__errno>
 80049d8:	4603      	mov	r3, r0
 80049da:	220c      	movs	r2, #12
 80049dc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80049de:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80049e2:	e009      	b.n	80049f8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80049e4:	4b08      	ldr	r3, [pc, #32]	@ (8004a08 <_sbrk+0x64>)
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80049ea:	4b07      	ldr	r3, [pc, #28]	@ (8004a08 <_sbrk+0x64>)
 80049ec:	681a      	ldr	r2, [r3, #0]
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	4413      	add	r3, r2
 80049f2:	4a05      	ldr	r2, [pc, #20]	@ (8004a08 <_sbrk+0x64>)
 80049f4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80049f6:	68fb      	ldr	r3, [r7, #12]
}
 80049f8:	4618      	mov	r0, r3
 80049fa:	3718      	adds	r7, #24
 80049fc:	46bd      	mov	sp, r7
 80049fe:	bd80      	pop	{r7, pc}
 8004a00:	20020000 	.word	0x20020000
 8004a04:	00000400 	.word	0x00000400
 8004a08:	200006cc 	.word	0x200006cc
 8004a0c:	20000868 	.word	0x20000868

08004a10 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004a10:	b480      	push	{r7}
 8004a12:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004a14:	4b06      	ldr	r3, [pc, #24]	@ (8004a30 <SystemInit+0x20>)
 8004a16:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a1a:	4a05      	ldr	r2, [pc, #20]	@ (8004a30 <SystemInit+0x20>)
 8004a1c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004a20:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004a24:	bf00      	nop
 8004a26:	46bd      	mov	sp, r7
 8004a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a2c:	4770      	bx	lr
 8004a2e:	bf00      	nop
 8004a30:	e000ed00 	.word	0xe000ed00

08004a34 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8004a34:	b580      	push	{r7, lr}
 8004a36:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004a38:	4b11      	ldr	r3, [pc, #68]	@ (8004a80 <MX_USART1_UART_Init+0x4c>)
 8004a3a:	4a12      	ldr	r2, [pc, #72]	@ (8004a84 <MX_USART1_UART_Init+0x50>)
 8004a3c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8004a3e:	4b10      	ldr	r3, [pc, #64]	@ (8004a80 <MX_USART1_UART_Init+0x4c>)
 8004a40:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8004a44:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004a46:	4b0e      	ldr	r3, [pc, #56]	@ (8004a80 <MX_USART1_UART_Init+0x4c>)
 8004a48:	2200      	movs	r2, #0
 8004a4a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004a4c:	4b0c      	ldr	r3, [pc, #48]	@ (8004a80 <MX_USART1_UART_Init+0x4c>)
 8004a4e:	2200      	movs	r2, #0
 8004a50:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004a52:	4b0b      	ldr	r3, [pc, #44]	@ (8004a80 <MX_USART1_UART_Init+0x4c>)
 8004a54:	2200      	movs	r2, #0
 8004a56:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004a58:	4b09      	ldr	r3, [pc, #36]	@ (8004a80 <MX_USART1_UART_Init+0x4c>)
 8004a5a:	220c      	movs	r2, #12
 8004a5c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004a5e:	4b08      	ldr	r3, [pc, #32]	@ (8004a80 <MX_USART1_UART_Init+0x4c>)
 8004a60:	2200      	movs	r2, #0
 8004a62:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004a64:	4b06      	ldr	r3, [pc, #24]	@ (8004a80 <MX_USART1_UART_Init+0x4c>)
 8004a66:	2200      	movs	r2, #0
 8004a68:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004a6a:	4805      	ldr	r0, [pc, #20]	@ (8004a80 <MX_USART1_UART_Init+0x4c>)
 8004a6c:	f002 ff3a 	bl	80078e4 <HAL_UART_Init>
 8004a70:	4603      	mov	r3, r0
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d001      	beq.n	8004a7a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8004a76:	f7ff fe23 	bl	80046c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004a7a:	bf00      	nop
 8004a7c:	bd80      	pop	{r7, pc}
 8004a7e:	bf00      	nop
 8004a80:	200006d0 	.word	0x200006d0
 8004a84:	40011000 	.word	0x40011000

08004a88 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b08a      	sub	sp, #40	@ 0x28
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004a90:	f107 0314 	add.w	r3, r7, #20
 8004a94:	2200      	movs	r2, #0
 8004a96:	601a      	str	r2, [r3, #0]
 8004a98:	605a      	str	r2, [r3, #4]
 8004a9a:	609a      	str	r2, [r3, #8]
 8004a9c:	60da      	str	r2, [r3, #12]
 8004a9e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	4a19      	ldr	r2, [pc, #100]	@ (8004b0c <HAL_UART_MspInit+0x84>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d12c      	bne.n	8004b04 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004aaa:	2300      	movs	r3, #0
 8004aac:	613b      	str	r3, [r7, #16]
 8004aae:	4b18      	ldr	r3, [pc, #96]	@ (8004b10 <HAL_UART_MspInit+0x88>)
 8004ab0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ab2:	4a17      	ldr	r2, [pc, #92]	@ (8004b10 <HAL_UART_MspInit+0x88>)
 8004ab4:	f043 0310 	orr.w	r3, r3, #16
 8004ab8:	6453      	str	r3, [r2, #68]	@ 0x44
 8004aba:	4b15      	ldr	r3, [pc, #84]	@ (8004b10 <HAL_UART_MspInit+0x88>)
 8004abc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004abe:	f003 0310 	and.w	r3, r3, #16
 8004ac2:	613b      	str	r3, [r7, #16]
 8004ac4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004ac6:	2300      	movs	r3, #0
 8004ac8:	60fb      	str	r3, [r7, #12]
 8004aca:	4b11      	ldr	r3, [pc, #68]	@ (8004b10 <HAL_UART_MspInit+0x88>)
 8004acc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ace:	4a10      	ldr	r2, [pc, #64]	@ (8004b10 <HAL_UART_MspInit+0x88>)
 8004ad0:	f043 0301 	orr.w	r3, r3, #1
 8004ad4:	6313      	str	r3, [r2, #48]	@ 0x30
 8004ad6:	4b0e      	ldr	r3, [pc, #56]	@ (8004b10 <HAL_UART_MspInit+0x88>)
 8004ad8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ada:	f003 0301 	and.w	r3, r3, #1
 8004ade:	60fb      	str	r3, [r7, #12]
 8004ae0:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8004ae2:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8004ae6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004ae8:	2302      	movs	r3, #2
 8004aea:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004aec:	2300      	movs	r3, #0
 8004aee:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004af0:	2303      	movs	r3, #3
 8004af2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004af4:	2307      	movs	r3, #7
 8004af6:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004af8:	f107 0314 	add.w	r3, r7, #20
 8004afc:	4619      	mov	r1, r3
 8004afe:	4805      	ldr	r0, [pc, #20]	@ (8004b14 <HAL_UART_MspInit+0x8c>)
 8004b00:	f000 f9b0 	bl	8004e64 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8004b04:	bf00      	nop
 8004b06:	3728      	adds	r7, #40	@ 0x28
 8004b08:	46bd      	mov	sp, r7
 8004b0a:	bd80      	pop	{r7, pc}
 8004b0c:	40011000 	.word	0x40011000
 8004b10:	40023800 	.word	0x40023800
 8004b14:	40020000 	.word	0x40020000

08004b18 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004b18:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004b50 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004b1c:	480d      	ldr	r0, [pc, #52]	@ (8004b54 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004b1e:	490e      	ldr	r1, [pc, #56]	@ (8004b58 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004b20:	4a0e      	ldr	r2, [pc, #56]	@ (8004b5c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004b22:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004b24:	e002      	b.n	8004b2c <LoopCopyDataInit>

08004b26 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004b26:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004b28:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004b2a:	3304      	adds	r3, #4

08004b2c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004b2c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004b2e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004b30:	d3f9      	bcc.n	8004b26 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004b32:	4a0b      	ldr	r2, [pc, #44]	@ (8004b60 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004b34:	4c0b      	ldr	r4, [pc, #44]	@ (8004b64 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004b36:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004b38:	e001      	b.n	8004b3e <LoopFillZerobss>

08004b3a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004b3a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004b3c:	3204      	adds	r2, #4

08004b3e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004b3e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004b40:	d3fb      	bcc.n	8004b3a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004b42:	f7ff ff65 	bl	8004a10 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004b46:	f004 f9c7 	bl	8008ed8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004b4a:	f7ff fb4d 	bl	80041e8 <main>
  bx  lr    
 8004b4e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004b50:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004b54:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004b58:	20000288 	.word	0x20000288
  ldr r2, =_sidata
 8004b5c:	0800d3c0 	.word	0x0800d3c0
  ldr r2, =_sbss
 8004b60:	20000288 	.word	0x20000288
  ldr r4, =_ebss
 8004b64:	20000868 	.word	0x20000868

08004b68 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004b68:	e7fe      	b.n	8004b68 <ADC_IRQHandler>
	...

08004b6c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004b6c:	b580      	push	{r7, lr}
 8004b6e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004b70:	4b0e      	ldr	r3, [pc, #56]	@ (8004bac <HAL_Init+0x40>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	4a0d      	ldr	r2, [pc, #52]	@ (8004bac <HAL_Init+0x40>)
 8004b76:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004b7a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004b7c:	4b0b      	ldr	r3, [pc, #44]	@ (8004bac <HAL_Init+0x40>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	4a0a      	ldr	r2, [pc, #40]	@ (8004bac <HAL_Init+0x40>)
 8004b82:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004b86:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004b88:	4b08      	ldr	r3, [pc, #32]	@ (8004bac <HAL_Init+0x40>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	4a07      	ldr	r2, [pc, #28]	@ (8004bac <HAL_Init+0x40>)
 8004b8e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004b92:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004b94:	2003      	movs	r0, #3
 8004b96:	f000 f931 	bl	8004dfc <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004b9a:	200f      	movs	r0, #15
 8004b9c:	f000 f808 	bl	8004bb0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004ba0:	f7ff fe18 	bl	80047d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004ba4:	2300      	movs	r3, #0
}
 8004ba6:	4618      	mov	r0, r3
 8004ba8:	bd80      	pop	{r7, pc}
 8004baa:	bf00      	nop
 8004bac:	40023c00 	.word	0x40023c00

08004bb0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004bb0:	b580      	push	{r7, lr}
 8004bb2:	b082      	sub	sp, #8
 8004bb4:	af00      	add	r7, sp, #0
 8004bb6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004bb8:	4b12      	ldr	r3, [pc, #72]	@ (8004c04 <HAL_InitTick+0x54>)
 8004bba:	681a      	ldr	r2, [r3, #0]
 8004bbc:	4b12      	ldr	r3, [pc, #72]	@ (8004c08 <HAL_InitTick+0x58>)
 8004bbe:	781b      	ldrb	r3, [r3, #0]
 8004bc0:	4619      	mov	r1, r3
 8004bc2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004bc6:	fbb3 f3f1 	udiv	r3, r3, r1
 8004bca:	fbb2 f3f3 	udiv	r3, r2, r3
 8004bce:	4618      	mov	r0, r3
 8004bd0:	f000 f93b 	bl	8004e4a <HAL_SYSTICK_Config>
 8004bd4:	4603      	mov	r3, r0
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d001      	beq.n	8004bde <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004bda:	2301      	movs	r3, #1
 8004bdc:	e00e      	b.n	8004bfc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	2b0f      	cmp	r3, #15
 8004be2:	d80a      	bhi.n	8004bfa <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004be4:	2200      	movs	r2, #0
 8004be6:	6879      	ldr	r1, [r7, #4]
 8004be8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004bec:	f000 f911 	bl	8004e12 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004bf0:	4a06      	ldr	r2, [pc, #24]	@ (8004c0c <HAL_InitTick+0x5c>)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004bf6:	2300      	movs	r3, #0
 8004bf8:	e000      	b.n	8004bfc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004bfa:	2301      	movs	r3, #1
}
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	3708      	adds	r7, #8
 8004c00:	46bd      	mov	sp, r7
 8004c02:	bd80      	pop	{r7, pc}
 8004c04:	200000a4 	.word	0x200000a4
 8004c08:	200000ac 	.word	0x200000ac
 8004c0c:	200000a8 	.word	0x200000a8

08004c10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004c10:	b480      	push	{r7}
 8004c12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004c14:	4b06      	ldr	r3, [pc, #24]	@ (8004c30 <HAL_IncTick+0x20>)
 8004c16:	781b      	ldrb	r3, [r3, #0]
 8004c18:	461a      	mov	r2, r3
 8004c1a:	4b06      	ldr	r3, [pc, #24]	@ (8004c34 <HAL_IncTick+0x24>)
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	4413      	add	r3, r2
 8004c20:	4a04      	ldr	r2, [pc, #16]	@ (8004c34 <HAL_IncTick+0x24>)
 8004c22:	6013      	str	r3, [r2, #0]
}
 8004c24:	bf00      	nop
 8004c26:	46bd      	mov	sp, r7
 8004c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2c:	4770      	bx	lr
 8004c2e:	bf00      	nop
 8004c30:	200000ac 	.word	0x200000ac
 8004c34:	20000718 	.word	0x20000718

08004c38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004c38:	b480      	push	{r7}
 8004c3a:	af00      	add	r7, sp, #0
  return uwTick;
 8004c3c:	4b03      	ldr	r3, [pc, #12]	@ (8004c4c <HAL_GetTick+0x14>)
 8004c3e:	681b      	ldr	r3, [r3, #0]
}
 8004c40:	4618      	mov	r0, r3
 8004c42:	46bd      	mov	sp, r7
 8004c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c48:	4770      	bx	lr
 8004c4a:	bf00      	nop
 8004c4c:	20000718 	.word	0x20000718

08004c50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004c50:	b580      	push	{r7, lr}
 8004c52:	b084      	sub	sp, #16
 8004c54:	af00      	add	r7, sp, #0
 8004c56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004c58:	f7ff ffee 	bl	8004c38 <HAL_GetTick>
 8004c5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004c68:	d005      	beq.n	8004c76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004c6a:	4b0a      	ldr	r3, [pc, #40]	@ (8004c94 <HAL_Delay+0x44>)
 8004c6c:	781b      	ldrb	r3, [r3, #0]
 8004c6e:	461a      	mov	r2, r3
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	4413      	add	r3, r2
 8004c74:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004c76:	bf00      	nop
 8004c78:	f7ff ffde 	bl	8004c38 <HAL_GetTick>
 8004c7c:	4602      	mov	r2, r0
 8004c7e:	68bb      	ldr	r3, [r7, #8]
 8004c80:	1ad3      	subs	r3, r2, r3
 8004c82:	68fa      	ldr	r2, [r7, #12]
 8004c84:	429a      	cmp	r2, r3
 8004c86:	d8f7      	bhi.n	8004c78 <HAL_Delay+0x28>
  {
  }
}
 8004c88:	bf00      	nop
 8004c8a:	bf00      	nop
 8004c8c:	3710      	adds	r7, #16
 8004c8e:	46bd      	mov	sp, r7
 8004c90:	bd80      	pop	{r7, pc}
 8004c92:	bf00      	nop
 8004c94:	200000ac 	.word	0x200000ac

08004c98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004c98:	b480      	push	{r7}
 8004c9a:	b085      	sub	sp, #20
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	f003 0307 	and.w	r3, r3, #7
 8004ca6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004ca8:	4b0c      	ldr	r3, [pc, #48]	@ (8004cdc <__NVIC_SetPriorityGrouping+0x44>)
 8004caa:	68db      	ldr	r3, [r3, #12]
 8004cac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004cae:	68ba      	ldr	r2, [r7, #8]
 8004cb0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004cb4:	4013      	ands	r3, r2
 8004cb6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004cbc:	68bb      	ldr	r3, [r7, #8]
 8004cbe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004cc0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004cc4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004cc8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004cca:	4a04      	ldr	r2, [pc, #16]	@ (8004cdc <__NVIC_SetPriorityGrouping+0x44>)
 8004ccc:	68bb      	ldr	r3, [r7, #8]
 8004cce:	60d3      	str	r3, [r2, #12]
}
 8004cd0:	bf00      	nop
 8004cd2:	3714      	adds	r7, #20
 8004cd4:	46bd      	mov	sp, r7
 8004cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cda:	4770      	bx	lr
 8004cdc:	e000ed00 	.word	0xe000ed00

08004ce0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004ce0:	b480      	push	{r7}
 8004ce2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004ce4:	4b04      	ldr	r3, [pc, #16]	@ (8004cf8 <__NVIC_GetPriorityGrouping+0x18>)
 8004ce6:	68db      	ldr	r3, [r3, #12]
 8004ce8:	0a1b      	lsrs	r3, r3, #8
 8004cea:	f003 0307 	and.w	r3, r3, #7
}
 8004cee:	4618      	mov	r0, r3
 8004cf0:	46bd      	mov	sp, r7
 8004cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf6:	4770      	bx	lr
 8004cf8:	e000ed00 	.word	0xe000ed00

08004cfc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004cfc:	b480      	push	{r7}
 8004cfe:	b083      	sub	sp, #12
 8004d00:	af00      	add	r7, sp, #0
 8004d02:	4603      	mov	r3, r0
 8004d04:	6039      	str	r1, [r7, #0]
 8004d06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004d08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	db0a      	blt.n	8004d26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004d10:	683b      	ldr	r3, [r7, #0]
 8004d12:	b2da      	uxtb	r2, r3
 8004d14:	490c      	ldr	r1, [pc, #48]	@ (8004d48 <__NVIC_SetPriority+0x4c>)
 8004d16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d1a:	0112      	lsls	r2, r2, #4
 8004d1c:	b2d2      	uxtb	r2, r2
 8004d1e:	440b      	add	r3, r1
 8004d20:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004d24:	e00a      	b.n	8004d3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004d26:	683b      	ldr	r3, [r7, #0]
 8004d28:	b2da      	uxtb	r2, r3
 8004d2a:	4908      	ldr	r1, [pc, #32]	@ (8004d4c <__NVIC_SetPriority+0x50>)
 8004d2c:	79fb      	ldrb	r3, [r7, #7]
 8004d2e:	f003 030f 	and.w	r3, r3, #15
 8004d32:	3b04      	subs	r3, #4
 8004d34:	0112      	lsls	r2, r2, #4
 8004d36:	b2d2      	uxtb	r2, r2
 8004d38:	440b      	add	r3, r1
 8004d3a:	761a      	strb	r2, [r3, #24]
}
 8004d3c:	bf00      	nop
 8004d3e:	370c      	adds	r7, #12
 8004d40:	46bd      	mov	sp, r7
 8004d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d46:	4770      	bx	lr
 8004d48:	e000e100 	.word	0xe000e100
 8004d4c:	e000ed00 	.word	0xe000ed00

08004d50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004d50:	b480      	push	{r7}
 8004d52:	b089      	sub	sp, #36	@ 0x24
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	60f8      	str	r0, [r7, #12]
 8004d58:	60b9      	str	r1, [r7, #8]
 8004d5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	f003 0307 	and.w	r3, r3, #7
 8004d62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004d64:	69fb      	ldr	r3, [r7, #28]
 8004d66:	f1c3 0307 	rsb	r3, r3, #7
 8004d6a:	2b04      	cmp	r3, #4
 8004d6c:	bf28      	it	cs
 8004d6e:	2304      	movcs	r3, #4
 8004d70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004d72:	69fb      	ldr	r3, [r7, #28]
 8004d74:	3304      	adds	r3, #4
 8004d76:	2b06      	cmp	r3, #6
 8004d78:	d902      	bls.n	8004d80 <NVIC_EncodePriority+0x30>
 8004d7a:	69fb      	ldr	r3, [r7, #28]
 8004d7c:	3b03      	subs	r3, #3
 8004d7e:	e000      	b.n	8004d82 <NVIC_EncodePriority+0x32>
 8004d80:	2300      	movs	r3, #0
 8004d82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004d84:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004d88:	69bb      	ldr	r3, [r7, #24]
 8004d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8004d8e:	43da      	mvns	r2, r3
 8004d90:	68bb      	ldr	r3, [r7, #8]
 8004d92:	401a      	ands	r2, r3
 8004d94:	697b      	ldr	r3, [r7, #20]
 8004d96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004d98:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8004d9c:	697b      	ldr	r3, [r7, #20]
 8004d9e:	fa01 f303 	lsl.w	r3, r1, r3
 8004da2:	43d9      	mvns	r1, r3
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004da8:	4313      	orrs	r3, r2
         );
}
 8004daa:	4618      	mov	r0, r3
 8004dac:	3724      	adds	r7, #36	@ 0x24
 8004dae:	46bd      	mov	sp, r7
 8004db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db4:	4770      	bx	lr
	...

08004db8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004db8:	b580      	push	{r7, lr}
 8004dba:	b082      	sub	sp, #8
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	3b01      	subs	r3, #1
 8004dc4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004dc8:	d301      	bcc.n	8004dce <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004dca:	2301      	movs	r3, #1
 8004dcc:	e00f      	b.n	8004dee <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004dce:	4a0a      	ldr	r2, [pc, #40]	@ (8004df8 <SysTick_Config+0x40>)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	3b01      	subs	r3, #1
 8004dd4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004dd6:	210f      	movs	r1, #15
 8004dd8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004ddc:	f7ff ff8e 	bl	8004cfc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004de0:	4b05      	ldr	r3, [pc, #20]	@ (8004df8 <SysTick_Config+0x40>)
 8004de2:	2200      	movs	r2, #0
 8004de4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004de6:	4b04      	ldr	r3, [pc, #16]	@ (8004df8 <SysTick_Config+0x40>)
 8004de8:	2207      	movs	r2, #7
 8004dea:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004dec:	2300      	movs	r3, #0
}
 8004dee:	4618      	mov	r0, r3
 8004df0:	3708      	adds	r7, #8
 8004df2:	46bd      	mov	sp, r7
 8004df4:	bd80      	pop	{r7, pc}
 8004df6:	bf00      	nop
 8004df8:	e000e010 	.word	0xe000e010

08004dfc <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004dfc:	b580      	push	{r7, lr}
 8004dfe:	b082      	sub	sp, #8
 8004e00:	af00      	add	r7, sp, #0
 8004e02:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004e04:	6878      	ldr	r0, [r7, #4]
 8004e06:	f7ff ff47 	bl	8004c98 <__NVIC_SetPriorityGrouping>
}
 8004e0a:	bf00      	nop
 8004e0c:	3708      	adds	r7, #8
 8004e0e:	46bd      	mov	sp, r7
 8004e10:	bd80      	pop	{r7, pc}

08004e12 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004e12:	b580      	push	{r7, lr}
 8004e14:	b086      	sub	sp, #24
 8004e16:	af00      	add	r7, sp, #0
 8004e18:	4603      	mov	r3, r0
 8004e1a:	60b9      	str	r1, [r7, #8]
 8004e1c:	607a      	str	r2, [r7, #4]
 8004e1e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004e20:	2300      	movs	r3, #0
 8004e22:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004e24:	f7ff ff5c 	bl	8004ce0 <__NVIC_GetPriorityGrouping>
 8004e28:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004e2a:	687a      	ldr	r2, [r7, #4]
 8004e2c:	68b9      	ldr	r1, [r7, #8]
 8004e2e:	6978      	ldr	r0, [r7, #20]
 8004e30:	f7ff ff8e 	bl	8004d50 <NVIC_EncodePriority>
 8004e34:	4602      	mov	r2, r0
 8004e36:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004e3a:	4611      	mov	r1, r2
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	f7ff ff5d 	bl	8004cfc <__NVIC_SetPriority>
}
 8004e42:	bf00      	nop
 8004e44:	3718      	adds	r7, #24
 8004e46:	46bd      	mov	sp, r7
 8004e48:	bd80      	pop	{r7, pc}

08004e4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004e4a:	b580      	push	{r7, lr}
 8004e4c:	b082      	sub	sp, #8
 8004e4e:	af00      	add	r7, sp, #0
 8004e50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004e52:	6878      	ldr	r0, [r7, #4]
 8004e54:	f7ff ffb0 	bl	8004db8 <SysTick_Config>
 8004e58:	4603      	mov	r3, r0
}
 8004e5a:	4618      	mov	r0, r3
 8004e5c:	3708      	adds	r7, #8
 8004e5e:	46bd      	mov	sp, r7
 8004e60:	bd80      	pop	{r7, pc}
	...

08004e64 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004e64:	b480      	push	{r7}
 8004e66:	b089      	sub	sp, #36	@ 0x24
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
 8004e6c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004e6e:	2300      	movs	r3, #0
 8004e70:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004e72:	2300      	movs	r3, #0
 8004e74:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004e76:	2300      	movs	r3, #0
 8004e78:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004e7a:	2300      	movs	r3, #0
 8004e7c:	61fb      	str	r3, [r7, #28]
 8004e7e:	e16b      	b.n	8005158 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004e80:	2201      	movs	r2, #1
 8004e82:	69fb      	ldr	r3, [r7, #28]
 8004e84:	fa02 f303 	lsl.w	r3, r2, r3
 8004e88:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004e8a:	683b      	ldr	r3, [r7, #0]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	697a      	ldr	r2, [r7, #20]
 8004e90:	4013      	ands	r3, r2
 8004e92:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004e94:	693a      	ldr	r2, [r7, #16]
 8004e96:	697b      	ldr	r3, [r7, #20]
 8004e98:	429a      	cmp	r2, r3
 8004e9a:	f040 815a 	bne.w	8005152 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004e9e:	683b      	ldr	r3, [r7, #0]
 8004ea0:	685b      	ldr	r3, [r3, #4]
 8004ea2:	f003 0303 	and.w	r3, r3, #3
 8004ea6:	2b01      	cmp	r3, #1
 8004ea8:	d005      	beq.n	8004eb6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	685b      	ldr	r3, [r3, #4]
 8004eae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004eb2:	2b02      	cmp	r3, #2
 8004eb4:	d130      	bne.n	8004f18 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	689b      	ldr	r3, [r3, #8]
 8004eba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004ebc:	69fb      	ldr	r3, [r7, #28]
 8004ebe:	005b      	lsls	r3, r3, #1
 8004ec0:	2203      	movs	r2, #3
 8004ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ec6:	43db      	mvns	r3, r3
 8004ec8:	69ba      	ldr	r2, [r7, #24]
 8004eca:	4013      	ands	r3, r2
 8004ecc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004ece:	683b      	ldr	r3, [r7, #0]
 8004ed0:	68da      	ldr	r2, [r3, #12]
 8004ed2:	69fb      	ldr	r3, [r7, #28]
 8004ed4:	005b      	lsls	r3, r3, #1
 8004ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8004eda:	69ba      	ldr	r2, [r7, #24]
 8004edc:	4313      	orrs	r3, r2
 8004ede:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	69ba      	ldr	r2, [r7, #24]
 8004ee4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	685b      	ldr	r3, [r3, #4]
 8004eea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004eec:	2201      	movs	r2, #1
 8004eee:	69fb      	ldr	r3, [r7, #28]
 8004ef0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ef4:	43db      	mvns	r3, r3
 8004ef6:	69ba      	ldr	r2, [r7, #24]
 8004ef8:	4013      	ands	r3, r2
 8004efa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	685b      	ldr	r3, [r3, #4]
 8004f00:	091b      	lsrs	r3, r3, #4
 8004f02:	f003 0201 	and.w	r2, r3, #1
 8004f06:	69fb      	ldr	r3, [r7, #28]
 8004f08:	fa02 f303 	lsl.w	r3, r2, r3
 8004f0c:	69ba      	ldr	r2, [r7, #24]
 8004f0e:	4313      	orrs	r3, r2
 8004f10:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	69ba      	ldr	r2, [r7, #24]
 8004f16:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	685b      	ldr	r3, [r3, #4]
 8004f1c:	f003 0303 	and.w	r3, r3, #3
 8004f20:	2b03      	cmp	r3, #3
 8004f22:	d017      	beq.n	8004f54 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	68db      	ldr	r3, [r3, #12]
 8004f28:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004f2a:	69fb      	ldr	r3, [r7, #28]
 8004f2c:	005b      	lsls	r3, r3, #1
 8004f2e:	2203      	movs	r2, #3
 8004f30:	fa02 f303 	lsl.w	r3, r2, r3
 8004f34:	43db      	mvns	r3, r3
 8004f36:	69ba      	ldr	r2, [r7, #24]
 8004f38:	4013      	ands	r3, r2
 8004f3a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004f3c:	683b      	ldr	r3, [r7, #0]
 8004f3e:	689a      	ldr	r2, [r3, #8]
 8004f40:	69fb      	ldr	r3, [r7, #28]
 8004f42:	005b      	lsls	r3, r3, #1
 8004f44:	fa02 f303 	lsl.w	r3, r2, r3
 8004f48:	69ba      	ldr	r2, [r7, #24]
 8004f4a:	4313      	orrs	r3, r2
 8004f4c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	69ba      	ldr	r2, [r7, #24]
 8004f52:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	685b      	ldr	r3, [r3, #4]
 8004f58:	f003 0303 	and.w	r3, r3, #3
 8004f5c:	2b02      	cmp	r3, #2
 8004f5e:	d123      	bne.n	8004fa8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004f60:	69fb      	ldr	r3, [r7, #28]
 8004f62:	08da      	lsrs	r2, r3, #3
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	3208      	adds	r2, #8
 8004f68:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004f6e:	69fb      	ldr	r3, [r7, #28]
 8004f70:	f003 0307 	and.w	r3, r3, #7
 8004f74:	009b      	lsls	r3, r3, #2
 8004f76:	220f      	movs	r2, #15
 8004f78:	fa02 f303 	lsl.w	r3, r2, r3
 8004f7c:	43db      	mvns	r3, r3
 8004f7e:	69ba      	ldr	r2, [r7, #24]
 8004f80:	4013      	ands	r3, r2
 8004f82:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	691a      	ldr	r2, [r3, #16]
 8004f88:	69fb      	ldr	r3, [r7, #28]
 8004f8a:	f003 0307 	and.w	r3, r3, #7
 8004f8e:	009b      	lsls	r3, r3, #2
 8004f90:	fa02 f303 	lsl.w	r3, r2, r3
 8004f94:	69ba      	ldr	r2, [r7, #24]
 8004f96:	4313      	orrs	r3, r2
 8004f98:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004f9a:	69fb      	ldr	r3, [r7, #28]
 8004f9c:	08da      	lsrs	r2, r3, #3
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	3208      	adds	r2, #8
 8004fa2:	69b9      	ldr	r1, [r7, #24]
 8004fa4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004fae:	69fb      	ldr	r3, [r7, #28]
 8004fb0:	005b      	lsls	r3, r3, #1
 8004fb2:	2203      	movs	r2, #3
 8004fb4:	fa02 f303 	lsl.w	r3, r2, r3
 8004fb8:	43db      	mvns	r3, r3
 8004fba:	69ba      	ldr	r2, [r7, #24]
 8004fbc:	4013      	ands	r3, r2
 8004fbe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004fc0:	683b      	ldr	r3, [r7, #0]
 8004fc2:	685b      	ldr	r3, [r3, #4]
 8004fc4:	f003 0203 	and.w	r2, r3, #3
 8004fc8:	69fb      	ldr	r3, [r7, #28]
 8004fca:	005b      	lsls	r3, r3, #1
 8004fcc:	fa02 f303 	lsl.w	r3, r2, r3
 8004fd0:	69ba      	ldr	r2, [r7, #24]
 8004fd2:	4313      	orrs	r3, r2
 8004fd4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	69ba      	ldr	r2, [r7, #24]
 8004fda:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	685b      	ldr	r3, [r3, #4]
 8004fe0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	f000 80b4 	beq.w	8005152 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004fea:	2300      	movs	r3, #0
 8004fec:	60fb      	str	r3, [r7, #12]
 8004fee:	4b60      	ldr	r3, [pc, #384]	@ (8005170 <HAL_GPIO_Init+0x30c>)
 8004ff0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ff2:	4a5f      	ldr	r2, [pc, #380]	@ (8005170 <HAL_GPIO_Init+0x30c>)
 8004ff4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004ff8:	6453      	str	r3, [r2, #68]	@ 0x44
 8004ffa:	4b5d      	ldr	r3, [pc, #372]	@ (8005170 <HAL_GPIO_Init+0x30c>)
 8004ffc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004ffe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005002:	60fb      	str	r3, [r7, #12]
 8005004:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8005006:	4a5b      	ldr	r2, [pc, #364]	@ (8005174 <HAL_GPIO_Init+0x310>)
 8005008:	69fb      	ldr	r3, [r7, #28]
 800500a:	089b      	lsrs	r3, r3, #2
 800500c:	3302      	adds	r3, #2
 800500e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005012:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8005014:	69fb      	ldr	r3, [r7, #28]
 8005016:	f003 0303 	and.w	r3, r3, #3
 800501a:	009b      	lsls	r3, r3, #2
 800501c:	220f      	movs	r2, #15
 800501e:	fa02 f303 	lsl.w	r3, r2, r3
 8005022:	43db      	mvns	r3, r3
 8005024:	69ba      	ldr	r2, [r7, #24]
 8005026:	4013      	ands	r3, r2
 8005028:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	4a52      	ldr	r2, [pc, #328]	@ (8005178 <HAL_GPIO_Init+0x314>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d02b      	beq.n	800508a <HAL_GPIO_Init+0x226>
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	4a51      	ldr	r2, [pc, #324]	@ (800517c <HAL_GPIO_Init+0x318>)
 8005036:	4293      	cmp	r3, r2
 8005038:	d025      	beq.n	8005086 <HAL_GPIO_Init+0x222>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	4a50      	ldr	r2, [pc, #320]	@ (8005180 <HAL_GPIO_Init+0x31c>)
 800503e:	4293      	cmp	r3, r2
 8005040:	d01f      	beq.n	8005082 <HAL_GPIO_Init+0x21e>
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	4a4f      	ldr	r2, [pc, #316]	@ (8005184 <HAL_GPIO_Init+0x320>)
 8005046:	4293      	cmp	r3, r2
 8005048:	d019      	beq.n	800507e <HAL_GPIO_Init+0x21a>
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	4a4e      	ldr	r2, [pc, #312]	@ (8005188 <HAL_GPIO_Init+0x324>)
 800504e:	4293      	cmp	r3, r2
 8005050:	d013      	beq.n	800507a <HAL_GPIO_Init+0x216>
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	4a4d      	ldr	r2, [pc, #308]	@ (800518c <HAL_GPIO_Init+0x328>)
 8005056:	4293      	cmp	r3, r2
 8005058:	d00d      	beq.n	8005076 <HAL_GPIO_Init+0x212>
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	4a4c      	ldr	r2, [pc, #304]	@ (8005190 <HAL_GPIO_Init+0x32c>)
 800505e:	4293      	cmp	r3, r2
 8005060:	d007      	beq.n	8005072 <HAL_GPIO_Init+0x20e>
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	4a4b      	ldr	r2, [pc, #300]	@ (8005194 <HAL_GPIO_Init+0x330>)
 8005066:	4293      	cmp	r3, r2
 8005068:	d101      	bne.n	800506e <HAL_GPIO_Init+0x20a>
 800506a:	2307      	movs	r3, #7
 800506c:	e00e      	b.n	800508c <HAL_GPIO_Init+0x228>
 800506e:	2308      	movs	r3, #8
 8005070:	e00c      	b.n	800508c <HAL_GPIO_Init+0x228>
 8005072:	2306      	movs	r3, #6
 8005074:	e00a      	b.n	800508c <HAL_GPIO_Init+0x228>
 8005076:	2305      	movs	r3, #5
 8005078:	e008      	b.n	800508c <HAL_GPIO_Init+0x228>
 800507a:	2304      	movs	r3, #4
 800507c:	e006      	b.n	800508c <HAL_GPIO_Init+0x228>
 800507e:	2303      	movs	r3, #3
 8005080:	e004      	b.n	800508c <HAL_GPIO_Init+0x228>
 8005082:	2302      	movs	r3, #2
 8005084:	e002      	b.n	800508c <HAL_GPIO_Init+0x228>
 8005086:	2301      	movs	r3, #1
 8005088:	e000      	b.n	800508c <HAL_GPIO_Init+0x228>
 800508a:	2300      	movs	r3, #0
 800508c:	69fa      	ldr	r2, [r7, #28]
 800508e:	f002 0203 	and.w	r2, r2, #3
 8005092:	0092      	lsls	r2, r2, #2
 8005094:	4093      	lsls	r3, r2
 8005096:	69ba      	ldr	r2, [r7, #24]
 8005098:	4313      	orrs	r3, r2
 800509a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800509c:	4935      	ldr	r1, [pc, #212]	@ (8005174 <HAL_GPIO_Init+0x310>)
 800509e:	69fb      	ldr	r3, [r7, #28]
 80050a0:	089b      	lsrs	r3, r3, #2
 80050a2:	3302      	adds	r3, #2
 80050a4:	69ba      	ldr	r2, [r7, #24]
 80050a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80050aa:	4b3b      	ldr	r3, [pc, #236]	@ (8005198 <HAL_GPIO_Init+0x334>)
 80050ac:	689b      	ldr	r3, [r3, #8]
 80050ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80050b0:	693b      	ldr	r3, [r7, #16]
 80050b2:	43db      	mvns	r3, r3
 80050b4:	69ba      	ldr	r2, [r7, #24]
 80050b6:	4013      	ands	r3, r2
 80050b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80050ba:	683b      	ldr	r3, [r7, #0]
 80050bc:	685b      	ldr	r3, [r3, #4]
 80050be:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d003      	beq.n	80050ce <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80050c6:	69ba      	ldr	r2, [r7, #24]
 80050c8:	693b      	ldr	r3, [r7, #16]
 80050ca:	4313      	orrs	r3, r2
 80050cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80050ce:	4a32      	ldr	r2, [pc, #200]	@ (8005198 <HAL_GPIO_Init+0x334>)
 80050d0:	69bb      	ldr	r3, [r7, #24]
 80050d2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80050d4:	4b30      	ldr	r3, [pc, #192]	@ (8005198 <HAL_GPIO_Init+0x334>)
 80050d6:	68db      	ldr	r3, [r3, #12]
 80050d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80050da:	693b      	ldr	r3, [r7, #16]
 80050dc:	43db      	mvns	r3, r3
 80050de:	69ba      	ldr	r2, [r7, #24]
 80050e0:	4013      	ands	r3, r2
 80050e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80050e4:	683b      	ldr	r3, [r7, #0]
 80050e6:	685b      	ldr	r3, [r3, #4]
 80050e8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d003      	beq.n	80050f8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80050f0:	69ba      	ldr	r2, [r7, #24]
 80050f2:	693b      	ldr	r3, [r7, #16]
 80050f4:	4313      	orrs	r3, r2
 80050f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80050f8:	4a27      	ldr	r2, [pc, #156]	@ (8005198 <HAL_GPIO_Init+0x334>)
 80050fa:	69bb      	ldr	r3, [r7, #24]
 80050fc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80050fe:	4b26      	ldr	r3, [pc, #152]	@ (8005198 <HAL_GPIO_Init+0x334>)
 8005100:	685b      	ldr	r3, [r3, #4]
 8005102:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005104:	693b      	ldr	r3, [r7, #16]
 8005106:	43db      	mvns	r3, r3
 8005108:	69ba      	ldr	r2, [r7, #24]
 800510a:	4013      	ands	r3, r2
 800510c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	685b      	ldr	r3, [r3, #4]
 8005112:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005116:	2b00      	cmp	r3, #0
 8005118:	d003      	beq.n	8005122 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800511a:	69ba      	ldr	r2, [r7, #24]
 800511c:	693b      	ldr	r3, [r7, #16]
 800511e:	4313      	orrs	r3, r2
 8005120:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8005122:	4a1d      	ldr	r2, [pc, #116]	@ (8005198 <HAL_GPIO_Init+0x334>)
 8005124:	69bb      	ldr	r3, [r7, #24]
 8005126:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005128:	4b1b      	ldr	r3, [pc, #108]	@ (8005198 <HAL_GPIO_Init+0x334>)
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800512e:	693b      	ldr	r3, [r7, #16]
 8005130:	43db      	mvns	r3, r3
 8005132:	69ba      	ldr	r2, [r7, #24]
 8005134:	4013      	ands	r3, r2
 8005136:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	685b      	ldr	r3, [r3, #4]
 800513c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005140:	2b00      	cmp	r3, #0
 8005142:	d003      	beq.n	800514c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005144:	69ba      	ldr	r2, [r7, #24]
 8005146:	693b      	ldr	r3, [r7, #16]
 8005148:	4313      	orrs	r3, r2
 800514a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800514c:	4a12      	ldr	r2, [pc, #72]	@ (8005198 <HAL_GPIO_Init+0x334>)
 800514e:	69bb      	ldr	r3, [r7, #24]
 8005150:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8005152:	69fb      	ldr	r3, [r7, #28]
 8005154:	3301      	adds	r3, #1
 8005156:	61fb      	str	r3, [r7, #28]
 8005158:	69fb      	ldr	r3, [r7, #28]
 800515a:	2b0f      	cmp	r3, #15
 800515c:	f67f ae90 	bls.w	8004e80 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005160:	bf00      	nop
 8005162:	bf00      	nop
 8005164:	3724      	adds	r7, #36	@ 0x24
 8005166:	46bd      	mov	sp, r7
 8005168:	f85d 7b04 	ldr.w	r7, [sp], #4
 800516c:	4770      	bx	lr
 800516e:	bf00      	nop
 8005170:	40023800 	.word	0x40023800
 8005174:	40013800 	.word	0x40013800
 8005178:	40020000 	.word	0x40020000
 800517c:	40020400 	.word	0x40020400
 8005180:	40020800 	.word	0x40020800
 8005184:	40020c00 	.word	0x40020c00
 8005188:	40021000 	.word	0x40021000
 800518c:	40021400 	.word	0x40021400
 8005190:	40021800 	.word	0x40021800
 8005194:	40021c00 	.word	0x40021c00
 8005198:	40013c00 	.word	0x40013c00

0800519c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800519c:	b480      	push	{r7}
 800519e:	b085      	sub	sp, #20
 80051a0:	af00      	add	r7, sp, #0
 80051a2:	6078      	str	r0, [r7, #4]
 80051a4:	460b      	mov	r3, r1
 80051a6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	691a      	ldr	r2, [r3, #16]
 80051ac:	887b      	ldrh	r3, [r7, #2]
 80051ae:	4013      	ands	r3, r2
 80051b0:	2b00      	cmp	r3, #0
 80051b2:	d002      	beq.n	80051ba <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80051b4:	2301      	movs	r3, #1
 80051b6:	73fb      	strb	r3, [r7, #15]
 80051b8:	e001      	b.n	80051be <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80051ba:	2300      	movs	r3, #0
 80051bc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80051be:	7bfb      	ldrb	r3, [r7, #15]
}
 80051c0:	4618      	mov	r0, r3
 80051c2:	3714      	adds	r7, #20
 80051c4:	46bd      	mov	sp, r7
 80051c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ca:	4770      	bx	lr

080051cc <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80051cc:	b480      	push	{r7}
 80051ce:	b083      	sub	sp, #12
 80051d0:	af00      	add	r7, sp, #0
 80051d2:	6078      	str	r0, [r7, #4]
 80051d4:	460b      	mov	r3, r1
 80051d6:	807b      	strh	r3, [r7, #2]
 80051d8:	4613      	mov	r3, r2
 80051da:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80051dc:	787b      	ldrb	r3, [r7, #1]
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d003      	beq.n	80051ea <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80051e2:	887a      	ldrh	r2, [r7, #2]
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80051e8:	e003      	b.n	80051f2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80051ea:	887b      	ldrh	r3, [r7, #2]
 80051ec:	041a      	lsls	r2, r3, #16
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	619a      	str	r2, [r3, #24]
}
 80051f2:	bf00      	nop
 80051f4:	370c      	adds	r7, #12
 80051f6:	46bd      	mov	sp, r7
 80051f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fc:	4770      	bx	lr

080051fe <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80051fe:	b480      	push	{r7}
 8005200:	b085      	sub	sp, #20
 8005202:	af00      	add	r7, sp, #0
 8005204:	6078      	str	r0, [r7, #4]
 8005206:	460b      	mov	r3, r1
 8005208:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	695b      	ldr	r3, [r3, #20]
 800520e:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005210:	887a      	ldrh	r2, [r7, #2]
 8005212:	68fb      	ldr	r3, [r7, #12]
 8005214:	4013      	ands	r3, r2
 8005216:	041a      	lsls	r2, r3, #16
 8005218:	68fb      	ldr	r3, [r7, #12]
 800521a:	43d9      	mvns	r1, r3
 800521c:	887b      	ldrh	r3, [r7, #2]
 800521e:	400b      	ands	r3, r1
 8005220:	431a      	orrs	r2, r3
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	619a      	str	r2, [r3, #24]
}
 8005226:	bf00      	nop
 8005228:	3714      	adds	r7, #20
 800522a:	46bd      	mov	sp, r7
 800522c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005230:	4770      	bx	lr
	...

08005234 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8005234:	b580      	push	{r7, lr}
 8005236:	b084      	sub	sp, #16
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d101      	bne.n	8005246 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8005242:	2301      	movs	r3, #1
 8005244:	e12b      	b.n	800549e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8005246:	687b      	ldr	r3, [r7, #4]
 8005248:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800524c:	b2db      	uxtb	r3, r3
 800524e:	2b00      	cmp	r3, #0
 8005250:	d106      	bne.n	8005260 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2200      	movs	r2, #0
 8005256:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800525a:	6878      	ldr	r0, [r7, #4]
 800525c:	f7fe ff6a 	bl	8004134 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2224      	movs	r2, #36	@ 0x24
 8005264:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	681a      	ldr	r2, [r3, #0]
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f022 0201 	bic.w	r2, r2, #1
 8005276:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	681b      	ldr	r3, [r3, #0]
 800527c:	681a      	ldr	r2, [r3, #0]
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8005286:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	681a      	ldr	r2, [r3, #0]
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8005296:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8005298:	f001 ff0e 	bl	80070b8 <HAL_RCC_GetPCLK1Freq>
 800529c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	685b      	ldr	r3, [r3, #4]
 80052a2:	4a81      	ldr	r2, [pc, #516]	@ (80054a8 <HAL_I2C_Init+0x274>)
 80052a4:	4293      	cmp	r3, r2
 80052a6:	d807      	bhi.n	80052b8 <HAL_I2C_Init+0x84>
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	4a80      	ldr	r2, [pc, #512]	@ (80054ac <HAL_I2C_Init+0x278>)
 80052ac:	4293      	cmp	r3, r2
 80052ae:	bf94      	ite	ls
 80052b0:	2301      	movls	r3, #1
 80052b2:	2300      	movhi	r3, #0
 80052b4:	b2db      	uxtb	r3, r3
 80052b6:	e006      	b.n	80052c6 <HAL_I2C_Init+0x92>
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	4a7d      	ldr	r2, [pc, #500]	@ (80054b0 <HAL_I2C_Init+0x27c>)
 80052bc:	4293      	cmp	r3, r2
 80052be:	bf94      	ite	ls
 80052c0:	2301      	movls	r3, #1
 80052c2:	2300      	movhi	r3, #0
 80052c4:	b2db      	uxtb	r3, r3
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d001      	beq.n	80052ce <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80052ca:	2301      	movs	r3, #1
 80052cc:	e0e7      	b.n	800549e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80052ce:	68fb      	ldr	r3, [r7, #12]
 80052d0:	4a78      	ldr	r2, [pc, #480]	@ (80054b4 <HAL_I2C_Init+0x280>)
 80052d2:	fba2 2303 	umull	r2, r3, r2, r3
 80052d6:	0c9b      	lsrs	r3, r3, #18
 80052d8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	685b      	ldr	r3, [r3, #4]
 80052e0:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	68ba      	ldr	r2, [r7, #8]
 80052ea:	430a      	orrs	r2, r1
 80052ec:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	681b      	ldr	r3, [r3, #0]
 80052f2:	6a1b      	ldr	r3, [r3, #32]
 80052f4:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	685b      	ldr	r3, [r3, #4]
 80052fc:	4a6a      	ldr	r2, [pc, #424]	@ (80054a8 <HAL_I2C_Init+0x274>)
 80052fe:	4293      	cmp	r3, r2
 8005300:	d802      	bhi.n	8005308 <HAL_I2C_Init+0xd4>
 8005302:	68bb      	ldr	r3, [r7, #8]
 8005304:	3301      	adds	r3, #1
 8005306:	e009      	b.n	800531c <HAL_I2C_Init+0xe8>
 8005308:	68bb      	ldr	r3, [r7, #8]
 800530a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800530e:	fb02 f303 	mul.w	r3, r2, r3
 8005312:	4a69      	ldr	r2, [pc, #420]	@ (80054b8 <HAL_I2C_Init+0x284>)
 8005314:	fba2 2303 	umull	r2, r3, r2, r3
 8005318:	099b      	lsrs	r3, r3, #6
 800531a:	3301      	adds	r3, #1
 800531c:	687a      	ldr	r2, [r7, #4]
 800531e:	6812      	ldr	r2, [r2, #0]
 8005320:	430b      	orrs	r3, r1
 8005322:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8005324:	687b      	ldr	r3, [r7, #4]
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	69db      	ldr	r3, [r3, #28]
 800532a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800532e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	685b      	ldr	r3, [r3, #4]
 8005336:	495c      	ldr	r1, [pc, #368]	@ (80054a8 <HAL_I2C_Init+0x274>)
 8005338:	428b      	cmp	r3, r1
 800533a:	d819      	bhi.n	8005370 <HAL_I2C_Init+0x13c>
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	1e59      	subs	r1, r3, #1
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	685b      	ldr	r3, [r3, #4]
 8005344:	005b      	lsls	r3, r3, #1
 8005346:	fbb1 f3f3 	udiv	r3, r1, r3
 800534a:	1c59      	adds	r1, r3, #1
 800534c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8005350:	400b      	ands	r3, r1
 8005352:	2b00      	cmp	r3, #0
 8005354:	d00a      	beq.n	800536c <HAL_I2C_Init+0x138>
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	1e59      	subs	r1, r3, #1
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	685b      	ldr	r3, [r3, #4]
 800535e:	005b      	lsls	r3, r3, #1
 8005360:	fbb1 f3f3 	udiv	r3, r1, r3
 8005364:	3301      	adds	r3, #1
 8005366:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800536a:	e051      	b.n	8005410 <HAL_I2C_Init+0x1dc>
 800536c:	2304      	movs	r3, #4
 800536e:	e04f      	b.n	8005410 <HAL_I2C_Init+0x1dc>
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	689b      	ldr	r3, [r3, #8]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d111      	bne.n	800539c <HAL_I2C_Init+0x168>
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	1e58      	subs	r0, r3, #1
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	6859      	ldr	r1, [r3, #4]
 8005380:	460b      	mov	r3, r1
 8005382:	005b      	lsls	r3, r3, #1
 8005384:	440b      	add	r3, r1
 8005386:	fbb0 f3f3 	udiv	r3, r0, r3
 800538a:	3301      	adds	r3, #1
 800538c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005390:	2b00      	cmp	r3, #0
 8005392:	bf0c      	ite	eq
 8005394:	2301      	moveq	r3, #1
 8005396:	2300      	movne	r3, #0
 8005398:	b2db      	uxtb	r3, r3
 800539a:	e012      	b.n	80053c2 <HAL_I2C_Init+0x18e>
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	1e58      	subs	r0, r3, #1
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	6859      	ldr	r1, [r3, #4]
 80053a4:	460b      	mov	r3, r1
 80053a6:	009b      	lsls	r3, r3, #2
 80053a8:	440b      	add	r3, r1
 80053aa:	0099      	lsls	r1, r3, #2
 80053ac:	440b      	add	r3, r1
 80053ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80053b2:	3301      	adds	r3, #1
 80053b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	bf0c      	ite	eq
 80053bc:	2301      	moveq	r3, #1
 80053be:	2300      	movne	r3, #0
 80053c0:	b2db      	uxtb	r3, r3
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d001      	beq.n	80053ca <HAL_I2C_Init+0x196>
 80053c6:	2301      	movs	r3, #1
 80053c8:	e022      	b.n	8005410 <HAL_I2C_Init+0x1dc>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	689b      	ldr	r3, [r3, #8]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d10e      	bne.n	80053f0 <HAL_I2C_Init+0x1bc>
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	1e58      	subs	r0, r3, #1
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6859      	ldr	r1, [r3, #4]
 80053da:	460b      	mov	r3, r1
 80053dc:	005b      	lsls	r3, r3, #1
 80053de:	440b      	add	r3, r1
 80053e0:	fbb0 f3f3 	udiv	r3, r0, r3
 80053e4:	3301      	adds	r3, #1
 80053e6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80053ea:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80053ee:	e00f      	b.n	8005410 <HAL_I2C_Init+0x1dc>
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	1e58      	subs	r0, r3, #1
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	6859      	ldr	r1, [r3, #4]
 80053f8:	460b      	mov	r3, r1
 80053fa:	009b      	lsls	r3, r3, #2
 80053fc:	440b      	add	r3, r1
 80053fe:	0099      	lsls	r1, r3, #2
 8005400:	440b      	add	r3, r1
 8005402:	fbb0 f3f3 	udiv	r3, r0, r3
 8005406:	3301      	adds	r3, #1
 8005408:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800540c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005410:	6879      	ldr	r1, [r7, #4]
 8005412:	6809      	ldr	r1, [r1, #0]
 8005414:	4313      	orrs	r3, r2
 8005416:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	681b      	ldr	r3, [r3, #0]
 800541e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	69da      	ldr	r2, [r3, #28]
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	6a1b      	ldr	r3, [r3, #32]
 800542a:	431a      	orrs	r2, r3
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	430a      	orrs	r2, r1
 8005432:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	689b      	ldr	r3, [r3, #8]
 800543a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800543e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8005442:	687a      	ldr	r2, [r7, #4]
 8005444:	6911      	ldr	r1, [r2, #16]
 8005446:	687a      	ldr	r2, [r7, #4]
 8005448:	68d2      	ldr	r2, [r2, #12]
 800544a:	4311      	orrs	r1, r2
 800544c:	687a      	ldr	r2, [r7, #4]
 800544e:	6812      	ldr	r2, [r2, #0]
 8005450:	430b      	orrs	r3, r1
 8005452:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	68db      	ldr	r3, [r3, #12]
 800545a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	695a      	ldr	r2, [r3, #20]
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	699b      	ldr	r3, [r3, #24]
 8005466:	431a      	orrs	r2, r3
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	430a      	orrs	r2, r1
 800546e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	681a      	ldr	r2, [r3, #0]
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f042 0201 	orr.w	r2, r2, #1
 800547e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	2200      	movs	r2, #0
 8005484:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	2220      	movs	r2, #32
 800548a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	2200      	movs	r2, #0
 8005492:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2200      	movs	r2, #0
 8005498:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 800549c:	2300      	movs	r3, #0
}
 800549e:	4618      	mov	r0, r3
 80054a0:	3710      	adds	r7, #16
 80054a2:	46bd      	mov	sp, r7
 80054a4:	bd80      	pop	{r7, pc}
 80054a6:	bf00      	nop
 80054a8:	000186a0 	.word	0x000186a0
 80054ac:	001e847f 	.word	0x001e847f
 80054b0:	003d08ff 	.word	0x003d08ff
 80054b4:	431bde83 	.word	0x431bde83
 80054b8:	10624dd3 	.word	0x10624dd3

080054bc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80054bc:	b580      	push	{r7, lr}
 80054be:	b088      	sub	sp, #32
 80054c0:	af02      	add	r7, sp, #8
 80054c2:	60f8      	str	r0, [r7, #12]
 80054c4:	607a      	str	r2, [r7, #4]
 80054c6:	461a      	mov	r2, r3
 80054c8:	460b      	mov	r3, r1
 80054ca:	817b      	strh	r3, [r7, #10]
 80054cc:	4613      	mov	r3, r2
 80054ce:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80054d0:	f7ff fbb2 	bl	8004c38 <HAL_GetTick>
 80054d4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80054dc:	b2db      	uxtb	r3, r3
 80054de:	2b20      	cmp	r3, #32
 80054e0:	f040 80e0 	bne.w	80056a4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80054e4:	697b      	ldr	r3, [r7, #20]
 80054e6:	9300      	str	r3, [sp, #0]
 80054e8:	2319      	movs	r3, #25
 80054ea:	2201      	movs	r2, #1
 80054ec:	4970      	ldr	r1, [pc, #448]	@ (80056b0 <HAL_I2C_Master_Transmit+0x1f4>)
 80054ee:	68f8      	ldr	r0, [r7, #12]
 80054f0:	f000 ff3c 	bl	800636c <I2C_WaitOnFlagUntilTimeout>
 80054f4:	4603      	mov	r3, r0
 80054f6:	2b00      	cmp	r3, #0
 80054f8:	d001      	beq.n	80054fe <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80054fa:	2302      	movs	r3, #2
 80054fc:	e0d3      	b.n	80056a6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80054fe:	68fb      	ldr	r3, [r7, #12]
 8005500:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005504:	2b01      	cmp	r3, #1
 8005506:	d101      	bne.n	800550c <HAL_I2C_Master_Transmit+0x50>
 8005508:	2302      	movs	r3, #2
 800550a:	e0cc      	b.n	80056a6 <HAL_I2C_Master_Transmit+0x1ea>
 800550c:	68fb      	ldr	r3, [r7, #12]
 800550e:	2201      	movs	r2, #1
 8005510:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005514:	68fb      	ldr	r3, [r7, #12]
 8005516:	681b      	ldr	r3, [r3, #0]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	f003 0301 	and.w	r3, r3, #1
 800551e:	2b01      	cmp	r3, #1
 8005520:	d007      	beq.n	8005532 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	681a      	ldr	r2, [r3, #0]
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	f042 0201 	orr.w	r2, r2, #1
 8005530:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	681a      	ldr	r2, [r3, #0]
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005540:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	2221      	movs	r2, #33	@ 0x21
 8005546:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	2210      	movs	r2, #16
 800554e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	2200      	movs	r2, #0
 8005556:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005558:	68fb      	ldr	r3, [r7, #12]
 800555a:	687a      	ldr	r2, [r7, #4]
 800555c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	893a      	ldrh	r2, [r7, #8]
 8005562:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005564:	68fb      	ldr	r3, [r7, #12]
 8005566:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005568:	b29a      	uxth	r2, r3
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	4a50      	ldr	r2, [pc, #320]	@ (80056b4 <HAL_I2C_Master_Transmit+0x1f8>)
 8005572:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8005574:	8979      	ldrh	r1, [r7, #10]
 8005576:	697b      	ldr	r3, [r7, #20]
 8005578:	6a3a      	ldr	r2, [r7, #32]
 800557a:	68f8      	ldr	r0, [r7, #12]
 800557c:	f000 fcf6 	bl	8005f6c <I2C_MasterRequestWrite>
 8005580:	4603      	mov	r3, r0
 8005582:	2b00      	cmp	r3, #0
 8005584:	d001      	beq.n	800558a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8005586:	2301      	movs	r3, #1
 8005588:	e08d      	b.n	80056a6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800558a:	2300      	movs	r3, #0
 800558c:	613b      	str	r3, [r7, #16]
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	695b      	ldr	r3, [r3, #20]
 8005594:	613b      	str	r3, [r7, #16]
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	699b      	ldr	r3, [r3, #24]
 800559c:	613b      	str	r3, [r7, #16]
 800559e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80055a0:	e066      	b.n	8005670 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80055a2:	697a      	ldr	r2, [r7, #20]
 80055a4:	6a39      	ldr	r1, [r7, #32]
 80055a6:	68f8      	ldr	r0, [r7, #12]
 80055a8:	f000 fffa 	bl	80065a0 <I2C_WaitOnTXEFlagUntilTimeout>
 80055ac:	4603      	mov	r3, r0
 80055ae:	2b00      	cmp	r3, #0
 80055b0:	d00d      	beq.n	80055ce <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055b6:	2b04      	cmp	r3, #4
 80055b8:	d107      	bne.n	80055ca <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	681a      	ldr	r2, [r3, #0]
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80055c8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80055ca:	2301      	movs	r3, #1
 80055cc:	e06b      	b.n	80056a6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055d2:	781a      	ldrb	r2, [r3, #0]
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80055de:	1c5a      	adds	r2, r3, #1
 80055e0:	68fb      	ldr	r3, [r7, #12]
 80055e2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055e8:	b29b      	uxth	r3, r3
 80055ea:	3b01      	subs	r3, #1
 80055ec:	b29a      	uxth	r2, r3
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80055f6:	3b01      	subs	r3, #1
 80055f8:	b29a      	uxth	r2, r3
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	695b      	ldr	r3, [r3, #20]
 8005604:	f003 0304 	and.w	r3, r3, #4
 8005608:	2b04      	cmp	r3, #4
 800560a:	d11b      	bne.n	8005644 <HAL_I2C_Master_Transmit+0x188>
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005610:	2b00      	cmp	r3, #0
 8005612:	d017      	beq.n	8005644 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005618:	781a      	ldrb	r2, [r3, #0]
 800561a:	68fb      	ldr	r3, [r7, #12]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005624:	1c5a      	adds	r2, r3, #1
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800562e:	b29b      	uxth	r3, r3
 8005630:	3b01      	subs	r3, #1
 8005632:	b29a      	uxth	r2, r3
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800563c:	3b01      	subs	r3, #1
 800563e:	b29a      	uxth	r2, r3
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005644:	697a      	ldr	r2, [r7, #20]
 8005646:	6a39      	ldr	r1, [r7, #32]
 8005648:	68f8      	ldr	r0, [r7, #12]
 800564a:	f000 fff1 	bl	8006630 <I2C_WaitOnBTFFlagUntilTimeout>
 800564e:	4603      	mov	r3, r0
 8005650:	2b00      	cmp	r3, #0
 8005652:	d00d      	beq.n	8005670 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005658:	2b04      	cmp	r3, #4
 800565a:	d107      	bne.n	800566c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	681a      	ldr	r2, [r3, #0]
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800566a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800566c:	2301      	movs	r3, #1
 800566e:	e01a      	b.n	80056a6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005674:	2b00      	cmp	r3, #0
 8005676:	d194      	bne.n	80055a2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	681a      	ldr	r2, [r3, #0]
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005686:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	2220      	movs	r2, #32
 800568c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005690:	68fb      	ldr	r3, [r7, #12]
 8005692:	2200      	movs	r2, #0
 8005694:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	2200      	movs	r2, #0
 800569c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80056a0:	2300      	movs	r3, #0
 80056a2:	e000      	b.n	80056a6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80056a4:	2302      	movs	r3, #2
  }
}
 80056a6:	4618      	mov	r0, r3
 80056a8:	3718      	adds	r7, #24
 80056aa:	46bd      	mov	sp, r7
 80056ac:	bd80      	pop	{r7, pc}
 80056ae:	bf00      	nop
 80056b0:	00100002 	.word	0x00100002
 80056b4:	ffff0000 	.word	0xffff0000

080056b8 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b088      	sub	sp, #32
 80056bc:	af02      	add	r7, sp, #8
 80056be:	60f8      	str	r0, [r7, #12]
 80056c0:	4608      	mov	r0, r1
 80056c2:	4611      	mov	r1, r2
 80056c4:	461a      	mov	r2, r3
 80056c6:	4603      	mov	r3, r0
 80056c8:	817b      	strh	r3, [r7, #10]
 80056ca:	460b      	mov	r3, r1
 80056cc:	813b      	strh	r3, [r7, #8]
 80056ce:	4613      	mov	r3, r2
 80056d0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80056d2:	f7ff fab1 	bl	8004c38 <HAL_GetTick>
 80056d6:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80056de:	b2db      	uxtb	r3, r3
 80056e0:	2b20      	cmp	r3, #32
 80056e2:	f040 80d9 	bne.w	8005898 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80056e6:	697b      	ldr	r3, [r7, #20]
 80056e8:	9300      	str	r3, [sp, #0]
 80056ea:	2319      	movs	r3, #25
 80056ec:	2201      	movs	r2, #1
 80056ee:	496d      	ldr	r1, [pc, #436]	@ (80058a4 <HAL_I2C_Mem_Write+0x1ec>)
 80056f0:	68f8      	ldr	r0, [r7, #12]
 80056f2:	f000 fe3b 	bl	800636c <I2C_WaitOnFlagUntilTimeout>
 80056f6:	4603      	mov	r3, r0
 80056f8:	2b00      	cmp	r3, #0
 80056fa:	d001      	beq.n	8005700 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80056fc:	2302      	movs	r3, #2
 80056fe:	e0cc      	b.n	800589a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005706:	2b01      	cmp	r3, #1
 8005708:	d101      	bne.n	800570e <HAL_I2C_Mem_Write+0x56>
 800570a:	2302      	movs	r3, #2
 800570c:	e0c5      	b.n	800589a <HAL_I2C_Mem_Write+0x1e2>
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	2201      	movs	r2, #1
 8005712:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f003 0301 	and.w	r3, r3, #1
 8005720:	2b01      	cmp	r3, #1
 8005722:	d007      	beq.n	8005734 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	681a      	ldr	r2, [r3, #0]
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	f042 0201 	orr.w	r2, r2, #1
 8005732:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	681a      	ldr	r2, [r3, #0]
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005742:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8005744:	68fb      	ldr	r3, [r7, #12]
 8005746:	2221      	movs	r2, #33	@ 0x21
 8005748:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	2240      	movs	r2, #64	@ 0x40
 8005750:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	2200      	movs	r2, #0
 8005758:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	6a3a      	ldr	r2, [r7, #32]
 800575e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005760:	68fb      	ldr	r3, [r7, #12]
 8005762:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8005764:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800576a:	b29a      	uxth	r2, r3
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	4a4d      	ldr	r2, [pc, #308]	@ (80058a8 <HAL_I2C_Mem_Write+0x1f0>)
 8005774:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8005776:	88f8      	ldrh	r0, [r7, #6]
 8005778:	893a      	ldrh	r2, [r7, #8]
 800577a:	8979      	ldrh	r1, [r7, #10]
 800577c:	697b      	ldr	r3, [r7, #20]
 800577e:	9301      	str	r3, [sp, #4]
 8005780:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005782:	9300      	str	r3, [sp, #0]
 8005784:	4603      	mov	r3, r0
 8005786:	68f8      	ldr	r0, [r7, #12]
 8005788:	f000 fc72 	bl	8006070 <I2C_RequestMemoryWrite>
 800578c:	4603      	mov	r3, r0
 800578e:	2b00      	cmp	r3, #0
 8005790:	d052      	beq.n	8005838 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8005792:	2301      	movs	r3, #1
 8005794:	e081      	b.n	800589a <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005796:	697a      	ldr	r2, [r7, #20]
 8005798:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800579a:	68f8      	ldr	r0, [r7, #12]
 800579c:	f000 ff00 	bl	80065a0 <I2C_WaitOnTXEFlagUntilTimeout>
 80057a0:	4603      	mov	r3, r0
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d00d      	beq.n	80057c2 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057aa:	2b04      	cmp	r3, #4
 80057ac:	d107      	bne.n	80057be <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057ae:	68fb      	ldr	r3, [r7, #12]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	681a      	ldr	r2, [r3, #0]
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80057bc:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80057be:	2301      	movs	r3, #1
 80057c0:	e06b      	b.n	800589a <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057c6:	781a      	ldrb	r2, [r3, #0]
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057d2:	1c5a      	adds	r2, r3, #1
 80057d4:	68fb      	ldr	r3, [r7, #12]
 80057d6:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80057dc:	3b01      	subs	r3, #1
 80057de:	b29a      	uxth	r2, r3
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057e8:	b29b      	uxth	r3, r3
 80057ea:	3b01      	subs	r3, #1
 80057ec:	b29a      	uxth	r2, r3
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	695b      	ldr	r3, [r3, #20]
 80057f8:	f003 0304 	and.w	r3, r3, #4
 80057fc:	2b04      	cmp	r3, #4
 80057fe:	d11b      	bne.n	8005838 <HAL_I2C_Mem_Write+0x180>
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005804:	2b00      	cmp	r3, #0
 8005806:	d017      	beq.n	8005838 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800580c:	781a      	ldrb	r2, [r3, #0]
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	681b      	ldr	r3, [r3, #0]
 8005812:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005818:	1c5a      	adds	r2, r3, #1
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800581e:	68fb      	ldr	r3, [r7, #12]
 8005820:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005822:	3b01      	subs	r3, #1
 8005824:	b29a      	uxth	r2, r3
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800582e:	b29b      	uxth	r3, r3
 8005830:	3b01      	subs	r3, #1
 8005832:	b29a      	uxth	r2, r3
 8005834:	68fb      	ldr	r3, [r7, #12]
 8005836:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800583c:	2b00      	cmp	r3, #0
 800583e:	d1aa      	bne.n	8005796 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005840:	697a      	ldr	r2, [r7, #20]
 8005842:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005844:	68f8      	ldr	r0, [r7, #12]
 8005846:	f000 fef3 	bl	8006630 <I2C_WaitOnBTFFlagUntilTimeout>
 800584a:	4603      	mov	r3, r0
 800584c:	2b00      	cmp	r3, #0
 800584e:	d00d      	beq.n	800586c <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005850:	68fb      	ldr	r3, [r7, #12]
 8005852:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005854:	2b04      	cmp	r3, #4
 8005856:	d107      	bne.n	8005868 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	681a      	ldr	r2, [r3, #0]
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	681b      	ldr	r3, [r3, #0]
 8005862:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005866:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005868:	2301      	movs	r3, #1
 800586a:	e016      	b.n	800589a <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	681b      	ldr	r3, [r3, #0]
 8005870:	681a      	ldr	r2, [r3, #0]
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800587a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	2220      	movs	r2, #32
 8005880:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	2200      	movs	r2, #0
 8005888:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	2200      	movs	r2, #0
 8005890:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005894:	2300      	movs	r3, #0
 8005896:	e000      	b.n	800589a <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8005898:	2302      	movs	r3, #2
  }
}
 800589a:	4618      	mov	r0, r3
 800589c:	3718      	adds	r7, #24
 800589e:	46bd      	mov	sp, r7
 80058a0:	bd80      	pop	{r7, pc}
 80058a2:	bf00      	nop
 80058a4:	00100002 	.word	0x00100002
 80058a8:	ffff0000 	.word	0xffff0000

080058ac <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b08c      	sub	sp, #48	@ 0x30
 80058b0:	af02      	add	r7, sp, #8
 80058b2:	60f8      	str	r0, [r7, #12]
 80058b4:	4608      	mov	r0, r1
 80058b6:	4611      	mov	r1, r2
 80058b8:	461a      	mov	r2, r3
 80058ba:	4603      	mov	r3, r0
 80058bc:	817b      	strh	r3, [r7, #10]
 80058be:	460b      	mov	r3, r1
 80058c0:	813b      	strh	r3, [r7, #8]
 80058c2:	4613      	mov	r3, r2
 80058c4:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80058c6:	f7ff f9b7 	bl	8004c38 <HAL_GetTick>
 80058ca:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80058cc:	68fb      	ldr	r3, [r7, #12]
 80058ce:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80058d2:	b2db      	uxtb	r3, r3
 80058d4:	2b20      	cmp	r3, #32
 80058d6:	f040 8214 	bne.w	8005d02 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80058da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80058dc:	9300      	str	r3, [sp, #0]
 80058de:	2319      	movs	r3, #25
 80058e0:	2201      	movs	r2, #1
 80058e2:	497b      	ldr	r1, [pc, #492]	@ (8005ad0 <HAL_I2C_Mem_Read+0x224>)
 80058e4:	68f8      	ldr	r0, [r7, #12]
 80058e6:	f000 fd41 	bl	800636c <I2C_WaitOnFlagUntilTimeout>
 80058ea:	4603      	mov	r3, r0
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d001      	beq.n	80058f4 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 80058f0:	2302      	movs	r3, #2
 80058f2:	e207      	b.n	8005d04 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80058fa:	2b01      	cmp	r3, #1
 80058fc:	d101      	bne.n	8005902 <HAL_I2C_Mem_Read+0x56>
 80058fe:	2302      	movs	r3, #2
 8005900:	e200      	b.n	8005d04 <HAL_I2C_Mem_Read+0x458>
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	2201      	movs	r2, #1
 8005906:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	681b      	ldr	r3, [r3, #0]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f003 0301 	and.w	r3, r3, #1
 8005914:	2b01      	cmp	r3, #1
 8005916:	d007      	beq.n	8005928 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	681b      	ldr	r3, [r3, #0]
 800591c:	681a      	ldr	r2, [r3, #0]
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f042 0201 	orr.w	r2, r2, #1
 8005926:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	681a      	ldr	r2, [r3, #0]
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005936:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	2222      	movs	r2, #34	@ 0x22
 800593c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005940:	68fb      	ldr	r3, [r7, #12]
 8005942:	2240      	movs	r2, #64	@ 0x40
 8005944:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005948:	68fb      	ldr	r3, [r7, #12]
 800594a:	2200      	movs	r2, #0
 800594c:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005952:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005954:	68fb      	ldr	r3, [r7, #12]
 8005956:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8005958:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800595e:	b29a      	uxth	r2, r3
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005964:	68fb      	ldr	r3, [r7, #12]
 8005966:	4a5b      	ldr	r2, [pc, #364]	@ (8005ad4 <HAL_I2C_Mem_Read+0x228>)
 8005968:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800596a:	88f8      	ldrh	r0, [r7, #6]
 800596c:	893a      	ldrh	r2, [r7, #8]
 800596e:	8979      	ldrh	r1, [r7, #10]
 8005970:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005972:	9301      	str	r3, [sp, #4]
 8005974:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005976:	9300      	str	r3, [sp, #0]
 8005978:	4603      	mov	r3, r0
 800597a:	68f8      	ldr	r0, [r7, #12]
 800597c:	f000 fc0e 	bl	800619c <I2C_RequestMemoryRead>
 8005980:	4603      	mov	r3, r0
 8005982:	2b00      	cmp	r3, #0
 8005984:	d001      	beq.n	800598a <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8005986:	2301      	movs	r3, #1
 8005988:	e1bc      	b.n	8005d04 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800598e:	2b00      	cmp	r3, #0
 8005990:	d113      	bne.n	80059ba <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005992:	2300      	movs	r3, #0
 8005994:	623b      	str	r3, [r7, #32]
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	695b      	ldr	r3, [r3, #20]
 800599c:	623b      	str	r3, [r7, #32]
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	699b      	ldr	r3, [r3, #24]
 80059a4:	623b      	str	r3, [r7, #32]
 80059a6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	681a      	ldr	r2, [r3, #0]
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80059b6:	601a      	str	r2, [r3, #0]
 80059b8:	e190      	b.n	8005cdc <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80059be:	2b01      	cmp	r3, #1
 80059c0:	d11b      	bne.n	80059fa <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	681a      	ldr	r2, [r3, #0]
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	681b      	ldr	r3, [r3, #0]
 80059cc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80059d0:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80059d2:	2300      	movs	r3, #0
 80059d4:	61fb      	str	r3, [r7, #28]
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	695b      	ldr	r3, [r3, #20]
 80059dc:	61fb      	str	r3, [r7, #28]
 80059de:	68fb      	ldr	r3, [r7, #12]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	699b      	ldr	r3, [r3, #24]
 80059e4:	61fb      	str	r3, [r7, #28]
 80059e6:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	681a      	ldr	r2, [r3, #0]
 80059ee:	68fb      	ldr	r3, [r7, #12]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80059f6:	601a      	str	r2, [r3, #0]
 80059f8:	e170      	b.n	8005cdc <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80059fe:	2b02      	cmp	r3, #2
 8005a00:	d11b      	bne.n	8005a3a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	681a      	ldr	r2, [r3, #0]
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005a10:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	681a      	ldr	r2, [r3, #0]
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005a20:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a22:	2300      	movs	r3, #0
 8005a24:	61bb      	str	r3, [r7, #24]
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	695b      	ldr	r3, [r3, #20]
 8005a2c:	61bb      	str	r3, [r7, #24]
 8005a2e:	68fb      	ldr	r3, [r7, #12]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	699b      	ldr	r3, [r3, #24]
 8005a34:	61bb      	str	r3, [r7, #24]
 8005a36:	69bb      	ldr	r3, [r7, #24]
 8005a38:	e150      	b.n	8005cdc <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	617b      	str	r3, [r7, #20]
 8005a3e:	68fb      	ldr	r3, [r7, #12]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	695b      	ldr	r3, [r3, #20]
 8005a44:	617b      	str	r3, [r7, #20]
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	699b      	ldr	r3, [r3, #24]
 8005a4c:	617b      	str	r3, [r7, #20]
 8005a4e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005a50:	e144      	b.n	8005cdc <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a56:	2b03      	cmp	r3, #3
 8005a58:	f200 80f1 	bhi.w	8005c3e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a60:	2b01      	cmp	r3, #1
 8005a62:	d123      	bne.n	8005aac <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005a64:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a66:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005a68:	68f8      	ldr	r0, [r7, #12]
 8005a6a:	f000 fe29 	bl	80066c0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005a6e:	4603      	mov	r3, r0
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d001      	beq.n	8005a78 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005a74:	2301      	movs	r3, #1
 8005a76:	e145      	b.n	8005d04 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	691a      	ldr	r2, [r3, #16]
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a82:	b2d2      	uxtb	r2, r2
 8005a84:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a8a:	1c5a      	adds	r2, r3, #1
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a94:	3b01      	subs	r3, #1
 8005a96:	b29a      	uxth	r2, r3
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005aa0:	b29b      	uxth	r3, r3
 8005aa2:	3b01      	subs	r3, #1
 8005aa4:	b29a      	uxth	r2, r3
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005aaa:	e117      	b.n	8005cdc <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ab0:	2b02      	cmp	r3, #2
 8005ab2:	d14e      	bne.n	8005b52 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005ab4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005ab6:	9300      	str	r3, [sp, #0]
 8005ab8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005aba:	2200      	movs	r2, #0
 8005abc:	4906      	ldr	r1, [pc, #24]	@ (8005ad8 <HAL_I2C_Mem_Read+0x22c>)
 8005abe:	68f8      	ldr	r0, [r7, #12]
 8005ac0:	f000 fc54 	bl	800636c <I2C_WaitOnFlagUntilTimeout>
 8005ac4:	4603      	mov	r3, r0
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d008      	beq.n	8005adc <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8005aca:	2301      	movs	r3, #1
 8005acc:	e11a      	b.n	8005d04 <HAL_I2C_Mem_Read+0x458>
 8005ace:	bf00      	nop
 8005ad0:	00100002 	.word	0x00100002
 8005ad4:	ffff0000 	.word	0xffff0000
 8005ad8:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	681b      	ldr	r3, [r3, #0]
 8005ae0:	681a      	ldr	r2, [r3, #0]
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005aea:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005aec:	68fb      	ldr	r3, [r7, #12]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	691a      	ldr	r2, [r3, #16]
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005af6:	b2d2      	uxtb	r2, r2
 8005af8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005afe:	1c5a      	adds	r2, r3, #1
 8005b00:	68fb      	ldr	r3, [r7, #12]
 8005b02:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b08:	3b01      	subs	r3, #1
 8005b0a:	b29a      	uxth	r2, r3
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b14:	b29b      	uxth	r3, r3
 8005b16:	3b01      	subs	r3, #1
 8005b18:	b29a      	uxth	r2, r3
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b1e:	68fb      	ldr	r3, [r7, #12]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	691a      	ldr	r2, [r3, #16]
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b28:	b2d2      	uxtb	r2, r2
 8005b2a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
 8005b2e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b30:	1c5a      	adds	r2, r3, #1
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b3a:	3b01      	subs	r3, #1
 8005b3c:	b29a      	uxth	r2, r3
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b46:	b29b      	uxth	r3, r3
 8005b48:	3b01      	subs	r3, #1
 8005b4a:	b29a      	uxth	r2, r3
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005b50:	e0c4      	b.n	8005cdc <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005b52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b54:	9300      	str	r3, [sp, #0]
 8005b56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b58:	2200      	movs	r2, #0
 8005b5a:	496c      	ldr	r1, [pc, #432]	@ (8005d0c <HAL_I2C_Mem_Read+0x460>)
 8005b5c:	68f8      	ldr	r0, [r7, #12]
 8005b5e:	f000 fc05 	bl	800636c <I2C_WaitOnFlagUntilTimeout>
 8005b62:	4603      	mov	r3, r0
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d001      	beq.n	8005b6c <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005b68:	2301      	movs	r3, #1
 8005b6a:	e0cb      	b.n	8005d04 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b6c:	68fb      	ldr	r3, [r7, #12]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	681a      	ldr	r2, [r3, #0]
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005b7a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b7c:	68fb      	ldr	r3, [r7, #12]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	691a      	ldr	r2, [r3, #16]
 8005b82:	68fb      	ldr	r3, [r7, #12]
 8005b84:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b86:	b2d2      	uxtb	r2, r2
 8005b88:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005b8a:	68fb      	ldr	r3, [r7, #12]
 8005b8c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b8e:	1c5a      	adds	r2, r3, #1
 8005b90:	68fb      	ldr	r3, [r7, #12]
 8005b92:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b98:	3b01      	subs	r3, #1
 8005b9a:	b29a      	uxth	r2, r3
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005ba0:	68fb      	ldr	r3, [r7, #12]
 8005ba2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ba4:	b29b      	uxth	r3, r3
 8005ba6:	3b01      	subs	r3, #1
 8005ba8:	b29a      	uxth	r2, r3
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005bae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bb0:	9300      	str	r3, [sp, #0]
 8005bb2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bb4:	2200      	movs	r2, #0
 8005bb6:	4955      	ldr	r1, [pc, #340]	@ (8005d0c <HAL_I2C_Mem_Read+0x460>)
 8005bb8:	68f8      	ldr	r0, [r7, #12]
 8005bba:	f000 fbd7 	bl	800636c <I2C_WaitOnFlagUntilTimeout>
 8005bbe:	4603      	mov	r3, r0
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d001      	beq.n	8005bc8 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8005bc4:	2301      	movs	r3, #1
 8005bc6:	e09d      	b.n	8005d04 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	681b      	ldr	r3, [r3, #0]
 8005bcc:	681a      	ldr	r2, [r3, #0]
 8005bce:	68fb      	ldr	r3, [r7, #12]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005bd6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	691a      	ldr	r2, [r3, #16]
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005be2:	b2d2      	uxtb	r2, r2
 8005be4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bea:	1c5a      	adds	r2, r3, #1
 8005bec:	68fb      	ldr	r3, [r7, #12]
 8005bee:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005bf0:	68fb      	ldr	r3, [r7, #12]
 8005bf2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005bf4:	3b01      	subs	r3, #1
 8005bf6:	b29a      	uxth	r2, r3
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c00:	b29b      	uxth	r3, r3
 8005c02:	3b01      	subs	r3, #1
 8005c04:	b29a      	uxth	r2, r3
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c0a:	68fb      	ldr	r3, [r7, #12]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	691a      	ldr	r2, [r3, #16]
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c14:	b2d2      	uxtb	r2, r2
 8005c16:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005c18:	68fb      	ldr	r3, [r7, #12]
 8005c1a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c1c:	1c5a      	adds	r2, r3, #1
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005c22:	68fb      	ldr	r3, [r7, #12]
 8005c24:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c26:	3b01      	subs	r3, #1
 8005c28:	b29a      	uxth	r2, r3
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005c2e:	68fb      	ldr	r3, [r7, #12]
 8005c30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c32:	b29b      	uxth	r3, r3
 8005c34:	3b01      	subs	r3, #1
 8005c36:	b29a      	uxth	r2, r3
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005c3c:	e04e      	b.n	8005cdc <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005c3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c40:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005c42:	68f8      	ldr	r0, [r7, #12]
 8005c44:	f000 fd3c 	bl	80066c0 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005c48:	4603      	mov	r3, r0
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d001      	beq.n	8005c52 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8005c4e:	2301      	movs	r3, #1
 8005c50:	e058      	b.n	8005d04 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	691a      	ldr	r2, [r3, #16]
 8005c58:	68fb      	ldr	r3, [r7, #12]
 8005c5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c5c:	b2d2      	uxtb	r2, r2
 8005c5e:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005c60:	68fb      	ldr	r3, [r7, #12]
 8005c62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c64:	1c5a      	adds	r2, r3, #1
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005c6a:	68fb      	ldr	r3, [r7, #12]
 8005c6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c6e:	3b01      	subs	r3, #1
 8005c70:	b29a      	uxth	r2, r3
 8005c72:	68fb      	ldr	r3, [r7, #12]
 8005c74:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c7a:	b29b      	uxth	r3, r3
 8005c7c:	3b01      	subs	r3, #1
 8005c7e:	b29a      	uxth	r2, r3
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005c84:	68fb      	ldr	r3, [r7, #12]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	695b      	ldr	r3, [r3, #20]
 8005c8a:	f003 0304 	and.w	r3, r3, #4
 8005c8e:	2b04      	cmp	r3, #4
 8005c90:	d124      	bne.n	8005cdc <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c96:	2b03      	cmp	r3, #3
 8005c98:	d107      	bne.n	8005caa <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	681a      	ldr	r2, [r3, #0]
 8005ca0:	68fb      	ldr	r3, [r7, #12]
 8005ca2:	681b      	ldr	r3, [r3, #0]
 8005ca4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005ca8:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	681b      	ldr	r3, [r3, #0]
 8005cae:	691a      	ldr	r2, [r3, #16]
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cb4:	b2d2      	uxtb	r2, r2
 8005cb6:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cbc:	1c5a      	adds	r2, r3, #1
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005cc6:	3b01      	subs	r3, #1
 8005cc8:	b29a      	uxth	r2, r3
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005cce:	68fb      	ldr	r3, [r7, #12]
 8005cd0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005cd2:	b29b      	uxth	r3, r3
 8005cd4:	3b01      	subs	r3, #1
 8005cd6:	b29a      	uxth	r2, r3
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	f47f aeb6 	bne.w	8005a52 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	2220      	movs	r2, #32
 8005cea:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005cee:	68fb      	ldr	r3, [r7, #12]
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	2200      	movs	r2, #0
 8005cfa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005cfe:	2300      	movs	r3, #0
 8005d00:	e000      	b.n	8005d04 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8005d02:	2302      	movs	r3, #2
  }
}
 8005d04:	4618      	mov	r0, r3
 8005d06:	3728      	adds	r7, #40	@ 0x28
 8005d08:	46bd      	mov	sp, r7
 8005d0a:	bd80      	pop	{r7, pc}
 8005d0c:	00010004 	.word	0x00010004

08005d10 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8005d10:	b580      	push	{r7, lr}
 8005d12:	b08a      	sub	sp, #40	@ 0x28
 8005d14:	af02      	add	r7, sp, #8
 8005d16:	60f8      	str	r0, [r7, #12]
 8005d18:	607a      	str	r2, [r7, #4]
 8005d1a:	603b      	str	r3, [r7, #0]
 8005d1c:	460b      	mov	r3, r1
 8005d1e:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8005d20:	f7fe ff8a 	bl	8004c38 <HAL_GetTick>
 8005d24:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8005d26:	2300      	movs	r3, #0
 8005d28:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005d30:	b2db      	uxtb	r3, r3
 8005d32:	2b20      	cmp	r3, #32
 8005d34:	f040 8111 	bne.w	8005f5a <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005d38:	69fb      	ldr	r3, [r7, #28]
 8005d3a:	9300      	str	r3, [sp, #0]
 8005d3c:	2319      	movs	r3, #25
 8005d3e:	2201      	movs	r2, #1
 8005d40:	4988      	ldr	r1, [pc, #544]	@ (8005f64 <HAL_I2C_IsDeviceReady+0x254>)
 8005d42:	68f8      	ldr	r0, [r7, #12]
 8005d44:	f000 fb12 	bl	800636c <I2C_WaitOnFlagUntilTimeout>
 8005d48:	4603      	mov	r3, r0
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d001      	beq.n	8005d52 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8005d4e:	2302      	movs	r3, #2
 8005d50:	e104      	b.n	8005f5c <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005d58:	2b01      	cmp	r3, #1
 8005d5a:	d101      	bne.n	8005d60 <HAL_I2C_IsDeviceReady+0x50>
 8005d5c:	2302      	movs	r3, #2
 8005d5e:	e0fd      	b.n	8005f5c <HAL_I2C_IsDeviceReady+0x24c>
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	2201      	movs	r2, #1
 8005d64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005d68:	68fb      	ldr	r3, [r7, #12]
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f003 0301 	and.w	r3, r3, #1
 8005d72:	2b01      	cmp	r3, #1
 8005d74:	d007      	beq.n	8005d86 <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	681a      	ldr	r2, [r3, #0]
 8005d7c:	68fb      	ldr	r3, [r7, #12]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f042 0201 	orr.w	r2, r2, #1
 8005d84:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	681a      	ldr	r2, [r3, #0]
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005d94:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	2224      	movs	r2, #36	@ 0x24
 8005d9a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	2200      	movs	r2, #0
 8005da2:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	4a70      	ldr	r2, [pc, #448]	@ (8005f68 <HAL_I2C_IsDeviceReady+0x258>)
 8005da8:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005daa:	68fb      	ldr	r3, [r7, #12]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	681a      	ldr	r2, [r3, #0]
 8005db0:	68fb      	ldr	r3, [r7, #12]
 8005db2:	681b      	ldr	r3, [r3, #0]
 8005db4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005db8:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8005dba:	69fb      	ldr	r3, [r7, #28]
 8005dbc:	9300      	str	r3, [sp, #0]
 8005dbe:	683b      	ldr	r3, [r7, #0]
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005dc6:	68f8      	ldr	r0, [r7, #12]
 8005dc8:	f000 fad0 	bl	800636c <I2C_WaitOnFlagUntilTimeout>
 8005dcc:	4603      	mov	r3, r0
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d00d      	beq.n	8005dee <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005dd2:	68fb      	ldr	r3, [r7, #12]
 8005dd4:	681b      	ldr	r3, [r3, #0]
 8005dd6:	681b      	ldr	r3, [r3, #0]
 8005dd8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ddc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005de0:	d103      	bne.n	8005dea <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005de8:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8005dea:	2303      	movs	r3, #3
 8005dec:	e0b6      	b.n	8005f5c <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005dee:	897b      	ldrh	r3, [r7, #10]
 8005df0:	b2db      	uxtb	r3, r3
 8005df2:	461a      	mov	r2, r3
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005dfc:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8005dfe:	f7fe ff1b 	bl	8004c38 <HAL_GetTick>
 8005e02:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005e04:	68fb      	ldr	r3, [r7, #12]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	695b      	ldr	r3, [r3, #20]
 8005e0a:	f003 0302 	and.w	r3, r3, #2
 8005e0e:	2b02      	cmp	r3, #2
 8005e10:	bf0c      	ite	eq
 8005e12:	2301      	moveq	r3, #1
 8005e14:	2300      	movne	r3, #0
 8005e16:	b2db      	uxtb	r3, r3
 8005e18:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	681b      	ldr	r3, [r3, #0]
 8005e1e:	695b      	ldr	r3, [r3, #20]
 8005e20:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005e24:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005e28:	bf0c      	ite	eq
 8005e2a:	2301      	moveq	r3, #1
 8005e2c:	2300      	movne	r3, #0
 8005e2e:	b2db      	uxtb	r3, r3
 8005e30:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8005e32:	e025      	b.n	8005e80 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005e34:	f7fe ff00 	bl	8004c38 <HAL_GetTick>
 8005e38:	4602      	mov	r2, r0
 8005e3a:	69fb      	ldr	r3, [r7, #28]
 8005e3c:	1ad3      	subs	r3, r2, r3
 8005e3e:	683a      	ldr	r2, [r7, #0]
 8005e40:	429a      	cmp	r2, r3
 8005e42:	d302      	bcc.n	8005e4a <HAL_I2C_IsDeviceReady+0x13a>
 8005e44:	683b      	ldr	r3, [r7, #0]
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d103      	bne.n	8005e52 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8005e4a:	68fb      	ldr	r3, [r7, #12]
 8005e4c:	22a0      	movs	r2, #160	@ 0xa0
 8005e4e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	695b      	ldr	r3, [r3, #20]
 8005e58:	f003 0302 	and.w	r3, r3, #2
 8005e5c:	2b02      	cmp	r3, #2
 8005e5e:	bf0c      	ite	eq
 8005e60:	2301      	moveq	r3, #1
 8005e62:	2300      	movne	r3, #0
 8005e64:	b2db      	uxtb	r3, r3
 8005e66:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	695b      	ldr	r3, [r3, #20]
 8005e6e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005e72:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005e76:	bf0c      	ite	eq
 8005e78:	2301      	moveq	r3, #1
 8005e7a:	2300      	movne	r3, #0
 8005e7c:	b2db      	uxtb	r3, r3
 8005e7e:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8005e80:	68fb      	ldr	r3, [r7, #12]
 8005e82:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005e86:	b2db      	uxtb	r3, r3
 8005e88:	2ba0      	cmp	r3, #160	@ 0xa0
 8005e8a:	d005      	beq.n	8005e98 <HAL_I2C_IsDeviceReady+0x188>
 8005e8c:	7dfb      	ldrb	r3, [r7, #23]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d102      	bne.n	8005e98 <HAL_I2C_IsDeviceReady+0x188>
 8005e92:	7dbb      	ldrb	r3, [r7, #22]
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d0cd      	beq.n	8005e34 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8005e98:	68fb      	ldr	r3, [r7, #12]
 8005e9a:	2220      	movs	r2, #32
 8005e9c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	695b      	ldr	r3, [r3, #20]
 8005ea6:	f003 0302 	and.w	r3, r3, #2
 8005eaa:	2b02      	cmp	r3, #2
 8005eac:	d129      	bne.n	8005f02 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005eae:	68fb      	ldr	r3, [r7, #12]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	681a      	ldr	r2, [r3, #0]
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005ebc:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005ebe:	2300      	movs	r3, #0
 8005ec0:	613b      	str	r3, [r7, #16]
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	695b      	ldr	r3, [r3, #20]
 8005ec8:	613b      	str	r3, [r7, #16]
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	699b      	ldr	r3, [r3, #24]
 8005ed0:	613b      	str	r3, [r7, #16]
 8005ed2:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005ed4:	69fb      	ldr	r3, [r7, #28]
 8005ed6:	9300      	str	r3, [sp, #0]
 8005ed8:	2319      	movs	r3, #25
 8005eda:	2201      	movs	r2, #1
 8005edc:	4921      	ldr	r1, [pc, #132]	@ (8005f64 <HAL_I2C_IsDeviceReady+0x254>)
 8005ede:	68f8      	ldr	r0, [r7, #12]
 8005ee0:	f000 fa44 	bl	800636c <I2C_WaitOnFlagUntilTimeout>
 8005ee4:	4603      	mov	r3, r0
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d001      	beq.n	8005eee <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8005eea:	2301      	movs	r3, #1
 8005eec:	e036      	b.n	8005f5c <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	2220      	movs	r2, #32
 8005ef2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005ef6:	68fb      	ldr	r3, [r7, #12]
 8005ef8:	2200      	movs	r2, #0
 8005efa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8005efe:	2300      	movs	r3, #0
 8005f00:	e02c      	b.n	8005f5c <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	681a      	ldr	r2, [r3, #0]
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005f10:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005f1a:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005f1c:	69fb      	ldr	r3, [r7, #28]
 8005f1e:	9300      	str	r3, [sp, #0]
 8005f20:	2319      	movs	r3, #25
 8005f22:	2201      	movs	r2, #1
 8005f24:	490f      	ldr	r1, [pc, #60]	@ (8005f64 <HAL_I2C_IsDeviceReady+0x254>)
 8005f26:	68f8      	ldr	r0, [r7, #12]
 8005f28:	f000 fa20 	bl	800636c <I2C_WaitOnFlagUntilTimeout>
 8005f2c:	4603      	mov	r3, r0
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d001      	beq.n	8005f36 <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8005f32:	2301      	movs	r3, #1
 8005f34:	e012      	b.n	8005f5c <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8005f36:	69bb      	ldr	r3, [r7, #24]
 8005f38:	3301      	adds	r3, #1
 8005f3a:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8005f3c:	69ba      	ldr	r2, [r7, #24]
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	429a      	cmp	r2, r3
 8005f42:	f4ff af32 	bcc.w	8005daa <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8005f46:	68fb      	ldr	r3, [r7, #12]
 8005f48:	2220      	movs	r2, #32
 8005f4a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	2200      	movs	r2, #0
 8005f52:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005f56:	2301      	movs	r3, #1
 8005f58:	e000      	b.n	8005f5c <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8005f5a:	2302      	movs	r3, #2
  }
}
 8005f5c:	4618      	mov	r0, r3
 8005f5e:	3720      	adds	r7, #32
 8005f60:	46bd      	mov	sp, r7
 8005f62:	bd80      	pop	{r7, pc}
 8005f64:	00100002 	.word	0x00100002
 8005f68:	ffff0000 	.word	0xffff0000

08005f6c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b088      	sub	sp, #32
 8005f70:	af02      	add	r7, sp, #8
 8005f72:	60f8      	str	r0, [r7, #12]
 8005f74:	607a      	str	r2, [r7, #4]
 8005f76:	603b      	str	r3, [r7, #0]
 8005f78:	460b      	mov	r3, r1
 8005f7a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f80:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005f82:	697b      	ldr	r3, [r7, #20]
 8005f84:	2b08      	cmp	r3, #8
 8005f86:	d006      	beq.n	8005f96 <I2C_MasterRequestWrite+0x2a>
 8005f88:	697b      	ldr	r3, [r7, #20]
 8005f8a:	2b01      	cmp	r3, #1
 8005f8c:	d003      	beq.n	8005f96 <I2C_MasterRequestWrite+0x2a>
 8005f8e:	697b      	ldr	r3, [r7, #20]
 8005f90:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005f94:	d108      	bne.n	8005fa8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	681a      	ldr	r2, [r3, #0]
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	681b      	ldr	r3, [r3, #0]
 8005fa0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005fa4:	601a      	str	r2, [r3, #0]
 8005fa6:	e00b      	b.n	8005fc0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fac:	2b12      	cmp	r3, #18
 8005fae:	d107      	bne.n	8005fc0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	681b      	ldr	r3, [r3, #0]
 8005fb4:	681a      	ldr	r2, [r3, #0]
 8005fb6:	68fb      	ldr	r3, [r7, #12]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005fbe:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005fc0:	683b      	ldr	r3, [r7, #0]
 8005fc2:	9300      	str	r3, [sp, #0]
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005fcc:	68f8      	ldr	r0, [r7, #12]
 8005fce:	f000 f9cd 	bl	800636c <I2C_WaitOnFlagUntilTimeout>
 8005fd2:	4603      	mov	r3, r0
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d00d      	beq.n	8005ff4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	681b      	ldr	r3, [r3, #0]
 8005fdc:	681b      	ldr	r3, [r3, #0]
 8005fde:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005fe2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005fe6:	d103      	bne.n	8005ff0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005fee:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8005ff0:	2303      	movs	r3, #3
 8005ff2:	e035      	b.n	8006060 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	691b      	ldr	r3, [r3, #16]
 8005ff8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8005ffc:	d108      	bne.n	8006010 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005ffe:	897b      	ldrh	r3, [r7, #10]
 8006000:	b2db      	uxtb	r3, r3
 8006002:	461a      	mov	r2, r3
 8006004:	68fb      	ldr	r3, [r7, #12]
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 800600c:	611a      	str	r2, [r3, #16]
 800600e:	e01b      	b.n	8006048 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006010:	897b      	ldrh	r3, [r7, #10]
 8006012:	11db      	asrs	r3, r3, #7
 8006014:	b2db      	uxtb	r3, r3
 8006016:	f003 0306 	and.w	r3, r3, #6
 800601a:	b2db      	uxtb	r3, r3
 800601c:	f063 030f 	orn	r3, r3, #15
 8006020:	b2da      	uxtb	r2, r3
 8006022:	68fb      	ldr	r3, [r7, #12]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006028:	683b      	ldr	r3, [r7, #0]
 800602a:	687a      	ldr	r2, [r7, #4]
 800602c:	490e      	ldr	r1, [pc, #56]	@ (8006068 <I2C_MasterRequestWrite+0xfc>)
 800602e:	68f8      	ldr	r0, [r7, #12]
 8006030:	f000 fa16 	bl	8006460 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006034:	4603      	mov	r3, r0
 8006036:	2b00      	cmp	r3, #0
 8006038:	d001      	beq.n	800603e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800603a:	2301      	movs	r3, #1
 800603c:	e010      	b.n	8006060 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800603e:	897b      	ldrh	r3, [r7, #10]
 8006040:	b2da      	uxtb	r2, r3
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	681b      	ldr	r3, [r3, #0]
 8006046:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006048:	683b      	ldr	r3, [r7, #0]
 800604a:	687a      	ldr	r2, [r7, #4]
 800604c:	4907      	ldr	r1, [pc, #28]	@ (800606c <I2C_MasterRequestWrite+0x100>)
 800604e:	68f8      	ldr	r0, [r7, #12]
 8006050:	f000 fa06 	bl	8006460 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006054:	4603      	mov	r3, r0
 8006056:	2b00      	cmp	r3, #0
 8006058:	d001      	beq.n	800605e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800605a:	2301      	movs	r3, #1
 800605c:	e000      	b.n	8006060 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800605e:	2300      	movs	r3, #0
}
 8006060:	4618      	mov	r0, r3
 8006062:	3718      	adds	r7, #24
 8006064:	46bd      	mov	sp, r7
 8006066:	bd80      	pop	{r7, pc}
 8006068:	00010008 	.word	0x00010008
 800606c:	00010002 	.word	0x00010002

08006070 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8006070:	b580      	push	{r7, lr}
 8006072:	b088      	sub	sp, #32
 8006074:	af02      	add	r7, sp, #8
 8006076:	60f8      	str	r0, [r7, #12]
 8006078:	4608      	mov	r0, r1
 800607a:	4611      	mov	r1, r2
 800607c:	461a      	mov	r2, r3
 800607e:	4603      	mov	r3, r0
 8006080:	817b      	strh	r3, [r7, #10]
 8006082:	460b      	mov	r3, r1
 8006084:	813b      	strh	r3, [r7, #8]
 8006086:	4613      	mov	r3, r2
 8006088:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800608a:	68fb      	ldr	r3, [r7, #12]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	681a      	ldr	r2, [r3, #0]
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006098:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800609a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800609c:	9300      	str	r3, [sp, #0]
 800609e:	6a3b      	ldr	r3, [r7, #32]
 80060a0:	2200      	movs	r2, #0
 80060a2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80060a6:	68f8      	ldr	r0, [r7, #12]
 80060a8:	f000 f960 	bl	800636c <I2C_WaitOnFlagUntilTimeout>
 80060ac:	4603      	mov	r3, r0
 80060ae:	2b00      	cmp	r3, #0
 80060b0:	d00d      	beq.n	80060ce <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80060bc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80060c0:	d103      	bne.n	80060ca <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80060c8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80060ca:	2303      	movs	r3, #3
 80060cc:	e05f      	b.n	800618e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80060ce:	897b      	ldrh	r3, [r7, #10]
 80060d0:	b2db      	uxtb	r3, r3
 80060d2:	461a      	mov	r2, r3
 80060d4:	68fb      	ldr	r3, [r7, #12]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80060dc:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80060de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060e0:	6a3a      	ldr	r2, [r7, #32]
 80060e2:	492d      	ldr	r1, [pc, #180]	@ (8006198 <I2C_RequestMemoryWrite+0x128>)
 80060e4:	68f8      	ldr	r0, [r7, #12]
 80060e6:	f000 f9bb 	bl	8006460 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80060ea:	4603      	mov	r3, r0
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d001      	beq.n	80060f4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80060f0:	2301      	movs	r3, #1
 80060f2:	e04c      	b.n	800618e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80060f4:	2300      	movs	r3, #0
 80060f6:	617b      	str	r3, [r7, #20]
 80060f8:	68fb      	ldr	r3, [r7, #12]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	695b      	ldr	r3, [r3, #20]
 80060fe:	617b      	str	r3, [r7, #20]
 8006100:	68fb      	ldr	r3, [r7, #12]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	699b      	ldr	r3, [r3, #24]
 8006106:	617b      	str	r3, [r7, #20]
 8006108:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800610a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800610c:	6a39      	ldr	r1, [r7, #32]
 800610e:	68f8      	ldr	r0, [r7, #12]
 8006110:	f000 fa46 	bl	80065a0 <I2C_WaitOnTXEFlagUntilTimeout>
 8006114:	4603      	mov	r3, r0
 8006116:	2b00      	cmp	r3, #0
 8006118:	d00d      	beq.n	8006136 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800611e:	2b04      	cmp	r3, #4
 8006120:	d107      	bne.n	8006132 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	681a      	ldr	r2, [r3, #0]
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006130:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006132:	2301      	movs	r3, #1
 8006134:	e02b      	b.n	800618e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006136:	88fb      	ldrh	r3, [r7, #6]
 8006138:	2b01      	cmp	r3, #1
 800613a:	d105      	bne.n	8006148 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800613c:	893b      	ldrh	r3, [r7, #8]
 800613e:	b2da      	uxtb	r2, r3
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	611a      	str	r2, [r3, #16]
 8006146:	e021      	b.n	800618c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006148:	893b      	ldrh	r3, [r7, #8]
 800614a:	0a1b      	lsrs	r3, r3, #8
 800614c:	b29b      	uxth	r3, r3
 800614e:	b2da      	uxtb	r2, r3
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006156:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006158:	6a39      	ldr	r1, [r7, #32]
 800615a:	68f8      	ldr	r0, [r7, #12]
 800615c:	f000 fa20 	bl	80065a0 <I2C_WaitOnTXEFlagUntilTimeout>
 8006160:	4603      	mov	r3, r0
 8006162:	2b00      	cmp	r3, #0
 8006164:	d00d      	beq.n	8006182 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800616a:	2b04      	cmp	r3, #4
 800616c:	d107      	bne.n	800617e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	681a      	ldr	r2, [r3, #0]
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800617c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800617e:	2301      	movs	r3, #1
 8006180:	e005      	b.n	800618e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006182:	893b      	ldrh	r3, [r7, #8]
 8006184:	b2da      	uxtb	r2, r3
 8006186:	68fb      	ldr	r3, [r7, #12]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 800618c:	2300      	movs	r3, #0
}
 800618e:	4618      	mov	r0, r3
 8006190:	3718      	adds	r7, #24
 8006192:	46bd      	mov	sp, r7
 8006194:	bd80      	pop	{r7, pc}
 8006196:	bf00      	nop
 8006198:	00010002 	.word	0x00010002

0800619c <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 800619c:	b580      	push	{r7, lr}
 800619e:	b088      	sub	sp, #32
 80061a0:	af02      	add	r7, sp, #8
 80061a2:	60f8      	str	r0, [r7, #12]
 80061a4:	4608      	mov	r0, r1
 80061a6:	4611      	mov	r1, r2
 80061a8:	461a      	mov	r2, r3
 80061aa:	4603      	mov	r3, r0
 80061ac:	817b      	strh	r3, [r7, #10]
 80061ae:	460b      	mov	r3, r1
 80061b0:	813b      	strh	r3, [r7, #8]
 80061b2:	4613      	mov	r3, r2
 80061b4:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	681a      	ldr	r2, [r3, #0]
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80061c4:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	681b      	ldr	r3, [r3, #0]
 80061ca:	681a      	ldr	r2, [r3, #0]
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80061d4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80061d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80061d8:	9300      	str	r3, [sp, #0]
 80061da:	6a3b      	ldr	r3, [r7, #32]
 80061dc:	2200      	movs	r2, #0
 80061de:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80061e2:	68f8      	ldr	r0, [r7, #12]
 80061e4:	f000 f8c2 	bl	800636c <I2C_WaitOnFlagUntilTimeout>
 80061e8:	4603      	mov	r3, r0
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d00d      	beq.n	800620a <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80061f8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80061fc:	d103      	bne.n	8006206 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006204:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006206:	2303      	movs	r3, #3
 8006208:	e0aa      	b.n	8006360 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800620a:	897b      	ldrh	r3, [r7, #10]
 800620c:	b2db      	uxtb	r3, r3
 800620e:	461a      	mov	r2, r3
 8006210:	68fb      	ldr	r3, [r7, #12]
 8006212:	681b      	ldr	r3, [r3, #0]
 8006214:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006218:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800621a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800621c:	6a3a      	ldr	r2, [r7, #32]
 800621e:	4952      	ldr	r1, [pc, #328]	@ (8006368 <I2C_RequestMemoryRead+0x1cc>)
 8006220:	68f8      	ldr	r0, [r7, #12]
 8006222:	f000 f91d 	bl	8006460 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006226:	4603      	mov	r3, r0
 8006228:	2b00      	cmp	r3, #0
 800622a:	d001      	beq.n	8006230 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 800622c:	2301      	movs	r3, #1
 800622e:	e097      	b.n	8006360 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006230:	2300      	movs	r3, #0
 8006232:	617b      	str	r3, [r7, #20]
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	695b      	ldr	r3, [r3, #20]
 800623a:	617b      	str	r3, [r7, #20]
 800623c:	68fb      	ldr	r3, [r7, #12]
 800623e:	681b      	ldr	r3, [r3, #0]
 8006240:	699b      	ldr	r3, [r3, #24]
 8006242:	617b      	str	r3, [r7, #20]
 8006244:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006246:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006248:	6a39      	ldr	r1, [r7, #32]
 800624a:	68f8      	ldr	r0, [r7, #12]
 800624c:	f000 f9a8 	bl	80065a0 <I2C_WaitOnTXEFlagUntilTimeout>
 8006250:	4603      	mov	r3, r0
 8006252:	2b00      	cmp	r3, #0
 8006254:	d00d      	beq.n	8006272 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800625a:	2b04      	cmp	r3, #4
 800625c:	d107      	bne.n	800626e <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	681a      	ldr	r2, [r3, #0]
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	681b      	ldr	r3, [r3, #0]
 8006268:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800626c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800626e:	2301      	movs	r3, #1
 8006270:	e076      	b.n	8006360 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8006272:	88fb      	ldrh	r3, [r7, #6]
 8006274:	2b01      	cmp	r3, #1
 8006276:	d105      	bne.n	8006284 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006278:	893b      	ldrh	r3, [r7, #8]
 800627a:	b2da      	uxtb	r2, r3
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	681b      	ldr	r3, [r3, #0]
 8006280:	611a      	str	r2, [r3, #16]
 8006282:	e021      	b.n	80062c8 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006284:	893b      	ldrh	r3, [r7, #8]
 8006286:	0a1b      	lsrs	r3, r3, #8
 8006288:	b29b      	uxth	r3, r3
 800628a:	b2da      	uxtb	r2, r3
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006292:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006294:	6a39      	ldr	r1, [r7, #32]
 8006296:	68f8      	ldr	r0, [r7, #12]
 8006298:	f000 f982 	bl	80065a0 <I2C_WaitOnTXEFlagUntilTimeout>
 800629c:	4603      	mov	r3, r0
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d00d      	beq.n	80062be <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062a6:	2b04      	cmp	r3, #4
 80062a8:	d107      	bne.n	80062ba <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	681a      	ldr	r2, [r3, #0]
 80062b0:	68fb      	ldr	r3, [r7, #12]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80062b8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80062ba:	2301      	movs	r3, #1
 80062bc:	e050      	b.n	8006360 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80062be:	893b      	ldrh	r3, [r7, #8]
 80062c0:	b2da      	uxtb	r2, r3
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80062c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80062ca:	6a39      	ldr	r1, [r7, #32]
 80062cc:	68f8      	ldr	r0, [r7, #12]
 80062ce:	f000 f967 	bl	80065a0 <I2C_WaitOnTXEFlagUntilTimeout>
 80062d2:	4603      	mov	r3, r0
 80062d4:	2b00      	cmp	r3, #0
 80062d6:	d00d      	beq.n	80062f4 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80062d8:	68fb      	ldr	r3, [r7, #12]
 80062da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062dc:	2b04      	cmp	r3, #4
 80062de:	d107      	bne.n	80062f0 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	681b      	ldr	r3, [r3, #0]
 80062e4:	681a      	ldr	r2, [r3, #0]
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	681b      	ldr	r3, [r3, #0]
 80062ea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80062ee:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80062f0:	2301      	movs	r3, #1
 80062f2:	e035      	b.n	8006360 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	681a      	ldr	r2, [r3, #0]
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8006302:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8006304:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006306:	9300      	str	r3, [sp, #0]
 8006308:	6a3b      	ldr	r3, [r7, #32]
 800630a:	2200      	movs	r2, #0
 800630c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006310:	68f8      	ldr	r0, [r7, #12]
 8006312:	f000 f82b 	bl	800636c <I2C_WaitOnFlagUntilTimeout>
 8006316:	4603      	mov	r3, r0
 8006318:	2b00      	cmp	r3, #0
 800631a:	d00d      	beq.n	8006338 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	681b      	ldr	r3, [r3, #0]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006326:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800632a:	d103      	bne.n	8006334 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006332:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006334:	2303      	movs	r3, #3
 8006336:	e013      	b.n	8006360 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006338:	897b      	ldrh	r3, [r7, #10]
 800633a:	b2db      	uxtb	r3, r3
 800633c:	f043 0301 	orr.w	r3, r3, #1
 8006340:	b2da      	uxtb	r2, r3
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006348:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800634a:	6a3a      	ldr	r2, [r7, #32]
 800634c:	4906      	ldr	r1, [pc, #24]	@ (8006368 <I2C_RequestMemoryRead+0x1cc>)
 800634e:	68f8      	ldr	r0, [r7, #12]
 8006350:	f000 f886 	bl	8006460 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006354:	4603      	mov	r3, r0
 8006356:	2b00      	cmp	r3, #0
 8006358:	d001      	beq.n	800635e <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800635a:	2301      	movs	r3, #1
 800635c:	e000      	b.n	8006360 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 800635e:	2300      	movs	r3, #0
}
 8006360:	4618      	mov	r0, r3
 8006362:	3718      	adds	r7, #24
 8006364:	46bd      	mov	sp, r7
 8006366:	bd80      	pop	{r7, pc}
 8006368:	00010002 	.word	0x00010002

0800636c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 800636c:	b580      	push	{r7, lr}
 800636e:	b084      	sub	sp, #16
 8006370:	af00      	add	r7, sp, #0
 8006372:	60f8      	str	r0, [r7, #12]
 8006374:	60b9      	str	r1, [r7, #8]
 8006376:	603b      	str	r3, [r7, #0]
 8006378:	4613      	mov	r3, r2
 800637a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800637c:	e048      	b.n	8006410 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006384:	d044      	beq.n	8006410 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006386:	f7fe fc57 	bl	8004c38 <HAL_GetTick>
 800638a:	4602      	mov	r2, r0
 800638c:	69bb      	ldr	r3, [r7, #24]
 800638e:	1ad3      	subs	r3, r2, r3
 8006390:	683a      	ldr	r2, [r7, #0]
 8006392:	429a      	cmp	r2, r3
 8006394:	d302      	bcc.n	800639c <I2C_WaitOnFlagUntilTimeout+0x30>
 8006396:	683b      	ldr	r3, [r7, #0]
 8006398:	2b00      	cmp	r3, #0
 800639a:	d139      	bne.n	8006410 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 800639c:	68bb      	ldr	r3, [r7, #8]
 800639e:	0c1b      	lsrs	r3, r3, #16
 80063a0:	b2db      	uxtb	r3, r3
 80063a2:	2b01      	cmp	r3, #1
 80063a4:	d10d      	bne.n	80063c2 <I2C_WaitOnFlagUntilTimeout+0x56>
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	681b      	ldr	r3, [r3, #0]
 80063aa:	695b      	ldr	r3, [r3, #20]
 80063ac:	43da      	mvns	r2, r3
 80063ae:	68bb      	ldr	r3, [r7, #8]
 80063b0:	4013      	ands	r3, r2
 80063b2:	b29b      	uxth	r3, r3
 80063b4:	2b00      	cmp	r3, #0
 80063b6:	bf0c      	ite	eq
 80063b8:	2301      	moveq	r3, #1
 80063ba:	2300      	movne	r3, #0
 80063bc:	b2db      	uxtb	r3, r3
 80063be:	461a      	mov	r2, r3
 80063c0:	e00c      	b.n	80063dc <I2C_WaitOnFlagUntilTimeout+0x70>
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	699b      	ldr	r3, [r3, #24]
 80063c8:	43da      	mvns	r2, r3
 80063ca:	68bb      	ldr	r3, [r7, #8]
 80063cc:	4013      	ands	r3, r2
 80063ce:	b29b      	uxth	r3, r3
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	bf0c      	ite	eq
 80063d4:	2301      	moveq	r3, #1
 80063d6:	2300      	movne	r3, #0
 80063d8:	b2db      	uxtb	r3, r3
 80063da:	461a      	mov	r2, r3
 80063dc:	79fb      	ldrb	r3, [r7, #7]
 80063de:	429a      	cmp	r2, r3
 80063e0:	d116      	bne.n	8006410 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80063e2:	68fb      	ldr	r3, [r7, #12]
 80063e4:	2200      	movs	r2, #0
 80063e6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	2220      	movs	r2, #32
 80063ec:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	2200      	movs	r2, #0
 80063f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80063f8:	68fb      	ldr	r3, [r7, #12]
 80063fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063fc:	f043 0220 	orr.w	r2, r3, #32
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	2200      	movs	r2, #0
 8006408:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800640c:	2301      	movs	r3, #1
 800640e:	e023      	b.n	8006458 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006410:	68bb      	ldr	r3, [r7, #8]
 8006412:	0c1b      	lsrs	r3, r3, #16
 8006414:	b2db      	uxtb	r3, r3
 8006416:	2b01      	cmp	r3, #1
 8006418:	d10d      	bne.n	8006436 <I2C_WaitOnFlagUntilTimeout+0xca>
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	695b      	ldr	r3, [r3, #20]
 8006420:	43da      	mvns	r2, r3
 8006422:	68bb      	ldr	r3, [r7, #8]
 8006424:	4013      	ands	r3, r2
 8006426:	b29b      	uxth	r3, r3
 8006428:	2b00      	cmp	r3, #0
 800642a:	bf0c      	ite	eq
 800642c:	2301      	moveq	r3, #1
 800642e:	2300      	movne	r3, #0
 8006430:	b2db      	uxtb	r3, r3
 8006432:	461a      	mov	r2, r3
 8006434:	e00c      	b.n	8006450 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	699b      	ldr	r3, [r3, #24]
 800643c:	43da      	mvns	r2, r3
 800643e:	68bb      	ldr	r3, [r7, #8]
 8006440:	4013      	ands	r3, r2
 8006442:	b29b      	uxth	r3, r3
 8006444:	2b00      	cmp	r3, #0
 8006446:	bf0c      	ite	eq
 8006448:	2301      	moveq	r3, #1
 800644a:	2300      	movne	r3, #0
 800644c:	b2db      	uxtb	r3, r3
 800644e:	461a      	mov	r2, r3
 8006450:	79fb      	ldrb	r3, [r7, #7]
 8006452:	429a      	cmp	r2, r3
 8006454:	d093      	beq.n	800637e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006456:	2300      	movs	r3, #0
}
 8006458:	4618      	mov	r0, r3
 800645a:	3710      	adds	r7, #16
 800645c:	46bd      	mov	sp, r7
 800645e:	bd80      	pop	{r7, pc}

08006460 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006460:	b580      	push	{r7, lr}
 8006462:	b084      	sub	sp, #16
 8006464:	af00      	add	r7, sp, #0
 8006466:	60f8      	str	r0, [r7, #12]
 8006468:	60b9      	str	r1, [r7, #8]
 800646a:	607a      	str	r2, [r7, #4]
 800646c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800646e:	e071      	b.n	8006554 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	695b      	ldr	r3, [r3, #20]
 8006476:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800647a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800647e:	d123      	bne.n	80064c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	681a      	ldr	r2, [r3, #0]
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800648e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8006498:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	2200      	movs	r2, #0
 800649e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80064a0:	68fb      	ldr	r3, [r7, #12]
 80064a2:	2220      	movs	r2, #32
 80064a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	2200      	movs	r2, #0
 80064ac:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064b4:	f043 0204 	orr.w	r2, r3, #4
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80064bc:	68fb      	ldr	r3, [r7, #12]
 80064be:	2200      	movs	r2, #0
 80064c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80064c4:	2301      	movs	r3, #1
 80064c6:	e067      	b.n	8006598 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80064ce:	d041      	beq.n	8006554 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80064d0:	f7fe fbb2 	bl	8004c38 <HAL_GetTick>
 80064d4:	4602      	mov	r2, r0
 80064d6:	683b      	ldr	r3, [r7, #0]
 80064d8:	1ad3      	subs	r3, r2, r3
 80064da:	687a      	ldr	r2, [r7, #4]
 80064dc:	429a      	cmp	r2, r3
 80064de:	d302      	bcc.n	80064e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d136      	bne.n	8006554 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80064e6:	68bb      	ldr	r3, [r7, #8]
 80064e8:	0c1b      	lsrs	r3, r3, #16
 80064ea:	b2db      	uxtb	r3, r3
 80064ec:	2b01      	cmp	r3, #1
 80064ee:	d10c      	bne.n	800650a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	695b      	ldr	r3, [r3, #20]
 80064f6:	43da      	mvns	r2, r3
 80064f8:	68bb      	ldr	r3, [r7, #8]
 80064fa:	4013      	ands	r3, r2
 80064fc:	b29b      	uxth	r3, r3
 80064fe:	2b00      	cmp	r3, #0
 8006500:	bf14      	ite	ne
 8006502:	2301      	movne	r3, #1
 8006504:	2300      	moveq	r3, #0
 8006506:	b2db      	uxtb	r3, r3
 8006508:	e00b      	b.n	8006522 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800650a:	68fb      	ldr	r3, [r7, #12]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	699b      	ldr	r3, [r3, #24]
 8006510:	43da      	mvns	r2, r3
 8006512:	68bb      	ldr	r3, [r7, #8]
 8006514:	4013      	ands	r3, r2
 8006516:	b29b      	uxth	r3, r3
 8006518:	2b00      	cmp	r3, #0
 800651a:	bf14      	ite	ne
 800651c:	2301      	movne	r3, #1
 800651e:	2300      	moveq	r3, #0
 8006520:	b2db      	uxtb	r3, r3
 8006522:	2b00      	cmp	r3, #0
 8006524:	d016      	beq.n	8006554 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	2200      	movs	r2, #0
 800652a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	2220      	movs	r2, #32
 8006530:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006534:	68fb      	ldr	r3, [r7, #12]
 8006536:	2200      	movs	r2, #0
 8006538:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006540:	f043 0220 	orr.w	r2, r3, #32
 8006544:	68fb      	ldr	r3, [r7, #12]
 8006546:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	2200      	movs	r2, #0
 800654c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006550:	2301      	movs	r3, #1
 8006552:	e021      	b.n	8006598 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8006554:	68bb      	ldr	r3, [r7, #8]
 8006556:	0c1b      	lsrs	r3, r3, #16
 8006558:	b2db      	uxtb	r3, r3
 800655a:	2b01      	cmp	r3, #1
 800655c:	d10c      	bne.n	8006578 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	681b      	ldr	r3, [r3, #0]
 8006562:	695b      	ldr	r3, [r3, #20]
 8006564:	43da      	mvns	r2, r3
 8006566:	68bb      	ldr	r3, [r7, #8]
 8006568:	4013      	ands	r3, r2
 800656a:	b29b      	uxth	r3, r3
 800656c:	2b00      	cmp	r3, #0
 800656e:	bf14      	ite	ne
 8006570:	2301      	movne	r3, #1
 8006572:	2300      	moveq	r3, #0
 8006574:	b2db      	uxtb	r3, r3
 8006576:	e00b      	b.n	8006590 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	699b      	ldr	r3, [r3, #24]
 800657e:	43da      	mvns	r2, r3
 8006580:	68bb      	ldr	r3, [r7, #8]
 8006582:	4013      	ands	r3, r2
 8006584:	b29b      	uxth	r3, r3
 8006586:	2b00      	cmp	r3, #0
 8006588:	bf14      	ite	ne
 800658a:	2301      	movne	r3, #1
 800658c:	2300      	moveq	r3, #0
 800658e:	b2db      	uxtb	r3, r3
 8006590:	2b00      	cmp	r3, #0
 8006592:	f47f af6d 	bne.w	8006470 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8006596:	2300      	movs	r3, #0
}
 8006598:	4618      	mov	r0, r3
 800659a:	3710      	adds	r7, #16
 800659c:	46bd      	mov	sp, r7
 800659e:	bd80      	pop	{r7, pc}

080065a0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b084      	sub	sp, #16
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	60f8      	str	r0, [r7, #12]
 80065a8:	60b9      	str	r1, [r7, #8]
 80065aa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80065ac:	e034      	b.n	8006618 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80065ae:	68f8      	ldr	r0, [r7, #12]
 80065b0:	f000 f8e3 	bl	800677a <I2C_IsAcknowledgeFailed>
 80065b4:	4603      	mov	r3, r0
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d001      	beq.n	80065be <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80065ba:	2301      	movs	r3, #1
 80065bc:	e034      	b.n	8006628 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80065be:	68bb      	ldr	r3, [r7, #8]
 80065c0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80065c4:	d028      	beq.n	8006618 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80065c6:	f7fe fb37 	bl	8004c38 <HAL_GetTick>
 80065ca:	4602      	mov	r2, r0
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	1ad3      	subs	r3, r2, r3
 80065d0:	68ba      	ldr	r2, [r7, #8]
 80065d2:	429a      	cmp	r2, r3
 80065d4:	d302      	bcc.n	80065dc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80065d6:	68bb      	ldr	r3, [r7, #8]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d11d      	bne.n	8006618 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	695b      	ldr	r3, [r3, #20]
 80065e2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80065e6:	2b80      	cmp	r3, #128	@ 0x80
 80065e8:	d016      	beq.n	8006618 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	2200      	movs	r2, #0
 80065ee:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	2220      	movs	r2, #32
 80065f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	2200      	movs	r2, #0
 80065fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006604:	f043 0220 	orr.w	r2, r3, #32
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	2200      	movs	r2, #0
 8006610:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006614:	2301      	movs	r3, #1
 8006616:	e007      	b.n	8006628 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	681b      	ldr	r3, [r3, #0]
 800661c:	695b      	ldr	r3, [r3, #20]
 800661e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006622:	2b80      	cmp	r3, #128	@ 0x80
 8006624:	d1c3      	bne.n	80065ae <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8006626:	2300      	movs	r3, #0
}
 8006628:	4618      	mov	r0, r3
 800662a:	3710      	adds	r7, #16
 800662c:	46bd      	mov	sp, r7
 800662e:	bd80      	pop	{r7, pc}

08006630 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006630:	b580      	push	{r7, lr}
 8006632:	b084      	sub	sp, #16
 8006634:	af00      	add	r7, sp, #0
 8006636:	60f8      	str	r0, [r7, #12]
 8006638:	60b9      	str	r1, [r7, #8]
 800663a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800663c:	e034      	b.n	80066a8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800663e:	68f8      	ldr	r0, [r7, #12]
 8006640:	f000 f89b 	bl	800677a <I2C_IsAcknowledgeFailed>
 8006644:	4603      	mov	r3, r0
 8006646:	2b00      	cmp	r3, #0
 8006648:	d001      	beq.n	800664e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800664a:	2301      	movs	r3, #1
 800664c:	e034      	b.n	80066b8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800664e:	68bb      	ldr	r3, [r7, #8]
 8006650:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006654:	d028      	beq.n	80066a8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006656:	f7fe faef 	bl	8004c38 <HAL_GetTick>
 800665a:	4602      	mov	r2, r0
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	1ad3      	subs	r3, r2, r3
 8006660:	68ba      	ldr	r2, [r7, #8]
 8006662:	429a      	cmp	r2, r3
 8006664:	d302      	bcc.n	800666c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8006666:	68bb      	ldr	r3, [r7, #8]
 8006668:	2b00      	cmp	r3, #0
 800666a:	d11d      	bne.n	80066a8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	695b      	ldr	r3, [r3, #20]
 8006672:	f003 0304 	and.w	r3, r3, #4
 8006676:	2b04      	cmp	r3, #4
 8006678:	d016      	beq.n	80066a8 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800667a:	68fb      	ldr	r3, [r7, #12]
 800667c:	2200      	movs	r2, #0
 800667e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006680:	68fb      	ldr	r3, [r7, #12]
 8006682:	2220      	movs	r2, #32
 8006684:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	2200      	movs	r2, #0
 800668c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006690:	68fb      	ldr	r3, [r7, #12]
 8006692:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006694:	f043 0220 	orr.w	r2, r3, #32
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	2200      	movs	r2, #0
 80066a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80066a4:	2301      	movs	r3, #1
 80066a6:	e007      	b.n	80066b8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	695b      	ldr	r3, [r3, #20]
 80066ae:	f003 0304 	and.w	r3, r3, #4
 80066b2:	2b04      	cmp	r3, #4
 80066b4:	d1c3      	bne.n	800663e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80066b6:	2300      	movs	r3, #0
}
 80066b8:	4618      	mov	r0, r3
 80066ba:	3710      	adds	r7, #16
 80066bc:	46bd      	mov	sp, r7
 80066be:	bd80      	pop	{r7, pc}

080066c0 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80066c0:	b580      	push	{r7, lr}
 80066c2:	b084      	sub	sp, #16
 80066c4:	af00      	add	r7, sp, #0
 80066c6:	60f8      	str	r0, [r7, #12]
 80066c8:	60b9      	str	r1, [r7, #8]
 80066ca:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80066cc:	e049      	b.n	8006762 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	695b      	ldr	r3, [r3, #20]
 80066d4:	f003 0310 	and.w	r3, r3, #16
 80066d8:	2b10      	cmp	r3, #16
 80066da:	d119      	bne.n	8006710 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f06f 0210 	mvn.w	r2, #16
 80066e4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	2200      	movs	r2, #0
 80066ea:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80066ec:	68fb      	ldr	r3, [r7, #12]
 80066ee:	2220      	movs	r2, #32
 80066f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	2200      	movs	r2, #0
 80066f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	2200      	movs	r2, #0
 8006708:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 800670c:	2301      	movs	r3, #1
 800670e:	e030      	b.n	8006772 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006710:	f7fe fa92 	bl	8004c38 <HAL_GetTick>
 8006714:	4602      	mov	r2, r0
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	1ad3      	subs	r3, r2, r3
 800671a:	68ba      	ldr	r2, [r7, #8]
 800671c:	429a      	cmp	r2, r3
 800671e:	d302      	bcc.n	8006726 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006720:	68bb      	ldr	r3, [r7, #8]
 8006722:	2b00      	cmp	r3, #0
 8006724:	d11d      	bne.n	8006762 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8006726:	68fb      	ldr	r3, [r7, #12]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	695b      	ldr	r3, [r3, #20]
 800672c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006730:	2b40      	cmp	r3, #64	@ 0x40
 8006732:	d016      	beq.n	8006762 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	2200      	movs	r2, #0
 8006738:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	2220      	movs	r2, #32
 800673e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006742:	68fb      	ldr	r3, [r7, #12]
 8006744:	2200      	movs	r2, #0
 8006746:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800674e:	f043 0220 	orr.w	r2, r3, #32
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	2200      	movs	r2, #0
 800675a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 800675e:	2301      	movs	r3, #1
 8006760:	e007      	b.n	8006772 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006762:	68fb      	ldr	r3, [r7, #12]
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	695b      	ldr	r3, [r3, #20]
 8006768:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800676c:	2b40      	cmp	r3, #64	@ 0x40
 800676e:	d1ae      	bne.n	80066ce <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8006770:	2300      	movs	r3, #0
}
 8006772:	4618      	mov	r0, r3
 8006774:	3710      	adds	r7, #16
 8006776:	46bd      	mov	sp, r7
 8006778:	bd80      	pop	{r7, pc}

0800677a <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800677a:	b480      	push	{r7}
 800677c:	b083      	sub	sp, #12
 800677e:	af00      	add	r7, sp, #0
 8006780:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	695b      	ldr	r3, [r3, #20]
 8006788:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800678c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006790:	d11b      	bne.n	80067ca <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800679a:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	2200      	movs	r2, #0
 80067a0:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	2220      	movs	r2, #32
 80067a6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	2200      	movs	r2, #0
 80067ae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067b6:	f043 0204 	orr.w	r2, r3, #4
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	2200      	movs	r2, #0
 80067c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80067c6:	2301      	movs	r3, #1
 80067c8:	e000      	b.n	80067cc <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80067ca:	2300      	movs	r3, #0
}
 80067cc:	4618      	mov	r0, r3
 80067ce:	370c      	adds	r7, #12
 80067d0:	46bd      	mov	sp, r7
 80067d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d6:	4770      	bx	lr

080067d8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80067d8:	b580      	push	{r7, lr}
 80067da:	b086      	sub	sp, #24
 80067dc:	af00      	add	r7, sp, #0
 80067de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d101      	bne.n	80067ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80067e6:	2301      	movs	r3, #1
 80067e8:	e267      	b.n	8006cba <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	681b      	ldr	r3, [r3, #0]
 80067ee:	f003 0301 	and.w	r3, r3, #1
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d075      	beq.n	80068e2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80067f6:	4b88      	ldr	r3, [pc, #544]	@ (8006a18 <HAL_RCC_OscConfig+0x240>)
 80067f8:	689b      	ldr	r3, [r3, #8]
 80067fa:	f003 030c 	and.w	r3, r3, #12
 80067fe:	2b04      	cmp	r3, #4
 8006800:	d00c      	beq.n	800681c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006802:	4b85      	ldr	r3, [pc, #532]	@ (8006a18 <HAL_RCC_OscConfig+0x240>)
 8006804:	689b      	ldr	r3, [r3, #8]
 8006806:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800680a:	2b08      	cmp	r3, #8
 800680c:	d112      	bne.n	8006834 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800680e:	4b82      	ldr	r3, [pc, #520]	@ (8006a18 <HAL_RCC_OscConfig+0x240>)
 8006810:	685b      	ldr	r3, [r3, #4]
 8006812:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006816:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800681a:	d10b      	bne.n	8006834 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800681c:	4b7e      	ldr	r3, [pc, #504]	@ (8006a18 <HAL_RCC_OscConfig+0x240>)
 800681e:	681b      	ldr	r3, [r3, #0]
 8006820:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006824:	2b00      	cmp	r3, #0
 8006826:	d05b      	beq.n	80068e0 <HAL_RCC_OscConfig+0x108>
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	685b      	ldr	r3, [r3, #4]
 800682c:	2b00      	cmp	r3, #0
 800682e:	d157      	bne.n	80068e0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006830:	2301      	movs	r3, #1
 8006832:	e242      	b.n	8006cba <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	685b      	ldr	r3, [r3, #4]
 8006838:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800683c:	d106      	bne.n	800684c <HAL_RCC_OscConfig+0x74>
 800683e:	4b76      	ldr	r3, [pc, #472]	@ (8006a18 <HAL_RCC_OscConfig+0x240>)
 8006840:	681b      	ldr	r3, [r3, #0]
 8006842:	4a75      	ldr	r2, [pc, #468]	@ (8006a18 <HAL_RCC_OscConfig+0x240>)
 8006844:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006848:	6013      	str	r3, [r2, #0]
 800684a:	e01d      	b.n	8006888 <HAL_RCC_OscConfig+0xb0>
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	685b      	ldr	r3, [r3, #4]
 8006850:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8006854:	d10c      	bne.n	8006870 <HAL_RCC_OscConfig+0x98>
 8006856:	4b70      	ldr	r3, [pc, #448]	@ (8006a18 <HAL_RCC_OscConfig+0x240>)
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	4a6f      	ldr	r2, [pc, #444]	@ (8006a18 <HAL_RCC_OscConfig+0x240>)
 800685c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006860:	6013      	str	r3, [r2, #0]
 8006862:	4b6d      	ldr	r3, [pc, #436]	@ (8006a18 <HAL_RCC_OscConfig+0x240>)
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	4a6c      	ldr	r2, [pc, #432]	@ (8006a18 <HAL_RCC_OscConfig+0x240>)
 8006868:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800686c:	6013      	str	r3, [r2, #0]
 800686e:	e00b      	b.n	8006888 <HAL_RCC_OscConfig+0xb0>
 8006870:	4b69      	ldr	r3, [pc, #420]	@ (8006a18 <HAL_RCC_OscConfig+0x240>)
 8006872:	681b      	ldr	r3, [r3, #0]
 8006874:	4a68      	ldr	r2, [pc, #416]	@ (8006a18 <HAL_RCC_OscConfig+0x240>)
 8006876:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800687a:	6013      	str	r3, [r2, #0]
 800687c:	4b66      	ldr	r3, [pc, #408]	@ (8006a18 <HAL_RCC_OscConfig+0x240>)
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	4a65      	ldr	r2, [pc, #404]	@ (8006a18 <HAL_RCC_OscConfig+0x240>)
 8006882:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8006886:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	685b      	ldr	r3, [r3, #4]
 800688c:	2b00      	cmp	r3, #0
 800688e:	d013      	beq.n	80068b8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006890:	f7fe f9d2 	bl	8004c38 <HAL_GetTick>
 8006894:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006896:	e008      	b.n	80068aa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8006898:	f7fe f9ce 	bl	8004c38 <HAL_GetTick>
 800689c:	4602      	mov	r2, r0
 800689e:	693b      	ldr	r3, [r7, #16]
 80068a0:	1ad3      	subs	r3, r2, r3
 80068a2:	2b64      	cmp	r3, #100	@ 0x64
 80068a4:	d901      	bls.n	80068aa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80068a6:	2303      	movs	r3, #3
 80068a8:	e207      	b.n	8006cba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80068aa:	4b5b      	ldr	r3, [pc, #364]	@ (8006a18 <HAL_RCC_OscConfig+0x240>)
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80068b2:	2b00      	cmp	r3, #0
 80068b4:	d0f0      	beq.n	8006898 <HAL_RCC_OscConfig+0xc0>
 80068b6:	e014      	b.n	80068e2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80068b8:	f7fe f9be 	bl	8004c38 <HAL_GetTick>
 80068bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80068be:	e008      	b.n	80068d2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80068c0:	f7fe f9ba 	bl	8004c38 <HAL_GetTick>
 80068c4:	4602      	mov	r2, r0
 80068c6:	693b      	ldr	r3, [r7, #16]
 80068c8:	1ad3      	subs	r3, r2, r3
 80068ca:	2b64      	cmp	r3, #100	@ 0x64
 80068cc:	d901      	bls.n	80068d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80068ce:	2303      	movs	r3, #3
 80068d0:	e1f3      	b.n	8006cba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80068d2:	4b51      	ldr	r3, [pc, #324]	@ (8006a18 <HAL_RCC_OscConfig+0x240>)
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d1f0      	bne.n	80068c0 <HAL_RCC_OscConfig+0xe8>
 80068de:	e000      	b.n	80068e2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80068e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f003 0302 	and.w	r3, r3, #2
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d063      	beq.n	80069b6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80068ee:	4b4a      	ldr	r3, [pc, #296]	@ (8006a18 <HAL_RCC_OscConfig+0x240>)
 80068f0:	689b      	ldr	r3, [r3, #8]
 80068f2:	f003 030c 	and.w	r3, r3, #12
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d00b      	beq.n	8006912 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80068fa:	4b47      	ldr	r3, [pc, #284]	@ (8006a18 <HAL_RCC_OscConfig+0x240>)
 80068fc:	689b      	ldr	r3, [r3, #8]
 80068fe:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006902:	2b08      	cmp	r3, #8
 8006904:	d11c      	bne.n	8006940 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006906:	4b44      	ldr	r3, [pc, #272]	@ (8006a18 <HAL_RCC_OscConfig+0x240>)
 8006908:	685b      	ldr	r3, [r3, #4]
 800690a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800690e:	2b00      	cmp	r3, #0
 8006910:	d116      	bne.n	8006940 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006912:	4b41      	ldr	r3, [pc, #260]	@ (8006a18 <HAL_RCC_OscConfig+0x240>)
 8006914:	681b      	ldr	r3, [r3, #0]
 8006916:	f003 0302 	and.w	r3, r3, #2
 800691a:	2b00      	cmp	r3, #0
 800691c:	d005      	beq.n	800692a <HAL_RCC_OscConfig+0x152>
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	68db      	ldr	r3, [r3, #12]
 8006922:	2b01      	cmp	r3, #1
 8006924:	d001      	beq.n	800692a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006926:	2301      	movs	r3, #1
 8006928:	e1c7      	b.n	8006cba <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800692a:	4b3b      	ldr	r3, [pc, #236]	@ (8006a18 <HAL_RCC_OscConfig+0x240>)
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	691b      	ldr	r3, [r3, #16]
 8006936:	00db      	lsls	r3, r3, #3
 8006938:	4937      	ldr	r1, [pc, #220]	@ (8006a18 <HAL_RCC_OscConfig+0x240>)
 800693a:	4313      	orrs	r3, r2
 800693c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800693e:	e03a      	b.n	80069b6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	68db      	ldr	r3, [r3, #12]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d020      	beq.n	800698a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006948:	4b34      	ldr	r3, [pc, #208]	@ (8006a1c <HAL_RCC_OscConfig+0x244>)
 800694a:	2201      	movs	r2, #1
 800694c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800694e:	f7fe f973 	bl	8004c38 <HAL_GetTick>
 8006952:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006954:	e008      	b.n	8006968 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006956:	f7fe f96f 	bl	8004c38 <HAL_GetTick>
 800695a:	4602      	mov	r2, r0
 800695c:	693b      	ldr	r3, [r7, #16]
 800695e:	1ad3      	subs	r3, r2, r3
 8006960:	2b02      	cmp	r3, #2
 8006962:	d901      	bls.n	8006968 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006964:	2303      	movs	r3, #3
 8006966:	e1a8      	b.n	8006cba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006968:	4b2b      	ldr	r3, [pc, #172]	@ (8006a18 <HAL_RCC_OscConfig+0x240>)
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	f003 0302 	and.w	r3, r3, #2
 8006970:	2b00      	cmp	r3, #0
 8006972:	d0f0      	beq.n	8006956 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006974:	4b28      	ldr	r3, [pc, #160]	@ (8006a18 <HAL_RCC_OscConfig+0x240>)
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	691b      	ldr	r3, [r3, #16]
 8006980:	00db      	lsls	r3, r3, #3
 8006982:	4925      	ldr	r1, [pc, #148]	@ (8006a18 <HAL_RCC_OscConfig+0x240>)
 8006984:	4313      	orrs	r3, r2
 8006986:	600b      	str	r3, [r1, #0]
 8006988:	e015      	b.n	80069b6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800698a:	4b24      	ldr	r3, [pc, #144]	@ (8006a1c <HAL_RCC_OscConfig+0x244>)
 800698c:	2200      	movs	r2, #0
 800698e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006990:	f7fe f952 	bl	8004c38 <HAL_GetTick>
 8006994:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006996:	e008      	b.n	80069aa <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8006998:	f7fe f94e 	bl	8004c38 <HAL_GetTick>
 800699c:	4602      	mov	r2, r0
 800699e:	693b      	ldr	r3, [r7, #16]
 80069a0:	1ad3      	subs	r3, r2, r3
 80069a2:	2b02      	cmp	r3, #2
 80069a4:	d901      	bls.n	80069aa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80069a6:	2303      	movs	r3, #3
 80069a8:	e187      	b.n	8006cba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80069aa:	4b1b      	ldr	r3, [pc, #108]	@ (8006a18 <HAL_RCC_OscConfig+0x240>)
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	f003 0302 	and.w	r3, r3, #2
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d1f0      	bne.n	8006998 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	f003 0308 	and.w	r3, r3, #8
 80069be:	2b00      	cmp	r3, #0
 80069c0:	d036      	beq.n	8006a30 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	695b      	ldr	r3, [r3, #20]
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d016      	beq.n	80069f8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80069ca:	4b15      	ldr	r3, [pc, #84]	@ (8006a20 <HAL_RCC_OscConfig+0x248>)
 80069cc:	2201      	movs	r2, #1
 80069ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069d0:	f7fe f932 	bl	8004c38 <HAL_GetTick>
 80069d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80069d6:	e008      	b.n	80069ea <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80069d8:	f7fe f92e 	bl	8004c38 <HAL_GetTick>
 80069dc:	4602      	mov	r2, r0
 80069de:	693b      	ldr	r3, [r7, #16]
 80069e0:	1ad3      	subs	r3, r2, r3
 80069e2:	2b02      	cmp	r3, #2
 80069e4:	d901      	bls.n	80069ea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80069e6:	2303      	movs	r3, #3
 80069e8:	e167      	b.n	8006cba <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80069ea:	4b0b      	ldr	r3, [pc, #44]	@ (8006a18 <HAL_RCC_OscConfig+0x240>)
 80069ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80069ee:	f003 0302 	and.w	r3, r3, #2
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d0f0      	beq.n	80069d8 <HAL_RCC_OscConfig+0x200>
 80069f6:	e01b      	b.n	8006a30 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80069f8:	4b09      	ldr	r3, [pc, #36]	@ (8006a20 <HAL_RCC_OscConfig+0x248>)
 80069fa:	2200      	movs	r2, #0
 80069fc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80069fe:	f7fe f91b 	bl	8004c38 <HAL_GetTick>
 8006a02:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006a04:	e00e      	b.n	8006a24 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006a06:	f7fe f917 	bl	8004c38 <HAL_GetTick>
 8006a0a:	4602      	mov	r2, r0
 8006a0c:	693b      	ldr	r3, [r7, #16]
 8006a0e:	1ad3      	subs	r3, r2, r3
 8006a10:	2b02      	cmp	r3, #2
 8006a12:	d907      	bls.n	8006a24 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006a14:	2303      	movs	r3, #3
 8006a16:	e150      	b.n	8006cba <HAL_RCC_OscConfig+0x4e2>
 8006a18:	40023800 	.word	0x40023800
 8006a1c:	42470000 	.word	0x42470000
 8006a20:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006a24:	4b88      	ldr	r3, [pc, #544]	@ (8006c48 <HAL_RCC_OscConfig+0x470>)
 8006a26:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006a28:	f003 0302 	and.w	r3, r3, #2
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d1ea      	bne.n	8006a06 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	f003 0304 	and.w	r3, r3, #4
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	f000 8097 	beq.w	8006b6c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006a3e:	2300      	movs	r3, #0
 8006a40:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006a42:	4b81      	ldr	r3, [pc, #516]	@ (8006c48 <HAL_RCC_OscConfig+0x470>)
 8006a44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d10f      	bne.n	8006a6e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006a4e:	2300      	movs	r3, #0
 8006a50:	60bb      	str	r3, [r7, #8]
 8006a52:	4b7d      	ldr	r3, [pc, #500]	@ (8006c48 <HAL_RCC_OscConfig+0x470>)
 8006a54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a56:	4a7c      	ldr	r2, [pc, #496]	@ (8006c48 <HAL_RCC_OscConfig+0x470>)
 8006a58:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006a5c:	6413      	str	r3, [r2, #64]	@ 0x40
 8006a5e:	4b7a      	ldr	r3, [pc, #488]	@ (8006c48 <HAL_RCC_OscConfig+0x470>)
 8006a60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006a66:	60bb      	str	r3, [r7, #8]
 8006a68:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006a6a:	2301      	movs	r3, #1
 8006a6c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a6e:	4b77      	ldr	r3, [pc, #476]	@ (8006c4c <HAL_RCC_OscConfig+0x474>)
 8006a70:	681b      	ldr	r3, [r3, #0]
 8006a72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d118      	bne.n	8006aac <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006a7a:	4b74      	ldr	r3, [pc, #464]	@ (8006c4c <HAL_RCC_OscConfig+0x474>)
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	4a73      	ldr	r2, [pc, #460]	@ (8006c4c <HAL_RCC_OscConfig+0x474>)
 8006a80:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006a84:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006a86:	f7fe f8d7 	bl	8004c38 <HAL_GetTick>
 8006a8a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a8c:	e008      	b.n	8006aa0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006a8e:	f7fe f8d3 	bl	8004c38 <HAL_GetTick>
 8006a92:	4602      	mov	r2, r0
 8006a94:	693b      	ldr	r3, [r7, #16]
 8006a96:	1ad3      	subs	r3, r2, r3
 8006a98:	2b02      	cmp	r3, #2
 8006a9a:	d901      	bls.n	8006aa0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006a9c:	2303      	movs	r3, #3
 8006a9e:	e10c      	b.n	8006cba <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006aa0:	4b6a      	ldr	r3, [pc, #424]	@ (8006c4c <HAL_RCC_OscConfig+0x474>)
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006aa8:	2b00      	cmp	r3, #0
 8006aaa:	d0f0      	beq.n	8006a8e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	689b      	ldr	r3, [r3, #8]
 8006ab0:	2b01      	cmp	r3, #1
 8006ab2:	d106      	bne.n	8006ac2 <HAL_RCC_OscConfig+0x2ea>
 8006ab4:	4b64      	ldr	r3, [pc, #400]	@ (8006c48 <HAL_RCC_OscConfig+0x470>)
 8006ab6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ab8:	4a63      	ldr	r2, [pc, #396]	@ (8006c48 <HAL_RCC_OscConfig+0x470>)
 8006aba:	f043 0301 	orr.w	r3, r3, #1
 8006abe:	6713      	str	r3, [r2, #112]	@ 0x70
 8006ac0:	e01c      	b.n	8006afc <HAL_RCC_OscConfig+0x324>
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	689b      	ldr	r3, [r3, #8]
 8006ac6:	2b05      	cmp	r3, #5
 8006ac8:	d10c      	bne.n	8006ae4 <HAL_RCC_OscConfig+0x30c>
 8006aca:	4b5f      	ldr	r3, [pc, #380]	@ (8006c48 <HAL_RCC_OscConfig+0x470>)
 8006acc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ace:	4a5e      	ldr	r2, [pc, #376]	@ (8006c48 <HAL_RCC_OscConfig+0x470>)
 8006ad0:	f043 0304 	orr.w	r3, r3, #4
 8006ad4:	6713      	str	r3, [r2, #112]	@ 0x70
 8006ad6:	4b5c      	ldr	r3, [pc, #368]	@ (8006c48 <HAL_RCC_OscConfig+0x470>)
 8006ad8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ada:	4a5b      	ldr	r2, [pc, #364]	@ (8006c48 <HAL_RCC_OscConfig+0x470>)
 8006adc:	f043 0301 	orr.w	r3, r3, #1
 8006ae0:	6713      	str	r3, [r2, #112]	@ 0x70
 8006ae2:	e00b      	b.n	8006afc <HAL_RCC_OscConfig+0x324>
 8006ae4:	4b58      	ldr	r3, [pc, #352]	@ (8006c48 <HAL_RCC_OscConfig+0x470>)
 8006ae6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006ae8:	4a57      	ldr	r2, [pc, #348]	@ (8006c48 <HAL_RCC_OscConfig+0x470>)
 8006aea:	f023 0301 	bic.w	r3, r3, #1
 8006aee:	6713      	str	r3, [r2, #112]	@ 0x70
 8006af0:	4b55      	ldr	r3, [pc, #340]	@ (8006c48 <HAL_RCC_OscConfig+0x470>)
 8006af2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006af4:	4a54      	ldr	r2, [pc, #336]	@ (8006c48 <HAL_RCC_OscConfig+0x470>)
 8006af6:	f023 0304 	bic.w	r3, r3, #4
 8006afa:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	689b      	ldr	r3, [r3, #8]
 8006b00:	2b00      	cmp	r3, #0
 8006b02:	d015      	beq.n	8006b30 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b04:	f7fe f898 	bl	8004c38 <HAL_GetTick>
 8006b08:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b0a:	e00a      	b.n	8006b22 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b0c:	f7fe f894 	bl	8004c38 <HAL_GetTick>
 8006b10:	4602      	mov	r2, r0
 8006b12:	693b      	ldr	r3, [r7, #16]
 8006b14:	1ad3      	subs	r3, r2, r3
 8006b16:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006b1a:	4293      	cmp	r3, r2
 8006b1c:	d901      	bls.n	8006b22 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006b1e:	2303      	movs	r3, #3
 8006b20:	e0cb      	b.n	8006cba <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b22:	4b49      	ldr	r3, [pc, #292]	@ (8006c48 <HAL_RCC_OscConfig+0x470>)
 8006b24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b26:	f003 0302 	and.w	r3, r3, #2
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	d0ee      	beq.n	8006b0c <HAL_RCC_OscConfig+0x334>
 8006b2e:	e014      	b.n	8006b5a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006b30:	f7fe f882 	bl	8004c38 <HAL_GetTick>
 8006b34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006b36:	e00a      	b.n	8006b4e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b38:	f7fe f87e 	bl	8004c38 <HAL_GetTick>
 8006b3c:	4602      	mov	r2, r0
 8006b3e:	693b      	ldr	r3, [r7, #16]
 8006b40:	1ad3      	subs	r3, r2, r3
 8006b42:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006b46:	4293      	cmp	r3, r2
 8006b48:	d901      	bls.n	8006b4e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006b4a:	2303      	movs	r3, #3
 8006b4c:	e0b5      	b.n	8006cba <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006b4e:	4b3e      	ldr	r3, [pc, #248]	@ (8006c48 <HAL_RCC_OscConfig+0x470>)
 8006b50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b52:	f003 0302 	and.w	r3, r3, #2
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d1ee      	bne.n	8006b38 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006b5a:	7dfb      	ldrb	r3, [r7, #23]
 8006b5c:	2b01      	cmp	r3, #1
 8006b5e:	d105      	bne.n	8006b6c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006b60:	4b39      	ldr	r3, [pc, #228]	@ (8006c48 <HAL_RCC_OscConfig+0x470>)
 8006b62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b64:	4a38      	ldr	r2, [pc, #224]	@ (8006c48 <HAL_RCC_OscConfig+0x470>)
 8006b66:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006b6a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	699b      	ldr	r3, [r3, #24]
 8006b70:	2b00      	cmp	r3, #0
 8006b72:	f000 80a1 	beq.w	8006cb8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006b76:	4b34      	ldr	r3, [pc, #208]	@ (8006c48 <HAL_RCC_OscConfig+0x470>)
 8006b78:	689b      	ldr	r3, [r3, #8]
 8006b7a:	f003 030c 	and.w	r3, r3, #12
 8006b7e:	2b08      	cmp	r3, #8
 8006b80:	d05c      	beq.n	8006c3c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	699b      	ldr	r3, [r3, #24]
 8006b86:	2b02      	cmp	r3, #2
 8006b88:	d141      	bne.n	8006c0e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006b8a:	4b31      	ldr	r3, [pc, #196]	@ (8006c50 <HAL_RCC_OscConfig+0x478>)
 8006b8c:	2200      	movs	r2, #0
 8006b8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b90:	f7fe f852 	bl	8004c38 <HAL_GetTick>
 8006b94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006b96:	e008      	b.n	8006baa <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006b98:	f7fe f84e 	bl	8004c38 <HAL_GetTick>
 8006b9c:	4602      	mov	r2, r0
 8006b9e:	693b      	ldr	r3, [r7, #16]
 8006ba0:	1ad3      	subs	r3, r2, r3
 8006ba2:	2b02      	cmp	r3, #2
 8006ba4:	d901      	bls.n	8006baa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006ba6:	2303      	movs	r3, #3
 8006ba8:	e087      	b.n	8006cba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006baa:	4b27      	ldr	r3, [pc, #156]	@ (8006c48 <HAL_RCC_OscConfig+0x470>)
 8006bac:	681b      	ldr	r3, [r3, #0]
 8006bae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d1f0      	bne.n	8006b98 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	69da      	ldr	r2, [r3, #28]
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	6a1b      	ldr	r3, [r3, #32]
 8006bbe:	431a      	orrs	r2, r3
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bc4:	019b      	lsls	r3, r3, #6
 8006bc6:	431a      	orrs	r2, r3
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bcc:	085b      	lsrs	r3, r3, #1
 8006bce:	3b01      	subs	r3, #1
 8006bd0:	041b      	lsls	r3, r3, #16
 8006bd2:	431a      	orrs	r2, r3
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bd8:	061b      	lsls	r3, r3, #24
 8006bda:	491b      	ldr	r1, [pc, #108]	@ (8006c48 <HAL_RCC_OscConfig+0x470>)
 8006bdc:	4313      	orrs	r3, r2
 8006bde:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006be0:	4b1b      	ldr	r3, [pc, #108]	@ (8006c50 <HAL_RCC_OscConfig+0x478>)
 8006be2:	2201      	movs	r2, #1
 8006be4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006be6:	f7fe f827 	bl	8004c38 <HAL_GetTick>
 8006bea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006bec:	e008      	b.n	8006c00 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006bee:	f7fe f823 	bl	8004c38 <HAL_GetTick>
 8006bf2:	4602      	mov	r2, r0
 8006bf4:	693b      	ldr	r3, [r7, #16]
 8006bf6:	1ad3      	subs	r3, r2, r3
 8006bf8:	2b02      	cmp	r3, #2
 8006bfa:	d901      	bls.n	8006c00 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006bfc:	2303      	movs	r3, #3
 8006bfe:	e05c      	b.n	8006cba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006c00:	4b11      	ldr	r3, [pc, #68]	@ (8006c48 <HAL_RCC_OscConfig+0x470>)
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006c08:	2b00      	cmp	r3, #0
 8006c0a:	d0f0      	beq.n	8006bee <HAL_RCC_OscConfig+0x416>
 8006c0c:	e054      	b.n	8006cb8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006c0e:	4b10      	ldr	r3, [pc, #64]	@ (8006c50 <HAL_RCC_OscConfig+0x478>)
 8006c10:	2200      	movs	r2, #0
 8006c12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c14:	f7fe f810 	bl	8004c38 <HAL_GetTick>
 8006c18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006c1a:	e008      	b.n	8006c2e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c1c:	f7fe f80c 	bl	8004c38 <HAL_GetTick>
 8006c20:	4602      	mov	r2, r0
 8006c22:	693b      	ldr	r3, [r7, #16]
 8006c24:	1ad3      	subs	r3, r2, r3
 8006c26:	2b02      	cmp	r3, #2
 8006c28:	d901      	bls.n	8006c2e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006c2a:	2303      	movs	r3, #3
 8006c2c:	e045      	b.n	8006cba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006c2e:	4b06      	ldr	r3, [pc, #24]	@ (8006c48 <HAL_RCC_OscConfig+0x470>)
 8006c30:	681b      	ldr	r3, [r3, #0]
 8006c32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d1f0      	bne.n	8006c1c <HAL_RCC_OscConfig+0x444>
 8006c3a:	e03d      	b.n	8006cb8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	699b      	ldr	r3, [r3, #24]
 8006c40:	2b01      	cmp	r3, #1
 8006c42:	d107      	bne.n	8006c54 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006c44:	2301      	movs	r3, #1
 8006c46:	e038      	b.n	8006cba <HAL_RCC_OscConfig+0x4e2>
 8006c48:	40023800 	.word	0x40023800
 8006c4c:	40007000 	.word	0x40007000
 8006c50:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006c54:	4b1b      	ldr	r3, [pc, #108]	@ (8006cc4 <HAL_RCC_OscConfig+0x4ec>)
 8006c56:	685b      	ldr	r3, [r3, #4]
 8006c58:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	699b      	ldr	r3, [r3, #24]
 8006c5e:	2b01      	cmp	r3, #1
 8006c60:	d028      	beq.n	8006cb4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006c62:	68fb      	ldr	r3, [r7, #12]
 8006c64:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006c6c:	429a      	cmp	r2, r3
 8006c6e:	d121      	bne.n	8006cb4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006c70:	68fb      	ldr	r3, [r7, #12]
 8006c72:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006c7a:	429a      	cmp	r2, r3
 8006c7c:	d11a      	bne.n	8006cb4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006c7e:	68fa      	ldr	r2, [r7, #12]
 8006c80:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006c84:	4013      	ands	r3, r2
 8006c86:	687a      	ldr	r2, [r7, #4]
 8006c88:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006c8a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006c8c:	4293      	cmp	r3, r2
 8006c8e:	d111      	bne.n	8006cb4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c9a:	085b      	lsrs	r3, r3, #1
 8006c9c:	3b01      	subs	r3, #1
 8006c9e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006ca0:	429a      	cmp	r2, r3
 8006ca2:	d107      	bne.n	8006cb4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006cae:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006cb0:	429a      	cmp	r2, r3
 8006cb2:	d001      	beq.n	8006cb8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8006cb4:	2301      	movs	r3, #1
 8006cb6:	e000      	b.n	8006cba <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006cb8:	2300      	movs	r3, #0
}
 8006cba:	4618      	mov	r0, r3
 8006cbc:	3718      	adds	r7, #24
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	bd80      	pop	{r7, pc}
 8006cc2:	bf00      	nop
 8006cc4:	40023800 	.word	0x40023800

08006cc8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	b084      	sub	sp, #16
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
 8006cd0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d101      	bne.n	8006cdc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006cd8:	2301      	movs	r3, #1
 8006cda:	e0cc      	b.n	8006e76 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006cdc:	4b68      	ldr	r3, [pc, #416]	@ (8006e80 <HAL_RCC_ClockConfig+0x1b8>)
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	f003 0307 	and.w	r3, r3, #7
 8006ce4:	683a      	ldr	r2, [r7, #0]
 8006ce6:	429a      	cmp	r2, r3
 8006ce8:	d90c      	bls.n	8006d04 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006cea:	4b65      	ldr	r3, [pc, #404]	@ (8006e80 <HAL_RCC_ClockConfig+0x1b8>)
 8006cec:	683a      	ldr	r2, [r7, #0]
 8006cee:	b2d2      	uxtb	r2, r2
 8006cf0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006cf2:	4b63      	ldr	r3, [pc, #396]	@ (8006e80 <HAL_RCC_ClockConfig+0x1b8>)
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	f003 0307 	and.w	r3, r3, #7
 8006cfa:	683a      	ldr	r2, [r7, #0]
 8006cfc:	429a      	cmp	r2, r3
 8006cfe:	d001      	beq.n	8006d04 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006d00:	2301      	movs	r3, #1
 8006d02:	e0b8      	b.n	8006e76 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	f003 0302 	and.w	r3, r3, #2
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d020      	beq.n	8006d52 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	f003 0304 	and.w	r3, r3, #4
 8006d18:	2b00      	cmp	r3, #0
 8006d1a:	d005      	beq.n	8006d28 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006d1c:	4b59      	ldr	r3, [pc, #356]	@ (8006e84 <HAL_RCC_ClockConfig+0x1bc>)
 8006d1e:	689b      	ldr	r3, [r3, #8]
 8006d20:	4a58      	ldr	r2, [pc, #352]	@ (8006e84 <HAL_RCC_ClockConfig+0x1bc>)
 8006d22:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006d26:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	f003 0308 	and.w	r3, r3, #8
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d005      	beq.n	8006d40 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006d34:	4b53      	ldr	r3, [pc, #332]	@ (8006e84 <HAL_RCC_ClockConfig+0x1bc>)
 8006d36:	689b      	ldr	r3, [r3, #8]
 8006d38:	4a52      	ldr	r2, [pc, #328]	@ (8006e84 <HAL_RCC_ClockConfig+0x1bc>)
 8006d3a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006d3e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006d40:	4b50      	ldr	r3, [pc, #320]	@ (8006e84 <HAL_RCC_ClockConfig+0x1bc>)
 8006d42:	689b      	ldr	r3, [r3, #8]
 8006d44:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	689b      	ldr	r3, [r3, #8]
 8006d4c:	494d      	ldr	r1, [pc, #308]	@ (8006e84 <HAL_RCC_ClockConfig+0x1bc>)
 8006d4e:	4313      	orrs	r3, r2
 8006d50:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	f003 0301 	and.w	r3, r3, #1
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d044      	beq.n	8006de8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	685b      	ldr	r3, [r3, #4]
 8006d62:	2b01      	cmp	r3, #1
 8006d64:	d107      	bne.n	8006d76 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006d66:	4b47      	ldr	r3, [pc, #284]	@ (8006e84 <HAL_RCC_ClockConfig+0x1bc>)
 8006d68:	681b      	ldr	r3, [r3, #0]
 8006d6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006d6e:	2b00      	cmp	r3, #0
 8006d70:	d119      	bne.n	8006da6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006d72:	2301      	movs	r3, #1
 8006d74:	e07f      	b.n	8006e76 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	685b      	ldr	r3, [r3, #4]
 8006d7a:	2b02      	cmp	r3, #2
 8006d7c:	d003      	beq.n	8006d86 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006d82:	2b03      	cmp	r3, #3
 8006d84:	d107      	bne.n	8006d96 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006d86:	4b3f      	ldr	r3, [pc, #252]	@ (8006e84 <HAL_RCC_ClockConfig+0x1bc>)
 8006d88:	681b      	ldr	r3, [r3, #0]
 8006d8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d109      	bne.n	8006da6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006d92:	2301      	movs	r3, #1
 8006d94:	e06f      	b.n	8006e76 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006d96:	4b3b      	ldr	r3, [pc, #236]	@ (8006e84 <HAL_RCC_ClockConfig+0x1bc>)
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	f003 0302 	and.w	r3, r3, #2
 8006d9e:	2b00      	cmp	r3, #0
 8006da0:	d101      	bne.n	8006da6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006da2:	2301      	movs	r3, #1
 8006da4:	e067      	b.n	8006e76 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006da6:	4b37      	ldr	r3, [pc, #220]	@ (8006e84 <HAL_RCC_ClockConfig+0x1bc>)
 8006da8:	689b      	ldr	r3, [r3, #8]
 8006daa:	f023 0203 	bic.w	r2, r3, #3
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	685b      	ldr	r3, [r3, #4]
 8006db2:	4934      	ldr	r1, [pc, #208]	@ (8006e84 <HAL_RCC_ClockConfig+0x1bc>)
 8006db4:	4313      	orrs	r3, r2
 8006db6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006db8:	f7fd ff3e 	bl	8004c38 <HAL_GetTick>
 8006dbc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006dbe:	e00a      	b.n	8006dd6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006dc0:	f7fd ff3a 	bl	8004c38 <HAL_GetTick>
 8006dc4:	4602      	mov	r2, r0
 8006dc6:	68fb      	ldr	r3, [r7, #12]
 8006dc8:	1ad3      	subs	r3, r2, r3
 8006dca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006dce:	4293      	cmp	r3, r2
 8006dd0:	d901      	bls.n	8006dd6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006dd2:	2303      	movs	r3, #3
 8006dd4:	e04f      	b.n	8006e76 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006dd6:	4b2b      	ldr	r3, [pc, #172]	@ (8006e84 <HAL_RCC_ClockConfig+0x1bc>)
 8006dd8:	689b      	ldr	r3, [r3, #8]
 8006dda:	f003 020c 	and.w	r2, r3, #12
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	685b      	ldr	r3, [r3, #4]
 8006de2:	009b      	lsls	r3, r3, #2
 8006de4:	429a      	cmp	r2, r3
 8006de6:	d1eb      	bne.n	8006dc0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006de8:	4b25      	ldr	r3, [pc, #148]	@ (8006e80 <HAL_RCC_ClockConfig+0x1b8>)
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	f003 0307 	and.w	r3, r3, #7
 8006df0:	683a      	ldr	r2, [r7, #0]
 8006df2:	429a      	cmp	r2, r3
 8006df4:	d20c      	bcs.n	8006e10 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006df6:	4b22      	ldr	r3, [pc, #136]	@ (8006e80 <HAL_RCC_ClockConfig+0x1b8>)
 8006df8:	683a      	ldr	r2, [r7, #0]
 8006dfa:	b2d2      	uxtb	r2, r2
 8006dfc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006dfe:	4b20      	ldr	r3, [pc, #128]	@ (8006e80 <HAL_RCC_ClockConfig+0x1b8>)
 8006e00:	681b      	ldr	r3, [r3, #0]
 8006e02:	f003 0307 	and.w	r3, r3, #7
 8006e06:	683a      	ldr	r2, [r7, #0]
 8006e08:	429a      	cmp	r2, r3
 8006e0a:	d001      	beq.n	8006e10 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006e0c:	2301      	movs	r3, #1
 8006e0e:	e032      	b.n	8006e76 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	f003 0304 	and.w	r3, r3, #4
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d008      	beq.n	8006e2e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006e1c:	4b19      	ldr	r3, [pc, #100]	@ (8006e84 <HAL_RCC_ClockConfig+0x1bc>)
 8006e1e:	689b      	ldr	r3, [r3, #8]
 8006e20:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	68db      	ldr	r3, [r3, #12]
 8006e28:	4916      	ldr	r1, [pc, #88]	@ (8006e84 <HAL_RCC_ClockConfig+0x1bc>)
 8006e2a:	4313      	orrs	r3, r2
 8006e2c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	f003 0308 	and.w	r3, r3, #8
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d009      	beq.n	8006e4e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006e3a:	4b12      	ldr	r3, [pc, #72]	@ (8006e84 <HAL_RCC_ClockConfig+0x1bc>)
 8006e3c:	689b      	ldr	r3, [r3, #8]
 8006e3e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	691b      	ldr	r3, [r3, #16]
 8006e46:	00db      	lsls	r3, r3, #3
 8006e48:	490e      	ldr	r1, [pc, #56]	@ (8006e84 <HAL_RCC_ClockConfig+0x1bc>)
 8006e4a:	4313      	orrs	r3, r2
 8006e4c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006e4e:	f000 f821 	bl	8006e94 <HAL_RCC_GetSysClockFreq>
 8006e52:	4602      	mov	r2, r0
 8006e54:	4b0b      	ldr	r3, [pc, #44]	@ (8006e84 <HAL_RCC_ClockConfig+0x1bc>)
 8006e56:	689b      	ldr	r3, [r3, #8]
 8006e58:	091b      	lsrs	r3, r3, #4
 8006e5a:	f003 030f 	and.w	r3, r3, #15
 8006e5e:	490a      	ldr	r1, [pc, #40]	@ (8006e88 <HAL_RCC_ClockConfig+0x1c0>)
 8006e60:	5ccb      	ldrb	r3, [r1, r3]
 8006e62:	fa22 f303 	lsr.w	r3, r2, r3
 8006e66:	4a09      	ldr	r2, [pc, #36]	@ (8006e8c <HAL_RCC_ClockConfig+0x1c4>)
 8006e68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8006e6a:	4b09      	ldr	r3, [pc, #36]	@ (8006e90 <HAL_RCC_ClockConfig+0x1c8>)
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	4618      	mov	r0, r3
 8006e70:	f7fd fe9e 	bl	8004bb0 <HAL_InitTick>

  return HAL_OK;
 8006e74:	2300      	movs	r3, #0
}
 8006e76:	4618      	mov	r0, r3
 8006e78:	3710      	adds	r7, #16
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	bd80      	pop	{r7, pc}
 8006e7e:	bf00      	nop
 8006e80:	40023c00 	.word	0x40023c00
 8006e84:	40023800 	.word	0x40023800
 8006e88:	0800cf84 	.word	0x0800cf84
 8006e8c:	200000a4 	.word	0x200000a4
 8006e90:	200000a8 	.word	0x200000a8

08006e94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006e94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006e98:	b094      	sub	sp, #80	@ 0x50
 8006e9a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006e9c:	2300      	movs	r3, #0
 8006e9e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8006ea0:	2300      	movs	r3, #0
 8006ea2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8006ea4:	2300      	movs	r3, #0
 8006ea6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8006ea8:	2300      	movs	r3, #0
 8006eaa:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006eac:	4b79      	ldr	r3, [pc, #484]	@ (8007094 <HAL_RCC_GetSysClockFreq+0x200>)
 8006eae:	689b      	ldr	r3, [r3, #8]
 8006eb0:	f003 030c 	and.w	r3, r3, #12
 8006eb4:	2b08      	cmp	r3, #8
 8006eb6:	d00d      	beq.n	8006ed4 <HAL_RCC_GetSysClockFreq+0x40>
 8006eb8:	2b08      	cmp	r3, #8
 8006eba:	f200 80e1 	bhi.w	8007080 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d002      	beq.n	8006ec8 <HAL_RCC_GetSysClockFreq+0x34>
 8006ec2:	2b04      	cmp	r3, #4
 8006ec4:	d003      	beq.n	8006ece <HAL_RCC_GetSysClockFreq+0x3a>
 8006ec6:	e0db      	b.n	8007080 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006ec8:	4b73      	ldr	r3, [pc, #460]	@ (8007098 <HAL_RCC_GetSysClockFreq+0x204>)
 8006eca:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006ecc:	e0db      	b.n	8007086 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006ece:	4b73      	ldr	r3, [pc, #460]	@ (800709c <HAL_RCC_GetSysClockFreq+0x208>)
 8006ed0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006ed2:	e0d8      	b.n	8007086 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006ed4:	4b6f      	ldr	r3, [pc, #444]	@ (8007094 <HAL_RCC_GetSysClockFreq+0x200>)
 8006ed6:	685b      	ldr	r3, [r3, #4]
 8006ed8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006edc:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006ede:	4b6d      	ldr	r3, [pc, #436]	@ (8007094 <HAL_RCC_GetSysClockFreq+0x200>)
 8006ee0:	685b      	ldr	r3, [r3, #4]
 8006ee2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006ee6:	2b00      	cmp	r3, #0
 8006ee8:	d063      	beq.n	8006fb2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006eea:	4b6a      	ldr	r3, [pc, #424]	@ (8007094 <HAL_RCC_GetSysClockFreq+0x200>)
 8006eec:	685b      	ldr	r3, [r3, #4]
 8006eee:	099b      	lsrs	r3, r3, #6
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006ef4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006ef6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006ef8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006efc:	633b      	str	r3, [r7, #48]	@ 0x30
 8006efe:	2300      	movs	r3, #0
 8006f00:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f02:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8006f06:	4622      	mov	r2, r4
 8006f08:	462b      	mov	r3, r5
 8006f0a:	f04f 0000 	mov.w	r0, #0
 8006f0e:	f04f 0100 	mov.w	r1, #0
 8006f12:	0159      	lsls	r1, r3, #5
 8006f14:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006f18:	0150      	lsls	r0, r2, #5
 8006f1a:	4602      	mov	r2, r0
 8006f1c:	460b      	mov	r3, r1
 8006f1e:	4621      	mov	r1, r4
 8006f20:	1a51      	subs	r1, r2, r1
 8006f22:	6139      	str	r1, [r7, #16]
 8006f24:	4629      	mov	r1, r5
 8006f26:	eb63 0301 	sbc.w	r3, r3, r1
 8006f2a:	617b      	str	r3, [r7, #20]
 8006f2c:	f04f 0200 	mov.w	r2, #0
 8006f30:	f04f 0300 	mov.w	r3, #0
 8006f34:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006f38:	4659      	mov	r1, fp
 8006f3a:	018b      	lsls	r3, r1, #6
 8006f3c:	4651      	mov	r1, sl
 8006f3e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006f42:	4651      	mov	r1, sl
 8006f44:	018a      	lsls	r2, r1, #6
 8006f46:	4651      	mov	r1, sl
 8006f48:	ebb2 0801 	subs.w	r8, r2, r1
 8006f4c:	4659      	mov	r1, fp
 8006f4e:	eb63 0901 	sbc.w	r9, r3, r1
 8006f52:	f04f 0200 	mov.w	r2, #0
 8006f56:	f04f 0300 	mov.w	r3, #0
 8006f5a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006f5e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006f62:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006f66:	4690      	mov	r8, r2
 8006f68:	4699      	mov	r9, r3
 8006f6a:	4623      	mov	r3, r4
 8006f6c:	eb18 0303 	adds.w	r3, r8, r3
 8006f70:	60bb      	str	r3, [r7, #8]
 8006f72:	462b      	mov	r3, r5
 8006f74:	eb49 0303 	adc.w	r3, r9, r3
 8006f78:	60fb      	str	r3, [r7, #12]
 8006f7a:	f04f 0200 	mov.w	r2, #0
 8006f7e:	f04f 0300 	mov.w	r3, #0
 8006f82:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006f86:	4629      	mov	r1, r5
 8006f88:	024b      	lsls	r3, r1, #9
 8006f8a:	4621      	mov	r1, r4
 8006f8c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006f90:	4621      	mov	r1, r4
 8006f92:	024a      	lsls	r2, r1, #9
 8006f94:	4610      	mov	r0, r2
 8006f96:	4619      	mov	r1, r3
 8006f98:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006f9a:	2200      	movs	r2, #0
 8006f9c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006f9e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006fa0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006fa4:	f7f9 ff5e 	bl	8000e64 <__aeabi_uldivmod>
 8006fa8:	4602      	mov	r2, r0
 8006faa:	460b      	mov	r3, r1
 8006fac:	4613      	mov	r3, r2
 8006fae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006fb0:	e058      	b.n	8007064 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006fb2:	4b38      	ldr	r3, [pc, #224]	@ (8007094 <HAL_RCC_GetSysClockFreq+0x200>)
 8006fb4:	685b      	ldr	r3, [r3, #4]
 8006fb6:	099b      	lsrs	r3, r3, #6
 8006fb8:	2200      	movs	r2, #0
 8006fba:	4618      	mov	r0, r3
 8006fbc:	4611      	mov	r1, r2
 8006fbe:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006fc2:	623b      	str	r3, [r7, #32]
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	627b      	str	r3, [r7, #36]	@ 0x24
 8006fc8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8006fcc:	4642      	mov	r2, r8
 8006fce:	464b      	mov	r3, r9
 8006fd0:	f04f 0000 	mov.w	r0, #0
 8006fd4:	f04f 0100 	mov.w	r1, #0
 8006fd8:	0159      	lsls	r1, r3, #5
 8006fda:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006fde:	0150      	lsls	r0, r2, #5
 8006fe0:	4602      	mov	r2, r0
 8006fe2:	460b      	mov	r3, r1
 8006fe4:	4641      	mov	r1, r8
 8006fe6:	ebb2 0a01 	subs.w	sl, r2, r1
 8006fea:	4649      	mov	r1, r9
 8006fec:	eb63 0b01 	sbc.w	fp, r3, r1
 8006ff0:	f04f 0200 	mov.w	r2, #0
 8006ff4:	f04f 0300 	mov.w	r3, #0
 8006ff8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8006ffc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007000:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8007004:	ebb2 040a 	subs.w	r4, r2, sl
 8007008:	eb63 050b 	sbc.w	r5, r3, fp
 800700c:	f04f 0200 	mov.w	r2, #0
 8007010:	f04f 0300 	mov.w	r3, #0
 8007014:	00eb      	lsls	r3, r5, #3
 8007016:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800701a:	00e2      	lsls	r2, r4, #3
 800701c:	4614      	mov	r4, r2
 800701e:	461d      	mov	r5, r3
 8007020:	4643      	mov	r3, r8
 8007022:	18e3      	adds	r3, r4, r3
 8007024:	603b      	str	r3, [r7, #0]
 8007026:	464b      	mov	r3, r9
 8007028:	eb45 0303 	adc.w	r3, r5, r3
 800702c:	607b      	str	r3, [r7, #4]
 800702e:	f04f 0200 	mov.w	r2, #0
 8007032:	f04f 0300 	mov.w	r3, #0
 8007036:	e9d7 4500 	ldrd	r4, r5, [r7]
 800703a:	4629      	mov	r1, r5
 800703c:	028b      	lsls	r3, r1, #10
 800703e:	4621      	mov	r1, r4
 8007040:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007044:	4621      	mov	r1, r4
 8007046:	028a      	lsls	r2, r1, #10
 8007048:	4610      	mov	r0, r2
 800704a:	4619      	mov	r1, r3
 800704c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800704e:	2200      	movs	r2, #0
 8007050:	61bb      	str	r3, [r7, #24]
 8007052:	61fa      	str	r2, [r7, #28]
 8007054:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007058:	f7f9 ff04 	bl	8000e64 <__aeabi_uldivmod>
 800705c:	4602      	mov	r2, r0
 800705e:	460b      	mov	r3, r1
 8007060:	4613      	mov	r3, r2
 8007062:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8007064:	4b0b      	ldr	r3, [pc, #44]	@ (8007094 <HAL_RCC_GetSysClockFreq+0x200>)
 8007066:	685b      	ldr	r3, [r3, #4]
 8007068:	0c1b      	lsrs	r3, r3, #16
 800706a:	f003 0303 	and.w	r3, r3, #3
 800706e:	3301      	adds	r3, #1
 8007070:	005b      	lsls	r3, r3, #1
 8007072:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8007074:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007076:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007078:	fbb2 f3f3 	udiv	r3, r2, r3
 800707c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800707e:	e002      	b.n	8007086 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007080:	4b05      	ldr	r3, [pc, #20]	@ (8007098 <HAL_RCC_GetSysClockFreq+0x204>)
 8007082:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8007084:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007086:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8007088:	4618      	mov	r0, r3
 800708a:	3750      	adds	r7, #80	@ 0x50
 800708c:	46bd      	mov	sp, r7
 800708e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007092:	bf00      	nop
 8007094:	40023800 	.word	0x40023800
 8007098:	00f42400 	.word	0x00f42400
 800709c:	007a1200 	.word	0x007a1200

080070a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80070a0:	b480      	push	{r7}
 80070a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80070a4:	4b03      	ldr	r3, [pc, #12]	@ (80070b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80070a6:	681b      	ldr	r3, [r3, #0]
}
 80070a8:	4618      	mov	r0, r3
 80070aa:	46bd      	mov	sp, r7
 80070ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b0:	4770      	bx	lr
 80070b2:	bf00      	nop
 80070b4:	200000a4 	.word	0x200000a4

080070b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80070b8:	b580      	push	{r7, lr}
 80070ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80070bc:	f7ff fff0 	bl	80070a0 <HAL_RCC_GetHCLKFreq>
 80070c0:	4602      	mov	r2, r0
 80070c2:	4b05      	ldr	r3, [pc, #20]	@ (80070d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80070c4:	689b      	ldr	r3, [r3, #8]
 80070c6:	0a9b      	lsrs	r3, r3, #10
 80070c8:	f003 0307 	and.w	r3, r3, #7
 80070cc:	4903      	ldr	r1, [pc, #12]	@ (80070dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80070ce:	5ccb      	ldrb	r3, [r1, r3]
 80070d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80070d4:	4618      	mov	r0, r3
 80070d6:	bd80      	pop	{r7, pc}
 80070d8:	40023800 	.word	0x40023800
 80070dc:	0800cf94 	.word	0x0800cf94

080070e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80070e0:	b580      	push	{r7, lr}
 80070e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80070e4:	f7ff ffdc 	bl	80070a0 <HAL_RCC_GetHCLKFreq>
 80070e8:	4602      	mov	r2, r0
 80070ea:	4b05      	ldr	r3, [pc, #20]	@ (8007100 <HAL_RCC_GetPCLK2Freq+0x20>)
 80070ec:	689b      	ldr	r3, [r3, #8]
 80070ee:	0b5b      	lsrs	r3, r3, #13
 80070f0:	f003 0307 	and.w	r3, r3, #7
 80070f4:	4903      	ldr	r1, [pc, #12]	@ (8007104 <HAL_RCC_GetPCLK2Freq+0x24>)
 80070f6:	5ccb      	ldrb	r3, [r1, r3]
 80070f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80070fc:	4618      	mov	r0, r3
 80070fe:	bd80      	pop	{r7, pc}
 8007100:	40023800 	.word	0x40023800
 8007104:	0800cf94 	.word	0x0800cf94

08007108 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007108:	b580      	push	{r7, lr}
 800710a:	b086      	sub	sp, #24
 800710c:	af00      	add	r7, sp, #0
 800710e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007110:	2300      	movs	r3, #0
 8007112:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 8007114:	2300      	movs	r3, #0
 8007116:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	f003 0301 	and.w	r3, r3, #1
 8007120:	2b00      	cmp	r3, #0
 8007122:	d105      	bne.n	8007130 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8007124:	687b      	ldr	r3, [r7, #4]
 8007126:	681b      	ldr	r3, [r3, #0]
 8007128:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 800712c:	2b00      	cmp	r3, #0
 800712e:	d035      	beq.n	800719c <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007130:	4b62      	ldr	r3, [pc, #392]	@ (80072bc <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8007132:	2200      	movs	r2, #0
 8007134:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007136:	f7fd fd7f 	bl	8004c38 <HAL_GetTick>
 800713a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800713c:	e008      	b.n	8007150 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800713e:	f7fd fd7b 	bl	8004c38 <HAL_GetTick>
 8007142:	4602      	mov	r2, r0
 8007144:	697b      	ldr	r3, [r7, #20]
 8007146:	1ad3      	subs	r3, r2, r3
 8007148:	2b02      	cmp	r3, #2
 800714a:	d901      	bls.n	8007150 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800714c:	2303      	movs	r3, #3
 800714e:	e0b0      	b.n	80072b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007150:	4b5b      	ldr	r3, [pc, #364]	@ (80072c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007158:	2b00      	cmp	r3, #0
 800715a:	d1f0      	bne.n	800713e <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	685b      	ldr	r3, [r3, #4]
 8007160:	019a      	lsls	r2, r3, #6
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	689b      	ldr	r3, [r3, #8]
 8007166:	071b      	lsls	r3, r3, #28
 8007168:	4955      	ldr	r1, [pc, #340]	@ (80072c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800716a:	4313      	orrs	r3, r2
 800716c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8007170:	4b52      	ldr	r3, [pc, #328]	@ (80072bc <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 8007172:	2201      	movs	r2, #1
 8007174:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8007176:	f7fd fd5f 	bl	8004c38 <HAL_GetTick>
 800717a:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800717c:	e008      	b.n	8007190 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800717e:	f7fd fd5b 	bl	8004c38 <HAL_GetTick>
 8007182:	4602      	mov	r2, r0
 8007184:	697b      	ldr	r3, [r7, #20]
 8007186:	1ad3      	subs	r3, r2, r3
 8007188:	2b02      	cmp	r3, #2
 800718a:	d901      	bls.n	8007190 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800718c:	2303      	movs	r3, #3
 800718e:	e090      	b.n	80072b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8007190:	4b4b      	ldr	r3, [pc, #300]	@ (80072c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007192:	681b      	ldr	r3, [r3, #0]
 8007194:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007198:	2b00      	cmp	r3, #0
 800719a:	d0f0      	beq.n	800717e <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	f003 0302 	and.w	r3, r3, #2
 80071a4:	2b00      	cmp	r3, #0
 80071a6:	f000 8083 	beq.w	80072b0 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80071aa:	2300      	movs	r3, #0
 80071ac:	60fb      	str	r3, [r7, #12]
 80071ae:	4b44      	ldr	r3, [pc, #272]	@ (80072c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80071b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071b2:	4a43      	ldr	r2, [pc, #268]	@ (80072c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80071b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80071b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80071ba:	4b41      	ldr	r3, [pc, #260]	@ (80072c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80071bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80071c2:	60fb      	str	r3, [r7, #12]
 80071c4:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80071c6:	4b3f      	ldr	r3, [pc, #252]	@ (80072c4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	4a3e      	ldr	r2, [pc, #248]	@ (80072c4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80071cc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80071d0:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 80071d2:	f7fd fd31 	bl	8004c38 <HAL_GetTick>
 80071d6:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80071d8:	e008      	b.n	80071ec <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80071da:	f7fd fd2d 	bl	8004c38 <HAL_GetTick>
 80071de:	4602      	mov	r2, r0
 80071e0:	697b      	ldr	r3, [r7, #20]
 80071e2:	1ad3      	subs	r3, r2, r3
 80071e4:	2b02      	cmp	r3, #2
 80071e6:	d901      	bls.n	80071ec <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 80071e8:	2303      	movs	r3, #3
 80071ea:	e062      	b.n	80072b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 80071ec:	4b35      	ldr	r3, [pc, #212]	@ (80072c4 <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80071f4:	2b00      	cmp	r3, #0
 80071f6:	d0f0      	beq.n	80071da <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80071f8:	4b31      	ldr	r3, [pc, #196]	@ (80072c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80071fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80071fc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007200:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8007202:	693b      	ldr	r3, [r7, #16]
 8007204:	2b00      	cmp	r3, #0
 8007206:	d02f      	beq.n	8007268 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	68db      	ldr	r3, [r3, #12]
 800720c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007210:	693a      	ldr	r2, [r7, #16]
 8007212:	429a      	cmp	r2, r3
 8007214:	d028      	beq.n	8007268 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8007216:	4b2a      	ldr	r3, [pc, #168]	@ (80072c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007218:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800721a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800721e:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007220:	4b29      	ldr	r3, [pc, #164]	@ (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8007222:	2201      	movs	r2, #1
 8007224:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8007226:	4b28      	ldr	r3, [pc, #160]	@ (80072c8 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8007228:	2200      	movs	r2, #0
 800722a:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 800722c:	4a24      	ldr	r2, [pc, #144]	@ (80072c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800722e:	693b      	ldr	r3, [r7, #16]
 8007230:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8007232:	4b23      	ldr	r3, [pc, #140]	@ (80072c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007234:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007236:	f003 0301 	and.w	r3, r3, #1
 800723a:	2b01      	cmp	r3, #1
 800723c:	d114      	bne.n	8007268 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 800723e:	f7fd fcfb 	bl	8004c38 <HAL_GetTick>
 8007242:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007244:	e00a      	b.n	800725c <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8007246:	f7fd fcf7 	bl	8004c38 <HAL_GetTick>
 800724a:	4602      	mov	r2, r0
 800724c:	697b      	ldr	r3, [r7, #20]
 800724e:	1ad3      	subs	r3, r2, r3
 8007250:	f241 3288 	movw	r2, #5000	@ 0x1388
 8007254:	4293      	cmp	r3, r2
 8007256:	d901      	bls.n	800725c <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8007258:	2303      	movs	r3, #3
 800725a:	e02a      	b.n	80072b2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800725c:	4b18      	ldr	r3, [pc, #96]	@ (80072c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800725e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007260:	f003 0302 	and.w	r3, r3, #2
 8007264:	2b00      	cmp	r3, #0
 8007266:	d0ee      	beq.n	8007246 <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	68db      	ldr	r3, [r3, #12]
 800726c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007270:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007274:	d10d      	bne.n	8007292 <HAL_RCCEx_PeriphCLKConfig+0x18a>
 8007276:	4b12      	ldr	r3, [pc, #72]	@ (80072c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007278:	689b      	ldr	r3, [r3, #8]
 800727a:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	68db      	ldr	r3, [r3, #12]
 8007282:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 8007286:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800728a:	490d      	ldr	r1, [pc, #52]	@ (80072c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800728c:	4313      	orrs	r3, r2
 800728e:	608b      	str	r3, [r1, #8]
 8007290:	e005      	b.n	800729e <HAL_RCCEx_PeriphCLKConfig+0x196>
 8007292:	4b0b      	ldr	r3, [pc, #44]	@ (80072c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007294:	689b      	ldr	r3, [r3, #8]
 8007296:	4a0a      	ldr	r2, [pc, #40]	@ (80072c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007298:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800729c:	6093      	str	r3, [r2, #8]
 800729e:	4b08      	ldr	r3, [pc, #32]	@ (80072c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80072a0:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	68db      	ldr	r3, [r3, #12]
 80072a6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80072aa:	4905      	ldr	r1, [pc, #20]	@ (80072c0 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80072ac:	4313      	orrs	r3, r2
 80072ae:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80072b0:	2300      	movs	r3, #0
}
 80072b2:	4618      	mov	r0, r3
 80072b4:	3718      	adds	r7, #24
 80072b6:	46bd      	mov	sp, r7
 80072b8:	bd80      	pop	{r7, pc}
 80072ba:	bf00      	nop
 80072bc:	42470068 	.word	0x42470068
 80072c0:	40023800 	.word	0x40023800
 80072c4:	40007000 	.word	0x40007000
 80072c8:	42470e40 	.word	0x42470e40

080072cc <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80072cc:	b580      	push	{r7, lr}
 80072ce:	b084      	sub	sp, #16
 80072d0:	af00      	add	r7, sp, #0
 80072d2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 80072d4:	2301      	movs	r3, #1
 80072d6:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d101      	bne.n	80072e2 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 80072de:	2301      	movs	r3, #1
 80072e0:	e073      	b.n	80073ca <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	7f5b      	ldrb	r3, [r3, #29]
 80072e6:	b2db      	uxtb	r3, r3
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	d105      	bne.n	80072f8 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	2200      	movs	r2, #0
 80072f0:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 80072f2:	6878      	ldr	r0, [r7, #4]
 80072f4:	f7fd fa44 	bl	8004780 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2202      	movs	r2, #2
 80072fc:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 80072fe:	687b      	ldr	r3, [r7, #4]
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	68db      	ldr	r3, [r3, #12]
 8007304:	f003 0310 	and.w	r3, r3, #16
 8007308:	2b10      	cmp	r3, #16
 800730a:	d055      	beq.n	80073b8 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	22ca      	movs	r2, #202	@ 0xca
 8007312:	625a      	str	r2, [r3, #36]	@ 0x24
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	2253      	movs	r2, #83	@ 0x53
 800731a:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 800731c:	6878      	ldr	r0, [r7, #4]
 800731e:	f000 fa49 	bl	80077b4 <RTC_EnterInitMode>
 8007322:	4603      	mov	r3, r0
 8007324:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8007326:	7bfb      	ldrb	r3, [r7, #15]
 8007328:	2b00      	cmp	r3, #0
 800732a:	d12c      	bne.n	8007386 <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	689b      	ldr	r3, [r3, #8]
 8007332:	687a      	ldr	r2, [r7, #4]
 8007334:	6812      	ldr	r2, [r2, #0]
 8007336:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800733a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800733e:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	6899      	ldr	r1, [r3, #8]
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	685a      	ldr	r2, [r3, #4]
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	691b      	ldr	r3, [r3, #16]
 800734e:	431a      	orrs	r2, r3
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	695b      	ldr	r3, [r3, #20]
 8007354:	431a      	orrs	r2, r3
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	430a      	orrs	r2, r1
 800735c:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	687a      	ldr	r2, [r7, #4]
 8007364:	68d2      	ldr	r2, [r2, #12]
 8007366:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	6919      	ldr	r1, [r3, #16]
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	689b      	ldr	r3, [r3, #8]
 8007372:	041a      	lsls	r2, r3, #16
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	430a      	orrs	r2, r1
 800737a:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 800737c:	6878      	ldr	r0, [r7, #4]
 800737e:	f000 fa50 	bl	8007822 <RTC_ExitInitMode>
 8007382:	4603      	mov	r3, r0
 8007384:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8007386:	7bfb      	ldrb	r3, [r7, #15]
 8007388:	2b00      	cmp	r3, #0
 800738a:	d110      	bne.n	80073ae <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 800739a:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 800739c:	687b      	ldr	r3, [r7, #4]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	699a      	ldr	r2, [r3, #24]
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	430a      	orrs	r2, r1
 80073ac:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	22ff      	movs	r2, #255	@ 0xff
 80073b4:	625a      	str	r2, [r3, #36]	@ 0x24
 80073b6:	e001      	b.n	80073bc <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 80073b8:	2300      	movs	r3, #0
 80073ba:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80073bc:	7bfb      	ldrb	r3, [r7, #15]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d102      	bne.n	80073c8 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	2201      	movs	r2, #1
 80073c6:	775a      	strb	r2, [r3, #29]
  }

  return status;
 80073c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80073ca:	4618      	mov	r0, r3
 80073cc:	3710      	adds	r7, #16
 80073ce:	46bd      	mov	sp, r7
 80073d0:	bd80      	pop	{r7, pc}

080073d2 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80073d2:	b590      	push	{r4, r7, lr}
 80073d4:	b087      	sub	sp, #28
 80073d6:	af00      	add	r7, sp, #0
 80073d8:	60f8      	str	r0, [r7, #12]
 80073da:	60b9      	str	r1, [r7, #8]
 80073dc:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 80073de:	2300      	movs	r3, #0
 80073e0:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80073e2:	68fb      	ldr	r3, [r7, #12]
 80073e4:	7f1b      	ldrb	r3, [r3, #28]
 80073e6:	2b01      	cmp	r3, #1
 80073e8:	d101      	bne.n	80073ee <HAL_RTC_SetTime+0x1c>
 80073ea:	2302      	movs	r3, #2
 80073ec:	e087      	b.n	80074fe <HAL_RTC_SetTime+0x12c>
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	2201      	movs	r2, #1
 80073f2:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	2202      	movs	r2, #2
 80073f8:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	2b00      	cmp	r3, #0
 80073fe:	d126      	bne.n	800744e <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	689b      	ldr	r3, [r3, #8]
 8007406:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800740a:	2b00      	cmp	r3, #0
 800740c:	d102      	bne.n	8007414 <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800740e:	68bb      	ldr	r3, [r7, #8]
 8007410:	2200      	movs	r2, #0
 8007412:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8007414:	68bb      	ldr	r3, [r7, #8]
 8007416:	781b      	ldrb	r3, [r3, #0]
 8007418:	4618      	mov	r0, r3
 800741a:	f000 fa27 	bl	800786c <RTC_ByteToBcd2>
 800741e:	4603      	mov	r3, r0
 8007420:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8007422:	68bb      	ldr	r3, [r7, #8]
 8007424:	785b      	ldrb	r3, [r3, #1]
 8007426:	4618      	mov	r0, r3
 8007428:	f000 fa20 	bl	800786c <RTC_ByteToBcd2>
 800742c:	4603      	mov	r3, r0
 800742e:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8007430:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8007432:	68bb      	ldr	r3, [r7, #8]
 8007434:	789b      	ldrb	r3, [r3, #2]
 8007436:	4618      	mov	r0, r3
 8007438:	f000 fa18 	bl	800786c <RTC_ByteToBcd2>
 800743c:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800743e:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 8007442:	68bb      	ldr	r3, [r7, #8]
 8007444:	78db      	ldrb	r3, [r3, #3]
 8007446:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8007448:	4313      	orrs	r3, r2
 800744a:	617b      	str	r3, [r7, #20]
 800744c:	e018      	b.n	8007480 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 800744e:	68fb      	ldr	r3, [r7, #12]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	689b      	ldr	r3, [r3, #8]
 8007454:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007458:	2b00      	cmp	r3, #0
 800745a:	d102      	bne.n	8007462 <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 800745c:	68bb      	ldr	r3, [r7, #8]
 800745e:	2200      	movs	r2, #0
 8007460:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 8007462:	68bb      	ldr	r3, [r7, #8]
 8007464:	781b      	ldrb	r3, [r3, #0]
 8007466:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8007468:	68bb      	ldr	r3, [r7, #8]
 800746a:	785b      	ldrb	r3, [r3, #1]
 800746c:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800746e:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 8007470:	68ba      	ldr	r2, [r7, #8]
 8007472:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 8007474:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 8007476:	68bb      	ldr	r3, [r7, #8]
 8007478:	78db      	ldrb	r3, [r3, #3]
 800747a:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800747c:	4313      	orrs	r3, r2
 800747e:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	22ca      	movs	r2, #202	@ 0xca
 8007486:	625a      	str	r2, [r3, #36]	@ 0x24
 8007488:	68fb      	ldr	r3, [r7, #12]
 800748a:	681b      	ldr	r3, [r3, #0]
 800748c:	2253      	movs	r2, #83	@ 0x53
 800748e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8007490:	68f8      	ldr	r0, [r7, #12]
 8007492:	f000 f98f 	bl	80077b4 <RTC_EnterInitMode>
 8007496:	4603      	mov	r3, r0
 8007498:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 800749a:	7cfb      	ldrb	r3, [r7, #19]
 800749c:	2b00      	cmp	r3, #0
 800749e:	d120      	bne.n	80074e2 <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	681a      	ldr	r2, [r3, #0]
 80074a4:	697b      	ldr	r3, [r7, #20]
 80074a6:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 80074aa:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 80074ae:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	681b      	ldr	r3, [r3, #0]
 80074b4:	689a      	ldr	r2, [r3, #8]
 80074b6:	68fb      	ldr	r3, [r7, #12]
 80074b8:	681b      	ldr	r3, [r3, #0]
 80074ba:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80074be:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	6899      	ldr	r1, [r3, #8]
 80074c6:	68bb      	ldr	r3, [r7, #8]
 80074c8:	68da      	ldr	r2, [r3, #12]
 80074ca:	68bb      	ldr	r3, [r7, #8]
 80074cc:	691b      	ldr	r3, [r3, #16]
 80074ce:	431a      	orrs	r2, r3
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	430a      	orrs	r2, r1
 80074d6:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80074d8:	68f8      	ldr	r0, [r7, #12]
 80074da:	f000 f9a2 	bl	8007822 <RTC_ExitInitMode>
 80074de:	4603      	mov	r3, r0
 80074e0:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80074e2:	7cfb      	ldrb	r3, [r7, #19]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d102      	bne.n	80074ee <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	2201      	movs	r2, #1
 80074ec:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	22ff      	movs	r2, #255	@ 0xff
 80074f4:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80074f6:	68fb      	ldr	r3, [r7, #12]
 80074f8:	2200      	movs	r2, #0
 80074fa:	771a      	strb	r2, [r3, #28]

  return status;
 80074fc:	7cfb      	ldrb	r3, [r7, #19]
}
 80074fe:	4618      	mov	r0, r3
 8007500:	371c      	adds	r7, #28
 8007502:	46bd      	mov	sp, r7
 8007504:	bd90      	pop	{r4, r7, pc}

08007506 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8007506:	b580      	push	{r7, lr}
 8007508:	b086      	sub	sp, #24
 800750a:	af00      	add	r7, sp, #0
 800750c:	60f8      	str	r0, [r7, #12]
 800750e:	60b9      	str	r1, [r7, #8]
 8007510:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8007512:	2300      	movs	r3, #0
 8007514:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8007516:	68fb      	ldr	r3, [r7, #12]
 8007518:	681b      	ldr	r3, [r3, #0]
 800751a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800751c:	68bb      	ldr	r3, [r7, #8]
 800751e:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	691b      	ldr	r3, [r3, #16]
 8007526:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800752a:	68bb      	ldr	r3, [r7, #8]
 800752c:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	681b      	ldr	r3, [r3, #0]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8007538:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800753c:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800753e:	697b      	ldr	r3, [r7, #20]
 8007540:	0c1b      	lsrs	r3, r3, #16
 8007542:	b2db      	uxtb	r3, r3
 8007544:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007548:	b2da      	uxtb	r2, r3
 800754a:	68bb      	ldr	r3, [r7, #8]
 800754c:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800754e:	697b      	ldr	r3, [r7, #20]
 8007550:	0a1b      	lsrs	r3, r3, #8
 8007552:	b2db      	uxtb	r3, r3
 8007554:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007558:	b2da      	uxtb	r2, r3
 800755a:	68bb      	ldr	r3, [r7, #8]
 800755c:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 800755e:	697b      	ldr	r3, [r7, #20]
 8007560:	b2db      	uxtb	r3, r3
 8007562:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007566:	b2da      	uxtb	r2, r3
 8007568:	68bb      	ldr	r3, [r7, #8]
 800756a:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800756c:	697b      	ldr	r3, [r7, #20]
 800756e:	0d9b      	lsrs	r3, r3, #22
 8007570:	b2db      	uxtb	r3, r3
 8007572:	f003 0301 	and.w	r3, r3, #1
 8007576:	b2da      	uxtb	r2, r3
 8007578:	68bb      	ldr	r3, [r7, #8]
 800757a:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	2b00      	cmp	r3, #0
 8007580:	d11a      	bne.n	80075b8 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8007582:	68bb      	ldr	r3, [r7, #8]
 8007584:	781b      	ldrb	r3, [r3, #0]
 8007586:	4618      	mov	r0, r3
 8007588:	f000 f98e 	bl	80078a8 <RTC_Bcd2ToByte>
 800758c:	4603      	mov	r3, r0
 800758e:	461a      	mov	r2, r3
 8007590:	68bb      	ldr	r3, [r7, #8]
 8007592:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 8007594:	68bb      	ldr	r3, [r7, #8]
 8007596:	785b      	ldrb	r3, [r3, #1]
 8007598:	4618      	mov	r0, r3
 800759a:	f000 f985 	bl	80078a8 <RTC_Bcd2ToByte>
 800759e:	4603      	mov	r3, r0
 80075a0:	461a      	mov	r2, r3
 80075a2:	68bb      	ldr	r3, [r7, #8]
 80075a4:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80075a6:	68bb      	ldr	r3, [r7, #8]
 80075a8:	789b      	ldrb	r3, [r3, #2]
 80075aa:	4618      	mov	r0, r3
 80075ac:	f000 f97c 	bl	80078a8 <RTC_Bcd2ToByte>
 80075b0:	4603      	mov	r3, r0
 80075b2:	461a      	mov	r2, r3
 80075b4:	68bb      	ldr	r3, [r7, #8]
 80075b6:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80075b8:	2300      	movs	r3, #0
}
 80075ba:	4618      	mov	r0, r3
 80075bc:	3718      	adds	r7, #24
 80075be:	46bd      	mov	sp, r7
 80075c0:	bd80      	pop	{r7, pc}

080075c2 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80075c2:	b590      	push	{r4, r7, lr}
 80075c4:	b087      	sub	sp, #28
 80075c6:	af00      	add	r7, sp, #0
 80075c8:	60f8      	str	r0, [r7, #12]
 80075ca:	60b9      	str	r1, [r7, #8]
 80075cc:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80075ce:	2300      	movs	r3, #0
 80075d0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	7f1b      	ldrb	r3, [r3, #28]
 80075d6:	2b01      	cmp	r3, #1
 80075d8:	d101      	bne.n	80075de <HAL_RTC_SetDate+0x1c>
 80075da:	2302      	movs	r3, #2
 80075dc:	e071      	b.n	80076c2 <HAL_RTC_SetDate+0x100>
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	2201      	movs	r2, #1
 80075e2:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	2202      	movs	r2, #2
 80075e8:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 80075ea:	687b      	ldr	r3, [r7, #4]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d10e      	bne.n	800760e <HAL_RTC_SetDate+0x4c>
 80075f0:	68bb      	ldr	r3, [r7, #8]
 80075f2:	785b      	ldrb	r3, [r3, #1]
 80075f4:	f003 0310 	and.w	r3, r3, #16
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d008      	beq.n	800760e <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 80075fc:	68bb      	ldr	r3, [r7, #8]
 80075fe:	785b      	ldrb	r3, [r3, #1]
 8007600:	f023 0310 	bic.w	r3, r3, #16
 8007604:	b2db      	uxtb	r3, r3
 8007606:	330a      	adds	r3, #10
 8007608:	b2da      	uxtb	r2, r3
 800760a:	68bb      	ldr	r3, [r7, #8]
 800760c:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	2b00      	cmp	r3, #0
 8007612:	d11c      	bne.n	800764e <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8007614:	68bb      	ldr	r3, [r7, #8]
 8007616:	78db      	ldrb	r3, [r3, #3]
 8007618:	4618      	mov	r0, r3
 800761a:	f000 f927 	bl	800786c <RTC_ByteToBcd2>
 800761e:	4603      	mov	r3, r0
 8007620:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8007622:	68bb      	ldr	r3, [r7, #8]
 8007624:	785b      	ldrb	r3, [r3, #1]
 8007626:	4618      	mov	r0, r3
 8007628:	f000 f920 	bl	800786c <RTC_ByteToBcd2>
 800762c:	4603      	mov	r3, r0
 800762e:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8007630:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 8007632:	68bb      	ldr	r3, [r7, #8]
 8007634:	789b      	ldrb	r3, [r3, #2]
 8007636:	4618      	mov	r0, r3
 8007638:	f000 f918 	bl	800786c <RTC_ByteToBcd2>
 800763c:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800763e:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 8007642:	68bb      	ldr	r3, [r7, #8]
 8007644:	781b      	ldrb	r3, [r3, #0]
 8007646:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8007648:	4313      	orrs	r3, r2
 800764a:	617b      	str	r3, [r7, #20]
 800764c:	e00e      	b.n	800766c <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800764e:	68bb      	ldr	r3, [r7, #8]
 8007650:	78db      	ldrb	r3, [r3, #3]
 8007652:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8007654:	68bb      	ldr	r3, [r7, #8]
 8007656:	785b      	ldrb	r3, [r3, #1]
 8007658:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 800765a:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 800765c:	68ba      	ldr	r2, [r7, #8]
 800765e:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8007660:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 8007662:	68bb      	ldr	r3, [r7, #8]
 8007664:	781b      	ldrb	r3, [r3, #0]
 8007666:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8007668:	4313      	orrs	r3, r2
 800766a:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 800766c:	68fb      	ldr	r3, [r7, #12]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	22ca      	movs	r2, #202	@ 0xca
 8007672:	625a      	str	r2, [r3, #36]	@ 0x24
 8007674:	68fb      	ldr	r3, [r7, #12]
 8007676:	681b      	ldr	r3, [r3, #0]
 8007678:	2253      	movs	r2, #83	@ 0x53
 800767a:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 800767c:	68f8      	ldr	r0, [r7, #12]
 800767e:	f000 f899 	bl	80077b4 <RTC_EnterInitMode>
 8007682:	4603      	mov	r3, r0
 8007684:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 8007686:	7cfb      	ldrb	r3, [r7, #19]
 8007688:	2b00      	cmp	r3, #0
 800768a:	d10c      	bne.n	80076a6 <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 800768c:	68fb      	ldr	r3, [r7, #12]
 800768e:	681a      	ldr	r2, [r3, #0]
 8007690:	697b      	ldr	r3, [r7, #20]
 8007692:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 8007696:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 800769a:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 800769c:	68f8      	ldr	r0, [r7, #12]
 800769e:	f000 f8c0 	bl	8007822 <RTC_ExitInitMode>
 80076a2:	4603      	mov	r3, r0
 80076a4:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80076a6:	7cfb      	ldrb	r3, [r7, #19]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d102      	bne.n	80076b2 <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	2201      	movs	r2, #1
 80076b0:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	681b      	ldr	r3, [r3, #0]
 80076b6:	22ff      	movs	r2, #255	@ 0xff
 80076b8:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	2200      	movs	r2, #0
 80076be:	771a      	strb	r2, [r3, #28]

  return status;
 80076c0:	7cfb      	ldrb	r3, [r7, #19]
}
 80076c2:	4618      	mov	r0, r3
 80076c4:	371c      	adds	r7, #28
 80076c6:	46bd      	mov	sp, r7
 80076c8:	bd90      	pop	{r4, r7, pc}

080076ca <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80076ca:	b580      	push	{r7, lr}
 80076cc:	b086      	sub	sp, #24
 80076ce:	af00      	add	r7, sp, #0
 80076d0:	60f8      	str	r0, [r7, #12]
 80076d2:	60b9      	str	r1, [r7, #8]
 80076d4:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80076d6:	2300      	movs	r3, #0
 80076d8:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	685b      	ldr	r3, [r3, #4]
 80076e0:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80076e4:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80076e8:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80076ea:	697b      	ldr	r3, [r7, #20]
 80076ec:	0c1b      	lsrs	r3, r3, #16
 80076ee:	b2da      	uxtb	r2, r3
 80076f0:	68bb      	ldr	r3, [r7, #8]
 80076f2:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80076f4:	697b      	ldr	r3, [r7, #20]
 80076f6:	0a1b      	lsrs	r3, r3, #8
 80076f8:	b2db      	uxtb	r3, r3
 80076fa:	f003 031f 	and.w	r3, r3, #31
 80076fe:	b2da      	uxtb	r2, r3
 8007700:	68bb      	ldr	r3, [r7, #8]
 8007702:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 8007704:	697b      	ldr	r3, [r7, #20]
 8007706:	b2db      	uxtb	r3, r3
 8007708:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800770c:	b2da      	uxtb	r2, r3
 800770e:	68bb      	ldr	r3, [r7, #8]
 8007710:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 8007712:	697b      	ldr	r3, [r7, #20]
 8007714:	0b5b      	lsrs	r3, r3, #13
 8007716:	b2db      	uxtb	r3, r3
 8007718:	f003 0307 	and.w	r3, r3, #7
 800771c:	b2da      	uxtb	r2, r3
 800771e:	68bb      	ldr	r3, [r7, #8]
 8007720:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	2b00      	cmp	r3, #0
 8007726:	d11a      	bne.n	800775e <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8007728:	68bb      	ldr	r3, [r7, #8]
 800772a:	78db      	ldrb	r3, [r3, #3]
 800772c:	4618      	mov	r0, r3
 800772e:	f000 f8bb 	bl	80078a8 <RTC_Bcd2ToByte>
 8007732:	4603      	mov	r3, r0
 8007734:	461a      	mov	r2, r3
 8007736:	68bb      	ldr	r3, [r7, #8]
 8007738:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 800773a:	68bb      	ldr	r3, [r7, #8]
 800773c:	785b      	ldrb	r3, [r3, #1]
 800773e:	4618      	mov	r0, r3
 8007740:	f000 f8b2 	bl	80078a8 <RTC_Bcd2ToByte>
 8007744:	4603      	mov	r3, r0
 8007746:	461a      	mov	r2, r3
 8007748:	68bb      	ldr	r3, [r7, #8]
 800774a:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 800774c:	68bb      	ldr	r3, [r7, #8]
 800774e:	789b      	ldrb	r3, [r3, #2]
 8007750:	4618      	mov	r0, r3
 8007752:	f000 f8a9 	bl	80078a8 <RTC_Bcd2ToByte>
 8007756:	4603      	mov	r3, r0
 8007758:	461a      	mov	r2, r3
 800775a:	68bb      	ldr	r3, [r7, #8]
 800775c:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 800775e:	2300      	movs	r3, #0
}
 8007760:	4618      	mov	r0, r3
 8007762:	3718      	adds	r7, #24
 8007764:	46bd      	mov	sp, r7
 8007766:	bd80      	pop	{r7, pc}

08007768 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8007768:	b580      	push	{r7, lr}
 800776a:	b084      	sub	sp, #16
 800776c:	af00      	add	r7, sp, #0
 800776e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007770:	2300      	movs	r3, #0
 8007772:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	4a0d      	ldr	r2, [pc, #52]	@ (80077b0 <HAL_RTC_WaitForSynchro+0x48>)
 800777a:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 800777c:	f7fd fa5c 	bl	8004c38 <HAL_GetTick>
 8007780:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007782:	e009      	b.n	8007798 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007784:	f7fd fa58 	bl	8004c38 <HAL_GetTick>
 8007788:	4602      	mov	r2, r0
 800778a:	68fb      	ldr	r3, [r7, #12]
 800778c:	1ad3      	subs	r3, r2, r3
 800778e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007792:	d901      	bls.n	8007798 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 8007794:	2303      	movs	r3, #3
 8007796:	e007      	b.n	80077a8 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	68db      	ldr	r3, [r3, #12]
 800779e:	f003 0320 	and.w	r3, r3, #32
 80077a2:	2b00      	cmp	r3, #0
 80077a4:	d0ee      	beq.n	8007784 <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 80077a6:	2300      	movs	r3, #0
}
 80077a8:	4618      	mov	r0, r3
 80077aa:	3710      	adds	r7, #16
 80077ac:	46bd      	mov	sp, r7
 80077ae:	bd80      	pop	{r7, pc}
 80077b0:	00017f5f 	.word	0x00017f5f

080077b4 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80077b4:	b580      	push	{r7, lr}
 80077b6:	b084      	sub	sp, #16
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80077bc:	2300      	movs	r3, #0
 80077be:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80077c0:	2300      	movs	r3, #0
 80077c2:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80077c4:	687b      	ldr	r3, [r7, #4]
 80077c6:	681b      	ldr	r3, [r3, #0]
 80077c8:	68db      	ldr	r3, [r3, #12]
 80077ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d122      	bne.n	8007818 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	68da      	ldr	r2, [r3, #12]
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80077e0:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80077e2:	f7fd fa29 	bl	8004c38 <HAL_GetTick>
 80077e6:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80077e8:	e00c      	b.n	8007804 <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80077ea:	f7fd fa25 	bl	8004c38 <HAL_GetTick>
 80077ee:	4602      	mov	r2, r0
 80077f0:	68bb      	ldr	r3, [r7, #8]
 80077f2:	1ad3      	subs	r3, r2, r3
 80077f4:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80077f8:	d904      	bls.n	8007804 <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	2204      	movs	r2, #4
 80077fe:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8007800:	2301      	movs	r3, #1
 8007802:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	68db      	ldr	r3, [r3, #12]
 800780a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800780e:	2b00      	cmp	r3, #0
 8007810:	d102      	bne.n	8007818 <RTC_EnterInitMode+0x64>
 8007812:	7bfb      	ldrb	r3, [r7, #15]
 8007814:	2b01      	cmp	r3, #1
 8007816:	d1e8      	bne.n	80077ea <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8007818:	7bfb      	ldrb	r3, [r7, #15]
}
 800781a:	4618      	mov	r0, r3
 800781c:	3710      	adds	r7, #16
 800781e:	46bd      	mov	sp, r7
 8007820:	bd80      	pop	{r7, pc}

08007822 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8007822:	b580      	push	{r7, lr}
 8007824:	b084      	sub	sp, #16
 8007826:	af00      	add	r7, sp, #0
 8007828:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800782a:	2300      	movs	r3, #0
 800782c:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	681b      	ldr	r3, [r3, #0]
 8007832:	68da      	ldr	r2, [r3, #12]
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	681b      	ldr	r3, [r3, #0]
 8007838:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800783c:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	689b      	ldr	r3, [r3, #8]
 8007844:	f003 0320 	and.w	r3, r3, #32
 8007848:	2b00      	cmp	r3, #0
 800784a:	d10a      	bne.n	8007862 <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 800784c:	6878      	ldr	r0, [r7, #4]
 800784e:	f7ff ff8b 	bl	8007768 <HAL_RTC_WaitForSynchro>
 8007852:	4603      	mov	r3, r0
 8007854:	2b00      	cmp	r3, #0
 8007856:	d004      	beq.n	8007862 <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	2204      	movs	r2, #4
 800785c:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 800785e:	2301      	movs	r3, #1
 8007860:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8007862:	7bfb      	ldrb	r3, [r7, #15]
}
 8007864:	4618      	mov	r0, r3
 8007866:	3710      	adds	r7, #16
 8007868:	46bd      	mov	sp, r7
 800786a:	bd80      	pop	{r7, pc}

0800786c <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 800786c:	b480      	push	{r7}
 800786e:	b085      	sub	sp, #20
 8007870:	af00      	add	r7, sp, #0
 8007872:	4603      	mov	r3, r0
 8007874:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8007876:	2300      	movs	r3, #0
 8007878:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 800787a:	e005      	b.n	8007888 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 800787c:	68fb      	ldr	r3, [r7, #12]
 800787e:	3301      	adds	r3, #1
 8007880:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8007882:	79fb      	ldrb	r3, [r7, #7]
 8007884:	3b0a      	subs	r3, #10
 8007886:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 8007888:	79fb      	ldrb	r3, [r7, #7]
 800788a:	2b09      	cmp	r3, #9
 800788c:	d8f6      	bhi.n	800787c <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	b2db      	uxtb	r3, r3
 8007892:	011b      	lsls	r3, r3, #4
 8007894:	b2da      	uxtb	r2, r3
 8007896:	79fb      	ldrb	r3, [r7, #7]
 8007898:	4313      	orrs	r3, r2
 800789a:	b2db      	uxtb	r3, r3
}
 800789c:	4618      	mov	r0, r3
 800789e:	3714      	adds	r7, #20
 80078a0:	46bd      	mov	sp, r7
 80078a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a6:	4770      	bx	lr

080078a8 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 80078a8:	b480      	push	{r7}
 80078aa:	b085      	sub	sp, #20
 80078ac:	af00      	add	r7, sp, #0
 80078ae:	4603      	mov	r3, r0
 80078b0:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 80078b2:	2300      	movs	r3, #0
 80078b4:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 80078b6:	79fb      	ldrb	r3, [r7, #7]
 80078b8:	091b      	lsrs	r3, r3, #4
 80078ba:	b2db      	uxtb	r3, r3
 80078bc:	461a      	mov	r2, r3
 80078be:	4613      	mov	r3, r2
 80078c0:	009b      	lsls	r3, r3, #2
 80078c2:	4413      	add	r3, r2
 80078c4:	005b      	lsls	r3, r3, #1
 80078c6:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	b2da      	uxtb	r2, r3
 80078cc:	79fb      	ldrb	r3, [r7, #7]
 80078ce:	f003 030f 	and.w	r3, r3, #15
 80078d2:	b2db      	uxtb	r3, r3
 80078d4:	4413      	add	r3, r2
 80078d6:	b2db      	uxtb	r3, r3
}
 80078d8:	4618      	mov	r0, r3
 80078da:	3714      	adds	r7, #20
 80078dc:	46bd      	mov	sp, r7
 80078de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e2:	4770      	bx	lr

080078e4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80078e4:	b580      	push	{r7, lr}
 80078e6:	b082      	sub	sp, #8
 80078e8:	af00      	add	r7, sp, #0
 80078ea:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d101      	bne.n	80078f6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80078f2:	2301      	movs	r3, #1
 80078f4:	e042      	b.n	800797c <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80078fc:	b2db      	uxtb	r3, r3
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d106      	bne.n	8007910 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	2200      	movs	r2, #0
 8007906:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800790a:	6878      	ldr	r0, [r7, #4]
 800790c:	f7fd f8bc 	bl	8004a88 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007910:	687b      	ldr	r3, [r7, #4]
 8007912:	2224      	movs	r2, #36	@ 0x24
 8007914:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	68da      	ldr	r2, [r3, #12]
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8007926:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007928:	6878      	ldr	r0, [r7, #4]
 800792a:	f000 f973 	bl	8007c14 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	691a      	ldr	r2, [r3, #16]
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800793c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	681b      	ldr	r3, [r3, #0]
 8007942:	695a      	ldr	r2, [r3, #20]
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800794c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	68da      	ldr	r2, [r3, #12]
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800795c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	2200      	movs	r2, #0
 8007962:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	2220      	movs	r2, #32
 8007968:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	2220      	movs	r2, #32
 8007970:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	2200      	movs	r2, #0
 8007978:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800797a:	2300      	movs	r3, #0
}
 800797c:	4618      	mov	r0, r3
 800797e:	3708      	adds	r7, #8
 8007980:	46bd      	mov	sp, r7
 8007982:	bd80      	pop	{r7, pc}

08007984 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007984:	b580      	push	{r7, lr}
 8007986:	b08a      	sub	sp, #40	@ 0x28
 8007988:	af02      	add	r7, sp, #8
 800798a:	60f8      	str	r0, [r7, #12]
 800798c:	60b9      	str	r1, [r7, #8]
 800798e:	603b      	str	r3, [r7, #0]
 8007990:	4613      	mov	r3, r2
 8007992:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007994:	2300      	movs	r3, #0
 8007996:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800799e:	b2db      	uxtb	r3, r3
 80079a0:	2b20      	cmp	r3, #32
 80079a2:	d175      	bne.n	8007a90 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80079a4:	68bb      	ldr	r3, [r7, #8]
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d002      	beq.n	80079b0 <HAL_UART_Transmit+0x2c>
 80079aa:	88fb      	ldrh	r3, [r7, #6]
 80079ac:	2b00      	cmp	r3, #0
 80079ae:	d101      	bne.n	80079b4 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80079b0:	2301      	movs	r3, #1
 80079b2:	e06e      	b.n	8007a92 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	2200      	movs	r2, #0
 80079b8:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80079ba:	68fb      	ldr	r3, [r7, #12]
 80079bc:	2221      	movs	r2, #33	@ 0x21
 80079be:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80079c2:	f7fd f939 	bl	8004c38 <HAL_GetTick>
 80079c6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	88fa      	ldrh	r2, [r7, #6]
 80079cc:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	88fa      	ldrh	r2, [r7, #6]
 80079d2:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	689b      	ldr	r3, [r3, #8]
 80079d8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80079dc:	d108      	bne.n	80079f0 <HAL_UART_Transmit+0x6c>
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	691b      	ldr	r3, [r3, #16]
 80079e2:	2b00      	cmp	r3, #0
 80079e4:	d104      	bne.n	80079f0 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80079e6:	2300      	movs	r3, #0
 80079e8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80079ea:	68bb      	ldr	r3, [r7, #8]
 80079ec:	61bb      	str	r3, [r7, #24]
 80079ee:	e003      	b.n	80079f8 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80079f0:	68bb      	ldr	r3, [r7, #8]
 80079f2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80079f4:	2300      	movs	r3, #0
 80079f6:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80079f8:	e02e      	b.n	8007a58 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80079fa:	683b      	ldr	r3, [r7, #0]
 80079fc:	9300      	str	r3, [sp, #0]
 80079fe:	697b      	ldr	r3, [r7, #20]
 8007a00:	2200      	movs	r2, #0
 8007a02:	2180      	movs	r1, #128	@ 0x80
 8007a04:	68f8      	ldr	r0, [r7, #12]
 8007a06:	f000 f848 	bl	8007a9a <UART_WaitOnFlagUntilTimeout>
 8007a0a:	4603      	mov	r3, r0
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d005      	beq.n	8007a1c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	2220      	movs	r2, #32
 8007a14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8007a18:	2303      	movs	r3, #3
 8007a1a:	e03a      	b.n	8007a92 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8007a1c:	69fb      	ldr	r3, [r7, #28]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d10b      	bne.n	8007a3a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007a22:	69bb      	ldr	r3, [r7, #24]
 8007a24:	881b      	ldrh	r3, [r3, #0]
 8007a26:	461a      	mov	r2, r3
 8007a28:	68fb      	ldr	r3, [r7, #12]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007a30:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007a32:	69bb      	ldr	r3, [r7, #24]
 8007a34:	3302      	adds	r3, #2
 8007a36:	61bb      	str	r3, [r7, #24]
 8007a38:	e007      	b.n	8007a4a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007a3a:	69fb      	ldr	r3, [r7, #28]
 8007a3c:	781a      	ldrb	r2, [r3, #0]
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007a44:	69fb      	ldr	r3, [r7, #28]
 8007a46:	3301      	adds	r3, #1
 8007a48:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007a4e:	b29b      	uxth	r3, r3
 8007a50:	3b01      	subs	r3, #1
 8007a52:	b29a      	uxth	r2, r3
 8007a54:	68fb      	ldr	r3, [r7, #12]
 8007a56:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007a5c:	b29b      	uxth	r3, r3
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d1cb      	bne.n	80079fa <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007a62:	683b      	ldr	r3, [r7, #0]
 8007a64:	9300      	str	r3, [sp, #0]
 8007a66:	697b      	ldr	r3, [r7, #20]
 8007a68:	2200      	movs	r2, #0
 8007a6a:	2140      	movs	r1, #64	@ 0x40
 8007a6c:	68f8      	ldr	r0, [r7, #12]
 8007a6e:	f000 f814 	bl	8007a9a <UART_WaitOnFlagUntilTimeout>
 8007a72:	4603      	mov	r3, r0
 8007a74:	2b00      	cmp	r3, #0
 8007a76:	d005      	beq.n	8007a84 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	2220      	movs	r2, #32
 8007a7c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8007a80:	2303      	movs	r3, #3
 8007a82:	e006      	b.n	8007a92 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	2220      	movs	r2, #32
 8007a88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8007a8c:	2300      	movs	r3, #0
 8007a8e:	e000      	b.n	8007a92 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8007a90:	2302      	movs	r3, #2
  }
}
 8007a92:	4618      	mov	r0, r3
 8007a94:	3720      	adds	r7, #32
 8007a96:	46bd      	mov	sp, r7
 8007a98:	bd80      	pop	{r7, pc}

08007a9a <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007a9a:	b580      	push	{r7, lr}
 8007a9c:	b086      	sub	sp, #24
 8007a9e:	af00      	add	r7, sp, #0
 8007aa0:	60f8      	str	r0, [r7, #12]
 8007aa2:	60b9      	str	r1, [r7, #8]
 8007aa4:	603b      	str	r3, [r7, #0]
 8007aa6:	4613      	mov	r3, r2
 8007aa8:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007aaa:	e03b      	b.n	8007b24 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007aac:	6a3b      	ldr	r3, [r7, #32]
 8007aae:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007ab2:	d037      	beq.n	8007b24 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007ab4:	f7fd f8c0 	bl	8004c38 <HAL_GetTick>
 8007ab8:	4602      	mov	r2, r0
 8007aba:	683b      	ldr	r3, [r7, #0]
 8007abc:	1ad3      	subs	r3, r2, r3
 8007abe:	6a3a      	ldr	r2, [r7, #32]
 8007ac0:	429a      	cmp	r2, r3
 8007ac2:	d302      	bcc.n	8007aca <UART_WaitOnFlagUntilTimeout+0x30>
 8007ac4:	6a3b      	ldr	r3, [r7, #32]
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d101      	bne.n	8007ace <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007aca:	2303      	movs	r3, #3
 8007acc:	e03a      	b.n	8007b44 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	68db      	ldr	r3, [r3, #12]
 8007ad4:	f003 0304 	and.w	r3, r3, #4
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d023      	beq.n	8007b24 <UART_WaitOnFlagUntilTimeout+0x8a>
 8007adc:	68bb      	ldr	r3, [r7, #8]
 8007ade:	2b80      	cmp	r3, #128	@ 0x80
 8007ae0:	d020      	beq.n	8007b24 <UART_WaitOnFlagUntilTimeout+0x8a>
 8007ae2:	68bb      	ldr	r3, [r7, #8]
 8007ae4:	2b40      	cmp	r3, #64	@ 0x40
 8007ae6:	d01d      	beq.n	8007b24 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	681b      	ldr	r3, [r3, #0]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	f003 0308 	and.w	r3, r3, #8
 8007af2:	2b08      	cmp	r3, #8
 8007af4:	d116      	bne.n	8007b24 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8007af6:	2300      	movs	r3, #0
 8007af8:	617b      	str	r3, [r7, #20]
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	617b      	str	r3, [r7, #20]
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	685b      	ldr	r3, [r3, #4]
 8007b08:	617b      	str	r3, [r7, #20]
 8007b0a:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007b0c:	68f8      	ldr	r0, [r7, #12]
 8007b0e:	f000 f81d 	bl	8007b4c <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	2208      	movs	r2, #8
 8007b16:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	2200      	movs	r2, #0
 8007b1c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8007b20:	2301      	movs	r3, #1
 8007b22:	e00f      	b.n	8007b44 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007b24:	68fb      	ldr	r3, [r7, #12]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	681a      	ldr	r2, [r3, #0]
 8007b2a:	68bb      	ldr	r3, [r7, #8]
 8007b2c:	4013      	ands	r3, r2
 8007b2e:	68ba      	ldr	r2, [r7, #8]
 8007b30:	429a      	cmp	r2, r3
 8007b32:	bf0c      	ite	eq
 8007b34:	2301      	moveq	r3, #1
 8007b36:	2300      	movne	r3, #0
 8007b38:	b2db      	uxtb	r3, r3
 8007b3a:	461a      	mov	r2, r3
 8007b3c:	79fb      	ldrb	r3, [r7, #7]
 8007b3e:	429a      	cmp	r2, r3
 8007b40:	d0b4      	beq.n	8007aac <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007b42:	2300      	movs	r3, #0
}
 8007b44:	4618      	mov	r0, r3
 8007b46:	3718      	adds	r7, #24
 8007b48:	46bd      	mov	sp, r7
 8007b4a:	bd80      	pop	{r7, pc}

08007b4c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007b4c:	b480      	push	{r7}
 8007b4e:	b095      	sub	sp, #84	@ 0x54
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	330c      	adds	r3, #12
 8007b5a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b5c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b5e:	e853 3f00 	ldrex	r3, [r3]
 8007b62:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007b64:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b66:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007b6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007b6c:	687b      	ldr	r3, [r7, #4]
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	330c      	adds	r3, #12
 8007b72:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007b74:	643a      	str	r2, [r7, #64]	@ 0x40
 8007b76:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b78:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007b7a:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007b7c:	e841 2300 	strex	r3, r2, [r1]
 8007b80:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007b82:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007b84:	2b00      	cmp	r3, #0
 8007b86:	d1e5      	bne.n	8007b54 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	3314      	adds	r3, #20
 8007b8e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b90:	6a3b      	ldr	r3, [r7, #32]
 8007b92:	e853 3f00 	ldrex	r3, [r3]
 8007b96:	61fb      	str	r3, [r7, #28]
   return(result);
 8007b98:	69fb      	ldr	r3, [r7, #28]
 8007b9a:	f023 0301 	bic.w	r3, r3, #1
 8007b9e:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	3314      	adds	r3, #20
 8007ba6:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007ba8:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007baa:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bac:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007bae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007bb0:	e841 2300 	strex	r3, r2, [r1]
 8007bb4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007bb6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d1e5      	bne.n	8007b88 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007bc0:	2b01      	cmp	r3, #1
 8007bc2:	d119      	bne.n	8007bf8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	330c      	adds	r3, #12
 8007bca:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	e853 3f00 	ldrex	r3, [r3]
 8007bd2:	60bb      	str	r3, [r7, #8]
   return(result);
 8007bd4:	68bb      	ldr	r3, [r7, #8]
 8007bd6:	f023 0310 	bic.w	r3, r3, #16
 8007bda:	647b      	str	r3, [r7, #68]	@ 0x44
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	330c      	adds	r3, #12
 8007be2:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007be4:	61ba      	str	r2, [r7, #24]
 8007be6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007be8:	6979      	ldr	r1, [r7, #20]
 8007bea:	69ba      	ldr	r2, [r7, #24]
 8007bec:	e841 2300 	strex	r3, r2, [r1]
 8007bf0:	613b      	str	r3, [r7, #16]
   return(result);
 8007bf2:	693b      	ldr	r3, [r7, #16]
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d1e5      	bne.n	8007bc4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007bf8:	687b      	ldr	r3, [r7, #4]
 8007bfa:	2220      	movs	r2, #32
 8007bfc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	2200      	movs	r2, #0
 8007c04:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8007c06:	bf00      	nop
 8007c08:	3754      	adds	r7, #84	@ 0x54
 8007c0a:	46bd      	mov	sp, r7
 8007c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c10:	4770      	bx	lr
	...

08007c14 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007c14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007c18:	b0c0      	sub	sp, #256	@ 0x100
 8007c1a:	af00      	add	r7, sp, #0
 8007c1c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007c20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	691b      	ldr	r3, [r3, #16]
 8007c28:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8007c2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c30:	68d9      	ldr	r1, [r3, #12]
 8007c32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c36:	681a      	ldr	r2, [r3, #0]
 8007c38:	ea40 0301 	orr.w	r3, r0, r1
 8007c3c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007c3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c42:	689a      	ldr	r2, [r3, #8]
 8007c44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c48:	691b      	ldr	r3, [r3, #16]
 8007c4a:	431a      	orrs	r2, r3
 8007c4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c50:	695b      	ldr	r3, [r3, #20]
 8007c52:	431a      	orrs	r2, r3
 8007c54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c58:	69db      	ldr	r3, [r3, #28]
 8007c5a:	4313      	orrs	r3, r2
 8007c5c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007c60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	68db      	ldr	r3, [r3, #12]
 8007c68:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8007c6c:	f021 010c 	bic.w	r1, r1, #12
 8007c70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c74:	681a      	ldr	r2, [r3, #0]
 8007c76:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007c7a:	430b      	orrs	r3, r1
 8007c7c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007c7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	695b      	ldr	r3, [r3, #20]
 8007c86:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8007c8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c8e:	6999      	ldr	r1, [r3, #24]
 8007c90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c94:	681a      	ldr	r2, [r3, #0]
 8007c96:	ea40 0301 	orr.w	r3, r0, r1
 8007c9a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007c9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ca0:	681a      	ldr	r2, [r3, #0]
 8007ca2:	4b8f      	ldr	r3, [pc, #572]	@ (8007ee0 <UART_SetConfig+0x2cc>)
 8007ca4:	429a      	cmp	r2, r3
 8007ca6:	d005      	beq.n	8007cb4 <UART_SetConfig+0xa0>
 8007ca8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007cac:	681a      	ldr	r2, [r3, #0]
 8007cae:	4b8d      	ldr	r3, [pc, #564]	@ (8007ee4 <UART_SetConfig+0x2d0>)
 8007cb0:	429a      	cmp	r2, r3
 8007cb2:	d104      	bne.n	8007cbe <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007cb4:	f7ff fa14 	bl	80070e0 <HAL_RCC_GetPCLK2Freq>
 8007cb8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007cbc:	e003      	b.n	8007cc6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007cbe:	f7ff f9fb 	bl	80070b8 <HAL_RCC_GetPCLK1Freq>
 8007cc2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007cc6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007cca:	69db      	ldr	r3, [r3, #28]
 8007ccc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007cd0:	f040 810c 	bne.w	8007eec <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007cd4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007cd8:	2200      	movs	r2, #0
 8007cda:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007cde:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8007ce2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8007ce6:	4622      	mov	r2, r4
 8007ce8:	462b      	mov	r3, r5
 8007cea:	1891      	adds	r1, r2, r2
 8007cec:	65b9      	str	r1, [r7, #88]	@ 0x58
 8007cee:	415b      	adcs	r3, r3
 8007cf0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007cf2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8007cf6:	4621      	mov	r1, r4
 8007cf8:	eb12 0801 	adds.w	r8, r2, r1
 8007cfc:	4629      	mov	r1, r5
 8007cfe:	eb43 0901 	adc.w	r9, r3, r1
 8007d02:	f04f 0200 	mov.w	r2, #0
 8007d06:	f04f 0300 	mov.w	r3, #0
 8007d0a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007d0e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007d12:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007d16:	4690      	mov	r8, r2
 8007d18:	4699      	mov	r9, r3
 8007d1a:	4623      	mov	r3, r4
 8007d1c:	eb18 0303 	adds.w	r3, r8, r3
 8007d20:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007d24:	462b      	mov	r3, r5
 8007d26:	eb49 0303 	adc.w	r3, r9, r3
 8007d2a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007d2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d32:	685b      	ldr	r3, [r3, #4]
 8007d34:	2200      	movs	r2, #0
 8007d36:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007d3a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8007d3e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007d42:	460b      	mov	r3, r1
 8007d44:	18db      	adds	r3, r3, r3
 8007d46:	653b      	str	r3, [r7, #80]	@ 0x50
 8007d48:	4613      	mov	r3, r2
 8007d4a:	eb42 0303 	adc.w	r3, r2, r3
 8007d4e:	657b      	str	r3, [r7, #84]	@ 0x54
 8007d50:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007d54:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8007d58:	f7f9 f884 	bl	8000e64 <__aeabi_uldivmod>
 8007d5c:	4602      	mov	r2, r0
 8007d5e:	460b      	mov	r3, r1
 8007d60:	4b61      	ldr	r3, [pc, #388]	@ (8007ee8 <UART_SetConfig+0x2d4>)
 8007d62:	fba3 2302 	umull	r2, r3, r3, r2
 8007d66:	095b      	lsrs	r3, r3, #5
 8007d68:	011c      	lsls	r4, r3, #4
 8007d6a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007d6e:	2200      	movs	r2, #0
 8007d70:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007d74:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8007d78:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007d7c:	4642      	mov	r2, r8
 8007d7e:	464b      	mov	r3, r9
 8007d80:	1891      	adds	r1, r2, r2
 8007d82:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007d84:	415b      	adcs	r3, r3
 8007d86:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007d88:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007d8c:	4641      	mov	r1, r8
 8007d8e:	eb12 0a01 	adds.w	sl, r2, r1
 8007d92:	4649      	mov	r1, r9
 8007d94:	eb43 0b01 	adc.w	fp, r3, r1
 8007d98:	f04f 0200 	mov.w	r2, #0
 8007d9c:	f04f 0300 	mov.w	r3, #0
 8007da0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007da4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007da8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007dac:	4692      	mov	sl, r2
 8007dae:	469b      	mov	fp, r3
 8007db0:	4643      	mov	r3, r8
 8007db2:	eb1a 0303 	adds.w	r3, sl, r3
 8007db6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007dba:	464b      	mov	r3, r9
 8007dbc:	eb4b 0303 	adc.w	r3, fp, r3
 8007dc0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007dc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007dc8:	685b      	ldr	r3, [r3, #4]
 8007dca:	2200      	movs	r2, #0
 8007dcc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007dd0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8007dd4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007dd8:	460b      	mov	r3, r1
 8007dda:	18db      	adds	r3, r3, r3
 8007ddc:	643b      	str	r3, [r7, #64]	@ 0x40
 8007dde:	4613      	mov	r3, r2
 8007de0:	eb42 0303 	adc.w	r3, r2, r3
 8007de4:	647b      	str	r3, [r7, #68]	@ 0x44
 8007de6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007dea:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8007dee:	f7f9 f839 	bl	8000e64 <__aeabi_uldivmod>
 8007df2:	4602      	mov	r2, r0
 8007df4:	460b      	mov	r3, r1
 8007df6:	4611      	mov	r1, r2
 8007df8:	4b3b      	ldr	r3, [pc, #236]	@ (8007ee8 <UART_SetConfig+0x2d4>)
 8007dfa:	fba3 2301 	umull	r2, r3, r3, r1
 8007dfe:	095b      	lsrs	r3, r3, #5
 8007e00:	2264      	movs	r2, #100	@ 0x64
 8007e02:	fb02 f303 	mul.w	r3, r2, r3
 8007e06:	1acb      	subs	r3, r1, r3
 8007e08:	00db      	lsls	r3, r3, #3
 8007e0a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8007e0e:	4b36      	ldr	r3, [pc, #216]	@ (8007ee8 <UART_SetConfig+0x2d4>)
 8007e10:	fba3 2302 	umull	r2, r3, r3, r2
 8007e14:	095b      	lsrs	r3, r3, #5
 8007e16:	005b      	lsls	r3, r3, #1
 8007e18:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007e1c:	441c      	add	r4, r3
 8007e1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007e22:	2200      	movs	r2, #0
 8007e24:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007e28:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8007e2c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8007e30:	4642      	mov	r2, r8
 8007e32:	464b      	mov	r3, r9
 8007e34:	1891      	adds	r1, r2, r2
 8007e36:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007e38:	415b      	adcs	r3, r3
 8007e3a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007e3c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007e40:	4641      	mov	r1, r8
 8007e42:	1851      	adds	r1, r2, r1
 8007e44:	6339      	str	r1, [r7, #48]	@ 0x30
 8007e46:	4649      	mov	r1, r9
 8007e48:	414b      	adcs	r3, r1
 8007e4a:	637b      	str	r3, [r7, #52]	@ 0x34
 8007e4c:	f04f 0200 	mov.w	r2, #0
 8007e50:	f04f 0300 	mov.w	r3, #0
 8007e54:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8007e58:	4659      	mov	r1, fp
 8007e5a:	00cb      	lsls	r3, r1, #3
 8007e5c:	4651      	mov	r1, sl
 8007e5e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007e62:	4651      	mov	r1, sl
 8007e64:	00ca      	lsls	r2, r1, #3
 8007e66:	4610      	mov	r0, r2
 8007e68:	4619      	mov	r1, r3
 8007e6a:	4603      	mov	r3, r0
 8007e6c:	4642      	mov	r2, r8
 8007e6e:	189b      	adds	r3, r3, r2
 8007e70:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007e74:	464b      	mov	r3, r9
 8007e76:	460a      	mov	r2, r1
 8007e78:	eb42 0303 	adc.w	r3, r2, r3
 8007e7c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007e80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e84:	685b      	ldr	r3, [r3, #4]
 8007e86:	2200      	movs	r2, #0
 8007e88:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007e8c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007e90:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007e94:	460b      	mov	r3, r1
 8007e96:	18db      	adds	r3, r3, r3
 8007e98:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007e9a:	4613      	mov	r3, r2
 8007e9c:	eb42 0303 	adc.w	r3, r2, r3
 8007ea0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007ea2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007ea6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8007eaa:	f7f8 ffdb 	bl	8000e64 <__aeabi_uldivmod>
 8007eae:	4602      	mov	r2, r0
 8007eb0:	460b      	mov	r3, r1
 8007eb2:	4b0d      	ldr	r3, [pc, #52]	@ (8007ee8 <UART_SetConfig+0x2d4>)
 8007eb4:	fba3 1302 	umull	r1, r3, r3, r2
 8007eb8:	095b      	lsrs	r3, r3, #5
 8007eba:	2164      	movs	r1, #100	@ 0x64
 8007ebc:	fb01 f303 	mul.w	r3, r1, r3
 8007ec0:	1ad3      	subs	r3, r2, r3
 8007ec2:	00db      	lsls	r3, r3, #3
 8007ec4:	3332      	adds	r3, #50	@ 0x32
 8007ec6:	4a08      	ldr	r2, [pc, #32]	@ (8007ee8 <UART_SetConfig+0x2d4>)
 8007ec8:	fba2 2303 	umull	r2, r3, r2, r3
 8007ecc:	095b      	lsrs	r3, r3, #5
 8007ece:	f003 0207 	and.w	r2, r3, #7
 8007ed2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	4422      	add	r2, r4
 8007eda:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007edc:	e106      	b.n	80080ec <UART_SetConfig+0x4d8>
 8007ede:	bf00      	nop
 8007ee0:	40011000 	.word	0x40011000
 8007ee4:	40011400 	.word	0x40011400
 8007ee8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007eec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007ef0:	2200      	movs	r2, #0
 8007ef2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007ef6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8007efa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8007efe:	4642      	mov	r2, r8
 8007f00:	464b      	mov	r3, r9
 8007f02:	1891      	adds	r1, r2, r2
 8007f04:	6239      	str	r1, [r7, #32]
 8007f06:	415b      	adcs	r3, r3
 8007f08:	627b      	str	r3, [r7, #36]	@ 0x24
 8007f0a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007f0e:	4641      	mov	r1, r8
 8007f10:	1854      	adds	r4, r2, r1
 8007f12:	4649      	mov	r1, r9
 8007f14:	eb43 0501 	adc.w	r5, r3, r1
 8007f18:	f04f 0200 	mov.w	r2, #0
 8007f1c:	f04f 0300 	mov.w	r3, #0
 8007f20:	00eb      	lsls	r3, r5, #3
 8007f22:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007f26:	00e2      	lsls	r2, r4, #3
 8007f28:	4614      	mov	r4, r2
 8007f2a:	461d      	mov	r5, r3
 8007f2c:	4643      	mov	r3, r8
 8007f2e:	18e3      	adds	r3, r4, r3
 8007f30:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007f34:	464b      	mov	r3, r9
 8007f36:	eb45 0303 	adc.w	r3, r5, r3
 8007f3a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007f3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f42:	685b      	ldr	r3, [r3, #4]
 8007f44:	2200      	movs	r2, #0
 8007f46:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007f4a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007f4e:	f04f 0200 	mov.w	r2, #0
 8007f52:	f04f 0300 	mov.w	r3, #0
 8007f56:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8007f5a:	4629      	mov	r1, r5
 8007f5c:	008b      	lsls	r3, r1, #2
 8007f5e:	4621      	mov	r1, r4
 8007f60:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007f64:	4621      	mov	r1, r4
 8007f66:	008a      	lsls	r2, r1, #2
 8007f68:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007f6c:	f7f8 ff7a 	bl	8000e64 <__aeabi_uldivmod>
 8007f70:	4602      	mov	r2, r0
 8007f72:	460b      	mov	r3, r1
 8007f74:	4b60      	ldr	r3, [pc, #384]	@ (80080f8 <UART_SetConfig+0x4e4>)
 8007f76:	fba3 2302 	umull	r2, r3, r3, r2
 8007f7a:	095b      	lsrs	r3, r3, #5
 8007f7c:	011c      	lsls	r4, r3, #4
 8007f7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007f82:	2200      	movs	r2, #0
 8007f84:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007f88:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007f8c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007f90:	4642      	mov	r2, r8
 8007f92:	464b      	mov	r3, r9
 8007f94:	1891      	adds	r1, r2, r2
 8007f96:	61b9      	str	r1, [r7, #24]
 8007f98:	415b      	adcs	r3, r3
 8007f9a:	61fb      	str	r3, [r7, #28]
 8007f9c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007fa0:	4641      	mov	r1, r8
 8007fa2:	1851      	adds	r1, r2, r1
 8007fa4:	6139      	str	r1, [r7, #16]
 8007fa6:	4649      	mov	r1, r9
 8007fa8:	414b      	adcs	r3, r1
 8007faa:	617b      	str	r3, [r7, #20]
 8007fac:	f04f 0200 	mov.w	r2, #0
 8007fb0:	f04f 0300 	mov.w	r3, #0
 8007fb4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007fb8:	4659      	mov	r1, fp
 8007fba:	00cb      	lsls	r3, r1, #3
 8007fbc:	4651      	mov	r1, sl
 8007fbe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007fc2:	4651      	mov	r1, sl
 8007fc4:	00ca      	lsls	r2, r1, #3
 8007fc6:	4610      	mov	r0, r2
 8007fc8:	4619      	mov	r1, r3
 8007fca:	4603      	mov	r3, r0
 8007fcc:	4642      	mov	r2, r8
 8007fce:	189b      	adds	r3, r3, r2
 8007fd0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007fd4:	464b      	mov	r3, r9
 8007fd6:	460a      	mov	r2, r1
 8007fd8:	eb42 0303 	adc.w	r3, r2, r3
 8007fdc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007fe0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007fe4:	685b      	ldr	r3, [r3, #4]
 8007fe6:	2200      	movs	r2, #0
 8007fe8:	67bb      	str	r3, [r7, #120]	@ 0x78
 8007fea:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8007fec:	f04f 0200 	mov.w	r2, #0
 8007ff0:	f04f 0300 	mov.w	r3, #0
 8007ff4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8007ff8:	4649      	mov	r1, r9
 8007ffa:	008b      	lsls	r3, r1, #2
 8007ffc:	4641      	mov	r1, r8
 8007ffe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008002:	4641      	mov	r1, r8
 8008004:	008a      	lsls	r2, r1, #2
 8008006:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800800a:	f7f8 ff2b 	bl	8000e64 <__aeabi_uldivmod>
 800800e:	4602      	mov	r2, r0
 8008010:	460b      	mov	r3, r1
 8008012:	4611      	mov	r1, r2
 8008014:	4b38      	ldr	r3, [pc, #224]	@ (80080f8 <UART_SetConfig+0x4e4>)
 8008016:	fba3 2301 	umull	r2, r3, r3, r1
 800801a:	095b      	lsrs	r3, r3, #5
 800801c:	2264      	movs	r2, #100	@ 0x64
 800801e:	fb02 f303 	mul.w	r3, r2, r3
 8008022:	1acb      	subs	r3, r1, r3
 8008024:	011b      	lsls	r3, r3, #4
 8008026:	3332      	adds	r3, #50	@ 0x32
 8008028:	4a33      	ldr	r2, [pc, #204]	@ (80080f8 <UART_SetConfig+0x4e4>)
 800802a:	fba2 2303 	umull	r2, r3, r2, r3
 800802e:	095b      	lsrs	r3, r3, #5
 8008030:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8008034:	441c      	add	r4, r3
 8008036:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800803a:	2200      	movs	r2, #0
 800803c:	673b      	str	r3, [r7, #112]	@ 0x70
 800803e:	677a      	str	r2, [r7, #116]	@ 0x74
 8008040:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8008044:	4642      	mov	r2, r8
 8008046:	464b      	mov	r3, r9
 8008048:	1891      	adds	r1, r2, r2
 800804a:	60b9      	str	r1, [r7, #8]
 800804c:	415b      	adcs	r3, r3
 800804e:	60fb      	str	r3, [r7, #12]
 8008050:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008054:	4641      	mov	r1, r8
 8008056:	1851      	adds	r1, r2, r1
 8008058:	6039      	str	r1, [r7, #0]
 800805a:	4649      	mov	r1, r9
 800805c:	414b      	adcs	r3, r1
 800805e:	607b      	str	r3, [r7, #4]
 8008060:	f04f 0200 	mov.w	r2, #0
 8008064:	f04f 0300 	mov.w	r3, #0
 8008068:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800806c:	4659      	mov	r1, fp
 800806e:	00cb      	lsls	r3, r1, #3
 8008070:	4651      	mov	r1, sl
 8008072:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008076:	4651      	mov	r1, sl
 8008078:	00ca      	lsls	r2, r1, #3
 800807a:	4610      	mov	r0, r2
 800807c:	4619      	mov	r1, r3
 800807e:	4603      	mov	r3, r0
 8008080:	4642      	mov	r2, r8
 8008082:	189b      	adds	r3, r3, r2
 8008084:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008086:	464b      	mov	r3, r9
 8008088:	460a      	mov	r2, r1
 800808a:	eb42 0303 	adc.w	r3, r2, r3
 800808e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8008090:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8008094:	685b      	ldr	r3, [r3, #4]
 8008096:	2200      	movs	r2, #0
 8008098:	663b      	str	r3, [r7, #96]	@ 0x60
 800809a:	667a      	str	r2, [r7, #100]	@ 0x64
 800809c:	f04f 0200 	mov.w	r2, #0
 80080a0:	f04f 0300 	mov.w	r3, #0
 80080a4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80080a8:	4649      	mov	r1, r9
 80080aa:	008b      	lsls	r3, r1, #2
 80080ac:	4641      	mov	r1, r8
 80080ae:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80080b2:	4641      	mov	r1, r8
 80080b4:	008a      	lsls	r2, r1, #2
 80080b6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80080ba:	f7f8 fed3 	bl	8000e64 <__aeabi_uldivmod>
 80080be:	4602      	mov	r2, r0
 80080c0:	460b      	mov	r3, r1
 80080c2:	4b0d      	ldr	r3, [pc, #52]	@ (80080f8 <UART_SetConfig+0x4e4>)
 80080c4:	fba3 1302 	umull	r1, r3, r3, r2
 80080c8:	095b      	lsrs	r3, r3, #5
 80080ca:	2164      	movs	r1, #100	@ 0x64
 80080cc:	fb01 f303 	mul.w	r3, r1, r3
 80080d0:	1ad3      	subs	r3, r2, r3
 80080d2:	011b      	lsls	r3, r3, #4
 80080d4:	3332      	adds	r3, #50	@ 0x32
 80080d6:	4a08      	ldr	r2, [pc, #32]	@ (80080f8 <UART_SetConfig+0x4e4>)
 80080d8:	fba2 2303 	umull	r2, r3, r2, r3
 80080dc:	095b      	lsrs	r3, r3, #5
 80080de:	f003 020f 	and.w	r2, r3, #15
 80080e2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	4422      	add	r2, r4
 80080ea:	609a      	str	r2, [r3, #8]
}
 80080ec:	bf00      	nop
 80080ee:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80080f2:	46bd      	mov	sp, r7
 80080f4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80080f8:	51eb851f 	.word	0x51eb851f

080080fc <__cvt>:
 80080fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008100:	ec57 6b10 	vmov	r6, r7, d0
 8008104:	2f00      	cmp	r7, #0
 8008106:	460c      	mov	r4, r1
 8008108:	4619      	mov	r1, r3
 800810a:	463b      	mov	r3, r7
 800810c:	bfbb      	ittet	lt
 800810e:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8008112:	461f      	movlt	r7, r3
 8008114:	2300      	movge	r3, #0
 8008116:	232d      	movlt	r3, #45	@ 0x2d
 8008118:	700b      	strb	r3, [r1, #0]
 800811a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800811c:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8008120:	4691      	mov	r9, r2
 8008122:	f023 0820 	bic.w	r8, r3, #32
 8008126:	bfbc      	itt	lt
 8008128:	4632      	movlt	r2, r6
 800812a:	4616      	movlt	r6, r2
 800812c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008130:	d005      	beq.n	800813e <__cvt+0x42>
 8008132:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8008136:	d100      	bne.n	800813a <__cvt+0x3e>
 8008138:	3401      	adds	r4, #1
 800813a:	2102      	movs	r1, #2
 800813c:	e000      	b.n	8008140 <__cvt+0x44>
 800813e:	2103      	movs	r1, #3
 8008140:	ab03      	add	r3, sp, #12
 8008142:	9301      	str	r3, [sp, #4]
 8008144:	ab02      	add	r3, sp, #8
 8008146:	9300      	str	r3, [sp, #0]
 8008148:	ec47 6b10 	vmov	d0, r6, r7
 800814c:	4653      	mov	r3, sl
 800814e:	4622      	mov	r2, r4
 8008150:	f000 ff72 	bl	8009038 <_dtoa_r>
 8008154:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8008158:	4605      	mov	r5, r0
 800815a:	d119      	bne.n	8008190 <__cvt+0x94>
 800815c:	f019 0f01 	tst.w	r9, #1
 8008160:	d00e      	beq.n	8008180 <__cvt+0x84>
 8008162:	eb00 0904 	add.w	r9, r0, r4
 8008166:	2200      	movs	r2, #0
 8008168:	2300      	movs	r3, #0
 800816a:	4630      	mov	r0, r6
 800816c:	4639      	mov	r1, r7
 800816e:	f7f8 fcab 	bl	8000ac8 <__aeabi_dcmpeq>
 8008172:	b108      	cbz	r0, 8008178 <__cvt+0x7c>
 8008174:	f8cd 900c 	str.w	r9, [sp, #12]
 8008178:	2230      	movs	r2, #48	@ 0x30
 800817a:	9b03      	ldr	r3, [sp, #12]
 800817c:	454b      	cmp	r3, r9
 800817e:	d31e      	bcc.n	80081be <__cvt+0xc2>
 8008180:	9b03      	ldr	r3, [sp, #12]
 8008182:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8008184:	1b5b      	subs	r3, r3, r5
 8008186:	4628      	mov	r0, r5
 8008188:	6013      	str	r3, [r2, #0]
 800818a:	b004      	add	sp, #16
 800818c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008190:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8008194:	eb00 0904 	add.w	r9, r0, r4
 8008198:	d1e5      	bne.n	8008166 <__cvt+0x6a>
 800819a:	7803      	ldrb	r3, [r0, #0]
 800819c:	2b30      	cmp	r3, #48	@ 0x30
 800819e:	d10a      	bne.n	80081b6 <__cvt+0xba>
 80081a0:	2200      	movs	r2, #0
 80081a2:	2300      	movs	r3, #0
 80081a4:	4630      	mov	r0, r6
 80081a6:	4639      	mov	r1, r7
 80081a8:	f7f8 fc8e 	bl	8000ac8 <__aeabi_dcmpeq>
 80081ac:	b918      	cbnz	r0, 80081b6 <__cvt+0xba>
 80081ae:	f1c4 0401 	rsb	r4, r4, #1
 80081b2:	f8ca 4000 	str.w	r4, [sl]
 80081b6:	f8da 3000 	ldr.w	r3, [sl]
 80081ba:	4499      	add	r9, r3
 80081bc:	e7d3      	b.n	8008166 <__cvt+0x6a>
 80081be:	1c59      	adds	r1, r3, #1
 80081c0:	9103      	str	r1, [sp, #12]
 80081c2:	701a      	strb	r2, [r3, #0]
 80081c4:	e7d9      	b.n	800817a <__cvt+0x7e>

080081c6 <__exponent>:
 80081c6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80081c8:	2900      	cmp	r1, #0
 80081ca:	bfba      	itte	lt
 80081cc:	4249      	neglt	r1, r1
 80081ce:	232d      	movlt	r3, #45	@ 0x2d
 80081d0:	232b      	movge	r3, #43	@ 0x2b
 80081d2:	2909      	cmp	r1, #9
 80081d4:	7002      	strb	r2, [r0, #0]
 80081d6:	7043      	strb	r3, [r0, #1]
 80081d8:	dd29      	ble.n	800822e <__exponent+0x68>
 80081da:	f10d 0307 	add.w	r3, sp, #7
 80081de:	461d      	mov	r5, r3
 80081e0:	270a      	movs	r7, #10
 80081e2:	461a      	mov	r2, r3
 80081e4:	fbb1 f6f7 	udiv	r6, r1, r7
 80081e8:	fb07 1416 	mls	r4, r7, r6, r1
 80081ec:	3430      	adds	r4, #48	@ 0x30
 80081ee:	f802 4c01 	strb.w	r4, [r2, #-1]
 80081f2:	460c      	mov	r4, r1
 80081f4:	2c63      	cmp	r4, #99	@ 0x63
 80081f6:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 80081fa:	4631      	mov	r1, r6
 80081fc:	dcf1      	bgt.n	80081e2 <__exponent+0x1c>
 80081fe:	3130      	adds	r1, #48	@ 0x30
 8008200:	1e94      	subs	r4, r2, #2
 8008202:	f803 1c01 	strb.w	r1, [r3, #-1]
 8008206:	1c41      	adds	r1, r0, #1
 8008208:	4623      	mov	r3, r4
 800820a:	42ab      	cmp	r3, r5
 800820c:	d30a      	bcc.n	8008224 <__exponent+0x5e>
 800820e:	f10d 0309 	add.w	r3, sp, #9
 8008212:	1a9b      	subs	r3, r3, r2
 8008214:	42ac      	cmp	r4, r5
 8008216:	bf88      	it	hi
 8008218:	2300      	movhi	r3, #0
 800821a:	3302      	adds	r3, #2
 800821c:	4403      	add	r3, r0
 800821e:	1a18      	subs	r0, r3, r0
 8008220:	b003      	add	sp, #12
 8008222:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008224:	f813 6b01 	ldrb.w	r6, [r3], #1
 8008228:	f801 6f01 	strb.w	r6, [r1, #1]!
 800822c:	e7ed      	b.n	800820a <__exponent+0x44>
 800822e:	2330      	movs	r3, #48	@ 0x30
 8008230:	3130      	adds	r1, #48	@ 0x30
 8008232:	7083      	strb	r3, [r0, #2]
 8008234:	70c1      	strb	r1, [r0, #3]
 8008236:	1d03      	adds	r3, r0, #4
 8008238:	e7f1      	b.n	800821e <__exponent+0x58>
	...

0800823c <_printf_float>:
 800823c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008240:	b08d      	sub	sp, #52	@ 0x34
 8008242:	460c      	mov	r4, r1
 8008244:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8008248:	4616      	mov	r6, r2
 800824a:	461f      	mov	r7, r3
 800824c:	4605      	mov	r5, r0
 800824e:	f000 fdf3 	bl	8008e38 <_localeconv_r>
 8008252:	6803      	ldr	r3, [r0, #0]
 8008254:	9304      	str	r3, [sp, #16]
 8008256:	4618      	mov	r0, r3
 8008258:	f7f8 f80a 	bl	8000270 <strlen>
 800825c:	2300      	movs	r3, #0
 800825e:	930a      	str	r3, [sp, #40]	@ 0x28
 8008260:	f8d8 3000 	ldr.w	r3, [r8]
 8008264:	9005      	str	r0, [sp, #20]
 8008266:	3307      	adds	r3, #7
 8008268:	f023 0307 	bic.w	r3, r3, #7
 800826c:	f103 0208 	add.w	r2, r3, #8
 8008270:	f894 a018 	ldrb.w	sl, [r4, #24]
 8008274:	f8d4 b000 	ldr.w	fp, [r4]
 8008278:	f8c8 2000 	str.w	r2, [r8]
 800827c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8008280:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8008284:	9307      	str	r3, [sp, #28]
 8008286:	f8cd 8018 	str.w	r8, [sp, #24]
 800828a:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800828e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008292:	4b9c      	ldr	r3, [pc, #624]	@ (8008504 <_printf_float+0x2c8>)
 8008294:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8008298:	f7f8 fc48 	bl	8000b2c <__aeabi_dcmpun>
 800829c:	bb70      	cbnz	r0, 80082fc <_printf_float+0xc0>
 800829e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80082a2:	4b98      	ldr	r3, [pc, #608]	@ (8008504 <_printf_float+0x2c8>)
 80082a4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80082a8:	f7f8 fc22 	bl	8000af0 <__aeabi_dcmple>
 80082ac:	bb30      	cbnz	r0, 80082fc <_printf_float+0xc0>
 80082ae:	2200      	movs	r2, #0
 80082b0:	2300      	movs	r3, #0
 80082b2:	4640      	mov	r0, r8
 80082b4:	4649      	mov	r1, r9
 80082b6:	f7f8 fc11 	bl	8000adc <__aeabi_dcmplt>
 80082ba:	b110      	cbz	r0, 80082c2 <_printf_float+0x86>
 80082bc:	232d      	movs	r3, #45	@ 0x2d
 80082be:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80082c2:	4a91      	ldr	r2, [pc, #580]	@ (8008508 <_printf_float+0x2cc>)
 80082c4:	4b91      	ldr	r3, [pc, #580]	@ (800850c <_printf_float+0x2d0>)
 80082c6:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80082ca:	bf94      	ite	ls
 80082cc:	4690      	movls	r8, r2
 80082ce:	4698      	movhi	r8, r3
 80082d0:	2303      	movs	r3, #3
 80082d2:	6123      	str	r3, [r4, #16]
 80082d4:	f02b 0304 	bic.w	r3, fp, #4
 80082d8:	6023      	str	r3, [r4, #0]
 80082da:	f04f 0900 	mov.w	r9, #0
 80082de:	9700      	str	r7, [sp, #0]
 80082e0:	4633      	mov	r3, r6
 80082e2:	aa0b      	add	r2, sp, #44	@ 0x2c
 80082e4:	4621      	mov	r1, r4
 80082e6:	4628      	mov	r0, r5
 80082e8:	f000 f9d2 	bl	8008690 <_printf_common>
 80082ec:	3001      	adds	r0, #1
 80082ee:	f040 808d 	bne.w	800840c <_printf_float+0x1d0>
 80082f2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80082f6:	b00d      	add	sp, #52	@ 0x34
 80082f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082fc:	4642      	mov	r2, r8
 80082fe:	464b      	mov	r3, r9
 8008300:	4640      	mov	r0, r8
 8008302:	4649      	mov	r1, r9
 8008304:	f7f8 fc12 	bl	8000b2c <__aeabi_dcmpun>
 8008308:	b140      	cbz	r0, 800831c <_printf_float+0xe0>
 800830a:	464b      	mov	r3, r9
 800830c:	2b00      	cmp	r3, #0
 800830e:	bfbc      	itt	lt
 8008310:	232d      	movlt	r3, #45	@ 0x2d
 8008312:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8008316:	4a7e      	ldr	r2, [pc, #504]	@ (8008510 <_printf_float+0x2d4>)
 8008318:	4b7e      	ldr	r3, [pc, #504]	@ (8008514 <_printf_float+0x2d8>)
 800831a:	e7d4      	b.n	80082c6 <_printf_float+0x8a>
 800831c:	6863      	ldr	r3, [r4, #4]
 800831e:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8008322:	9206      	str	r2, [sp, #24]
 8008324:	1c5a      	adds	r2, r3, #1
 8008326:	d13b      	bne.n	80083a0 <_printf_float+0x164>
 8008328:	2306      	movs	r3, #6
 800832a:	6063      	str	r3, [r4, #4]
 800832c:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8008330:	2300      	movs	r3, #0
 8008332:	6022      	str	r2, [r4, #0]
 8008334:	9303      	str	r3, [sp, #12]
 8008336:	ab0a      	add	r3, sp, #40	@ 0x28
 8008338:	e9cd a301 	strd	sl, r3, [sp, #4]
 800833c:	ab09      	add	r3, sp, #36	@ 0x24
 800833e:	9300      	str	r3, [sp, #0]
 8008340:	6861      	ldr	r1, [r4, #4]
 8008342:	ec49 8b10 	vmov	d0, r8, r9
 8008346:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800834a:	4628      	mov	r0, r5
 800834c:	f7ff fed6 	bl	80080fc <__cvt>
 8008350:	9b06      	ldr	r3, [sp, #24]
 8008352:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8008354:	2b47      	cmp	r3, #71	@ 0x47
 8008356:	4680      	mov	r8, r0
 8008358:	d129      	bne.n	80083ae <_printf_float+0x172>
 800835a:	1cc8      	adds	r0, r1, #3
 800835c:	db02      	blt.n	8008364 <_printf_float+0x128>
 800835e:	6863      	ldr	r3, [r4, #4]
 8008360:	4299      	cmp	r1, r3
 8008362:	dd41      	ble.n	80083e8 <_printf_float+0x1ac>
 8008364:	f1aa 0a02 	sub.w	sl, sl, #2
 8008368:	fa5f fa8a 	uxtb.w	sl, sl
 800836c:	3901      	subs	r1, #1
 800836e:	4652      	mov	r2, sl
 8008370:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8008374:	9109      	str	r1, [sp, #36]	@ 0x24
 8008376:	f7ff ff26 	bl	80081c6 <__exponent>
 800837a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800837c:	1813      	adds	r3, r2, r0
 800837e:	2a01      	cmp	r2, #1
 8008380:	4681      	mov	r9, r0
 8008382:	6123      	str	r3, [r4, #16]
 8008384:	dc02      	bgt.n	800838c <_printf_float+0x150>
 8008386:	6822      	ldr	r2, [r4, #0]
 8008388:	07d2      	lsls	r2, r2, #31
 800838a:	d501      	bpl.n	8008390 <_printf_float+0x154>
 800838c:	3301      	adds	r3, #1
 800838e:	6123      	str	r3, [r4, #16]
 8008390:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8008394:	2b00      	cmp	r3, #0
 8008396:	d0a2      	beq.n	80082de <_printf_float+0xa2>
 8008398:	232d      	movs	r3, #45	@ 0x2d
 800839a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800839e:	e79e      	b.n	80082de <_printf_float+0xa2>
 80083a0:	9a06      	ldr	r2, [sp, #24]
 80083a2:	2a47      	cmp	r2, #71	@ 0x47
 80083a4:	d1c2      	bne.n	800832c <_printf_float+0xf0>
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d1c0      	bne.n	800832c <_printf_float+0xf0>
 80083aa:	2301      	movs	r3, #1
 80083ac:	e7bd      	b.n	800832a <_printf_float+0xee>
 80083ae:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80083b2:	d9db      	bls.n	800836c <_printf_float+0x130>
 80083b4:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80083b8:	d118      	bne.n	80083ec <_printf_float+0x1b0>
 80083ba:	2900      	cmp	r1, #0
 80083bc:	6863      	ldr	r3, [r4, #4]
 80083be:	dd0b      	ble.n	80083d8 <_printf_float+0x19c>
 80083c0:	6121      	str	r1, [r4, #16]
 80083c2:	b913      	cbnz	r3, 80083ca <_printf_float+0x18e>
 80083c4:	6822      	ldr	r2, [r4, #0]
 80083c6:	07d0      	lsls	r0, r2, #31
 80083c8:	d502      	bpl.n	80083d0 <_printf_float+0x194>
 80083ca:	3301      	adds	r3, #1
 80083cc:	440b      	add	r3, r1
 80083ce:	6123      	str	r3, [r4, #16]
 80083d0:	65a1      	str	r1, [r4, #88]	@ 0x58
 80083d2:	f04f 0900 	mov.w	r9, #0
 80083d6:	e7db      	b.n	8008390 <_printf_float+0x154>
 80083d8:	b913      	cbnz	r3, 80083e0 <_printf_float+0x1a4>
 80083da:	6822      	ldr	r2, [r4, #0]
 80083dc:	07d2      	lsls	r2, r2, #31
 80083de:	d501      	bpl.n	80083e4 <_printf_float+0x1a8>
 80083e0:	3302      	adds	r3, #2
 80083e2:	e7f4      	b.n	80083ce <_printf_float+0x192>
 80083e4:	2301      	movs	r3, #1
 80083e6:	e7f2      	b.n	80083ce <_printf_float+0x192>
 80083e8:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 80083ec:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80083ee:	4299      	cmp	r1, r3
 80083f0:	db05      	blt.n	80083fe <_printf_float+0x1c2>
 80083f2:	6823      	ldr	r3, [r4, #0]
 80083f4:	6121      	str	r1, [r4, #16]
 80083f6:	07d8      	lsls	r0, r3, #31
 80083f8:	d5ea      	bpl.n	80083d0 <_printf_float+0x194>
 80083fa:	1c4b      	adds	r3, r1, #1
 80083fc:	e7e7      	b.n	80083ce <_printf_float+0x192>
 80083fe:	2900      	cmp	r1, #0
 8008400:	bfd4      	ite	le
 8008402:	f1c1 0202 	rsble	r2, r1, #2
 8008406:	2201      	movgt	r2, #1
 8008408:	4413      	add	r3, r2
 800840a:	e7e0      	b.n	80083ce <_printf_float+0x192>
 800840c:	6823      	ldr	r3, [r4, #0]
 800840e:	055a      	lsls	r2, r3, #21
 8008410:	d407      	bmi.n	8008422 <_printf_float+0x1e6>
 8008412:	6923      	ldr	r3, [r4, #16]
 8008414:	4642      	mov	r2, r8
 8008416:	4631      	mov	r1, r6
 8008418:	4628      	mov	r0, r5
 800841a:	47b8      	blx	r7
 800841c:	3001      	adds	r0, #1
 800841e:	d12b      	bne.n	8008478 <_printf_float+0x23c>
 8008420:	e767      	b.n	80082f2 <_printf_float+0xb6>
 8008422:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8008426:	f240 80dd 	bls.w	80085e4 <_printf_float+0x3a8>
 800842a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800842e:	2200      	movs	r2, #0
 8008430:	2300      	movs	r3, #0
 8008432:	f7f8 fb49 	bl	8000ac8 <__aeabi_dcmpeq>
 8008436:	2800      	cmp	r0, #0
 8008438:	d033      	beq.n	80084a2 <_printf_float+0x266>
 800843a:	4a37      	ldr	r2, [pc, #220]	@ (8008518 <_printf_float+0x2dc>)
 800843c:	2301      	movs	r3, #1
 800843e:	4631      	mov	r1, r6
 8008440:	4628      	mov	r0, r5
 8008442:	47b8      	blx	r7
 8008444:	3001      	adds	r0, #1
 8008446:	f43f af54 	beq.w	80082f2 <_printf_float+0xb6>
 800844a:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800844e:	4543      	cmp	r3, r8
 8008450:	db02      	blt.n	8008458 <_printf_float+0x21c>
 8008452:	6823      	ldr	r3, [r4, #0]
 8008454:	07d8      	lsls	r0, r3, #31
 8008456:	d50f      	bpl.n	8008478 <_printf_float+0x23c>
 8008458:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800845c:	4631      	mov	r1, r6
 800845e:	4628      	mov	r0, r5
 8008460:	47b8      	blx	r7
 8008462:	3001      	adds	r0, #1
 8008464:	f43f af45 	beq.w	80082f2 <_printf_float+0xb6>
 8008468:	f04f 0900 	mov.w	r9, #0
 800846c:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8008470:	f104 0a1a 	add.w	sl, r4, #26
 8008474:	45c8      	cmp	r8, r9
 8008476:	dc09      	bgt.n	800848c <_printf_float+0x250>
 8008478:	6823      	ldr	r3, [r4, #0]
 800847a:	079b      	lsls	r3, r3, #30
 800847c:	f100 8103 	bmi.w	8008686 <_printf_float+0x44a>
 8008480:	68e0      	ldr	r0, [r4, #12]
 8008482:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8008484:	4298      	cmp	r0, r3
 8008486:	bfb8      	it	lt
 8008488:	4618      	movlt	r0, r3
 800848a:	e734      	b.n	80082f6 <_printf_float+0xba>
 800848c:	2301      	movs	r3, #1
 800848e:	4652      	mov	r2, sl
 8008490:	4631      	mov	r1, r6
 8008492:	4628      	mov	r0, r5
 8008494:	47b8      	blx	r7
 8008496:	3001      	adds	r0, #1
 8008498:	f43f af2b 	beq.w	80082f2 <_printf_float+0xb6>
 800849c:	f109 0901 	add.w	r9, r9, #1
 80084a0:	e7e8      	b.n	8008474 <_printf_float+0x238>
 80084a2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	dc39      	bgt.n	800851c <_printf_float+0x2e0>
 80084a8:	4a1b      	ldr	r2, [pc, #108]	@ (8008518 <_printf_float+0x2dc>)
 80084aa:	2301      	movs	r3, #1
 80084ac:	4631      	mov	r1, r6
 80084ae:	4628      	mov	r0, r5
 80084b0:	47b8      	blx	r7
 80084b2:	3001      	adds	r0, #1
 80084b4:	f43f af1d 	beq.w	80082f2 <_printf_float+0xb6>
 80084b8:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80084bc:	ea59 0303 	orrs.w	r3, r9, r3
 80084c0:	d102      	bne.n	80084c8 <_printf_float+0x28c>
 80084c2:	6823      	ldr	r3, [r4, #0]
 80084c4:	07d9      	lsls	r1, r3, #31
 80084c6:	d5d7      	bpl.n	8008478 <_printf_float+0x23c>
 80084c8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80084cc:	4631      	mov	r1, r6
 80084ce:	4628      	mov	r0, r5
 80084d0:	47b8      	blx	r7
 80084d2:	3001      	adds	r0, #1
 80084d4:	f43f af0d 	beq.w	80082f2 <_printf_float+0xb6>
 80084d8:	f04f 0a00 	mov.w	sl, #0
 80084dc:	f104 0b1a 	add.w	fp, r4, #26
 80084e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80084e2:	425b      	negs	r3, r3
 80084e4:	4553      	cmp	r3, sl
 80084e6:	dc01      	bgt.n	80084ec <_printf_float+0x2b0>
 80084e8:	464b      	mov	r3, r9
 80084ea:	e793      	b.n	8008414 <_printf_float+0x1d8>
 80084ec:	2301      	movs	r3, #1
 80084ee:	465a      	mov	r2, fp
 80084f0:	4631      	mov	r1, r6
 80084f2:	4628      	mov	r0, r5
 80084f4:	47b8      	blx	r7
 80084f6:	3001      	adds	r0, #1
 80084f8:	f43f aefb 	beq.w	80082f2 <_printf_float+0xb6>
 80084fc:	f10a 0a01 	add.w	sl, sl, #1
 8008500:	e7ee      	b.n	80084e0 <_printf_float+0x2a4>
 8008502:	bf00      	nop
 8008504:	7fefffff 	.word	0x7fefffff
 8008508:	0800cf9c 	.word	0x0800cf9c
 800850c:	0800cfa0 	.word	0x0800cfa0
 8008510:	0800cfa4 	.word	0x0800cfa4
 8008514:	0800cfa8 	.word	0x0800cfa8
 8008518:	0800cfac 	.word	0x0800cfac
 800851c:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800851e:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8008522:	4553      	cmp	r3, sl
 8008524:	bfa8      	it	ge
 8008526:	4653      	movge	r3, sl
 8008528:	2b00      	cmp	r3, #0
 800852a:	4699      	mov	r9, r3
 800852c:	dc36      	bgt.n	800859c <_printf_float+0x360>
 800852e:	f04f 0b00 	mov.w	fp, #0
 8008532:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008536:	f104 021a 	add.w	r2, r4, #26
 800853a:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800853c:	9306      	str	r3, [sp, #24]
 800853e:	eba3 0309 	sub.w	r3, r3, r9
 8008542:	455b      	cmp	r3, fp
 8008544:	dc31      	bgt.n	80085aa <_printf_float+0x36e>
 8008546:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008548:	459a      	cmp	sl, r3
 800854a:	dc3a      	bgt.n	80085c2 <_printf_float+0x386>
 800854c:	6823      	ldr	r3, [r4, #0]
 800854e:	07da      	lsls	r2, r3, #31
 8008550:	d437      	bmi.n	80085c2 <_printf_float+0x386>
 8008552:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008554:	ebaa 0903 	sub.w	r9, sl, r3
 8008558:	9b06      	ldr	r3, [sp, #24]
 800855a:	ebaa 0303 	sub.w	r3, sl, r3
 800855e:	4599      	cmp	r9, r3
 8008560:	bfa8      	it	ge
 8008562:	4699      	movge	r9, r3
 8008564:	f1b9 0f00 	cmp.w	r9, #0
 8008568:	dc33      	bgt.n	80085d2 <_printf_float+0x396>
 800856a:	f04f 0800 	mov.w	r8, #0
 800856e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8008572:	f104 0b1a 	add.w	fp, r4, #26
 8008576:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008578:	ebaa 0303 	sub.w	r3, sl, r3
 800857c:	eba3 0309 	sub.w	r3, r3, r9
 8008580:	4543      	cmp	r3, r8
 8008582:	f77f af79 	ble.w	8008478 <_printf_float+0x23c>
 8008586:	2301      	movs	r3, #1
 8008588:	465a      	mov	r2, fp
 800858a:	4631      	mov	r1, r6
 800858c:	4628      	mov	r0, r5
 800858e:	47b8      	blx	r7
 8008590:	3001      	adds	r0, #1
 8008592:	f43f aeae 	beq.w	80082f2 <_printf_float+0xb6>
 8008596:	f108 0801 	add.w	r8, r8, #1
 800859a:	e7ec      	b.n	8008576 <_printf_float+0x33a>
 800859c:	4642      	mov	r2, r8
 800859e:	4631      	mov	r1, r6
 80085a0:	4628      	mov	r0, r5
 80085a2:	47b8      	blx	r7
 80085a4:	3001      	adds	r0, #1
 80085a6:	d1c2      	bne.n	800852e <_printf_float+0x2f2>
 80085a8:	e6a3      	b.n	80082f2 <_printf_float+0xb6>
 80085aa:	2301      	movs	r3, #1
 80085ac:	4631      	mov	r1, r6
 80085ae:	4628      	mov	r0, r5
 80085b0:	9206      	str	r2, [sp, #24]
 80085b2:	47b8      	blx	r7
 80085b4:	3001      	adds	r0, #1
 80085b6:	f43f ae9c 	beq.w	80082f2 <_printf_float+0xb6>
 80085ba:	9a06      	ldr	r2, [sp, #24]
 80085bc:	f10b 0b01 	add.w	fp, fp, #1
 80085c0:	e7bb      	b.n	800853a <_printf_float+0x2fe>
 80085c2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80085c6:	4631      	mov	r1, r6
 80085c8:	4628      	mov	r0, r5
 80085ca:	47b8      	blx	r7
 80085cc:	3001      	adds	r0, #1
 80085ce:	d1c0      	bne.n	8008552 <_printf_float+0x316>
 80085d0:	e68f      	b.n	80082f2 <_printf_float+0xb6>
 80085d2:	9a06      	ldr	r2, [sp, #24]
 80085d4:	464b      	mov	r3, r9
 80085d6:	4442      	add	r2, r8
 80085d8:	4631      	mov	r1, r6
 80085da:	4628      	mov	r0, r5
 80085dc:	47b8      	blx	r7
 80085de:	3001      	adds	r0, #1
 80085e0:	d1c3      	bne.n	800856a <_printf_float+0x32e>
 80085e2:	e686      	b.n	80082f2 <_printf_float+0xb6>
 80085e4:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 80085e8:	f1ba 0f01 	cmp.w	sl, #1
 80085ec:	dc01      	bgt.n	80085f2 <_printf_float+0x3b6>
 80085ee:	07db      	lsls	r3, r3, #31
 80085f0:	d536      	bpl.n	8008660 <_printf_float+0x424>
 80085f2:	2301      	movs	r3, #1
 80085f4:	4642      	mov	r2, r8
 80085f6:	4631      	mov	r1, r6
 80085f8:	4628      	mov	r0, r5
 80085fa:	47b8      	blx	r7
 80085fc:	3001      	adds	r0, #1
 80085fe:	f43f ae78 	beq.w	80082f2 <_printf_float+0xb6>
 8008602:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008606:	4631      	mov	r1, r6
 8008608:	4628      	mov	r0, r5
 800860a:	47b8      	blx	r7
 800860c:	3001      	adds	r0, #1
 800860e:	f43f ae70 	beq.w	80082f2 <_printf_float+0xb6>
 8008612:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8008616:	2200      	movs	r2, #0
 8008618:	2300      	movs	r3, #0
 800861a:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800861e:	f7f8 fa53 	bl	8000ac8 <__aeabi_dcmpeq>
 8008622:	b9c0      	cbnz	r0, 8008656 <_printf_float+0x41a>
 8008624:	4653      	mov	r3, sl
 8008626:	f108 0201 	add.w	r2, r8, #1
 800862a:	4631      	mov	r1, r6
 800862c:	4628      	mov	r0, r5
 800862e:	47b8      	blx	r7
 8008630:	3001      	adds	r0, #1
 8008632:	d10c      	bne.n	800864e <_printf_float+0x412>
 8008634:	e65d      	b.n	80082f2 <_printf_float+0xb6>
 8008636:	2301      	movs	r3, #1
 8008638:	465a      	mov	r2, fp
 800863a:	4631      	mov	r1, r6
 800863c:	4628      	mov	r0, r5
 800863e:	47b8      	blx	r7
 8008640:	3001      	adds	r0, #1
 8008642:	f43f ae56 	beq.w	80082f2 <_printf_float+0xb6>
 8008646:	f108 0801 	add.w	r8, r8, #1
 800864a:	45d0      	cmp	r8, sl
 800864c:	dbf3      	blt.n	8008636 <_printf_float+0x3fa>
 800864e:	464b      	mov	r3, r9
 8008650:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8008654:	e6df      	b.n	8008416 <_printf_float+0x1da>
 8008656:	f04f 0800 	mov.w	r8, #0
 800865a:	f104 0b1a 	add.w	fp, r4, #26
 800865e:	e7f4      	b.n	800864a <_printf_float+0x40e>
 8008660:	2301      	movs	r3, #1
 8008662:	4642      	mov	r2, r8
 8008664:	e7e1      	b.n	800862a <_printf_float+0x3ee>
 8008666:	2301      	movs	r3, #1
 8008668:	464a      	mov	r2, r9
 800866a:	4631      	mov	r1, r6
 800866c:	4628      	mov	r0, r5
 800866e:	47b8      	blx	r7
 8008670:	3001      	adds	r0, #1
 8008672:	f43f ae3e 	beq.w	80082f2 <_printf_float+0xb6>
 8008676:	f108 0801 	add.w	r8, r8, #1
 800867a:	68e3      	ldr	r3, [r4, #12]
 800867c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800867e:	1a5b      	subs	r3, r3, r1
 8008680:	4543      	cmp	r3, r8
 8008682:	dcf0      	bgt.n	8008666 <_printf_float+0x42a>
 8008684:	e6fc      	b.n	8008480 <_printf_float+0x244>
 8008686:	f04f 0800 	mov.w	r8, #0
 800868a:	f104 0919 	add.w	r9, r4, #25
 800868e:	e7f4      	b.n	800867a <_printf_float+0x43e>

08008690 <_printf_common>:
 8008690:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008694:	4616      	mov	r6, r2
 8008696:	4698      	mov	r8, r3
 8008698:	688a      	ldr	r2, [r1, #8]
 800869a:	690b      	ldr	r3, [r1, #16]
 800869c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80086a0:	4293      	cmp	r3, r2
 80086a2:	bfb8      	it	lt
 80086a4:	4613      	movlt	r3, r2
 80086a6:	6033      	str	r3, [r6, #0]
 80086a8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80086ac:	4607      	mov	r7, r0
 80086ae:	460c      	mov	r4, r1
 80086b0:	b10a      	cbz	r2, 80086b6 <_printf_common+0x26>
 80086b2:	3301      	adds	r3, #1
 80086b4:	6033      	str	r3, [r6, #0]
 80086b6:	6823      	ldr	r3, [r4, #0]
 80086b8:	0699      	lsls	r1, r3, #26
 80086ba:	bf42      	ittt	mi
 80086bc:	6833      	ldrmi	r3, [r6, #0]
 80086be:	3302      	addmi	r3, #2
 80086c0:	6033      	strmi	r3, [r6, #0]
 80086c2:	6825      	ldr	r5, [r4, #0]
 80086c4:	f015 0506 	ands.w	r5, r5, #6
 80086c8:	d106      	bne.n	80086d8 <_printf_common+0x48>
 80086ca:	f104 0a19 	add.w	sl, r4, #25
 80086ce:	68e3      	ldr	r3, [r4, #12]
 80086d0:	6832      	ldr	r2, [r6, #0]
 80086d2:	1a9b      	subs	r3, r3, r2
 80086d4:	42ab      	cmp	r3, r5
 80086d6:	dc26      	bgt.n	8008726 <_printf_common+0x96>
 80086d8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80086dc:	6822      	ldr	r2, [r4, #0]
 80086de:	3b00      	subs	r3, #0
 80086e0:	bf18      	it	ne
 80086e2:	2301      	movne	r3, #1
 80086e4:	0692      	lsls	r2, r2, #26
 80086e6:	d42b      	bmi.n	8008740 <_printf_common+0xb0>
 80086e8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80086ec:	4641      	mov	r1, r8
 80086ee:	4638      	mov	r0, r7
 80086f0:	47c8      	blx	r9
 80086f2:	3001      	adds	r0, #1
 80086f4:	d01e      	beq.n	8008734 <_printf_common+0xa4>
 80086f6:	6823      	ldr	r3, [r4, #0]
 80086f8:	6922      	ldr	r2, [r4, #16]
 80086fa:	f003 0306 	and.w	r3, r3, #6
 80086fe:	2b04      	cmp	r3, #4
 8008700:	bf02      	ittt	eq
 8008702:	68e5      	ldreq	r5, [r4, #12]
 8008704:	6833      	ldreq	r3, [r6, #0]
 8008706:	1aed      	subeq	r5, r5, r3
 8008708:	68a3      	ldr	r3, [r4, #8]
 800870a:	bf0c      	ite	eq
 800870c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008710:	2500      	movne	r5, #0
 8008712:	4293      	cmp	r3, r2
 8008714:	bfc4      	itt	gt
 8008716:	1a9b      	subgt	r3, r3, r2
 8008718:	18ed      	addgt	r5, r5, r3
 800871a:	2600      	movs	r6, #0
 800871c:	341a      	adds	r4, #26
 800871e:	42b5      	cmp	r5, r6
 8008720:	d11a      	bne.n	8008758 <_printf_common+0xc8>
 8008722:	2000      	movs	r0, #0
 8008724:	e008      	b.n	8008738 <_printf_common+0xa8>
 8008726:	2301      	movs	r3, #1
 8008728:	4652      	mov	r2, sl
 800872a:	4641      	mov	r1, r8
 800872c:	4638      	mov	r0, r7
 800872e:	47c8      	blx	r9
 8008730:	3001      	adds	r0, #1
 8008732:	d103      	bne.n	800873c <_printf_common+0xac>
 8008734:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008738:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800873c:	3501      	adds	r5, #1
 800873e:	e7c6      	b.n	80086ce <_printf_common+0x3e>
 8008740:	18e1      	adds	r1, r4, r3
 8008742:	1c5a      	adds	r2, r3, #1
 8008744:	2030      	movs	r0, #48	@ 0x30
 8008746:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800874a:	4422      	add	r2, r4
 800874c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008750:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008754:	3302      	adds	r3, #2
 8008756:	e7c7      	b.n	80086e8 <_printf_common+0x58>
 8008758:	2301      	movs	r3, #1
 800875a:	4622      	mov	r2, r4
 800875c:	4641      	mov	r1, r8
 800875e:	4638      	mov	r0, r7
 8008760:	47c8      	blx	r9
 8008762:	3001      	adds	r0, #1
 8008764:	d0e6      	beq.n	8008734 <_printf_common+0xa4>
 8008766:	3601      	adds	r6, #1
 8008768:	e7d9      	b.n	800871e <_printf_common+0x8e>
	...

0800876c <_printf_i>:
 800876c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008770:	7e0f      	ldrb	r7, [r1, #24]
 8008772:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008774:	2f78      	cmp	r7, #120	@ 0x78
 8008776:	4691      	mov	r9, r2
 8008778:	4680      	mov	r8, r0
 800877a:	460c      	mov	r4, r1
 800877c:	469a      	mov	sl, r3
 800877e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008782:	d807      	bhi.n	8008794 <_printf_i+0x28>
 8008784:	2f62      	cmp	r7, #98	@ 0x62
 8008786:	d80a      	bhi.n	800879e <_printf_i+0x32>
 8008788:	2f00      	cmp	r7, #0
 800878a:	f000 80d2 	beq.w	8008932 <_printf_i+0x1c6>
 800878e:	2f58      	cmp	r7, #88	@ 0x58
 8008790:	f000 80b9 	beq.w	8008906 <_printf_i+0x19a>
 8008794:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008798:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800879c:	e03a      	b.n	8008814 <_printf_i+0xa8>
 800879e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80087a2:	2b15      	cmp	r3, #21
 80087a4:	d8f6      	bhi.n	8008794 <_printf_i+0x28>
 80087a6:	a101      	add	r1, pc, #4	@ (adr r1, 80087ac <_printf_i+0x40>)
 80087a8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80087ac:	08008805 	.word	0x08008805
 80087b0:	08008819 	.word	0x08008819
 80087b4:	08008795 	.word	0x08008795
 80087b8:	08008795 	.word	0x08008795
 80087bc:	08008795 	.word	0x08008795
 80087c0:	08008795 	.word	0x08008795
 80087c4:	08008819 	.word	0x08008819
 80087c8:	08008795 	.word	0x08008795
 80087cc:	08008795 	.word	0x08008795
 80087d0:	08008795 	.word	0x08008795
 80087d4:	08008795 	.word	0x08008795
 80087d8:	08008919 	.word	0x08008919
 80087dc:	08008843 	.word	0x08008843
 80087e0:	080088d3 	.word	0x080088d3
 80087e4:	08008795 	.word	0x08008795
 80087e8:	08008795 	.word	0x08008795
 80087ec:	0800893b 	.word	0x0800893b
 80087f0:	08008795 	.word	0x08008795
 80087f4:	08008843 	.word	0x08008843
 80087f8:	08008795 	.word	0x08008795
 80087fc:	08008795 	.word	0x08008795
 8008800:	080088db 	.word	0x080088db
 8008804:	6833      	ldr	r3, [r6, #0]
 8008806:	1d1a      	adds	r2, r3, #4
 8008808:	681b      	ldr	r3, [r3, #0]
 800880a:	6032      	str	r2, [r6, #0]
 800880c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008810:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008814:	2301      	movs	r3, #1
 8008816:	e09d      	b.n	8008954 <_printf_i+0x1e8>
 8008818:	6833      	ldr	r3, [r6, #0]
 800881a:	6820      	ldr	r0, [r4, #0]
 800881c:	1d19      	adds	r1, r3, #4
 800881e:	6031      	str	r1, [r6, #0]
 8008820:	0606      	lsls	r6, r0, #24
 8008822:	d501      	bpl.n	8008828 <_printf_i+0xbc>
 8008824:	681d      	ldr	r5, [r3, #0]
 8008826:	e003      	b.n	8008830 <_printf_i+0xc4>
 8008828:	0645      	lsls	r5, r0, #25
 800882a:	d5fb      	bpl.n	8008824 <_printf_i+0xb8>
 800882c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008830:	2d00      	cmp	r5, #0
 8008832:	da03      	bge.n	800883c <_printf_i+0xd0>
 8008834:	232d      	movs	r3, #45	@ 0x2d
 8008836:	426d      	negs	r5, r5
 8008838:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800883c:	4859      	ldr	r0, [pc, #356]	@ (80089a4 <_printf_i+0x238>)
 800883e:	230a      	movs	r3, #10
 8008840:	e011      	b.n	8008866 <_printf_i+0xfa>
 8008842:	6821      	ldr	r1, [r4, #0]
 8008844:	6833      	ldr	r3, [r6, #0]
 8008846:	0608      	lsls	r0, r1, #24
 8008848:	f853 5b04 	ldr.w	r5, [r3], #4
 800884c:	d402      	bmi.n	8008854 <_printf_i+0xe8>
 800884e:	0649      	lsls	r1, r1, #25
 8008850:	bf48      	it	mi
 8008852:	b2ad      	uxthmi	r5, r5
 8008854:	2f6f      	cmp	r7, #111	@ 0x6f
 8008856:	4853      	ldr	r0, [pc, #332]	@ (80089a4 <_printf_i+0x238>)
 8008858:	6033      	str	r3, [r6, #0]
 800885a:	bf14      	ite	ne
 800885c:	230a      	movne	r3, #10
 800885e:	2308      	moveq	r3, #8
 8008860:	2100      	movs	r1, #0
 8008862:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008866:	6866      	ldr	r6, [r4, #4]
 8008868:	60a6      	str	r6, [r4, #8]
 800886a:	2e00      	cmp	r6, #0
 800886c:	bfa2      	ittt	ge
 800886e:	6821      	ldrge	r1, [r4, #0]
 8008870:	f021 0104 	bicge.w	r1, r1, #4
 8008874:	6021      	strge	r1, [r4, #0]
 8008876:	b90d      	cbnz	r5, 800887c <_printf_i+0x110>
 8008878:	2e00      	cmp	r6, #0
 800887a:	d04b      	beq.n	8008914 <_printf_i+0x1a8>
 800887c:	4616      	mov	r6, r2
 800887e:	fbb5 f1f3 	udiv	r1, r5, r3
 8008882:	fb03 5711 	mls	r7, r3, r1, r5
 8008886:	5dc7      	ldrb	r7, [r0, r7]
 8008888:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800888c:	462f      	mov	r7, r5
 800888e:	42bb      	cmp	r3, r7
 8008890:	460d      	mov	r5, r1
 8008892:	d9f4      	bls.n	800887e <_printf_i+0x112>
 8008894:	2b08      	cmp	r3, #8
 8008896:	d10b      	bne.n	80088b0 <_printf_i+0x144>
 8008898:	6823      	ldr	r3, [r4, #0]
 800889a:	07df      	lsls	r7, r3, #31
 800889c:	d508      	bpl.n	80088b0 <_printf_i+0x144>
 800889e:	6923      	ldr	r3, [r4, #16]
 80088a0:	6861      	ldr	r1, [r4, #4]
 80088a2:	4299      	cmp	r1, r3
 80088a4:	bfde      	ittt	le
 80088a6:	2330      	movle	r3, #48	@ 0x30
 80088a8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80088ac:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 80088b0:	1b92      	subs	r2, r2, r6
 80088b2:	6122      	str	r2, [r4, #16]
 80088b4:	f8cd a000 	str.w	sl, [sp]
 80088b8:	464b      	mov	r3, r9
 80088ba:	aa03      	add	r2, sp, #12
 80088bc:	4621      	mov	r1, r4
 80088be:	4640      	mov	r0, r8
 80088c0:	f7ff fee6 	bl	8008690 <_printf_common>
 80088c4:	3001      	adds	r0, #1
 80088c6:	d14a      	bne.n	800895e <_printf_i+0x1f2>
 80088c8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80088cc:	b004      	add	sp, #16
 80088ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80088d2:	6823      	ldr	r3, [r4, #0]
 80088d4:	f043 0320 	orr.w	r3, r3, #32
 80088d8:	6023      	str	r3, [r4, #0]
 80088da:	4833      	ldr	r0, [pc, #204]	@ (80089a8 <_printf_i+0x23c>)
 80088dc:	2778      	movs	r7, #120	@ 0x78
 80088de:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80088e2:	6823      	ldr	r3, [r4, #0]
 80088e4:	6831      	ldr	r1, [r6, #0]
 80088e6:	061f      	lsls	r7, r3, #24
 80088e8:	f851 5b04 	ldr.w	r5, [r1], #4
 80088ec:	d402      	bmi.n	80088f4 <_printf_i+0x188>
 80088ee:	065f      	lsls	r7, r3, #25
 80088f0:	bf48      	it	mi
 80088f2:	b2ad      	uxthmi	r5, r5
 80088f4:	6031      	str	r1, [r6, #0]
 80088f6:	07d9      	lsls	r1, r3, #31
 80088f8:	bf44      	itt	mi
 80088fa:	f043 0320 	orrmi.w	r3, r3, #32
 80088fe:	6023      	strmi	r3, [r4, #0]
 8008900:	b11d      	cbz	r5, 800890a <_printf_i+0x19e>
 8008902:	2310      	movs	r3, #16
 8008904:	e7ac      	b.n	8008860 <_printf_i+0xf4>
 8008906:	4827      	ldr	r0, [pc, #156]	@ (80089a4 <_printf_i+0x238>)
 8008908:	e7e9      	b.n	80088de <_printf_i+0x172>
 800890a:	6823      	ldr	r3, [r4, #0]
 800890c:	f023 0320 	bic.w	r3, r3, #32
 8008910:	6023      	str	r3, [r4, #0]
 8008912:	e7f6      	b.n	8008902 <_printf_i+0x196>
 8008914:	4616      	mov	r6, r2
 8008916:	e7bd      	b.n	8008894 <_printf_i+0x128>
 8008918:	6833      	ldr	r3, [r6, #0]
 800891a:	6825      	ldr	r5, [r4, #0]
 800891c:	6961      	ldr	r1, [r4, #20]
 800891e:	1d18      	adds	r0, r3, #4
 8008920:	6030      	str	r0, [r6, #0]
 8008922:	062e      	lsls	r6, r5, #24
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	d501      	bpl.n	800892c <_printf_i+0x1c0>
 8008928:	6019      	str	r1, [r3, #0]
 800892a:	e002      	b.n	8008932 <_printf_i+0x1c6>
 800892c:	0668      	lsls	r0, r5, #25
 800892e:	d5fb      	bpl.n	8008928 <_printf_i+0x1bc>
 8008930:	8019      	strh	r1, [r3, #0]
 8008932:	2300      	movs	r3, #0
 8008934:	6123      	str	r3, [r4, #16]
 8008936:	4616      	mov	r6, r2
 8008938:	e7bc      	b.n	80088b4 <_printf_i+0x148>
 800893a:	6833      	ldr	r3, [r6, #0]
 800893c:	1d1a      	adds	r2, r3, #4
 800893e:	6032      	str	r2, [r6, #0]
 8008940:	681e      	ldr	r6, [r3, #0]
 8008942:	6862      	ldr	r2, [r4, #4]
 8008944:	2100      	movs	r1, #0
 8008946:	4630      	mov	r0, r6
 8008948:	f7f7 fc42 	bl	80001d0 <memchr>
 800894c:	b108      	cbz	r0, 8008952 <_printf_i+0x1e6>
 800894e:	1b80      	subs	r0, r0, r6
 8008950:	6060      	str	r0, [r4, #4]
 8008952:	6863      	ldr	r3, [r4, #4]
 8008954:	6123      	str	r3, [r4, #16]
 8008956:	2300      	movs	r3, #0
 8008958:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800895c:	e7aa      	b.n	80088b4 <_printf_i+0x148>
 800895e:	6923      	ldr	r3, [r4, #16]
 8008960:	4632      	mov	r2, r6
 8008962:	4649      	mov	r1, r9
 8008964:	4640      	mov	r0, r8
 8008966:	47d0      	blx	sl
 8008968:	3001      	adds	r0, #1
 800896a:	d0ad      	beq.n	80088c8 <_printf_i+0x15c>
 800896c:	6823      	ldr	r3, [r4, #0]
 800896e:	079b      	lsls	r3, r3, #30
 8008970:	d413      	bmi.n	800899a <_printf_i+0x22e>
 8008972:	68e0      	ldr	r0, [r4, #12]
 8008974:	9b03      	ldr	r3, [sp, #12]
 8008976:	4298      	cmp	r0, r3
 8008978:	bfb8      	it	lt
 800897a:	4618      	movlt	r0, r3
 800897c:	e7a6      	b.n	80088cc <_printf_i+0x160>
 800897e:	2301      	movs	r3, #1
 8008980:	4632      	mov	r2, r6
 8008982:	4649      	mov	r1, r9
 8008984:	4640      	mov	r0, r8
 8008986:	47d0      	blx	sl
 8008988:	3001      	adds	r0, #1
 800898a:	d09d      	beq.n	80088c8 <_printf_i+0x15c>
 800898c:	3501      	adds	r5, #1
 800898e:	68e3      	ldr	r3, [r4, #12]
 8008990:	9903      	ldr	r1, [sp, #12]
 8008992:	1a5b      	subs	r3, r3, r1
 8008994:	42ab      	cmp	r3, r5
 8008996:	dcf2      	bgt.n	800897e <_printf_i+0x212>
 8008998:	e7eb      	b.n	8008972 <_printf_i+0x206>
 800899a:	2500      	movs	r5, #0
 800899c:	f104 0619 	add.w	r6, r4, #25
 80089a0:	e7f5      	b.n	800898e <_printf_i+0x222>
 80089a2:	bf00      	nop
 80089a4:	0800cfae 	.word	0x0800cfae
 80089a8:	0800cfbf 	.word	0x0800cfbf

080089ac <std>:
 80089ac:	2300      	movs	r3, #0
 80089ae:	b510      	push	{r4, lr}
 80089b0:	4604      	mov	r4, r0
 80089b2:	e9c0 3300 	strd	r3, r3, [r0]
 80089b6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80089ba:	6083      	str	r3, [r0, #8]
 80089bc:	8181      	strh	r1, [r0, #12]
 80089be:	6643      	str	r3, [r0, #100]	@ 0x64
 80089c0:	81c2      	strh	r2, [r0, #14]
 80089c2:	6183      	str	r3, [r0, #24]
 80089c4:	4619      	mov	r1, r3
 80089c6:	2208      	movs	r2, #8
 80089c8:	305c      	adds	r0, #92	@ 0x5c
 80089ca:	f000 fa2d 	bl	8008e28 <memset>
 80089ce:	4b0d      	ldr	r3, [pc, #52]	@ (8008a04 <std+0x58>)
 80089d0:	6263      	str	r3, [r4, #36]	@ 0x24
 80089d2:	4b0d      	ldr	r3, [pc, #52]	@ (8008a08 <std+0x5c>)
 80089d4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80089d6:	4b0d      	ldr	r3, [pc, #52]	@ (8008a0c <std+0x60>)
 80089d8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80089da:	4b0d      	ldr	r3, [pc, #52]	@ (8008a10 <std+0x64>)
 80089dc:	6323      	str	r3, [r4, #48]	@ 0x30
 80089de:	4b0d      	ldr	r3, [pc, #52]	@ (8008a14 <std+0x68>)
 80089e0:	6224      	str	r4, [r4, #32]
 80089e2:	429c      	cmp	r4, r3
 80089e4:	d006      	beq.n	80089f4 <std+0x48>
 80089e6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80089ea:	4294      	cmp	r4, r2
 80089ec:	d002      	beq.n	80089f4 <std+0x48>
 80089ee:	33d0      	adds	r3, #208	@ 0xd0
 80089f0:	429c      	cmp	r4, r3
 80089f2:	d105      	bne.n	8008a00 <std+0x54>
 80089f4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80089f8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80089fc:	f000 ba90 	b.w	8008f20 <__retarget_lock_init_recursive>
 8008a00:	bd10      	pop	{r4, pc}
 8008a02:	bf00      	nop
 8008a04:	08008c79 	.word	0x08008c79
 8008a08:	08008c9b 	.word	0x08008c9b
 8008a0c:	08008cd3 	.word	0x08008cd3
 8008a10:	08008cf7 	.word	0x08008cf7
 8008a14:	2000071c 	.word	0x2000071c

08008a18 <stdio_exit_handler>:
 8008a18:	4a02      	ldr	r2, [pc, #8]	@ (8008a24 <stdio_exit_handler+0xc>)
 8008a1a:	4903      	ldr	r1, [pc, #12]	@ (8008a28 <stdio_exit_handler+0x10>)
 8008a1c:	4803      	ldr	r0, [pc, #12]	@ (8008a2c <stdio_exit_handler+0x14>)
 8008a1e:	f000 b869 	b.w	8008af4 <_fwalk_sglue>
 8008a22:	bf00      	nop
 8008a24:	200000b0 	.word	0x200000b0
 8008a28:	0800ab01 	.word	0x0800ab01
 8008a2c:	200000c0 	.word	0x200000c0

08008a30 <cleanup_stdio>:
 8008a30:	6841      	ldr	r1, [r0, #4]
 8008a32:	4b0c      	ldr	r3, [pc, #48]	@ (8008a64 <cleanup_stdio+0x34>)
 8008a34:	4299      	cmp	r1, r3
 8008a36:	b510      	push	{r4, lr}
 8008a38:	4604      	mov	r4, r0
 8008a3a:	d001      	beq.n	8008a40 <cleanup_stdio+0x10>
 8008a3c:	f002 f860 	bl	800ab00 <_fflush_r>
 8008a40:	68a1      	ldr	r1, [r4, #8]
 8008a42:	4b09      	ldr	r3, [pc, #36]	@ (8008a68 <cleanup_stdio+0x38>)
 8008a44:	4299      	cmp	r1, r3
 8008a46:	d002      	beq.n	8008a4e <cleanup_stdio+0x1e>
 8008a48:	4620      	mov	r0, r4
 8008a4a:	f002 f859 	bl	800ab00 <_fflush_r>
 8008a4e:	68e1      	ldr	r1, [r4, #12]
 8008a50:	4b06      	ldr	r3, [pc, #24]	@ (8008a6c <cleanup_stdio+0x3c>)
 8008a52:	4299      	cmp	r1, r3
 8008a54:	d004      	beq.n	8008a60 <cleanup_stdio+0x30>
 8008a56:	4620      	mov	r0, r4
 8008a58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008a5c:	f002 b850 	b.w	800ab00 <_fflush_r>
 8008a60:	bd10      	pop	{r4, pc}
 8008a62:	bf00      	nop
 8008a64:	2000071c 	.word	0x2000071c
 8008a68:	20000784 	.word	0x20000784
 8008a6c:	200007ec 	.word	0x200007ec

08008a70 <global_stdio_init.part.0>:
 8008a70:	b510      	push	{r4, lr}
 8008a72:	4b0b      	ldr	r3, [pc, #44]	@ (8008aa0 <global_stdio_init.part.0+0x30>)
 8008a74:	4c0b      	ldr	r4, [pc, #44]	@ (8008aa4 <global_stdio_init.part.0+0x34>)
 8008a76:	4a0c      	ldr	r2, [pc, #48]	@ (8008aa8 <global_stdio_init.part.0+0x38>)
 8008a78:	601a      	str	r2, [r3, #0]
 8008a7a:	4620      	mov	r0, r4
 8008a7c:	2200      	movs	r2, #0
 8008a7e:	2104      	movs	r1, #4
 8008a80:	f7ff ff94 	bl	80089ac <std>
 8008a84:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008a88:	2201      	movs	r2, #1
 8008a8a:	2109      	movs	r1, #9
 8008a8c:	f7ff ff8e 	bl	80089ac <std>
 8008a90:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008a94:	2202      	movs	r2, #2
 8008a96:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008a9a:	2112      	movs	r1, #18
 8008a9c:	f7ff bf86 	b.w	80089ac <std>
 8008aa0:	20000854 	.word	0x20000854
 8008aa4:	2000071c 	.word	0x2000071c
 8008aa8:	08008a19 	.word	0x08008a19

08008aac <__sfp_lock_acquire>:
 8008aac:	4801      	ldr	r0, [pc, #4]	@ (8008ab4 <__sfp_lock_acquire+0x8>)
 8008aae:	f000 ba38 	b.w	8008f22 <__retarget_lock_acquire_recursive>
 8008ab2:	bf00      	nop
 8008ab4:	2000085d 	.word	0x2000085d

08008ab8 <__sfp_lock_release>:
 8008ab8:	4801      	ldr	r0, [pc, #4]	@ (8008ac0 <__sfp_lock_release+0x8>)
 8008aba:	f000 ba33 	b.w	8008f24 <__retarget_lock_release_recursive>
 8008abe:	bf00      	nop
 8008ac0:	2000085d 	.word	0x2000085d

08008ac4 <__sinit>:
 8008ac4:	b510      	push	{r4, lr}
 8008ac6:	4604      	mov	r4, r0
 8008ac8:	f7ff fff0 	bl	8008aac <__sfp_lock_acquire>
 8008acc:	6a23      	ldr	r3, [r4, #32]
 8008ace:	b11b      	cbz	r3, 8008ad8 <__sinit+0x14>
 8008ad0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008ad4:	f7ff bff0 	b.w	8008ab8 <__sfp_lock_release>
 8008ad8:	4b04      	ldr	r3, [pc, #16]	@ (8008aec <__sinit+0x28>)
 8008ada:	6223      	str	r3, [r4, #32]
 8008adc:	4b04      	ldr	r3, [pc, #16]	@ (8008af0 <__sinit+0x2c>)
 8008ade:	681b      	ldr	r3, [r3, #0]
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	d1f5      	bne.n	8008ad0 <__sinit+0xc>
 8008ae4:	f7ff ffc4 	bl	8008a70 <global_stdio_init.part.0>
 8008ae8:	e7f2      	b.n	8008ad0 <__sinit+0xc>
 8008aea:	bf00      	nop
 8008aec:	08008a31 	.word	0x08008a31
 8008af0:	20000854 	.word	0x20000854

08008af4 <_fwalk_sglue>:
 8008af4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008af8:	4607      	mov	r7, r0
 8008afa:	4688      	mov	r8, r1
 8008afc:	4614      	mov	r4, r2
 8008afe:	2600      	movs	r6, #0
 8008b00:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008b04:	f1b9 0901 	subs.w	r9, r9, #1
 8008b08:	d505      	bpl.n	8008b16 <_fwalk_sglue+0x22>
 8008b0a:	6824      	ldr	r4, [r4, #0]
 8008b0c:	2c00      	cmp	r4, #0
 8008b0e:	d1f7      	bne.n	8008b00 <_fwalk_sglue+0xc>
 8008b10:	4630      	mov	r0, r6
 8008b12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008b16:	89ab      	ldrh	r3, [r5, #12]
 8008b18:	2b01      	cmp	r3, #1
 8008b1a:	d907      	bls.n	8008b2c <_fwalk_sglue+0x38>
 8008b1c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8008b20:	3301      	adds	r3, #1
 8008b22:	d003      	beq.n	8008b2c <_fwalk_sglue+0x38>
 8008b24:	4629      	mov	r1, r5
 8008b26:	4638      	mov	r0, r7
 8008b28:	47c0      	blx	r8
 8008b2a:	4306      	orrs	r6, r0
 8008b2c:	3568      	adds	r5, #104	@ 0x68
 8008b2e:	e7e9      	b.n	8008b04 <_fwalk_sglue+0x10>

08008b30 <iprintf>:
 8008b30:	b40f      	push	{r0, r1, r2, r3}
 8008b32:	b507      	push	{r0, r1, r2, lr}
 8008b34:	4906      	ldr	r1, [pc, #24]	@ (8008b50 <iprintf+0x20>)
 8008b36:	ab04      	add	r3, sp, #16
 8008b38:	6808      	ldr	r0, [r1, #0]
 8008b3a:	f853 2b04 	ldr.w	r2, [r3], #4
 8008b3e:	6881      	ldr	r1, [r0, #8]
 8008b40:	9301      	str	r3, [sp, #4]
 8008b42:	f001 fe41 	bl	800a7c8 <_vfiprintf_r>
 8008b46:	b003      	add	sp, #12
 8008b48:	f85d eb04 	ldr.w	lr, [sp], #4
 8008b4c:	b004      	add	sp, #16
 8008b4e:	4770      	bx	lr
 8008b50:	200000bc 	.word	0x200000bc

08008b54 <_puts_r>:
 8008b54:	6a03      	ldr	r3, [r0, #32]
 8008b56:	b570      	push	{r4, r5, r6, lr}
 8008b58:	6884      	ldr	r4, [r0, #8]
 8008b5a:	4605      	mov	r5, r0
 8008b5c:	460e      	mov	r6, r1
 8008b5e:	b90b      	cbnz	r3, 8008b64 <_puts_r+0x10>
 8008b60:	f7ff ffb0 	bl	8008ac4 <__sinit>
 8008b64:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008b66:	07db      	lsls	r3, r3, #31
 8008b68:	d405      	bmi.n	8008b76 <_puts_r+0x22>
 8008b6a:	89a3      	ldrh	r3, [r4, #12]
 8008b6c:	0598      	lsls	r0, r3, #22
 8008b6e:	d402      	bmi.n	8008b76 <_puts_r+0x22>
 8008b70:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008b72:	f000 f9d6 	bl	8008f22 <__retarget_lock_acquire_recursive>
 8008b76:	89a3      	ldrh	r3, [r4, #12]
 8008b78:	0719      	lsls	r1, r3, #28
 8008b7a:	d502      	bpl.n	8008b82 <_puts_r+0x2e>
 8008b7c:	6923      	ldr	r3, [r4, #16]
 8008b7e:	2b00      	cmp	r3, #0
 8008b80:	d135      	bne.n	8008bee <_puts_r+0x9a>
 8008b82:	4621      	mov	r1, r4
 8008b84:	4628      	mov	r0, r5
 8008b86:	f000 f8f9 	bl	8008d7c <__swsetup_r>
 8008b8a:	b380      	cbz	r0, 8008bee <_puts_r+0x9a>
 8008b8c:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8008b90:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008b92:	07da      	lsls	r2, r3, #31
 8008b94:	d405      	bmi.n	8008ba2 <_puts_r+0x4e>
 8008b96:	89a3      	ldrh	r3, [r4, #12]
 8008b98:	059b      	lsls	r3, r3, #22
 8008b9a:	d402      	bmi.n	8008ba2 <_puts_r+0x4e>
 8008b9c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008b9e:	f000 f9c1 	bl	8008f24 <__retarget_lock_release_recursive>
 8008ba2:	4628      	mov	r0, r5
 8008ba4:	bd70      	pop	{r4, r5, r6, pc}
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	da04      	bge.n	8008bb4 <_puts_r+0x60>
 8008baa:	69a2      	ldr	r2, [r4, #24]
 8008bac:	429a      	cmp	r2, r3
 8008bae:	dc17      	bgt.n	8008be0 <_puts_r+0x8c>
 8008bb0:	290a      	cmp	r1, #10
 8008bb2:	d015      	beq.n	8008be0 <_puts_r+0x8c>
 8008bb4:	6823      	ldr	r3, [r4, #0]
 8008bb6:	1c5a      	adds	r2, r3, #1
 8008bb8:	6022      	str	r2, [r4, #0]
 8008bba:	7019      	strb	r1, [r3, #0]
 8008bbc:	68a3      	ldr	r3, [r4, #8]
 8008bbe:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8008bc2:	3b01      	subs	r3, #1
 8008bc4:	60a3      	str	r3, [r4, #8]
 8008bc6:	2900      	cmp	r1, #0
 8008bc8:	d1ed      	bne.n	8008ba6 <_puts_r+0x52>
 8008bca:	2b00      	cmp	r3, #0
 8008bcc:	da11      	bge.n	8008bf2 <_puts_r+0x9e>
 8008bce:	4622      	mov	r2, r4
 8008bd0:	210a      	movs	r1, #10
 8008bd2:	4628      	mov	r0, r5
 8008bd4:	f000 f893 	bl	8008cfe <__swbuf_r>
 8008bd8:	3001      	adds	r0, #1
 8008bda:	d0d7      	beq.n	8008b8c <_puts_r+0x38>
 8008bdc:	250a      	movs	r5, #10
 8008bde:	e7d7      	b.n	8008b90 <_puts_r+0x3c>
 8008be0:	4622      	mov	r2, r4
 8008be2:	4628      	mov	r0, r5
 8008be4:	f000 f88b 	bl	8008cfe <__swbuf_r>
 8008be8:	3001      	adds	r0, #1
 8008bea:	d1e7      	bne.n	8008bbc <_puts_r+0x68>
 8008bec:	e7ce      	b.n	8008b8c <_puts_r+0x38>
 8008bee:	3e01      	subs	r6, #1
 8008bf0:	e7e4      	b.n	8008bbc <_puts_r+0x68>
 8008bf2:	6823      	ldr	r3, [r4, #0]
 8008bf4:	1c5a      	adds	r2, r3, #1
 8008bf6:	6022      	str	r2, [r4, #0]
 8008bf8:	220a      	movs	r2, #10
 8008bfa:	701a      	strb	r2, [r3, #0]
 8008bfc:	e7ee      	b.n	8008bdc <_puts_r+0x88>
	...

08008c00 <puts>:
 8008c00:	4b02      	ldr	r3, [pc, #8]	@ (8008c0c <puts+0xc>)
 8008c02:	4601      	mov	r1, r0
 8008c04:	6818      	ldr	r0, [r3, #0]
 8008c06:	f7ff bfa5 	b.w	8008b54 <_puts_r>
 8008c0a:	bf00      	nop
 8008c0c:	200000bc 	.word	0x200000bc

08008c10 <sniprintf>:
 8008c10:	b40c      	push	{r2, r3}
 8008c12:	b530      	push	{r4, r5, lr}
 8008c14:	4b17      	ldr	r3, [pc, #92]	@ (8008c74 <sniprintf+0x64>)
 8008c16:	1e0c      	subs	r4, r1, #0
 8008c18:	681d      	ldr	r5, [r3, #0]
 8008c1a:	b09d      	sub	sp, #116	@ 0x74
 8008c1c:	da08      	bge.n	8008c30 <sniprintf+0x20>
 8008c1e:	238b      	movs	r3, #139	@ 0x8b
 8008c20:	602b      	str	r3, [r5, #0]
 8008c22:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008c26:	b01d      	add	sp, #116	@ 0x74
 8008c28:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008c2c:	b002      	add	sp, #8
 8008c2e:	4770      	bx	lr
 8008c30:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8008c34:	f8ad 3014 	strh.w	r3, [sp, #20]
 8008c38:	bf14      	ite	ne
 8008c3a:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 8008c3e:	4623      	moveq	r3, r4
 8008c40:	9304      	str	r3, [sp, #16]
 8008c42:	9307      	str	r3, [sp, #28]
 8008c44:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8008c48:	9002      	str	r0, [sp, #8]
 8008c4a:	9006      	str	r0, [sp, #24]
 8008c4c:	f8ad 3016 	strh.w	r3, [sp, #22]
 8008c50:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8008c52:	ab21      	add	r3, sp, #132	@ 0x84
 8008c54:	a902      	add	r1, sp, #8
 8008c56:	4628      	mov	r0, r5
 8008c58:	9301      	str	r3, [sp, #4]
 8008c5a:	f001 fc8f 	bl	800a57c <_svfiprintf_r>
 8008c5e:	1c43      	adds	r3, r0, #1
 8008c60:	bfbc      	itt	lt
 8008c62:	238b      	movlt	r3, #139	@ 0x8b
 8008c64:	602b      	strlt	r3, [r5, #0]
 8008c66:	2c00      	cmp	r4, #0
 8008c68:	d0dd      	beq.n	8008c26 <sniprintf+0x16>
 8008c6a:	9b02      	ldr	r3, [sp, #8]
 8008c6c:	2200      	movs	r2, #0
 8008c6e:	701a      	strb	r2, [r3, #0]
 8008c70:	e7d9      	b.n	8008c26 <sniprintf+0x16>
 8008c72:	bf00      	nop
 8008c74:	200000bc 	.word	0x200000bc

08008c78 <__sread>:
 8008c78:	b510      	push	{r4, lr}
 8008c7a:	460c      	mov	r4, r1
 8008c7c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008c80:	f000 f900 	bl	8008e84 <_read_r>
 8008c84:	2800      	cmp	r0, #0
 8008c86:	bfab      	itete	ge
 8008c88:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8008c8a:	89a3      	ldrhlt	r3, [r4, #12]
 8008c8c:	181b      	addge	r3, r3, r0
 8008c8e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008c92:	bfac      	ite	ge
 8008c94:	6563      	strge	r3, [r4, #84]	@ 0x54
 8008c96:	81a3      	strhlt	r3, [r4, #12]
 8008c98:	bd10      	pop	{r4, pc}

08008c9a <__swrite>:
 8008c9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c9e:	461f      	mov	r7, r3
 8008ca0:	898b      	ldrh	r3, [r1, #12]
 8008ca2:	05db      	lsls	r3, r3, #23
 8008ca4:	4605      	mov	r5, r0
 8008ca6:	460c      	mov	r4, r1
 8008ca8:	4616      	mov	r6, r2
 8008caa:	d505      	bpl.n	8008cb8 <__swrite+0x1e>
 8008cac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008cb0:	2302      	movs	r3, #2
 8008cb2:	2200      	movs	r2, #0
 8008cb4:	f000 f8d4 	bl	8008e60 <_lseek_r>
 8008cb8:	89a3      	ldrh	r3, [r4, #12]
 8008cba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008cbe:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008cc2:	81a3      	strh	r3, [r4, #12]
 8008cc4:	4632      	mov	r2, r6
 8008cc6:	463b      	mov	r3, r7
 8008cc8:	4628      	mov	r0, r5
 8008cca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008cce:	f000 b8eb 	b.w	8008ea8 <_write_r>

08008cd2 <__sseek>:
 8008cd2:	b510      	push	{r4, lr}
 8008cd4:	460c      	mov	r4, r1
 8008cd6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008cda:	f000 f8c1 	bl	8008e60 <_lseek_r>
 8008cde:	1c43      	adds	r3, r0, #1
 8008ce0:	89a3      	ldrh	r3, [r4, #12]
 8008ce2:	bf15      	itete	ne
 8008ce4:	6560      	strne	r0, [r4, #84]	@ 0x54
 8008ce6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8008cea:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008cee:	81a3      	strheq	r3, [r4, #12]
 8008cf0:	bf18      	it	ne
 8008cf2:	81a3      	strhne	r3, [r4, #12]
 8008cf4:	bd10      	pop	{r4, pc}

08008cf6 <__sclose>:
 8008cf6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008cfa:	f000 b8a1 	b.w	8008e40 <_close_r>

08008cfe <__swbuf_r>:
 8008cfe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d00:	460e      	mov	r6, r1
 8008d02:	4614      	mov	r4, r2
 8008d04:	4605      	mov	r5, r0
 8008d06:	b118      	cbz	r0, 8008d10 <__swbuf_r+0x12>
 8008d08:	6a03      	ldr	r3, [r0, #32]
 8008d0a:	b90b      	cbnz	r3, 8008d10 <__swbuf_r+0x12>
 8008d0c:	f7ff feda 	bl	8008ac4 <__sinit>
 8008d10:	69a3      	ldr	r3, [r4, #24]
 8008d12:	60a3      	str	r3, [r4, #8]
 8008d14:	89a3      	ldrh	r3, [r4, #12]
 8008d16:	071a      	lsls	r2, r3, #28
 8008d18:	d501      	bpl.n	8008d1e <__swbuf_r+0x20>
 8008d1a:	6923      	ldr	r3, [r4, #16]
 8008d1c:	b943      	cbnz	r3, 8008d30 <__swbuf_r+0x32>
 8008d1e:	4621      	mov	r1, r4
 8008d20:	4628      	mov	r0, r5
 8008d22:	f000 f82b 	bl	8008d7c <__swsetup_r>
 8008d26:	b118      	cbz	r0, 8008d30 <__swbuf_r+0x32>
 8008d28:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8008d2c:	4638      	mov	r0, r7
 8008d2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008d30:	6823      	ldr	r3, [r4, #0]
 8008d32:	6922      	ldr	r2, [r4, #16]
 8008d34:	1a98      	subs	r0, r3, r2
 8008d36:	6963      	ldr	r3, [r4, #20]
 8008d38:	b2f6      	uxtb	r6, r6
 8008d3a:	4283      	cmp	r3, r0
 8008d3c:	4637      	mov	r7, r6
 8008d3e:	dc05      	bgt.n	8008d4c <__swbuf_r+0x4e>
 8008d40:	4621      	mov	r1, r4
 8008d42:	4628      	mov	r0, r5
 8008d44:	f001 fedc 	bl	800ab00 <_fflush_r>
 8008d48:	2800      	cmp	r0, #0
 8008d4a:	d1ed      	bne.n	8008d28 <__swbuf_r+0x2a>
 8008d4c:	68a3      	ldr	r3, [r4, #8]
 8008d4e:	3b01      	subs	r3, #1
 8008d50:	60a3      	str	r3, [r4, #8]
 8008d52:	6823      	ldr	r3, [r4, #0]
 8008d54:	1c5a      	adds	r2, r3, #1
 8008d56:	6022      	str	r2, [r4, #0]
 8008d58:	701e      	strb	r6, [r3, #0]
 8008d5a:	6962      	ldr	r2, [r4, #20]
 8008d5c:	1c43      	adds	r3, r0, #1
 8008d5e:	429a      	cmp	r2, r3
 8008d60:	d004      	beq.n	8008d6c <__swbuf_r+0x6e>
 8008d62:	89a3      	ldrh	r3, [r4, #12]
 8008d64:	07db      	lsls	r3, r3, #31
 8008d66:	d5e1      	bpl.n	8008d2c <__swbuf_r+0x2e>
 8008d68:	2e0a      	cmp	r6, #10
 8008d6a:	d1df      	bne.n	8008d2c <__swbuf_r+0x2e>
 8008d6c:	4621      	mov	r1, r4
 8008d6e:	4628      	mov	r0, r5
 8008d70:	f001 fec6 	bl	800ab00 <_fflush_r>
 8008d74:	2800      	cmp	r0, #0
 8008d76:	d0d9      	beq.n	8008d2c <__swbuf_r+0x2e>
 8008d78:	e7d6      	b.n	8008d28 <__swbuf_r+0x2a>
	...

08008d7c <__swsetup_r>:
 8008d7c:	b538      	push	{r3, r4, r5, lr}
 8008d7e:	4b29      	ldr	r3, [pc, #164]	@ (8008e24 <__swsetup_r+0xa8>)
 8008d80:	4605      	mov	r5, r0
 8008d82:	6818      	ldr	r0, [r3, #0]
 8008d84:	460c      	mov	r4, r1
 8008d86:	b118      	cbz	r0, 8008d90 <__swsetup_r+0x14>
 8008d88:	6a03      	ldr	r3, [r0, #32]
 8008d8a:	b90b      	cbnz	r3, 8008d90 <__swsetup_r+0x14>
 8008d8c:	f7ff fe9a 	bl	8008ac4 <__sinit>
 8008d90:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008d94:	0719      	lsls	r1, r3, #28
 8008d96:	d422      	bmi.n	8008dde <__swsetup_r+0x62>
 8008d98:	06da      	lsls	r2, r3, #27
 8008d9a:	d407      	bmi.n	8008dac <__swsetup_r+0x30>
 8008d9c:	2209      	movs	r2, #9
 8008d9e:	602a      	str	r2, [r5, #0]
 8008da0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008da4:	81a3      	strh	r3, [r4, #12]
 8008da6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8008daa:	e033      	b.n	8008e14 <__swsetup_r+0x98>
 8008dac:	0758      	lsls	r0, r3, #29
 8008dae:	d512      	bpl.n	8008dd6 <__swsetup_r+0x5a>
 8008db0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008db2:	b141      	cbz	r1, 8008dc6 <__swsetup_r+0x4a>
 8008db4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008db8:	4299      	cmp	r1, r3
 8008dba:	d002      	beq.n	8008dc2 <__swsetup_r+0x46>
 8008dbc:	4628      	mov	r0, r5
 8008dbe:	f000 feff 	bl	8009bc0 <_free_r>
 8008dc2:	2300      	movs	r3, #0
 8008dc4:	6363      	str	r3, [r4, #52]	@ 0x34
 8008dc6:	89a3      	ldrh	r3, [r4, #12]
 8008dc8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008dcc:	81a3      	strh	r3, [r4, #12]
 8008dce:	2300      	movs	r3, #0
 8008dd0:	6063      	str	r3, [r4, #4]
 8008dd2:	6923      	ldr	r3, [r4, #16]
 8008dd4:	6023      	str	r3, [r4, #0]
 8008dd6:	89a3      	ldrh	r3, [r4, #12]
 8008dd8:	f043 0308 	orr.w	r3, r3, #8
 8008ddc:	81a3      	strh	r3, [r4, #12]
 8008dde:	6923      	ldr	r3, [r4, #16]
 8008de0:	b94b      	cbnz	r3, 8008df6 <__swsetup_r+0x7a>
 8008de2:	89a3      	ldrh	r3, [r4, #12]
 8008de4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008de8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008dec:	d003      	beq.n	8008df6 <__swsetup_r+0x7a>
 8008dee:	4621      	mov	r1, r4
 8008df0:	4628      	mov	r0, r5
 8008df2:	f001 fed3 	bl	800ab9c <__smakebuf_r>
 8008df6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008dfa:	f013 0201 	ands.w	r2, r3, #1
 8008dfe:	d00a      	beq.n	8008e16 <__swsetup_r+0x9a>
 8008e00:	2200      	movs	r2, #0
 8008e02:	60a2      	str	r2, [r4, #8]
 8008e04:	6962      	ldr	r2, [r4, #20]
 8008e06:	4252      	negs	r2, r2
 8008e08:	61a2      	str	r2, [r4, #24]
 8008e0a:	6922      	ldr	r2, [r4, #16]
 8008e0c:	b942      	cbnz	r2, 8008e20 <__swsetup_r+0xa4>
 8008e0e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008e12:	d1c5      	bne.n	8008da0 <__swsetup_r+0x24>
 8008e14:	bd38      	pop	{r3, r4, r5, pc}
 8008e16:	0799      	lsls	r1, r3, #30
 8008e18:	bf58      	it	pl
 8008e1a:	6962      	ldrpl	r2, [r4, #20]
 8008e1c:	60a2      	str	r2, [r4, #8]
 8008e1e:	e7f4      	b.n	8008e0a <__swsetup_r+0x8e>
 8008e20:	2000      	movs	r0, #0
 8008e22:	e7f7      	b.n	8008e14 <__swsetup_r+0x98>
 8008e24:	200000bc 	.word	0x200000bc

08008e28 <memset>:
 8008e28:	4402      	add	r2, r0
 8008e2a:	4603      	mov	r3, r0
 8008e2c:	4293      	cmp	r3, r2
 8008e2e:	d100      	bne.n	8008e32 <memset+0xa>
 8008e30:	4770      	bx	lr
 8008e32:	f803 1b01 	strb.w	r1, [r3], #1
 8008e36:	e7f9      	b.n	8008e2c <memset+0x4>

08008e38 <_localeconv_r>:
 8008e38:	4800      	ldr	r0, [pc, #0]	@ (8008e3c <_localeconv_r+0x4>)
 8008e3a:	4770      	bx	lr
 8008e3c:	200001fc 	.word	0x200001fc

08008e40 <_close_r>:
 8008e40:	b538      	push	{r3, r4, r5, lr}
 8008e42:	4d06      	ldr	r5, [pc, #24]	@ (8008e5c <_close_r+0x1c>)
 8008e44:	2300      	movs	r3, #0
 8008e46:	4604      	mov	r4, r0
 8008e48:	4608      	mov	r0, r1
 8008e4a:	602b      	str	r3, [r5, #0]
 8008e4c:	f7fb fd75 	bl	800493a <_close>
 8008e50:	1c43      	adds	r3, r0, #1
 8008e52:	d102      	bne.n	8008e5a <_close_r+0x1a>
 8008e54:	682b      	ldr	r3, [r5, #0]
 8008e56:	b103      	cbz	r3, 8008e5a <_close_r+0x1a>
 8008e58:	6023      	str	r3, [r4, #0]
 8008e5a:	bd38      	pop	{r3, r4, r5, pc}
 8008e5c:	20000858 	.word	0x20000858

08008e60 <_lseek_r>:
 8008e60:	b538      	push	{r3, r4, r5, lr}
 8008e62:	4d07      	ldr	r5, [pc, #28]	@ (8008e80 <_lseek_r+0x20>)
 8008e64:	4604      	mov	r4, r0
 8008e66:	4608      	mov	r0, r1
 8008e68:	4611      	mov	r1, r2
 8008e6a:	2200      	movs	r2, #0
 8008e6c:	602a      	str	r2, [r5, #0]
 8008e6e:	461a      	mov	r2, r3
 8008e70:	f7fb fd8a 	bl	8004988 <_lseek>
 8008e74:	1c43      	adds	r3, r0, #1
 8008e76:	d102      	bne.n	8008e7e <_lseek_r+0x1e>
 8008e78:	682b      	ldr	r3, [r5, #0]
 8008e7a:	b103      	cbz	r3, 8008e7e <_lseek_r+0x1e>
 8008e7c:	6023      	str	r3, [r4, #0]
 8008e7e:	bd38      	pop	{r3, r4, r5, pc}
 8008e80:	20000858 	.word	0x20000858

08008e84 <_read_r>:
 8008e84:	b538      	push	{r3, r4, r5, lr}
 8008e86:	4d07      	ldr	r5, [pc, #28]	@ (8008ea4 <_read_r+0x20>)
 8008e88:	4604      	mov	r4, r0
 8008e8a:	4608      	mov	r0, r1
 8008e8c:	4611      	mov	r1, r2
 8008e8e:	2200      	movs	r2, #0
 8008e90:	602a      	str	r2, [r5, #0]
 8008e92:	461a      	mov	r2, r3
 8008e94:	f7fb fd18 	bl	80048c8 <_read>
 8008e98:	1c43      	adds	r3, r0, #1
 8008e9a:	d102      	bne.n	8008ea2 <_read_r+0x1e>
 8008e9c:	682b      	ldr	r3, [r5, #0]
 8008e9e:	b103      	cbz	r3, 8008ea2 <_read_r+0x1e>
 8008ea0:	6023      	str	r3, [r4, #0]
 8008ea2:	bd38      	pop	{r3, r4, r5, pc}
 8008ea4:	20000858 	.word	0x20000858

08008ea8 <_write_r>:
 8008ea8:	b538      	push	{r3, r4, r5, lr}
 8008eaa:	4d07      	ldr	r5, [pc, #28]	@ (8008ec8 <_write_r+0x20>)
 8008eac:	4604      	mov	r4, r0
 8008eae:	4608      	mov	r0, r1
 8008eb0:	4611      	mov	r1, r2
 8008eb2:	2200      	movs	r2, #0
 8008eb4:	602a      	str	r2, [r5, #0]
 8008eb6:	461a      	mov	r2, r3
 8008eb8:	f7fb fd23 	bl	8004902 <_write>
 8008ebc:	1c43      	adds	r3, r0, #1
 8008ebe:	d102      	bne.n	8008ec6 <_write_r+0x1e>
 8008ec0:	682b      	ldr	r3, [r5, #0]
 8008ec2:	b103      	cbz	r3, 8008ec6 <_write_r+0x1e>
 8008ec4:	6023      	str	r3, [r4, #0]
 8008ec6:	bd38      	pop	{r3, r4, r5, pc}
 8008ec8:	20000858 	.word	0x20000858

08008ecc <__errno>:
 8008ecc:	4b01      	ldr	r3, [pc, #4]	@ (8008ed4 <__errno+0x8>)
 8008ece:	6818      	ldr	r0, [r3, #0]
 8008ed0:	4770      	bx	lr
 8008ed2:	bf00      	nop
 8008ed4:	200000bc 	.word	0x200000bc

08008ed8 <__libc_init_array>:
 8008ed8:	b570      	push	{r4, r5, r6, lr}
 8008eda:	4d0d      	ldr	r5, [pc, #52]	@ (8008f10 <__libc_init_array+0x38>)
 8008edc:	4c0d      	ldr	r4, [pc, #52]	@ (8008f14 <__libc_init_array+0x3c>)
 8008ede:	1b64      	subs	r4, r4, r5
 8008ee0:	10a4      	asrs	r4, r4, #2
 8008ee2:	2600      	movs	r6, #0
 8008ee4:	42a6      	cmp	r6, r4
 8008ee6:	d109      	bne.n	8008efc <__libc_init_array+0x24>
 8008ee8:	4d0b      	ldr	r5, [pc, #44]	@ (8008f18 <__libc_init_array+0x40>)
 8008eea:	4c0c      	ldr	r4, [pc, #48]	@ (8008f1c <__libc_init_array+0x44>)
 8008eec:	f003 fc00 	bl	800c6f0 <_init>
 8008ef0:	1b64      	subs	r4, r4, r5
 8008ef2:	10a4      	asrs	r4, r4, #2
 8008ef4:	2600      	movs	r6, #0
 8008ef6:	42a6      	cmp	r6, r4
 8008ef8:	d105      	bne.n	8008f06 <__libc_init_array+0x2e>
 8008efa:	bd70      	pop	{r4, r5, r6, pc}
 8008efc:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f00:	4798      	blx	r3
 8008f02:	3601      	adds	r6, #1
 8008f04:	e7ee      	b.n	8008ee4 <__libc_init_array+0xc>
 8008f06:	f855 3b04 	ldr.w	r3, [r5], #4
 8008f0a:	4798      	blx	r3
 8008f0c:	3601      	adds	r6, #1
 8008f0e:	e7f2      	b.n	8008ef6 <__libc_init_array+0x1e>
 8008f10:	0800d3b8 	.word	0x0800d3b8
 8008f14:	0800d3b8 	.word	0x0800d3b8
 8008f18:	0800d3b8 	.word	0x0800d3b8
 8008f1c:	0800d3bc 	.word	0x0800d3bc

08008f20 <__retarget_lock_init_recursive>:
 8008f20:	4770      	bx	lr

08008f22 <__retarget_lock_acquire_recursive>:
 8008f22:	4770      	bx	lr

08008f24 <__retarget_lock_release_recursive>:
 8008f24:	4770      	bx	lr

08008f26 <quorem>:
 8008f26:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f2a:	6903      	ldr	r3, [r0, #16]
 8008f2c:	690c      	ldr	r4, [r1, #16]
 8008f2e:	42a3      	cmp	r3, r4
 8008f30:	4607      	mov	r7, r0
 8008f32:	db7e      	blt.n	8009032 <quorem+0x10c>
 8008f34:	3c01      	subs	r4, #1
 8008f36:	f101 0814 	add.w	r8, r1, #20
 8008f3a:	00a3      	lsls	r3, r4, #2
 8008f3c:	f100 0514 	add.w	r5, r0, #20
 8008f40:	9300      	str	r3, [sp, #0]
 8008f42:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008f46:	9301      	str	r3, [sp, #4]
 8008f48:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8008f4c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008f50:	3301      	adds	r3, #1
 8008f52:	429a      	cmp	r2, r3
 8008f54:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8008f58:	fbb2 f6f3 	udiv	r6, r2, r3
 8008f5c:	d32e      	bcc.n	8008fbc <quorem+0x96>
 8008f5e:	f04f 0a00 	mov.w	sl, #0
 8008f62:	46c4      	mov	ip, r8
 8008f64:	46ae      	mov	lr, r5
 8008f66:	46d3      	mov	fp, sl
 8008f68:	f85c 3b04 	ldr.w	r3, [ip], #4
 8008f6c:	b298      	uxth	r0, r3
 8008f6e:	fb06 a000 	mla	r0, r6, r0, sl
 8008f72:	0c02      	lsrs	r2, r0, #16
 8008f74:	0c1b      	lsrs	r3, r3, #16
 8008f76:	fb06 2303 	mla	r3, r6, r3, r2
 8008f7a:	f8de 2000 	ldr.w	r2, [lr]
 8008f7e:	b280      	uxth	r0, r0
 8008f80:	b292      	uxth	r2, r2
 8008f82:	1a12      	subs	r2, r2, r0
 8008f84:	445a      	add	r2, fp
 8008f86:	f8de 0000 	ldr.w	r0, [lr]
 8008f8a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008f8e:	b29b      	uxth	r3, r3
 8008f90:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8008f94:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8008f98:	b292      	uxth	r2, r2
 8008f9a:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8008f9e:	45e1      	cmp	r9, ip
 8008fa0:	f84e 2b04 	str.w	r2, [lr], #4
 8008fa4:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8008fa8:	d2de      	bcs.n	8008f68 <quorem+0x42>
 8008faa:	9b00      	ldr	r3, [sp, #0]
 8008fac:	58eb      	ldr	r3, [r5, r3]
 8008fae:	b92b      	cbnz	r3, 8008fbc <quorem+0x96>
 8008fb0:	9b01      	ldr	r3, [sp, #4]
 8008fb2:	3b04      	subs	r3, #4
 8008fb4:	429d      	cmp	r5, r3
 8008fb6:	461a      	mov	r2, r3
 8008fb8:	d32f      	bcc.n	800901a <quorem+0xf4>
 8008fba:	613c      	str	r4, [r7, #16]
 8008fbc:	4638      	mov	r0, r7
 8008fbe:	f001 f979 	bl	800a2b4 <__mcmp>
 8008fc2:	2800      	cmp	r0, #0
 8008fc4:	db25      	blt.n	8009012 <quorem+0xec>
 8008fc6:	4629      	mov	r1, r5
 8008fc8:	2000      	movs	r0, #0
 8008fca:	f858 2b04 	ldr.w	r2, [r8], #4
 8008fce:	f8d1 c000 	ldr.w	ip, [r1]
 8008fd2:	fa1f fe82 	uxth.w	lr, r2
 8008fd6:	fa1f f38c 	uxth.w	r3, ip
 8008fda:	eba3 030e 	sub.w	r3, r3, lr
 8008fde:	4403      	add	r3, r0
 8008fe0:	0c12      	lsrs	r2, r2, #16
 8008fe2:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8008fe6:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8008fea:	b29b      	uxth	r3, r3
 8008fec:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008ff0:	45c1      	cmp	r9, r8
 8008ff2:	f841 3b04 	str.w	r3, [r1], #4
 8008ff6:	ea4f 4022 	mov.w	r0, r2, asr #16
 8008ffa:	d2e6      	bcs.n	8008fca <quorem+0xa4>
 8008ffc:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009000:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009004:	b922      	cbnz	r2, 8009010 <quorem+0xea>
 8009006:	3b04      	subs	r3, #4
 8009008:	429d      	cmp	r5, r3
 800900a:	461a      	mov	r2, r3
 800900c:	d30b      	bcc.n	8009026 <quorem+0x100>
 800900e:	613c      	str	r4, [r7, #16]
 8009010:	3601      	adds	r6, #1
 8009012:	4630      	mov	r0, r6
 8009014:	b003      	add	sp, #12
 8009016:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800901a:	6812      	ldr	r2, [r2, #0]
 800901c:	3b04      	subs	r3, #4
 800901e:	2a00      	cmp	r2, #0
 8009020:	d1cb      	bne.n	8008fba <quorem+0x94>
 8009022:	3c01      	subs	r4, #1
 8009024:	e7c6      	b.n	8008fb4 <quorem+0x8e>
 8009026:	6812      	ldr	r2, [r2, #0]
 8009028:	3b04      	subs	r3, #4
 800902a:	2a00      	cmp	r2, #0
 800902c:	d1ef      	bne.n	800900e <quorem+0xe8>
 800902e:	3c01      	subs	r4, #1
 8009030:	e7ea      	b.n	8009008 <quorem+0xe2>
 8009032:	2000      	movs	r0, #0
 8009034:	e7ee      	b.n	8009014 <quorem+0xee>
	...

08009038 <_dtoa_r>:
 8009038:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800903c:	69c7      	ldr	r7, [r0, #28]
 800903e:	b099      	sub	sp, #100	@ 0x64
 8009040:	ed8d 0b02 	vstr	d0, [sp, #8]
 8009044:	ec55 4b10 	vmov	r4, r5, d0
 8009048:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800904a:	9109      	str	r1, [sp, #36]	@ 0x24
 800904c:	4683      	mov	fp, r0
 800904e:	920e      	str	r2, [sp, #56]	@ 0x38
 8009050:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009052:	b97f      	cbnz	r7, 8009074 <_dtoa_r+0x3c>
 8009054:	2010      	movs	r0, #16
 8009056:	f000 fdfd 	bl	8009c54 <malloc>
 800905a:	4602      	mov	r2, r0
 800905c:	f8cb 001c 	str.w	r0, [fp, #28]
 8009060:	b920      	cbnz	r0, 800906c <_dtoa_r+0x34>
 8009062:	4ba7      	ldr	r3, [pc, #668]	@ (8009300 <_dtoa_r+0x2c8>)
 8009064:	21ef      	movs	r1, #239	@ 0xef
 8009066:	48a7      	ldr	r0, [pc, #668]	@ (8009304 <_dtoa_r+0x2cc>)
 8009068:	f001 fe2e 	bl	800acc8 <__assert_func>
 800906c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8009070:	6007      	str	r7, [r0, #0]
 8009072:	60c7      	str	r7, [r0, #12]
 8009074:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009078:	6819      	ldr	r1, [r3, #0]
 800907a:	b159      	cbz	r1, 8009094 <_dtoa_r+0x5c>
 800907c:	685a      	ldr	r2, [r3, #4]
 800907e:	604a      	str	r2, [r1, #4]
 8009080:	2301      	movs	r3, #1
 8009082:	4093      	lsls	r3, r2
 8009084:	608b      	str	r3, [r1, #8]
 8009086:	4658      	mov	r0, fp
 8009088:	f000 feda 	bl	8009e40 <_Bfree>
 800908c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009090:	2200      	movs	r2, #0
 8009092:	601a      	str	r2, [r3, #0]
 8009094:	1e2b      	subs	r3, r5, #0
 8009096:	bfb9      	ittee	lt
 8009098:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800909c:	9303      	strlt	r3, [sp, #12]
 800909e:	2300      	movge	r3, #0
 80090a0:	6033      	strge	r3, [r6, #0]
 80090a2:	9f03      	ldr	r7, [sp, #12]
 80090a4:	4b98      	ldr	r3, [pc, #608]	@ (8009308 <_dtoa_r+0x2d0>)
 80090a6:	bfbc      	itt	lt
 80090a8:	2201      	movlt	r2, #1
 80090aa:	6032      	strlt	r2, [r6, #0]
 80090ac:	43bb      	bics	r3, r7
 80090ae:	d112      	bne.n	80090d6 <_dtoa_r+0x9e>
 80090b0:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80090b2:	f242 730f 	movw	r3, #9999	@ 0x270f
 80090b6:	6013      	str	r3, [r2, #0]
 80090b8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80090bc:	4323      	orrs	r3, r4
 80090be:	f000 854d 	beq.w	8009b5c <_dtoa_r+0xb24>
 80090c2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80090c4:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800931c <_dtoa_r+0x2e4>
 80090c8:	2b00      	cmp	r3, #0
 80090ca:	f000 854f 	beq.w	8009b6c <_dtoa_r+0xb34>
 80090ce:	f10a 0303 	add.w	r3, sl, #3
 80090d2:	f000 bd49 	b.w	8009b68 <_dtoa_r+0xb30>
 80090d6:	ed9d 7b02 	vldr	d7, [sp, #8]
 80090da:	2200      	movs	r2, #0
 80090dc:	ec51 0b17 	vmov	r0, r1, d7
 80090e0:	2300      	movs	r3, #0
 80090e2:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80090e6:	f7f7 fcef 	bl	8000ac8 <__aeabi_dcmpeq>
 80090ea:	4680      	mov	r8, r0
 80090ec:	b158      	cbz	r0, 8009106 <_dtoa_r+0xce>
 80090ee:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80090f0:	2301      	movs	r3, #1
 80090f2:	6013      	str	r3, [r2, #0]
 80090f4:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80090f6:	b113      	cbz	r3, 80090fe <_dtoa_r+0xc6>
 80090f8:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 80090fa:	4b84      	ldr	r3, [pc, #528]	@ (800930c <_dtoa_r+0x2d4>)
 80090fc:	6013      	str	r3, [r2, #0]
 80090fe:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8009320 <_dtoa_r+0x2e8>
 8009102:	f000 bd33 	b.w	8009b6c <_dtoa_r+0xb34>
 8009106:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800910a:	aa16      	add	r2, sp, #88	@ 0x58
 800910c:	a917      	add	r1, sp, #92	@ 0x5c
 800910e:	4658      	mov	r0, fp
 8009110:	f001 f980 	bl	800a414 <__d2b>
 8009114:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8009118:	4681      	mov	r9, r0
 800911a:	2e00      	cmp	r6, #0
 800911c:	d077      	beq.n	800920e <_dtoa_r+0x1d6>
 800911e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8009120:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 8009124:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009128:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800912c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8009130:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8009134:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8009138:	4619      	mov	r1, r3
 800913a:	2200      	movs	r2, #0
 800913c:	4b74      	ldr	r3, [pc, #464]	@ (8009310 <_dtoa_r+0x2d8>)
 800913e:	f7f7 f8a3 	bl	8000288 <__aeabi_dsub>
 8009142:	a369      	add	r3, pc, #420	@ (adr r3, 80092e8 <_dtoa_r+0x2b0>)
 8009144:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009148:	f7f7 fa56 	bl	80005f8 <__aeabi_dmul>
 800914c:	a368      	add	r3, pc, #416	@ (adr r3, 80092f0 <_dtoa_r+0x2b8>)
 800914e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009152:	f7f7 f89b 	bl	800028c <__adddf3>
 8009156:	4604      	mov	r4, r0
 8009158:	4630      	mov	r0, r6
 800915a:	460d      	mov	r5, r1
 800915c:	f7f7 f9e2 	bl	8000524 <__aeabi_i2d>
 8009160:	a365      	add	r3, pc, #404	@ (adr r3, 80092f8 <_dtoa_r+0x2c0>)
 8009162:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009166:	f7f7 fa47 	bl	80005f8 <__aeabi_dmul>
 800916a:	4602      	mov	r2, r0
 800916c:	460b      	mov	r3, r1
 800916e:	4620      	mov	r0, r4
 8009170:	4629      	mov	r1, r5
 8009172:	f7f7 f88b 	bl	800028c <__adddf3>
 8009176:	4604      	mov	r4, r0
 8009178:	460d      	mov	r5, r1
 800917a:	f7f7 fced 	bl	8000b58 <__aeabi_d2iz>
 800917e:	2200      	movs	r2, #0
 8009180:	4607      	mov	r7, r0
 8009182:	2300      	movs	r3, #0
 8009184:	4620      	mov	r0, r4
 8009186:	4629      	mov	r1, r5
 8009188:	f7f7 fca8 	bl	8000adc <__aeabi_dcmplt>
 800918c:	b140      	cbz	r0, 80091a0 <_dtoa_r+0x168>
 800918e:	4638      	mov	r0, r7
 8009190:	f7f7 f9c8 	bl	8000524 <__aeabi_i2d>
 8009194:	4622      	mov	r2, r4
 8009196:	462b      	mov	r3, r5
 8009198:	f7f7 fc96 	bl	8000ac8 <__aeabi_dcmpeq>
 800919c:	b900      	cbnz	r0, 80091a0 <_dtoa_r+0x168>
 800919e:	3f01      	subs	r7, #1
 80091a0:	2f16      	cmp	r7, #22
 80091a2:	d851      	bhi.n	8009248 <_dtoa_r+0x210>
 80091a4:	4b5b      	ldr	r3, [pc, #364]	@ (8009314 <_dtoa_r+0x2dc>)
 80091a6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80091aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091ae:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80091b2:	f7f7 fc93 	bl	8000adc <__aeabi_dcmplt>
 80091b6:	2800      	cmp	r0, #0
 80091b8:	d048      	beq.n	800924c <_dtoa_r+0x214>
 80091ba:	3f01      	subs	r7, #1
 80091bc:	2300      	movs	r3, #0
 80091be:	9312      	str	r3, [sp, #72]	@ 0x48
 80091c0:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80091c2:	1b9b      	subs	r3, r3, r6
 80091c4:	1e5a      	subs	r2, r3, #1
 80091c6:	bf44      	itt	mi
 80091c8:	f1c3 0801 	rsbmi	r8, r3, #1
 80091cc:	2300      	movmi	r3, #0
 80091ce:	9208      	str	r2, [sp, #32]
 80091d0:	bf54      	ite	pl
 80091d2:	f04f 0800 	movpl.w	r8, #0
 80091d6:	9308      	strmi	r3, [sp, #32]
 80091d8:	2f00      	cmp	r7, #0
 80091da:	db39      	blt.n	8009250 <_dtoa_r+0x218>
 80091dc:	9b08      	ldr	r3, [sp, #32]
 80091de:	970f      	str	r7, [sp, #60]	@ 0x3c
 80091e0:	443b      	add	r3, r7
 80091e2:	9308      	str	r3, [sp, #32]
 80091e4:	2300      	movs	r3, #0
 80091e6:	930a      	str	r3, [sp, #40]	@ 0x28
 80091e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80091ea:	2b09      	cmp	r3, #9
 80091ec:	d864      	bhi.n	80092b8 <_dtoa_r+0x280>
 80091ee:	2b05      	cmp	r3, #5
 80091f0:	bfc4      	itt	gt
 80091f2:	3b04      	subgt	r3, #4
 80091f4:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80091f6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80091f8:	f1a3 0302 	sub.w	r3, r3, #2
 80091fc:	bfcc      	ite	gt
 80091fe:	2400      	movgt	r4, #0
 8009200:	2401      	movle	r4, #1
 8009202:	2b03      	cmp	r3, #3
 8009204:	d863      	bhi.n	80092ce <_dtoa_r+0x296>
 8009206:	e8df f003 	tbb	[pc, r3]
 800920a:	372a      	.short	0x372a
 800920c:	5535      	.short	0x5535
 800920e:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 8009212:	441e      	add	r6, r3
 8009214:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8009218:	2b20      	cmp	r3, #32
 800921a:	bfc1      	itttt	gt
 800921c:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8009220:	409f      	lslgt	r7, r3
 8009222:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8009226:	fa24 f303 	lsrgt.w	r3, r4, r3
 800922a:	bfd6      	itet	le
 800922c:	f1c3 0320 	rsble	r3, r3, #32
 8009230:	ea47 0003 	orrgt.w	r0, r7, r3
 8009234:	fa04 f003 	lslle.w	r0, r4, r3
 8009238:	f7f7 f964 	bl	8000504 <__aeabi_ui2d>
 800923c:	2201      	movs	r2, #1
 800923e:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8009242:	3e01      	subs	r6, #1
 8009244:	9214      	str	r2, [sp, #80]	@ 0x50
 8009246:	e777      	b.n	8009138 <_dtoa_r+0x100>
 8009248:	2301      	movs	r3, #1
 800924a:	e7b8      	b.n	80091be <_dtoa_r+0x186>
 800924c:	9012      	str	r0, [sp, #72]	@ 0x48
 800924e:	e7b7      	b.n	80091c0 <_dtoa_r+0x188>
 8009250:	427b      	negs	r3, r7
 8009252:	930a      	str	r3, [sp, #40]	@ 0x28
 8009254:	2300      	movs	r3, #0
 8009256:	eba8 0807 	sub.w	r8, r8, r7
 800925a:	930f      	str	r3, [sp, #60]	@ 0x3c
 800925c:	e7c4      	b.n	80091e8 <_dtoa_r+0x1b0>
 800925e:	2300      	movs	r3, #0
 8009260:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009262:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009264:	2b00      	cmp	r3, #0
 8009266:	dc35      	bgt.n	80092d4 <_dtoa_r+0x29c>
 8009268:	2301      	movs	r3, #1
 800926a:	9300      	str	r3, [sp, #0]
 800926c:	9307      	str	r3, [sp, #28]
 800926e:	461a      	mov	r2, r3
 8009270:	920e      	str	r2, [sp, #56]	@ 0x38
 8009272:	e00b      	b.n	800928c <_dtoa_r+0x254>
 8009274:	2301      	movs	r3, #1
 8009276:	e7f3      	b.n	8009260 <_dtoa_r+0x228>
 8009278:	2300      	movs	r3, #0
 800927a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800927c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800927e:	18fb      	adds	r3, r7, r3
 8009280:	9300      	str	r3, [sp, #0]
 8009282:	3301      	adds	r3, #1
 8009284:	2b01      	cmp	r3, #1
 8009286:	9307      	str	r3, [sp, #28]
 8009288:	bfb8      	it	lt
 800928a:	2301      	movlt	r3, #1
 800928c:	f8db 001c 	ldr.w	r0, [fp, #28]
 8009290:	2100      	movs	r1, #0
 8009292:	2204      	movs	r2, #4
 8009294:	f102 0514 	add.w	r5, r2, #20
 8009298:	429d      	cmp	r5, r3
 800929a:	d91f      	bls.n	80092dc <_dtoa_r+0x2a4>
 800929c:	6041      	str	r1, [r0, #4]
 800929e:	4658      	mov	r0, fp
 80092a0:	f000 fd8e 	bl	8009dc0 <_Balloc>
 80092a4:	4682      	mov	sl, r0
 80092a6:	2800      	cmp	r0, #0
 80092a8:	d13c      	bne.n	8009324 <_dtoa_r+0x2ec>
 80092aa:	4b1b      	ldr	r3, [pc, #108]	@ (8009318 <_dtoa_r+0x2e0>)
 80092ac:	4602      	mov	r2, r0
 80092ae:	f240 11af 	movw	r1, #431	@ 0x1af
 80092b2:	e6d8      	b.n	8009066 <_dtoa_r+0x2e>
 80092b4:	2301      	movs	r3, #1
 80092b6:	e7e0      	b.n	800927a <_dtoa_r+0x242>
 80092b8:	2401      	movs	r4, #1
 80092ba:	2300      	movs	r3, #0
 80092bc:	9309      	str	r3, [sp, #36]	@ 0x24
 80092be:	940b      	str	r4, [sp, #44]	@ 0x2c
 80092c0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80092c4:	9300      	str	r3, [sp, #0]
 80092c6:	9307      	str	r3, [sp, #28]
 80092c8:	2200      	movs	r2, #0
 80092ca:	2312      	movs	r3, #18
 80092cc:	e7d0      	b.n	8009270 <_dtoa_r+0x238>
 80092ce:	2301      	movs	r3, #1
 80092d0:	930b      	str	r3, [sp, #44]	@ 0x2c
 80092d2:	e7f5      	b.n	80092c0 <_dtoa_r+0x288>
 80092d4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80092d6:	9300      	str	r3, [sp, #0]
 80092d8:	9307      	str	r3, [sp, #28]
 80092da:	e7d7      	b.n	800928c <_dtoa_r+0x254>
 80092dc:	3101      	adds	r1, #1
 80092de:	0052      	lsls	r2, r2, #1
 80092e0:	e7d8      	b.n	8009294 <_dtoa_r+0x25c>
 80092e2:	bf00      	nop
 80092e4:	f3af 8000 	nop.w
 80092e8:	636f4361 	.word	0x636f4361
 80092ec:	3fd287a7 	.word	0x3fd287a7
 80092f0:	8b60c8b3 	.word	0x8b60c8b3
 80092f4:	3fc68a28 	.word	0x3fc68a28
 80092f8:	509f79fb 	.word	0x509f79fb
 80092fc:	3fd34413 	.word	0x3fd34413
 8009300:	0800cfdd 	.word	0x0800cfdd
 8009304:	0800cff4 	.word	0x0800cff4
 8009308:	7ff00000 	.word	0x7ff00000
 800930c:	0800cfad 	.word	0x0800cfad
 8009310:	3ff80000 	.word	0x3ff80000
 8009314:	0800d0f0 	.word	0x0800d0f0
 8009318:	0800d04c 	.word	0x0800d04c
 800931c:	0800cfd9 	.word	0x0800cfd9
 8009320:	0800cfac 	.word	0x0800cfac
 8009324:	f8db 301c 	ldr.w	r3, [fp, #28]
 8009328:	6018      	str	r0, [r3, #0]
 800932a:	9b07      	ldr	r3, [sp, #28]
 800932c:	2b0e      	cmp	r3, #14
 800932e:	f200 80a4 	bhi.w	800947a <_dtoa_r+0x442>
 8009332:	2c00      	cmp	r4, #0
 8009334:	f000 80a1 	beq.w	800947a <_dtoa_r+0x442>
 8009338:	2f00      	cmp	r7, #0
 800933a:	dd33      	ble.n	80093a4 <_dtoa_r+0x36c>
 800933c:	4bad      	ldr	r3, [pc, #692]	@ (80095f4 <_dtoa_r+0x5bc>)
 800933e:	f007 020f 	and.w	r2, r7, #15
 8009342:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009346:	ed93 7b00 	vldr	d7, [r3]
 800934a:	05f8      	lsls	r0, r7, #23
 800934c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8009350:	ea4f 1427 	mov.w	r4, r7, asr #4
 8009354:	d516      	bpl.n	8009384 <_dtoa_r+0x34c>
 8009356:	4ba8      	ldr	r3, [pc, #672]	@ (80095f8 <_dtoa_r+0x5c0>)
 8009358:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800935c:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009360:	f7f7 fa74 	bl	800084c <__aeabi_ddiv>
 8009364:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009368:	f004 040f 	and.w	r4, r4, #15
 800936c:	2603      	movs	r6, #3
 800936e:	4da2      	ldr	r5, [pc, #648]	@ (80095f8 <_dtoa_r+0x5c0>)
 8009370:	b954      	cbnz	r4, 8009388 <_dtoa_r+0x350>
 8009372:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009376:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800937a:	f7f7 fa67 	bl	800084c <__aeabi_ddiv>
 800937e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009382:	e028      	b.n	80093d6 <_dtoa_r+0x39e>
 8009384:	2602      	movs	r6, #2
 8009386:	e7f2      	b.n	800936e <_dtoa_r+0x336>
 8009388:	07e1      	lsls	r1, r4, #31
 800938a:	d508      	bpl.n	800939e <_dtoa_r+0x366>
 800938c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8009390:	e9d5 2300 	ldrd	r2, r3, [r5]
 8009394:	f7f7 f930 	bl	80005f8 <__aeabi_dmul>
 8009398:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800939c:	3601      	adds	r6, #1
 800939e:	1064      	asrs	r4, r4, #1
 80093a0:	3508      	adds	r5, #8
 80093a2:	e7e5      	b.n	8009370 <_dtoa_r+0x338>
 80093a4:	f000 80d2 	beq.w	800954c <_dtoa_r+0x514>
 80093a8:	427c      	negs	r4, r7
 80093aa:	4b92      	ldr	r3, [pc, #584]	@ (80095f4 <_dtoa_r+0x5bc>)
 80093ac:	4d92      	ldr	r5, [pc, #584]	@ (80095f8 <_dtoa_r+0x5c0>)
 80093ae:	f004 020f 	and.w	r2, r4, #15
 80093b2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80093b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80093ba:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80093be:	f7f7 f91b 	bl	80005f8 <__aeabi_dmul>
 80093c2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80093c6:	1124      	asrs	r4, r4, #4
 80093c8:	2300      	movs	r3, #0
 80093ca:	2602      	movs	r6, #2
 80093cc:	2c00      	cmp	r4, #0
 80093ce:	f040 80b2 	bne.w	8009536 <_dtoa_r+0x4fe>
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d1d3      	bne.n	800937e <_dtoa_r+0x346>
 80093d6:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80093d8:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80093dc:	2b00      	cmp	r3, #0
 80093de:	f000 80b7 	beq.w	8009550 <_dtoa_r+0x518>
 80093e2:	4b86      	ldr	r3, [pc, #536]	@ (80095fc <_dtoa_r+0x5c4>)
 80093e4:	2200      	movs	r2, #0
 80093e6:	4620      	mov	r0, r4
 80093e8:	4629      	mov	r1, r5
 80093ea:	f7f7 fb77 	bl	8000adc <__aeabi_dcmplt>
 80093ee:	2800      	cmp	r0, #0
 80093f0:	f000 80ae 	beq.w	8009550 <_dtoa_r+0x518>
 80093f4:	9b07      	ldr	r3, [sp, #28]
 80093f6:	2b00      	cmp	r3, #0
 80093f8:	f000 80aa 	beq.w	8009550 <_dtoa_r+0x518>
 80093fc:	9b00      	ldr	r3, [sp, #0]
 80093fe:	2b00      	cmp	r3, #0
 8009400:	dd37      	ble.n	8009472 <_dtoa_r+0x43a>
 8009402:	1e7b      	subs	r3, r7, #1
 8009404:	9304      	str	r3, [sp, #16]
 8009406:	4620      	mov	r0, r4
 8009408:	4b7d      	ldr	r3, [pc, #500]	@ (8009600 <_dtoa_r+0x5c8>)
 800940a:	2200      	movs	r2, #0
 800940c:	4629      	mov	r1, r5
 800940e:	f7f7 f8f3 	bl	80005f8 <__aeabi_dmul>
 8009412:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8009416:	9c00      	ldr	r4, [sp, #0]
 8009418:	3601      	adds	r6, #1
 800941a:	4630      	mov	r0, r6
 800941c:	f7f7 f882 	bl	8000524 <__aeabi_i2d>
 8009420:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8009424:	f7f7 f8e8 	bl	80005f8 <__aeabi_dmul>
 8009428:	4b76      	ldr	r3, [pc, #472]	@ (8009604 <_dtoa_r+0x5cc>)
 800942a:	2200      	movs	r2, #0
 800942c:	f7f6 ff2e 	bl	800028c <__adddf3>
 8009430:	4605      	mov	r5, r0
 8009432:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8009436:	2c00      	cmp	r4, #0
 8009438:	f040 808d 	bne.w	8009556 <_dtoa_r+0x51e>
 800943c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009440:	4b71      	ldr	r3, [pc, #452]	@ (8009608 <_dtoa_r+0x5d0>)
 8009442:	2200      	movs	r2, #0
 8009444:	f7f6 ff20 	bl	8000288 <__aeabi_dsub>
 8009448:	4602      	mov	r2, r0
 800944a:	460b      	mov	r3, r1
 800944c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8009450:	462a      	mov	r2, r5
 8009452:	4633      	mov	r3, r6
 8009454:	f7f7 fb60 	bl	8000b18 <__aeabi_dcmpgt>
 8009458:	2800      	cmp	r0, #0
 800945a:	f040 828b 	bne.w	8009974 <_dtoa_r+0x93c>
 800945e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009462:	462a      	mov	r2, r5
 8009464:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8009468:	f7f7 fb38 	bl	8000adc <__aeabi_dcmplt>
 800946c:	2800      	cmp	r0, #0
 800946e:	f040 8128 	bne.w	80096c2 <_dtoa_r+0x68a>
 8009472:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8009476:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800947a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800947c:	2b00      	cmp	r3, #0
 800947e:	f2c0 815a 	blt.w	8009736 <_dtoa_r+0x6fe>
 8009482:	2f0e      	cmp	r7, #14
 8009484:	f300 8157 	bgt.w	8009736 <_dtoa_r+0x6fe>
 8009488:	4b5a      	ldr	r3, [pc, #360]	@ (80095f4 <_dtoa_r+0x5bc>)
 800948a:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800948e:	ed93 7b00 	vldr	d7, [r3]
 8009492:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009494:	2b00      	cmp	r3, #0
 8009496:	ed8d 7b00 	vstr	d7, [sp]
 800949a:	da03      	bge.n	80094a4 <_dtoa_r+0x46c>
 800949c:	9b07      	ldr	r3, [sp, #28]
 800949e:	2b00      	cmp	r3, #0
 80094a0:	f340 8101 	ble.w	80096a6 <_dtoa_r+0x66e>
 80094a4:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80094a8:	4656      	mov	r6, sl
 80094aa:	e9dd 2300 	ldrd	r2, r3, [sp]
 80094ae:	4620      	mov	r0, r4
 80094b0:	4629      	mov	r1, r5
 80094b2:	f7f7 f9cb 	bl	800084c <__aeabi_ddiv>
 80094b6:	f7f7 fb4f 	bl	8000b58 <__aeabi_d2iz>
 80094ba:	4680      	mov	r8, r0
 80094bc:	f7f7 f832 	bl	8000524 <__aeabi_i2d>
 80094c0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80094c4:	f7f7 f898 	bl	80005f8 <__aeabi_dmul>
 80094c8:	4602      	mov	r2, r0
 80094ca:	460b      	mov	r3, r1
 80094cc:	4620      	mov	r0, r4
 80094ce:	4629      	mov	r1, r5
 80094d0:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 80094d4:	f7f6 fed8 	bl	8000288 <__aeabi_dsub>
 80094d8:	f806 4b01 	strb.w	r4, [r6], #1
 80094dc:	9d07      	ldr	r5, [sp, #28]
 80094de:	eba6 040a 	sub.w	r4, r6, sl
 80094e2:	42a5      	cmp	r5, r4
 80094e4:	4602      	mov	r2, r0
 80094e6:	460b      	mov	r3, r1
 80094e8:	f040 8117 	bne.w	800971a <_dtoa_r+0x6e2>
 80094ec:	f7f6 fece 	bl	800028c <__adddf3>
 80094f0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80094f4:	4604      	mov	r4, r0
 80094f6:	460d      	mov	r5, r1
 80094f8:	f7f7 fb0e 	bl	8000b18 <__aeabi_dcmpgt>
 80094fc:	2800      	cmp	r0, #0
 80094fe:	f040 80f9 	bne.w	80096f4 <_dtoa_r+0x6bc>
 8009502:	e9dd 2300 	ldrd	r2, r3, [sp]
 8009506:	4620      	mov	r0, r4
 8009508:	4629      	mov	r1, r5
 800950a:	f7f7 fadd 	bl	8000ac8 <__aeabi_dcmpeq>
 800950e:	b118      	cbz	r0, 8009518 <_dtoa_r+0x4e0>
 8009510:	f018 0f01 	tst.w	r8, #1
 8009514:	f040 80ee 	bne.w	80096f4 <_dtoa_r+0x6bc>
 8009518:	4649      	mov	r1, r9
 800951a:	4658      	mov	r0, fp
 800951c:	f000 fc90 	bl	8009e40 <_Bfree>
 8009520:	2300      	movs	r3, #0
 8009522:	7033      	strb	r3, [r6, #0]
 8009524:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8009526:	3701      	adds	r7, #1
 8009528:	601f      	str	r7, [r3, #0]
 800952a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800952c:	2b00      	cmp	r3, #0
 800952e:	f000 831d 	beq.w	8009b6c <_dtoa_r+0xb34>
 8009532:	601e      	str	r6, [r3, #0]
 8009534:	e31a      	b.n	8009b6c <_dtoa_r+0xb34>
 8009536:	07e2      	lsls	r2, r4, #31
 8009538:	d505      	bpl.n	8009546 <_dtoa_r+0x50e>
 800953a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800953e:	f7f7 f85b 	bl	80005f8 <__aeabi_dmul>
 8009542:	3601      	adds	r6, #1
 8009544:	2301      	movs	r3, #1
 8009546:	1064      	asrs	r4, r4, #1
 8009548:	3508      	adds	r5, #8
 800954a:	e73f      	b.n	80093cc <_dtoa_r+0x394>
 800954c:	2602      	movs	r6, #2
 800954e:	e742      	b.n	80093d6 <_dtoa_r+0x39e>
 8009550:	9c07      	ldr	r4, [sp, #28]
 8009552:	9704      	str	r7, [sp, #16]
 8009554:	e761      	b.n	800941a <_dtoa_r+0x3e2>
 8009556:	4b27      	ldr	r3, [pc, #156]	@ (80095f4 <_dtoa_r+0x5bc>)
 8009558:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800955a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800955e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009562:	4454      	add	r4, sl
 8009564:	2900      	cmp	r1, #0
 8009566:	d053      	beq.n	8009610 <_dtoa_r+0x5d8>
 8009568:	4928      	ldr	r1, [pc, #160]	@ (800960c <_dtoa_r+0x5d4>)
 800956a:	2000      	movs	r0, #0
 800956c:	f7f7 f96e 	bl	800084c <__aeabi_ddiv>
 8009570:	4633      	mov	r3, r6
 8009572:	462a      	mov	r2, r5
 8009574:	f7f6 fe88 	bl	8000288 <__aeabi_dsub>
 8009578:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800957c:	4656      	mov	r6, sl
 800957e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009582:	f7f7 fae9 	bl	8000b58 <__aeabi_d2iz>
 8009586:	4605      	mov	r5, r0
 8009588:	f7f6 ffcc 	bl	8000524 <__aeabi_i2d>
 800958c:	4602      	mov	r2, r0
 800958e:	460b      	mov	r3, r1
 8009590:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009594:	f7f6 fe78 	bl	8000288 <__aeabi_dsub>
 8009598:	3530      	adds	r5, #48	@ 0x30
 800959a:	4602      	mov	r2, r0
 800959c:	460b      	mov	r3, r1
 800959e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80095a2:	f806 5b01 	strb.w	r5, [r6], #1
 80095a6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80095aa:	f7f7 fa97 	bl	8000adc <__aeabi_dcmplt>
 80095ae:	2800      	cmp	r0, #0
 80095b0:	d171      	bne.n	8009696 <_dtoa_r+0x65e>
 80095b2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80095b6:	4911      	ldr	r1, [pc, #68]	@ (80095fc <_dtoa_r+0x5c4>)
 80095b8:	2000      	movs	r0, #0
 80095ba:	f7f6 fe65 	bl	8000288 <__aeabi_dsub>
 80095be:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 80095c2:	f7f7 fa8b 	bl	8000adc <__aeabi_dcmplt>
 80095c6:	2800      	cmp	r0, #0
 80095c8:	f040 8095 	bne.w	80096f6 <_dtoa_r+0x6be>
 80095cc:	42a6      	cmp	r6, r4
 80095ce:	f43f af50 	beq.w	8009472 <_dtoa_r+0x43a>
 80095d2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 80095d6:	4b0a      	ldr	r3, [pc, #40]	@ (8009600 <_dtoa_r+0x5c8>)
 80095d8:	2200      	movs	r2, #0
 80095da:	f7f7 f80d 	bl	80005f8 <__aeabi_dmul>
 80095de:	4b08      	ldr	r3, [pc, #32]	@ (8009600 <_dtoa_r+0x5c8>)
 80095e0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 80095e4:	2200      	movs	r2, #0
 80095e6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80095ea:	f7f7 f805 	bl	80005f8 <__aeabi_dmul>
 80095ee:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80095f2:	e7c4      	b.n	800957e <_dtoa_r+0x546>
 80095f4:	0800d0f0 	.word	0x0800d0f0
 80095f8:	0800d0c8 	.word	0x0800d0c8
 80095fc:	3ff00000 	.word	0x3ff00000
 8009600:	40240000 	.word	0x40240000
 8009604:	401c0000 	.word	0x401c0000
 8009608:	40140000 	.word	0x40140000
 800960c:	3fe00000 	.word	0x3fe00000
 8009610:	4631      	mov	r1, r6
 8009612:	4628      	mov	r0, r5
 8009614:	f7f6 fff0 	bl	80005f8 <__aeabi_dmul>
 8009618:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800961c:	9415      	str	r4, [sp, #84]	@ 0x54
 800961e:	4656      	mov	r6, sl
 8009620:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009624:	f7f7 fa98 	bl	8000b58 <__aeabi_d2iz>
 8009628:	4605      	mov	r5, r0
 800962a:	f7f6 ff7b 	bl	8000524 <__aeabi_i2d>
 800962e:	4602      	mov	r2, r0
 8009630:	460b      	mov	r3, r1
 8009632:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009636:	f7f6 fe27 	bl	8000288 <__aeabi_dsub>
 800963a:	3530      	adds	r5, #48	@ 0x30
 800963c:	f806 5b01 	strb.w	r5, [r6], #1
 8009640:	4602      	mov	r2, r0
 8009642:	460b      	mov	r3, r1
 8009644:	42a6      	cmp	r6, r4
 8009646:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800964a:	f04f 0200 	mov.w	r2, #0
 800964e:	d124      	bne.n	800969a <_dtoa_r+0x662>
 8009650:	4bac      	ldr	r3, [pc, #688]	@ (8009904 <_dtoa_r+0x8cc>)
 8009652:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8009656:	f7f6 fe19 	bl	800028c <__adddf3>
 800965a:	4602      	mov	r2, r0
 800965c:	460b      	mov	r3, r1
 800965e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009662:	f7f7 fa59 	bl	8000b18 <__aeabi_dcmpgt>
 8009666:	2800      	cmp	r0, #0
 8009668:	d145      	bne.n	80096f6 <_dtoa_r+0x6be>
 800966a:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800966e:	49a5      	ldr	r1, [pc, #660]	@ (8009904 <_dtoa_r+0x8cc>)
 8009670:	2000      	movs	r0, #0
 8009672:	f7f6 fe09 	bl	8000288 <__aeabi_dsub>
 8009676:	4602      	mov	r2, r0
 8009678:	460b      	mov	r3, r1
 800967a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800967e:	f7f7 fa2d 	bl	8000adc <__aeabi_dcmplt>
 8009682:	2800      	cmp	r0, #0
 8009684:	f43f aef5 	beq.w	8009472 <_dtoa_r+0x43a>
 8009688:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800968a:	1e73      	subs	r3, r6, #1
 800968c:	9315      	str	r3, [sp, #84]	@ 0x54
 800968e:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8009692:	2b30      	cmp	r3, #48	@ 0x30
 8009694:	d0f8      	beq.n	8009688 <_dtoa_r+0x650>
 8009696:	9f04      	ldr	r7, [sp, #16]
 8009698:	e73e      	b.n	8009518 <_dtoa_r+0x4e0>
 800969a:	4b9b      	ldr	r3, [pc, #620]	@ (8009908 <_dtoa_r+0x8d0>)
 800969c:	f7f6 ffac 	bl	80005f8 <__aeabi_dmul>
 80096a0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80096a4:	e7bc      	b.n	8009620 <_dtoa_r+0x5e8>
 80096a6:	d10c      	bne.n	80096c2 <_dtoa_r+0x68a>
 80096a8:	4b98      	ldr	r3, [pc, #608]	@ (800990c <_dtoa_r+0x8d4>)
 80096aa:	2200      	movs	r2, #0
 80096ac:	e9dd 0100 	ldrd	r0, r1, [sp]
 80096b0:	f7f6 ffa2 	bl	80005f8 <__aeabi_dmul>
 80096b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80096b8:	f7f7 fa24 	bl	8000b04 <__aeabi_dcmpge>
 80096bc:	2800      	cmp	r0, #0
 80096be:	f000 8157 	beq.w	8009970 <_dtoa_r+0x938>
 80096c2:	2400      	movs	r4, #0
 80096c4:	4625      	mov	r5, r4
 80096c6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80096c8:	43db      	mvns	r3, r3
 80096ca:	9304      	str	r3, [sp, #16]
 80096cc:	4656      	mov	r6, sl
 80096ce:	2700      	movs	r7, #0
 80096d0:	4621      	mov	r1, r4
 80096d2:	4658      	mov	r0, fp
 80096d4:	f000 fbb4 	bl	8009e40 <_Bfree>
 80096d8:	2d00      	cmp	r5, #0
 80096da:	d0dc      	beq.n	8009696 <_dtoa_r+0x65e>
 80096dc:	b12f      	cbz	r7, 80096ea <_dtoa_r+0x6b2>
 80096de:	42af      	cmp	r7, r5
 80096e0:	d003      	beq.n	80096ea <_dtoa_r+0x6b2>
 80096e2:	4639      	mov	r1, r7
 80096e4:	4658      	mov	r0, fp
 80096e6:	f000 fbab 	bl	8009e40 <_Bfree>
 80096ea:	4629      	mov	r1, r5
 80096ec:	4658      	mov	r0, fp
 80096ee:	f000 fba7 	bl	8009e40 <_Bfree>
 80096f2:	e7d0      	b.n	8009696 <_dtoa_r+0x65e>
 80096f4:	9704      	str	r7, [sp, #16]
 80096f6:	4633      	mov	r3, r6
 80096f8:	461e      	mov	r6, r3
 80096fa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80096fe:	2a39      	cmp	r2, #57	@ 0x39
 8009700:	d107      	bne.n	8009712 <_dtoa_r+0x6da>
 8009702:	459a      	cmp	sl, r3
 8009704:	d1f8      	bne.n	80096f8 <_dtoa_r+0x6c0>
 8009706:	9a04      	ldr	r2, [sp, #16]
 8009708:	3201      	adds	r2, #1
 800970a:	9204      	str	r2, [sp, #16]
 800970c:	2230      	movs	r2, #48	@ 0x30
 800970e:	f88a 2000 	strb.w	r2, [sl]
 8009712:	781a      	ldrb	r2, [r3, #0]
 8009714:	3201      	adds	r2, #1
 8009716:	701a      	strb	r2, [r3, #0]
 8009718:	e7bd      	b.n	8009696 <_dtoa_r+0x65e>
 800971a:	4b7b      	ldr	r3, [pc, #492]	@ (8009908 <_dtoa_r+0x8d0>)
 800971c:	2200      	movs	r2, #0
 800971e:	f7f6 ff6b 	bl	80005f8 <__aeabi_dmul>
 8009722:	2200      	movs	r2, #0
 8009724:	2300      	movs	r3, #0
 8009726:	4604      	mov	r4, r0
 8009728:	460d      	mov	r5, r1
 800972a:	f7f7 f9cd 	bl	8000ac8 <__aeabi_dcmpeq>
 800972e:	2800      	cmp	r0, #0
 8009730:	f43f aebb 	beq.w	80094aa <_dtoa_r+0x472>
 8009734:	e6f0      	b.n	8009518 <_dtoa_r+0x4e0>
 8009736:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8009738:	2a00      	cmp	r2, #0
 800973a:	f000 80db 	beq.w	80098f4 <_dtoa_r+0x8bc>
 800973e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009740:	2a01      	cmp	r2, #1
 8009742:	f300 80bf 	bgt.w	80098c4 <_dtoa_r+0x88c>
 8009746:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8009748:	2a00      	cmp	r2, #0
 800974a:	f000 80b7 	beq.w	80098bc <_dtoa_r+0x884>
 800974e:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8009752:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8009754:	4646      	mov	r6, r8
 8009756:	9a08      	ldr	r2, [sp, #32]
 8009758:	2101      	movs	r1, #1
 800975a:	441a      	add	r2, r3
 800975c:	4658      	mov	r0, fp
 800975e:	4498      	add	r8, r3
 8009760:	9208      	str	r2, [sp, #32]
 8009762:	f000 fc21 	bl	8009fa8 <__i2b>
 8009766:	4605      	mov	r5, r0
 8009768:	b15e      	cbz	r6, 8009782 <_dtoa_r+0x74a>
 800976a:	9b08      	ldr	r3, [sp, #32]
 800976c:	2b00      	cmp	r3, #0
 800976e:	dd08      	ble.n	8009782 <_dtoa_r+0x74a>
 8009770:	42b3      	cmp	r3, r6
 8009772:	9a08      	ldr	r2, [sp, #32]
 8009774:	bfa8      	it	ge
 8009776:	4633      	movge	r3, r6
 8009778:	eba8 0803 	sub.w	r8, r8, r3
 800977c:	1af6      	subs	r6, r6, r3
 800977e:	1ad3      	subs	r3, r2, r3
 8009780:	9308      	str	r3, [sp, #32]
 8009782:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009784:	b1f3      	cbz	r3, 80097c4 <_dtoa_r+0x78c>
 8009786:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009788:	2b00      	cmp	r3, #0
 800978a:	f000 80b7 	beq.w	80098fc <_dtoa_r+0x8c4>
 800978e:	b18c      	cbz	r4, 80097b4 <_dtoa_r+0x77c>
 8009790:	4629      	mov	r1, r5
 8009792:	4622      	mov	r2, r4
 8009794:	4658      	mov	r0, fp
 8009796:	f000 fcc7 	bl	800a128 <__pow5mult>
 800979a:	464a      	mov	r2, r9
 800979c:	4601      	mov	r1, r0
 800979e:	4605      	mov	r5, r0
 80097a0:	4658      	mov	r0, fp
 80097a2:	f000 fc17 	bl	8009fd4 <__multiply>
 80097a6:	4649      	mov	r1, r9
 80097a8:	9004      	str	r0, [sp, #16]
 80097aa:	4658      	mov	r0, fp
 80097ac:	f000 fb48 	bl	8009e40 <_Bfree>
 80097b0:	9b04      	ldr	r3, [sp, #16]
 80097b2:	4699      	mov	r9, r3
 80097b4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80097b6:	1b1a      	subs	r2, r3, r4
 80097b8:	d004      	beq.n	80097c4 <_dtoa_r+0x78c>
 80097ba:	4649      	mov	r1, r9
 80097bc:	4658      	mov	r0, fp
 80097be:	f000 fcb3 	bl	800a128 <__pow5mult>
 80097c2:	4681      	mov	r9, r0
 80097c4:	2101      	movs	r1, #1
 80097c6:	4658      	mov	r0, fp
 80097c8:	f000 fbee 	bl	8009fa8 <__i2b>
 80097cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80097ce:	4604      	mov	r4, r0
 80097d0:	2b00      	cmp	r3, #0
 80097d2:	f000 81cf 	beq.w	8009b74 <_dtoa_r+0xb3c>
 80097d6:	461a      	mov	r2, r3
 80097d8:	4601      	mov	r1, r0
 80097da:	4658      	mov	r0, fp
 80097dc:	f000 fca4 	bl	800a128 <__pow5mult>
 80097e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80097e2:	2b01      	cmp	r3, #1
 80097e4:	4604      	mov	r4, r0
 80097e6:	f300 8095 	bgt.w	8009914 <_dtoa_r+0x8dc>
 80097ea:	9b02      	ldr	r3, [sp, #8]
 80097ec:	2b00      	cmp	r3, #0
 80097ee:	f040 8087 	bne.w	8009900 <_dtoa_r+0x8c8>
 80097f2:	9b03      	ldr	r3, [sp, #12]
 80097f4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80097f8:	2b00      	cmp	r3, #0
 80097fa:	f040 8089 	bne.w	8009910 <_dtoa_r+0x8d8>
 80097fe:	9b03      	ldr	r3, [sp, #12]
 8009800:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8009804:	0d1b      	lsrs	r3, r3, #20
 8009806:	051b      	lsls	r3, r3, #20
 8009808:	b12b      	cbz	r3, 8009816 <_dtoa_r+0x7de>
 800980a:	9b08      	ldr	r3, [sp, #32]
 800980c:	3301      	adds	r3, #1
 800980e:	9308      	str	r3, [sp, #32]
 8009810:	f108 0801 	add.w	r8, r8, #1
 8009814:	2301      	movs	r3, #1
 8009816:	930a      	str	r3, [sp, #40]	@ 0x28
 8009818:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800981a:	2b00      	cmp	r3, #0
 800981c:	f000 81b0 	beq.w	8009b80 <_dtoa_r+0xb48>
 8009820:	6923      	ldr	r3, [r4, #16]
 8009822:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8009826:	6918      	ldr	r0, [r3, #16]
 8009828:	f000 fb72 	bl	8009f10 <__hi0bits>
 800982c:	f1c0 0020 	rsb	r0, r0, #32
 8009830:	9b08      	ldr	r3, [sp, #32]
 8009832:	4418      	add	r0, r3
 8009834:	f010 001f 	ands.w	r0, r0, #31
 8009838:	d077      	beq.n	800992a <_dtoa_r+0x8f2>
 800983a:	f1c0 0320 	rsb	r3, r0, #32
 800983e:	2b04      	cmp	r3, #4
 8009840:	dd6b      	ble.n	800991a <_dtoa_r+0x8e2>
 8009842:	9b08      	ldr	r3, [sp, #32]
 8009844:	f1c0 001c 	rsb	r0, r0, #28
 8009848:	4403      	add	r3, r0
 800984a:	4480      	add	r8, r0
 800984c:	4406      	add	r6, r0
 800984e:	9308      	str	r3, [sp, #32]
 8009850:	f1b8 0f00 	cmp.w	r8, #0
 8009854:	dd05      	ble.n	8009862 <_dtoa_r+0x82a>
 8009856:	4649      	mov	r1, r9
 8009858:	4642      	mov	r2, r8
 800985a:	4658      	mov	r0, fp
 800985c:	f000 fcbe 	bl	800a1dc <__lshift>
 8009860:	4681      	mov	r9, r0
 8009862:	9b08      	ldr	r3, [sp, #32]
 8009864:	2b00      	cmp	r3, #0
 8009866:	dd05      	ble.n	8009874 <_dtoa_r+0x83c>
 8009868:	4621      	mov	r1, r4
 800986a:	461a      	mov	r2, r3
 800986c:	4658      	mov	r0, fp
 800986e:	f000 fcb5 	bl	800a1dc <__lshift>
 8009872:	4604      	mov	r4, r0
 8009874:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8009876:	2b00      	cmp	r3, #0
 8009878:	d059      	beq.n	800992e <_dtoa_r+0x8f6>
 800987a:	4621      	mov	r1, r4
 800987c:	4648      	mov	r0, r9
 800987e:	f000 fd19 	bl	800a2b4 <__mcmp>
 8009882:	2800      	cmp	r0, #0
 8009884:	da53      	bge.n	800992e <_dtoa_r+0x8f6>
 8009886:	1e7b      	subs	r3, r7, #1
 8009888:	9304      	str	r3, [sp, #16]
 800988a:	4649      	mov	r1, r9
 800988c:	2300      	movs	r3, #0
 800988e:	220a      	movs	r2, #10
 8009890:	4658      	mov	r0, fp
 8009892:	f000 faf7 	bl	8009e84 <__multadd>
 8009896:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009898:	4681      	mov	r9, r0
 800989a:	2b00      	cmp	r3, #0
 800989c:	f000 8172 	beq.w	8009b84 <_dtoa_r+0xb4c>
 80098a0:	2300      	movs	r3, #0
 80098a2:	4629      	mov	r1, r5
 80098a4:	220a      	movs	r2, #10
 80098a6:	4658      	mov	r0, fp
 80098a8:	f000 faec 	bl	8009e84 <__multadd>
 80098ac:	9b00      	ldr	r3, [sp, #0]
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	4605      	mov	r5, r0
 80098b2:	dc67      	bgt.n	8009984 <_dtoa_r+0x94c>
 80098b4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80098b6:	2b02      	cmp	r3, #2
 80098b8:	dc41      	bgt.n	800993e <_dtoa_r+0x906>
 80098ba:	e063      	b.n	8009984 <_dtoa_r+0x94c>
 80098bc:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80098be:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 80098c2:	e746      	b.n	8009752 <_dtoa_r+0x71a>
 80098c4:	9b07      	ldr	r3, [sp, #28]
 80098c6:	1e5c      	subs	r4, r3, #1
 80098c8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80098ca:	42a3      	cmp	r3, r4
 80098cc:	bfbf      	itttt	lt
 80098ce:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 80098d0:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 80098d2:	940a      	strlt	r4, [sp, #40]	@ 0x28
 80098d4:	1ae3      	sublt	r3, r4, r3
 80098d6:	bfb4      	ite	lt
 80098d8:	18d2      	addlt	r2, r2, r3
 80098da:	1b1c      	subge	r4, r3, r4
 80098dc:	9b07      	ldr	r3, [sp, #28]
 80098de:	bfbc      	itt	lt
 80098e0:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 80098e2:	2400      	movlt	r4, #0
 80098e4:	2b00      	cmp	r3, #0
 80098e6:	bfb5      	itete	lt
 80098e8:	eba8 0603 	sublt.w	r6, r8, r3
 80098ec:	9b07      	ldrge	r3, [sp, #28]
 80098ee:	2300      	movlt	r3, #0
 80098f0:	4646      	movge	r6, r8
 80098f2:	e730      	b.n	8009756 <_dtoa_r+0x71e>
 80098f4:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 80098f6:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 80098f8:	4646      	mov	r6, r8
 80098fa:	e735      	b.n	8009768 <_dtoa_r+0x730>
 80098fc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80098fe:	e75c      	b.n	80097ba <_dtoa_r+0x782>
 8009900:	2300      	movs	r3, #0
 8009902:	e788      	b.n	8009816 <_dtoa_r+0x7de>
 8009904:	3fe00000 	.word	0x3fe00000
 8009908:	40240000 	.word	0x40240000
 800990c:	40140000 	.word	0x40140000
 8009910:	9b02      	ldr	r3, [sp, #8]
 8009912:	e780      	b.n	8009816 <_dtoa_r+0x7de>
 8009914:	2300      	movs	r3, #0
 8009916:	930a      	str	r3, [sp, #40]	@ 0x28
 8009918:	e782      	b.n	8009820 <_dtoa_r+0x7e8>
 800991a:	d099      	beq.n	8009850 <_dtoa_r+0x818>
 800991c:	9a08      	ldr	r2, [sp, #32]
 800991e:	331c      	adds	r3, #28
 8009920:	441a      	add	r2, r3
 8009922:	4498      	add	r8, r3
 8009924:	441e      	add	r6, r3
 8009926:	9208      	str	r2, [sp, #32]
 8009928:	e792      	b.n	8009850 <_dtoa_r+0x818>
 800992a:	4603      	mov	r3, r0
 800992c:	e7f6      	b.n	800991c <_dtoa_r+0x8e4>
 800992e:	9b07      	ldr	r3, [sp, #28]
 8009930:	9704      	str	r7, [sp, #16]
 8009932:	2b00      	cmp	r3, #0
 8009934:	dc20      	bgt.n	8009978 <_dtoa_r+0x940>
 8009936:	9300      	str	r3, [sp, #0]
 8009938:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800993a:	2b02      	cmp	r3, #2
 800993c:	dd1e      	ble.n	800997c <_dtoa_r+0x944>
 800993e:	9b00      	ldr	r3, [sp, #0]
 8009940:	2b00      	cmp	r3, #0
 8009942:	f47f aec0 	bne.w	80096c6 <_dtoa_r+0x68e>
 8009946:	4621      	mov	r1, r4
 8009948:	2205      	movs	r2, #5
 800994a:	4658      	mov	r0, fp
 800994c:	f000 fa9a 	bl	8009e84 <__multadd>
 8009950:	4601      	mov	r1, r0
 8009952:	4604      	mov	r4, r0
 8009954:	4648      	mov	r0, r9
 8009956:	f000 fcad 	bl	800a2b4 <__mcmp>
 800995a:	2800      	cmp	r0, #0
 800995c:	f77f aeb3 	ble.w	80096c6 <_dtoa_r+0x68e>
 8009960:	4656      	mov	r6, sl
 8009962:	2331      	movs	r3, #49	@ 0x31
 8009964:	f806 3b01 	strb.w	r3, [r6], #1
 8009968:	9b04      	ldr	r3, [sp, #16]
 800996a:	3301      	adds	r3, #1
 800996c:	9304      	str	r3, [sp, #16]
 800996e:	e6ae      	b.n	80096ce <_dtoa_r+0x696>
 8009970:	9c07      	ldr	r4, [sp, #28]
 8009972:	9704      	str	r7, [sp, #16]
 8009974:	4625      	mov	r5, r4
 8009976:	e7f3      	b.n	8009960 <_dtoa_r+0x928>
 8009978:	9b07      	ldr	r3, [sp, #28]
 800997a:	9300      	str	r3, [sp, #0]
 800997c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800997e:	2b00      	cmp	r3, #0
 8009980:	f000 8104 	beq.w	8009b8c <_dtoa_r+0xb54>
 8009984:	2e00      	cmp	r6, #0
 8009986:	dd05      	ble.n	8009994 <_dtoa_r+0x95c>
 8009988:	4629      	mov	r1, r5
 800998a:	4632      	mov	r2, r6
 800998c:	4658      	mov	r0, fp
 800998e:	f000 fc25 	bl	800a1dc <__lshift>
 8009992:	4605      	mov	r5, r0
 8009994:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009996:	2b00      	cmp	r3, #0
 8009998:	d05a      	beq.n	8009a50 <_dtoa_r+0xa18>
 800999a:	6869      	ldr	r1, [r5, #4]
 800999c:	4658      	mov	r0, fp
 800999e:	f000 fa0f 	bl	8009dc0 <_Balloc>
 80099a2:	4606      	mov	r6, r0
 80099a4:	b928      	cbnz	r0, 80099b2 <_dtoa_r+0x97a>
 80099a6:	4b84      	ldr	r3, [pc, #528]	@ (8009bb8 <_dtoa_r+0xb80>)
 80099a8:	4602      	mov	r2, r0
 80099aa:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80099ae:	f7ff bb5a 	b.w	8009066 <_dtoa_r+0x2e>
 80099b2:	692a      	ldr	r2, [r5, #16]
 80099b4:	3202      	adds	r2, #2
 80099b6:	0092      	lsls	r2, r2, #2
 80099b8:	f105 010c 	add.w	r1, r5, #12
 80099bc:	300c      	adds	r0, #12
 80099be:	f001 f975 	bl	800acac <memcpy>
 80099c2:	2201      	movs	r2, #1
 80099c4:	4631      	mov	r1, r6
 80099c6:	4658      	mov	r0, fp
 80099c8:	f000 fc08 	bl	800a1dc <__lshift>
 80099cc:	f10a 0301 	add.w	r3, sl, #1
 80099d0:	9307      	str	r3, [sp, #28]
 80099d2:	9b00      	ldr	r3, [sp, #0]
 80099d4:	4453      	add	r3, sl
 80099d6:	930b      	str	r3, [sp, #44]	@ 0x2c
 80099d8:	9b02      	ldr	r3, [sp, #8]
 80099da:	f003 0301 	and.w	r3, r3, #1
 80099de:	462f      	mov	r7, r5
 80099e0:	930a      	str	r3, [sp, #40]	@ 0x28
 80099e2:	4605      	mov	r5, r0
 80099e4:	9b07      	ldr	r3, [sp, #28]
 80099e6:	4621      	mov	r1, r4
 80099e8:	3b01      	subs	r3, #1
 80099ea:	4648      	mov	r0, r9
 80099ec:	9300      	str	r3, [sp, #0]
 80099ee:	f7ff fa9a 	bl	8008f26 <quorem>
 80099f2:	4639      	mov	r1, r7
 80099f4:	9002      	str	r0, [sp, #8]
 80099f6:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80099fa:	4648      	mov	r0, r9
 80099fc:	f000 fc5a 	bl	800a2b4 <__mcmp>
 8009a00:	462a      	mov	r2, r5
 8009a02:	9008      	str	r0, [sp, #32]
 8009a04:	4621      	mov	r1, r4
 8009a06:	4658      	mov	r0, fp
 8009a08:	f000 fc70 	bl	800a2ec <__mdiff>
 8009a0c:	68c2      	ldr	r2, [r0, #12]
 8009a0e:	4606      	mov	r6, r0
 8009a10:	bb02      	cbnz	r2, 8009a54 <_dtoa_r+0xa1c>
 8009a12:	4601      	mov	r1, r0
 8009a14:	4648      	mov	r0, r9
 8009a16:	f000 fc4d 	bl	800a2b4 <__mcmp>
 8009a1a:	4602      	mov	r2, r0
 8009a1c:	4631      	mov	r1, r6
 8009a1e:	4658      	mov	r0, fp
 8009a20:	920e      	str	r2, [sp, #56]	@ 0x38
 8009a22:	f000 fa0d 	bl	8009e40 <_Bfree>
 8009a26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009a28:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8009a2a:	9e07      	ldr	r6, [sp, #28]
 8009a2c:	ea43 0102 	orr.w	r1, r3, r2
 8009a30:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009a32:	4319      	orrs	r1, r3
 8009a34:	d110      	bne.n	8009a58 <_dtoa_r+0xa20>
 8009a36:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009a3a:	d029      	beq.n	8009a90 <_dtoa_r+0xa58>
 8009a3c:	9b08      	ldr	r3, [sp, #32]
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	dd02      	ble.n	8009a48 <_dtoa_r+0xa10>
 8009a42:	9b02      	ldr	r3, [sp, #8]
 8009a44:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8009a48:	9b00      	ldr	r3, [sp, #0]
 8009a4a:	f883 8000 	strb.w	r8, [r3]
 8009a4e:	e63f      	b.n	80096d0 <_dtoa_r+0x698>
 8009a50:	4628      	mov	r0, r5
 8009a52:	e7bb      	b.n	80099cc <_dtoa_r+0x994>
 8009a54:	2201      	movs	r2, #1
 8009a56:	e7e1      	b.n	8009a1c <_dtoa_r+0x9e4>
 8009a58:	9b08      	ldr	r3, [sp, #32]
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	db04      	blt.n	8009a68 <_dtoa_r+0xa30>
 8009a5e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009a60:	430b      	orrs	r3, r1
 8009a62:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009a64:	430b      	orrs	r3, r1
 8009a66:	d120      	bne.n	8009aaa <_dtoa_r+0xa72>
 8009a68:	2a00      	cmp	r2, #0
 8009a6a:	dded      	ble.n	8009a48 <_dtoa_r+0xa10>
 8009a6c:	4649      	mov	r1, r9
 8009a6e:	2201      	movs	r2, #1
 8009a70:	4658      	mov	r0, fp
 8009a72:	f000 fbb3 	bl	800a1dc <__lshift>
 8009a76:	4621      	mov	r1, r4
 8009a78:	4681      	mov	r9, r0
 8009a7a:	f000 fc1b 	bl	800a2b4 <__mcmp>
 8009a7e:	2800      	cmp	r0, #0
 8009a80:	dc03      	bgt.n	8009a8a <_dtoa_r+0xa52>
 8009a82:	d1e1      	bne.n	8009a48 <_dtoa_r+0xa10>
 8009a84:	f018 0f01 	tst.w	r8, #1
 8009a88:	d0de      	beq.n	8009a48 <_dtoa_r+0xa10>
 8009a8a:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009a8e:	d1d8      	bne.n	8009a42 <_dtoa_r+0xa0a>
 8009a90:	9a00      	ldr	r2, [sp, #0]
 8009a92:	2339      	movs	r3, #57	@ 0x39
 8009a94:	7013      	strb	r3, [r2, #0]
 8009a96:	4633      	mov	r3, r6
 8009a98:	461e      	mov	r6, r3
 8009a9a:	3b01      	subs	r3, #1
 8009a9c:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8009aa0:	2a39      	cmp	r2, #57	@ 0x39
 8009aa2:	d052      	beq.n	8009b4a <_dtoa_r+0xb12>
 8009aa4:	3201      	adds	r2, #1
 8009aa6:	701a      	strb	r2, [r3, #0]
 8009aa8:	e612      	b.n	80096d0 <_dtoa_r+0x698>
 8009aaa:	2a00      	cmp	r2, #0
 8009aac:	dd07      	ble.n	8009abe <_dtoa_r+0xa86>
 8009aae:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8009ab2:	d0ed      	beq.n	8009a90 <_dtoa_r+0xa58>
 8009ab4:	9a00      	ldr	r2, [sp, #0]
 8009ab6:	f108 0301 	add.w	r3, r8, #1
 8009aba:	7013      	strb	r3, [r2, #0]
 8009abc:	e608      	b.n	80096d0 <_dtoa_r+0x698>
 8009abe:	9b07      	ldr	r3, [sp, #28]
 8009ac0:	9a07      	ldr	r2, [sp, #28]
 8009ac2:	f803 8c01 	strb.w	r8, [r3, #-1]
 8009ac6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009ac8:	4293      	cmp	r3, r2
 8009aca:	d028      	beq.n	8009b1e <_dtoa_r+0xae6>
 8009acc:	4649      	mov	r1, r9
 8009ace:	2300      	movs	r3, #0
 8009ad0:	220a      	movs	r2, #10
 8009ad2:	4658      	mov	r0, fp
 8009ad4:	f000 f9d6 	bl	8009e84 <__multadd>
 8009ad8:	42af      	cmp	r7, r5
 8009ada:	4681      	mov	r9, r0
 8009adc:	f04f 0300 	mov.w	r3, #0
 8009ae0:	f04f 020a 	mov.w	r2, #10
 8009ae4:	4639      	mov	r1, r7
 8009ae6:	4658      	mov	r0, fp
 8009ae8:	d107      	bne.n	8009afa <_dtoa_r+0xac2>
 8009aea:	f000 f9cb 	bl	8009e84 <__multadd>
 8009aee:	4607      	mov	r7, r0
 8009af0:	4605      	mov	r5, r0
 8009af2:	9b07      	ldr	r3, [sp, #28]
 8009af4:	3301      	adds	r3, #1
 8009af6:	9307      	str	r3, [sp, #28]
 8009af8:	e774      	b.n	80099e4 <_dtoa_r+0x9ac>
 8009afa:	f000 f9c3 	bl	8009e84 <__multadd>
 8009afe:	4629      	mov	r1, r5
 8009b00:	4607      	mov	r7, r0
 8009b02:	2300      	movs	r3, #0
 8009b04:	220a      	movs	r2, #10
 8009b06:	4658      	mov	r0, fp
 8009b08:	f000 f9bc 	bl	8009e84 <__multadd>
 8009b0c:	4605      	mov	r5, r0
 8009b0e:	e7f0      	b.n	8009af2 <_dtoa_r+0xaba>
 8009b10:	9b00      	ldr	r3, [sp, #0]
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	bfcc      	ite	gt
 8009b16:	461e      	movgt	r6, r3
 8009b18:	2601      	movle	r6, #1
 8009b1a:	4456      	add	r6, sl
 8009b1c:	2700      	movs	r7, #0
 8009b1e:	4649      	mov	r1, r9
 8009b20:	2201      	movs	r2, #1
 8009b22:	4658      	mov	r0, fp
 8009b24:	f000 fb5a 	bl	800a1dc <__lshift>
 8009b28:	4621      	mov	r1, r4
 8009b2a:	4681      	mov	r9, r0
 8009b2c:	f000 fbc2 	bl	800a2b4 <__mcmp>
 8009b30:	2800      	cmp	r0, #0
 8009b32:	dcb0      	bgt.n	8009a96 <_dtoa_r+0xa5e>
 8009b34:	d102      	bne.n	8009b3c <_dtoa_r+0xb04>
 8009b36:	f018 0f01 	tst.w	r8, #1
 8009b3a:	d1ac      	bne.n	8009a96 <_dtoa_r+0xa5e>
 8009b3c:	4633      	mov	r3, r6
 8009b3e:	461e      	mov	r6, r3
 8009b40:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009b44:	2a30      	cmp	r2, #48	@ 0x30
 8009b46:	d0fa      	beq.n	8009b3e <_dtoa_r+0xb06>
 8009b48:	e5c2      	b.n	80096d0 <_dtoa_r+0x698>
 8009b4a:	459a      	cmp	sl, r3
 8009b4c:	d1a4      	bne.n	8009a98 <_dtoa_r+0xa60>
 8009b4e:	9b04      	ldr	r3, [sp, #16]
 8009b50:	3301      	adds	r3, #1
 8009b52:	9304      	str	r3, [sp, #16]
 8009b54:	2331      	movs	r3, #49	@ 0x31
 8009b56:	f88a 3000 	strb.w	r3, [sl]
 8009b5a:	e5b9      	b.n	80096d0 <_dtoa_r+0x698>
 8009b5c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8009b5e:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 8009bbc <_dtoa_r+0xb84>
 8009b62:	b11b      	cbz	r3, 8009b6c <_dtoa_r+0xb34>
 8009b64:	f10a 0308 	add.w	r3, sl, #8
 8009b68:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8009b6a:	6013      	str	r3, [r2, #0]
 8009b6c:	4650      	mov	r0, sl
 8009b6e:	b019      	add	sp, #100	@ 0x64
 8009b70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b74:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009b76:	2b01      	cmp	r3, #1
 8009b78:	f77f ae37 	ble.w	80097ea <_dtoa_r+0x7b2>
 8009b7c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009b7e:	930a      	str	r3, [sp, #40]	@ 0x28
 8009b80:	2001      	movs	r0, #1
 8009b82:	e655      	b.n	8009830 <_dtoa_r+0x7f8>
 8009b84:	9b00      	ldr	r3, [sp, #0]
 8009b86:	2b00      	cmp	r3, #0
 8009b88:	f77f aed6 	ble.w	8009938 <_dtoa_r+0x900>
 8009b8c:	4656      	mov	r6, sl
 8009b8e:	4621      	mov	r1, r4
 8009b90:	4648      	mov	r0, r9
 8009b92:	f7ff f9c8 	bl	8008f26 <quorem>
 8009b96:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8009b9a:	f806 8b01 	strb.w	r8, [r6], #1
 8009b9e:	9b00      	ldr	r3, [sp, #0]
 8009ba0:	eba6 020a 	sub.w	r2, r6, sl
 8009ba4:	4293      	cmp	r3, r2
 8009ba6:	ddb3      	ble.n	8009b10 <_dtoa_r+0xad8>
 8009ba8:	4649      	mov	r1, r9
 8009baa:	2300      	movs	r3, #0
 8009bac:	220a      	movs	r2, #10
 8009bae:	4658      	mov	r0, fp
 8009bb0:	f000 f968 	bl	8009e84 <__multadd>
 8009bb4:	4681      	mov	r9, r0
 8009bb6:	e7ea      	b.n	8009b8e <_dtoa_r+0xb56>
 8009bb8:	0800d04c 	.word	0x0800d04c
 8009bbc:	0800cfd0 	.word	0x0800cfd0

08009bc0 <_free_r>:
 8009bc0:	b538      	push	{r3, r4, r5, lr}
 8009bc2:	4605      	mov	r5, r0
 8009bc4:	2900      	cmp	r1, #0
 8009bc6:	d041      	beq.n	8009c4c <_free_r+0x8c>
 8009bc8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009bcc:	1f0c      	subs	r4, r1, #4
 8009bce:	2b00      	cmp	r3, #0
 8009bd0:	bfb8      	it	lt
 8009bd2:	18e4      	addlt	r4, r4, r3
 8009bd4:	f000 f8e8 	bl	8009da8 <__malloc_lock>
 8009bd8:	4a1d      	ldr	r2, [pc, #116]	@ (8009c50 <_free_r+0x90>)
 8009bda:	6813      	ldr	r3, [r2, #0]
 8009bdc:	b933      	cbnz	r3, 8009bec <_free_r+0x2c>
 8009bde:	6063      	str	r3, [r4, #4]
 8009be0:	6014      	str	r4, [r2, #0]
 8009be2:	4628      	mov	r0, r5
 8009be4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009be8:	f000 b8e4 	b.w	8009db4 <__malloc_unlock>
 8009bec:	42a3      	cmp	r3, r4
 8009bee:	d908      	bls.n	8009c02 <_free_r+0x42>
 8009bf0:	6820      	ldr	r0, [r4, #0]
 8009bf2:	1821      	adds	r1, r4, r0
 8009bf4:	428b      	cmp	r3, r1
 8009bf6:	bf01      	itttt	eq
 8009bf8:	6819      	ldreq	r1, [r3, #0]
 8009bfa:	685b      	ldreq	r3, [r3, #4]
 8009bfc:	1809      	addeq	r1, r1, r0
 8009bfe:	6021      	streq	r1, [r4, #0]
 8009c00:	e7ed      	b.n	8009bde <_free_r+0x1e>
 8009c02:	461a      	mov	r2, r3
 8009c04:	685b      	ldr	r3, [r3, #4]
 8009c06:	b10b      	cbz	r3, 8009c0c <_free_r+0x4c>
 8009c08:	42a3      	cmp	r3, r4
 8009c0a:	d9fa      	bls.n	8009c02 <_free_r+0x42>
 8009c0c:	6811      	ldr	r1, [r2, #0]
 8009c0e:	1850      	adds	r0, r2, r1
 8009c10:	42a0      	cmp	r0, r4
 8009c12:	d10b      	bne.n	8009c2c <_free_r+0x6c>
 8009c14:	6820      	ldr	r0, [r4, #0]
 8009c16:	4401      	add	r1, r0
 8009c18:	1850      	adds	r0, r2, r1
 8009c1a:	4283      	cmp	r3, r0
 8009c1c:	6011      	str	r1, [r2, #0]
 8009c1e:	d1e0      	bne.n	8009be2 <_free_r+0x22>
 8009c20:	6818      	ldr	r0, [r3, #0]
 8009c22:	685b      	ldr	r3, [r3, #4]
 8009c24:	6053      	str	r3, [r2, #4]
 8009c26:	4408      	add	r0, r1
 8009c28:	6010      	str	r0, [r2, #0]
 8009c2a:	e7da      	b.n	8009be2 <_free_r+0x22>
 8009c2c:	d902      	bls.n	8009c34 <_free_r+0x74>
 8009c2e:	230c      	movs	r3, #12
 8009c30:	602b      	str	r3, [r5, #0]
 8009c32:	e7d6      	b.n	8009be2 <_free_r+0x22>
 8009c34:	6820      	ldr	r0, [r4, #0]
 8009c36:	1821      	adds	r1, r4, r0
 8009c38:	428b      	cmp	r3, r1
 8009c3a:	bf04      	itt	eq
 8009c3c:	6819      	ldreq	r1, [r3, #0]
 8009c3e:	685b      	ldreq	r3, [r3, #4]
 8009c40:	6063      	str	r3, [r4, #4]
 8009c42:	bf04      	itt	eq
 8009c44:	1809      	addeq	r1, r1, r0
 8009c46:	6021      	streq	r1, [r4, #0]
 8009c48:	6054      	str	r4, [r2, #4]
 8009c4a:	e7ca      	b.n	8009be2 <_free_r+0x22>
 8009c4c:	bd38      	pop	{r3, r4, r5, pc}
 8009c4e:	bf00      	nop
 8009c50:	20000864 	.word	0x20000864

08009c54 <malloc>:
 8009c54:	4b02      	ldr	r3, [pc, #8]	@ (8009c60 <malloc+0xc>)
 8009c56:	4601      	mov	r1, r0
 8009c58:	6818      	ldr	r0, [r3, #0]
 8009c5a:	f000 b825 	b.w	8009ca8 <_malloc_r>
 8009c5e:	bf00      	nop
 8009c60:	200000bc 	.word	0x200000bc

08009c64 <sbrk_aligned>:
 8009c64:	b570      	push	{r4, r5, r6, lr}
 8009c66:	4e0f      	ldr	r6, [pc, #60]	@ (8009ca4 <sbrk_aligned+0x40>)
 8009c68:	460c      	mov	r4, r1
 8009c6a:	6831      	ldr	r1, [r6, #0]
 8009c6c:	4605      	mov	r5, r0
 8009c6e:	b911      	cbnz	r1, 8009c76 <sbrk_aligned+0x12>
 8009c70:	f001 f80c 	bl	800ac8c <_sbrk_r>
 8009c74:	6030      	str	r0, [r6, #0]
 8009c76:	4621      	mov	r1, r4
 8009c78:	4628      	mov	r0, r5
 8009c7a:	f001 f807 	bl	800ac8c <_sbrk_r>
 8009c7e:	1c43      	adds	r3, r0, #1
 8009c80:	d103      	bne.n	8009c8a <sbrk_aligned+0x26>
 8009c82:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8009c86:	4620      	mov	r0, r4
 8009c88:	bd70      	pop	{r4, r5, r6, pc}
 8009c8a:	1cc4      	adds	r4, r0, #3
 8009c8c:	f024 0403 	bic.w	r4, r4, #3
 8009c90:	42a0      	cmp	r0, r4
 8009c92:	d0f8      	beq.n	8009c86 <sbrk_aligned+0x22>
 8009c94:	1a21      	subs	r1, r4, r0
 8009c96:	4628      	mov	r0, r5
 8009c98:	f000 fff8 	bl	800ac8c <_sbrk_r>
 8009c9c:	3001      	adds	r0, #1
 8009c9e:	d1f2      	bne.n	8009c86 <sbrk_aligned+0x22>
 8009ca0:	e7ef      	b.n	8009c82 <sbrk_aligned+0x1e>
 8009ca2:	bf00      	nop
 8009ca4:	20000860 	.word	0x20000860

08009ca8 <_malloc_r>:
 8009ca8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009cac:	1ccd      	adds	r5, r1, #3
 8009cae:	f025 0503 	bic.w	r5, r5, #3
 8009cb2:	3508      	adds	r5, #8
 8009cb4:	2d0c      	cmp	r5, #12
 8009cb6:	bf38      	it	cc
 8009cb8:	250c      	movcc	r5, #12
 8009cba:	2d00      	cmp	r5, #0
 8009cbc:	4606      	mov	r6, r0
 8009cbe:	db01      	blt.n	8009cc4 <_malloc_r+0x1c>
 8009cc0:	42a9      	cmp	r1, r5
 8009cc2:	d904      	bls.n	8009cce <_malloc_r+0x26>
 8009cc4:	230c      	movs	r3, #12
 8009cc6:	6033      	str	r3, [r6, #0]
 8009cc8:	2000      	movs	r0, #0
 8009cca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009cce:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009da4 <_malloc_r+0xfc>
 8009cd2:	f000 f869 	bl	8009da8 <__malloc_lock>
 8009cd6:	f8d8 3000 	ldr.w	r3, [r8]
 8009cda:	461c      	mov	r4, r3
 8009cdc:	bb44      	cbnz	r4, 8009d30 <_malloc_r+0x88>
 8009cde:	4629      	mov	r1, r5
 8009ce0:	4630      	mov	r0, r6
 8009ce2:	f7ff ffbf 	bl	8009c64 <sbrk_aligned>
 8009ce6:	1c43      	adds	r3, r0, #1
 8009ce8:	4604      	mov	r4, r0
 8009cea:	d158      	bne.n	8009d9e <_malloc_r+0xf6>
 8009cec:	f8d8 4000 	ldr.w	r4, [r8]
 8009cf0:	4627      	mov	r7, r4
 8009cf2:	2f00      	cmp	r7, #0
 8009cf4:	d143      	bne.n	8009d7e <_malloc_r+0xd6>
 8009cf6:	2c00      	cmp	r4, #0
 8009cf8:	d04b      	beq.n	8009d92 <_malloc_r+0xea>
 8009cfa:	6823      	ldr	r3, [r4, #0]
 8009cfc:	4639      	mov	r1, r7
 8009cfe:	4630      	mov	r0, r6
 8009d00:	eb04 0903 	add.w	r9, r4, r3
 8009d04:	f000 ffc2 	bl	800ac8c <_sbrk_r>
 8009d08:	4581      	cmp	r9, r0
 8009d0a:	d142      	bne.n	8009d92 <_malloc_r+0xea>
 8009d0c:	6821      	ldr	r1, [r4, #0]
 8009d0e:	1a6d      	subs	r5, r5, r1
 8009d10:	4629      	mov	r1, r5
 8009d12:	4630      	mov	r0, r6
 8009d14:	f7ff ffa6 	bl	8009c64 <sbrk_aligned>
 8009d18:	3001      	adds	r0, #1
 8009d1a:	d03a      	beq.n	8009d92 <_malloc_r+0xea>
 8009d1c:	6823      	ldr	r3, [r4, #0]
 8009d1e:	442b      	add	r3, r5
 8009d20:	6023      	str	r3, [r4, #0]
 8009d22:	f8d8 3000 	ldr.w	r3, [r8]
 8009d26:	685a      	ldr	r2, [r3, #4]
 8009d28:	bb62      	cbnz	r2, 8009d84 <_malloc_r+0xdc>
 8009d2a:	f8c8 7000 	str.w	r7, [r8]
 8009d2e:	e00f      	b.n	8009d50 <_malloc_r+0xa8>
 8009d30:	6822      	ldr	r2, [r4, #0]
 8009d32:	1b52      	subs	r2, r2, r5
 8009d34:	d420      	bmi.n	8009d78 <_malloc_r+0xd0>
 8009d36:	2a0b      	cmp	r2, #11
 8009d38:	d917      	bls.n	8009d6a <_malloc_r+0xc2>
 8009d3a:	1961      	adds	r1, r4, r5
 8009d3c:	42a3      	cmp	r3, r4
 8009d3e:	6025      	str	r5, [r4, #0]
 8009d40:	bf18      	it	ne
 8009d42:	6059      	strne	r1, [r3, #4]
 8009d44:	6863      	ldr	r3, [r4, #4]
 8009d46:	bf08      	it	eq
 8009d48:	f8c8 1000 	streq.w	r1, [r8]
 8009d4c:	5162      	str	r2, [r4, r5]
 8009d4e:	604b      	str	r3, [r1, #4]
 8009d50:	4630      	mov	r0, r6
 8009d52:	f000 f82f 	bl	8009db4 <__malloc_unlock>
 8009d56:	f104 000b 	add.w	r0, r4, #11
 8009d5a:	1d23      	adds	r3, r4, #4
 8009d5c:	f020 0007 	bic.w	r0, r0, #7
 8009d60:	1ac2      	subs	r2, r0, r3
 8009d62:	bf1c      	itt	ne
 8009d64:	1a1b      	subne	r3, r3, r0
 8009d66:	50a3      	strne	r3, [r4, r2]
 8009d68:	e7af      	b.n	8009cca <_malloc_r+0x22>
 8009d6a:	6862      	ldr	r2, [r4, #4]
 8009d6c:	42a3      	cmp	r3, r4
 8009d6e:	bf0c      	ite	eq
 8009d70:	f8c8 2000 	streq.w	r2, [r8]
 8009d74:	605a      	strne	r2, [r3, #4]
 8009d76:	e7eb      	b.n	8009d50 <_malloc_r+0xa8>
 8009d78:	4623      	mov	r3, r4
 8009d7a:	6864      	ldr	r4, [r4, #4]
 8009d7c:	e7ae      	b.n	8009cdc <_malloc_r+0x34>
 8009d7e:	463c      	mov	r4, r7
 8009d80:	687f      	ldr	r7, [r7, #4]
 8009d82:	e7b6      	b.n	8009cf2 <_malloc_r+0x4a>
 8009d84:	461a      	mov	r2, r3
 8009d86:	685b      	ldr	r3, [r3, #4]
 8009d88:	42a3      	cmp	r3, r4
 8009d8a:	d1fb      	bne.n	8009d84 <_malloc_r+0xdc>
 8009d8c:	2300      	movs	r3, #0
 8009d8e:	6053      	str	r3, [r2, #4]
 8009d90:	e7de      	b.n	8009d50 <_malloc_r+0xa8>
 8009d92:	230c      	movs	r3, #12
 8009d94:	6033      	str	r3, [r6, #0]
 8009d96:	4630      	mov	r0, r6
 8009d98:	f000 f80c 	bl	8009db4 <__malloc_unlock>
 8009d9c:	e794      	b.n	8009cc8 <_malloc_r+0x20>
 8009d9e:	6005      	str	r5, [r0, #0]
 8009da0:	e7d6      	b.n	8009d50 <_malloc_r+0xa8>
 8009da2:	bf00      	nop
 8009da4:	20000864 	.word	0x20000864

08009da8 <__malloc_lock>:
 8009da8:	4801      	ldr	r0, [pc, #4]	@ (8009db0 <__malloc_lock+0x8>)
 8009daa:	f7ff b8ba 	b.w	8008f22 <__retarget_lock_acquire_recursive>
 8009dae:	bf00      	nop
 8009db0:	2000085c 	.word	0x2000085c

08009db4 <__malloc_unlock>:
 8009db4:	4801      	ldr	r0, [pc, #4]	@ (8009dbc <__malloc_unlock+0x8>)
 8009db6:	f7ff b8b5 	b.w	8008f24 <__retarget_lock_release_recursive>
 8009dba:	bf00      	nop
 8009dbc:	2000085c 	.word	0x2000085c

08009dc0 <_Balloc>:
 8009dc0:	b570      	push	{r4, r5, r6, lr}
 8009dc2:	69c6      	ldr	r6, [r0, #28]
 8009dc4:	4604      	mov	r4, r0
 8009dc6:	460d      	mov	r5, r1
 8009dc8:	b976      	cbnz	r6, 8009de8 <_Balloc+0x28>
 8009dca:	2010      	movs	r0, #16
 8009dcc:	f7ff ff42 	bl	8009c54 <malloc>
 8009dd0:	4602      	mov	r2, r0
 8009dd2:	61e0      	str	r0, [r4, #28]
 8009dd4:	b920      	cbnz	r0, 8009de0 <_Balloc+0x20>
 8009dd6:	4b18      	ldr	r3, [pc, #96]	@ (8009e38 <_Balloc+0x78>)
 8009dd8:	4818      	ldr	r0, [pc, #96]	@ (8009e3c <_Balloc+0x7c>)
 8009dda:	216b      	movs	r1, #107	@ 0x6b
 8009ddc:	f000 ff74 	bl	800acc8 <__assert_func>
 8009de0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009de4:	6006      	str	r6, [r0, #0]
 8009de6:	60c6      	str	r6, [r0, #12]
 8009de8:	69e6      	ldr	r6, [r4, #28]
 8009dea:	68f3      	ldr	r3, [r6, #12]
 8009dec:	b183      	cbz	r3, 8009e10 <_Balloc+0x50>
 8009dee:	69e3      	ldr	r3, [r4, #28]
 8009df0:	68db      	ldr	r3, [r3, #12]
 8009df2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8009df6:	b9b8      	cbnz	r0, 8009e28 <_Balloc+0x68>
 8009df8:	2101      	movs	r1, #1
 8009dfa:	fa01 f605 	lsl.w	r6, r1, r5
 8009dfe:	1d72      	adds	r2, r6, #5
 8009e00:	0092      	lsls	r2, r2, #2
 8009e02:	4620      	mov	r0, r4
 8009e04:	f000 ff7e 	bl	800ad04 <_calloc_r>
 8009e08:	b160      	cbz	r0, 8009e24 <_Balloc+0x64>
 8009e0a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8009e0e:	e00e      	b.n	8009e2e <_Balloc+0x6e>
 8009e10:	2221      	movs	r2, #33	@ 0x21
 8009e12:	2104      	movs	r1, #4
 8009e14:	4620      	mov	r0, r4
 8009e16:	f000 ff75 	bl	800ad04 <_calloc_r>
 8009e1a:	69e3      	ldr	r3, [r4, #28]
 8009e1c:	60f0      	str	r0, [r6, #12]
 8009e1e:	68db      	ldr	r3, [r3, #12]
 8009e20:	2b00      	cmp	r3, #0
 8009e22:	d1e4      	bne.n	8009dee <_Balloc+0x2e>
 8009e24:	2000      	movs	r0, #0
 8009e26:	bd70      	pop	{r4, r5, r6, pc}
 8009e28:	6802      	ldr	r2, [r0, #0]
 8009e2a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8009e2e:	2300      	movs	r3, #0
 8009e30:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8009e34:	e7f7      	b.n	8009e26 <_Balloc+0x66>
 8009e36:	bf00      	nop
 8009e38:	0800cfdd 	.word	0x0800cfdd
 8009e3c:	0800d05d 	.word	0x0800d05d

08009e40 <_Bfree>:
 8009e40:	b570      	push	{r4, r5, r6, lr}
 8009e42:	69c6      	ldr	r6, [r0, #28]
 8009e44:	4605      	mov	r5, r0
 8009e46:	460c      	mov	r4, r1
 8009e48:	b976      	cbnz	r6, 8009e68 <_Bfree+0x28>
 8009e4a:	2010      	movs	r0, #16
 8009e4c:	f7ff ff02 	bl	8009c54 <malloc>
 8009e50:	4602      	mov	r2, r0
 8009e52:	61e8      	str	r0, [r5, #28]
 8009e54:	b920      	cbnz	r0, 8009e60 <_Bfree+0x20>
 8009e56:	4b09      	ldr	r3, [pc, #36]	@ (8009e7c <_Bfree+0x3c>)
 8009e58:	4809      	ldr	r0, [pc, #36]	@ (8009e80 <_Bfree+0x40>)
 8009e5a:	218f      	movs	r1, #143	@ 0x8f
 8009e5c:	f000 ff34 	bl	800acc8 <__assert_func>
 8009e60:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8009e64:	6006      	str	r6, [r0, #0]
 8009e66:	60c6      	str	r6, [r0, #12]
 8009e68:	b13c      	cbz	r4, 8009e7a <_Bfree+0x3a>
 8009e6a:	69eb      	ldr	r3, [r5, #28]
 8009e6c:	6862      	ldr	r2, [r4, #4]
 8009e6e:	68db      	ldr	r3, [r3, #12]
 8009e70:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8009e74:	6021      	str	r1, [r4, #0]
 8009e76:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009e7a:	bd70      	pop	{r4, r5, r6, pc}
 8009e7c:	0800cfdd 	.word	0x0800cfdd
 8009e80:	0800d05d 	.word	0x0800d05d

08009e84 <__multadd>:
 8009e84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009e88:	690d      	ldr	r5, [r1, #16]
 8009e8a:	4607      	mov	r7, r0
 8009e8c:	460c      	mov	r4, r1
 8009e8e:	461e      	mov	r6, r3
 8009e90:	f101 0c14 	add.w	ip, r1, #20
 8009e94:	2000      	movs	r0, #0
 8009e96:	f8dc 3000 	ldr.w	r3, [ip]
 8009e9a:	b299      	uxth	r1, r3
 8009e9c:	fb02 6101 	mla	r1, r2, r1, r6
 8009ea0:	0c1e      	lsrs	r6, r3, #16
 8009ea2:	0c0b      	lsrs	r3, r1, #16
 8009ea4:	fb02 3306 	mla	r3, r2, r6, r3
 8009ea8:	b289      	uxth	r1, r1
 8009eaa:	3001      	adds	r0, #1
 8009eac:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009eb0:	4285      	cmp	r5, r0
 8009eb2:	f84c 1b04 	str.w	r1, [ip], #4
 8009eb6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009eba:	dcec      	bgt.n	8009e96 <__multadd+0x12>
 8009ebc:	b30e      	cbz	r6, 8009f02 <__multadd+0x7e>
 8009ebe:	68a3      	ldr	r3, [r4, #8]
 8009ec0:	42ab      	cmp	r3, r5
 8009ec2:	dc19      	bgt.n	8009ef8 <__multadd+0x74>
 8009ec4:	6861      	ldr	r1, [r4, #4]
 8009ec6:	4638      	mov	r0, r7
 8009ec8:	3101      	adds	r1, #1
 8009eca:	f7ff ff79 	bl	8009dc0 <_Balloc>
 8009ece:	4680      	mov	r8, r0
 8009ed0:	b928      	cbnz	r0, 8009ede <__multadd+0x5a>
 8009ed2:	4602      	mov	r2, r0
 8009ed4:	4b0c      	ldr	r3, [pc, #48]	@ (8009f08 <__multadd+0x84>)
 8009ed6:	480d      	ldr	r0, [pc, #52]	@ (8009f0c <__multadd+0x88>)
 8009ed8:	21ba      	movs	r1, #186	@ 0xba
 8009eda:	f000 fef5 	bl	800acc8 <__assert_func>
 8009ede:	6922      	ldr	r2, [r4, #16]
 8009ee0:	3202      	adds	r2, #2
 8009ee2:	f104 010c 	add.w	r1, r4, #12
 8009ee6:	0092      	lsls	r2, r2, #2
 8009ee8:	300c      	adds	r0, #12
 8009eea:	f000 fedf 	bl	800acac <memcpy>
 8009eee:	4621      	mov	r1, r4
 8009ef0:	4638      	mov	r0, r7
 8009ef2:	f7ff ffa5 	bl	8009e40 <_Bfree>
 8009ef6:	4644      	mov	r4, r8
 8009ef8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009efc:	3501      	adds	r5, #1
 8009efe:	615e      	str	r6, [r3, #20]
 8009f00:	6125      	str	r5, [r4, #16]
 8009f02:	4620      	mov	r0, r4
 8009f04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f08:	0800d04c 	.word	0x0800d04c
 8009f0c:	0800d05d 	.word	0x0800d05d

08009f10 <__hi0bits>:
 8009f10:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8009f14:	4603      	mov	r3, r0
 8009f16:	bf36      	itet	cc
 8009f18:	0403      	lslcc	r3, r0, #16
 8009f1a:	2000      	movcs	r0, #0
 8009f1c:	2010      	movcc	r0, #16
 8009f1e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8009f22:	bf3c      	itt	cc
 8009f24:	021b      	lslcc	r3, r3, #8
 8009f26:	3008      	addcc	r0, #8
 8009f28:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009f2c:	bf3c      	itt	cc
 8009f2e:	011b      	lslcc	r3, r3, #4
 8009f30:	3004      	addcc	r0, #4
 8009f32:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009f36:	bf3c      	itt	cc
 8009f38:	009b      	lslcc	r3, r3, #2
 8009f3a:	3002      	addcc	r0, #2
 8009f3c:	2b00      	cmp	r3, #0
 8009f3e:	db05      	blt.n	8009f4c <__hi0bits+0x3c>
 8009f40:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8009f44:	f100 0001 	add.w	r0, r0, #1
 8009f48:	bf08      	it	eq
 8009f4a:	2020      	moveq	r0, #32
 8009f4c:	4770      	bx	lr

08009f4e <__lo0bits>:
 8009f4e:	6803      	ldr	r3, [r0, #0]
 8009f50:	4602      	mov	r2, r0
 8009f52:	f013 0007 	ands.w	r0, r3, #7
 8009f56:	d00b      	beq.n	8009f70 <__lo0bits+0x22>
 8009f58:	07d9      	lsls	r1, r3, #31
 8009f5a:	d421      	bmi.n	8009fa0 <__lo0bits+0x52>
 8009f5c:	0798      	lsls	r0, r3, #30
 8009f5e:	bf49      	itett	mi
 8009f60:	085b      	lsrmi	r3, r3, #1
 8009f62:	089b      	lsrpl	r3, r3, #2
 8009f64:	2001      	movmi	r0, #1
 8009f66:	6013      	strmi	r3, [r2, #0]
 8009f68:	bf5c      	itt	pl
 8009f6a:	6013      	strpl	r3, [r2, #0]
 8009f6c:	2002      	movpl	r0, #2
 8009f6e:	4770      	bx	lr
 8009f70:	b299      	uxth	r1, r3
 8009f72:	b909      	cbnz	r1, 8009f78 <__lo0bits+0x2a>
 8009f74:	0c1b      	lsrs	r3, r3, #16
 8009f76:	2010      	movs	r0, #16
 8009f78:	b2d9      	uxtb	r1, r3
 8009f7a:	b909      	cbnz	r1, 8009f80 <__lo0bits+0x32>
 8009f7c:	3008      	adds	r0, #8
 8009f7e:	0a1b      	lsrs	r3, r3, #8
 8009f80:	0719      	lsls	r1, r3, #28
 8009f82:	bf04      	itt	eq
 8009f84:	091b      	lsreq	r3, r3, #4
 8009f86:	3004      	addeq	r0, #4
 8009f88:	0799      	lsls	r1, r3, #30
 8009f8a:	bf04      	itt	eq
 8009f8c:	089b      	lsreq	r3, r3, #2
 8009f8e:	3002      	addeq	r0, #2
 8009f90:	07d9      	lsls	r1, r3, #31
 8009f92:	d403      	bmi.n	8009f9c <__lo0bits+0x4e>
 8009f94:	085b      	lsrs	r3, r3, #1
 8009f96:	f100 0001 	add.w	r0, r0, #1
 8009f9a:	d003      	beq.n	8009fa4 <__lo0bits+0x56>
 8009f9c:	6013      	str	r3, [r2, #0]
 8009f9e:	4770      	bx	lr
 8009fa0:	2000      	movs	r0, #0
 8009fa2:	4770      	bx	lr
 8009fa4:	2020      	movs	r0, #32
 8009fa6:	4770      	bx	lr

08009fa8 <__i2b>:
 8009fa8:	b510      	push	{r4, lr}
 8009faa:	460c      	mov	r4, r1
 8009fac:	2101      	movs	r1, #1
 8009fae:	f7ff ff07 	bl	8009dc0 <_Balloc>
 8009fb2:	4602      	mov	r2, r0
 8009fb4:	b928      	cbnz	r0, 8009fc2 <__i2b+0x1a>
 8009fb6:	4b05      	ldr	r3, [pc, #20]	@ (8009fcc <__i2b+0x24>)
 8009fb8:	4805      	ldr	r0, [pc, #20]	@ (8009fd0 <__i2b+0x28>)
 8009fba:	f240 1145 	movw	r1, #325	@ 0x145
 8009fbe:	f000 fe83 	bl	800acc8 <__assert_func>
 8009fc2:	2301      	movs	r3, #1
 8009fc4:	6144      	str	r4, [r0, #20]
 8009fc6:	6103      	str	r3, [r0, #16]
 8009fc8:	bd10      	pop	{r4, pc}
 8009fca:	bf00      	nop
 8009fcc:	0800d04c 	.word	0x0800d04c
 8009fd0:	0800d05d 	.word	0x0800d05d

08009fd4 <__multiply>:
 8009fd4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fd8:	4614      	mov	r4, r2
 8009fda:	690a      	ldr	r2, [r1, #16]
 8009fdc:	6923      	ldr	r3, [r4, #16]
 8009fde:	429a      	cmp	r2, r3
 8009fe0:	bfa8      	it	ge
 8009fe2:	4623      	movge	r3, r4
 8009fe4:	460f      	mov	r7, r1
 8009fe6:	bfa4      	itt	ge
 8009fe8:	460c      	movge	r4, r1
 8009fea:	461f      	movge	r7, r3
 8009fec:	f8d4 a010 	ldr.w	sl, [r4, #16]
 8009ff0:	f8d7 9010 	ldr.w	r9, [r7, #16]
 8009ff4:	68a3      	ldr	r3, [r4, #8]
 8009ff6:	6861      	ldr	r1, [r4, #4]
 8009ff8:	eb0a 0609 	add.w	r6, sl, r9
 8009ffc:	42b3      	cmp	r3, r6
 8009ffe:	b085      	sub	sp, #20
 800a000:	bfb8      	it	lt
 800a002:	3101      	addlt	r1, #1
 800a004:	f7ff fedc 	bl	8009dc0 <_Balloc>
 800a008:	b930      	cbnz	r0, 800a018 <__multiply+0x44>
 800a00a:	4602      	mov	r2, r0
 800a00c:	4b44      	ldr	r3, [pc, #272]	@ (800a120 <__multiply+0x14c>)
 800a00e:	4845      	ldr	r0, [pc, #276]	@ (800a124 <__multiply+0x150>)
 800a010:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800a014:	f000 fe58 	bl	800acc8 <__assert_func>
 800a018:	f100 0514 	add.w	r5, r0, #20
 800a01c:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a020:	462b      	mov	r3, r5
 800a022:	2200      	movs	r2, #0
 800a024:	4543      	cmp	r3, r8
 800a026:	d321      	bcc.n	800a06c <__multiply+0x98>
 800a028:	f107 0114 	add.w	r1, r7, #20
 800a02c:	f104 0214 	add.w	r2, r4, #20
 800a030:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800a034:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800a038:	9302      	str	r3, [sp, #8]
 800a03a:	1b13      	subs	r3, r2, r4
 800a03c:	3b15      	subs	r3, #21
 800a03e:	f023 0303 	bic.w	r3, r3, #3
 800a042:	3304      	adds	r3, #4
 800a044:	f104 0715 	add.w	r7, r4, #21
 800a048:	42ba      	cmp	r2, r7
 800a04a:	bf38      	it	cc
 800a04c:	2304      	movcc	r3, #4
 800a04e:	9301      	str	r3, [sp, #4]
 800a050:	9b02      	ldr	r3, [sp, #8]
 800a052:	9103      	str	r1, [sp, #12]
 800a054:	428b      	cmp	r3, r1
 800a056:	d80c      	bhi.n	800a072 <__multiply+0x9e>
 800a058:	2e00      	cmp	r6, #0
 800a05a:	dd03      	ble.n	800a064 <__multiply+0x90>
 800a05c:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a060:	2b00      	cmp	r3, #0
 800a062:	d05b      	beq.n	800a11c <__multiply+0x148>
 800a064:	6106      	str	r6, [r0, #16]
 800a066:	b005      	add	sp, #20
 800a068:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a06c:	f843 2b04 	str.w	r2, [r3], #4
 800a070:	e7d8      	b.n	800a024 <__multiply+0x50>
 800a072:	f8b1 a000 	ldrh.w	sl, [r1]
 800a076:	f1ba 0f00 	cmp.w	sl, #0
 800a07a:	d024      	beq.n	800a0c6 <__multiply+0xf2>
 800a07c:	f104 0e14 	add.w	lr, r4, #20
 800a080:	46a9      	mov	r9, r5
 800a082:	f04f 0c00 	mov.w	ip, #0
 800a086:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a08a:	f8d9 3000 	ldr.w	r3, [r9]
 800a08e:	fa1f fb87 	uxth.w	fp, r7
 800a092:	b29b      	uxth	r3, r3
 800a094:	fb0a 330b 	mla	r3, sl, fp, r3
 800a098:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800a09c:	f8d9 7000 	ldr.w	r7, [r9]
 800a0a0:	4463      	add	r3, ip
 800a0a2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a0a6:	fb0a c70b 	mla	r7, sl, fp, ip
 800a0aa:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800a0ae:	b29b      	uxth	r3, r3
 800a0b0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a0b4:	4572      	cmp	r2, lr
 800a0b6:	f849 3b04 	str.w	r3, [r9], #4
 800a0ba:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800a0be:	d8e2      	bhi.n	800a086 <__multiply+0xb2>
 800a0c0:	9b01      	ldr	r3, [sp, #4]
 800a0c2:	f845 c003 	str.w	ip, [r5, r3]
 800a0c6:	9b03      	ldr	r3, [sp, #12]
 800a0c8:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800a0cc:	3104      	adds	r1, #4
 800a0ce:	f1b9 0f00 	cmp.w	r9, #0
 800a0d2:	d021      	beq.n	800a118 <__multiply+0x144>
 800a0d4:	682b      	ldr	r3, [r5, #0]
 800a0d6:	f104 0c14 	add.w	ip, r4, #20
 800a0da:	46ae      	mov	lr, r5
 800a0dc:	f04f 0a00 	mov.w	sl, #0
 800a0e0:	f8bc b000 	ldrh.w	fp, [ip]
 800a0e4:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800a0e8:	fb09 770b 	mla	r7, r9, fp, r7
 800a0ec:	4457      	add	r7, sl
 800a0ee:	b29b      	uxth	r3, r3
 800a0f0:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800a0f4:	f84e 3b04 	str.w	r3, [lr], #4
 800a0f8:	f85c 3b04 	ldr.w	r3, [ip], #4
 800a0fc:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a100:	f8be 3000 	ldrh.w	r3, [lr]
 800a104:	fb09 330a 	mla	r3, r9, sl, r3
 800a108:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800a10c:	4562      	cmp	r2, ip
 800a10e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800a112:	d8e5      	bhi.n	800a0e0 <__multiply+0x10c>
 800a114:	9f01      	ldr	r7, [sp, #4]
 800a116:	51eb      	str	r3, [r5, r7]
 800a118:	3504      	adds	r5, #4
 800a11a:	e799      	b.n	800a050 <__multiply+0x7c>
 800a11c:	3e01      	subs	r6, #1
 800a11e:	e79b      	b.n	800a058 <__multiply+0x84>
 800a120:	0800d04c 	.word	0x0800d04c
 800a124:	0800d05d 	.word	0x0800d05d

0800a128 <__pow5mult>:
 800a128:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a12c:	4615      	mov	r5, r2
 800a12e:	f012 0203 	ands.w	r2, r2, #3
 800a132:	4607      	mov	r7, r0
 800a134:	460e      	mov	r6, r1
 800a136:	d007      	beq.n	800a148 <__pow5mult+0x20>
 800a138:	4c25      	ldr	r4, [pc, #148]	@ (800a1d0 <__pow5mult+0xa8>)
 800a13a:	3a01      	subs	r2, #1
 800a13c:	2300      	movs	r3, #0
 800a13e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800a142:	f7ff fe9f 	bl	8009e84 <__multadd>
 800a146:	4606      	mov	r6, r0
 800a148:	10ad      	asrs	r5, r5, #2
 800a14a:	d03d      	beq.n	800a1c8 <__pow5mult+0xa0>
 800a14c:	69fc      	ldr	r4, [r7, #28]
 800a14e:	b97c      	cbnz	r4, 800a170 <__pow5mult+0x48>
 800a150:	2010      	movs	r0, #16
 800a152:	f7ff fd7f 	bl	8009c54 <malloc>
 800a156:	4602      	mov	r2, r0
 800a158:	61f8      	str	r0, [r7, #28]
 800a15a:	b928      	cbnz	r0, 800a168 <__pow5mult+0x40>
 800a15c:	4b1d      	ldr	r3, [pc, #116]	@ (800a1d4 <__pow5mult+0xac>)
 800a15e:	481e      	ldr	r0, [pc, #120]	@ (800a1d8 <__pow5mult+0xb0>)
 800a160:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800a164:	f000 fdb0 	bl	800acc8 <__assert_func>
 800a168:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800a16c:	6004      	str	r4, [r0, #0]
 800a16e:	60c4      	str	r4, [r0, #12]
 800a170:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800a174:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800a178:	b94c      	cbnz	r4, 800a18e <__pow5mult+0x66>
 800a17a:	f240 2171 	movw	r1, #625	@ 0x271
 800a17e:	4638      	mov	r0, r7
 800a180:	f7ff ff12 	bl	8009fa8 <__i2b>
 800a184:	2300      	movs	r3, #0
 800a186:	f8c8 0008 	str.w	r0, [r8, #8]
 800a18a:	4604      	mov	r4, r0
 800a18c:	6003      	str	r3, [r0, #0]
 800a18e:	f04f 0900 	mov.w	r9, #0
 800a192:	07eb      	lsls	r3, r5, #31
 800a194:	d50a      	bpl.n	800a1ac <__pow5mult+0x84>
 800a196:	4631      	mov	r1, r6
 800a198:	4622      	mov	r2, r4
 800a19a:	4638      	mov	r0, r7
 800a19c:	f7ff ff1a 	bl	8009fd4 <__multiply>
 800a1a0:	4631      	mov	r1, r6
 800a1a2:	4680      	mov	r8, r0
 800a1a4:	4638      	mov	r0, r7
 800a1a6:	f7ff fe4b 	bl	8009e40 <_Bfree>
 800a1aa:	4646      	mov	r6, r8
 800a1ac:	106d      	asrs	r5, r5, #1
 800a1ae:	d00b      	beq.n	800a1c8 <__pow5mult+0xa0>
 800a1b0:	6820      	ldr	r0, [r4, #0]
 800a1b2:	b938      	cbnz	r0, 800a1c4 <__pow5mult+0x9c>
 800a1b4:	4622      	mov	r2, r4
 800a1b6:	4621      	mov	r1, r4
 800a1b8:	4638      	mov	r0, r7
 800a1ba:	f7ff ff0b 	bl	8009fd4 <__multiply>
 800a1be:	6020      	str	r0, [r4, #0]
 800a1c0:	f8c0 9000 	str.w	r9, [r0]
 800a1c4:	4604      	mov	r4, r0
 800a1c6:	e7e4      	b.n	800a192 <__pow5mult+0x6a>
 800a1c8:	4630      	mov	r0, r6
 800a1ca:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a1ce:	bf00      	nop
 800a1d0:	0800d0b8 	.word	0x0800d0b8
 800a1d4:	0800cfdd 	.word	0x0800cfdd
 800a1d8:	0800d05d 	.word	0x0800d05d

0800a1dc <__lshift>:
 800a1dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a1e0:	460c      	mov	r4, r1
 800a1e2:	6849      	ldr	r1, [r1, #4]
 800a1e4:	6923      	ldr	r3, [r4, #16]
 800a1e6:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800a1ea:	68a3      	ldr	r3, [r4, #8]
 800a1ec:	4607      	mov	r7, r0
 800a1ee:	4691      	mov	r9, r2
 800a1f0:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800a1f4:	f108 0601 	add.w	r6, r8, #1
 800a1f8:	42b3      	cmp	r3, r6
 800a1fa:	db0b      	blt.n	800a214 <__lshift+0x38>
 800a1fc:	4638      	mov	r0, r7
 800a1fe:	f7ff fddf 	bl	8009dc0 <_Balloc>
 800a202:	4605      	mov	r5, r0
 800a204:	b948      	cbnz	r0, 800a21a <__lshift+0x3e>
 800a206:	4602      	mov	r2, r0
 800a208:	4b28      	ldr	r3, [pc, #160]	@ (800a2ac <__lshift+0xd0>)
 800a20a:	4829      	ldr	r0, [pc, #164]	@ (800a2b0 <__lshift+0xd4>)
 800a20c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800a210:	f000 fd5a 	bl	800acc8 <__assert_func>
 800a214:	3101      	adds	r1, #1
 800a216:	005b      	lsls	r3, r3, #1
 800a218:	e7ee      	b.n	800a1f8 <__lshift+0x1c>
 800a21a:	2300      	movs	r3, #0
 800a21c:	f100 0114 	add.w	r1, r0, #20
 800a220:	f100 0210 	add.w	r2, r0, #16
 800a224:	4618      	mov	r0, r3
 800a226:	4553      	cmp	r3, sl
 800a228:	db33      	blt.n	800a292 <__lshift+0xb6>
 800a22a:	6920      	ldr	r0, [r4, #16]
 800a22c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800a230:	f104 0314 	add.w	r3, r4, #20
 800a234:	f019 091f 	ands.w	r9, r9, #31
 800a238:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800a23c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800a240:	d02b      	beq.n	800a29a <__lshift+0xbe>
 800a242:	f1c9 0e20 	rsb	lr, r9, #32
 800a246:	468a      	mov	sl, r1
 800a248:	2200      	movs	r2, #0
 800a24a:	6818      	ldr	r0, [r3, #0]
 800a24c:	fa00 f009 	lsl.w	r0, r0, r9
 800a250:	4310      	orrs	r0, r2
 800a252:	f84a 0b04 	str.w	r0, [sl], #4
 800a256:	f853 2b04 	ldr.w	r2, [r3], #4
 800a25a:	459c      	cmp	ip, r3
 800a25c:	fa22 f20e 	lsr.w	r2, r2, lr
 800a260:	d8f3      	bhi.n	800a24a <__lshift+0x6e>
 800a262:	ebac 0304 	sub.w	r3, ip, r4
 800a266:	3b15      	subs	r3, #21
 800a268:	f023 0303 	bic.w	r3, r3, #3
 800a26c:	3304      	adds	r3, #4
 800a26e:	f104 0015 	add.w	r0, r4, #21
 800a272:	4584      	cmp	ip, r0
 800a274:	bf38      	it	cc
 800a276:	2304      	movcc	r3, #4
 800a278:	50ca      	str	r2, [r1, r3]
 800a27a:	b10a      	cbz	r2, 800a280 <__lshift+0xa4>
 800a27c:	f108 0602 	add.w	r6, r8, #2
 800a280:	3e01      	subs	r6, #1
 800a282:	4638      	mov	r0, r7
 800a284:	612e      	str	r6, [r5, #16]
 800a286:	4621      	mov	r1, r4
 800a288:	f7ff fdda 	bl	8009e40 <_Bfree>
 800a28c:	4628      	mov	r0, r5
 800a28e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a292:	f842 0f04 	str.w	r0, [r2, #4]!
 800a296:	3301      	adds	r3, #1
 800a298:	e7c5      	b.n	800a226 <__lshift+0x4a>
 800a29a:	3904      	subs	r1, #4
 800a29c:	f853 2b04 	ldr.w	r2, [r3], #4
 800a2a0:	f841 2f04 	str.w	r2, [r1, #4]!
 800a2a4:	459c      	cmp	ip, r3
 800a2a6:	d8f9      	bhi.n	800a29c <__lshift+0xc0>
 800a2a8:	e7ea      	b.n	800a280 <__lshift+0xa4>
 800a2aa:	bf00      	nop
 800a2ac:	0800d04c 	.word	0x0800d04c
 800a2b0:	0800d05d 	.word	0x0800d05d

0800a2b4 <__mcmp>:
 800a2b4:	690a      	ldr	r2, [r1, #16]
 800a2b6:	4603      	mov	r3, r0
 800a2b8:	6900      	ldr	r0, [r0, #16]
 800a2ba:	1a80      	subs	r0, r0, r2
 800a2bc:	b530      	push	{r4, r5, lr}
 800a2be:	d10e      	bne.n	800a2de <__mcmp+0x2a>
 800a2c0:	3314      	adds	r3, #20
 800a2c2:	3114      	adds	r1, #20
 800a2c4:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800a2c8:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800a2cc:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800a2d0:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800a2d4:	4295      	cmp	r5, r2
 800a2d6:	d003      	beq.n	800a2e0 <__mcmp+0x2c>
 800a2d8:	d205      	bcs.n	800a2e6 <__mcmp+0x32>
 800a2da:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a2de:	bd30      	pop	{r4, r5, pc}
 800a2e0:	42a3      	cmp	r3, r4
 800a2e2:	d3f3      	bcc.n	800a2cc <__mcmp+0x18>
 800a2e4:	e7fb      	b.n	800a2de <__mcmp+0x2a>
 800a2e6:	2001      	movs	r0, #1
 800a2e8:	e7f9      	b.n	800a2de <__mcmp+0x2a>
	...

0800a2ec <__mdiff>:
 800a2ec:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a2f0:	4689      	mov	r9, r1
 800a2f2:	4606      	mov	r6, r0
 800a2f4:	4611      	mov	r1, r2
 800a2f6:	4648      	mov	r0, r9
 800a2f8:	4614      	mov	r4, r2
 800a2fa:	f7ff ffdb 	bl	800a2b4 <__mcmp>
 800a2fe:	1e05      	subs	r5, r0, #0
 800a300:	d112      	bne.n	800a328 <__mdiff+0x3c>
 800a302:	4629      	mov	r1, r5
 800a304:	4630      	mov	r0, r6
 800a306:	f7ff fd5b 	bl	8009dc0 <_Balloc>
 800a30a:	4602      	mov	r2, r0
 800a30c:	b928      	cbnz	r0, 800a31a <__mdiff+0x2e>
 800a30e:	4b3f      	ldr	r3, [pc, #252]	@ (800a40c <__mdiff+0x120>)
 800a310:	f240 2137 	movw	r1, #567	@ 0x237
 800a314:	483e      	ldr	r0, [pc, #248]	@ (800a410 <__mdiff+0x124>)
 800a316:	f000 fcd7 	bl	800acc8 <__assert_func>
 800a31a:	2301      	movs	r3, #1
 800a31c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800a320:	4610      	mov	r0, r2
 800a322:	b003      	add	sp, #12
 800a324:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a328:	bfbc      	itt	lt
 800a32a:	464b      	movlt	r3, r9
 800a32c:	46a1      	movlt	r9, r4
 800a32e:	4630      	mov	r0, r6
 800a330:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800a334:	bfba      	itte	lt
 800a336:	461c      	movlt	r4, r3
 800a338:	2501      	movlt	r5, #1
 800a33a:	2500      	movge	r5, #0
 800a33c:	f7ff fd40 	bl	8009dc0 <_Balloc>
 800a340:	4602      	mov	r2, r0
 800a342:	b918      	cbnz	r0, 800a34c <__mdiff+0x60>
 800a344:	4b31      	ldr	r3, [pc, #196]	@ (800a40c <__mdiff+0x120>)
 800a346:	f240 2145 	movw	r1, #581	@ 0x245
 800a34a:	e7e3      	b.n	800a314 <__mdiff+0x28>
 800a34c:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800a350:	6926      	ldr	r6, [r4, #16]
 800a352:	60c5      	str	r5, [r0, #12]
 800a354:	f109 0310 	add.w	r3, r9, #16
 800a358:	f109 0514 	add.w	r5, r9, #20
 800a35c:	f104 0e14 	add.w	lr, r4, #20
 800a360:	f100 0b14 	add.w	fp, r0, #20
 800a364:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800a368:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800a36c:	9301      	str	r3, [sp, #4]
 800a36e:	46d9      	mov	r9, fp
 800a370:	f04f 0c00 	mov.w	ip, #0
 800a374:	9b01      	ldr	r3, [sp, #4]
 800a376:	f85e 0b04 	ldr.w	r0, [lr], #4
 800a37a:	f853 af04 	ldr.w	sl, [r3, #4]!
 800a37e:	9301      	str	r3, [sp, #4]
 800a380:	fa1f f38a 	uxth.w	r3, sl
 800a384:	4619      	mov	r1, r3
 800a386:	b283      	uxth	r3, r0
 800a388:	1acb      	subs	r3, r1, r3
 800a38a:	0c00      	lsrs	r0, r0, #16
 800a38c:	4463      	add	r3, ip
 800a38e:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800a392:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800a396:	b29b      	uxth	r3, r3
 800a398:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800a39c:	4576      	cmp	r6, lr
 800a39e:	f849 3b04 	str.w	r3, [r9], #4
 800a3a2:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a3a6:	d8e5      	bhi.n	800a374 <__mdiff+0x88>
 800a3a8:	1b33      	subs	r3, r6, r4
 800a3aa:	3b15      	subs	r3, #21
 800a3ac:	f023 0303 	bic.w	r3, r3, #3
 800a3b0:	3415      	adds	r4, #21
 800a3b2:	3304      	adds	r3, #4
 800a3b4:	42a6      	cmp	r6, r4
 800a3b6:	bf38      	it	cc
 800a3b8:	2304      	movcc	r3, #4
 800a3ba:	441d      	add	r5, r3
 800a3bc:	445b      	add	r3, fp
 800a3be:	461e      	mov	r6, r3
 800a3c0:	462c      	mov	r4, r5
 800a3c2:	4544      	cmp	r4, r8
 800a3c4:	d30e      	bcc.n	800a3e4 <__mdiff+0xf8>
 800a3c6:	f108 0103 	add.w	r1, r8, #3
 800a3ca:	1b49      	subs	r1, r1, r5
 800a3cc:	f021 0103 	bic.w	r1, r1, #3
 800a3d0:	3d03      	subs	r5, #3
 800a3d2:	45a8      	cmp	r8, r5
 800a3d4:	bf38      	it	cc
 800a3d6:	2100      	movcc	r1, #0
 800a3d8:	440b      	add	r3, r1
 800a3da:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800a3de:	b191      	cbz	r1, 800a406 <__mdiff+0x11a>
 800a3e0:	6117      	str	r7, [r2, #16]
 800a3e2:	e79d      	b.n	800a320 <__mdiff+0x34>
 800a3e4:	f854 1b04 	ldr.w	r1, [r4], #4
 800a3e8:	46e6      	mov	lr, ip
 800a3ea:	0c08      	lsrs	r0, r1, #16
 800a3ec:	fa1c fc81 	uxtah	ip, ip, r1
 800a3f0:	4471      	add	r1, lr
 800a3f2:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800a3f6:	b289      	uxth	r1, r1
 800a3f8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800a3fc:	f846 1b04 	str.w	r1, [r6], #4
 800a400:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800a404:	e7dd      	b.n	800a3c2 <__mdiff+0xd6>
 800a406:	3f01      	subs	r7, #1
 800a408:	e7e7      	b.n	800a3da <__mdiff+0xee>
 800a40a:	bf00      	nop
 800a40c:	0800d04c 	.word	0x0800d04c
 800a410:	0800d05d 	.word	0x0800d05d

0800a414 <__d2b>:
 800a414:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800a418:	460f      	mov	r7, r1
 800a41a:	2101      	movs	r1, #1
 800a41c:	ec59 8b10 	vmov	r8, r9, d0
 800a420:	4616      	mov	r6, r2
 800a422:	f7ff fccd 	bl	8009dc0 <_Balloc>
 800a426:	4604      	mov	r4, r0
 800a428:	b930      	cbnz	r0, 800a438 <__d2b+0x24>
 800a42a:	4602      	mov	r2, r0
 800a42c:	4b23      	ldr	r3, [pc, #140]	@ (800a4bc <__d2b+0xa8>)
 800a42e:	4824      	ldr	r0, [pc, #144]	@ (800a4c0 <__d2b+0xac>)
 800a430:	f240 310f 	movw	r1, #783	@ 0x30f
 800a434:	f000 fc48 	bl	800acc8 <__assert_func>
 800a438:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800a43c:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800a440:	b10d      	cbz	r5, 800a446 <__d2b+0x32>
 800a442:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800a446:	9301      	str	r3, [sp, #4]
 800a448:	f1b8 0300 	subs.w	r3, r8, #0
 800a44c:	d023      	beq.n	800a496 <__d2b+0x82>
 800a44e:	4668      	mov	r0, sp
 800a450:	9300      	str	r3, [sp, #0]
 800a452:	f7ff fd7c 	bl	8009f4e <__lo0bits>
 800a456:	e9dd 1200 	ldrd	r1, r2, [sp]
 800a45a:	b1d0      	cbz	r0, 800a492 <__d2b+0x7e>
 800a45c:	f1c0 0320 	rsb	r3, r0, #32
 800a460:	fa02 f303 	lsl.w	r3, r2, r3
 800a464:	430b      	orrs	r3, r1
 800a466:	40c2      	lsrs	r2, r0
 800a468:	6163      	str	r3, [r4, #20]
 800a46a:	9201      	str	r2, [sp, #4]
 800a46c:	9b01      	ldr	r3, [sp, #4]
 800a46e:	61a3      	str	r3, [r4, #24]
 800a470:	2b00      	cmp	r3, #0
 800a472:	bf0c      	ite	eq
 800a474:	2201      	moveq	r2, #1
 800a476:	2202      	movne	r2, #2
 800a478:	6122      	str	r2, [r4, #16]
 800a47a:	b1a5      	cbz	r5, 800a4a6 <__d2b+0x92>
 800a47c:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800a480:	4405      	add	r5, r0
 800a482:	603d      	str	r5, [r7, #0]
 800a484:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800a488:	6030      	str	r0, [r6, #0]
 800a48a:	4620      	mov	r0, r4
 800a48c:	b003      	add	sp, #12
 800a48e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a492:	6161      	str	r1, [r4, #20]
 800a494:	e7ea      	b.n	800a46c <__d2b+0x58>
 800a496:	a801      	add	r0, sp, #4
 800a498:	f7ff fd59 	bl	8009f4e <__lo0bits>
 800a49c:	9b01      	ldr	r3, [sp, #4]
 800a49e:	6163      	str	r3, [r4, #20]
 800a4a0:	3020      	adds	r0, #32
 800a4a2:	2201      	movs	r2, #1
 800a4a4:	e7e8      	b.n	800a478 <__d2b+0x64>
 800a4a6:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800a4aa:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800a4ae:	6038      	str	r0, [r7, #0]
 800a4b0:	6918      	ldr	r0, [r3, #16]
 800a4b2:	f7ff fd2d 	bl	8009f10 <__hi0bits>
 800a4b6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800a4ba:	e7e5      	b.n	800a488 <__d2b+0x74>
 800a4bc:	0800d04c 	.word	0x0800d04c
 800a4c0:	0800d05d 	.word	0x0800d05d

0800a4c4 <__ssputs_r>:
 800a4c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a4c8:	688e      	ldr	r6, [r1, #8]
 800a4ca:	461f      	mov	r7, r3
 800a4cc:	42be      	cmp	r6, r7
 800a4ce:	680b      	ldr	r3, [r1, #0]
 800a4d0:	4682      	mov	sl, r0
 800a4d2:	460c      	mov	r4, r1
 800a4d4:	4690      	mov	r8, r2
 800a4d6:	d82d      	bhi.n	800a534 <__ssputs_r+0x70>
 800a4d8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a4dc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a4e0:	d026      	beq.n	800a530 <__ssputs_r+0x6c>
 800a4e2:	6965      	ldr	r5, [r4, #20]
 800a4e4:	6909      	ldr	r1, [r1, #16]
 800a4e6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a4ea:	eba3 0901 	sub.w	r9, r3, r1
 800a4ee:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a4f2:	1c7b      	adds	r3, r7, #1
 800a4f4:	444b      	add	r3, r9
 800a4f6:	106d      	asrs	r5, r5, #1
 800a4f8:	429d      	cmp	r5, r3
 800a4fa:	bf38      	it	cc
 800a4fc:	461d      	movcc	r5, r3
 800a4fe:	0553      	lsls	r3, r2, #21
 800a500:	d527      	bpl.n	800a552 <__ssputs_r+0x8e>
 800a502:	4629      	mov	r1, r5
 800a504:	f7ff fbd0 	bl	8009ca8 <_malloc_r>
 800a508:	4606      	mov	r6, r0
 800a50a:	b360      	cbz	r0, 800a566 <__ssputs_r+0xa2>
 800a50c:	6921      	ldr	r1, [r4, #16]
 800a50e:	464a      	mov	r2, r9
 800a510:	f000 fbcc 	bl	800acac <memcpy>
 800a514:	89a3      	ldrh	r3, [r4, #12]
 800a516:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a51a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a51e:	81a3      	strh	r3, [r4, #12]
 800a520:	6126      	str	r6, [r4, #16]
 800a522:	6165      	str	r5, [r4, #20]
 800a524:	444e      	add	r6, r9
 800a526:	eba5 0509 	sub.w	r5, r5, r9
 800a52a:	6026      	str	r6, [r4, #0]
 800a52c:	60a5      	str	r5, [r4, #8]
 800a52e:	463e      	mov	r6, r7
 800a530:	42be      	cmp	r6, r7
 800a532:	d900      	bls.n	800a536 <__ssputs_r+0x72>
 800a534:	463e      	mov	r6, r7
 800a536:	6820      	ldr	r0, [r4, #0]
 800a538:	4632      	mov	r2, r6
 800a53a:	4641      	mov	r1, r8
 800a53c:	f000 fb6a 	bl	800ac14 <memmove>
 800a540:	68a3      	ldr	r3, [r4, #8]
 800a542:	1b9b      	subs	r3, r3, r6
 800a544:	60a3      	str	r3, [r4, #8]
 800a546:	6823      	ldr	r3, [r4, #0]
 800a548:	4433      	add	r3, r6
 800a54a:	6023      	str	r3, [r4, #0]
 800a54c:	2000      	movs	r0, #0
 800a54e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a552:	462a      	mov	r2, r5
 800a554:	f000 fbfc 	bl	800ad50 <_realloc_r>
 800a558:	4606      	mov	r6, r0
 800a55a:	2800      	cmp	r0, #0
 800a55c:	d1e0      	bne.n	800a520 <__ssputs_r+0x5c>
 800a55e:	6921      	ldr	r1, [r4, #16]
 800a560:	4650      	mov	r0, sl
 800a562:	f7ff fb2d 	bl	8009bc0 <_free_r>
 800a566:	230c      	movs	r3, #12
 800a568:	f8ca 3000 	str.w	r3, [sl]
 800a56c:	89a3      	ldrh	r3, [r4, #12]
 800a56e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a572:	81a3      	strh	r3, [r4, #12]
 800a574:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a578:	e7e9      	b.n	800a54e <__ssputs_r+0x8a>
	...

0800a57c <_svfiprintf_r>:
 800a57c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a580:	4698      	mov	r8, r3
 800a582:	898b      	ldrh	r3, [r1, #12]
 800a584:	061b      	lsls	r3, r3, #24
 800a586:	b09d      	sub	sp, #116	@ 0x74
 800a588:	4607      	mov	r7, r0
 800a58a:	460d      	mov	r5, r1
 800a58c:	4614      	mov	r4, r2
 800a58e:	d510      	bpl.n	800a5b2 <_svfiprintf_r+0x36>
 800a590:	690b      	ldr	r3, [r1, #16]
 800a592:	b973      	cbnz	r3, 800a5b2 <_svfiprintf_r+0x36>
 800a594:	2140      	movs	r1, #64	@ 0x40
 800a596:	f7ff fb87 	bl	8009ca8 <_malloc_r>
 800a59a:	6028      	str	r0, [r5, #0]
 800a59c:	6128      	str	r0, [r5, #16]
 800a59e:	b930      	cbnz	r0, 800a5ae <_svfiprintf_r+0x32>
 800a5a0:	230c      	movs	r3, #12
 800a5a2:	603b      	str	r3, [r7, #0]
 800a5a4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a5a8:	b01d      	add	sp, #116	@ 0x74
 800a5aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a5ae:	2340      	movs	r3, #64	@ 0x40
 800a5b0:	616b      	str	r3, [r5, #20]
 800a5b2:	2300      	movs	r3, #0
 800a5b4:	9309      	str	r3, [sp, #36]	@ 0x24
 800a5b6:	2320      	movs	r3, #32
 800a5b8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a5bc:	f8cd 800c 	str.w	r8, [sp, #12]
 800a5c0:	2330      	movs	r3, #48	@ 0x30
 800a5c2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800a760 <_svfiprintf_r+0x1e4>
 800a5c6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a5ca:	f04f 0901 	mov.w	r9, #1
 800a5ce:	4623      	mov	r3, r4
 800a5d0:	469a      	mov	sl, r3
 800a5d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a5d6:	b10a      	cbz	r2, 800a5dc <_svfiprintf_r+0x60>
 800a5d8:	2a25      	cmp	r2, #37	@ 0x25
 800a5da:	d1f9      	bne.n	800a5d0 <_svfiprintf_r+0x54>
 800a5dc:	ebba 0b04 	subs.w	fp, sl, r4
 800a5e0:	d00b      	beq.n	800a5fa <_svfiprintf_r+0x7e>
 800a5e2:	465b      	mov	r3, fp
 800a5e4:	4622      	mov	r2, r4
 800a5e6:	4629      	mov	r1, r5
 800a5e8:	4638      	mov	r0, r7
 800a5ea:	f7ff ff6b 	bl	800a4c4 <__ssputs_r>
 800a5ee:	3001      	adds	r0, #1
 800a5f0:	f000 80a7 	beq.w	800a742 <_svfiprintf_r+0x1c6>
 800a5f4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a5f6:	445a      	add	r2, fp
 800a5f8:	9209      	str	r2, [sp, #36]	@ 0x24
 800a5fa:	f89a 3000 	ldrb.w	r3, [sl]
 800a5fe:	2b00      	cmp	r3, #0
 800a600:	f000 809f 	beq.w	800a742 <_svfiprintf_r+0x1c6>
 800a604:	2300      	movs	r3, #0
 800a606:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a60a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a60e:	f10a 0a01 	add.w	sl, sl, #1
 800a612:	9304      	str	r3, [sp, #16]
 800a614:	9307      	str	r3, [sp, #28]
 800a616:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a61a:	931a      	str	r3, [sp, #104]	@ 0x68
 800a61c:	4654      	mov	r4, sl
 800a61e:	2205      	movs	r2, #5
 800a620:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a624:	484e      	ldr	r0, [pc, #312]	@ (800a760 <_svfiprintf_r+0x1e4>)
 800a626:	f7f5 fdd3 	bl	80001d0 <memchr>
 800a62a:	9a04      	ldr	r2, [sp, #16]
 800a62c:	b9d8      	cbnz	r0, 800a666 <_svfiprintf_r+0xea>
 800a62e:	06d0      	lsls	r0, r2, #27
 800a630:	bf44      	itt	mi
 800a632:	2320      	movmi	r3, #32
 800a634:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a638:	0711      	lsls	r1, r2, #28
 800a63a:	bf44      	itt	mi
 800a63c:	232b      	movmi	r3, #43	@ 0x2b
 800a63e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a642:	f89a 3000 	ldrb.w	r3, [sl]
 800a646:	2b2a      	cmp	r3, #42	@ 0x2a
 800a648:	d015      	beq.n	800a676 <_svfiprintf_r+0xfa>
 800a64a:	9a07      	ldr	r2, [sp, #28]
 800a64c:	4654      	mov	r4, sl
 800a64e:	2000      	movs	r0, #0
 800a650:	f04f 0c0a 	mov.w	ip, #10
 800a654:	4621      	mov	r1, r4
 800a656:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a65a:	3b30      	subs	r3, #48	@ 0x30
 800a65c:	2b09      	cmp	r3, #9
 800a65e:	d94b      	bls.n	800a6f8 <_svfiprintf_r+0x17c>
 800a660:	b1b0      	cbz	r0, 800a690 <_svfiprintf_r+0x114>
 800a662:	9207      	str	r2, [sp, #28]
 800a664:	e014      	b.n	800a690 <_svfiprintf_r+0x114>
 800a666:	eba0 0308 	sub.w	r3, r0, r8
 800a66a:	fa09 f303 	lsl.w	r3, r9, r3
 800a66e:	4313      	orrs	r3, r2
 800a670:	9304      	str	r3, [sp, #16]
 800a672:	46a2      	mov	sl, r4
 800a674:	e7d2      	b.n	800a61c <_svfiprintf_r+0xa0>
 800a676:	9b03      	ldr	r3, [sp, #12]
 800a678:	1d19      	adds	r1, r3, #4
 800a67a:	681b      	ldr	r3, [r3, #0]
 800a67c:	9103      	str	r1, [sp, #12]
 800a67e:	2b00      	cmp	r3, #0
 800a680:	bfbb      	ittet	lt
 800a682:	425b      	neglt	r3, r3
 800a684:	f042 0202 	orrlt.w	r2, r2, #2
 800a688:	9307      	strge	r3, [sp, #28]
 800a68a:	9307      	strlt	r3, [sp, #28]
 800a68c:	bfb8      	it	lt
 800a68e:	9204      	strlt	r2, [sp, #16]
 800a690:	7823      	ldrb	r3, [r4, #0]
 800a692:	2b2e      	cmp	r3, #46	@ 0x2e
 800a694:	d10a      	bne.n	800a6ac <_svfiprintf_r+0x130>
 800a696:	7863      	ldrb	r3, [r4, #1]
 800a698:	2b2a      	cmp	r3, #42	@ 0x2a
 800a69a:	d132      	bne.n	800a702 <_svfiprintf_r+0x186>
 800a69c:	9b03      	ldr	r3, [sp, #12]
 800a69e:	1d1a      	adds	r2, r3, #4
 800a6a0:	681b      	ldr	r3, [r3, #0]
 800a6a2:	9203      	str	r2, [sp, #12]
 800a6a4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a6a8:	3402      	adds	r4, #2
 800a6aa:	9305      	str	r3, [sp, #20]
 800a6ac:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800a770 <_svfiprintf_r+0x1f4>
 800a6b0:	7821      	ldrb	r1, [r4, #0]
 800a6b2:	2203      	movs	r2, #3
 800a6b4:	4650      	mov	r0, sl
 800a6b6:	f7f5 fd8b 	bl	80001d0 <memchr>
 800a6ba:	b138      	cbz	r0, 800a6cc <_svfiprintf_r+0x150>
 800a6bc:	9b04      	ldr	r3, [sp, #16]
 800a6be:	eba0 000a 	sub.w	r0, r0, sl
 800a6c2:	2240      	movs	r2, #64	@ 0x40
 800a6c4:	4082      	lsls	r2, r0
 800a6c6:	4313      	orrs	r3, r2
 800a6c8:	3401      	adds	r4, #1
 800a6ca:	9304      	str	r3, [sp, #16]
 800a6cc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a6d0:	4824      	ldr	r0, [pc, #144]	@ (800a764 <_svfiprintf_r+0x1e8>)
 800a6d2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a6d6:	2206      	movs	r2, #6
 800a6d8:	f7f5 fd7a 	bl	80001d0 <memchr>
 800a6dc:	2800      	cmp	r0, #0
 800a6de:	d036      	beq.n	800a74e <_svfiprintf_r+0x1d2>
 800a6e0:	4b21      	ldr	r3, [pc, #132]	@ (800a768 <_svfiprintf_r+0x1ec>)
 800a6e2:	bb1b      	cbnz	r3, 800a72c <_svfiprintf_r+0x1b0>
 800a6e4:	9b03      	ldr	r3, [sp, #12]
 800a6e6:	3307      	adds	r3, #7
 800a6e8:	f023 0307 	bic.w	r3, r3, #7
 800a6ec:	3308      	adds	r3, #8
 800a6ee:	9303      	str	r3, [sp, #12]
 800a6f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a6f2:	4433      	add	r3, r6
 800a6f4:	9309      	str	r3, [sp, #36]	@ 0x24
 800a6f6:	e76a      	b.n	800a5ce <_svfiprintf_r+0x52>
 800a6f8:	fb0c 3202 	mla	r2, ip, r2, r3
 800a6fc:	460c      	mov	r4, r1
 800a6fe:	2001      	movs	r0, #1
 800a700:	e7a8      	b.n	800a654 <_svfiprintf_r+0xd8>
 800a702:	2300      	movs	r3, #0
 800a704:	3401      	adds	r4, #1
 800a706:	9305      	str	r3, [sp, #20]
 800a708:	4619      	mov	r1, r3
 800a70a:	f04f 0c0a 	mov.w	ip, #10
 800a70e:	4620      	mov	r0, r4
 800a710:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a714:	3a30      	subs	r2, #48	@ 0x30
 800a716:	2a09      	cmp	r2, #9
 800a718:	d903      	bls.n	800a722 <_svfiprintf_r+0x1a6>
 800a71a:	2b00      	cmp	r3, #0
 800a71c:	d0c6      	beq.n	800a6ac <_svfiprintf_r+0x130>
 800a71e:	9105      	str	r1, [sp, #20]
 800a720:	e7c4      	b.n	800a6ac <_svfiprintf_r+0x130>
 800a722:	fb0c 2101 	mla	r1, ip, r1, r2
 800a726:	4604      	mov	r4, r0
 800a728:	2301      	movs	r3, #1
 800a72a:	e7f0      	b.n	800a70e <_svfiprintf_r+0x192>
 800a72c:	ab03      	add	r3, sp, #12
 800a72e:	9300      	str	r3, [sp, #0]
 800a730:	462a      	mov	r2, r5
 800a732:	4b0e      	ldr	r3, [pc, #56]	@ (800a76c <_svfiprintf_r+0x1f0>)
 800a734:	a904      	add	r1, sp, #16
 800a736:	4638      	mov	r0, r7
 800a738:	f7fd fd80 	bl	800823c <_printf_float>
 800a73c:	1c42      	adds	r2, r0, #1
 800a73e:	4606      	mov	r6, r0
 800a740:	d1d6      	bne.n	800a6f0 <_svfiprintf_r+0x174>
 800a742:	89ab      	ldrh	r3, [r5, #12]
 800a744:	065b      	lsls	r3, r3, #25
 800a746:	f53f af2d 	bmi.w	800a5a4 <_svfiprintf_r+0x28>
 800a74a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a74c:	e72c      	b.n	800a5a8 <_svfiprintf_r+0x2c>
 800a74e:	ab03      	add	r3, sp, #12
 800a750:	9300      	str	r3, [sp, #0]
 800a752:	462a      	mov	r2, r5
 800a754:	4b05      	ldr	r3, [pc, #20]	@ (800a76c <_svfiprintf_r+0x1f0>)
 800a756:	a904      	add	r1, sp, #16
 800a758:	4638      	mov	r0, r7
 800a75a:	f7fe f807 	bl	800876c <_printf_i>
 800a75e:	e7ed      	b.n	800a73c <_svfiprintf_r+0x1c0>
 800a760:	0800d1b8 	.word	0x0800d1b8
 800a764:	0800d1c2 	.word	0x0800d1c2
 800a768:	0800823d 	.word	0x0800823d
 800a76c:	0800a4c5 	.word	0x0800a4c5
 800a770:	0800d1be 	.word	0x0800d1be

0800a774 <__sfputc_r>:
 800a774:	6893      	ldr	r3, [r2, #8]
 800a776:	3b01      	subs	r3, #1
 800a778:	2b00      	cmp	r3, #0
 800a77a:	b410      	push	{r4}
 800a77c:	6093      	str	r3, [r2, #8]
 800a77e:	da08      	bge.n	800a792 <__sfputc_r+0x1e>
 800a780:	6994      	ldr	r4, [r2, #24]
 800a782:	42a3      	cmp	r3, r4
 800a784:	db01      	blt.n	800a78a <__sfputc_r+0x16>
 800a786:	290a      	cmp	r1, #10
 800a788:	d103      	bne.n	800a792 <__sfputc_r+0x1e>
 800a78a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a78e:	f7fe bab6 	b.w	8008cfe <__swbuf_r>
 800a792:	6813      	ldr	r3, [r2, #0]
 800a794:	1c58      	adds	r0, r3, #1
 800a796:	6010      	str	r0, [r2, #0]
 800a798:	7019      	strb	r1, [r3, #0]
 800a79a:	4608      	mov	r0, r1
 800a79c:	f85d 4b04 	ldr.w	r4, [sp], #4
 800a7a0:	4770      	bx	lr

0800a7a2 <__sfputs_r>:
 800a7a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a7a4:	4606      	mov	r6, r0
 800a7a6:	460f      	mov	r7, r1
 800a7a8:	4614      	mov	r4, r2
 800a7aa:	18d5      	adds	r5, r2, r3
 800a7ac:	42ac      	cmp	r4, r5
 800a7ae:	d101      	bne.n	800a7b4 <__sfputs_r+0x12>
 800a7b0:	2000      	movs	r0, #0
 800a7b2:	e007      	b.n	800a7c4 <__sfputs_r+0x22>
 800a7b4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a7b8:	463a      	mov	r2, r7
 800a7ba:	4630      	mov	r0, r6
 800a7bc:	f7ff ffda 	bl	800a774 <__sfputc_r>
 800a7c0:	1c43      	adds	r3, r0, #1
 800a7c2:	d1f3      	bne.n	800a7ac <__sfputs_r+0xa>
 800a7c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800a7c8 <_vfiprintf_r>:
 800a7c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7cc:	460d      	mov	r5, r1
 800a7ce:	b09d      	sub	sp, #116	@ 0x74
 800a7d0:	4614      	mov	r4, r2
 800a7d2:	4698      	mov	r8, r3
 800a7d4:	4606      	mov	r6, r0
 800a7d6:	b118      	cbz	r0, 800a7e0 <_vfiprintf_r+0x18>
 800a7d8:	6a03      	ldr	r3, [r0, #32]
 800a7da:	b90b      	cbnz	r3, 800a7e0 <_vfiprintf_r+0x18>
 800a7dc:	f7fe f972 	bl	8008ac4 <__sinit>
 800a7e0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a7e2:	07d9      	lsls	r1, r3, #31
 800a7e4:	d405      	bmi.n	800a7f2 <_vfiprintf_r+0x2a>
 800a7e6:	89ab      	ldrh	r3, [r5, #12]
 800a7e8:	059a      	lsls	r2, r3, #22
 800a7ea:	d402      	bmi.n	800a7f2 <_vfiprintf_r+0x2a>
 800a7ec:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a7ee:	f7fe fb98 	bl	8008f22 <__retarget_lock_acquire_recursive>
 800a7f2:	89ab      	ldrh	r3, [r5, #12]
 800a7f4:	071b      	lsls	r3, r3, #28
 800a7f6:	d501      	bpl.n	800a7fc <_vfiprintf_r+0x34>
 800a7f8:	692b      	ldr	r3, [r5, #16]
 800a7fa:	b99b      	cbnz	r3, 800a824 <_vfiprintf_r+0x5c>
 800a7fc:	4629      	mov	r1, r5
 800a7fe:	4630      	mov	r0, r6
 800a800:	f7fe fabc 	bl	8008d7c <__swsetup_r>
 800a804:	b170      	cbz	r0, 800a824 <_vfiprintf_r+0x5c>
 800a806:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a808:	07dc      	lsls	r4, r3, #31
 800a80a:	d504      	bpl.n	800a816 <_vfiprintf_r+0x4e>
 800a80c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800a810:	b01d      	add	sp, #116	@ 0x74
 800a812:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a816:	89ab      	ldrh	r3, [r5, #12]
 800a818:	0598      	lsls	r0, r3, #22
 800a81a:	d4f7      	bmi.n	800a80c <_vfiprintf_r+0x44>
 800a81c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a81e:	f7fe fb81 	bl	8008f24 <__retarget_lock_release_recursive>
 800a822:	e7f3      	b.n	800a80c <_vfiprintf_r+0x44>
 800a824:	2300      	movs	r3, #0
 800a826:	9309      	str	r3, [sp, #36]	@ 0x24
 800a828:	2320      	movs	r3, #32
 800a82a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a82e:	f8cd 800c 	str.w	r8, [sp, #12]
 800a832:	2330      	movs	r3, #48	@ 0x30
 800a834:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a9e4 <_vfiprintf_r+0x21c>
 800a838:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a83c:	f04f 0901 	mov.w	r9, #1
 800a840:	4623      	mov	r3, r4
 800a842:	469a      	mov	sl, r3
 800a844:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a848:	b10a      	cbz	r2, 800a84e <_vfiprintf_r+0x86>
 800a84a:	2a25      	cmp	r2, #37	@ 0x25
 800a84c:	d1f9      	bne.n	800a842 <_vfiprintf_r+0x7a>
 800a84e:	ebba 0b04 	subs.w	fp, sl, r4
 800a852:	d00b      	beq.n	800a86c <_vfiprintf_r+0xa4>
 800a854:	465b      	mov	r3, fp
 800a856:	4622      	mov	r2, r4
 800a858:	4629      	mov	r1, r5
 800a85a:	4630      	mov	r0, r6
 800a85c:	f7ff ffa1 	bl	800a7a2 <__sfputs_r>
 800a860:	3001      	adds	r0, #1
 800a862:	f000 80a7 	beq.w	800a9b4 <_vfiprintf_r+0x1ec>
 800a866:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a868:	445a      	add	r2, fp
 800a86a:	9209      	str	r2, [sp, #36]	@ 0x24
 800a86c:	f89a 3000 	ldrb.w	r3, [sl]
 800a870:	2b00      	cmp	r3, #0
 800a872:	f000 809f 	beq.w	800a9b4 <_vfiprintf_r+0x1ec>
 800a876:	2300      	movs	r3, #0
 800a878:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800a87c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a880:	f10a 0a01 	add.w	sl, sl, #1
 800a884:	9304      	str	r3, [sp, #16]
 800a886:	9307      	str	r3, [sp, #28]
 800a888:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a88c:	931a      	str	r3, [sp, #104]	@ 0x68
 800a88e:	4654      	mov	r4, sl
 800a890:	2205      	movs	r2, #5
 800a892:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a896:	4853      	ldr	r0, [pc, #332]	@ (800a9e4 <_vfiprintf_r+0x21c>)
 800a898:	f7f5 fc9a 	bl	80001d0 <memchr>
 800a89c:	9a04      	ldr	r2, [sp, #16]
 800a89e:	b9d8      	cbnz	r0, 800a8d8 <_vfiprintf_r+0x110>
 800a8a0:	06d1      	lsls	r1, r2, #27
 800a8a2:	bf44      	itt	mi
 800a8a4:	2320      	movmi	r3, #32
 800a8a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a8aa:	0713      	lsls	r3, r2, #28
 800a8ac:	bf44      	itt	mi
 800a8ae:	232b      	movmi	r3, #43	@ 0x2b
 800a8b0:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a8b4:	f89a 3000 	ldrb.w	r3, [sl]
 800a8b8:	2b2a      	cmp	r3, #42	@ 0x2a
 800a8ba:	d015      	beq.n	800a8e8 <_vfiprintf_r+0x120>
 800a8bc:	9a07      	ldr	r2, [sp, #28]
 800a8be:	4654      	mov	r4, sl
 800a8c0:	2000      	movs	r0, #0
 800a8c2:	f04f 0c0a 	mov.w	ip, #10
 800a8c6:	4621      	mov	r1, r4
 800a8c8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a8cc:	3b30      	subs	r3, #48	@ 0x30
 800a8ce:	2b09      	cmp	r3, #9
 800a8d0:	d94b      	bls.n	800a96a <_vfiprintf_r+0x1a2>
 800a8d2:	b1b0      	cbz	r0, 800a902 <_vfiprintf_r+0x13a>
 800a8d4:	9207      	str	r2, [sp, #28]
 800a8d6:	e014      	b.n	800a902 <_vfiprintf_r+0x13a>
 800a8d8:	eba0 0308 	sub.w	r3, r0, r8
 800a8dc:	fa09 f303 	lsl.w	r3, r9, r3
 800a8e0:	4313      	orrs	r3, r2
 800a8e2:	9304      	str	r3, [sp, #16]
 800a8e4:	46a2      	mov	sl, r4
 800a8e6:	e7d2      	b.n	800a88e <_vfiprintf_r+0xc6>
 800a8e8:	9b03      	ldr	r3, [sp, #12]
 800a8ea:	1d19      	adds	r1, r3, #4
 800a8ec:	681b      	ldr	r3, [r3, #0]
 800a8ee:	9103      	str	r1, [sp, #12]
 800a8f0:	2b00      	cmp	r3, #0
 800a8f2:	bfbb      	ittet	lt
 800a8f4:	425b      	neglt	r3, r3
 800a8f6:	f042 0202 	orrlt.w	r2, r2, #2
 800a8fa:	9307      	strge	r3, [sp, #28]
 800a8fc:	9307      	strlt	r3, [sp, #28]
 800a8fe:	bfb8      	it	lt
 800a900:	9204      	strlt	r2, [sp, #16]
 800a902:	7823      	ldrb	r3, [r4, #0]
 800a904:	2b2e      	cmp	r3, #46	@ 0x2e
 800a906:	d10a      	bne.n	800a91e <_vfiprintf_r+0x156>
 800a908:	7863      	ldrb	r3, [r4, #1]
 800a90a:	2b2a      	cmp	r3, #42	@ 0x2a
 800a90c:	d132      	bne.n	800a974 <_vfiprintf_r+0x1ac>
 800a90e:	9b03      	ldr	r3, [sp, #12]
 800a910:	1d1a      	adds	r2, r3, #4
 800a912:	681b      	ldr	r3, [r3, #0]
 800a914:	9203      	str	r2, [sp, #12]
 800a916:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a91a:	3402      	adds	r4, #2
 800a91c:	9305      	str	r3, [sp, #20]
 800a91e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a9f4 <_vfiprintf_r+0x22c>
 800a922:	7821      	ldrb	r1, [r4, #0]
 800a924:	2203      	movs	r2, #3
 800a926:	4650      	mov	r0, sl
 800a928:	f7f5 fc52 	bl	80001d0 <memchr>
 800a92c:	b138      	cbz	r0, 800a93e <_vfiprintf_r+0x176>
 800a92e:	9b04      	ldr	r3, [sp, #16]
 800a930:	eba0 000a 	sub.w	r0, r0, sl
 800a934:	2240      	movs	r2, #64	@ 0x40
 800a936:	4082      	lsls	r2, r0
 800a938:	4313      	orrs	r3, r2
 800a93a:	3401      	adds	r4, #1
 800a93c:	9304      	str	r3, [sp, #16]
 800a93e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a942:	4829      	ldr	r0, [pc, #164]	@ (800a9e8 <_vfiprintf_r+0x220>)
 800a944:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a948:	2206      	movs	r2, #6
 800a94a:	f7f5 fc41 	bl	80001d0 <memchr>
 800a94e:	2800      	cmp	r0, #0
 800a950:	d03f      	beq.n	800a9d2 <_vfiprintf_r+0x20a>
 800a952:	4b26      	ldr	r3, [pc, #152]	@ (800a9ec <_vfiprintf_r+0x224>)
 800a954:	bb1b      	cbnz	r3, 800a99e <_vfiprintf_r+0x1d6>
 800a956:	9b03      	ldr	r3, [sp, #12]
 800a958:	3307      	adds	r3, #7
 800a95a:	f023 0307 	bic.w	r3, r3, #7
 800a95e:	3308      	adds	r3, #8
 800a960:	9303      	str	r3, [sp, #12]
 800a962:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a964:	443b      	add	r3, r7
 800a966:	9309      	str	r3, [sp, #36]	@ 0x24
 800a968:	e76a      	b.n	800a840 <_vfiprintf_r+0x78>
 800a96a:	fb0c 3202 	mla	r2, ip, r2, r3
 800a96e:	460c      	mov	r4, r1
 800a970:	2001      	movs	r0, #1
 800a972:	e7a8      	b.n	800a8c6 <_vfiprintf_r+0xfe>
 800a974:	2300      	movs	r3, #0
 800a976:	3401      	adds	r4, #1
 800a978:	9305      	str	r3, [sp, #20]
 800a97a:	4619      	mov	r1, r3
 800a97c:	f04f 0c0a 	mov.w	ip, #10
 800a980:	4620      	mov	r0, r4
 800a982:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a986:	3a30      	subs	r2, #48	@ 0x30
 800a988:	2a09      	cmp	r2, #9
 800a98a:	d903      	bls.n	800a994 <_vfiprintf_r+0x1cc>
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d0c6      	beq.n	800a91e <_vfiprintf_r+0x156>
 800a990:	9105      	str	r1, [sp, #20]
 800a992:	e7c4      	b.n	800a91e <_vfiprintf_r+0x156>
 800a994:	fb0c 2101 	mla	r1, ip, r1, r2
 800a998:	4604      	mov	r4, r0
 800a99a:	2301      	movs	r3, #1
 800a99c:	e7f0      	b.n	800a980 <_vfiprintf_r+0x1b8>
 800a99e:	ab03      	add	r3, sp, #12
 800a9a0:	9300      	str	r3, [sp, #0]
 800a9a2:	462a      	mov	r2, r5
 800a9a4:	4b12      	ldr	r3, [pc, #72]	@ (800a9f0 <_vfiprintf_r+0x228>)
 800a9a6:	a904      	add	r1, sp, #16
 800a9a8:	4630      	mov	r0, r6
 800a9aa:	f7fd fc47 	bl	800823c <_printf_float>
 800a9ae:	4607      	mov	r7, r0
 800a9b0:	1c78      	adds	r0, r7, #1
 800a9b2:	d1d6      	bne.n	800a962 <_vfiprintf_r+0x19a>
 800a9b4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a9b6:	07d9      	lsls	r1, r3, #31
 800a9b8:	d405      	bmi.n	800a9c6 <_vfiprintf_r+0x1fe>
 800a9ba:	89ab      	ldrh	r3, [r5, #12]
 800a9bc:	059a      	lsls	r2, r3, #22
 800a9be:	d402      	bmi.n	800a9c6 <_vfiprintf_r+0x1fe>
 800a9c0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a9c2:	f7fe faaf 	bl	8008f24 <__retarget_lock_release_recursive>
 800a9c6:	89ab      	ldrh	r3, [r5, #12]
 800a9c8:	065b      	lsls	r3, r3, #25
 800a9ca:	f53f af1f 	bmi.w	800a80c <_vfiprintf_r+0x44>
 800a9ce:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a9d0:	e71e      	b.n	800a810 <_vfiprintf_r+0x48>
 800a9d2:	ab03      	add	r3, sp, #12
 800a9d4:	9300      	str	r3, [sp, #0]
 800a9d6:	462a      	mov	r2, r5
 800a9d8:	4b05      	ldr	r3, [pc, #20]	@ (800a9f0 <_vfiprintf_r+0x228>)
 800a9da:	a904      	add	r1, sp, #16
 800a9dc:	4630      	mov	r0, r6
 800a9de:	f7fd fec5 	bl	800876c <_printf_i>
 800a9e2:	e7e4      	b.n	800a9ae <_vfiprintf_r+0x1e6>
 800a9e4:	0800d1b8 	.word	0x0800d1b8
 800a9e8:	0800d1c2 	.word	0x0800d1c2
 800a9ec:	0800823d 	.word	0x0800823d
 800a9f0:	0800a7a3 	.word	0x0800a7a3
 800a9f4:	0800d1be 	.word	0x0800d1be

0800a9f8 <__sflush_r>:
 800a9f8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a9fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa00:	0716      	lsls	r6, r2, #28
 800aa02:	4605      	mov	r5, r0
 800aa04:	460c      	mov	r4, r1
 800aa06:	d454      	bmi.n	800aab2 <__sflush_r+0xba>
 800aa08:	684b      	ldr	r3, [r1, #4]
 800aa0a:	2b00      	cmp	r3, #0
 800aa0c:	dc02      	bgt.n	800aa14 <__sflush_r+0x1c>
 800aa0e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800aa10:	2b00      	cmp	r3, #0
 800aa12:	dd48      	ble.n	800aaa6 <__sflush_r+0xae>
 800aa14:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800aa16:	2e00      	cmp	r6, #0
 800aa18:	d045      	beq.n	800aaa6 <__sflush_r+0xae>
 800aa1a:	2300      	movs	r3, #0
 800aa1c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800aa20:	682f      	ldr	r7, [r5, #0]
 800aa22:	6a21      	ldr	r1, [r4, #32]
 800aa24:	602b      	str	r3, [r5, #0]
 800aa26:	d030      	beq.n	800aa8a <__sflush_r+0x92>
 800aa28:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800aa2a:	89a3      	ldrh	r3, [r4, #12]
 800aa2c:	0759      	lsls	r1, r3, #29
 800aa2e:	d505      	bpl.n	800aa3c <__sflush_r+0x44>
 800aa30:	6863      	ldr	r3, [r4, #4]
 800aa32:	1ad2      	subs	r2, r2, r3
 800aa34:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800aa36:	b10b      	cbz	r3, 800aa3c <__sflush_r+0x44>
 800aa38:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800aa3a:	1ad2      	subs	r2, r2, r3
 800aa3c:	2300      	movs	r3, #0
 800aa3e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800aa40:	6a21      	ldr	r1, [r4, #32]
 800aa42:	4628      	mov	r0, r5
 800aa44:	47b0      	blx	r6
 800aa46:	1c43      	adds	r3, r0, #1
 800aa48:	89a3      	ldrh	r3, [r4, #12]
 800aa4a:	d106      	bne.n	800aa5a <__sflush_r+0x62>
 800aa4c:	6829      	ldr	r1, [r5, #0]
 800aa4e:	291d      	cmp	r1, #29
 800aa50:	d82b      	bhi.n	800aaaa <__sflush_r+0xb2>
 800aa52:	4a2a      	ldr	r2, [pc, #168]	@ (800aafc <__sflush_r+0x104>)
 800aa54:	410a      	asrs	r2, r1
 800aa56:	07d6      	lsls	r6, r2, #31
 800aa58:	d427      	bmi.n	800aaaa <__sflush_r+0xb2>
 800aa5a:	2200      	movs	r2, #0
 800aa5c:	6062      	str	r2, [r4, #4]
 800aa5e:	04d9      	lsls	r1, r3, #19
 800aa60:	6922      	ldr	r2, [r4, #16]
 800aa62:	6022      	str	r2, [r4, #0]
 800aa64:	d504      	bpl.n	800aa70 <__sflush_r+0x78>
 800aa66:	1c42      	adds	r2, r0, #1
 800aa68:	d101      	bne.n	800aa6e <__sflush_r+0x76>
 800aa6a:	682b      	ldr	r3, [r5, #0]
 800aa6c:	b903      	cbnz	r3, 800aa70 <__sflush_r+0x78>
 800aa6e:	6560      	str	r0, [r4, #84]	@ 0x54
 800aa70:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800aa72:	602f      	str	r7, [r5, #0]
 800aa74:	b1b9      	cbz	r1, 800aaa6 <__sflush_r+0xae>
 800aa76:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800aa7a:	4299      	cmp	r1, r3
 800aa7c:	d002      	beq.n	800aa84 <__sflush_r+0x8c>
 800aa7e:	4628      	mov	r0, r5
 800aa80:	f7ff f89e 	bl	8009bc0 <_free_r>
 800aa84:	2300      	movs	r3, #0
 800aa86:	6363      	str	r3, [r4, #52]	@ 0x34
 800aa88:	e00d      	b.n	800aaa6 <__sflush_r+0xae>
 800aa8a:	2301      	movs	r3, #1
 800aa8c:	4628      	mov	r0, r5
 800aa8e:	47b0      	blx	r6
 800aa90:	4602      	mov	r2, r0
 800aa92:	1c50      	adds	r0, r2, #1
 800aa94:	d1c9      	bne.n	800aa2a <__sflush_r+0x32>
 800aa96:	682b      	ldr	r3, [r5, #0]
 800aa98:	2b00      	cmp	r3, #0
 800aa9a:	d0c6      	beq.n	800aa2a <__sflush_r+0x32>
 800aa9c:	2b1d      	cmp	r3, #29
 800aa9e:	d001      	beq.n	800aaa4 <__sflush_r+0xac>
 800aaa0:	2b16      	cmp	r3, #22
 800aaa2:	d11e      	bne.n	800aae2 <__sflush_r+0xea>
 800aaa4:	602f      	str	r7, [r5, #0]
 800aaa6:	2000      	movs	r0, #0
 800aaa8:	e022      	b.n	800aaf0 <__sflush_r+0xf8>
 800aaaa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800aaae:	b21b      	sxth	r3, r3
 800aab0:	e01b      	b.n	800aaea <__sflush_r+0xf2>
 800aab2:	690f      	ldr	r7, [r1, #16]
 800aab4:	2f00      	cmp	r7, #0
 800aab6:	d0f6      	beq.n	800aaa6 <__sflush_r+0xae>
 800aab8:	0793      	lsls	r3, r2, #30
 800aaba:	680e      	ldr	r6, [r1, #0]
 800aabc:	bf08      	it	eq
 800aabe:	694b      	ldreq	r3, [r1, #20]
 800aac0:	600f      	str	r7, [r1, #0]
 800aac2:	bf18      	it	ne
 800aac4:	2300      	movne	r3, #0
 800aac6:	eba6 0807 	sub.w	r8, r6, r7
 800aaca:	608b      	str	r3, [r1, #8]
 800aacc:	f1b8 0f00 	cmp.w	r8, #0
 800aad0:	dde9      	ble.n	800aaa6 <__sflush_r+0xae>
 800aad2:	6a21      	ldr	r1, [r4, #32]
 800aad4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800aad6:	4643      	mov	r3, r8
 800aad8:	463a      	mov	r2, r7
 800aada:	4628      	mov	r0, r5
 800aadc:	47b0      	blx	r6
 800aade:	2800      	cmp	r0, #0
 800aae0:	dc08      	bgt.n	800aaf4 <__sflush_r+0xfc>
 800aae2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aae6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800aaea:	81a3      	strh	r3, [r4, #12]
 800aaec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800aaf0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aaf4:	4407      	add	r7, r0
 800aaf6:	eba8 0800 	sub.w	r8, r8, r0
 800aafa:	e7e7      	b.n	800aacc <__sflush_r+0xd4>
 800aafc:	dfbffffe 	.word	0xdfbffffe

0800ab00 <_fflush_r>:
 800ab00:	b538      	push	{r3, r4, r5, lr}
 800ab02:	690b      	ldr	r3, [r1, #16]
 800ab04:	4605      	mov	r5, r0
 800ab06:	460c      	mov	r4, r1
 800ab08:	b913      	cbnz	r3, 800ab10 <_fflush_r+0x10>
 800ab0a:	2500      	movs	r5, #0
 800ab0c:	4628      	mov	r0, r5
 800ab0e:	bd38      	pop	{r3, r4, r5, pc}
 800ab10:	b118      	cbz	r0, 800ab1a <_fflush_r+0x1a>
 800ab12:	6a03      	ldr	r3, [r0, #32]
 800ab14:	b90b      	cbnz	r3, 800ab1a <_fflush_r+0x1a>
 800ab16:	f7fd ffd5 	bl	8008ac4 <__sinit>
 800ab1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ab1e:	2b00      	cmp	r3, #0
 800ab20:	d0f3      	beq.n	800ab0a <_fflush_r+0xa>
 800ab22:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800ab24:	07d0      	lsls	r0, r2, #31
 800ab26:	d404      	bmi.n	800ab32 <_fflush_r+0x32>
 800ab28:	0599      	lsls	r1, r3, #22
 800ab2a:	d402      	bmi.n	800ab32 <_fflush_r+0x32>
 800ab2c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ab2e:	f7fe f9f8 	bl	8008f22 <__retarget_lock_acquire_recursive>
 800ab32:	4628      	mov	r0, r5
 800ab34:	4621      	mov	r1, r4
 800ab36:	f7ff ff5f 	bl	800a9f8 <__sflush_r>
 800ab3a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ab3c:	07da      	lsls	r2, r3, #31
 800ab3e:	4605      	mov	r5, r0
 800ab40:	d4e4      	bmi.n	800ab0c <_fflush_r+0xc>
 800ab42:	89a3      	ldrh	r3, [r4, #12]
 800ab44:	059b      	lsls	r3, r3, #22
 800ab46:	d4e1      	bmi.n	800ab0c <_fflush_r+0xc>
 800ab48:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ab4a:	f7fe f9eb 	bl	8008f24 <__retarget_lock_release_recursive>
 800ab4e:	e7dd      	b.n	800ab0c <_fflush_r+0xc>

0800ab50 <__swhatbuf_r>:
 800ab50:	b570      	push	{r4, r5, r6, lr}
 800ab52:	460c      	mov	r4, r1
 800ab54:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800ab58:	2900      	cmp	r1, #0
 800ab5a:	b096      	sub	sp, #88	@ 0x58
 800ab5c:	4615      	mov	r5, r2
 800ab5e:	461e      	mov	r6, r3
 800ab60:	da0d      	bge.n	800ab7e <__swhatbuf_r+0x2e>
 800ab62:	89a3      	ldrh	r3, [r4, #12]
 800ab64:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800ab68:	f04f 0100 	mov.w	r1, #0
 800ab6c:	bf14      	ite	ne
 800ab6e:	2340      	movne	r3, #64	@ 0x40
 800ab70:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800ab74:	2000      	movs	r0, #0
 800ab76:	6031      	str	r1, [r6, #0]
 800ab78:	602b      	str	r3, [r5, #0]
 800ab7a:	b016      	add	sp, #88	@ 0x58
 800ab7c:	bd70      	pop	{r4, r5, r6, pc}
 800ab7e:	466a      	mov	r2, sp
 800ab80:	f000 f862 	bl	800ac48 <_fstat_r>
 800ab84:	2800      	cmp	r0, #0
 800ab86:	dbec      	blt.n	800ab62 <__swhatbuf_r+0x12>
 800ab88:	9901      	ldr	r1, [sp, #4]
 800ab8a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800ab8e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800ab92:	4259      	negs	r1, r3
 800ab94:	4159      	adcs	r1, r3
 800ab96:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ab9a:	e7eb      	b.n	800ab74 <__swhatbuf_r+0x24>

0800ab9c <__smakebuf_r>:
 800ab9c:	898b      	ldrh	r3, [r1, #12]
 800ab9e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800aba0:	079d      	lsls	r5, r3, #30
 800aba2:	4606      	mov	r6, r0
 800aba4:	460c      	mov	r4, r1
 800aba6:	d507      	bpl.n	800abb8 <__smakebuf_r+0x1c>
 800aba8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800abac:	6023      	str	r3, [r4, #0]
 800abae:	6123      	str	r3, [r4, #16]
 800abb0:	2301      	movs	r3, #1
 800abb2:	6163      	str	r3, [r4, #20]
 800abb4:	b003      	add	sp, #12
 800abb6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800abb8:	ab01      	add	r3, sp, #4
 800abba:	466a      	mov	r2, sp
 800abbc:	f7ff ffc8 	bl	800ab50 <__swhatbuf_r>
 800abc0:	9f00      	ldr	r7, [sp, #0]
 800abc2:	4605      	mov	r5, r0
 800abc4:	4639      	mov	r1, r7
 800abc6:	4630      	mov	r0, r6
 800abc8:	f7ff f86e 	bl	8009ca8 <_malloc_r>
 800abcc:	b948      	cbnz	r0, 800abe2 <__smakebuf_r+0x46>
 800abce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800abd2:	059a      	lsls	r2, r3, #22
 800abd4:	d4ee      	bmi.n	800abb4 <__smakebuf_r+0x18>
 800abd6:	f023 0303 	bic.w	r3, r3, #3
 800abda:	f043 0302 	orr.w	r3, r3, #2
 800abde:	81a3      	strh	r3, [r4, #12]
 800abe0:	e7e2      	b.n	800aba8 <__smakebuf_r+0xc>
 800abe2:	89a3      	ldrh	r3, [r4, #12]
 800abe4:	6020      	str	r0, [r4, #0]
 800abe6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800abea:	81a3      	strh	r3, [r4, #12]
 800abec:	9b01      	ldr	r3, [sp, #4]
 800abee:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800abf2:	b15b      	cbz	r3, 800ac0c <__smakebuf_r+0x70>
 800abf4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800abf8:	4630      	mov	r0, r6
 800abfa:	f000 f837 	bl	800ac6c <_isatty_r>
 800abfe:	b128      	cbz	r0, 800ac0c <__smakebuf_r+0x70>
 800ac00:	89a3      	ldrh	r3, [r4, #12]
 800ac02:	f023 0303 	bic.w	r3, r3, #3
 800ac06:	f043 0301 	orr.w	r3, r3, #1
 800ac0a:	81a3      	strh	r3, [r4, #12]
 800ac0c:	89a3      	ldrh	r3, [r4, #12]
 800ac0e:	431d      	orrs	r5, r3
 800ac10:	81a5      	strh	r5, [r4, #12]
 800ac12:	e7cf      	b.n	800abb4 <__smakebuf_r+0x18>

0800ac14 <memmove>:
 800ac14:	4288      	cmp	r0, r1
 800ac16:	b510      	push	{r4, lr}
 800ac18:	eb01 0402 	add.w	r4, r1, r2
 800ac1c:	d902      	bls.n	800ac24 <memmove+0x10>
 800ac1e:	4284      	cmp	r4, r0
 800ac20:	4623      	mov	r3, r4
 800ac22:	d807      	bhi.n	800ac34 <memmove+0x20>
 800ac24:	1e43      	subs	r3, r0, #1
 800ac26:	42a1      	cmp	r1, r4
 800ac28:	d008      	beq.n	800ac3c <memmove+0x28>
 800ac2a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ac2e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800ac32:	e7f8      	b.n	800ac26 <memmove+0x12>
 800ac34:	4402      	add	r2, r0
 800ac36:	4601      	mov	r1, r0
 800ac38:	428a      	cmp	r2, r1
 800ac3a:	d100      	bne.n	800ac3e <memmove+0x2a>
 800ac3c:	bd10      	pop	{r4, pc}
 800ac3e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800ac42:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800ac46:	e7f7      	b.n	800ac38 <memmove+0x24>

0800ac48 <_fstat_r>:
 800ac48:	b538      	push	{r3, r4, r5, lr}
 800ac4a:	4d07      	ldr	r5, [pc, #28]	@ (800ac68 <_fstat_r+0x20>)
 800ac4c:	2300      	movs	r3, #0
 800ac4e:	4604      	mov	r4, r0
 800ac50:	4608      	mov	r0, r1
 800ac52:	4611      	mov	r1, r2
 800ac54:	602b      	str	r3, [r5, #0]
 800ac56:	f7f9 fe7c 	bl	8004952 <_fstat>
 800ac5a:	1c43      	adds	r3, r0, #1
 800ac5c:	d102      	bne.n	800ac64 <_fstat_r+0x1c>
 800ac5e:	682b      	ldr	r3, [r5, #0]
 800ac60:	b103      	cbz	r3, 800ac64 <_fstat_r+0x1c>
 800ac62:	6023      	str	r3, [r4, #0]
 800ac64:	bd38      	pop	{r3, r4, r5, pc}
 800ac66:	bf00      	nop
 800ac68:	20000858 	.word	0x20000858

0800ac6c <_isatty_r>:
 800ac6c:	b538      	push	{r3, r4, r5, lr}
 800ac6e:	4d06      	ldr	r5, [pc, #24]	@ (800ac88 <_isatty_r+0x1c>)
 800ac70:	2300      	movs	r3, #0
 800ac72:	4604      	mov	r4, r0
 800ac74:	4608      	mov	r0, r1
 800ac76:	602b      	str	r3, [r5, #0]
 800ac78:	f7f9 fe7b 	bl	8004972 <_isatty>
 800ac7c:	1c43      	adds	r3, r0, #1
 800ac7e:	d102      	bne.n	800ac86 <_isatty_r+0x1a>
 800ac80:	682b      	ldr	r3, [r5, #0]
 800ac82:	b103      	cbz	r3, 800ac86 <_isatty_r+0x1a>
 800ac84:	6023      	str	r3, [r4, #0]
 800ac86:	bd38      	pop	{r3, r4, r5, pc}
 800ac88:	20000858 	.word	0x20000858

0800ac8c <_sbrk_r>:
 800ac8c:	b538      	push	{r3, r4, r5, lr}
 800ac8e:	4d06      	ldr	r5, [pc, #24]	@ (800aca8 <_sbrk_r+0x1c>)
 800ac90:	2300      	movs	r3, #0
 800ac92:	4604      	mov	r4, r0
 800ac94:	4608      	mov	r0, r1
 800ac96:	602b      	str	r3, [r5, #0]
 800ac98:	f7f9 fe84 	bl	80049a4 <_sbrk>
 800ac9c:	1c43      	adds	r3, r0, #1
 800ac9e:	d102      	bne.n	800aca6 <_sbrk_r+0x1a>
 800aca0:	682b      	ldr	r3, [r5, #0]
 800aca2:	b103      	cbz	r3, 800aca6 <_sbrk_r+0x1a>
 800aca4:	6023      	str	r3, [r4, #0]
 800aca6:	bd38      	pop	{r3, r4, r5, pc}
 800aca8:	20000858 	.word	0x20000858

0800acac <memcpy>:
 800acac:	440a      	add	r2, r1
 800acae:	4291      	cmp	r1, r2
 800acb0:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800acb4:	d100      	bne.n	800acb8 <memcpy+0xc>
 800acb6:	4770      	bx	lr
 800acb8:	b510      	push	{r4, lr}
 800acba:	f811 4b01 	ldrb.w	r4, [r1], #1
 800acbe:	f803 4f01 	strb.w	r4, [r3, #1]!
 800acc2:	4291      	cmp	r1, r2
 800acc4:	d1f9      	bne.n	800acba <memcpy+0xe>
 800acc6:	bd10      	pop	{r4, pc}

0800acc8 <__assert_func>:
 800acc8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800acca:	4614      	mov	r4, r2
 800accc:	461a      	mov	r2, r3
 800acce:	4b09      	ldr	r3, [pc, #36]	@ (800acf4 <__assert_func+0x2c>)
 800acd0:	681b      	ldr	r3, [r3, #0]
 800acd2:	4605      	mov	r5, r0
 800acd4:	68d8      	ldr	r0, [r3, #12]
 800acd6:	b954      	cbnz	r4, 800acee <__assert_func+0x26>
 800acd8:	4b07      	ldr	r3, [pc, #28]	@ (800acf8 <__assert_func+0x30>)
 800acda:	461c      	mov	r4, r3
 800acdc:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ace0:	9100      	str	r1, [sp, #0]
 800ace2:	462b      	mov	r3, r5
 800ace4:	4905      	ldr	r1, [pc, #20]	@ (800acfc <__assert_func+0x34>)
 800ace6:	f000 f86f 	bl	800adc8 <fiprintf>
 800acea:	f000 f87f 	bl	800adec <abort>
 800acee:	4b04      	ldr	r3, [pc, #16]	@ (800ad00 <__assert_func+0x38>)
 800acf0:	e7f4      	b.n	800acdc <__assert_func+0x14>
 800acf2:	bf00      	nop
 800acf4:	200000bc 	.word	0x200000bc
 800acf8:	0800d20e 	.word	0x0800d20e
 800acfc:	0800d1e0 	.word	0x0800d1e0
 800ad00:	0800d1d3 	.word	0x0800d1d3

0800ad04 <_calloc_r>:
 800ad04:	b570      	push	{r4, r5, r6, lr}
 800ad06:	fba1 5402 	umull	r5, r4, r1, r2
 800ad0a:	b93c      	cbnz	r4, 800ad1c <_calloc_r+0x18>
 800ad0c:	4629      	mov	r1, r5
 800ad0e:	f7fe ffcb 	bl	8009ca8 <_malloc_r>
 800ad12:	4606      	mov	r6, r0
 800ad14:	b928      	cbnz	r0, 800ad22 <_calloc_r+0x1e>
 800ad16:	2600      	movs	r6, #0
 800ad18:	4630      	mov	r0, r6
 800ad1a:	bd70      	pop	{r4, r5, r6, pc}
 800ad1c:	220c      	movs	r2, #12
 800ad1e:	6002      	str	r2, [r0, #0]
 800ad20:	e7f9      	b.n	800ad16 <_calloc_r+0x12>
 800ad22:	462a      	mov	r2, r5
 800ad24:	4621      	mov	r1, r4
 800ad26:	f7fe f87f 	bl	8008e28 <memset>
 800ad2a:	e7f5      	b.n	800ad18 <_calloc_r+0x14>

0800ad2c <__ascii_mbtowc>:
 800ad2c:	b082      	sub	sp, #8
 800ad2e:	b901      	cbnz	r1, 800ad32 <__ascii_mbtowc+0x6>
 800ad30:	a901      	add	r1, sp, #4
 800ad32:	b142      	cbz	r2, 800ad46 <__ascii_mbtowc+0x1a>
 800ad34:	b14b      	cbz	r3, 800ad4a <__ascii_mbtowc+0x1e>
 800ad36:	7813      	ldrb	r3, [r2, #0]
 800ad38:	600b      	str	r3, [r1, #0]
 800ad3a:	7812      	ldrb	r2, [r2, #0]
 800ad3c:	1e10      	subs	r0, r2, #0
 800ad3e:	bf18      	it	ne
 800ad40:	2001      	movne	r0, #1
 800ad42:	b002      	add	sp, #8
 800ad44:	4770      	bx	lr
 800ad46:	4610      	mov	r0, r2
 800ad48:	e7fb      	b.n	800ad42 <__ascii_mbtowc+0x16>
 800ad4a:	f06f 0001 	mvn.w	r0, #1
 800ad4e:	e7f8      	b.n	800ad42 <__ascii_mbtowc+0x16>

0800ad50 <_realloc_r>:
 800ad50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ad54:	4680      	mov	r8, r0
 800ad56:	4615      	mov	r5, r2
 800ad58:	460c      	mov	r4, r1
 800ad5a:	b921      	cbnz	r1, 800ad66 <_realloc_r+0x16>
 800ad5c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800ad60:	4611      	mov	r1, r2
 800ad62:	f7fe bfa1 	b.w	8009ca8 <_malloc_r>
 800ad66:	b92a      	cbnz	r2, 800ad74 <_realloc_r+0x24>
 800ad68:	f7fe ff2a 	bl	8009bc0 <_free_r>
 800ad6c:	2400      	movs	r4, #0
 800ad6e:	4620      	mov	r0, r4
 800ad70:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ad74:	f000 f841 	bl	800adfa <_malloc_usable_size_r>
 800ad78:	4285      	cmp	r5, r0
 800ad7a:	4606      	mov	r6, r0
 800ad7c:	d802      	bhi.n	800ad84 <_realloc_r+0x34>
 800ad7e:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800ad82:	d8f4      	bhi.n	800ad6e <_realloc_r+0x1e>
 800ad84:	4629      	mov	r1, r5
 800ad86:	4640      	mov	r0, r8
 800ad88:	f7fe ff8e 	bl	8009ca8 <_malloc_r>
 800ad8c:	4607      	mov	r7, r0
 800ad8e:	2800      	cmp	r0, #0
 800ad90:	d0ec      	beq.n	800ad6c <_realloc_r+0x1c>
 800ad92:	42b5      	cmp	r5, r6
 800ad94:	462a      	mov	r2, r5
 800ad96:	4621      	mov	r1, r4
 800ad98:	bf28      	it	cs
 800ad9a:	4632      	movcs	r2, r6
 800ad9c:	f7ff ff86 	bl	800acac <memcpy>
 800ada0:	4621      	mov	r1, r4
 800ada2:	4640      	mov	r0, r8
 800ada4:	f7fe ff0c 	bl	8009bc0 <_free_r>
 800ada8:	463c      	mov	r4, r7
 800adaa:	e7e0      	b.n	800ad6e <_realloc_r+0x1e>

0800adac <__ascii_wctomb>:
 800adac:	4603      	mov	r3, r0
 800adae:	4608      	mov	r0, r1
 800adb0:	b141      	cbz	r1, 800adc4 <__ascii_wctomb+0x18>
 800adb2:	2aff      	cmp	r2, #255	@ 0xff
 800adb4:	d904      	bls.n	800adc0 <__ascii_wctomb+0x14>
 800adb6:	228a      	movs	r2, #138	@ 0x8a
 800adb8:	601a      	str	r2, [r3, #0]
 800adba:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800adbe:	4770      	bx	lr
 800adc0:	700a      	strb	r2, [r1, #0]
 800adc2:	2001      	movs	r0, #1
 800adc4:	4770      	bx	lr
	...

0800adc8 <fiprintf>:
 800adc8:	b40e      	push	{r1, r2, r3}
 800adca:	b503      	push	{r0, r1, lr}
 800adcc:	4601      	mov	r1, r0
 800adce:	ab03      	add	r3, sp, #12
 800add0:	4805      	ldr	r0, [pc, #20]	@ (800ade8 <fiprintf+0x20>)
 800add2:	f853 2b04 	ldr.w	r2, [r3], #4
 800add6:	6800      	ldr	r0, [r0, #0]
 800add8:	9301      	str	r3, [sp, #4]
 800adda:	f7ff fcf5 	bl	800a7c8 <_vfiprintf_r>
 800adde:	b002      	add	sp, #8
 800ade0:	f85d eb04 	ldr.w	lr, [sp], #4
 800ade4:	b003      	add	sp, #12
 800ade6:	4770      	bx	lr
 800ade8:	200000bc 	.word	0x200000bc

0800adec <abort>:
 800adec:	b508      	push	{r3, lr}
 800adee:	2006      	movs	r0, #6
 800adf0:	f000 f834 	bl	800ae5c <raise>
 800adf4:	2001      	movs	r0, #1
 800adf6:	f7f9 fd5c 	bl	80048b2 <_exit>

0800adfa <_malloc_usable_size_r>:
 800adfa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800adfe:	1f18      	subs	r0, r3, #4
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	bfbc      	itt	lt
 800ae04:	580b      	ldrlt	r3, [r1, r0]
 800ae06:	18c0      	addlt	r0, r0, r3
 800ae08:	4770      	bx	lr

0800ae0a <_raise_r>:
 800ae0a:	291f      	cmp	r1, #31
 800ae0c:	b538      	push	{r3, r4, r5, lr}
 800ae0e:	4605      	mov	r5, r0
 800ae10:	460c      	mov	r4, r1
 800ae12:	d904      	bls.n	800ae1e <_raise_r+0x14>
 800ae14:	2316      	movs	r3, #22
 800ae16:	6003      	str	r3, [r0, #0]
 800ae18:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ae1c:	bd38      	pop	{r3, r4, r5, pc}
 800ae1e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800ae20:	b112      	cbz	r2, 800ae28 <_raise_r+0x1e>
 800ae22:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800ae26:	b94b      	cbnz	r3, 800ae3c <_raise_r+0x32>
 800ae28:	4628      	mov	r0, r5
 800ae2a:	f000 f831 	bl	800ae90 <_getpid_r>
 800ae2e:	4622      	mov	r2, r4
 800ae30:	4601      	mov	r1, r0
 800ae32:	4628      	mov	r0, r5
 800ae34:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800ae38:	f000 b818 	b.w	800ae6c <_kill_r>
 800ae3c:	2b01      	cmp	r3, #1
 800ae3e:	d00a      	beq.n	800ae56 <_raise_r+0x4c>
 800ae40:	1c59      	adds	r1, r3, #1
 800ae42:	d103      	bne.n	800ae4c <_raise_r+0x42>
 800ae44:	2316      	movs	r3, #22
 800ae46:	6003      	str	r3, [r0, #0]
 800ae48:	2001      	movs	r0, #1
 800ae4a:	e7e7      	b.n	800ae1c <_raise_r+0x12>
 800ae4c:	2100      	movs	r1, #0
 800ae4e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800ae52:	4620      	mov	r0, r4
 800ae54:	4798      	blx	r3
 800ae56:	2000      	movs	r0, #0
 800ae58:	e7e0      	b.n	800ae1c <_raise_r+0x12>
	...

0800ae5c <raise>:
 800ae5c:	4b02      	ldr	r3, [pc, #8]	@ (800ae68 <raise+0xc>)
 800ae5e:	4601      	mov	r1, r0
 800ae60:	6818      	ldr	r0, [r3, #0]
 800ae62:	f7ff bfd2 	b.w	800ae0a <_raise_r>
 800ae66:	bf00      	nop
 800ae68:	200000bc 	.word	0x200000bc

0800ae6c <_kill_r>:
 800ae6c:	b538      	push	{r3, r4, r5, lr}
 800ae6e:	4d07      	ldr	r5, [pc, #28]	@ (800ae8c <_kill_r+0x20>)
 800ae70:	2300      	movs	r3, #0
 800ae72:	4604      	mov	r4, r0
 800ae74:	4608      	mov	r0, r1
 800ae76:	4611      	mov	r1, r2
 800ae78:	602b      	str	r3, [r5, #0]
 800ae7a:	f7f9 fd0a 	bl	8004892 <_kill>
 800ae7e:	1c43      	adds	r3, r0, #1
 800ae80:	d102      	bne.n	800ae88 <_kill_r+0x1c>
 800ae82:	682b      	ldr	r3, [r5, #0]
 800ae84:	b103      	cbz	r3, 800ae88 <_kill_r+0x1c>
 800ae86:	6023      	str	r3, [r4, #0]
 800ae88:	bd38      	pop	{r3, r4, r5, pc}
 800ae8a:	bf00      	nop
 800ae8c:	20000858 	.word	0x20000858

0800ae90 <_getpid_r>:
 800ae90:	f7f9 bcf7 	b.w	8004882 <_getpid>

0800ae94 <asin>:
 800ae94:	b538      	push	{r3, r4, r5, lr}
 800ae96:	ed2d 8b02 	vpush	{d8}
 800ae9a:	ec55 4b10 	vmov	r4, r5, d0
 800ae9e:	f000 fb5b 	bl	800b558 <__ieee754_asin>
 800aea2:	4622      	mov	r2, r4
 800aea4:	462b      	mov	r3, r5
 800aea6:	4620      	mov	r0, r4
 800aea8:	4629      	mov	r1, r5
 800aeaa:	eeb0 8a40 	vmov.f32	s16, s0
 800aeae:	eef0 8a60 	vmov.f32	s17, s1
 800aeb2:	f7f5 fe3b 	bl	8000b2c <__aeabi_dcmpun>
 800aeb6:	b9a8      	cbnz	r0, 800aee4 <asin+0x50>
 800aeb8:	ec45 4b10 	vmov	d0, r4, r5
 800aebc:	f000 fa54 	bl	800b368 <fabs>
 800aec0:	4b0c      	ldr	r3, [pc, #48]	@ (800aef4 <asin+0x60>)
 800aec2:	ec51 0b10 	vmov	r0, r1, d0
 800aec6:	2200      	movs	r2, #0
 800aec8:	f7f5 fe26 	bl	8000b18 <__aeabi_dcmpgt>
 800aecc:	b150      	cbz	r0, 800aee4 <asin+0x50>
 800aece:	f7fd fffd 	bl	8008ecc <__errno>
 800aed2:	ecbd 8b02 	vpop	{d8}
 800aed6:	2321      	movs	r3, #33	@ 0x21
 800aed8:	6003      	str	r3, [r0, #0]
 800aeda:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800aede:	4806      	ldr	r0, [pc, #24]	@ (800aef8 <asin+0x64>)
 800aee0:	f000 ba56 	b.w	800b390 <nan>
 800aee4:	eeb0 0a48 	vmov.f32	s0, s16
 800aee8:	eef0 0a68 	vmov.f32	s1, s17
 800aeec:	ecbd 8b02 	vpop	{d8}
 800aef0:	bd38      	pop	{r3, r4, r5, pc}
 800aef2:	bf00      	nop
 800aef4:	3ff00000 	.word	0x3ff00000
 800aef8:	0800d20e 	.word	0x0800d20e

0800aefc <atan2>:
 800aefc:	f000 bd30 	b.w	800b960 <__ieee754_atan2>

0800af00 <pow>:
 800af00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800af02:	ed2d 8b02 	vpush	{d8}
 800af06:	eeb0 8a40 	vmov.f32	s16, s0
 800af0a:	eef0 8a60 	vmov.f32	s17, s1
 800af0e:	ec55 4b11 	vmov	r4, r5, d1
 800af12:	f000 fded 	bl	800baf0 <__ieee754_pow>
 800af16:	4622      	mov	r2, r4
 800af18:	462b      	mov	r3, r5
 800af1a:	4620      	mov	r0, r4
 800af1c:	4629      	mov	r1, r5
 800af1e:	ec57 6b10 	vmov	r6, r7, d0
 800af22:	f7f5 fe03 	bl	8000b2c <__aeabi_dcmpun>
 800af26:	2800      	cmp	r0, #0
 800af28:	d13b      	bne.n	800afa2 <pow+0xa2>
 800af2a:	ec51 0b18 	vmov	r0, r1, d8
 800af2e:	2200      	movs	r2, #0
 800af30:	2300      	movs	r3, #0
 800af32:	f7f5 fdc9 	bl	8000ac8 <__aeabi_dcmpeq>
 800af36:	b1b8      	cbz	r0, 800af68 <pow+0x68>
 800af38:	2200      	movs	r2, #0
 800af3a:	2300      	movs	r3, #0
 800af3c:	4620      	mov	r0, r4
 800af3e:	4629      	mov	r1, r5
 800af40:	f7f5 fdc2 	bl	8000ac8 <__aeabi_dcmpeq>
 800af44:	2800      	cmp	r0, #0
 800af46:	d146      	bne.n	800afd6 <pow+0xd6>
 800af48:	ec45 4b10 	vmov	d0, r4, r5
 800af4c:	f000 fa14 	bl	800b378 <finite>
 800af50:	b338      	cbz	r0, 800afa2 <pow+0xa2>
 800af52:	2200      	movs	r2, #0
 800af54:	2300      	movs	r3, #0
 800af56:	4620      	mov	r0, r4
 800af58:	4629      	mov	r1, r5
 800af5a:	f7f5 fdbf 	bl	8000adc <__aeabi_dcmplt>
 800af5e:	b300      	cbz	r0, 800afa2 <pow+0xa2>
 800af60:	f7fd ffb4 	bl	8008ecc <__errno>
 800af64:	2322      	movs	r3, #34	@ 0x22
 800af66:	e01b      	b.n	800afa0 <pow+0xa0>
 800af68:	ec47 6b10 	vmov	d0, r6, r7
 800af6c:	f000 fa04 	bl	800b378 <finite>
 800af70:	b9e0      	cbnz	r0, 800afac <pow+0xac>
 800af72:	eeb0 0a48 	vmov.f32	s0, s16
 800af76:	eef0 0a68 	vmov.f32	s1, s17
 800af7a:	f000 f9fd 	bl	800b378 <finite>
 800af7e:	b1a8      	cbz	r0, 800afac <pow+0xac>
 800af80:	ec45 4b10 	vmov	d0, r4, r5
 800af84:	f000 f9f8 	bl	800b378 <finite>
 800af88:	b180      	cbz	r0, 800afac <pow+0xac>
 800af8a:	4632      	mov	r2, r6
 800af8c:	463b      	mov	r3, r7
 800af8e:	4630      	mov	r0, r6
 800af90:	4639      	mov	r1, r7
 800af92:	f7f5 fdcb 	bl	8000b2c <__aeabi_dcmpun>
 800af96:	2800      	cmp	r0, #0
 800af98:	d0e2      	beq.n	800af60 <pow+0x60>
 800af9a:	f7fd ff97 	bl	8008ecc <__errno>
 800af9e:	2321      	movs	r3, #33	@ 0x21
 800afa0:	6003      	str	r3, [r0, #0]
 800afa2:	ecbd 8b02 	vpop	{d8}
 800afa6:	ec47 6b10 	vmov	d0, r6, r7
 800afaa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800afac:	2200      	movs	r2, #0
 800afae:	2300      	movs	r3, #0
 800afb0:	4630      	mov	r0, r6
 800afb2:	4639      	mov	r1, r7
 800afb4:	f7f5 fd88 	bl	8000ac8 <__aeabi_dcmpeq>
 800afb8:	2800      	cmp	r0, #0
 800afba:	d0f2      	beq.n	800afa2 <pow+0xa2>
 800afbc:	eeb0 0a48 	vmov.f32	s0, s16
 800afc0:	eef0 0a68 	vmov.f32	s1, s17
 800afc4:	f000 f9d8 	bl	800b378 <finite>
 800afc8:	2800      	cmp	r0, #0
 800afca:	d0ea      	beq.n	800afa2 <pow+0xa2>
 800afcc:	ec45 4b10 	vmov	d0, r4, r5
 800afd0:	f000 f9d2 	bl	800b378 <finite>
 800afd4:	e7c3      	b.n	800af5e <pow+0x5e>
 800afd6:	4f01      	ldr	r7, [pc, #4]	@ (800afdc <pow+0xdc>)
 800afd8:	2600      	movs	r6, #0
 800afda:	e7e2      	b.n	800afa2 <pow+0xa2>
 800afdc:	3ff00000 	.word	0x3ff00000

0800afe0 <sqrt>:
 800afe0:	b538      	push	{r3, r4, r5, lr}
 800afe2:	ed2d 8b02 	vpush	{d8}
 800afe6:	ec55 4b10 	vmov	r4, r5, d0
 800afea:	f000 f9d9 	bl	800b3a0 <__ieee754_sqrt>
 800afee:	4622      	mov	r2, r4
 800aff0:	462b      	mov	r3, r5
 800aff2:	4620      	mov	r0, r4
 800aff4:	4629      	mov	r1, r5
 800aff6:	eeb0 8a40 	vmov.f32	s16, s0
 800affa:	eef0 8a60 	vmov.f32	s17, s1
 800affe:	f7f5 fd95 	bl	8000b2c <__aeabi_dcmpun>
 800b002:	b990      	cbnz	r0, 800b02a <sqrt+0x4a>
 800b004:	2200      	movs	r2, #0
 800b006:	2300      	movs	r3, #0
 800b008:	4620      	mov	r0, r4
 800b00a:	4629      	mov	r1, r5
 800b00c:	f7f5 fd66 	bl	8000adc <__aeabi_dcmplt>
 800b010:	b158      	cbz	r0, 800b02a <sqrt+0x4a>
 800b012:	f7fd ff5b 	bl	8008ecc <__errno>
 800b016:	2321      	movs	r3, #33	@ 0x21
 800b018:	6003      	str	r3, [r0, #0]
 800b01a:	2200      	movs	r2, #0
 800b01c:	2300      	movs	r3, #0
 800b01e:	4610      	mov	r0, r2
 800b020:	4619      	mov	r1, r3
 800b022:	f7f5 fc13 	bl	800084c <__aeabi_ddiv>
 800b026:	ec41 0b18 	vmov	d8, r0, r1
 800b02a:	eeb0 0a48 	vmov.f32	s0, s16
 800b02e:	eef0 0a68 	vmov.f32	s1, s17
 800b032:	ecbd 8b02 	vpop	{d8}
 800b036:	bd38      	pop	{r3, r4, r5, pc}

0800b038 <atan>:
 800b038:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b03c:	ec55 4b10 	vmov	r4, r5, d0
 800b040:	4bbf      	ldr	r3, [pc, #764]	@ (800b340 <atan+0x308>)
 800b042:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 800b046:	429e      	cmp	r6, r3
 800b048:	46ab      	mov	fp, r5
 800b04a:	d918      	bls.n	800b07e <atan+0x46>
 800b04c:	4bbd      	ldr	r3, [pc, #756]	@ (800b344 <atan+0x30c>)
 800b04e:	429e      	cmp	r6, r3
 800b050:	d801      	bhi.n	800b056 <atan+0x1e>
 800b052:	d109      	bne.n	800b068 <atan+0x30>
 800b054:	b144      	cbz	r4, 800b068 <atan+0x30>
 800b056:	4622      	mov	r2, r4
 800b058:	462b      	mov	r3, r5
 800b05a:	4620      	mov	r0, r4
 800b05c:	4629      	mov	r1, r5
 800b05e:	f7f5 f915 	bl	800028c <__adddf3>
 800b062:	4604      	mov	r4, r0
 800b064:	460d      	mov	r5, r1
 800b066:	e006      	b.n	800b076 <atan+0x3e>
 800b068:	f1bb 0f00 	cmp.w	fp, #0
 800b06c:	f340 812b 	ble.w	800b2c6 <atan+0x28e>
 800b070:	a597      	add	r5, pc, #604	@ (adr r5, 800b2d0 <atan+0x298>)
 800b072:	e9d5 4500 	ldrd	r4, r5, [r5]
 800b076:	ec45 4b10 	vmov	d0, r4, r5
 800b07a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b07e:	4bb2      	ldr	r3, [pc, #712]	@ (800b348 <atan+0x310>)
 800b080:	429e      	cmp	r6, r3
 800b082:	d813      	bhi.n	800b0ac <atan+0x74>
 800b084:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 800b088:	429e      	cmp	r6, r3
 800b08a:	d80c      	bhi.n	800b0a6 <atan+0x6e>
 800b08c:	a392      	add	r3, pc, #584	@ (adr r3, 800b2d8 <atan+0x2a0>)
 800b08e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b092:	4620      	mov	r0, r4
 800b094:	4629      	mov	r1, r5
 800b096:	f7f5 f8f9 	bl	800028c <__adddf3>
 800b09a:	4bac      	ldr	r3, [pc, #688]	@ (800b34c <atan+0x314>)
 800b09c:	2200      	movs	r2, #0
 800b09e:	f7f5 fd3b 	bl	8000b18 <__aeabi_dcmpgt>
 800b0a2:	2800      	cmp	r0, #0
 800b0a4:	d1e7      	bne.n	800b076 <atan+0x3e>
 800b0a6:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800b0aa:	e029      	b.n	800b100 <atan+0xc8>
 800b0ac:	f000 f95c 	bl	800b368 <fabs>
 800b0b0:	4ba7      	ldr	r3, [pc, #668]	@ (800b350 <atan+0x318>)
 800b0b2:	429e      	cmp	r6, r3
 800b0b4:	ec55 4b10 	vmov	r4, r5, d0
 800b0b8:	f200 80bc 	bhi.w	800b234 <atan+0x1fc>
 800b0bc:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 800b0c0:	429e      	cmp	r6, r3
 800b0c2:	f200 809e 	bhi.w	800b202 <atan+0x1ca>
 800b0c6:	4622      	mov	r2, r4
 800b0c8:	462b      	mov	r3, r5
 800b0ca:	4620      	mov	r0, r4
 800b0cc:	4629      	mov	r1, r5
 800b0ce:	f7f5 f8dd 	bl	800028c <__adddf3>
 800b0d2:	4b9e      	ldr	r3, [pc, #632]	@ (800b34c <atan+0x314>)
 800b0d4:	2200      	movs	r2, #0
 800b0d6:	f7f5 f8d7 	bl	8000288 <__aeabi_dsub>
 800b0da:	2200      	movs	r2, #0
 800b0dc:	4606      	mov	r6, r0
 800b0de:	460f      	mov	r7, r1
 800b0e0:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800b0e4:	4620      	mov	r0, r4
 800b0e6:	4629      	mov	r1, r5
 800b0e8:	f7f5 f8d0 	bl	800028c <__adddf3>
 800b0ec:	4602      	mov	r2, r0
 800b0ee:	460b      	mov	r3, r1
 800b0f0:	4630      	mov	r0, r6
 800b0f2:	4639      	mov	r1, r7
 800b0f4:	f7f5 fbaa 	bl	800084c <__aeabi_ddiv>
 800b0f8:	f04f 0a00 	mov.w	sl, #0
 800b0fc:	4604      	mov	r4, r0
 800b0fe:	460d      	mov	r5, r1
 800b100:	4622      	mov	r2, r4
 800b102:	462b      	mov	r3, r5
 800b104:	4620      	mov	r0, r4
 800b106:	4629      	mov	r1, r5
 800b108:	f7f5 fa76 	bl	80005f8 <__aeabi_dmul>
 800b10c:	4602      	mov	r2, r0
 800b10e:	460b      	mov	r3, r1
 800b110:	4680      	mov	r8, r0
 800b112:	4689      	mov	r9, r1
 800b114:	f7f5 fa70 	bl	80005f8 <__aeabi_dmul>
 800b118:	a371      	add	r3, pc, #452	@ (adr r3, 800b2e0 <atan+0x2a8>)
 800b11a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b11e:	4606      	mov	r6, r0
 800b120:	460f      	mov	r7, r1
 800b122:	f7f5 fa69 	bl	80005f8 <__aeabi_dmul>
 800b126:	a370      	add	r3, pc, #448	@ (adr r3, 800b2e8 <atan+0x2b0>)
 800b128:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b12c:	f7f5 f8ae 	bl	800028c <__adddf3>
 800b130:	4632      	mov	r2, r6
 800b132:	463b      	mov	r3, r7
 800b134:	f7f5 fa60 	bl	80005f8 <__aeabi_dmul>
 800b138:	a36d      	add	r3, pc, #436	@ (adr r3, 800b2f0 <atan+0x2b8>)
 800b13a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b13e:	f7f5 f8a5 	bl	800028c <__adddf3>
 800b142:	4632      	mov	r2, r6
 800b144:	463b      	mov	r3, r7
 800b146:	f7f5 fa57 	bl	80005f8 <__aeabi_dmul>
 800b14a:	a36b      	add	r3, pc, #428	@ (adr r3, 800b2f8 <atan+0x2c0>)
 800b14c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b150:	f7f5 f89c 	bl	800028c <__adddf3>
 800b154:	4632      	mov	r2, r6
 800b156:	463b      	mov	r3, r7
 800b158:	f7f5 fa4e 	bl	80005f8 <__aeabi_dmul>
 800b15c:	a368      	add	r3, pc, #416	@ (adr r3, 800b300 <atan+0x2c8>)
 800b15e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b162:	f7f5 f893 	bl	800028c <__adddf3>
 800b166:	4632      	mov	r2, r6
 800b168:	463b      	mov	r3, r7
 800b16a:	f7f5 fa45 	bl	80005f8 <__aeabi_dmul>
 800b16e:	a366      	add	r3, pc, #408	@ (adr r3, 800b308 <atan+0x2d0>)
 800b170:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b174:	f7f5 f88a 	bl	800028c <__adddf3>
 800b178:	4642      	mov	r2, r8
 800b17a:	464b      	mov	r3, r9
 800b17c:	f7f5 fa3c 	bl	80005f8 <__aeabi_dmul>
 800b180:	a363      	add	r3, pc, #396	@ (adr r3, 800b310 <atan+0x2d8>)
 800b182:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b186:	4680      	mov	r8, r0
 800b188:	4689      	mov	r9, r1
 800b18a:	4630      	mov	r0, r6
 800b18c:	4639      	mov	r1, r7
 800b18e:	f7f5 fa33 	bl	80005f8 <__aeabi_dmul>
 800b192:	a361      	add	r3, pc, #388	@ (adr r3, 800b318 <atan+0x2e0>)
 800b194:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b198:	f7f5 f876 	bl	8000288 <__aeabi_dsub>
 800b19c:	4632      	mov	r2, r6
 800b19e:	463b      	mov	r3, r7
 800b1a0:	f7f5 fa2a 	bl	80005f8 <__aeabi_dmul>
 800b1a4:	a35e      	add	r3, pc, #376	@ (adr r3, 800b320 <atan+0x2e8>)
 800b1a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1aa:	f7f5 f86d 	bl	8000288 <__aeabi_dsub>
 800b1ae:	4632      	mov	r2, r6
 800b1b0:	463b      	mov	r3, r7
 800b1b2:	f7f5 fa21 	bl	80005f8 <__aeabi_dmul>
 800b1b6:	a35c      	add	r3, pc, #368	@ (adr r3, 800b328 <atan+0x2f0>)
 800b1b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1bc:	f7f5 f864 	bl	8000288 <__aeabi_dsub>
 800b1c0:	4632      	mov	r2, r6
 800b1c2:	463b      	mov	r3, r7
 800b1c4:	f7f5 fa18 	bl	80005f8 <__aeabi_dmul>
 800b1c8:	a359      	add	r3, pc, #356	@ (adr r3, 800b330 <atan+0x2f8>)
 800b1ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1ce:	f7f5 f85b 	bl	8000288 <__aeabi_dsub>
 800b1d2:	4632      	mov	r2, r6
 800b1d4:	463b      	mov	r3, r7
 800b1d6:	f7f5 fa0f 	bl	80005f8 <__aeabi_dmul>
 800b1da:	4602      	mov	r2, r0
 800b1dc:	460b      	mov	r3, r1
 800b1de:	4640      	mov	r0, r8
 800b1e0:	4649      	mov	r1, r9
 800b1e2:	f7f5 f853 	bl	800028c <__adddf3>
 800b1e6:	4622      	mov	r2, r4
 800b1e8:	462b      	mov	r3, r5
 800b1ea:	f7f5 fa05 	bl	80005f8 <__aeabi_dmul>
 800b1ee:	f1ba 3fff 	cmp.w	sl, #4294967295	@ 0xffffffff
 800b1f2:	4602      	mov	r2, r0
 800b1f4:	460b      	mov	r3, r1
 800b1f6:	d148      	bne.n	800b28a <atan+0x252>
 800b1f8:	4620      	mov	r0, r4
 800b1fa:	4629      	mov	r1, r5
 800b1fc:	f7f5 f844 	bl	8000288 <__aeabi_dsub>
 800b200:	e72f      	b.n	800b062 <atan+0x2a>
 800b202:	4b52      	ldr	r3, [pc, #328]	@ (800b34c <atan+0x314>)
 800b204:	2200      	movs	r2, #0
 800b206:	4620      	mov	r0, r4
 800b208:	4629      	mov	r1, r5
 800b20a:	f7f5 f83d 	bl	8000288 <__aeabi_dsub>
 800b20e:	4b4f      	ldr	r3, [pc, #316]	@ (800b34c <atan+0x314>)
 800b210:	4606      	mov	r6, r0
 800b212:	460f      	mov	r7, r1
 800b214:	2200      	movs	r2, #0
 800b216:	4620      	mov	r0, r4
 800b218:	4629      	mov	r1, r5
 800b21a:	f7f5 f837 	bl	800028c <__adddf3>
 800b21e:	4602      	mov	r2, r0
 800b220:	460b      	mov	r3, r1
 800b222:	4630      	mov	r0, r6
 800b224:	4639      	mov	r1, r7
 800b226:	f7f5 fb11 	bl	800084c <__aeabi_ddiv>
 800b22a:	f04f 0a01 	mov.w	sl, #1
 800b22e:	4604      	mov	r4, r0
 800b230:	460d      	mov	r5, r1
 800b232:	e765      	b.n	800b100 <atan+0xc8>
 800b234:	4b47      	ldr	r3, [pc, #284]	@ (800b354 <atan+0x31c>)
 800b236:	429e      	cmp	r6, r3
 800b238:	d21c      	bcs.n	800b274 <atan+0x23c>
 800b23a:	4b47      	ldr	r3, [pc, #284]	@ (800b358 <atan+0x320>)
 800b23c:	2200      	movs	r2, #0
 800b23e:	4620      	mov	r0, r4
 800b240:	4629      	mov	r1, r5
 800b242:	f7f5 f821 	bl	8000288 <__aeabi_dsub>
 800b246:	4b44      	ldr	r3, [pc, #272]	@ (800b358 <atan+0x320>)
 800b248:	4606      	mov	r6, r0
 800b24a:	460f      	mov	r7, r1
 800b24c:	2200      	movs	r2, #0
 800b24e:	4620      	mov	r0, r4
 800b250:	4629      	mov	r1, r5
 800b252:	f7f5 f9d1 	bl	80005f8 <__aeabi_dmul>
 800b256:	4b3d      	ldr	r3, [pc, #244]	@ (800b34c <atan+0x314>)
 800b258:	2200      	movs	r2, #0
 800b25a:	f7f5 f817 	bl	800028c <__adddf3>
 800b25e:	4602      	mov	r2, r0
 800b260:	460b      	mov	r3, r1
 800b262:	4630      	mov	r0, r6
 800b264:	4639      	mov	r1, r7
 800b266:	f7f5 faf1 	bl	800084c <__aeabi_ddiv>
 800b26a:	f04f 0a02 	mov.w	sl, #2
 800b26e:	4604      	mov	r4, r0
 800b270:	460d      	mov	r5, r1
 800b272:	e745      	b.n	800b100 <atan+0xc8>
 800b274:	4622      	mov	r2, r4
 800b276:	462b      	mov	r3, r5
 800b278:	4938      	ldr	r1, [pc, #224]	@ (800b35c <atan+0x324>)
 800b27a:	2000      	movs	r0, #0
 800b27c:	f7f5 fae6 	bl	800084c <__aeabi_ddiv>
 800b280:	f04f 0a03 	mov.w	sl, #3
 800b284:	4604      	mov	r4, r0
 800b286:	460d      	mov	r5, r1
 800b288:	e73a      	b.n	800b100 <atan+0xc8>
 800b28a:	4b35      	ldr	r3, [pc, #212]	@ (800b360 <atan+0x328>)
 800b28c:	4e35      	ldr	r6, [pc, #212]	@ (800b364 <atan+0x32c>)
 800b28e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800b292:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b296:	f7f4 fff7 	bl	8000288 <__aeabi_dsub>
 800b29a:	4622      	mov	r2, r4
 800b29c:	462b      	mov	r3, r5
 800b29e:	f7f4 fff3 	bl	8000288 <__aeabi_dsub>
 800b2a2:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800b2a6:	4602      	mov	r2, r0
 800b2a8:	460b      	mov	r3, r1
 800b2aa:	e9d6 0100 	ldrd	r0, r1, [r6]
 800b2ae:	f7f4 ffeb 	bl	8000288 <__aeabi_dsub>
 800b2b2:	f1bb 0f00 	cmp.w	fp, #0
 800b2b6:	4604      	mov	r4, r0
 800b2b8:	460d      	mov	r5, r1
 800b2ba:	f6bf aedc 	bge.w	800b076 <atan+0x3e>
 800b2be:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800b2c2:	461d      	mov	r5, r3
 800b2c4:	e6d7      	b.n	800b076 <atan+0x3e>
 800b2c6:	a51c      	add	r5, pc, #112	@ (adr r5, 800b338 <atan+0x300>)
 800b2c8:	e9d5 4500 	ldrd	r4, r5, [r5]
 800b2cc:	e6d3      	b.n	800b076 <atan+0x3e>
 800b2ce:	bf00      	nop
 800b2d0:	54442d18 	.word	0x54442d18
 800b2d4:	3ff921fb 	.word	0x3ff921fb
 800b2d8:	8800759c 	.word	0x8800759c
 800b2dc:	7e37e43c 	.word	0x7e37e43c
 800b2e0:	e322da11 	.word	0xe322da11
 800b2e4:	3f90ad3a 	.word	0x3f90ad3a
 800b2e8:	24760deb 	.word	0x24760deb
 800b2ec:	3fa97b4b 	.word	0x3fa97b4b
 800b2f0:	a0d03d51 	.word	0xa0d03d51
 800b2f4:	3fb10d66 	.word	0x3fb10d66
 800b2f8:	c54c206e 	.word	0xc54c206e
 800b2fc:	3fb745cd 	.word	0x3fb745cd
 800b300:	920083ff 	.word	0x920083ff
 800b304:	3fc24924 	.word	0x3fc24924
 800b308:	5555550d 	.word	0x5555550d
 800b30c:	3fd55555 	.word	0x3fd55555
 800b310:	2c6a6c2f 	.word	0x2c6a6c2f
 800b314:	bfa2b444 	.word	0xbfa2b444
 800b318:	52defd9a 	.word	0x52defd9a
 800b31c:	3fadde2d 	.word	0x3fadde2d
 800b320:	af749a6d 	.word	0xaf749a6d
 800b324:	3fb3b0f2 	.word	0x3fb3b0f2
 800b328:	fe231671 	.word	0xfe231671
 800b32c:	3fbc71c6 	.word	0x3fbc71c6
 800b330:	9998ebc4 	.word	0x9998ebc4
 800b334:	3fc99999 	.word	0x3fc99999
 800b338:	54442d18 	.word	0x54442d18
 800b33c:	bff921fb 	.word	0xbff921fb
 800b340:	440fffff 	.word	0x440fffff
 800b344:	7ff00000 	.word	0x7ff00000
 800b348:	3fdbffff 	.word	0x3fdbffff
 800b34c:	3ff00000 	.word	0x3ff00000
 800b350:	3ff2ffff 	.word	0x3ff2ffff
 800b354:	40038000 	.word	0x40038000
 800b358:	3ff80000 	.word	0x3ff80000
 800b35c:	bff00000 	.word	0xbff00000
 800b360:	0800d310 	.word	0x0800d310
 800b364:	0800d330 	.word	0x0800d330

0800b368 <fabs>:
 800b368:	ec51 0b10 	vmov	r0, r1, d0
 800b36c:	4602      	mov	r2, r0
 800b36e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800b372:	ec43 2b10 	vmov	d0, r2, r3
 800b376:	4770      	bx	lr

0800b378 <finite>:
 800b378:	b082      	sub	sp, #8
 800b37a:	ed8d 0b00 	vstr	d0, [sp]
 800b37e:	9801      	ldr	r0, [sp, #4]
 800b380:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 800b384:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 800b388:	0fc0      	lsrs	r0, r0, #31
 800b38a:	b002      	add	sp, #8
 800b38c:	4770      	bx	lr
	...

0800b390 <nan>:
 800b390:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800b398 <nan+0x8>
 800b394:	4770      	bx	lr
 800b396:	bf00      	nop
 800b398:	00000000 	.word	0x00000000
 800b39c:	7ff80000 	.word	0x7ff80000

0800b3a0 <__ieee754_sqrt>:
 800b3a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b3a4:	4a68      	ldr	r2, [pc, #416]	@ (800b548 <__ieee754_sqrt+0x1a8>)
 800b3a6:	ec55 4b10 	vmov	r4, r5, d0
 800b3aa:	43aa      	bics	r2, r5
 800b3ac:	462b      	mov	r3, r5
 800b3ae:	4621      	mov	r1, r4
 800b3b0:	d110      	bne.n	800b3d4 <__ieee754_sqrt+0x34>
 800b3b2:	4622      	mov	r2, r4
 800b3b4:	4620      	mov	r0, r4
 800b3b6:	4629      	mov	r1, r5
 800b3b8:	f7f5 f91e 	bl	80005f8 <__aeabi_dmul>
 800b3bc:	4602      	mov	r2, r0
 800b3be:	460b      	mov	r3, r1
 800b3c0:	4620      	mov	r0, r4
 800b3c2:	4629      	mov	r1, r5
 800b3c4:	f7f4 ff62 	bl	800028c <__adddf3>
 800b3c8:	4604      	mov	r4, r0
 800b3ca:	460d      	mov	r5, r1
 800b3cc:	ec45 4b10 	vmov	d0, r4, r5
 800b3d0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b3d4:	2d00      	cmp	r5, #0
 800b3d6:	dc0e      	bgt.n	800b3f6 <__ieee754_sqrt+0x56>
 800b3d8:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800b3dc:	4322      	orrs	r2, r4
 800b3de:	d0f5      	beq.n	800b3cc <__ieee754_sqrt+0x2c>
 800b3e0:	b19d      	cbz	r5, 800b40a <__ieee754_sqrt+0x6a>
 800b3e2:	4622      	mov	r2, r4
 800b3e4:	4620      	mov	r0, r4
 800b3e6:	4629      	mov	r1, r5
 800b3e8:	f7f4 ff4e 	bl	8000288 <__aeabi_dsub>
 800b3ec:	4602      	mov	r2, r0
 800b3ee:	460b      	mov	r3, r1
 800b3f0:	f7f5 fa2c 	bl	800084c <__aeabi_ddiv>
 800b3f4:	e7e8      	b.n	800b3c8 <__ieee754_sqrt+0x28>
 800b3f6:	152a      	asrs	r2, r5, #20
 800b3f8:	d115      	bne.n	800b426 <__ieee754_sqrt+0x86>
 800b3fa:	2000      	movs	r0, #0
 800b3fc:	e009      	b.n	800b412 <__ieee754_sqrt+0x72>
 800b3fe:	0acb      	lsrs	r3, r1, #11
 800b400:	3a15      	subs	r2, #21
 800b402:	0549      	lsls	r1, r1, #21
 800b404:	2b00      	cmp	r3, #0
 800b406:	d0fa      	beq.n	800b3fe <__ieee754_sqrt+0x5e>
 800b408:	e7f7      	b.n	800b3fa <__ieee754_sqrt+0x5a>
 800b40a:	462a      	mov	r2, r5
 800b40c:	e7fa      	b.n	800b404 <__ieee754_sqrt+0x64>
 800b40e:	005b      	lsls	r3, r3, #1
 800b410:	3001      	adds	r0, #1
 800b412:	02dc      	lsls	r4, r3, #11
 800b414:	d5fb      	bpl.n	800b40e <__ieee754_sqrt+0x6e>
 800b416:	1e44      	subs	r4, r0, #1
 800b418:	1b12      	subs	r2, r2, r4
 800b41a:	f1c0 0420 	rsb	r4, r0, #32
 800b41e:	fa21 f404 	lsr.w	r4, r1, r4
 800b422:	4323      	orrs	r3, r4
 800b424:	4081      	lsls	r1, r0
 800b426:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b42a:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800b42e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800b432:	07d2      	lsls	r2, r2, #31
 800b434:	bf5c      	itt	pl
 800b436:	005b      	lslpl	r3, r3, #1
 800b438:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800b43c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800b440:	bf58      	it	pl
 800b442:	0049      	lslpl	r1, r1, #1
 800b444:	2600      	movs	r6, #0
 800b446:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800b44a:	106d      	asrs	r5, r5, #1
 800b44c:	0049      	lsls	r1, r1, #1
 800b44e:	2016      	movs	r0, #22
 800b450:	4632      	mov	r2, r6
 800b452:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800b456:	1917      	adds	r7, r2, r4
 800b458:	429f      	cmp	r7, r3
 800b45a:	bfde      	ittt	le
 800b45c:	193a      	addle	r2, r7, r4
 800b45e:	1bdb      	suble	r3, r3, r7
 800b460:	1936      	addle	r6, r6, r4
 800b462:	0fcf      	lsrs	r7, r1, #31
 800b464:	3801      	subs	r0, #1
 800b466:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800b46a:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800b46e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800b472:	d1f0      	bne.n	800b456 <__ieee754_sqrt+0xb6>
 800b474:	4604      	mov	r4, r0
 800b476:	2720      	movs	r7, #32
 800b478:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800b47c:	429a      	cmp	r2, r3
 800b47e:	eb00 0e0c 	add.w	lr, r0, ip
 800b482:	db02      	blt.n	800b48a <__ieee754_sqrt+0xea>
 800b484:	d113      	bne.n	800b4ae <__ieee754_sqrt+0x10e>
 800b486:	458e      	cmp	lr, r1
 800b488:	d811      	bhi.n	800b4ae <__ieee754_sqrt+0x10e>
 800b48a:	f1be 0f00 	cmp.w	lr, #0
 800b48e:	eb0e 000c 	add.w	r0, lr, ip
 800b492:	da42      	bge.n	800b51a <__ieee754_sqrt+0x17a>
 800b494:	2800      	cmp	r0, #0
 800b496:	db40      	blt.n	800b51a <__ieee754_sqrt+0x17a>
 800b498:	f102 0801 	add.w	r8, r2, #1
 800b49c:	1a9b      	subs	r3, r3, r2
 800b49e:	458e      	cmp	lr, r1
 800b4a0:	bf88      	it	hi
 800b4a2:	f103 33ff 	addhi.w	r3, r3, #4294967295	@ 0xffffffff
 800b4a6:	eba1 010e 	sub.w	r1, r1, lr
 800b4aa:	4464      	add	r4, ip
 800b4ac:	4642      	mov	r2, r8
 800b4ae:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800b4b2:	3f01      	subs	r7, #1
 800b4b4:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800b4b8:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800b4bc:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800b4c0:	d1dc      	bne.n	800b47c <__ieee754_sqrt+0xdc>
 800b4c2:	4319      	orrs	r1, r3
 800b4c4:	d01b      	beq.n	800b4fe <__ieee754_sqrt+0x15e>
 800b4c6:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800b54c <__ieee754_sqrt+0x1ac>
 800b4ca:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800b550 <__ieee754_sqrt+0x1b0>
 800b4ce:	e9da 0100 	ldrd	r0, r1, [sl]
 800b4d2:	e9db 2300 	ldrd	r2, r3, [fp]
 800b4d6:	f7f4 fed7 	bl	8000288 <__aeabi_dsub>
 800b4da:	e9da 8900 	ldrd	r8, r9, [sl]
 800b4de:	4602      	mov	r2, r0
 800b4e0:	460b      	mov	r3, r1
 800b4e2:	4640      	mov	r0, r8
 800b4e4:	4649      	mov	r1, r9
 800b4e6:	f7f5 fb03 	bl	8000af0 <__aeabi_dcmple>
 800b4ea:	b140      	cbz	r0, 800b4fe <__ieee754_sqrt+0x15e>
 800b4ec:	f1b4 3fff 	cmp.w	r4, #4294967295	@ 0xffffffff
 800b4f0:	e9da 0100 	ldrd	r0, r1, [sl]
 800b4f4:	e9db 2300 	ldrd	r2, r3, [fp]
 800b4f8:	d111      	bne.n	800b51e <__ieee754_sqrt+0x17e>
 800b4fa:	3601      	adds	r6, #1
 800b4fc:	463c      	mov	r4, r7
 800b4fe:	1072      	asrs	r2, r6, #1
 800b500:	0863      	lsrs	r3, r4, #1
 800b502:	07f1      	lsls	r1, r6, #31
 800b504:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800b508:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800b50c:	bf48      	it	mi
 800b50e:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800b512:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800b516:	4618      	mov	r0, r3
 800b518:	e756      	b.n	800b3c8 <__ieee754_sqrt+0x28>
 800b51a:	4690      	mov	r8, r2
 800b51c:	e7be      	b.n	800b49c <__ieee754_sqrt+0xfc>
 800b51e:	f7f4 feb5 	bl	800028c <__adddf3>
 800b522:	e9da 8900 	ldrd	r8, r9, [sl]
 800b526:	4602      	mov	r2, r0
 800b528:	460b      	mov	r3, r1
 800b52a:	4640      	mov	r0, r8
 800b52c:	4649      	mov	r1, r9
 800b52e:	f7f5 fad5 	bl	8000adc <__aeabi_dcmplt>
 800b532:	b120      	cbz	r0, 800b53e <__ieee754_sqrt+0x19e>
 800b534:	1ca0      	adds	r0, r4, #2
 800b536:	bf08      	it	eq
 800b538:	3601      	addeq	r6, #1
 800b53a:	3402      	adds	r4, #2
 800b53c:	e7df      	b.n	800b4fe <__ieee754_sqrt+0x15e>
 800b53e:	1c63      	adds	r3, r4, #1
 800b540:	f023 0401 	bic.w	r4, r3, #1
 800b544:	e7db      	b.n	800b4fe <__ieee754_sqrt+0x15e>
 800b546:	bf00      	nop
 800b548:	7ff00000 	.word	0x7ff00000
 800b54c:	20000280 	.word	0x20000280
 800b550:	20000278 	.word	0x20000278
 800b554:	00000000 	.word	0x00000000

0800b558 <__ieee754_asin>:
 800b558:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b55c:	ec55 4b10 	vmov	r4, r5, d0
 800b560:	4bc7      	ldr	r3, [pc, #796]	@ (800b880 <__ieee754_asin+0x328>)
 800b562:	b087      	sub	sp, #28
 800b564:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 800b568:	429e      	cmp	r6, r3
 800b56a:	9501      	str	r5, [sp, #4]
 800b56c:	d92d      	bls.n	800b5ca <__ieee754_asin+0x72>
 800b56e:	f106 4640 	add.w	r6, r6, #3221225472	@ 0xc0000000
 800b572:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 800b576:	4326      	orrs	r6, r4
 800b578:	d116      	bne.n	800b5a8 <__ieee754_asin+0x50>
 800b57a:	a3a7      	add	r3, pc, #668	@ (adr r3, 800b818 <__ieee754_asin+0x2c0>)
 800b57c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b580:	4620      	mov	r0, r4
 800b582:	4629      	mov	r1, r5
 800b584:	f7f5 f838 	bl	80005f8 <__aeabi_dmul>
 800b588:	a3a5      	add	r3, pc, #660	@ (adr r3, 800b820 <__ieee754_asin+0x2c8>)
 800b58a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b58e:	4606      	mov	r6, r0
 800b590:	460f      	mov	r7, r1
 800b592:	4620      	mov	r0, r4
 800b594:	4629      	mov	r1, r5
 800b596:	f7f5 f82f 	bl	80005f8 <__aeabi_dmul>
 800b59a:	4602      	mov	r2, r0
 800b59c:	460b      	mov	r3, r1
 800b59e:	4630      	mov	r0, r6
 800b5a0:	4639      	mov	r1, r7
 800b5a2:	f7f4 fe73 	bl	800028c <__adddf3>
 800b5a6:	e009      	b.n	800b5bc <__ieee754_asin+0x64>
 800b5a8:	4622      	mov	r2, r4
 800b5aa:	462b      	mov	r3, r5
 800b5ac:	4620      	mov	r0, r4
 800b5ae:	4629      	mov	r1, r5
 800b5b0:	f7f4 fe6a 	bl	8000288 <__aeabi_dsub>
 800b5b4:	4602      	mov	r2, r0
 800b5b6:	460b      	mov	r3, r1
 800b5b8:	f7f5 f948 	bl	800084c <__aeabi_ddiv>
 800b5bc:	4604      	mov	r4, r0
 800b5be:	460d      	mov	r5, r1
 800b5c0:	ec45 4b10 	vmov	d0, r4, r5
 800b5c4:	b007      	add	sp, #28
 800b5c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b5ca:	4bae      	ldr	r3, [pc, #696]	@ (800b884 <__ieee754_asin+0x32c>)
 800b5cc:	429e      	cmp	r6, r3
 800b5ce:	d810      	bhi.n	800b5f2 <__ieee754_asin+0x9a>
 800b5d0:	f1b6 5f79 	cmp.w	r6, #1044381696	@ 0x3e400000
 800b5d4:	f080 80ad 	bcs.w	800b732 <__ieee754_asin+0x1da>
 800b5d8:	a393      	add	r3, pc, #588	@ (adr r3, 800b828 <__ieee754_asin+0x2d0>)
 800b5da:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b5de:	4620      	mov	r0, r4
 800b5e0:	4629      	mov	r1, r5
 800b5e2:	f7f4 fe53 	bl	800028c <__adddf3>
 800b5e6:	4ba8      	ldr	r3, [pc, #672]	@ (800b888 <__ieee754_asin+0x330>)
 800b5e8:	2200      	movs	r2, #0
 800b5ea:	f7f5 fa95 	bl	8000b18 <__aeabi_dcmpgt>
 800b5ee:	2800      	cmp	r0, #0
 800b5f0:	d1e6      	bne.n	800b5c0 <__ieee754_asin+0x68>
 800b5f2:	ec45 4b10 	vmov	d0, r4, r5
 800b5f6:	f7ff feb7 	bl	800b368 <fabs>
 800b5fa:	49a3      	ldr	r1, [pc, #652]	@ (800b888 <__ieee754_asin+0x330>)
 800b5fc:	ec53 2b10 	vmov	r2, r3, d0
 800b600:	2000      	movs	r0, #0
 800b602:	f7f4 fe41 	bl	8000288 <__aeabi_dsub>
 800b606:	4ba1      	ldr	r3, [pc, #644]	@ (800b88c <__ieee754_asin+0x334>)
 800b608:	2200      	movs	r2, #0
 800b60a:	f7f4 fff5 	bl	80005f8 <__aeabi_dmul>
 800b60e:	a388      	add	r3, pc, #544	@ (adr r3, 800b830 <__ieee754_asin+0x2d8>)
 800b610:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b614:	4604      	mov	r4, r0
 800b616:	460d      	mov	r5, r1
 800b618:	f7f4 ffee 	bl	80005f8 <__aeabi_dmul>
 800b61c:	a386      	add	r3, pc, #536	@ (adr r3, 800b838 <__ieee754_asin+0x2e0>)
 800b61e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b622:	f7f4 fe33 	bl	800028c <__adddf3>
 800b626:	4622      	mov	r2, r4
 800b628:	462b      	mov	r3, r5
 800b62a:	f7f4 ffe5 	bl	80005f8 <__aeabi_dmul>
 800b62e:	a384      	add	r3, pc, #528	@ (adr r3, 800b840 <__ieee754_asin+0x2e8>)
 800b630:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b634:	f7f4 fe28 	bl	8000288 <__aeabi_dsub>
 800b638:	4622      	mov	r2, r4
 800b63a:	462b      	mov	r3, r5
 800b63c:	f7f4 ffdc 	bl	80005f8 <__aeabi_dmul>
 800b640:	a381      	add	r3, pc, #516	@ (adr r3, 800b848 <__ieee754_asin+0x2f0>)
 800b642:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b646:	f7f4 fe21 	bl	800028c <__adddf3>
 800b64a:	4622      	mov	r2, r4
 800b64c:	462b      	mov	r3, r5
 800b64e:	f7f4 ffd3 	bl	80005f8 <__aeabi_dmul>
 800b652:	a37f      	add	r3, pc, #508	@ (adr r3, 800b850 <__ieee754_asin+0x2f8>)
 800b654:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b658:	f7f4 fe16 	bl	8000288 <__aeabi_dsub>
 800b65c:	4622      	mov	r2, r4
 800b65e:	462b      	mov	r3, r5
 800b660:	f7f4 ffca 	bl	80005f8 <__aeabi_dmul>
 800b664:	a37c      	add	r3, pc, #496	@ (adr r3, 800b858 <__ieee754_asin+0x300>)
 800b666:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b66a:	f7f4 fe0f 	bl	800028c <__adddf3>
 800b66e:	4622      	mov	r2, r4
 800b670:	462b      	mov	r3, r5
 800b672:	f7f4 ffc1 	bl	80005f8 <__aeabi_dmul>
 800b676:	a37a      	add	r3, pc, #488	@ (adr r3, 800b860 <__ieee754_asin+0x308>)
 800b678:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b67c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b680:	4620      	mov	r0, r4
 800b682:	4629      	mov	r1, r5
 800b684:	f7f4 ffb8 	bl	80005f8 <__aeabi_dmul>
 800b688:	a377      	add	r3, pc, #476	@ (adr r3, 800b868 <__ieee754_asin+0x310>)
 800b68a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b68e:	f7f4 fdfb 	bl	8000288 <__aeabi_dsub>
 800b692:	4622      	mov	r2, r4
 800b694:	462b      	mov	r3, r5
 800b696:	f7f4 ffaf 	bl	80005f8 <__aeabi_dmul>
 800b69a:	a375      	add	r3, pc, #468	@ (adr r3, 800b870 <__ieee754_asin+0x318>)
 800b69c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6a0:	f7f4 fdf4 	bl	800028c <__adddf3>
 800b6a4:	4622      	mov	r2, r4
 800b6a6:	462b      	mov	r3, r5
 800b6a8:	f7f4 ffa6 	bl	80005f8 <__aeabi_dmul>
 800b6ac:	a372      	add	r3, pc, #456	@ (adr r3, 800b878 <__ieee754_asin+0x320>)
 800b6ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b6b2:	f7f4 fde9 	bl	8000288 <__aeabi_dsub>
 800b6b6:	4622      	mov	r2, r4
 800b6b8:	462b      	mov	r3, r5
 800b6ba:	f7f4 ff9d 	bl	80005f8 <__aeabi_dmul>
 800b6be:	4b72      	ldr	r3, [pc, #456]	@ (800b888 <__ieee754_asin+0x330>)
 800b6c0:	2200      	movs	r2, #0
 800b6c2:	f7f4 fde3 	bl	800028c <__adddf3>
 800b6c6:	ec45 4b10 	vmov	d0, r4, r5
 800b6ca:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800b6ce:	f7ff fe67 	bl	800b3a0 <__ieee754_sqrt>
 800b6d2:	4b6f      	ldr	r3, [pc, #444]	@ (800b890 <__ieee754_asin+0x338>)
 800b6d4:	429e      	cmp	r6, r3
 800b6d6:	ec5b ab10 	vmov	sl, fp, d0
 800b6da:	f240 80db 	bls.w	800b894 <__ieee754_asin+0x33c>
 800b6de:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b6e2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b6e6:	f7f5 f8b1 	bl	800084c <__aeabi_ddiv>
 800b6ea:	4652      	mov	r2, sl
 800b6ec:	465b      	mov	r3, fp
 800b6ee:	f7f4 ff83 	bl	80005f8 <__aeabi_dmul>
 800b6f2:	4652      	mov	r2, sl
 800b6f4:	465b      	mov	r3, fp
 800b6f6:	f7f4 fdc9 	bl	800028c <__adddf3>
 800b6fa:	4602      	mov	r2, r0
 800b6fc:	460b      	mov	r3, r1
 800b6fe:	f7f4 fdc5 	bl	800028c <__adddf3>
 800b702:	a347      	add	r3, pc, #284	@ (adr r3, 800b820 <__ieee754_asin+0x2c8>)
 800b704:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b708:	f7f4 fdbe 	bl	8000288 <__aeabi_dsub>
 800b70c:	4602      	mov	r2, r0
 800b70e:	460b      	mov	r3, r1
 800b710:	a141      	add	r1, pc, #260	@ (adr r1, 800b818 <__ieee754_asin+0x2c0>)
 800b712:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b716:	f7f4 fdb7 	bl	8000288 <__aeabi_dsub>
 800b71a:	9b01      	ldr	r3, [sp, #4]
 800b71c:	2b00      	cmp	r3, #0
 800b71e:	bfdc      	itt	le
 800b720:	4602      	movle	r2, r0
 800b722:	f101 4300 	addle.w	r3, r1, #2147483648	@ 0x80000000
 800b726:	4604      	mov	r4, r0
 800b728:	460d      	mov	r5, r1
 800b72a:	bfdc      	itt	le
 800b72c:	4614      	movle	r4, r2
 800b72e:	461d      	movle	r5, r3
 800b730:	e746      	b.n	800b5c0 <__ieee754_asin+0x68>
 800b732:	4622      	mov	r2, r4
 800b734:	462b      	mov	r3, r5
 800b736:	4620      	mov	r0, r4
 800b738:	4629      	mov	r1, r5
 800b73a:	f7f4 ff5d 	bl	80005f8 <__aeabi_dmul>
 800b73e:	a33c      	add	r3, pc, #240	@ (adr r3, 800b830 <__ieee754_asin+0x2d8>)
 800b740:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b744:	4606      	mov	r6, r0
 800b746:	460f      	mov	r7, r1
 800b748:	f7f4 ff56 	bl	80005f8 <__aeabi_dmul>
 800b74c:	a33a      	add	r3, pc, #232	@ (adr r3, 800b838 <__ieee754_asin+0x2e0>)
 800b74e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b752:	f7f4 fd9b 	bl	800028c <__adddf3>
 800b756:	4632      	mov	r2, r6
 800b758:	463b      	mov	r3, r7
 800b75a:	f7f4 ff4d 	bl	80005f8 <__aeabi_dmul>
 800b75e:	a338      	add	r3, pc, #224	@ (adr r3, 800b840 <__ieee754_asin+0x2e8>)
 800b760:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b764:	f7f4 fd90 	bl	8000288 <__aeabi_dsub>
 800b768:	4632      	mov	r2, r6
 800b76a:	463b      	mov	r3, r7
 800b76c:	f7f4 ff44 	bl	80005f8 <__aeabi_dmul>
 800b770:	a335      	add	r3, pc, #212	@ (adr r3, 800b848 <__ieee754_asin+0x2f0>)
 800b772:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b776:	f7f4 fd89 	bl	800028c <__adddf3>
 800b77a:	4632      	mov	r2, r6
 800b77c:	463b      	mov	r3, r7
 800b77e:	f7f4 ff3b 	bl	80005f8 <__aeabi_dmul>
 800b782:	a333      	add	r3, pc, #204	@ (adr r3, 800b850 <__ieee754_asin+0x2f8>)
 800b784:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b788:	f7f4 fd7e 	bl	8000288 <__aeabi_dsub>
 800b78c:	4632      	mov	r2, r6
 800b78e:	463b      	mov	r3, r7
 800b790:	f7f4 ff32 	bl	80005f8 <__aeabi_dmul>
 800b794:	a330      	add	r3, pc, #192	@ (adr r3, 800b858 <__ieee754_asin+0x300>)
 800b796:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b79a:	f7f4 fd77 	bl	800028c <__adddf3>
 800b79e:	4632      	mov	r2, r6
 800b7a0:	463b      	mov	r3, r7
 800b7a2:	f7f4 ff29 	bl	80005f8 <__aeabi_dmul>
 800b7a6:	a32e      	add	r3, pc, #184	@ (adr r3, 800b860 <__ieee754_asin+0x308>)
 800b7a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7ac:	4680      	mov	r8, r0
 800b7ae:	4689      	mov	r9, r1
 800b7b0:	4630      	mov	r0, r6
 800b7b2:	4639      	mov	r1, r7
 800b7b4:	f7f4 ff20 	bl	80005f8 <__aeabi_dmul>
 800b7b8:	a32b      	add	r3, pc, #172	@ (adr r3, 800b868 <__ieee754_asin+0x310>)
 800b7ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7be:	f7f4 fd63 	bl	8000288 <__aeabi_dsub>
 800b7c2:	4632      	mov	r2, r6
 800b7c4:	463b      	mov	r3, r7
 800b7c6:	f7f4 ff17 	bl	80005f8 <__aeabi_dmul>
 800b7ca:	a329      	add	r3, pc, #164	@ (adr r3, 800b870 <__ieee754_asin+0x318>)
 800b7cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7d0:	f7f4 fd5c 	bl	800028c <__adddf3>
 800b7d4:	4632      	mov	r2, r6
 800b7d6:	463b      	mov	r3, r7
 800b7d8:	f7f4 ff0e 	bl	80005f8 <__aeabi_dmul>
 800b7dc:	a326      	add	r3, pc, #152	@ (adr r3, 800b878 <__ieee754_asin+0x320>)
 800b7de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7e2:	f7f4 fd51 	bl	8000288 <__aeabi_dsub>
 800b7e6:	4632      	mov	r2, r6
 800b7e8:	463b      	mov	r3, r7
 800b7ea:	f7f4 ff05 	bl	80005f8 <__aeabi_dmul>
 800b7ee:	4b26      	ldr	r3, [pc, #152]	@ (800b888 <__ieee754_asin+0x330>)
 800b7f0:	2200      	movs	r2, #0
 800b7f2:	f7f4 fd4b 	bl	800028c <__adddf3>
 800b7f6:	4602      	mov	r2, r0
 800b7f8:	460b      	mov	r3, r1
 800b7fa:	4640      	mov	r0, r8
 800b7fc:	4649      	mov	r1, r9
 800b7fe:	f7f5 f825 	bl	800084c <__aeabi_ddiv>
 800b802:	4622      	mov	r2, r4
 800b804:	462b      	mov	r3, r5
 800b806:	f7f4 fef7 	bl	80005f8 <__aeabi_dmul>
 800b80a:	4602      	mov	r2, r0
 800b80c:	460b      	mov	r3, r1
 800b80e:	4620      	mov	r0, r4
 800b810:	4629      	mov	r1, r5
 800b812:	e6c6      	b.n	800b5a2 <__ieee754_asin+0x4a>
 800b814:	f3af 8000 	nop.w
 800b818:	54442d18 	.word	0x54442d18
 800b81c:	3ff921fb 	.word	0x3ff921fb
 800b820:	33145c07 	.word	0x33145c07
 800b824:	3c91a626 	.word	0x3c91a626
 800b828:	8800759c 	.word	0x8800759c
 800b82c:	7e37e43c 	.word	0x7e37e43c
 800b830:	0dfdf709 	.word	0x0dfdf709
 800b834:	3f023de1 	.word	0x3f023de1
 800b838:	7501b288 	.word	0x7501b288
 800b83c:	3f49efe0 	.word	0x3f49efe0
 800b840:	b5688f3b 	.word	0xb5688f3b
 800b844:	3fa48228 	.word	0x3fa48228
 800b848:	0e884455 	.word	0x0e884455
 800b84c:	3fc9c155 	.word	0x3fc9c155
 800b850:	03eb6f7d 	.word	0x03eb6f7d
 800b854:	3fd4d612 	.word	0x3fd4d612
 800b858:	55555555 	.word	0x55555555
 800b85c:	3fc55555 	.word	0x3fc55555
 800b860:	b12e9282 	.word	0xb12e9282
 800b864:	3fb3b8c5 	.word	0x3fb3b8c5
 800b868:	1b8d0159 	.word	0x1b8d0159
 800b86c:	3fe6066c 	.word	0x3fe6066c
 800b870:	9c598ac8 	.word	0x9c598ac8
 800b874:	40002ae5 	.word	0x40002ae5
 800b878:	1c8a2d4b 	.word	0x1c8a2d4b
 800b87c:	40033a27 	.word	0x40033a27
 800b880:	3fefffff 	.word	0x3fefffff
 800b884:	3fdfffff 	.word	0x3fdfffff
 800b888:	3ff00000 	.word	0x3ff00000
 800b88c:	3fe00000 	.word	0x3fe00000
 800b890:	3fef3332 	.word	0x3fef3332
 800b894:	4652      	mov	r2, sl
 800b896:	465b      	mov	r3, fp
 800b898:	4650      	mov	r0, sl
 800b89a:	4659      	mov	r1, fp
 800b89c:	f7f4 fcf6 	bl	800028c <__adddf3>
 800b8a0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b8a4:	4606      	mov	r6, r0
 800b8a6:	460f      	mov	r7, r1
 800b8a8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b8ac:	f7f4 ffce 	bl	800084c <__aeabi_ddiv>
 800b8b0:	4602      	mov	r2, r0
 800b8b2:	460b      	mov	r3, r1
 800b8b4:	4630      	mov	r0, r6
 800b8b6:	4639      	mov	r1, r7
 800b8b8:	f7f4 fe9e 	bl	80005f8 <__aeabi_dmul>
 800b8bc:	f04f 0800 	mov.w	r8, #0
 800b8c0:	4606      	mov	r6, r0
 800b8c2:	460f      	mov	r7, r1
 800b8c4:	4642      	mov	r2, r8
 800b8c6:	465b      	mov	r3, fp
 800b8c8:	4640      	mov	r0, r8
 800b8ca:	4659      	mov	r1, fp
 800b8cc:	f7f4 fe94 	bl	80005f8 <__aeabi_dmul>
 800b8d0:	4602      	mov	r2, r0
 800b8d2:	460b      	mov	r3, r1
 800b8d4:	4620      	mov	r0, r4
 800b8d6:	4629      	mov	r1, r5
 800b8d8:	f7f4 fcd6 	bl	8000288 <__aeabi_dsub>
 800b8dc:	4642      	mov	r2, r8
 800b8de:	4604      	mov	r4, r0
 800b8e0:	460d      	mov	r5, r1
 800b8e2:	465b      	mov	r3, fp
 800b8e4:	4650      	mov	r0, sl
 800b8e6:	4659      	mov	r1, fp
 800b8e8:	f7f4 fcd0 	bl	800028c <__adddf3>
 800b8ec:	4602      	mov	r2, r0
 800b8ee:	460b      	mov	r3, r1
 800b8f0:	4620      	mov	r0, r4
 800b8f2:	4629      	mov	r1, r5
 800b8f4:	f7f4 ffaa 	bl	800084c <__aeabi_ddiv>
 800b8f8:	4602      	mov	r2, r0
 800b8fa:	460b      	mov	r3, r1
 800b8fc:	f7f4 fcc6 	bl	800028c <__adddf3>
 800b900:	4602      	mov	r2, r0
 800b902:	460b      	mov	r3, r1
 800b904:	a112      	add	r1, pc, #72	@ (adr r1, 800b950 <__ieee754_asin+0x3f8>)
 800b906:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b90a:	f7f4 fcbd 	bl	8000288 <__aeabi_dsub>
 800b90e:	4602      	mov	r2, r0
 800b910:	460b      	mov	r3, r1
 800b912:	4630      	mov	r0, r6
 800b914:	4639      	mov	r1, r7
 800b916:	f7f4 fcb7 	bl	8000288 <__aeabi_dsub>
 800b91a:	4642      	mov	r2, r8
 800b91c:	4604      	mov	r4, r0
 800b91e:	460d      	mov	r5, r1
 800b920:	465b      	mov	r3, fp
 800b922:	4640      	mov	r0, r8
 800b924:	4659      	mov	r1, fp
 800b926:	f7f4 fcb1 	bl	800028c <__adddf3>
 800b92a:	4602      	mov	r2, r0
 800b92c:	460b      	mov	r3, r1
 800b92e:	a10a      	add	r1, pc, #40	@ (adr r1, 800b958 <__ieee754_asin+0x400>)
 800b930:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b934:	f7f4 fca8 	bl	8000288 <__aeabi_dsub>
 800b938:	4602      	mov	r2, r0
 800b93a:	460b      	mov	r3, r1
 800b93c:	4620      	mov	r0, r4
 800b93e:	4629      	mov	r1, r5
 800b940:	f7f4 fca2 	bl	8000288 <__aeabi_dsub>
 800b944:	4602      	mov	r2, r0
 800b946:	460b      	mov	r3, r1
 800b948:	a103      	add	r1, pc, #12	@ (adr r1, 800b958 <__ieee754_asin+0x400>)
 800b94a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b94e:	e6e2      	b.n	800b716 <__ieee754_asin+0x1be>
 800b950:	33145c07 	.word	0x33145c07
 800b954:	3c91a626 	.word	0x3c91a626
 800b958:	54442d18 	.word	0x54442d18
 800b95c:	3fe921fb 	.word	0x3fe921fb

0800b960 <__ieee754_atan2>:
 800b960:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b964:	ec57 6b11 	vmov	r6, r7, d1
 800b968:	4273      	negs	r3, r6
 800b96a:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 800bae8 <__ieee754_atan2+0x188>
 800b96e:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 800b972:	4333      	orrs	r3, r6
 800b974:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800b978:	4543      	cmp	r3, r8
 800b97a:	ec51 0b10 	vmov	r0, r1, d0
 800b97e:	4635      	mov	r5, r6
 800b980:	d809      	bhi.n	800b996 <__ieee754_atan2+0x36>
 800b982:	4244      	negs	r4, r0
 800b984:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800b988:	4304      	orrs	r4, r0
 800b98a:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800b98e:	4544      	cmp	r4, r8
 800b990:	468e      	mov	lr, r1
 800b992:	4681      	mov	r9, r0
 800b994:	d907      	bls.n	800b9a6 <__ieee754_atan2+0x46>
 800b996:	4632      	mov	r2, r6
 800b998:	463b      	mov	r3, r7
 800b99a:	f7f4 fc77 	bl	800028c <__adddf3>
 800b99e:	ec41 0b10 	vmov	d0, r0, r1
 800b9a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b9a6:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 800b9aa:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 800b9ae:	4334      	orrs	r4, r6
 800b9b0:	d103      	bne.n	800b9ba <__ieee754_atan2+0x5a>
 800b9b2:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b9b6:	f7ff bb3f 	b.w	800b038 <atan>
 800b9ba:	17bc      	asrs	r4, r7, #30
 800b9bc:	f004 0402 	and.w	r4, r4, #2
 800b9c0:	ea53 0909 	orrs.w	r9, r3, r9
 800b9c4:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800b9c8:	d107      	bne.n	800b9da <__ieee754_atan2+0x7a>
 800b9ca:	2c02      	cmp	r4, #2
 800b9cc:	d05f      	beq.n	800ba8e <__ieee754_atan2+0x12e>
 800b9ce:	2c03      	cmp	r4, #3
 800b9d0:	d1e5      	bne.n	800b99e <__ieee754_atan2+0x3e>
 800b9d2:	a141      	add	r1, pc, #260	@ (adr r1, 800bad8 <__ieee754_atan2+0x178>)
 800b9d4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b9d8:	e7e1      	b.n	800b99e <__ieee754_atan2+0x3e>
 800b9da:	4315      	orrs	r5, r2
 800b9dc:	d106      	bne.n	800b9ec <__ieee754_atan2+0x8c>
 800b9de:	f1be 0f00 	cmp.w	lr, #0
 800b9e2:	da5f      	bge.n	800baa4 <__ieee754_atan2+0x144>
 800b9e4:	a13e      	add	r1, pc, #248	@ (adr r1, 800bae0 <__ieee754_atan2+0x180>)
 800b9e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b9ea:	e7d8      	b.n	800b99e <__ieee754_atan2+0x3e>
 800b9ec:	4542      	cmp	r2, r8
 800b9ee:	d10f      	bne.n	800ba10 <__ieee754_atan2+0xb0>
 800b9f0:	4293      	cmp	r3, r2
 800b9f2:	f104 34ff 	add.w	r4, r4, #4294967295	@ 0xffffffff
 800b9f6:	d107      	bne.n	800ba08 <__ieee754_atan2+0xa8>
 800b9f8:	2c02      	cmp	r4, #2
 800b9fa:	d84c      	bhi.n	800ba96 <__ieee754_atan2+0x136>
 800b9fc:	4b34      	ldr	r3, [pc, #208]	@ (800bad0 <__ieee754_atan2+0x170>)
 800b9fe:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ba02:	e9d3 0100 	ldrd	r0, r1, [r3]
 800ba06:	e7ca      	b.n	800b99e <__ieee754_atan2+0x3e>
 800ba08:	2c02      	cmp	r4, #2
 800ba0a:	d848      	bhi.n	800ba9e <__ieee754_atan2+0x13e>
 800ba0c:	4b31      	ldr	r3, [pc, #196]	@ (800bad4 <__ieee754_atan2+0x174>)
 800ba0e:	e7f6      	b.n	800b9fe <__ieee754_atan2+0x9e>
 800ba10:	4543      	cmp	r3, r8
 800ba12:	d0e4      	beq.n	800b9de <__ieee754_atan2+0x7e>
 800ba14:	1a9b      	subs	r3, r3, r2
 800ba16:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 800ba1a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800ba1e:	da1e      	bge.n	800ba5e <__ieee754_atan2+0xfe>
 800ba20:	2f00      	cmp	r7, #0
 800ba22:	da01      	bge.n	800ba28 <__ieee754_atan2+0xc8>
 800ba24:	323c      	adds	r2, #60	@ 0x3c
 800ba26:	db1e      	blt.n	800ba66 <__ieee754_atan2+0x106>
 800ba28:	4632      	mov	r2, r6
 800ba2a:	463b      	mov	r3, r7
 800ba2c:	f7f4 ff0e 	bl	800084c <__aeabi_ddiv>
 800ba30:	ec41 0b10 	vmov	d0, r0, r1
 800ba34:	f7ff fc98 	bl	800b368 <fabs>
 800ba38:	f7ff fafe 	bl	800b038 <atan>
 800ba3c:	ec51 0b10 	vmov	r0, r1, d0
 800ba40:	2c01      	cmp	r4, #1
 800ba42:	d013      	beq.n	800ba6c <__ieee754_atan2+0x10c>
 800ba44:	2c02      	cmp	r4, #2
 800ba46:	d015      	beq.n	800ba74 <__ieee754_atan2+0x114>
 800ba48:	2c00      	cmp	r4, #0
 800ba4a:	d0a8      	beq.n	800b99e <__ieee754_atan2+0x3e>
 800ba4c:	a318      	add	r3, pc, #96	@ (adr r3, 800bab0 <__ieee754_atan2+0x150>)
 800ba4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba52:	f7f4 fc19 	bl	8000288 <__aeabi_dsub>
 800ba56:	a318      	add	r3, pc, #96	@ (adr r3, 800bab8 <__ieee754_atan2+0x158>)
 800ba58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba5c:	e014      	b.n	800ba88 <__ieee754_atan2+0x128>
 800ba5e:	a118      	add	r1, pc, #96	@ (adr r1, 800bac0 <__ieee754_atan2+0x160>)
 800ba60:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ba64:	e7ec      	b.n	800ba40 <__ieee754_atan2+0xe0>
 800ba66:	2000      	movs	r0, #0
 800ba68:	2100      	movs	r1, #0
 800ba6a:	e7e9      	b.n	800ba40 <__ieee754_atan2+0xe0>
 800ba6c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800ba70:	4619      	mov	r1, r3
 800ba72:	e794      	b.n	800b99e <__ieee754_atan2+0x3e>
 800ba74:	a30e      	add	r3, pc, #56	@ (adr r3, 800bab0 <__ieee754_atan2+0x150>)
 800ba76:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ba7a:	f7f4 fc05 	bl	8000288 <__aeabi_dsub>
 800ba7e:	4602      	mov	r2, r0
 800ba80:	460b      	mov	r3, r1
 800ba82:	a10d      	add	r1, pc, #52	@ (adr r1, 800bab8 <__ieee754_atan2+0x158>)
 800ba84:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ba88:	f7f4 fbfe 	bl	8000288 <__aeabi_dsub>
 800ba8c:	e787      	b.n	800b99e <__ieee754_atan2+0x3e>
 800ba8e:	a10a      	add	r1, pc, #40	@ (adr r1, 800bab8 <__ieee754_atan2+0x158>)
 800ba90:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ba94:	e783      	b.n	800b99e <__ieee754_atan2+0x3e>
 800ba96:	a10c      	add	r1, pc, #48	@ (adr r1, 800bac8 <__ieee754_atan2+0x168>)
 800ba98:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ba9c:	e77f      	b.n	800b99e <__ieee754_atan2+0x3e>
 800ba9e:	2000      	movs	r0, #0
 800baa0:	2100      	movs	r1, #0
 800baa2:	e77c      	b.n	800b99e <__ieee754_atan2+0x3e>
 800baa4:	a106      	add	r1, pc, #24	@ (adr r1, 800bac0 <__ieee754_atan2+0x160>)
 800baa6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800baaa:	e778      	b.n	800b99e <__ieee754_atan2+0x3e>
 800baac:	f3af 8000 	nop.w
 800bab0:	33145c07 	.word	0x33145c07
 800bab4:	3ca1a626 	.word	0x3ca1a626
 800bab8:	54442d18 	.word	0x54442d18
 800babc:	400921fb 	.word	0x400921fb
 800bac0:	54442d18 	.word	0x54442d18
 800bac4:	3ff921fb 	.word	0x3ff921fb
 800bac8:	54442d18 	.word	0x54442d18
 800bacc:	3fe921fb 	.word	0x3fe921fb
 800bad0:	0800d368 	.word	0x0800d368
 800bad4:	0800d350 	.word	0x0800d350
 800bad8:	54442d18 	.word	0x54442d18
 800badc:	c00921fb 	.word	0xc00921fb
 800bae0:	54442d18 	.word	0x54442d18
 800bae4:	bff921fb 	.word	0xbff921fb
 800bae8:	7ff00000 	.word	0x7ff00000
 800baec:	00000000 	.word	0x00000000

0800baf0 <__ieee754_pow>:
 800baf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800baf4:	b091      	sub	sp, #68	@ 0x44
 800baf6:	ed8d 1b00 	vstr	d1, [sp]
 800bafa:	e9dd 1900 	ldrd	r1, r9, [sp]
 800bafe:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 800bb02:	ea5a 0001 	orrs.w	r0, sl, r1
 800bb06:	ec57 6b10 	vmov	r6, r7, d0
 800bb0a:	d113      	bne.n	800bb34 <__ieee754_pow+0x44>
 800bb0c:	19b3      	adds	r3, r6, r6
 800bb0e:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 800bb12:	4152      	adcs	r2, r2
 800bb14:	4298      	cmp	r0, r3
 800bb16:	4b98      	ldr	r3, [pc, #608]	@ (800bd78 <__ieee754_pow+0x288>)
 800bb18:	4193      	sbcs	r3, r2
 800bb1a:	f080 84ea 	bcs.w	800c4f2 <__ieee754_pow+0xa02>
 800bb1e:	e9dd 2300 	ldrd	r2, r3, [sp]
 800bb22:	4630      	mov	r0, r6
 800bb24:	4639      	mov	r1, r7
 800bb26:	f7f4 fbb1 	bl	800028c <__adddf3>
 800bb2a:	ec41 0b10 	vmov	d0, r0, r1
 800bb2e:	b011      	add	sp, #68	@ 0x44
 800bb30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb34:	4a91      	ldr	r2, [pc, #580]	@ (800bd7c <__ieee754_pow+0x28c>)
 800bb36:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800bb3a:	4590      	cmp	r8, r2
 800bb3c:	463d      	mov	r5, r7
 800bb3e:	4633      	mov	r3, r6
 800bb40:	d806      	bhi.n	800bb50 <__ieee754_pow+0x60>
 800bb42:	d101      	bne.n	800bb48 <__ieee754_pow+0x58>
 800bb44:	2e00      	cmp	r6, #0
 800bb46:	d1ea      	bne.n	800bb1e <__ieee754_pow+0x2e>
 800bb48:	4592      	cmp	sl, r2
 800bb4a:	d801      	bhi.n	800bb50 <__ieee754_pow+0x60>
 800bb4c:	d10e      	bne.n	800bb6c <__ieee754_pow+0x7c>
 800bb4e:	b169      	cbz	r1, 800bb6c <__ieee754_pow+0x7c>
 800bb50:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 800bb54:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 800bb58:	431d      	orrs	r5, r3
 800bb5a:	d1e0      	bne.n	800bb1e <__ieee754_pow+0x2e>
 800bb5c:	e9dd 3200 	ldrd	r3, r2, [sp]
 800bb60:	18db      	adds	r3, r3, r3
 800bb62:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 800bb66:	4152      	adcs	r2, r2
 800bb68:	429d      	cmp	r5, r3
 800bb6a:	e7d4      	b.n	800bb16 <__ieee754_pow+0x26>
 800bb6c:	2d00      	cmp	r5, #0
 800bb6e:	46c3      	mov	fp, r8
 800bb70:	da3a      	bge.n	800bbe8 <__ieee754_pow+0xf8>
 800bb72:	4a83      	ldr	r2, [pc, #524]	@ (800bd80 <__ieee754_pow+0x290>)
 800bb74:	4592      	cmp	sl, r2
 800bb76:	d84d      	bhi.n	800bc14 <__ieee754_pow+0x124>
 800bb78:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 800bb7c:	4592      	cmp	sl, r2
 800bb7e:	f240 84c7 	bls.w	800c510 <__ieee754_pow+0xa20>
 800bb82:	ea4f 522a 	mov.w	r2, sl, asr #20
 800bb86:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800bb8a:	2a14      	cmp	r2, #20
 800bb8c:	dd0f      	ble.n	800bbae <__ieee754_pow+0xbe>
 800bb8e:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 800bb92:	fa21 f402 	lsr.w	r4, r1, r2
 800bb96:	fa04 f202 	lsl.w	r2, r4, r2
 800bb9a:	428a      	cmp	r2, r1
 800bb9c:	f040 84b8 	bne.w	800c510 <__ieee754_pow+0xa20>
 800bba0:	f004 0401 	and.w	r4, r4, #1
 800bba4:	f1c4 0402 	rsb	r4, r4, #2
 800bba8:	2900      	cmp	r1, #0
 800bbaa:	d158      	bne.n	800bc5e <__ieee754_pow+0x16e>
 800bbac:	e00e      	b.n	800bbcc <__ieee754_pow+0xdc>
 800bbae:	2900      	cmp	r1, #0
 800bbb0:	d154      	bne.n	800bc5c <__ieee754_pow+0x16c>
 800bbb2:	f1c2 0214 	rsb	r2, r2, #20
 800bbb6:	fa4a f402 	asr.w	r4, sl, r2
 800bbba:	fa04 f202 	lsl.w	r2, r4, r2
 800bbbe:	4552      	cmp	r2, sl
 800bbc0:	f040 84a3 	bne.w	800c50a <__ieee754_pow+0xa1a>
 800bbc4:	f004 0401 	and.w	r4, r4, #1
 800bbc8:	f1c4 0402 	rsb	r4, r4, #2
 800bbcc:	4a6d      	ldr	r2, [pc, #436]	@ (800bd84 <__ieee754_pow+0x294>)
 800bbce:	4592      	cmp	sl, r2
 800bbd0:	d12e      	bne.n	800bc30 <__ieee754_pow+0x140>
 800bbd2:	f1b9 0f00 	cmp.w	r9, #0
 800bbd6:	f280 8494 	bge.w	800c502 <__ieee754_pow+0xa12>
 800bbda:	496a      	ldr	r1, [pc, #424]	@ (800bd84 <__ieee754_pow+0x294>)
 800bbdc:	4632      	mov	r2, r6
 800bbde:	463b      	mov	r3, r7
 800bbe0:	2000      	movs	r0, #0
 800bbe2:	f7f4 fe33 	bl	800084c <__aeabi_ddiv>
 800bbe6:	e7a0      	b.n	800bb2a <__ieee754_pow+0x3a>
 800bbe8:	2400      	movs	r4, #0
 800bbea:	bbc1      	cbnz	r1, 800bc5e <__ieee754_pow+0x16e>
 800bbec:	4a63      	ldr	r2, [pc, #396]	@ (800bd7c <__ieee754_pow+0x28c>)
 800bbee:	4592      	cmp	sl, r2
 800bbf0:	d1ec      	bne.n	800bbcc <__ieee754_pow+0xdc>
 800bbf2:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 800bbf6:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 800bbfa:	431a      	orrs	r2, r3
 800bbfc:	f000 8479 	beq.w	800c4f2 <__ieee754_pow+0xa02>
 800bc00:	4b61      	ldr	r3, [pc, #388]	@ (800bd88 <__ieee754_pow+0x298>)
 800bc02:	4598      	cmp	r8, r3
 800bc04:	d908      	bls.n	800bc18 <__ieee754_pow+0x128>
 800bc06:	f1b9 0f00 	cmp.w	r9, #0
 800bc0a:	f2c0 8476 	blt.w	800c4fa <__ieee754_pow+0xa0a>
 800bc0e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800bc12:	e78a      	b.n	800bb2a <__ieee754_pow+0x3a>
 800bc14:	2402      	movs	r4, #2
 800bc16:	e7e8      	b.n	800bbea <__ieee754_pow+0xfa>
 800bc18:	f1b9 0f00 	cmp.w	r9, #0
 800bc1c:	f04f 0000 	mov.w	r0, #0
 800bc20:	f04f 0100 	mov.w	r1, #0
 800bc24:	da81      	bge.n	800bb2a <__ieee754_pow+0x3a>
 800bc26:	e9dd 0300 	ldrd	r0, r3, [sp]
 800bc2a:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800bc2e:	e77c      	b.n	800bb2a <__ieee754_pow+0x3a>
 800bc30:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 800bc34:	d106      	bne.n	800bc44 <__ieee754_pow+0x154>
 800bc36:	4632      	mov	r2, r6
 800bc38:	463b      	mov	r3, r7
 800bc3a:	4630      	mov	r0, r6
 800bc3c:	4639      	mov	r1, r7
 800bc3e:	f7f4 fcdb 	bl	80005f8 <__aeabi_dmul>
 800bc42:	e772      	b.n	800bb2a <__ieee754_pow+0x3a>
 800bc44:	4a51      	ldr	r2, [pc, #324]	@ (800bd8c <__ieee754_pow+0x29c>)
 800bc46:	4591      	cmp	r9, r2
 800bc48:	d109      	bne.n	800bc5e <__ieee754_pow+0x16e>
 800bc4a:	2d00      	cmp	r5, #0
 800bc4c:	db07      	blt.n	800bc5e <__ieee754_pow+0x16e>
 800bc4e:	ec47 6b10 	vmov	d0, r6, r7
 800bc52:	b011      	add	sp, #68	@ 0x44
 800bc54:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc58:	f7ff bba2 	b.w	800b3a0 <__ieee754_sqrt>
 800bc5c:	2400      	movs	r4, #0
 800bc5e:	ec47 6b10 	vmov	d0, r6, r7
 800bc62:	9302      	str	r3, [sp, #8]
 800bc64:	f7ff fb80 	bl	800b368 <fabs>
 800bc68:	9b02      	ldr	r3, [sp, #8]
 800bc6a:	ec51 0b10 	vmov	r0, r1, d0
 800bc6e:	bb53      	cbnz	r3, 800bcc6 <__ieee754_pow+0x1d6>
 800bc70:	4b44      	ldr	r3, [pc, #272]	@ (800bd84 <__ieee754_pow+0x294>)
 800bc72:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 800bc76:	429a      	cmp	r2, r3
 800bc78:	d002      	beq.n	800bc80 <__ieee754_pow+0x190>
 800bc7a:	f1b8 0f00 	cmp.w	r8, #0
 800bc7e:	d122      	bne.n	800bcc6 <__ieee754_pow+0x1d6>
 800bc80:	f1b9 0f00 	cmp.w	r9, #0
 800bc84:	da05      	bge.n	800bc92 <__ieee754_pow+0x1a2>
 800bc86:	4602      	mov	r2, r0
 800bc88:	460b      	mov	r3, r1
 800bc8a:	2000      	movs	r0, #0
 800bc8c:	493d      	ldr	r1, [pc, #244]	@ (800bd84 <__ieee754_pow+0x294>)
 800bc8e:	f7f4 fddd 	bl	800084c <__aeabi_ddiv>
 800bc92:	2d00      	cmp	r5, #0
 800bc94:	f6bf af49 	bge.w	800bb2a <__ieee754_pow+0x3a>
 800bc98:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 800bc9c:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 800bca0:	ea58 0804 	orrs.w	r8, r8, r4
 800bca4:	d108      	bne.n	800bcb8 <__ieee754_pow+0x1c8>
 800bca6:	4602      	mov	r2, r0
 800bca8:	460b      	mov	r3, r1
 800bcaa:	4610      	mov	r0, r2
 800bcac:	4619      	mov	r1, r3
 800bcae:	f7f4 faeb 	bl	8000288 <__aeabi_dsub>
 800bcb2:	4602      	mov	r2, r0
 800bcb4:	460b      	mov	r3, r1
 800bcb6:	e794      	b.n	800bbe2 <__ieee754_pow+0xf2>
 800bcb8:	2c01      	cmp	r4, #1
 800bcba:	f47f af36 	bne.w	800bb2a <__ieee754_pow+0x3a>
 800bcbe:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800bcc2:	4619      	mov	r1, r3
 800bcc4:	e731      	b.n	800bb2a <__ieee754_pow+0x3a>
 800bcc6:	0feb      	lsrs	r3, r5, #31
 800bcc8:	3b01      	subs	r3, #1
 800bcca:	ea53 0204 	orrs.w	r2, r3, r4
 800bcce:	d102      	bne.n	800bcd6 <__ieee754_pow+0x1e6>
 800bcd0:	4632      	mov	r2, r6
 800bcd2:	463b      	mov	r3, r7
 800bcd4:	e7e9      	b.n	800bcaa <__ieee754_pow+0x1ba>
 800bcd6:	3c01      	subs	r4, #1
 800bcd8:	431c      	orrs	r4, r3
 800bcda:	d016      	beq.n	800bd0a <__ieee754_pow+0x21a>
 800bcdc:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 800bd68 <__ieee754_pow+0x278>
 800bce0:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 800bce4:	ed8d 7b02 	vstr	d7, [sp, #8]
 800bce8:	f240 8112 	bls.w	800bf10 <__ieee754_pow+0x420>
 800bcec:	4b28      	ldr	r3, [pc, #160]	@ (800bd90 <__ieee754_pow+0x2a0>)
 800bcee:	459a      	cmp	sl, r3
 800bcf0:	4b25      	ldr	r3, [pc, #148]	@ (800bd88 <__ieee754_pow+0x298>)
 800bcf2:	d916      	bls.n	800bd22 <__ieee754_pow+0x232>
 800bcf4:	4598      	cmp	r8, r3
 800bcf6:	d80b      	bhi.n	800bd10 <__ieee754_pow+0x220>
 800bcf8:	f1b9 0f00 	cmp.w	r9, #0
 800bcfc:	da0b      	bge.n	800bd16 <__ieee754_pow+0x226>
 800bcfe:	2000      	movs	r0, #0
 800bd00:	b011      	add	sp, #68	@ 0x44
 800bd02:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd06:	f000 bceb 	b.w	800c6e0 <__math_oflow>
 800bd0a:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 800bd70 <__ieee754_pow+0x280>
 800bd0e:	e7e7      	b.n	800bce0 <__ieee754_pow+0x1f0>
 800bd10:	f1b9 0f00 	cmp.w	r9, #0
 800bd14:	dcf3      	bgt.n	800bcfe <__ieee754_pow+0x20e>
 800bd16:	2000      	movs	r0, #0
 800bd18:	b011      	add	sp, #68	@ 0x44
 800bd1a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd1e:	f000 bcd7 	b.w	800c6d0 <__math_uflow>
 800bd22:	4598      	cmp	r8, r3
 800bd24:	d20c      	bcs.n	800bd40 <__ieee754_pow+0x250>
 800bd26:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bd2a:	2200      	movs	r2, #0
 800bd2c:	2300      	movs	r3, #0
 800bd2e:	f7f4 fed5 	bl	8000adc <__aeabi_dcmplt>
 800bd32:	3800      	subs	r0, #0
 800bd34:	bf18      	it	ne
 800bd36:	2001      	movne	r0, #1
 800bd38:	f1b9 0f00 	cmp.w	r9, #0
 800bd3c:	daec      	bge.n	800bd18 <__ieee754_pow+0x228>
 800bd3e:	e7df      	b.n	800bd00 <__ieee754_pow+0x210>
 800bd40:	4b10      	ldr	r3, [pc, #64]	@ (800bd84 <__ieee754_pow+0x294>)
 800bd42:	4598      	cmp	r8, r3
 800bd44:	f04f 0200 	mov.w	r2, #0
 800bd48:	d924      	bls.n	800bd94 <__ieee754_pow+0x2a4>
 800bd4a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bd4e:	2300      	movs	r3, #0
 800bd50:	f7f4 fec4 	bl	8000adc <__aeabi_dcmplt>
 800bd54:	3800      	subs	r0, #0
 800bd56:	bf18      	it	ne
 800bd58:	2001      	movne	r0, #1
 800bd5a:	f1b9 0f00 	cmp.w	r9, #0
 800bd5e:	dccf      	bgt.n	800bd00 <__ieee754_pow+0x210>
 800bd60:	e7da      	b.n	800bd18 <__ieee754_pow+0x228>
 800bd62:	bf00      	nop
 800bd64:	f3af 8000 	nop.w
 800bd68:	00000000 	.word	0x00000000
 800bd6c:	3ff00000 	.word	0x3ff00000
 800bd70:	00000000 	.word	0x00000000
 800bd74:	bff00000 	.word	0xbff00000
 800bd78:	fff00000 	.word	0xfff00000
 800bd7c:	7ff00000 	.word	0x7ff00000
 800bd80:	433fffff 	.word	0x433fffff
 800bd84:	3ff00000 	.word	0x3ff00000
 800bd88:	3fefffff 	.word	0x3fefffff
 800bd8c:	3fe00000 	.word	0x3fe00000
 800bd90:	43f00000 	.word	0x43f00000
 800bd94:	4b5a      	ldr	r3, [pc, #360]	@ (800bf00 <__ieee754_pow+0x410>)
 800bd96:	f7f4 fa77 	bl	8000288 <__aeabi_dsub>
 800bd9a:	a351      	add	r3, pc, #324	@ (adr r3, 800bee0 <__ieee754_pow+0x3f0>)
 800bd9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bda0:	4604      	mov	r4, r0
 800bda2:	460d      	mov	r5, r1
 800bda4:	f7f4 fc28 	bl	80005f8 <__aeabi_dmul>
 800bda8:	a34f      	add	r3, pc, #316	@ (adr r3, 800bee8 <__ieee754_pow+0x3f8>)
 800bdaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdae:	4606      	mov	r6, r0
 800bdb0:	460f      	mov	r7, r1
 800bdb2:	4620      	mov	r0, r4
 800bdb4:	4629      	mov	r1, r5
 800bdb6:	f7f4 fc1f 	bl	80005f8 <__aeabi_dmul>
 800bdba:	4b52      	ldr	r3, [pc, #328]	@ (800bf04 <__ieee754_pow+0x414>)
 800bdbc:	4682      	mov	sl, r0
 800bdbe:	468b      	mov	fp, r1
 800bdc0:	2200      	movs	r2, #0
 800bdc2:	4620      	mov	r0, r4
 800bdc4:	4629      	mov	r1, r5
 800bdc6:	f7f4 fc17 	bl	80005f8 <__aeabi_dmul>
 800bdca:	4602      	mov	r2, r0
 800bdcc:	460b      	mov	r3, r1
 800bdce:	a148      	add	r1, pc, #288	@ (adr r1, 800bef0 <__ieee754_pow+0x400>)
 800bdd0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bdd4:	f7f4 fa58 	bl	8000288 <__aeabi_dsub>
 800bdd8:	4622      	mov	r2, r4
 800bdda:	462b      	mov	r3, r5
 800bddc:	f7f4 fc0c 	bl	80005f8 <__aeabi_dmul>
 800bde0:	4602      	mov	r2, r0
 800bde2:	460b      	mov	r3, r1
 800bde4:	2000      	movs	r0, #0
 800bde6:	4948      	ldr	r1, [pc, #288]	@ (800bf08 <__ieee754_pow+0x418>)
 800bde8:	f7f4 fa4e 	bl	8000288 <__aeabi_dsub>
 800bdec:	4622      	mov	r2, r4
 800bdee:	4680      	mov	r8, r0
 800bdf0:	4689      	mov	r9, r1
 800bdf2:	462b      	mov	r3, r5
 800bdf4:	4620      	mov	r0, r4
 800bdf6:	4629      	mov	r1, r5
 800bdf8:	f7f4 fbfe 	bl	80005f8 <__aeabi_dmul>
 800bdfc:	4602      	mov	r2, r0
 800bdfe:	460b      	mov	r3, r1
 800be00:	4640      	mov	r0, r8
 800be02:	4649      	mov	r1, r9
 800be04:	f7f4 fbf8 	bl	80005f8 <__aeabi_dmul>
 800be08:	a33b      	add	r3, pc, #236	@ (adr r3, 800bef8 <__ieee754_pow+0x408>)
 800be0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800be0e:	f7f4 fbf3 	bl	80005f8 <__aeabi_dmul>
 800be12:	4602      	mov	r2, r0
 800be14:	460b      	mov	r3, r1
 800be16:	4650      	mov	r0, sl
 800be18:	4659      	mov	r1, fp
 800be1a:	f7f4 fa35 	bl	8000288 <__aeabi_dsub>
 800be1e:	4602      	mov	r2, r0
 800be20:	460b      	mov	r3, r1
 800be22:	4680      	mov	r8, r0
 800be24:	4689      	mov	r9, r1
 800be26:	4630      	mov	r0, r6
 800be28:	4639      	mov	r1, r7
 800be2a:	f7f4 fa2f 	bl	800028c <__adddf3>
 800be2e:	2400      	movs	r4, #0
 800be30:	4632      	mov	r2, r6
 800be32:	463b      	mov	r3, r7
 800be34:	4620      	mov	r0, r4
 800be36:	460d      	mov	r5, r1
 800be38:	f7f4 fa26 	bl	8000288 <__aeabi_dsub>
 800be3c:	4602      	mov	r2, r0
 800be3e:	460b      	mov	r3, r1
 800be40:	4640      	mov	r0, r8
 800be42:	4649      	mov	r1, r9
 800be44:	f7f4 fa20 	bl	8000288 <__aeabi_dsub>
 800be48:	e9dd 2300 	ldrd	r2, r3, [sp]
 800be4c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800be50:	2300      	movs	r3, #0
 800be52:	9304      	str	r3, [sp, #16]
 800be54:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800be58:	4606      	mov	r6, r0
 800be5a:	460f      	mov	r7, r1
 800be5c:	4652      	mov	r2, sl
 800be5e:	465b      	mov	r3, fp
 800be60:	e9dd 0100 	ldrd	r0, r1, [sp]
 800be64:	f7f4 fa10 	bl	8000288 <__aeabi_dsub>
 800be68:	4622      	mov	r2, r4
 800be6a:	462b      	mov	r3, r5
 800be6c:	f7f4 fbc4 	bl	80005f8 <__aeabi_dmul>
 800be70:	e9dd 2300 	ldrd	r2, r3, [sp]
 800be74:	4680      	mov	r8, r0
 800be76:	4689      	mov	r9, r1
 800be78:	4630      	mov	r0, r6
 800be7a:	4639      	mov	r1, r7
 800be7c:	f7f4 fbbc 	bl	80005f8 <__aeabi_dmul>
 800be80:	4602      	mov	r2, r0
 800be82:	460b      	mov	r3, r1
 800be84:	4640      	mov	r0, r8
 800be86:	4649      	mov	r1, r9
 800be88:	f7f4 fa00 	bl	800028c <__adddf3>
 800be8c:	4652      	mov	r2, sl
 800be8e:	465b      	mov	r3, fp
 800be90:	4606      	mov	r6, r0
 800be92:	460f      	mov	r7, r1
 800be94:	4620      	mov	r0, r4
 800be96:	4629      	mov	r1, r5
 800be98:	f7f4 fbae 	bl	80005f8 <__aeabi_dmul>
 800be9c:	460b      	mov	r3, r1
 800be9e:	4602      	mov	r2, r0
 800bea0:	4680      	mov	r8, r0
 800bea2:	4689      	mov	r9, r1
 800bea4:	4630      	mov	r0, r6
 800bea6:	4639      	mov	r1, r7
 800bea8:	f7f4 f9f0 	bl	800028c <__adddf3>
 800beac:	4b17      	ldr	r3, [pc, #92]	@ (800bf0c <__ieee754_pow+0x41c>)
 800beae:	4299      	cmp	r1, r3
 800beb0:	4604      	mov	r4, r0
 800beb2:	460d      	mov	r5, r1
 800beb4:	468a      	mov	sl, r1
 800beb6:	468b      	mov	fp, r1
 800beb8:	f340 82ef 	ble.w	800c49a <__ieee754_pow+0x9aa>
 800bebc:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 800bec0:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 800bec4:	4303      	orrs	r3, r0
 800bec6:	f000 81e8 	beq.w	800c29a <__ieee754_pow+0x7aa>
 800beca:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bece:	2200      	movs	r2, #0
 800bed0:	2300      	movs	r3, #0
 800bed2:	f7f4 fe03 	bl	8000adc <__aeabi_dcmplt>
 800bed6:	3800      	subs	r0, #0
 800bed8:	bf18      	it	ne
 800beda:	2001      	movne	r0, #1
 800bedc:	e710      	b.n	800bd00 <__ieee754_pow+0x210>
 800bede:	bf00      	nop
 800bee0:	60000000 	.word	0x60000000
 800bee4:	3ff71547 	.word	0x3ff71547
 800bee8:	f85ddf44 	.word	0xf85ddf44
 800beec:	3e54ae0b 	.word	0x3e54ae0b
 800bef0:	55555555 	.word	0x55555555
 800bef4:	3fd55555 	.word	0x3fd55555
 800bef8:	652b82fe 	.word	0x652b82fe
 800befc:	3ff71547 	.word	0x3ff71547
 800bf00:	3ff00000 	.word	0x3ff00000
 800bf04:	3fd00000 	.word	0x3fd00000
 800bf08:	3fe00000 	.word	0x3fe00000
 800bf0c:	408fffff 	.word	0x408fffff
 800bf10:	4bd5      	ldr	r3, [pc, #852]	@ (800c268 <__ieee754_pow+0x778>)
 800bf12:	402b      	ands	r3, r5
 800bf14:	2200      	movs	r2, #0
 800bf16:	b92b      	cbnz	r3, 800bf24 <__ieee754_pow+0x434>
 800bf18:	4bd4      	ldr	r3, [pc, #848]	@ (800c26c <__ieee754_pow+0x77c>)
 800bf1a:	f7f4 fb6d 	bl	80005f8 <__aeabi_dmul>
 800bf1e:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 800bf22:	468b      	mov	fp, r1
 800bf24:	ea4f 532b 	mov.w	r3, fp, asr #20
 800bf28:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800bf2c:	4413      	add	r3, r2
 800bf2e:	930a      	str	r3, [sp, #40]	@ 0x28
 800bf30:	4bcf      	ldr	r3, [pc, #828]	@ (800c270 <__ieee754_pow+0x780>)
 800bf32:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 800bf36:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 800bf3a:	459b      	cmp	fp, r3
 800bf3c:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800bf40:	dd08      	ble.n	800bf54 <__ieee754_pow+0x464>
 800bf42:	4bcc      	ldr	r3, [pc, #816]	@ (800c274 <__ieee754_pow+0x784>)
 800bf44:	459b      	cmp	fp, r3
 800bf46:	f340 81a5 	ble.w	800c294 <__ieee754_pow+0x7a4>
 800bf4a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800bf4c:	3301      	adds	r3, #1
 800bf4e:	930a      	str	r3, [sp, #40]	@ 0x28
 800bf50:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 800bf54:	f04f 0a00 	mov.w	sl, #0
 800bf58:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800bf5c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800bf5e:	4bc6      	ldr	r3, [pc, #792]	@ (800c278 <__ieee754_pow+0x788>)
 800bf60:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800bf64:	ed93 7b00 	vldr	d7, [r3]
 800bf68:	4629      	mov	r1, r5
 800bf6a:	ec53 2b17 	vmov	r2, r3, d7
 800bf6e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800bf72:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800bf76:	f7f4 f987 	bl	8000288 <__aeabi_dsub>
 800bf7a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800bf7e:	4606      	mov	r6, r0
 800bf80:	460f      	mov	r7, r1
 800bf82:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800bf86:	f7f4 f981 	bl	800028c <__adddf3>
 800bf8a:	4602      	mov	r2, r0
 800bf8c:	460b      	mov	r3, r1
 800bf8e:	2000      	movs	r0, #0
 800bf90:	49ba      	ldr	r1, [pc, #744]	@ (800c27c <__ieee754_pow+0x78c>)
 800bf92:	f7f4 fc5b 	bl	800084c <__aeabi_ddiv>
 800bf96:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 800bf9a:	4602      	mov	r2, r0
 800bf9c:	460b      	mov	r3, r1
 800bf9e:	4630      	mov	r0, r6
 800bfa0:	4639      	mov	r1, r7
 800bfa2:	f7f4 fb29 	bl	80005f8 <__aeabi_dmul>
 800bfa6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bfaa:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 800bfae:	106d      	asrs	r5, r5, #1
 800bfb0:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 800bfb4:	f04f 0b00 	mov.w	fp, #0
 800bfb8:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 800bfbc:	4661      	mov	r1, ip
 800bfbe:	2200      	movs	r2, #0
 800bfc0:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800bfc4:	4658      	mov	r0, fp
 800bfc6:	46e1      	mov	r9, ip
 800bfc8:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 800bfcc:	4614      	mov	r4, r2
 800bfce:	461d      	mov	r5, r3
 800bfd0:	f7f4 fb12 	bl	80005f8 <__aeabi_dmul>
 800bfd4:	4602      	mov	r2, r0
 800bfd6:	460b      	mov	r3, r1
 800bfd8:	4630      	mov	r0, r6
 800bfda:	4639      	mov	r1, r7
 800bfdc:	f7f4 f954 	bl	8000288 <__aeabi_dsub>
 800bfe0:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800bfe4:	4606      	mov	r6, r0
 800bfe6:	460f      	mov	r7, r1
 800bfe8:	4620      	mov	r0, r4
 800bfea:	4629      	mov	r1, r5
 800bfec:	f7f4 f94c 	bl	8000288 <__aeabi_dsub>
 800bff0:	4602      	mov	r2, r0
 800bff2:	460b      	mov	r3, r1
 800bff4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800bff8:	f7f4 f946 	bl	8000288 <__aeabi_dsub>
 800bffc:	465a      	mov	r2, fp
 800bffe:	464b      	mov	r3, r9
 800c000:	f7f4 fafa 	bl	80005f8 <__aeabi_dmul>
 800c004:	4602      	mov	r2, r0
 800c006:	460b      	mov	r3, r1
 800c008:	4630      	mov	r0, r6
 800c00a:	4639      	mov	r1, r7
 800c00c:	f7f4 f93c 	bl	8000288 <__aeabi_dsub>
 800c010:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800c014:	f7f4 faf0 	bl	80005f8 <__aeabi_dmul>
 800c018:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c01c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c020:	4610      	mov	r0, r2
 800c022:	4619      	mov	r1, r3
 800c024:	f7f4 fae8 	bl	80005f8 <__aeabi_dmul>
 800c028:	a37d      	add	r3, pc, #500	@ (adr r3, 800c220 <__ieee754_pow+0x730>)
 800c02a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c02e:	4604      	mov	r4, r0
 800c030:	460d      	mov	r5, r1
 800c032:	f7f4 fae1 	bl	80005f8 <__aeabi_dmul>
 800c036:	a37c      	add	r3, pc, #496	@ (adr r3, 800c228 <__ieee754_pow+0x738>)
 800c038:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c03c:	f7f4 f926 	bl	800028c <__adddf3>
 800c040:	4622      	mov	r2, r4
 800c042:	462b      	mov	r3, r5
 800c044:	f7f4 fad8 	bl	80005f8 <__aeabi_dmul>
 800c048:	a379      	add	r3, pc, #484	@ (adr r3, 800c230 <__ieee754_pow+0x740>)
 800c04a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c04e:	f7f4 f91d 	bl	800028c <__adddf3>
 800c052:	4622      	mov	r2, r4
 800c054:	462b      	mov	r3, r5
 800c056:	f7f4 facf 	bl	80005f8 <__aeabi_dmul>
 800c05a:	a377      	add	r3, pc, #476	@ (adr r3, 800c238 <__ieee754_pow+0x748>)
 800c05c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c060:	f7f4 f914 	bl	800028c <__adddf3>
 800c064:	4622      	mov	r2, r4
 800c066:	462b      	mov	r3, r5
 800c068:	f7f4 fac6 	bl	80005f8 <__aeabi_dmul>
 800c06c:	a374      	add	r3, pc, #464	@ (adr r3, 800c240 <__ieee754_pow+0x750>)
 800c06e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c072:	f7f4 f90b 	bl	800028c <__adddf3>
 800c076:	4622      	mov	r2, r4
 800c078:	462b      	mov	r3, r5
 800c07a:	f7f4 fabd 	bl	80005f8 <__aeabi_dmul>
 800c07e:	a372      	add	r3, pc, #456	@ (adr r3, 800c248 <__ieee754_pow+0x758>)
 800c080:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c084:	f7f4 f902 	bl	800028c <__adddf3>
 800c088:	4622      	mov	r2, r4
 800c08a:	4606      	mov	r6, r0
 800c08c:	460f      	mov	r7, r1
 800c08e:	462b      	mov	r3, r5
 800c090:	4620      	mov	r0, r4
 800c092:	4629      	mov	r1, r5
 800c094:	f7f4 fab0 	bl	80005f8 <__aeabi_dmul>
 800c098:	4602      	mov	r2, r0
 800c09a:	460b      	mov	r3, r1
 800c09c:	4630      	mov	r0, r6
 800c09e:	4639      	mov	r1, r7
 800c0a0:	f7f4 faaa 	bl	80005f8 <__aeabi_dmul>
 800c0a4:	465a      	mov	r2, fp
 800c0a6:	4604      	mov	r4, r0
 800c0a8:	460d      	mov	r5, r1
 800c0aa:	464b      	mov	r3, r9
 800c0ac:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c0b0:	f7f4 f8ec 	bl	800028c <__adddf3>
 800c0b4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c0b8:	f7f4 fa9e 	bl	80005f8 <__aeabi_dmul>
 800c0bc:	4622      	mov	r2, r4
 800c0be:	462b      	mov	r3, r5
 800c0c0:	f7f4 f8e4 	bl	800028c <__adddf3>
 800c0c4:	465a      	mov	r2, fp
 800c0c6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800c0ca:	464b      	mov	r3, r9
 800c0cc:	4658      	mov	r0, fp
 800c0ce:	4649      	mov	r1, r9
 800c0d0:	f7f4 fa92 	bl	80005f8 <__aeabi_dmul>
 800c0d4:	4b6a      	ldr	r3, [pc, #424]	@ (800c280 <__ieee754_pow+0x790>)
 800c0d6:	2200      	movs	r2, #0
 800c0d8:	4606      	mov	r6, r0
 800c0da:	460f      	mov	r7, r1
 800c0dc:	f7f4 f8d6 	bl	800028c <__adddf3>
 800c0e0:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800c0e4:	f7f4 f8d2 	bl	800028c <__adddf3>
 800c0e8:	46d8      	mov	r8, fp
 800c0ea:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 800c0ee:	460d      	mov	r5, r1
 800c0f0:	465a      	mov	r2, fp
 800c0f2:	460b      	mov	r3, r1
 800c0f4:	4640      	mov	r0, r8
 800c0f6:	4649      	mov	r1, r9
 800c0f8:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 800c0fc:	f7f4 fa7c 	bl	80005f8 <__aeabi_dmul>
 800c100:	465c      	mov	r4, fp
 800c102:	4680      	mov	r8, r0
 800c104:	4689      	mov	r9, r1
 800c106:	4b5e      	ldr	r3, [pc, #376]	@ (800c280 <__ieee754_pow+0x790>)
 800c108:	2200      	movs	r2, #0
 800c10a:	4620      	mov	r0, r4
 800c10c:	4629      	mov	r1, r5
 800c10e:	f7f4 f8bb 	bl	8000288 <__aeabi_dsub>
 800c112:	4632      	mov	r2, r6
 800c114:	463b      	mov	r3, r7
 800c116:	f7f4 f8b7 	bl	8000288 <__aeabi_dsub>
 800c11a:	4602      	mov	r2, r0
 800c11c:	460b      	mov	r3, r1
 800c11e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c122:	f7f4 f8b1 	bl	8000288 <__aeabi_dsub>
 800c126:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c12a:	f7f4 fa65 	bl	80005f8 <__aeabi_dmul>
 800c12e:	4622      	mov	r2, r4
 800c130:	4606      	mov	r6, r0
 800c132:	460f      	mov	r7, r1
 800c134:	462b      	mov	r3, r5
 800c136:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c13a:	f7f4 fa5d 	bl	80005f8 <__aeabi_dmul>
 800c13e:	4602      	mov	r2, r0
 800c140:	460b      	mov	r3, r1
 800c142:	4630      	mov	r0, r6
 800c144:	4639      	mov	r1, r7
 800c146:	f7f4 f8a1 	bl	800028c <__adddf3>
 800c14a:	4606      	mov	r6, r0
 800c14c:	460f      	mov	r7, r1
 800c14e:	4602      	mov	r2, r0
 800c150:	460b      	mov	r3, r1
 800c152:	4640      	mov	r0, r8
 800c154:	4649      	mov	r1, r9
 800c156:	f7f4 f899 	bl	800028c <__adddf3>
 800c15a:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 800c15e:	a33c      	add	r3, pc, #240	@ (adr r3, 800c250 <__ieee754_pow+0x760>)
 800c160:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c164:	4658      	mov	r0, fp
 800c166:	e9cd bc08 	strd	fp, ip, [sp, #32]
 800c16a:	460d      	mov	r5, r1
 800c16c:	f7f4 fa44 	bl	80005f8 <__aeabi_dmul>
 800c170:	465c      	mov	r4, fp
 800c172:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800c176:	4642      	mov	r2, r8
 800c178:	464b      	mov	r3, r9
 800c17a:	4620      	mov	r0, r4
 800c17c:	4629      	mov	r1, r5
 800c17e:	f7f4 f883 	bl	8000288 <__aeabi_dsub>
 800c182:	4602      	mov	r2, r0
 800c184:	460b      	mov	r3, r1
 800c186:	4630      	mov	r0, r6
 800c188:	4639      	mov	r1, r7
 800c18a:	f7f4 f87d 	bl	8000288 <__aeabi_dsub>
 800c18e:	a332      	add	r3, pc, #200	@ (adr r3, 800c258 <__ieee754_pow+0x768>)
 800c190:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c194:	f7f4 fa30 	bl	80005f8 <__aeabi_dmul>
 800c198:	a331      	add	r3, pc, #196	@ (adr r3, 800c260 <__ieee754_pow+0x770>)
 800c19a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c19e:	4606      	mov	r6, r0
 800c1a0:	460f      	mov	r7, r1
 800c1a2:	4620      	mov	r0, r4
 800c1a4:	4629      	mov	r1, r5
 800c1a6:	f7f4 fa27 	bl	80005f8 <__aeabi_dmul>
 800c1aa:	4602      	mov	r2, r0
 800c1ac:	460b      	mov	r3, r1
 800c1ae:	4630      	mov	r0, r6
 800c1b0:	4639      	mov	r1, r7
 800c1b2:	f7f4 f86b 	bl	800028c <__adddf3>
 800c1b6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800c1b8:	4b32      	ldr	r3, [pc, #200]	@ (800c284 <__ieee754_pow+0x794>)
 800c1ba:	4413      	add	r3, r2
 800c1bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c1c0:	f7f4 f864 	bl	800028c <__adddf3>
 800c1c4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800c1c8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800c1ca:	f7f4 f9ab 	bl	8000524 <__aeabi_i2d>
 800c1ce:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800c1d0:	4b2d      	ldr	r3, [pc, #180]	@ (800c288 <__ieee754_pow+0x798>)
 800c1d2:	4413      	add	r3, r2
 800c1d4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c1d8:	4606      	mov	r6, r0
 800c1da:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800c1de:	460f      	mov	r7, r1
 800c1e0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800c1e4:	f7f4 f852 	bl	800028c <__adddf3>
 800c1e8:	4642      	mov	r2, r8
 800c1ea:	464b      	mov	r3, r9
 800c1ec:	f7f4 f84e 	bl	800028c <__adddf3>
 800c1f0:	4632      	mov	r2, r6
 800c1f2:	463b      	mov	r3, r7
 800c1f4:	f7f4 f84a 	bl	800028c <__adddf3>
 800c1f8:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 800c1fc:	4632      	mov	r2, r6
 800c1fe:	463b      	mov	r3, r7
 800c200:	4658      	mov	r0, fp
 800c202:	460d      	mov	r5, r1
 800c204:	f7f4 f840 	bl	8000288 <__aeabi_dsub>
 800c208:	4642      	mov	r2, r8
 800c20a:	464b      	mov	r3, r9
 800c20c:	f7f4 f83c 	bl	8000288 <__aeabi_dsub>
 800c210:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800c214:	f7f4 f838 	bl	8000288 <__aeabi_dsub>
 800c218:	465c      	mov	r4, fp
 800c21a:	4602      	mov	r2, r0
 800c21c:	e036      	b.n	800c28c <__ieee754_pow+0x79c>
 800c21e:	bf00      	nop
 800c220:	4a454eef 	.word	0x4a454eef
 800c224:	3fca7e28 	.word	0x3fca7e28
 800c228:	93c9db65 	.word	0x93c9db65
 800c22c:	3fcd864a 	.word	0x3fcd864a
 800c230:	a91d4101 	.word	0xa91d4101
 800c234:	3fd17460 	.word	0x3fd17460
 800c238:	518f264d 	.word	0x518f264d
 800c23c:	3fd55555 	.word	0x3fd55555
 800c240:	db6fabff 	.word	0xdb6fabff
 800c244:	3fdb6db6 	.word	0x3fdb6db6
 800c248:	33333303 	.word	0x33333303
 800c24c:	3fe33333 	.word	0x3fe33333
 800c250:	e0000000 	.word	0xe0000000
 800c254:	3feec709 	.word	0x3feec709
 800c258:	dc3a03fd 	.word	0xdc3a03fd
 800c25c:	3feec709 	.word	0x3feec709
 800c260:	145b01f5 	.word	0x145b01f5
 800c264:	be3e2fe0 	.word	0xbe3e2fe0
 800c268:	7ff00000 	.word	0x7ff00000
 800c26c:	43400000 	.word	0x43400000
 800c270:	0003988e 	.word	0x0003988e
 800c274:	000bb679 	.word	0x000bb679
 800c278:	0800d3a0 	.word	0x0800d3a0
 800c27c:	3ff00000 	.word	0x3ff00000
 800c280:	40080000 	.word	0x40080000
 800c284:	0800d380 	.word	0x0800d380
 800c288:	0800d390 	.word	0x0800d390
 800c28c:	460b      	mov	r3, r1
 800c28e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c292:	e5d7      	b.n	800be44 <__ieee754_pow+0x354>
 800c294:	f04f 0a01 	mov.w	sl, #1
 800c298:	e65e      	b.n	800bf58 <__ieee754_pow+0x468>
 800c29a:	a3b4      	add	r3, pc, #720	@ (adr r3, 800c56c <__ieee754_pow+0xa7c>)
 800c29c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c2a0:	4630      	mov	r0, r6
 800c2a2:	4639      	mov	r1, r7
 800c2a4:	f7f3 fff2 	bl	800028c <__adddf3>
 800c2a8:	4642      	mov	r2, r8
 800c2aa:	e9cd 0100 	strd	r0, r1, [sp]
 800c2ae:	464b      	mov	r3, r9
 800c2b0:	4620      	mov	r0, r4
 800c2b2:	4629      	mov	r1, r5
 800c2b4:	f7f3 ffe8 	bl	8000288 <__aeabi_dsub>
 800c2b8:	4602      	mov	r2, r0
 800c2ba:	460b      	mov	r3, r1
 800c2bc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c2c0:	f7f4 fc2a 	bl	8000b18 <__aeabi_dcmpgt>
 800c2c4:	2800      	cmp	r0, #0
 800c2c6:	f47f ae00 	bne.w	800beca <__ieee754_pow+0x3da>
 800c2ca:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 800c2ce:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800c2d2:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 800c2d6:	fa43 fa0a 	asr.w	sl, r3, sl
 800c2da:	44da      	add	sl, fp
 800c2dc:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800c2e0:	489d      	ldr	r0, [pc, #628]	@ (800c558 <__ieee754_pow+0xa68>)
 800c2e2:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 800c2e6:	4108      	asrs	r0, r1
 800c2e8:	ea00 030a 	and.w	r3, r0, sl
 800c2ec:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800c2f0:	f1c1 0114 	rsb	r1, r1, #20
 800c2f4:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 800c2f8:	fa4a fa01 	asr.w	sl, sl, r1
 800c2fc:	f1bb 0f00 	cmp.w	fp, #0
 800c300:	4640      	mov	r0, r8
 800c302:	4649      	mov	r1, r9
 800c304:	f04f 0200 	mov.w	r2, #0
 800c308:	bfb8      	it	lt
 800c30a:	f1ca 0a00 	rsblt	sl, sl, #0
 800c30e:	f7f3 ffbb 	bl	8000288 <__aeabi_dsub>
 800c312:	4680      	mov	r8, r0
 800c314:	4689      	mov	r9, r1
 800c316:	4632      	mov	r2, r6
 800c318:	463b      	mov	r3, r7
 800c31a:	4640      	mov	r0, r8
 800c31c:	4649      	mov	r1, r9
 800c31e:	f7f3 ffb5 	bl	800028c <__adddf3>
 800c322:	2400      	movs	r4, #0
 800c324:	a37c      	add	r3, pc, #496	@ (adr r3, 800c518 <__ieee754_pow+0xa28>)
 800c326:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c32a:	4620      	mov	r0, r4
 800c32c:	460d      	mov	r5, r1
 800c32e:	f7f4 f963 	bl	80005f8 <__aeabi_dmul>
 800c332:	4642      	mov	r2, r8
 800c334:	e9cd 0100 	strd	r0, r1, [sp]
 800c338:	464b      	mov	r3, r9
 800c33a:	4620      	mov	r0, r4
 800c33c:	4629      	mov	r1, r5
 800c33e:	f7f3 ffa3 	bl	8000288 <__aeabi_dsub>
 800c342:	4602      	mov	r2, r0
 800c344:	460b      	mov	r3, r1
 800c346:	4630      	mov	r0, r6
 800c348:	4639      	mov	r1, r7
 800c34a:	f7f3 ff9d 	bl	8000288 <__aeabi_dsub>
 800c34e:	a374      	add	r3, pc, #464	@ (adr r3, 800c520 <__ieee754_pow+0xa30>)
 800c350:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c354:	f7f4 f950 	bl	80005f8 <__aeabi_dmul>
 800c358:	a373      	add	r3, pc, #460	@ (adr r3, 800c528 <__ieee754_pow+0xa38>)
 800c35a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c35e:	4680      	mov	r8, r0
 800c360:	4689      	mov	r9, r1
 800c362:	4620      	mov	r0, r4
 800c364:	4629      	mov	r1, r5
 800c366:	f7f4 f947 	bl	80005f8 <__aeabi_dmul>
 800c36a:	4602      	mov	r2, r0
 800c36c:	460b      	mov	r3, r1
 800c36e:	4640      	mov	r0, r8
 800c370:	4649      	mov	r1, r9
 800c372:	f7f3 ff8b 	bl	800028c <__adddf3>
 800c376:	4604      	mov	r4, r0
 800c378:	460d      	mov	r5, r1
 800c37a:	4602      	mov	r2, r0
 800c37c:	460b      	mov	r3, r1
 800c37e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c382:	f7f3 ff83 	bl	800028c <__adddf3>
 800c386:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c38a:	4680      	mov	r8, r0
 800c38c:	4689      	mov	r9, r1
 800c38e:	f7f3 ff7b 	bl	8000288 <__aeabi_dsub>
 800c392:	4602      	mov	r2, r0
 800c394:	460b      	mov	r3, r1
 800c396:	4620      	mov	r0, r4
 800c398:	4629      	mov	r1, r5
 800c39a:	f7f3 ff75 	bl	8000288 <__aeabi_dsub>
 800c39e:	4642      	mov	r2, r8
 800c3a0:	4606      	mov	r6, r0
 800c3a2:	460f      	mov	r7, r1
 800c3a4:	464b      	mov	r3, r9
 800c3a6:	4640      	mov	r0, r8
 800c3a8:	4649      	mov	r1, r9
 800c3aa:	f7f4 f925 	bl	80005f8 <__aeabi_dmul>
 800c3ae:	a360      	add	r3, pc, #384	@ (adr r3, 800c530 <__ieee754_pow+0xa40>)
 800c3b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3b4:	4604      	mov	r4, r0
 800c3b6:	460d      	mov	r5, r1
 800c3b8:	f7f4 f91e 	bl	80005f8 <__aeabi_dmul>
 800c3bc:	a35e      	add	r3, pc, #376	@ (adr r3, 800c538 <__ieee754_pow+0xa48>)
 800c3be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3c2:	f7f3 ff61 	bl	8000288 <__aeabi_dsub>
 800c3c6:	4622      	mov	r2, r4
 800c3c8:	462b      	mov	r3, r5
 800c3ca:	f7f4 f915 	bl	80005f8 <__aeabi_dmul>
 800c3ce:	a35c      	add	r3, pc, #368	@ (adr r3, 800c540 <__ieee754_pow+0xa50>)
 800c3d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3d4:	f7f3 ff5a 	bl	800028c <__adddf3>
 800c3d8:	4622      	mov	r2, r4
 800c3da:	462b      	mov	r3, r5
 800c3dc:	f7f4 f90c 	bl	80005f8 <__aeabi_dmul>
 800c3e0:	a359      	add	r3, pc, #356	@ (adr r3, 800c548 <__ieee754_pow+0xa58>)
 800c3e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3e6:	f7f3 ff4f 	bl	8000288 <__aeabi_dsub>
 800c3ea:	4622      	mov	r2, r4
 800c3ec:	462b      	mov	r3, r5
 800c3ee:	f7f4 f903 	bl	80005f8 <__aeabi_dmul>
 800c3f2:	a357      	add	r3, pc, #348	@ (adr r3, 800c550 <__ieee754_pow+0xa60>)
 800c3f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c3f8:	f7f3 ff48 	bl	800028c <__adddf3>
 800c3fc:	4622      	mov	r2, r4
 800c3fe:	462b      	mov	r3, r5
 800c400:	f7f4 f8fa 	bl	80005f8 <__aeabi_dmul>
 800c404:	4602      	mov	r2, r0
 800c406:	460b      	mov	r3, r1
 800c408:	4640      	mov	r0, r8
 800c40a:	4649      	mov	r1, r9
 800c40c:	f7f3 ff3c 	bl	8000288 <__aeabi_dsub>
 800c410:	4604      	mov	r4, r0
 800c412:	460d      	mov	r5, r1
 800c414:	4602      	mov	r2, r0
 800c416:	460b      	mov	r3, r1
 800c418:	4640      	mov	r0, r8
 800c41a:	4649      	mov	r1, r9
 800c41c:	f7f4 f8ec 	bl	80005f8 <__aeabi_dmul>
 800c420:	2200      	movs	r2, #0
 800c422:	e9cd 0100 	strd	r0, r1, [sp]
 800c426:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800c42a:	4620      	mov	r0, r4
 800c42c:	4629      	mov	r1, r5
 800c42e:	f7f3 ff2b 	bl	8000288 <__aeabi_dsub>
 800c432:	4602      	mov	r2, r0
 800c434:	460b      	mov	r3, r1
 800c436:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c43a:	f7f4 fa07 	bl	800084c <__aeabi_ddiv>
 800c43e:	4632      	mov	r2, r6
 800c440:	4604      	mov	r4, r0
 800c442:	460d      	mov	r5, r1
 800c444:	463b      	mov	r3, r7
 800c446:	4640      	mov	r0, r8
 800c448:	4649      	mov	r1, r9
 800c44a:	f7f4 f8d5 	bl	80005f8 <__aeabi_dmul>
 800c44e:	4632      	mov	r2, r6
 800c450:	463b      	mov	r3, r7
 800c452:	f7f3 ff1b 	bl	800028c <__adddf3>
 800c456:	4602      	mov	r2, r0
 800c458:	460b      	mov	r3, r1
 800c45a:	4620      	mov	r0, r4
 800c45c:	4629      	mov	r1, r5
 800c45e:	f7f3 ff13 	bl	8000288 <__aeabi_dsub>
 800c462:	4642      	mov	r2, r8
 800c464:	464b      	mov	r3, r9
 800c466:	f7f3 ff0f 	bl	8000288 <__aeabi_dsub>
 800c46a:	460b      	mov	r3, r1
 800c46c:	4602      	mov	r2, r0
 800c46e:	493b      	ldr	r1, [pc, #236]	@ (800c55c <__ieee754_pow+0xa6c>)
 800c470:	2000      	movs	r0, #0
 800c472:	f7f3 ff09 	bl	8000288 <__aeabi_dsub>
 800c476:	ec41 0b10 	vmov	d0, r0, r1
 800c47a:	ee10 3a90 	vmov	r3, s1
 800c47e:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800c482:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800c486:	da30      	bge.n	800c4ea <__ieee754_pow+0x9fa>
 800c488:	4650      	mov	r0, sl
 800c48a:	f000 f875 	bl	800c578 <scalbn>
 800c48e:	ec51 0b10 	vmov	r0, r1, d0
 800c492:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c496:	f7ff bbd2 	b.w	800bc3e <__ieee754_pow+0x14e>
 800c49a:	4c31      	ldr	r4, [pc, #196]	@ (800c560 <__ieee754_pow+0xa70>)
 800c49c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800c4a0:	42a3      	cmp	r3, r4
 800c4a2:	d91a      	bls.n	800c4da <__ieee754_pow+0x9ea>
 800c4a4:	4b2f      	ldr	r3, [pc, #188]	@ (800c564 <__ieee754_pow+0xa74>)
 800c4a6:	440b      	add	r3, r1
 800c4a8:	4303      	orrs	r3, r0
 800c4aa:	d009      	beq.n	800c4c0 <__ieee754_pow+0x9d0>
 800c4ac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c4b0:	2200      	movs	r2, #0
 800c4b2:	2300      	movs	r3, #0
 800c4b4:	f7f4 fb12 	bl	8000adc <__aeabi_dcmplt>
 800c4b8:	3800      	subs	r0, #0
 800c4ba:	bf18      	it	ne
 800c4bc:	2001      	movne	r0, #1
 800c4be:	e42b      	b.n	800bd18 <__ieee754_pow+0x228>
 800c4c0:	4642      	mov	r2, r8
 800c4c2:	464b      	mov	r3, r9
 800c4c4:	f7f3 fee0 	bl	8000288 <__aeabi_dsub>
 800c4c8:	4632      	mov	r2, r6
 800c4ca:	463b      	mov	r3, r7
 800c4cc:	f7f4 fb1a 	bl	8000b04 <__aeabi_dcmpge>
 800c4d0:	2800      	cmp	r0, #0
 800c4d2:	d1eb      	bne.n	800c4ac <__ieee754_pow+0x9bc>
 800c4d4:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 800c574 <__ieee754_pow+0xa84>
 800c4d8:	e6f7      	b.n	800c2ca <__ieee754_pow+0x7da>
 800c4da:	469a      	mov	sl, r3
 800c4dc:	4b22      	ldr	r3, [pc, #136]	@ (800c568 <__ieee754_pow+0xa78>)
 800c4de:	459a      	cmp	sl, r3
 800c4e0:	f63f aef3 	bhi.w	800c2ca <__ieee754_pow+0x7da>
 800c4e4:	f8dd a010 	ldr.w	sl, [sp, #16]
 800c4e8:	e715      	b.n	800c316 <__ieee754_pow+0x826>
 800c4ea:	ec51 0b10 	vmov	r0, r1, d0
 800c4ee:	4619      	mov	r1, r3
 800c4f0:	e7cf      	b.n	800c492 <__ieee754_pow+0x9a2>
 800c4f2:	491a      	ldr	r1, [pc, #104]	@ (800c55c <__ieee754_pow+0xa6c>)
 800c4f4:	2000      	movs	r0, #0
 800c4f6:	f7ff bb18 	b.w	800bb2a <__ieee754_pow+0x3a>
 800c4fa:	2000      	movs	r0, #0
 800c4fc:	2100      	movs	r1, #0
 800c4fe:	f7ff bb14 	b.w	800bb2a <__ieee754_pow+0x3a>
 800c502:	4630      	mov	r0, r6
 800c504:	4639      	mov	r1, r7
 800c506:	f7ff bb10 	b.w	800bb2a <__ieee754_pow+0x3a>
 800c50a:	460c      	mov	r4, r1
 800c50c:	f7ff bb5e 	b.w	800bbcc <__ieee754_pow+0xdc>
 800c510:	2400      	movs	r4, #0
 800c512:	f7ff bb49 	b.w	800bba8 <__ieee754_pow+0xb8>
 800c516:	bf00      	nop
 800c518:	00000000 	.word	0x00000000
 800c51c:	3fe62e43 	.word	0x3fe62e43
 800c520:	fefa39ef 	.word	0xfefa39ef
 800c524:	3fe62e42 	.word	0x3fe62e42
 800c528:	0ca86c39 	.word	0x0ca86c39
 800c52c:	be205c61 	.word	0xbe205c61
 800c530:	72bea4d0 	.word	0x72bea4d0
 800c534:	3e663769 	.word	0x3e663769
 800c538:	c5d26bf1 	.word	0xc5d26bf1
 800c53c:	3ebbbd41 	.word	0x3ebbbd41
 800c540:	af25de2c 	.word	0xaf25de2c
 800c544:	3f11566a 	.word	0x3f11566a
 800c548:	16bebd93 	.word	0x16bebd93
 800c54c:	3f66c16c 	.word	0x3f66c16c
 800c550:	5555553e 	.word	0x5555553e
 800c554:	3fc55555 	.word	0x3fc55555
 800c558:	fff00000 	.word	0xfff00000
 800c55c:	3ff00000 	.word	0x3ff00000
 800c560:	4090cbff 	.word	0x4090cbff
 800c564:	3f6f3400 	.word	0x3f6f3400
 800c568:	3fe00000 	.word	0x3fe00000
 800c56c:	652b82fe 	.word	0x652b82fe
 800c570:	3c971547 	.word	0x3c971547
 800c574:	4090cc00 	.word	0x4090cc00

0800c578 <scalbn>:
 800c578:	b570      	push	{r4, r5, r6, lr}
 800c57a:	ec55 4b10 	vmov	r4, r5, d0
 800c57e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800c582:	4606      	mov	r6, r0
 800c584:	462b      	mov	r3, r5
 800c586:	b991      	cbnz	r1, 800c5ae <scalbn+0x36>
 800c588:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800c58c:	4323      	orrs	r3, r4
 800c58e:	d03d      	beq.n	800c60c <scalbn+0x94>
 800c590:	4b35      	ldr	r3, [pc, #212]	@ (800c668 <scalbn+0xf0>)
 800c592:	4620      	mov	r0, r4
 800c594:	4629      	mov	r1, r5
 800c596:	2200      	movs	r2, #0
 800c598:	f7f4 f82e 	bl	80005f8 <__aeabi_dmul>
 800c59c:	4b33      	ldr	r3, [pc, #204]	@ (800c66c <scalbn+0xf4>)
 800c59e:	429e      	cmp	r6, r3
 800c5a0:	4604      	mov	r4, r0
 800c5a2:	460d      	mov	r5, r1
 800c5a4:	da0f      	bge.n	800c5c6 <scalbn+0x4e>
 800c5a6:	a328      	add	r3, pc, #160	@ (adr r3, 800c648 <scalbn+0xd0>)
 800c5a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5ac:	e01e      	b.n	800c5ec <scalbn+0x74>
 800c5ae:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800c5b2:	4291      	cmp	r1, r2
 800c5b4:	d10b      	bne.n	800c5ce <scalbn+0x56>
 800c5b6:	4622      	mov	r2, r4
 800c5b8:	4620      	mov	r0, r4
 800c5ba:	4629      	mov	r1, r5
 800c5bc:	f7f3 fe66 	bl	800028c <__adddf3>
 800c5c0:	4604      	mov	r4, r0
 800c5c2:	460d      	mov	r5, r1
 800c5c4:	e022      	b.n	800c60c <scalbn+0x94>
 800c5c6:	460b      	mov	r3, r1
 800c5c8:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800c5cc:	3936      	subs	r1, #54	@ 0x36
 800c5ce:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800c5d2:	4296      	cmp	r6, r2
 800c5d4:	dd0d      	ble.n	800c5f2 <scalbn+0x7a>
 800c5d6:	2d00      	cmp	r5, #0
 800c5d8:	a11d      	add	r1, pc, #116	@ (adr r1, 800c650 <scalbn+0xd8>)
 800c5da:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c5de:	da02      	bge.n	800c5e6 <scalbn+0x6e>
 800c5e0:	a11d      	add	r1, pc, #116	@ (adr r1, 800c658 <scalbn+0xe0>)
 800c5e2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c5e6:	a31a      	add	r3, pc, #104	@ (adr r3, 800c650 <scalbn+0xd8>)
 800c5e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5ec:	f7f4 f804 	bl	80005f8 <__aeabi_dmul>
 800c5f0:	e7e6      	b.n	800c5c0 <scalbn+0x48>
 800c5f2:	1872      	adds	r2, r6, r1
 800c5f4:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800c5f8:	428a      	cmp	r2, r1
 800c5fa:	dcec      	bgt.n	800c5d6 <scalbn+0x5e>
 800c5fc:	2a00      	cmp	r2, #0
 800c5fe:	dd08      	ble.n	800c612 <scalbn+0x9a>
 800c600:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800c604:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800c608:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c60c:	ec45 4b10 	vmov	d0, r4, r5
 800c610:	bd70      	pop	{r4, r5, r6, pc}
 800c612:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800c616:	da08      	bge.n	800c62a <scalbn+0xb2>
 800c618:	2d00      	cmp	r5, #0
 800c61a:	a10b      	add	r1, pc, #44	@ (adr r1, 800c648 <scalbn+0xd0>)
 800c61c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c620:	dac1      	bge.n	800c5a6 <scalbn+0x2e>
 800c622:	a10f      	add	r1, pc, #60	@ (adr r1, 800c660 <scalbn+0xe8>)
 800c624:	e9d1 0100 	ldrd	r0, r1, [r1]
 800c628:	e7bd      	b.n	800c5a6 <scalbn+0x2e>
 800c62a:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800c62e:	3236      	adds	r2, #54	@ 0x36
 800c630:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800c634:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800c638:	4620      	mov	r0, r4
 800c63a:	4b0d      	ldr	r3, [pc, #52]	@ (800c670 <scalbn+0xf8>)
 800c63c:	4629      	mov	r1, r5
 800c63e:	2200      	movs	r2, #0
 800c640:	e7d4      	b.n	800c5ec <scalbn+0x74>
 800c642:	bf00      	nop
 800c644:	f3af 8000 	nop.w
 800c648:	c2f8f359 	.word	0xc2f8f359
 800c64c:	01a56e1f 	.word	0x01a56e1f
 800c650:	8800759c 	.word	0x8800759c
 800c654:	7e37e43c 	.word	0x7e37e43c
 800c658:	8800759c 	.word	0x8800759c
 800c65c:	fe37e43c 	.word	0xfe37e43c
 800c660:	c2f8f359 	.word	0xc2f8f359
 800c664:	81a56e1f 	.word	0x81a56e1f
 800c668:	43500000 	.word	0x43500000
 800c66c:	ffff3cb0 	.word	0xffff3cb0
 800c670:	3c900000 	.word	0x3c900000

0800c674 <with_errno>:
 800c674:	b510      	push	{r4, lr}
 800c676:	ed2d 8b02 	vpush	{d8}
 800c67a:	eeb0 8a40 	vmov.f32	s16, s0
 800c67e:	eef0 8a60 	vmov.f32	s17, s1
 800c682:	4604      	mov	r4, r0
 800c684:	f7fc fc22 	bl	8008ecc <__errno>
 800c688:	eeb0 0a48 	vmov.f32	s0, s16
 800c68c:	eef0 0a68 	vmov.f32	s1, s17
 800c690:	ecbd 8b02 	vpop	{d8}
 800c694:	6004      	str	r4, [r0, #0]
 800c696:	bd10      	pop	{r4, pc}

0800c698 <xflow>:
 800c698:	4603      	mov	r3, r0
 800c69a:	b507      	push	{r0, r1, r2, lr}
 800c69c:	ec51 0b10 	vmov	r0, r1, d0
 800c6a0:	b183      	cbz	r3, 800c6c4 <xflow+0x2c>
 800c6a2:	4602      	mov	r2, r0
 800c6a4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800c6a8:	e9cd 2300 	strd	r2, r3, [sp]
 800c6ac:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c6b0:	f7f3 ffa2 	bl	80005f8 <__aeabi_dmul>
 800c6b4:	ec41 0b10 	vmov	d0, r0, r1
 800c6b8:	2022      	movs	r0, #34	@ 0x22
 800c6ba:	b003      	add	sp, #12
 800c6bc:	f85d eb04 	ldr.w	lr, [sp], #4
 800c6c0:	f7ff bfd8 	b.w	800c674 <with_errno>
 800c6c4:	4602      	mov	r2, r0
 800c6c6:	460b      	mov	r3, r1
 800c6c8:	e7ee      	b.n	800c6a8 <xflow+0x10>
 800c6ca:	0000      	movs	r0, r0
 800c6cc:	0000      	movs	r0, r0
	...

0800c6d0 <__math_uflow>:
 800c6d0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800c6d8 <__math_uflow+0x8>
 800c6d4:	f7ff bfe0 	b.w	800c698 <xflow>
 800c6d8:	00000000 	.word	0x00000000
 800c6dc:	10000000 	.word	0x10000000

0800c6e0 <__math_oflow>:
 800c6e0:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800c6e8 <__math_oflow+0x8>
 800c6e4:	f7ff bfd8 	b.w	800c698 <xflow>
 800c6e8:	00000000 	.word	0x00000000
 800c6ec:	70000000 	.word	0x70000000

0800c6f0 <_init>:
 800c6f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c6f2:	bf00      	nop
 800c6f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c6f6:	bc08      	pop	{r3}
 800c6f8:	469e      	mov	lr, r3
 800c6fa:	4770      	bx	lr

0800c6fc <_fini>:
 800c6fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c6fe:	bf00      	nop
 800c700:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c702:	bc08      	pop	{r3}
 800c704:	469e      	mov	lr, r3
 800c706:	4770      	bx	lr
