
F405.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f118  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000cf0  0800f2a8  0800f2a8  000102a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800ff98  0800ff98  00011290  2**0
                  CONTENTS
  4 .ARM          00000008  0800ff98  0800ff98  00010f98  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800ffa0  0800ffa0  00011290  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800ffa0  0800ffa0  00010fa0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800ffa4  0800ffa4  00010fa4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000290  20000000  0800ffa8  00011000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00011290  2**0
                  CONTENTS
 10 .bss          00004f38  20000290  20000290  00011290  2**3
                  ALLOC
 11 ._user_heap_stack 00000600  200051c8  200051c8  00011290  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00011290  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a5bc  00000000  00000000  000112c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004329  00000000  00000000  0002b87c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001640  00000000  00000000  0002fba8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001112  00000000  00000000  000311e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000242e2  00000000  00000000  000322fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001ba8e  00000000  00000000  000565dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cf2d2  00000000  00000000  0007206a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0014133c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007234  00000000  00000000  00141380  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000058  00000000  00000000  001485b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000290 	.word	0x20000290
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800f290 	.word	0x0800f290

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000294 	.word	0x20000294
 80001cc:	0800f290 	.word	0x0800f290

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <strlen>:
 8000270:	4603      	mov	r3, r0
 8000272:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000276:	2a00      	cmp	r2, #0
 8000278:	d1fb      	bne.n	8000272 <strlen+0x2>
 800027a:	1a18      	subs	r0, r3, r0
 800027c:	3801      	subs	r0, #1
 800027e:	4770      	bx	lr

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	@ 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_frsub>:
 8000c48:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000c4c:	e002      	b.n	8000c54 <__addsf3>
 8000c4e:	bf00      	nop

08000c50 <__aeabi_fsub>:
 8000c50:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000c54 <__addsf3>:
 8000c54:	0042      	lsls	r2, r0, #1
 8000c56:	bf1f      	itttt	ne
 8000c58:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c5c:	ea92 0f03 	teqne	r2, r3
 8000c60:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c64:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c68:	d06a      	beq.n	8000d40 <__addsf3+0xec>
 8000c6a:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c6e:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c72:	bfc1      	itttt	gt
 8000c74:	18d2      	addgt	r2, r2, r3
 8000c76:	4041      	eorgt	r1, r0
 8000c78:	4048      	eorgt	r0, r1
 8000c7a:	4041      	eorgt	r1, r0
 8000c7c:	bfb8      	it	lt
 8000c7e:	425b      	neglt	r3, r3
 8000c80:	2b19      	cmp	r3, #25
 8000c82:	bf88      	it	hi
 8000c84:	4770      	bxhi	lr
 8000c86:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000c8a:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c8e:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000c92:	bf18      	it	ne
 8000c94:	4240      	negne	r0, r0
 8000c96:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000c9a:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000c9e:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000ca2:	bf18      	it	ne
 8000ca4:	4249      	negne	r1, r1
 8000ca6:	ea92 0f03 	teq	r2, r3
 8000caa:	d03f      	beq.n	8000d2c <__addsf3+0xd8>
 8000cac:	f1a2 0201 	sub.w	r2, r2, #1
 8000cb0:	fa41 fc03 	asr.w	ip, r1, r3
 8000cb4:	eb10 000c 	adds.w	r0, r0, ip
 8000cb8:	f1c3 0320 	rsb	r3, r3, #32
 8000cbc:	fa01 f103 	lsl.w	r1, r1, r3
 8000cc0:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000cc4:	d502      	bpl.n	8000ccc <__addsf3+0x78>
 8000cc6:	4249      	negs	r1, r1
 8000cc8:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000ccc:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000cd0:	d313      	bcc.n	8000cfa <__addsf3+0xa6>
 8000cd2:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000cd6:	d306      	bcc.n	8000ce6 <__addsf3+0x92>
 8000cd8:	0840      	lsrs	r0, r0, #1
 8000cda:	ea4f 0131 	mov.w	r1, r1, rrx
 8000cde:	f102 0201 	add.w	r2, r2, #1
 8000ce2:	2afe      	cmp	r2, #254	@ 0xfe
 8000ce4:	d251      	bcs.n	8000d8a <__addsf3+0x136>
 8000ce6:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000cea:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000cee:	bf08      	it	eq
 8000cf0:	f020 0001 	biceq.w	r0, r0, #1
 8000cf4:	ea40 0003 	orr.w	r0, r0, r3
 8000cf8:	4770      	bx	lr
 8000cfa:	0049      	lsls	r1, r1, #1
 8000cfc:	eb40 0000 	adc.w	r0, r0, r0
 8000d00:	3a01      	subs	r2, #1
 8000d02:	bf28      	it	cs
 8000d04:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000d08:	d2ed      	bcs.n	8000ce6 <__addsf3+0x92>
 8000d0a:	fab0 fc80 	clz	ip, r0
 8000d0e:	f1ac 0c08 	sub.w	ip, ip, #8
 8000d12:	ebb2 020c 	subs.w	r2, r2, ip
 8000d16:	fa00 f00c 	lsl.w	r0, r0, ip
 8000d1a:	bfaa      	itet	ge
 8000d1c:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000d20:	4252      	neglt	r2, r2
 8000d22:	4318      	orrge	r0, r3
 8000d24:	bfbc      	itt	lt
 8000d26:	40d0      	lsrlt	r0, r2
 8000d28:	4318      	orrlt	r0, r3
 8000d2a:	4770      	bx	lr
 8000d2c:	f092 0f00 	teq	r2, #0
 8000d30:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000d34:	bf06      	itte	eq
 8000d36:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000d3a:	3201      	addeq	r2, #1
 8000d3c:	3b01      	subne	r3, #1
 8000d3e:	e7b5      	b.n	8000cac <__addsf3+0x58>
 8000d40:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000d44:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000d48:	bf18      	it	ne
 8000d4a:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000d4e:	d021      	beq.n	8000d94 <__addsf3+0x140>
 8000d50:	ea92 0f03 	teq	r2, r3
 8000d54:	d004      	beq.n	8000d60 <__addsf3+0x10c>
 8000d56:	f092 0f00 	teq	r2, #0
 8000d5a:	bf08      	it	eq
 8000d5c:	4608      	moveq	r0, r1
 8000d5e:	4770      	bx	lr
 8000d60:	ea90 0f01 	teq	r0, r1
 8000d64:	bf1c      	itt	ne
 8000d66:	2000      	movne	r0, #0
 8000d68:	4770      	bxne	lr
 8000d6a:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000d6e:	d104      	bne.n	8000d7a <__addsf3+0x126>
 8000d70:	0040      	lsls	r0, r0, #1
 8000d72:	bf28      	it	cs
 8000d74:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000d78:	4770      	bx	lr
 8000d7a:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000d7e:	bf3c      	itt	cc
 8000d80:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000d84:	4770      	bxcc	lr
 8000d86:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000d8a:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000d8e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d92:	4770      	bx	lr
 8000d94:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d98:	bf16      	itet	ne
 8000d9a:	4608      	movne	r0, r1
 8000d9c:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000da0:	4601      	movne	r1, r0
 8000da2:	0242      	lsls	r2, r0, #9
 8000da4:	bf06      	itte	eq
 8000da6:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000daa:	ea90 0f01 	teqeq	r0, r1
 8000dae:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000db2:	4770      	bx	lr

08000db4 <__aeabi_ui2f>:
 8000db4:	f04f 0300 	mov.w	r3, #0
 8000db8:	e004      	b.n	8000dc4 <__aeabi_i2f+0x8>
 8000dba:	bf00      	nop

08000dbc <__aeabi_i2f>:
 8000dbc:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000dc0:	bf48      	it	mi
 8000dc2:	4240      	negmi	r0, r0
 8000dc4:	ea5f 0c00 	movs.w	ip, r0
 8000dc8:	bf08      	it	eq
 8000dca:	4770      	bxeq	lr
 8000dcc:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000dd0:	4601      	mov	r1, r0
 8000dd2:	f04f 0000 	mov.w	r0, #0
 8000dd6:	e01c      	b.n	8000e12 <__aeabi_l2f+0x2a>

08000dd8 <__aeabi_ul2f>:
 8000dd8:	ea50 0201 	orrs.w	r2, r0, r1
 8000ddc:	bf08      	it	eq
 8000dde:	4770      	bxeq	lr
 8000de0:	f04f 0300 	mov.w	r3, #0
 8000de4:	e00a      	b.n	8000dfc <__aeabi_l2f+0x14>
 8000de6:	bf00      	nop

08000de8 <__aeabi_l2f>:
 8000de8:	ea50 0201 	orrs.w	r2, r0, r1
 8000dec:	bf08      	it	eq
 8000dee:	4770      	bxeq	lr
 8000df0:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000df4:	d502      	bpl.n	8000dfc <__aeabi_l2f+0x14>
 8000df6:	4240      	negs	r0, r0
 8000df8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000dfc:	ea5f 0c01 	movs.w	ip, r1
 8000e00:	bf02      	ittt	eq
 8000e02:	4684      	moveq	ip, r0
 8000e04:	4601      	moveq	r1, r0
 8000e06:	2000      	moveq	r0, #0
 8000e08:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000e0c:	bf08      	it	eq
 8000e0e:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000e12:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000e16:	fabc f28c 	clz	r2, ip
 8000e1a:	3a08      	subs	r2, #8
 8000e1c:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000e20:	db10      	blt.n	8000e44 <__aeabi_l2f+0x5c>
 8000e22:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e26:	4463      	add	r3, ip
 8000e28:	fa00 fc02 	lsl.w	ip, r0, r2
 8000e2c:	f1c2 0220 	rsb	r2, r2, #32
 8000e30:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000e34:	fa20 f202 	lsr.w	r2, r0, r2
 8000e38:	eb43 0002 	adc.w	r0, r3, r2
 8000e3c:	bf08      	it	eq
 8000e3e:	f020 0001 	biceq.w	r0, r0, #1
 8000e42:	4770      	bx	lr
 8000e44:	f102 0220 	add.w	r2, r2, #32
 8000e48:	fa01 fc02 	lsl.w	ip, r1, r2
 8000e4c:	f1c2 0220 	rsb	r2, r2, #32
 8000e50:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000e54:	fa21 f202 	lsr.w	r2, r1, r2
 8000e58:	eb43 0002 	adc.w	r0, r3, r2
 8000e5c:	bf08      	it	eq
 8000e5e:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e62:	4770      	bx	lr

08000e64 <__aeabi_uldivmod>:
 8000e64:	b953      	cbnz	r3, 8000e7c <__aeabi_uldivmod+0x18>
 8000e66:	b94a      	cbnz	r2, 8000e7c <__aeabi_uldivmod+0x18>
 8000e68:	2900      	cmp	r1, #0
 8000e6a:	bf08      	it	eq
 8000e6c:	2800      	cmpeq	r0, #0
 8000e6e:	bf1c      	itt	ne
 8000e70:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 8000e74:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000e78:	f000 b988 	b.w	800118c <__aeabi_idiv0>
 8000e7c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000e80:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000e84:	f000 f824 	bl	8000ed0 <__udivmoddi4>
 8000e88:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000e8c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000e90:	b004      	add	sp, #16
 8000e92:	4770      	bx	lr

08000e94 <__aeabi_d2ulz>:
 8000e94:	b5d0      	push	{r4, r6, r7, lr}
 8000e96:	4b0c      	ldr	r3, [pc, #48]	@ (8000ec8 <__aeabi_d2ulz+0x34>)
 8000e98:	2200      	movs	r2, #0
 8000e9a:	4606      	mov	r6, r0
 8000e9c:	460f      	mov	r7, r1
 8000e9e:	f7ff fbab 	bl	80005f8 <__aeabi_dmul>
 8000ea2:	f000 f975 	bl	8001190 <__aeabi_d2uiz>
 8000ea6:	4604      	mov	r4, r0
 8000ea8:	f7ff fb2c 	bl	8000504 <__aeabi_ui2d>
 8000eac:	4b07      	ldr	r3, [pc, #28]	@ (8000ecc <__aeabi_d2ulz+0x38>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	f7ff fba2 	bl	80005f8 <__aeabi_dmul>
 8000eb4:	4602      	mov	r2, r0
 8000eb6:	460b      	mov	r3, r1
 8000eb8:	4630      	mov	r0, r6
 8000eba:	4639      	mov	r1, r7
 8000ebc:	f7ff f9e4 	bl	8000288 <__aeabi_dsub>
 8000ec0:	f000 f966 	bl	8001190 <__aeabi_d2uiz>
 8000ec4:	4621      	mov	r1, r4
 8000ec6:	bdd0      	pop	{r4, r6, r7, pc}
 8000ec8:	3df00000 	.word	0x3df00000
 8000ecc:	41f00000 	.word	0x41f00000

08000ed0 <__udivmoddi4>:
 8000ed0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000ed4:	9d08      	ldr	r5, [sp, #32]
 8000ed6:	460c      	mov	r4, r1
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d14e      	bne.n	8000f7a <__udivmoddi4+0xaa>
 8000edc:	4694      	mov	ip, r2
 8000ede:	458c      	cmp	ip, r1
 8000ee0:	4686      	mov	lr, r0
 8000ee2:	fab2 f282 	clz	r2, r2
 8000ee6:	d962      	bls.n	8000fae <__udivmoddi4+0xde>
 8000ee8:	b14a      	cbz	r2, 8000efe <__udivmoddi4+0x2e>
 8000eea:	f1c2 0320 	rsb	r3, r2, #32
 8000eee:	4091      	lsls	r1, r2
 8000ef0:	fa20 f303 	lsr.w	r3, r0, r3
 8000ef4:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ef8:	4319      	orrs	r1, r3
 8000efa:	fa00 fe02 	lsl.w	lr, r0, r2
 8000efe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f02:	fa1f f68c 	uxth.w	r6, ip
 8000f06:	fbb1 f4f7 	udiv	r4, r1, r7
 8000f0a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000f0e:	fb07 1114 	mls	r1, r7, r4, r1
 8000f12:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f16:	fb04 f106 	mul.w	r1, r4, r6
 8000f1a:	4299      	cmp	r1, r3
 8000f1c:	d90a      	bls.n	8000f34 <__udivmoddi4+0x64>
 8000f1e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f22:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000f26:	f080 8112 	bcs.w	800114e <__udivmoddi4+0x27e>
 8000f2a:	4299      	cmp	r1, r3
 8000f2c:	f240 810f 	bls.w	800114e <__udivmoddi4+0x27e>
 8000f30:	3c02      	subs	r4, #2
 8000f32:	4463      	add	r3, ip
 8000f34:	1a59      	subs	r1, r3, r1
 8000f36:	fa1f f38e 	uxth.w	r3, lr
 8000f3a:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f3e:	fb07 1110 	mls	r1, r7, r0, r1
 8000f42:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f46:	fb00 f606 	mul.w	r6, r0, r6
 8000f4a:	429e      	cmp	r6, r3
 8000f4c:	d90a      	bls.n	8000f64 <__udivmoddi4+0x94>
 8000f4e:	eb1c 0303 	adds.w	r3, ip, r3
 8000f52:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000f56:	f080 80fc 	bcs.w	8001152 <__udivmoddi4+0x282>
 8000f5a:	429e      	cmp	r6, r3
 8000f5c:	f240 80f9 	bls.w	8001152 <__udivmoddi4+0x282>
 8000f60:	4463      	add	r3, ip
 8000f62:	3802      	subs	r0, #2
 8000f64:	1b9b      	subs	r3, r3, r6
 8000f66:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000f6a:	2100      	movs	r1, #0
 8000f6c:	b11d      	cbz	r5, 8000f76 <__udivmoddi4+0xa6>
 8000f6e:	40d3      	lsrs	r3, r2
 8000f70:	2200      	movs	r2, #0
 8000f72:	e9c5 3200 	strd	r3, r2, [r5]
 8000f76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f7a:	428b      	cmp	r3, r1
 8000f7c:	d905      	bls.n	8000f8a <__udivmoddi4+0xba>
 8000f7e:	b10d      	cbz	r5, 8000f84 <__udivmoddi4+0xb4>
 8000f80:	e9c5 0100 	strd	r0, r1, [r5]
 8000f84:	2100      	movs	r1, #0
 8000f86:	4608      	mov	r0, r1
 8000f88:	e7f5      	b.n	8000f76 <__udivmoddi4+0xa6>
 8000f8a:	fab3 f183 	clz	r1, r3
 8000f8e:	2900      	cmp	r1, #0
 8000f90:	d146      	bne.n	8001020 <__udivmoddi4+0x150>
 8000f92:	42a3      	cmp	r3, r4
 8000f94:	d302      	bcc.n	8000f9c <__udivmoddi4+0xcc>
 8000f96:	4290      	cmp	r0, r2
 8000f98:	f0c0 80f0 	bcc.w	800117c <__udivmoddi4+0x2ac>
 8000f9c:	1a86      	subs	r6, r0, r2
 8000f9e:	eb64 0303 	sbc.w	r3, r4, r3
 8000fa2:	2001      	movs	r0, #1
 8000fa4:	2d00      	cmp	r5, #0
 8000fa6:	d0e6      	beq.n	8000f76 <__udivmoddi4+0xa6>
 8000fa8:	e9c5 6300 	strd	r6, r3, [r5]
 8000fac:	e7e3      	b.n	8000f76 <__udivmoddi4+0xa6>
 8000fae:	2a00      	cmp	r2, #0
 8000fb0:	f040 8090 	bne.w	80010d4 <__udivmoddi4+0x204>
 8000fb4:	eba1 040c 	sub.w	r4, r1, ip
 8000fb8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000fbc:	fa1f f78c 	uxth.w	r7, ip
 8000fc0:	2101      	movs	r1, #1
 8000fc2:	fbb4 f6f8 	udiv	r6, r4, r8
 8000fc6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000fca:	fb08 4416 	mls	r4, r8, r6, r4
 8000fce:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000fd2:	fb07 f006 	mul.w	r0, r7, r6
 8000fd6:	4298      	cmp	r0, r3
 8000fd8:	d908      	bls.n	8000fec <__udivmoddi4+0x11c>
 8000fda:	eb1c 0303 	adds.w	r3, ip, r3
 8000fde:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 8000fe2:	d202      	bcs.n	8000fea <__udivmoddi4+0x11a>
 8000fe4:	4298      	cmp	r0, r3
 8000fe6:	f200 80cd 	bhi.w	8001184 <__udivmoddi4+0x2b4>
 8000fea:	4626      	mov	r6, r4
 8000fec:	1a1c      	subs	r4, r3, r0
 8000fee:	fa1f f38e 	uxth.w	r3, lr
 8000ff2:	fbb4 f0f8 	udiv	r0, r4, r8
 8000ff6:	fb08 4410 	mls	r4, r8, r0, r4
 8000ffa:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000ffe:	fb00 f707 	mul.w	r7, r0, r7
 8001002:	429f      	cmp	r7, r3
 8001004:	d908      	bls.n	8001018 <__udivmoddi4+0x148>
 8001006:	eb1c 0303 	adds.w	r3, ip, r3
 800100a:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 800100e:	d202      	bcs.n	8001016 <__udivmoddi4+0x146>
 8001010:	429f      	cmp	r7, r3
 8001012:	f200 80b0 	bhi.w	8001176 <__udivmoddi4+0x2a6>
 8001016:	4620      	mov	r0, r4
 8001018:	1bdb      	subs	r3, r3, r7
 800101a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800101e:	e7a5      	b.n	8000f6c <__udivmoddi4+0x9c>
 8001020:	f1c1 0620 	rsb	r6, r1, #32
 8001024:	408b      	lsls	r3, r1
 8001026:	fa22 f706 	lsr.w	r7, r2, r6
 800102a:	431f      	orrs	r7, r3
 800102c:	fa20 fc06 	lsr.w	ip, r0, r6
 8001030:	fa04 f301 	lsl.w	r3, r4, r1
 8001034:	ea43 030c 	orr.w	r3, r3, ip
 8001038:	40f4      	lsrs	r4, r6
 800103a:	fa00 f801 	lsl.w	r8, r0, r1
 800103e:	0c38      	lsrs	r0, r7, #16
 8001040:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8001044:	fbb4 fef0 	udiv	lr, r4, r0
 8001048:	fa1f fc87 	uxth.w	ip, r7
 800104c:	fb00 441e 	mls	r4, r0, lr, r4
 8001050:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8001054:	fb0e f90c 	mul.w	r9, lr, ip
 8001058:	45a1      	cmp	r9, r4
 800105a:	fa02 f201 	lsl.w	r2, r2, r1
 800105e:	d90a      	bls.n	8001076 <__udivmoddi4+0x1a6>
 8001060:	193c      	adds	r4, r7, r4
 8001062:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 8001066:	f080 8084 	bcs.w	8001172 <__udivmoddi4+0x2a2>
 800106a:	45a1      	cmp	r9, r4
 800106c:	f240 8081 	bls.w	8001172 <__udivmoddi4+0x2a2>
 8001070:	f1ae 0e02 	sub.w	lr, lr, #2
 8001074:	443c      	add	r4, r7
 8001076:	eba4 0409 	sub.w	r4, r4, r9
 800107a:	fa1f f983 	uxth.w	r9, r3
 800107e:	fbb4 f3f0 	udiv	r3, r4, r0
 8001082:	fb00 4413 	mls	r4, r0, r3, r4
 8001086:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800108a:	fb03 fc0c 	mul.w	ip, r3, ip
 800108e:	45a4      	cmp	ip, r4
 8001090:	d907      	bls.n	80010a2 <__udivmoddi4+0x1d2>
 8001092:	193c      	adds	r4, r7, r4
 8001094:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8001098:	d267      	bcs.n	800116a <__udivmoddi4+0x29a>
 800109a:	45a4      	cmp	ip, r4
 800109c:	d965      	bls.n	800116a <__udivmoddi4+0x29a>
 800109e:	3b02      	subs	r3, #2
 80010a0:	443c      	add	r4, r7
 80010a2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80010a6:	fba0 9302 	umull	r9, r3, r0, r2
 80010aa:	eba4 040c 	sub.w	r4, r4, ip
 80010ae:	429c      	cmp	r4, r3
 80010b0:	46ce      	mov	lr, r9
 80010b2:	469c      	mov	ip, r3
 80010b4:	d351      	bcc.n	800115a <__udivmoddi4+0x28a>
 80010b6:	d04e      	beq.n	8001156 <__udivmoddi4+0x286>
 80010b8:	b155      	cbz	r5, 80010d0 <__udivmoddi4+0x200>
 80010ba:	ebb8 030e 	subs.w	r3, r8, lr
 80010be:	eb64 040c 	sbc.w	r4, r4, ip
 80010c2:	fa04 f606 	lsl.w	r6, r4, r6
 80010c6:	40cb      	lsrs	r3, r1
 80010c8:	431e      	orrs	r6, r3
 80010ca:	40cc      	lsrs	r4, r1
 80010cc:	e9c5 6400 	strd	r6, r4, [r5]
 80010d0:	2100      	movs	r1, #0
 80010d2:	e750      	b.n	8000f76 <__udivmoddi4+0xa6>
 80010d4:	f1c2 0320 	rsb	r3, r2, #32
 80010d8:	fa20 f103 	lsr.w	r1, r0, r3
 80010dc:	fa0c fc02 	lsl.w	ip, ip, r2
 80010e0:	fa24 f303 	lsr.w	r3, r4, r3
 80010e4:	4094      	lsls	r4, r2
 80010e6:	430c      	orrs	r4, r1
 80010e8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80010ec:	fa00 fe02 	lsl.w	lr, r0, r2
 80010f0:	fa1f f78c 	uxth.w	r7, ip
 80010f4:	fbb3 f0f8 	udiv	r0, r3, r8
 80010f8:	fb08 3110 	mls	r1, r8, r0, r3
 80010fc:	0c23      	lsrs	r3, r4, #16
 80010fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8001102:	fb00 f107 	mul.w	r1, r0, r7
 8001106:	4299      	cmp	r1, r3
 8001108:	d908      	bls.n	800111c <__udivmoddi4+0x24c>
 800110a:	eb1c 0303 	adds.w	r3, ip, r3
 800110e:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 8001112:	d22c      	bcs.n	800116e <__udivmoddi4+0x29e>
 8001114:	4299      	cmp	r1, r3
 8001116:	d92a      	bls.n	800116e <__udivmoddi4+0x29e>
 8001118:	3802      	subs	r0, #2
 800111a:	4463      	add	r3, ip
 800111c:	1a5b      	subs	r3, r3, r1
 800111e:	b2a4      	uxth	r4, r4
 8001120:	fbb3 f1f8 	udiv	r1, r3, r8
 8001124:	fb08 3311 	mls	r3, r8, r1, r3
 8001128:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800112c:	fb01 f307 	mul.w	r3, r1, r7
 8001130:	42a3      	cmp	r3, r4
 8001132:	d908      	bls.n	8001146 <__udivmoddi4+0x276>
 8001134:	eb1c 0404 	adds.w	r4, ip, r4
 8001138:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 800113c:	d213      	bcs.n	8001166 <__udivmoddi4+0x296>
 800113e:	42a3      	cmp	r3, r4
 8001140:	d911      	bls.n	8001166 <__udivmoddi4+0x296>
 8001142:	3902      	subs	r1, #2
 8001144:	4464      	add	r4, ip
 8001146:	1ae4      	subs	r4, r4, r3
 8001148:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800114c:	e739      	b.n	8000fc2 <__udivmoddi4+0xf2>
 800114e:	4604      	mov	r4, r0
 8001150:	e6f0      	b.n	8000f34 <__udivmoddi4+0x64>
 8001152:	4608      	mov	r0, r1
 8001154:	e706      	b.n	8000f64 <__udivmoddi4+0x94>
 8001156:	45c8      	cmp	r8, r9
 8001158:	d2ae      	bcs.n	80010b8 <__udivmoddi4+0x1e8>
 800115a:	ebb9 0e02 	subs.w	lr, r9, r2
 800115e:	eb63 0c07 	sbc.w	ip, r3, r7
 8001162:	3801      	subs	r0, #1
 8001164:	e7a8      	b.n	80010b8 <__udivmoddi4+0x1e8>
 8001166:	4631      	mov	r1, r6
 8001168:	e7ed      	b.n	8001146 <__udivmoddi4+0x276>
 800116a:	4603      	mov	r3, r0
 800116c:	e799      	b.n	80010a2 <__udivmoddi4+0x1d2>
 800116e:	4630      	mov	r0, r6
 8001170:	e7d4      	b.n	800111c <__udivmoddi4+0x24c>
 8001172:	46d6      	mov	lr, sl
 8001174:	e77f      	b.n	8001076 <__udivmoddi4+0x1a6>
 8001176:	4463      	add	r3, ip
 8001178:	3802      	subs	r0, #2
 800117a:	e74d      	b.n	8001018 <__udivmoddi4+0x148>
 800117c:	4606      	mov	r6, r0
 800117e:	4623      	mov	r3, r4
 8001180:	4608      	mov	r0, r1
 8001182:	e70f      	b.n	8000fa4 <__udivmoddi4+0xd4>
 8001184:	3e02      	subs	r6, #2
 8001186:	4463      	add	r3, ip
 8001188:	e730      	b.n	8000fec <__udivmoddi4+0x11c>
 800118a:	bf00      	nop

0800118c <__aeabi_idiv0>:
 800118c:	4770      	bx	lr
 800118e:	bf00      	nop

08001190 <__aeabi_d2uiz>:
 8001190:	004a      	lsls	r2, r1, #1
 8001192:	d211      	bcs.n	80011b8 <__aeabi_d2uiz+0x28>
 8001194:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8001198:	d211      	bcs.n	80011be <__aeabi_d2uiz+0x2e>
 800119a:	d50d      	bpl.n	80011b8 <__aeabi_d2uiz+0x28>
 800119c:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 80011a0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80011a4:	d40e      	bmi.n	80011c4 <__aeabi_d2uiz+0x34>
 80011a6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80011aa:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80011ae:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80011b2:	fa23 f002 	lsr.w	r0, r3, r2
 80011b6:	4770      	bx	lr
 80011b8:	f04f 0000 	mov.w	r0, #0
 80011bc:	4770      	bx	lr
 80011be:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80011c2:	d102      	bne.n	80011ca <__aeabi_d2uiz+0x3a>
 80011c4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80011c8:	4770      	bx	lr
 80011ca:	f04f 0000 	mov.w	r0, #0
 80011ce:	4770      	bx	lr

080011d0 <I2C_ReadOneByte>:
 //Raspberry 3B+ platform's default I2C device file



uint8_t I2C_ReadOneByte(uint8_t DevAddr, uint8_t RegAddr)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b088      	sub	sp, #32
 80011d4:	af04      	add	r7, sp, #16
 80011d6:	4603      	mov	r3, r0
 80011d8:	460a      	mov	r2, r1
 80011da:	71fb      	strb	r3, [r7, #7]
 80011dc:	4613      	mov	r3, r2
 80011de:	71bb      	strb	r3, [r7, #6]
  uint8_t u8Ret[1]={0};
 80011e0:	2300      	movs	r3, #0
 80011e2:	733b      	strb	r3, [r7, #12]
  HAL_I2C_Mem_Read(&hi2c1, DevAddr,RegAddr,I2C_MEMADD_SIZE_8BIT,u8Ret,1,1000);
 80011e4:	79fb      	ldrb	r3, [r7, #7]
 80011e6:	b299      	uxth	r1, r3
 80011e8:	79bb      	ldrb	r3, [r7, #6]
 80011ea:	b29a      	uxth	r2, r3
 80011ec:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80011f0:	9302      	str	r3, [sp, #8]
 80011f2:	2301      	movs	r3, #1
 80011f4:	9301      	str	r3, [sp, #4]
 80011f6:	f107 030c 	add.w	r3, r7, #12
 80011fa:	9300      	str	r3, [sp, #0]
 80011fc:	2301      	movs	r3, #1
 80011fe:	4804      	ldr	r0, [pc, #16]	@ (8001210 <I2C_ReadOneByte+0x40>)
 8001200:	f004 fb70 	bl	80058e4 <HAL_I2C_Mem_Read>
  return u8Ret[0];
 8001204:	7b3b      	ldrb	r3, [r7, #12]
}
 8001206:	4618      	mov	r0, r3
 8001208:	3710      	adds	r7, #16
 800120a:	46bd      	mov	sp, r7
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	20000608 	.word	0x20000608

08001214 <I2C_WriteOneByte>:

void I2C_WriteOneByte(uint8_t DevAddr, uint8_t RegAddr, uint8_t value)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b086      	sub	sp, #24
 8001218:	af02      	add	r7, sp, #8
 800121a:	4603      	mov	r3, r0
 800121c:	71fb      	strb	r3, [r7, #7]
 800121e:	460b      	mov	r3, r1
 8001220:	71bb      	strb	r3, [r7, #6]
 8001222:	4613      	mov	r3, r2
 8001224:	717b      	strb	r3, [r7, #5]
  uint8_t buf[2]={0};
 8001226:	2300      	movs	r3, #0
 8001228:	81bb      	strh	r3, [r7, #12]

  buf[0] = RegAddr;
 800122a:	79bb      	ldrb	r3, [r7, #6]
 800122c:	733b      	strb	r3, [r7, #12]
  buf[1] = value;
 800122e:	797b      	ldrb	r3, [r7, #5]
 8001230:	737b      	strb	r3, [r7, #13]
  HAL_I2C_Master_Transmit(&hi2c1,DevAddr,buf,2,100);
 8001232:	79fb      	ldrb	r3, [r7, #7]
 8001234:	b299      	uxth	r1, r3
 8001236:	f107 020c 	add.w	r2, r7, #12
 800123a:	2364      	movs	r3, #100	@ 0x64
 800123c:	9300      	str	r3, [sp, #0]
 800123e:	2302      	movs	r3, #2
 8001240:	4803      	ldr	r0, [pc, #12]	@ (8001250 <I2C_WriteOneByte+0x3c>)
 8001242:	f004 f957 	bl	80054f4 <HAL_I2C_Master_Transmit>

}
 8001246:	bf00      	nop
 8001248:	3710      	adds	r7, #16
 800124a:	46bd      	mov	sp, r7
 800124c:	bd80      	pop	{r7, pc}
 800124e:	bf00      	nop
 8001250:	20000608 	.word	0x20000608

08001254 <imuInit>:

float angles[3];
float q0, q1, q2, q3; 

void imuInit(IMU_EN_SENSOR_TYPE *penMotionSensorType, IMU_EN_SENSOR_TYPE *penPressureType)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	b084      	sub	sp, #16
 8001258:	af00      	add	r7, sp, #0
 800125a:	6078      	str	r0, [r7, #4]
 800125c:	6039      	str	r1, [r7, #0]
  bool bRet = false;
 800125e:	2300      	movs	r3, #0
 8001260:	73fb      	strb	r3, [r7, #15]
  
  bRet = icm20948Check();
 8001262:	f000 fedf 	bl	8002024 <icm20948Check>
 8001266:	4603      	mov	r3, r0
 8001268:	73fb      	strb	r3, [r7, #15]
  if( true == bRet)
 800126a:	7bfb      	ldrb	r3, [r7, #15]
 800126c:	2b01      	cmp	r3, #1
 800126e:	d105      	bne.n	800127c <imuInit+0x28>
  {
    *penMotionSensorType = IMU_EN_SENSOR_TYPE_ICM20948;
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	2201      	movs	r2, #1
 8001274:	701a      	strb	r2, [r3, #0]
    icm20948init();
 8001276:	f000 fe95 	bl	8001fa4 <icm20948init>
 800127a:	e002      	b.n	8001282 <imuInit+0x2e>
  }
  else
  {
    *penMotionSensorType = IMU_EN_SENSOR_TYPE_NULL;
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	2200      	movs	r2, #0
 8001280:	701a      	strb	r2, [r3, #0]
  }
  
  bRet = bmp280Check();
 8001282:	f001 fa4b 	bl	800271c <bmp280Check>
 8001286:	4603      	mov	r3, r0
 8001288:	73fb      	strb	r3, [r7, #15]
  if( true == bRet)
 800128a:	7bfb      	ldrb	r3, [r7, #15]
 800128c:	2b01      	cmp	r3, #1
 800128e:	d105      	bne.n	800129c <imuInit+0x48>
  {
    *penPressureType = IMU_EN_SENSOR_TYPE_BMP280;
 8001290:	683b      	ldr	r3, [r7, #0]
 8001292:	2202      	movs	r2, #2
 8001294:	701a      	strb	r2, [r3, #0]
    bmp280Init();
 8001296:	f001 fb5d 	bl	8002954 <bmp280Init>
 800129a:	e002      	b.n	80012a2 <imuInit+0x4e>
  }
  else
  {
    *penPressureType = IMU_EN_SENSOR_TYPE_NULL;
 800129c:	683b      	ldr	r3, [r7, #0]
 800129e:	2200      	movs	r2, #0
 80012a0:	701a      	strb	r2, [r3, #0]
  }

  q0 = 1.0f;  
 80012a2:	4b0a      	ldr	r3, [pc, #40]	@ (80012cc <imuInit+0x78>)
 80012a4:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 80012a8:	601a      	str	r2, [r3, #0]
  q1 = 0.0f;
 80012aa:	4b09      	ldr	r3, [pc, #36]	@ (80012d0 <imuInit+0x7c>)
 80012ac:	f04f 0200 	mov.w	r2, #0
 80012b0:	601a      	str	r2, [r3, #0]
  q2 = 0.0f;
 80012b2:	4b08      	ldr	r3, [pc, #32]	@ (80012d4 <imuInit+0x80>)
 80012b4:	f04f 0200 	mov.w	r2, #0
 80012b8:	601a      	str	r2, [r3, #0]
  q3 = 0.0f;
 80012ba:	4b07      	ldr	r3, [pc, #28]	@ (80012d8 <imuInit+0x84>)
 80012bc:	f04f 0200 	mov.w	r2, #0
 80012c0:	601a      	str	r2, [r3, #0]

  return;
 80012c2:	bf00      	nop
}
 80012c4:	3710      	adds	r7, #16
 80012c6:	46bd      	mov	sp, r7
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	bf00      	nop
 80012cc:	200002b4 	.word	0x200002b4
 80012d0:	200002b8 	.word	0x200002b8
 80012d4:	200002bc 	.word	0x200002bc
 80012d8:	200002c0 	.word	0x200002c0
 80012dc:	00000000 	.word	0x00000000

080012e0 <imuDataGet>:

void imuDataGet(IMU_ST_ANGLES_DATA *pstAngles, 
                IMU_ST_SENSOR_DATA *pstGyroRawData,
                IMU_ST_SENSOR_DATA *pstAccelRawData,
                IMU_ST_SENSOR_DATA *pstMagnRawData)
{
 80012e0:	b5b0      	push	{r4, r5, r7, lr}
 80012e2:	b094      	sub	sp, #80	@ 0x50
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	60f8      	str	r0, [r7, #12]
 80012e8:	60b9      	str	r1, [r7, #8]
 80012ea:	607a      	str	r2, [r7, #4]
 80012ec:	603b      	str	r3, [r7, #0]
  float MotionVal[9];
  int16_t s16Gyro[3], s16Accel[3], s16Magn[3];

  icm20948AccelRead(&s16Accel[0], &s16Accel[1], &s16Accel[2]);
 80012ee:	f107 031c 	add.w	r3, r7, #28
 80012f2:	1d1a      	adds	r2, r3, #4
 80012f4:	f107 031c 	add.w	r3, r7, #28
 80012f8:	1c99      	adds	r1, r3, #2
 80012fa:	f107 031c 	add.w	r3, r7, #28
 80012fe:	4618      	mov	r0, r3
 8001300:	f000 ff60 	bl	80021c4 <icm20948AccelRead>
  icm20948GyroRead(&s16Gyro[0], &s16Gyro[1], &s16Gyro[2]);
 8001304:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001308:	1d1a      	adds	r2, r3, #4
 800130a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800130e:	1c99      	adds	r1, r3, #2
 8001310:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001314:	4618      	mov	r0, r3
 8001316:	f000 fe99 	bl	800204c <icm20948GyroRead>
  icm20948MagRead(&s16Magn[0], &s16Magn[1], &s16Magn[2]);
 800131a:	f107 0314 	add.w	r3, r7, #20
 800131e:	1d1a      	adds	r2, r3, #4
 8001320:	f107 0314 	add.w	r3, r7, #20
 8001324:	1c99      	adds	r1, r3, #2
 8001326:	f107 0314 	add.w	r3, r7, #20
 800132a:	4618      	mov	r0, r3
 800132c:	f000 ffe4 	bl	80022f8 <icm20948MagRead>

  MotionVal[0]=s16Gyro[0]/32.8;
 8001330:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	@ 0x24
 8001334:	4618      	mov	r0, r3
 8001336:	f7ff f8f5 	bl	8000524 <__aeabi_i2d>
 800133a:	a3df      	add	r3, pc, #892	@ (adr r3, 80016b8 <imuDataGet+0x3d8>)
 800133c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001340:	f7ff fa84 	bl	800084c <__aeabi_ddiv>
 8001344:	4602      	mov	r2, r0
 8001346:	460b      	mov	r3, r1
 8001348:	4610      	mov	r0, r2
 800134a:	4619      	mov	r1, r3
 800134c:	f7ff fc2c 	bl	8000ba8 <__aeabi_d2f>
 8001350:	4603      	mov	r3, r0
 8001352:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MotionVal[1]=s16Gyro[1]/32.8;
 8001354:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	@ 0x26
 8001358:	4618      	mov	r0, r3
 800135a:	f7ff f8e3 	bl	8000524 <__aeabi_i2d>
 800135e:	a3d6      	add	r3, pc, #856	@ (adr r3, 80016b8 <imuDataGet+0x3d8>)
 8001360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001364:	f7ff fa72 	bl	800084c <__aeabi_ddiv>
 8001368:	4602      	mov	r2, r0
 800136a:	460b      	mov	r3, r1
 800136c:	4610      	mov	r0, r2
 800136e:	4619      	mov	r1, r3
 8001370:	f7ff fc1a 	bl	8000ba8 <__aeabi_d2f>
 8001374:	4603      	mov	r3, r0
 8001376:	633b      	str	r3, [r7, #48]	@ 0x30
  MotionVal[2]=s16Gyro[2]/32.8;
 8001378:	f9b7 3028 	ldrsh.w	r3, [r7, #40]	@ 0x28
 800137c:	4618      	mov	r0, r3
 800137e:	f7ff f8d1 	bl	8000524 <__aeabi_i2d>
 8001382:	a3cd      	add	r3, pc, #820	@ (adr r3, 80016b8 <imuDataGet+0x3d8>)
 8001384:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001388:	f7ff fa60 	bl	800084c <__aeabi_ddiv>
 800138c:	4602      	mov	r2, r0
 800138e:	460b      	mov	r3, r1
 8001390:	4610      	mov	r0, r2
 8001392:	4619      	mov	r1, r3
 8001394:	f7ff fc08 	bl	8000ba8 <__aeabi_d2f>
 8001398:	4603      	mov	r3, r0
 800139a:	637b      	str	r3, [r7, #52]	@ 0x34
  MotionVal[3]=s16Accel[0];
 800139c:	f9b7 301c 	ldrsh.w	r3, [r7, #28]
 80013a0:	ee07 3a90 	vmov	s15, r3
 80013a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013a8:	edc7 7a0e 	vstr	s15, [r7, #56]	@ 0x38
  MotionVal[4]=s16Accel[1];
 80013ac:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80013b0:	ee07 3a90 	vmov	s15, r3
 80013b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013b8:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
  MotionVal[5]=s16Accel[2];
 80013bc:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80013c0:	ee07 3a90 	vmov	s15, r3
 80013c4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013c8:	edc7 7a10 	vstr	s15, [r7, #64]	@ 0x40
  MotionVal[6]=s16Magn[0];
 80013cc:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80013d0:	ee07 3a90 	vmov	s15, r3
 80013d4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013d8:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
  MotionVal[7]=s16Magn[1];
 80013dc:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80013e0:	ee07 3a90 	vmov	s15, r3
 80013e4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013e8:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
  MotionVal[8]=s16Magn[2];
 80013ec:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80013f0:	ee07 3a90 	vmov	s15, r3
 80013f4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80013f8:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
  imuAHRSupdate((float)MotionVal[0] * 0.0175, (float)MotionVal[1] * 0.0175, (float)MotionVal[2] * 0.0175,
 80013fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80013fe:	4618      	mov	r0, r3
 8001400:	f7ff f8a2 	bl	8000548 <__aeabi_f2d>
 8001404:	a3ae      	add	r3, pc, #696	@ (adr r3, 80016c0 <imuDataGet+0x3e0>)
 8001406:	e9d3 2300 	ldrd	r2, r3, [r3]
 800140a:	f7ff f8f5 	bl	80005f8 <__aeabi_dmul>
 800140e:	4602      	mov	r2, r0
 8001410:	460b      	mov	r3, r1
 8001412:	4610      	mov	r0, r2
 8001414:	4619      	mov	r1, r3
 8001416:	f7ff fbc7 	bl	8000ba8 <__aeabi_d2f>
 800141a:	4604      	mov	r4, r0
 800141c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800141e:	4618      	mov	r0, r3
 8001420:	f7ff f892 	bl	8000548 <__aeabi_f2d>
 8001424:	a3a6      	add	r3, pc, #664	@ (adr r3, 80016c0 <imuDataGet+0x3e0>)
 8001426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800142a:	f7ff f8e5 	bl	80005f8 <__aeabi_dmul>
 800142e:	4602      	mov	r2, r0
 8001430:	460b      	mov	r3, r1
 8001432:	4610      	mov	r0, r2
 8001434:	4619      	mov	r1, r3
 8001436:	f7ff fbb7 	bl	8000ba8 <__aeabi_d2f>
 800143a:	4605      	mov	r5, r0
 800143c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800143e:	4618      	mov	r0, r3
 8001440:	f7ff f882 	bl	8000548 <__aeabi_f2d>
 8001444:	a39e      	add	r3, pc, #632	@ (adr r3, 80016c0 <imuDataGet+0x3e0>)
 8001446:	e9d3 2300 	ldrd	r2, r3, [r3]
 800144a:	f7ff f8d5 	bl	80005f8 <__aeabi_dmul>
 800144e:	4602      	mov	r2, r0
 8001450:	460b      	mov	r3, r1
 8001452:	4610      	mov	r0, r2
 8001454:	4619      	mov	r1, r3
 8001456:	f7ff fba7 	bl	8000ba8 <__aeabi_d2f>
 800145a:	4603      	mov	r3, r0
 800145c:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8001460:	ed97 7a0f 	vldr	s14, [r7, #60]	@ 0x3c
 8001464:	edd7 6a10 	vldr	s13, [r7, #64]	@ 0x40
 8001468:	ed97 6a11 	vldr	s12, [r7, #68]	@ 0x44
 800146c:	edd7 5a12 	vldr	s11, [r7, #72]	@ 0x48
 8001470:	ed97 5a13 	vldr	s10, [r7, #76]	@ 0x4c
 8001474:	eeb0 4a45 	vmov.f32	s8, s10
 8001478:	eef0 3a65 	vmov.f32	s7, s11
 800147c:	eeb0 3a46 	vmov.f32	s6, s12
 8001480:	eef0 2a66 	vmov.f32	s5, s13
 8001484:	eeb0 2a47 	vmov.f32	s4, s14
 8001488:	eef0 1a67 	vmov.f32	s3, s15
 800148c:	ee01 3a10 	vmov	s2, r3
 8001490:	ee00 5a90 	vmov	s1, r5
 8001494:	ee00 4a10 	vmov	s0, r4
 8001498:	f000 f916 	bl	80016c8 <imuAHRSupdate>
                (float)MotionVal[3], (float)MotionVal[4], (float)MotionVal[5], 
                (float)MotionVal[6], (float)MotionVal[7], MotionVal[8]);


  pstAngles->fPitch = asin(-2 * q1 * q3 + 2 * q0* q2)* 57.3; // pitch
 800149c:	4b82      	ldr	r3, [pc, #520]	@ (80016a8 <imuDataGet+0x3c8>)
 800149e:	edd3 7a00 	vldr	s15, [r3]
 80014a2:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 80014a6:	ee27 7a87 	vmul.f32	s14, s15, s14
 80014aa:	4b80      	ldr	r3, [pc, #512]	@ (80016ac <imuDataGet+0x3cc>)
 80014ac:	edd3 7a00 	vldr	s15, [r3]
 80014b0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80014b4:	4b7e      	ldr	r3, [pc, #504]	@ (80016b0 <imuDataGet+0x3d0>)
 80014b6:	edd3 7a00 	vldr	s15, [r3]
 80014ba:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80014be:	4b7d      	ldr	r3, [pc, #500]	@ (80016b4 <imuDataGet+0x3d4>)
 80014c0:	edd3 7a00 	vldr	s15, [r3]
 80014c4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80014c8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80014cc:	ee17 0a90 	vmov	r0, s15
 80014d0:	f7ff f83a 	bl	8000548 <__aeabi_f2d>
 80014d4:	4602      	mov	r2, r0
 80014d6:	460b      	mov	r3, r1
 80014d8:	ec43 2b10 	vmov	d0, r2, r3
 80014dc:	f00c faa8 	bl	800da30 <asin>
 80014e0:	ec51 0b10 	vmov	r0, r1, d0
 80014e4:	a36e      	add	r3, pc, #440	@ (adr r3, 80016a0 <imuDataGet+0x3c0>)
 80014e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80014ea:	f7ff f885 	bl	80005f8 <__aeabi_dmul>
 80014ee:	4602      	mov	r2, r0
 80014f0:	460b      	mov	r3, r1
 80014f2:	4610      	mov	r0, r2
 80014f4:	4619      	mov	r1, r3
 80014f6:	f7ff fb57 	bl	8000ba8 <__aeabi_d2f>
 80014fa:	4602      	mov	r2, r0
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	605a      	str	r2, [r3, #4]
  pstAngles->fRoll = atan2(2 * q2 * q3 + 2 * q0 * q1, -2 * q1 * q1 - 2 * q2* q2 + 1)* 57.3; // roll
 8001500:	4b6c      	ldr	r3, [pc, #432]	@ (80016b4 <imuDataGet+0x3d4>)
 8001502:	edd3 7a00 	vldr	s15, [r3]
 8001506:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800150a:	4b68      	ldr	r3, [pc, #416]	@ (80016ac <imuDataGet+0x3cc>)
 800150c:	edd3 7a00 	vldr	s15, [r3]
 8001510:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001514:	4b66      	ldr	r3, [pc, #408]	@ (80016b0 <imuDataGet+0x3d0>)
 8001516:	edd3 7a00 	vldr	s15, [r3]
 800151a:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800151e:	4b62      	ldr	r3, [pc, #392]	@ (80016a8 <imuDataGet+0x3c8>)
 8001520:	edd3 7a00 	vldr	s15, [r3]
 8001524:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001528:	ee77 7a27 	vadd.f32	s15, s14, s15
 800152c:	ee17 0a90 	vmov	r0, s15
 8001530:	f7ff f80a 	bl	8000548 <__aeabi_f2d>
 8001534:	4604      	mov	r4, r0
 8001536:	460d      	mov	r5, r1
 8001538:	4b5b      	ldr	r3, [pc, #364]	@ (80016a8 <imuDataGet+0x3c8>)
 800153a:	edd3 7a00 	vldr	s15, [r3]
 800153e:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 8001542:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001546:	4b58      	ldr	r3, [pc, #352]	@ (80016a8 <imuDataGet+0x3c8>)
 8001548:	edd3 7a00 	vldr	s15, [r3]
 800154c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001550:	4b58      	ldr	r3, [pc, #352]	@ (80016b4 <imuDataGet+0x3d4>)
 8001552:	edd3 7a00 	vldr	s15, [r3]
 8001556:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800155a:	4b56      	ldr	r3, [pc, #344]	@ (80016b4 <imuDataGet+0x3d4>)
 800155c:	edd3 7a00 	vldr	s15, [r3]
 8001560:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001564:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001568:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 800156c:	ee77 7a87 	vadd.f32	s15, s15, s14
 8001570:	ee17 0a90 	vmov	r0, s15
 8001574:	f7fe ffe8 	bl	8000548 <__aeabi_f2d>
 8001578:	4602      	mov	r2, r0
 800157a:	460b      	mov	r3, r1
 800157c:	ec43 2b11 	vmov	d1, r2, r3
 8001580:	ec45 4b10 	vmov	d0, r4, r5
 8001584:	f00c fa88 	bl	800da98 <atan2>
 8001588:	ec51 0b10 	vmov	r0, r1, d0
 800158c:	a344      	add	r3, pc, #272	@ (adr r3, 80016a0 <imuDataGet+0x3c0>)
 800158e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001592:	f7ff f831 	bl	80005f8 <__aeabi_dmul>
 8001596:	4602      	mov	r2, r0
 8001598:	460b      	mov	r3, r1
 800159a:	4610      	mov	r0, r2
 800159c:	4619      	mov	r1, r3
 800159e:	f7ff fb03 	bl	8000ba8 <__aeabi_d2f>
 80015a2:	4602      	mov	r2, r0
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	609a      	str	r2, [r3, #8]
  pstAngles->fYaw = atan2(-2 * q1 * q2 - 2 * q0 * q3, 2 * q2 * q2 + 2 * q3 * q3 - 1) * 57.3; 
 80015a8:	4b3f      	ldr	r3, [pc, #252]	@ (80016a8 <imuDataGet+0x3c8>)
 80015aa:	edd3 7a00 	vldr	s15, [r3]
 80015ae:	eeb8 7a00 	vmov.f32	s14, #128	@ 0xc0000000 -2.0
 80015b2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80015b6:	4b3f      	ldr	r3, [pc, #252]	@ (80016b4 <imuDataGet+0x3d4>)
 80015b8:	edd3 7a00 	vldr	s15, [r3]
 80015bc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80015c0:	4b3b      	ldr	r3, [pc, #236]	@ (80016b0 <imuDataGet+0x3d0>)
 80015c2:	edd3 7a00 	vldr	s15, [r3]
 80015c6:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80015ca:	4b38      	ldr	r3, [pc, #224]	@ (80016ac <imuDataGet+0x3cc>)
 80015cc:	edd3 7a00 	vldr	s15, [r3]
 80015d0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80015d4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80015d8:	ee17 0a90 	vmov	r0, s15
 80015dc:	f7fe ffb4 	bl	8000548 <__aeabi_f2d>
 80015e0:	4604      	mov	r4, r0
 80015e2:	460d      	mov	r5, r1
 80015e4:	4b33      	ldr	r3, [pc, #204]	@ (80016b4 <imuDataGet+0x3d4>)
 80015e6:	edd3 7a00 	vldr	s15, [r3]
 80015ea:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80015ee:	4b31      	ldr	r3, [pc, #196]	@ (80016b4 <imuDataGet+0x3d4>)
 80015f0:	edd3 7a00 	vldr	s15, [r3]
 80015f4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80015f8:	4b2c      	ldr	r3, [pc, #176]	@ (80016ac <imuDataGet+0x3cc>)
 80015fa:	edd3 7a00 	vldr	s15, [r3]
 80015fe:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001602:	4b2a      	ldr	r3, [pc, #168]	@ (80016ac <imuDataGet+0x3cc>)
 8001604:	edd3 7a00 	vldr	s15, [r3]
 8001608:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800160c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001610:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001614:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001618:	ee17 0a90 	vmov	r0, s15
 800161c:	f7fe ff94 	bl	8000548 <__aeabi_f2d>
 8001620:	4602      	mov	r2, r0
 8001622:	460b      	mov	r3, r1
 8001624:	ec43 2b11 	vmov	d1, r2, r3
 8001628:	ec45 4b10 	vmov	d0, r4, r5
 800162c:	f00c fa34 	bl	800da98 <atan2>
 8001630:	ec51 0b10 	vmov	r0, r1, d0
 8001634:	a31a      	add	r3, pc, #104	@ (adr r3, 80016a0 <imuDataGet+0x3c0>)
 8001636:	e9d3 2300 	ldrd	r2, r3, [r3]
 800163a:	f7fe ffdd 	bl	80005f8 <__aeabi_dmul>
 800163e:	4602      	mov	r2, r0
 8001640:	460b      	mov	r3, r1
 8001642:	4610      	mov	r0, r2
 8001644:	4619      	mov	r1, r3
 8001646:	f7ff faaf 	bl	8000ba8 <__aeabi_d2f>
 800164a:	4602      	mov	r2, r0
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	601a      	str	r2, [r3, #0]

  pstGyroRawData->s16X = s16Gyro[0];
 8001650:	f9b7 2024 	ldrsh.w	r2, [r7, #36]	@ 0x24
 8001654:	68bb      	ldr	r3, [r7, #8]
 8001656:	801a      	strh	r2, [r3, #0]
  pstGyroRawData->s16Y = s16Gyro[1];
 8001658:	f9b7 2026 	ldrsh.w	r2, [r7, #38]	@ 0x26
 800165c:	68bb      	ldr	r3, [r7, #8]
 800165e:	805a      	strh	r2, [r3, #2]
  pstGyroRawData->s16Z = s16Gyro[2];
 8001660:	f9b7 2028 	ldrsh.w	r2, [r7, #40]	@ 0x28
 8001664:	68bb      	ldr	r3, [r7, #8]
 8001666:	809a      	strh	r2, [r3, #4]

  pstAccelRawData->s16X = s16Accel[0];
 8001668:	f9b7 201c 	ldrsh.w	r2, [r7, #28]
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	801a      	strh	r2, [r3, #0]
  pstAccelRawData->s16Y = s16Accel[1];
 8001670:	f9b7 201e 	ldrsh.w	r2, [r7, #30]
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	805a      	strh	r2, [r3, #2]
  pstAccelRawData->s16Z  = s16Accel[2];
 8001678:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	809a      	strh	r2, [r3, #4]

  pstMagnRawData->s16X = s16Magn[0];
 8001680:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001684:	683b      	ldr	r3, [r7, #0]
 8001686:	801a      	strh	r2, [r3, #0]
  pstMagnRawData->s16Y = s16Magn[1];
 8001688:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 800168c:	683b      	ldr	r3, [r7, #0]
 800168e:	805a      	strh	r2, [r3, #2]
  pstMagnRawData->s16Z = s16Magn[2];  
 8001690:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8001694:	683b      	ldr	r3, [r7, #0]
 8001696:	809a      	strh	r2, [r3, #4]

  return;  
 8001698:	bf00      	nop
}
 800169a:	3750      	adds	r7, #80	@ 0x50
 800169c:	46bd      	mov	sp, r7
 800169e:	bdb0      	pop	{r4, r5, r7, pc}
 80016a0:	66666666 	.word	0x66666666
 80016a4:	404ca666 	.word	0x404ca666
 80016a8:	200002b8 	.word	0x200002b8
 80016ac:	200002c0 	.word	0x200002c0
 80016b0:	200002b4 	.word	0x200002b4
 80016b4:	200002bc 	.word	0x200002bc
 80016b8:	66666666 	.word	0x66666666
 80016bc:	40406666 	.word	0x40406666
 80016c0:	1eb851ec 	.word	0x1eb851ec
 80016c4:	3f91eb85 	.word	0x3f91eb85

080016c8 <imuAHRSupdate>:

void imuAHRSupdate(float gx, float gy, float gz, float ax, float ay, float az, float mx, float my, float mz) 
{
 80016c8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80016cc:	b0a8      	sub	sp, #160	@ 0xa0
 80016ce:	af00      	add	r7, sp, #0
 80016d0:	ed87 0a09 	vstr	s0, [r7, #36]	@ 0x24
 80016d4:	edc7 0a08 	vstr	s1, [r7, #32]
 80016d8:	ed87 1a07 	vstr	s2, [r7, #28]
 80016dc:	edc7 1a06 	vstr	s3, [r7, #24]
 80016e0:	ed87 2a05 	vstr	s4, [r7, #20]
 80016e4:	edc7 2a04 	vstr	s5, [r7, #16]
 80016e8:	ed87 3a03 	vstr	s6, [r7, #12]
 80016ec:	edc7 3a02 	vstr	s7, [r7, #8]
 80016f0:	ed87 4a01 	vstr	s8, [r7, #4]
  float norm;
  float hx, hy, hz, bx, bz;
  float vx, vy, vz, wx, wy, wz;
  float exInt = 0.0, eyInt = 0.0, ezInt = 0.0;
 80016f4:	f04f 0300 	mov.w	r3, #0
 80016f8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80016fc:	f04f 0300 	mov.w	r3, #0
 8001700:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8001704:	f04f 0300 	mov.w	r3, #0
 8001708:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  float ex, ey, ez, halfT = 0.024f;
 800170c:	4bef      	ldr	r3, [pc, #956]	@ (8001acc <imuAHRSupdate+0x404>)
 800170e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  float q0q0 = q0 * q0;
 8001712:	4bef      	ldr	r3, [pc, #956]	@ (8001ad0 <imuAHRSupdate+0x408>)
 8001714:	ed93 7a00 	vldr	s14, [r3]
 8001718:	4bed      	ldr	r3, [pc, #948]	@ (8001ad0 <imuAHRSupdate+0x408>)
 800171a:	edd3 7a00 	vldr	s15, [r3]
 800171e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001722:	edc7 7a23 	vstr	s15, [r7, #140]	@ 0x8c
  float q0q1 = q0 * q1;
 8001726:	4bea      	ldr	r3, [pc, #936]	@ (8001ad0 <imuAHRSupdate+0x408>)
 8001728:	ed93 7a00 	vldr	s14, [r3]
 800172c:	4be9      	ldr	r3, [pc, #932]	@ (8001ad4 <imuAHRSupdate+0x40c>)
 800172e:	edd3 7a00 	vldr	s15, [r3]
 8001732:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001736:	edc7 7a22 	vstr	s15, [r7, #136]	@ 0x88
  float q0q2 = q0 * q2;
 800173a:	4be5      	ldr	r3, [pc, #916]	@ (8001ad0 <imuAHRSupdate+0x408>)
 800173c:	ed93 7a00 	vldr	s14, [r3]
 8001740:	4be5      	ldr	r3, [pc, #916]	@ (8001ad8 <imuAHRSupdate+0x410>)
 8001742:	edd3 7a00 	vldr	s15, [r3]
 8001746:	ee67 7a27 	vmul.f32	s15, s14, s15
 800174a:	edc7 7a21 	vstr	s15, [r7, #132]	@ 0x84
  float q0q3 = q0 * q3;
 800174e:	4be0      	ldr	r3, [pc, #896]	@ (8001ad0 <imuAHRSupdate+0x408>)
 8001750:	ed93 7a00 	vldr	s14, [r3]
 8001754:	4be1      	ldr	r3, [pc, #900]	@ (8001adc <imuAHRSupdate+0x414>)
 8001756:	edd3 7a00 	vldr	s15, [r3]
 800175a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800175e:	edc7 7a20 	vstr	s15, [r7, #128]	@ 0x80
  float q1q1 = q1 * q1;
 8001762:	4bdc      	ldr	r3, [pc, #880]	@ (8001ad4 <imuAHRSupdate+0x40c>)
 8001764:	ed93 7a00 	vldr	s14, [r3]
 8001768:	4bda      	ldr	r3, [pc, #872]	@ (8001ad4 <imuAHRSupdate+0x40c>)
 800176a:	edd3 7a00 	vldr	s15, [r3]
 800176e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001772:	edc7 7a1f 	vstr	s15, [r7, #124]	@ 0x7c
  float q1q2 = q1 * q2;
 8001776:	4bd7      	ldr	r3, [pc, #860]	@ (8001ad4 <imuAHRSupdate+0x40c>)
 8001778:	ed93 7a00 	vldr	s14, [r3]
 800177c:	4bd6      	ldr	r3, [pc, #856]	@ (8001ad8 <imuAHRSupdate+0x410>)
 800177e:	edd3 7a00 	vldr	s15, [r3]
 8001782:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001786:	edc7 7a1e 	vstr	s15, [r7, #120]	@ 0x78
  float q1q3 = q1 * q3;
 800178a:	4bd2      	ldr	r3, [pc, #840]	@ (8001ad4 <imuAHRSupdate+0x40c>)
 800178c:	ed93 7a00 	vldr	s14, [r3]
 8001790:	4bd2      	ldr	r3, [pc, #840]	@ (8001adc <imuAHRSupdate+0x414>)
 8001792:	edd3 7a00 	vldr	s15, [r3]
 8001796:	ee67 7a27 	vmul.f32	s15, s14, s15
 800179a:	edc7 7a1d 	vstr	s15, [r7, #116]	@ 0x74
  float q2q2 = q2 * q2;   
 800179e:	4bce      	ldr	r3, [pc, #824]	@ (8001ad8 <imuAHRSupdate+0x410>)
 80017a0:	ed93 7a00 	vldr	s14, [r3]
 80017a4:	4bcc      	ldr	r3, [pc, #816]	@ (8001ad8 <imuAHRSupdate+0x410>)
 80017a6:	edd3 7a00 	vldr	s15, [r3]
 80017aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017ae:	edc7 7a1c 	vstr	s15, [r7, #112]	@ 0x70
  float q2q3 = q2 * q3;
 80017b2:	4bc9      	ldr	r3, [pc, #804]	@ (8001ad8 <imuAHRSupdate+0x410>)
 80017b4:	ed93 7a00 	vldr	s14, [r3]
 80017b8:	4bc8      	ldr	r3, [pc, #800]	@ (8001adc <imuAHRSupdate+0x414>)
 80017ba:	edd3 7a00 	vldr	s15, [r3]
 80017be:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017c2:	edc7 7a1b 	vstr	s15, [r7, #108]	@ 0x6c
  float q3q3 = q3 * q3;          
 80017c6:	4bc5      	ldr	r3, [pc, #788]	@ (8001adc <imuAHRSupdate+0x414>)
 80017c8:	ed93 7a00 	vldr	s14, [r3]
 80017cc:	4bc3      	ldr	r3, [pc, #780]	@ (8001adc <imuAHRSupdate+0x414>)
 80017ce:	edd3 7a00 	vldr	s15, [r3]
 80017d2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80017d6:	edc7 7a1a 	vstr	s15, [r7, #104]	@ 0x68

  norm = invSqrt(ax * ax + ay * ay + az * az);       
 80017da:	edd7 7a06 	vldr	s15, [r7, #24]
 80017de:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80017e2:	edd7 7a05 	vldr	s15, [r7, #20]
 80017e6:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80017ea:	ee37 7a27 	vadd.f32	s14, s14, s15
 80017ee:	edd7 7a04 	vldr	s15, [r7, #16]
 80017f2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80017f6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80017fa:	eeb0 0a67 	vmov.f32	s0, s15
 80017fe:	f000 fb95 	bl	8001f2c <invSqrt>
 8001802:	ed87 0a19 	vstr	s0, [r7, #100]	@ 0x64
  ax = ax * norm;
 8001806:	ed97 7a06 	vldr	s14, [r7, #24]
 800180a:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 800180e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001812:	edc7 7a06 	vstr	s15, [r7, #24]
  ay = ay * norm;
 8001816:	ed97 7a05 	vldr	s14, [r7, #20]
 800181a:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 800181e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001822:	edc7 7a05 	vstr	s15, [r7, #20]
  az = az * norm;
 8001826:	ed97 7a04 	vldr	s14, [r7, #16]
 800182a:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 800182e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001832:	edc7 7a04 	vstr	s15, [r7, #16]

  norm = invSqrt(mx * mx + my * my + mz * mz);          
 8001836:	edd7 7a03 	vldr	s15, [r7, #12]
 800183a:	ee27 7aa7 	vmul.f32	s14, s15, s15
 800183e:	edd7 7a02 	vldr	s15, [r7, #8]
 8001842:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001846:	ee37 7a27 	vadd.f32	s14, s14, s15
 800184a:	edd7 7a01 	vldr	s15, [r7, #4]
 800184e:	ee67 7aa7 	vmul.f32	s15, s15, s15
 8001852:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001856:	eeb0 0a67 	vmov.f32	s0, s15
 800185a:	f000 fb67 	bl	8001f2c <invSqrt>
 800185e:	ed87 0a19 	vstr	s0, [r7, #100]	@ 0x64
  mx = mx * norm;
 8001862:	ed97 7a03 	vldr	s14, [r7, #12]
 8001866:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 800186a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800186e:	edc7 7a03 	vstr	s15, [r7, #12]
  my = my * norm;
 8001872:	ed97 7a02 	vldr	s14, [r7, #8]
 8001876:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 800187a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800187e:	edc7 7a02 	vstr	s15, [r7, #8]
  mz = mz * norm;
 8001882:	ed97 7a01 	vldr	s14, [r7, #4]
 8001886:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 800188a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800188e:	edc7 7a01 	vstr	s15, [r7, #4]

  // compute reference direction of flux
  hx = 2 * mx * (0.5f - q2q2 - q3q3) + 2 * my * (q1q2 - q0q3) + 2 * mz * (q1q3 + q0q2);
 8001892:	edd7 7a03 	vldr	s15, [r7, #12]
 8001896:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800189a:	eef6 6a00 	vmov.f32	s13, #96	@ 0x3f000000  0.5
 800189e:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 80018a2:	ee76 6ae7 	vsub.f32	s13, s13, s15
 80018a6:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 80018aa:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80018ae:	ee27 7a27 	vmul.f32	s14, s14, s15
 80018b2:	edd7 7a02 	vldr	s15, [r7, #8]
 80018b6:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80018ba:	ed97 6a1e 	vldr	s12, [r7, #120]	@ 0x78
 80018be:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 80018c2:	ee76 7a67 	vsub.f32	s15, s12, s15
 80018c6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018ca:	ee37 7a27 	vadd.f32	s14, s14, s15
 80018ce:	edd7 7a01 	vldr	s15, [r7, #4]
 80018d2:	ee77 6aa7 	vadd.f32	s13, s15, s15
 80018d6:	ed97 6a1d 	vldr	s12, [r7, #116]	@ 0x74
 80018da:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 80018de:	ee76 7a27 	vadd.f32	s15, s12, s15
 80018e2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80018e6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80018ea:	edc7 7a18 	vstr	s15, [r7, #96]	@ 0x60
  hy = 2 * mx * (q1q2 + q0q3) + 2 * my * (0.5f - q1q1 - q3q3) + 2 * mz * (q2q3 - q0q1);
 80018ee:	edd7 7a03 	vldr	s15, [r7, #12]
 80018f2:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80018f6:	edd7 6a1e 	vldr	s13, [r7, #120]	@ 0x78
 80018fa:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 80018fe:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001902:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001906:	edd7 7a02 	vldr	s15, [r7, #8]
 800190a:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800190e:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 8001912:	edd7 7a1f 	vldr	s15, [r7, #124]	@ 0x7c
 8001916:	ee36 6a67 	vsub.f32	s12, s12, s15
 800191a:	edd7 7a1a 	vldr	s15, [r7, #104]	@ 0x68
 800191e:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001922:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001926:	ee37 7a27 	vadd.f32	s14, s14, s15
 800192a:	edd7 7a01 	vldr	s15, [r7, #4]
 800192e:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001932:	ed97 6a1b 	vldr	s12, [r7, #108]	@ 0x6c
 8001936:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 800193a:	ee76 7a67 	vsub.f32	s15, s12, s15
 800193e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001942:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001946:	edc7 7a17 	vstr	s15, [r7, #92]	@ 0x5c
  hz = 2 * mx * (q1q3 - q0q2) + 2 * my * (q2q3 + q0q1) + 2 * mz * (0.5f - q1q1 - q2q2);         
 800194a:	edd7 7a03 	vldr	s15, [r7, #12]
 800194e:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001952:	edd7 6a1d 	vldr	s13, [r7, #116]	@ 0x74
 8001956:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 800195a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800195e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001962:	edd7 7a02 	vldr	s15, [r7, #8]
 8001966:	ee77 6aa7 	vadd.f32	s13, s15, s15
 800196a:	ed97 6a1b 	vldr	s12, [r7, #108]	@ 0x6c
 800196e:	edd7 7a22 	vldr	s15, [r7, #136]	@ 0x88
 8001972:	ee76 7a27 	vadd.f32	s15, s12, s15
 8001976:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800197a:	ee37 7a27 	vadd.f32	s14, s14, s15
 800197e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001982:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001986:	eeb6 6a00 	vmov.f32	s12, #96	@ 0x3f000000  0.5
 800198a:	edd7 7a1f 	vldr	s15, [r7, #124]	@ 0x7c
 800198e:	ee36 6a67 	vsub.f32	s12, s12, s15
 8001992:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 8001996:	ee76 7a67 	vsub.f32	s15, s12, s15
 800199a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800199e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019a2:	edc7 7a16 	vstr	s15, [r7, #88]	@ 0x58
  bx = sqrt((hx * hx) + (hy * hy));
 80019a6:	edd7 7a18 	vldr	s15, [r7, #96]	@ 0x60
 80019aa:	ee27 7aa7 	vmul.f32	s14, s15, s15
 80019ae:	edd7 7a17 	vldr	s15, [r7, #92]	@ 0x5c
 80019b2:	ee67 7aa7 	vmul.f32	s15, s15, s15
 80019b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80019ba:	ee17 0a90 	vmov	r0, s15
 80019be:	f7fe fdc3 	bl	8000548 <__aeabi_f2d>
 80019c2:	4602      	mov	r2, r0
 80019c4:	460b      	mov	r3, r1
 80019c6:	ec43 2b10 	vmov	d0, r2, r3
 80019ca:	f00c f8d7 	bl	800db7c <sqrt>
 80019ce:	ec53 2b10 	vmov	r2, r3, d0
 80019d2:	4610      	mov	r0, r2
 80019d4:	4619      	mov	r1, r3
 80019d6:	f7ff f8e7 	bl	8000ba8 <__aeabi_d2f>
 80019da:	4603      	mov	r3, r0
 80019dc:	657b      	str	r3, [r7, #84]	@ 0x54
  bz = hz;     
 80019de:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80019e0:	653b      	str	r3, [r7, #80]	@ 0x50

  // estimated direction of gravity and flux (v and w)
  vx = 2 * (q1q3 - q0q2);
 80019e2:	ed97 7a1d 	vldr	s14, [r7, #116]	@ 0x74
 80019e6:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 80019ea:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019ee:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80019f2:	edc7 7a13 	vstr	s15, [r7, #76]	@ 0x4c
  vy = 2 * (q0q1 + q2q3);
 80019f6:	ed97 7a22 	vldr	s14, [r7, #136]	@ 0x88
 80019fa:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 80019fe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a02:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001a06:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
  vz = q0q0 - q1q1 - q2q2 + q3q3;
 8001a0a:	ed97 7a23 	vldr	s14, [r7, #140]	@ 0x8c
 8001a0e:	edd7 7a1f 	vldr	s15, [r7, #124]	@ 0x7c
 8001a12:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001a16:	edd7 7a1c 	vldr	s15, [r7, #112]	@ 0x70
 8001a1a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a1e:	ed97 7a1a 	vldr	s14, [r7, #104]	@ 0x68
 8001a22:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a26:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
  wx = 2 * bx * (0.5 - q2q2 - q3q3) + 2 * bz * (q1q3 - q0q2);
 8001a2a:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8001a2e:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001a32:	ee17 0a90 	vmov	r0, s15
 8001a36:	f7fe fd87 	bl	8000548 <__aeabi_f2d>
 8001a3a:	4604      	mov	r4, r0
 8001a3c:	460d      	mov	r5, r1
 8001a3e:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8001a40:	f7fe fd82 	bl	8000548 <__aeabi_f2d>
 8001a44:	4602      	mov	r2, r0
 8001a46:	460b      	mov	r3, r1
 8001a48:	f04f 0000 	mov.w	r0, #0
 8001a4c:	4924      	ldr	r1, [pc, #144]	@ (8001ae0 <imuAHRSupdate+0x418>)
 8001a4e:	f7fe fc1b 	bl	8000288 <__aeabi_dsub>
 8001a52:	4602      	mov	r2, r0
 8001a54:	460b      	mov	r3, r1
 8001a56:	4690      	mov	r8, r2
 8001a58:	4699      	mov	r9, r3
 8001a5a:	6eb8      	ldr	r0, [r7, #104]	@ 0x68
 8001a5c:	f7fe fd74 	bl	8000548 <__aeabi_f2d>
 8001a60:	4602      	mov	r2, r0
 8001a62:	460b      	mov	r3, r1
 8001a64:	4640      	mov	r0, r8
 8001a66:	4649      	mov	r1, r9
 8001a68:	f7fe fc0e 	bl	8000288 <__aeabi_dsub>
 8001a6c:	4602      	mov	r2, r0
 8001a6e:	460b      	mov	r3, r1
 8001a70:	4620      	mov	r0, r4
 8001a72:	4629      	mov	r1, r5
 8001a74:	f7fe fdc0 	bl	80005f8 <__aeabi_dmul>
 8001a78:	4602      	mov	r2, r0
 8001a7a:	460b      	mov	r3, r1
 8001a7c:	4614      	mov	r4, r2
 8001a7e:	461d      	mov	r5, r3
 8001a80:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 8001a84:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001a88:	edd7 6a1d 	vldr	s13, [r7, #116]	@ 0x74
 8001a8c:	edd7 7a21 	vldr	s15, [r7, #132]	@ 0x84
 8001a90:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001a94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a98:	ee17 0a90 	vmov	r0, s15
 8001a9c:	f7fe fd54 	bl	8000548 <__aeabi_f2d>
 8001aa0:	4602      	mov	r2, r0
 8001aa2:	460b      	mov	r3, r1
 8001aa4:	4620      	mov	r0, r4
 8001aa6:	4629      	mov	r1, r5
 8001aa8:	f7fe fbf0 	bl	800028c <__adddf3>
 8001aac:	4602      	mov	r2, r0
 8001aae:	460b      	mov	r3, r1
 8001ab0:	4610      	mov	r0, r2
 8001ab2:	4619      	mov	r1, r3
 8001ab4:	f7ff f878 	bl	8000ba8 <__aeabi_d2f>
 8001ab8:	4603      	mov	r3, r0
 8001aba:	643b      	str	r3, [r7, #64]	@ 0x40
  wy = 2 * bx * (q1q2 - q0q3) + 2 * bz * (q0q1 + q2q3);
 8001abc:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8001ac0:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001ac4:	edd7 6a1e 	vldr	s13, [r7, #120]	@ 0x78
 8001ac8:	e00c      	b.n	8001ae4 <imuAHRSupdate+0x41c>
 8001aca:	bf00      	nop
 8001acc:	3cc49ba6 	.word	0x3cc49ba6
 8001ad0:	200002b4 	.word	0x200002b4
 8001ad4:	200002b8 	.word	0x200002b8
 8001ad8:	200002bc 	.word	0x200002bc
 8001adc:	200002c0 	.word	0x200002c0
 8001ae0:	3fe00000 	.word	0x3fe00000
 8001ae4:	edd7 7a20 	vldr	s15, [r7, #128]	@ 0x80
 8001ae8:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001aec:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001af0:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 8001af4:	ee77 6aa7 	vadd.f32	s13, s15, s15
 8001af8:	ed97 6a22 	vldr	s12, [r7, #136]	@ 0x88
 8001afc:	edd7 7a1b 	vldr	s15, [r7, #108]	@ 0x6c
 8001b00:	ee76 7a27 	vadd.f32	s15, s12, s15
 8001b04:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b08:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b0c:	edc7 7a0f 	vstr	s15, [r7, #60]	@ 0x3c
  wz = 2 * bx * (q0q2 + q1q3) + 2 * bz * (0.5 - q1q1 - q2q2);  
 8001b10:	edd7 7a15 	vldr	s15, [r7, #84]	@ 0x54
 8001b14:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001b18:	edd7 6a21 	vldr	s13, [r7, #132]	@ 0x84
 8001b1c:	edd7 7a1d 	vldr	s15, [r7, #116]	@ 0x74
 8001b20:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8001b24:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001b28:	ee17 0a90 	vmov	r0, s15
 8001b2c:	f7fe fd0c 	bl	8000548 <__aeabi_f2d>
 8001b30:	4604      	mov	r4, r0
 8001b32:	460d      	mov	r5, r1
 8001b34:	edd7 7a14 	vldr	s15, [r7, #80]	@ 0x50
 8001b38:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001b3c:	ee17 0a90 	vmov	r0, s15
 8001b40:	f7fe fd02 	bl	8000548 <__aeabi_f2d>
 8001b44:	4680      	mov	r8, r0
 8001b46:	4689      	mov	r9, r1
 8001b48:	6ff8      	ldr	r0, [r7, #124]	@ 0x7c
 8001b4a:	f7fe fcfd 	bl	8000548 <__aeabi_f2d>
 8001b4e:	4602      	mov	r2, r0
 8001b50:	460b      	mov	r3, r1
 8001b52:	f04f 0000 	mov.w	r0, #0
 8001b56:	49e7      	ldr	r1, [pc, #924]	@ (8001ef4 <imuAHRSupdate+0x82c>)
 8001b58:	f7fe fb96 	bl	8000288 <__aeabi_dsub>
 8001b5c:	4602      	mov	r2, r0
 8001b5e:	460b      	mov	r3, r1
 8001b60:	4692      	mov	sl, r2
 8001b62:	469b      	mov	fp, r3
 8001b64:	6f38      	ldr	r0, [r7, #112]	@ 0x70
 8001b66:	f7fe fcef 	bl	8000548 <__aeabi_f2d>
 8001b6a:	4602      	mov	r2, r0
 8001b6c:	460b      	mov	r3, r1
 8001b6e:	4650      	mov	r0, sl
 8001b70:	4659      	mov	r1, fp
 8001b72:	f7fe fb89 	bl	8000288 <__aeabi_dsub>
 8001b76:	4602      	mov	r2, r0
 8001b78:	460b      	mov	r3, r1
 8001b7a:	4640      	mov	r0, r8
 8001b7c:	4649      	mov	r1, r9
 8001b7e:	f7fe fd3b 	bl	80005f8 <__aeabi_dmul>
 8001b82:	4602      	mov	r2, r0
 8001b84:	460b      	mov	r3, r1
 8001b86:	4620      	mov	r0, r4
 8001b88:	4629      	mov	r1, r5
 8001b8a:	f7fe fb7f 	bl	800028c <__adddf3>
 8001b8e:	4602      	mov	r2, r0
 8001b90:	460b      	mov	r3, r1
 8001b92:	4610      	mov	r0, r2
 8001b94:	4619      	mov	r1, r3
 8001b96:	f7ff f807 	bl	8000ba8 <__aeabi_d2f>
 8001b9a:	4603      	mov	r3, r0
 8001b9c:	63bb      	str	r3, [r7, #56]	@ 0x38

  // error is sum of cross product between reference direction of fields and direction measured by sensors
  ex = (ay * vz - az * vy) + (my * wz - mz * wy);
 8001b9e:	ed97 7a05 	vldr	s14, [r7, #20]
 8001ba2:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8001ba6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001baa:	edd7 6a04 	vldr	s13, [r7, #16]
 8001bae:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8001bb2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bb6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001bba:	edd7 6a02 	vldr	s13, [r7, #8]
 8001bbe:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8001bc2:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001bc6:	ed97 6a01 	vldr	s12, [r7, #4]
 8001bca:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8001bce:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001bd2:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001bd6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bda:	edc7 7a0d 	vstr	s15, [r7, #52]	@ 0x34
  ey = (az * vx - ax * vz) + (mz * wx - mx * wz);
 8001bde:	ed97 7a04 	vldr	s14, [r7, #16]
 8001be2:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8001be6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001bea:	edd7 6a06 	vldr	s13, [r7, #24]
 8001bee:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8001bf2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bf6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001bfa:	edd7 6a01 	vldr	s13, [r7, #4]
 8001bfe:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8001c02:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001c06:	ed97 6a03 	vldr	s12, [r7, #12]
 8001c0a:	edd7 7a0e 	vldr	s15, [r7, #56]	@ 0x38
 8001c0e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001c12:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001c16:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c1a:	edc7 7a0c 	vstr	s15, [r7, #48]	@ 0x30
  ez = (ax * vy - ay * vx) + (mx * wy - my * wx);
 8001c1e:	ed97 7a06 	vldr	s14, [r7, #24]
 8001c22:	edd7 7a12 	vldr	s15, [r7, #72]	@ 0x48
 8001c26:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c2a:	edd7 6a05 	vldr	s13, [r7, #20]
 8001c2e:	edd7 7a13 	vldr	s15, [r7, #76]	@ 0x4c
 8001c32:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c36:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001c3a:	edd7 6a03 	vldr	s13, [r7, #12]
 8001c3e:	edd7 7a0f 	vldr	s15, [r7, #60]	@ 0x3c
 8001c42:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8001c46:	ed97 6a02 	vldr	s12, [r7, #8]
 8001c4a:	edd7 7a10 	vldr	s15, [r7, #64]	@ 0x40
 8001c4e:	ee66 7a27 	vmul.f32	s15, s12, s15
 8001c52:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001c56:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c5a:	edc7 7a0b 	vstr	s15, [r7, #44]	@ 0x2c

  if(ex != 0.0f && ey != 0.0f && ez != 0.0f)
 8001c5e:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001c62:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001c66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c6a:	d061      	beq.n	8001d30 <imuAHRSupdate+0x668>
 8001c6c:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001c70:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001c74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c78:	d05a      	beq.n	8001d30 <imuAHRSupdate+0x668>
 8001c7a:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001c7e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001c82:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c86:	d053      	beq.n	8001d30 <imuAHRSupdate+0x668>
  {
    exInt = exInt + ex * Ki * halfT;
 8001c88:	ed97 7a0d 	vldr	s14, [r7, #52]	@ 0x34
 8001c8c:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 8001c90:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c94:	ed97 7a27 	vldr	s14, [r7, #156]	@ 0x9c
 8001c98:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c9c:	edc7 7a27 	vstr	s15, [r7, #156]	@ 0x9c
    eyInt = eyInt + ey * Ki * halfT;  
 8001ca0:	ed97 7a0c 	vldr	s14, [r7, #48]	@ 0x30
 8001ca4:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 8001ca8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cac:	ed97 7a26 	vldr	s14, [r7, #152]	@ 0x98
 8001cb0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cb4:	edc7 7a26 	vstr	s15, [r7, #152]	@ 0x98
    ezInt = ezInt + ez * Ki * halfT;
 8001cb8:	ed97 7a0b 	vldr	s14, [r7, #44]	@ 0x2c
 8001cbc:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 8001cc0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001cc4:	ed97 7a25 	vldr	s14, [r7, #148]	@ 0x94
 8001cc8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ccc:	edc7 7a25 	vstr	s15, [r7, #148]	@ 0x94

    gx = gx + Kp * ex + exInt;
 8001cd0:	edd7 7a0d 	vldr	s15, [r7, #52]	@ 0x34
 8001cd4:	eeb1 7a02 	vmov.f32	s14, #18	@ 0x40900000  4.5
 8001cd8:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001cdc:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001ce0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ce4:	ed97 7a27 	vldr	s14, [r7, #156]	@ 0x9c
 8001ce8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001cec:	edc7 7a09 	vstr	s15, [r7, #36]	@ 0x24
    gy = gy + Kp * ey + eyInt;
 8001cf0:	edd7 7a0c 	vldr	s15, [r7, #48]	@ 0x30
 8001cf4:	eeb1 7a02 	vmov.f32	s14, #18	@ 0x40900000  4.5
 8001cf8:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001cfc:	edd7 7a08 	vldr	s15, [r7, #32]
 8001d00:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d04:	ed97 7a26 	vldr	s14, [r7, #152]	@ 0x98
 8001d08:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d0c:	edc7 7a08 	vstr	s15, [r7, #32]
    gz = gz + Kp * ez + ezInt;
 8001d10:	edd7 7a0b 	vldr	s15, [r7, #44]	@ 0x2c
 8001d14:	eeb1 7a02 	vmov.f32	s14, #18	@ 0x40900000  4.5
 8001d18:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001d1c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001d20:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d24:	ed97 7a25 	vldr	s14, [r7, #148]	@ 0x94
 8001d28:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d2c:	edc7 7a07 	vstr	s15, [r7, #28]
  }

  q0 = q0 + (-q1 * gx - q2 * gy - q3 * gz) * halfT;
 8001d30:	4b71      	ldr	r3, [pc, #452]	@ (8001ef8 <imuAHRSupdate+0x830>)
 8001d32:	edd3 7a00 	vldr	s15, [r3]
 8001d36:	eeb1 7a67 	vneg.f32	s14, s15
 8001d3a:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001d3e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d42:	4b6e      	ldr	r3, [pc, #440]	@ (8001efc <imuAHRSupdate+0x834>)
 8001d44:	edd3 6a00 	vldr	s13, [r3]
 8001d48:	edd7 7a08 	vldr	s15, [r7, #32]
 8001d4c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d50:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001d54:	4b6a      	ldr	r3, [pc, #424]	@ (8001f00 <imuAHRSupdate+0x838>)
 8001d56:	edd3 6a00 	vldr	s13, [r3]
 8001d5a:	edd7 7a07 	vldr	s15, [r7, #28]
 8001d5e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d62:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001d66:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 8001d6a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d6e:	4b65      	ldr	r3, [pc, #404]	@ (8001f04 <imuAHRSupdate+0x83c>)
 8001d70:	edd3 7a00 	vldr	s15, [r3]
 8001d74:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d78:	4b62      	ldr	r3, [pc, #392]	@ (8001f04 <imuAHRSupdate+0x83c>)
 8001d7a:	edc3 7a00 	vstr	s15, [r3]
  q1 = q1 + (q0 * gx + q2 * gz - q3 * gy) * halfT;
 8001d7e:	4b61      	ldr	r3, [pc, #388]	@ (8001f04 <imuAHRSupdate+0x83c>)
 8001d80:	ed93 7a00 	vldr	s14, [r3]
 8001d84:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001d88:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001d8c:	4b5b      	ldr	r3, [pc, #364]	@ (8001efc <imuAHRSupdate+0x834>)
 8001d8e:	edd3 6a00 	vldr	s13, [r3]
 8001d92:	edd7 7a07 	vldr	s15, [r7, #28]
 8001d96:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d9a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d9e:	4b58      	ldr	r3, [pc, #352]	@ (8001f00 <imuAHRSupdate+0x838>)
 8001da0:	edd3 6a00 	vldr	s13, [r3]
 8001da4:	edd7 7a08 	vldr	s15, [r7, #32]
 8001da8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001dac:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001db0:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 8001db4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001db8:	4b4f      	ldr	r3, [pc, #316]	@ (8001ef8 <imuAHRSupdate+0x830>)
 8001dba:	edd3 7a00 	vldr	s15, [r3]
 8001dbe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001dc2:	4b4d      	ldr	r3, [pc, #308]	@ (8001ef8 <imuAHRSupdate+0x830>)
 8001dc4:	edc3 7a00 	vstr	s15, [r3]
  q2 = q2 + (q0 * gy - q1 * gz + q3 * gx) * halfT;
 8001dc8:	4b4e      	ldr	r3, [pc, #312]	@ (8001f04 <imuAHRSupdate+0x83c>)
 8001dca:	ed93 7a00 	vldr	s14, [r3]
 8001dce:	edd7 7a08 	vldr	s15, [r7, #32]
 8001dd2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001dd6:	4b48      	ldr	r3, [pc, #288]	@ (8001ef8 <imuAHRSupdate+0x830>)
 8001dd8:	edd3 6a00 	vldr	s13, [r3]
 8001ddc:	edd7 7a07 	vldr	s15, [r7, #28]
 8001de0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001de4:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001de8:	4b45      	ldr	r3, [pc, #276]	@ (8001f00 <imuAHRSupdate+0x838>)
 8001dea:	edd3 6a00 	vldr	s13, [r3]
 8001dee:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001df2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001df6:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001dfa:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 8001dfe:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e02:	4b3e      	ldr	r3, [pc, #248]	@ (8001efc <imuAHRSupdate+0x834>)
 8001e04:	edd3 7a00 	vldr	s15, [r3]
 8001e08:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e0c:	4b3b      	ldr	r3, [pc, #236]	@ (8001efc <imuAHRSupdate+0x834>)
 8001e0e:	edc3 7a00 	vstr	s15, [r3]
  q3 = q3 + (q0 * gz + q1 * gy - q2 * gx) * halfT;  
 8001e12:	4b3c      	ldr	r3, [pc, #240]	@ (8001f04 <imuAHRSupdate+0x83c>)
 8001e14:	ed93 7a00 	vldr	s14, [r3]
 8001e18:	edd7 7a07 	vldr	s15, [r7, #28]
 8001e1c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e20:	4b35      	ldr	r3, [pc, #212]	@ (8001ef8 <imuAHRSupdate+0x830>)
 8001e22:	edd3 6a00 	vldr	s13, [r3]
 8001e26:	edd7 7a08 	vldr	s15, [r7, #32]
 8001e2a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e2e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e32:	4b32      	ldr	r3, [pc, #200]	@ (8001efc <imuAHRSupdate+0x834>)
 8001e34:	edd3 6a00 	vldr	s13, [r3]
 8001e38:	edd7 7a09 	vldr	s15, [r7, #36]	@ 0x24
 8001e3c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e40:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001e44:	edd7 7a24 	vldr	s15, [r7, #144]	@ 0x90
 8001e48:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e4c:	4b2c      	ldr	r3, [pc, #176]	@ (8001f00 <imuAHRSupdate+0x838>)
 8001e4e:	edd3 7a00 	vldr	s15, [r3]
 8001e52:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e56:	4b2a      	ldr	r3, [pc, #168]	@ (8001f00 <imuAHRSupdate+0x838>)
 8001e58:	edc3 7a00 	vstr	s15, [r3]

  norm = invSqrt(q0 * q0 + q1 * q1 + q2 * q2 + q3 * q3);
 8001e5c:	4b29      	ldr	r3, [pc, #164]	@ (8001f04 <imuAHRSupdate+0x83c>)
 8001e5e:	ed93 7a00 	vldr	s14, [r3]
 8001e62:	4b28      	ldr	r3, [pc, #160]	@ (8001f04 <imuAHRSupdate+0x83c>)
 8001e64:	edd3 7a00 	vldr	s15, [r3]
 8001e68:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001e6c:	4b22      	ldr	r3, [pc, #136]	@ (8001ef8 <imuAHRSupdate+0x830>)
 8001e6e:	edd3 6a00 	vldr	s13, [r3]
 8001e72:	4b21      	ldr	r3, [pc, #132]	@ (8001ef8 <imuAHRSupdate+0x830>)
 8001e74:	edd3 7a00 	vldr	s15, [r3]
 8001e78:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e7c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e80:	4b1e      	ldr	r3, [pc, #120]	@ (8001efc <imuAHRSupdate+0x834>)
 8001e82:	edd3 6a00 	vldr	s13, [r3]
 8001e86:	4b1d      	ldr	r3, [pc, #116]	@ (8001efc <imuAHRSupdate+0x834>)
 8001e88:	edd3 7a00 	vldr	s15, [r3]
 8001e8c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e90:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e94:	4b1a      	ldr	r3, [pc, #104]	@ (8001f00 <imuAHRSupdate+0x838>)
 8001e96:	edd3 6a00 	vldr	s13, [r3]
 8001e9a:	4b19      	ldr	r3, [pc, #100]	@ (8001f00 <imuAHRSupdate+0x838>)
 8001e9c:	edd3 7a00 	vldr	s15, [r3]
 8001ea0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001ea4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ea8:	eeb0 0a67 	vmov.f32	s0, s15
 8001eac:	f000 f83e 	bl	8001f2c <invSqrt>
 8001eb0:	ed87 0a19 	vstr	s0, [r7, #100]	@ 0x64
  q0 = q0 * norm;
 8001eb4:	4b13      	ldr	r3, [pc, #76]	@ (8001f04 <imuAHRSupdate+0x83c>)
 8001eb6:	ed93 7a00 	vldr	s14, [r3]
 8001eba:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8001ebe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ec2:	4b10      	ldr	r3, [pc, #64]	@ (8001f04 <imuAHRSupdate+0x83c>)
 8001ec4:	edc3 7a00 	vstr	s15, [r3]
  q1 = q1 * norm;
 8001ec8:	4b0b      	ldr	r3, [pc, #44]	@ (8001ef8 <imuAHRSupdate+0x830>)
 8001eca:	ed93 7a00 	vldr	s14, [r3]
 8001ece:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8001ed2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ed6:	4b08      	ldr	r3, [pc, #32]	@ (8001ef8 <imuAHRSupdate+0x830>)
 8001ed8:	edc3 7a00 	vstr	s15, [r3]
  q2 = q2 * norm;
 8001edc:	4b07      	ldr	r3, [pc, #28]	@ (8001efc <imuAHRSupdate+0x834>)
 8001ede:	ed93 7a00 	vldr	s14, [r3]
 8001ee2:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8001ee6:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001eea:	4b04      	ldr	r3, [pc, #16]	@ (8001efc <imuAHRSupdate+0x834>)
 8001eec:	edc3 7a00 	vstr	s15, [r3]
 8001ef0:	e00a      	b.n	8001f08 <imuAHRSupdate+0x840>
 8001ef2:	bf00      	nop
 8001ef4:	3fe00000 	.word	0x3fe00000
 8001ef8:	200002b8 	.word	0x200002b8
 8001efc:	200002bc 	.word	0x200002bc
 8001f00:	200002c0 	.word	0x200002c0
 8001f04:	200002b4 	.word	0x200002b4
  q3 = q3 * norm;
 8001f08:	4b07      	ldr	r3, [pc, #28]	@ (8001f28 <imuAHRSupdate+0x860>)
 8001f0a:	ed93 7a00 	vldr	s14, [r3]
 8001f0e:	edd7 7a19 	vldr	s15, [r7, #100]	@ 0x64
 8001f12:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f16:	4b04      	ldr	r3, [pc, #16]	@ (8001f28 <imuAHRSupdate+0x860>)
 8001f18:	edc3 7a00 	vstr	s15, [r3]
}
 8001f1c:	bf00      	nop
 8001f1e:	37a0      	adds	r7, #160	@ 0xa0
 8001f20:	46bd      	mov	sp, r7
 8001f22:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001f26:	bf00      	nop
 8001f28:	200002c0 	.word	0x200002c0

08001f2c <invSqrt>:

float invSqrt(float x) 
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b087      	sub	sp, #28
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	ed87 0a01 	vstr	s0, [r7, #4]
  float halfx = 0.5f * x;
 8001f36:	edd7 7a01 	vldr	s15, [r7, #4]
 8001f3a:	eeb6 7a00 	vmov.f32	s14, #96	@ 0x3f000000  0.5
 8001f3e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f42:	edc7 7a05 	vstr	s15, [r7, #20]
  float y = x;
 8001f46:	687b      	ldr	r3, [r7, #4]
 8001f48:	613b      	str	r3, [r7, #16]
  
  long i = *(long*)&y;                //get bits for floating value
 8001f4a:	f107 0310 	add.w	r3, r7, #16
 8001f4e:	681b      	ldr	r3, [r3, #0]
 8001f50:	60fb      	str	r3, [r7, #12]
  i = 0x5f3759df - (i >> 1);          //gives initial guss you
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	105a      	asrs	r2, r3, #1
 8001f56:	4b12      	ldr	r3, [pc, #72]	@ (8001fa0 <invSqrt+0x74>)
 8001f58:	1a9b      	subs	r3, r3, r2
 8001f5a:	60fb      	str	r3, [r7, #12]
  y = *(float*)&i;                    //convert bits back to float
 8001f5c:	f107 030c 	add.w	r3, r7, #12
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	613b      	str	r3, [r7, #16]
  y = y * (1.5f - (halfx * y * y));   //newtop step, repeating increases accuracy
 8001f64:	ed97 7a04 	vldr	s14, [r7, #16]
 8001f68:	edd7 7a05 	vldr	s15, [r7, #20]
 8001f6c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f70:	edd7 7a04 	vldr	s15, [r7, #16]
 8001f74:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f78:	eeb7 7a08 	vmov.f32	s14, #120	@ 0x3fc00000  1.5
 8001f7c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8001f80:	edd7 7a04 	vldr	s15, [r7, #16]
 8001f84:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001f88:	edc7 7a04 	vstr	s15, [r7, #16]
  
  return y;
 8001f8c:	693b      	ldr	r3, [r7, #16]
 8001f8e:	ee07 3a90 	vmov	s15, r3
}
 8001f92:	eeb0 0a67 	vmov.f32	s0, s15
 8001f96:	371c      	adds	r7, #28
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f9e:	4770      	bx	lr
 8001fa0:	5f3759df 	.word	0x5f3759df

08001fa4 <icm20948init>:
/******************************************************************************
 * icm20948 sensor device                                                     *
 ******************************************************************************/
void icm20948init(void)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	af00      	add	r7, sp, #0

  /* user bank 0 register */
  I2C_WriteOneByte(I2C_ADD_ICM20948, REG_ADD_REG_BANK_SEL, REG_VAL_REG_BANK_0);
 8001fa8:	2200      	movs	r2, #0
 8001faa:	217f      	movs	r1, #127	@ 0x7f
 8001fac:	20d0      	movs	r0, #208	@ 0xd0
 8001fae:	f7ff f931 	bl	8001214 <I2C_WriteOneByte>
  I2C_WriteOneByte(I2C_ADD_ICM20948, REG_ADD_PWR_MIGMT_1,  REG_VAL_ALL_RGE_RESET);
 8001fb2:	2280      	movs	r2, #128	@ 0x80
 8001fb4:	2106      	movs	r1, #6
 8001fb6:	20d0      	movs	r0, #208	@ 0xd0
 8001fb8:	f7ff f92c 	bl	8001214 <I2C_WriteOneByte>
  HAL_Delay(10);
 8001fbc:	200a      	movs	r0, #10
 8001fbe:	f002 fe63 	bl	8004c88 <HAL_Delay>
  I2C_WriteOneByte(I2C_ADD_ICM20948, REG_ADD_PWR_MIGMT_1,  REG_VAL_RUN_MODE);  
 8001fc2:	2201      	movs	r2, #1
 8001fc4:	2106      	movs	r1, #6
 8001fc6:	20d0      	movs	r0, #208	@ 0xd0
 8001fc8:	f7ff f924 	bl	8001214 <I2C_WriteOneByte>

  /* user bank 2 register */
  I2C_WriteOneByte(I2C_ADD_ICM20948, REG_ADD_REG_BANK_SEL, REG_VAL_REG_BANK_2);
 8001fcc:	2220      	movs	r2, #32
 8001fce:	217f      	movs	r1, #127	@ 0x7f
 8001fd0:	20d0      	movs	r0, #208	@ 0xd0
 8001fd2:	f7ff f91f 	bl	8001214 <I2C_WriteOneByte>
  I2C_WriteOneByte( I2C_ADD_ICM20948, REG_ADD_GYRO_SMPLRT_DIV, 0x07);
 8001fd6:	2207      	movs	r2, #7
 8001fd8:	2100      	movs	r1, #0
 8001fda:	20d0      	movs	r0, #208	@ 0xd0
 8001fdc:	f7ff f91a 	bl	8001214 <I2C_WriteOneByte>
  I2C_WriteOneByte( I2C_ADD_ICM20948, REG_ADD_GYRO_CONFIG_1,   
 8001fe0:	2235      	movs	r2, #53	@ 0x35
 8001fe2:	2101      	movs	r1, #1
 8001fe4:	20d0      	movs	r0, #208	@ 0xd0
 8001fe6:	f7ff f915 	bl	8001214 <I2C_WriteOneByte>
                  REG_VAL_BIT_GYRO_DLPCFG_6 | REG_VAL_BIT_GYRO_FS_1000DPS | REG_VAL_BIT_GYRO_DLPF);
  I2C_WriteOneByte( I2C_ADD_ICM20948, REG_ADD_ACCEL_SMPLRT_DIV_2,  0x07);
 8001fea:	2207      	movs	r2, #7
 8001fec:	2111      	movs	r1, #17
 8001fee:	20d0      	movs	r0, #208	@ 0xd0
 8001ff0:	f7ff f910 	bl	8001214 <I2C_WriteOneByte>
  I2C_WriteOneByte( I2C_ADD_ICM20948, REG_ADD_ACCEL_CONFIG,
 8001ff4:	2231      	movs	r2, #49	@ 0x31
 8001ff6:	2114      	movs	r1, #20
 8001ff8:	20d0      	movs	r0, #208	@ 0xd0
 8001ffa:	f7ff f90b 	bl	8001214 <I2C_WriteOneByte>
                  REG_VAL_BIT_ACCEL_DLPCFG_6 | REG_VAL_BIT_ACCEL_FS_2g | REG_VAL_BIT_ACCEL_DLPF);

  /* user bank 0 register */
  I2C_WriteOneByte(I2C_ADD_ICM20948, REG_ADD_REG_BANK_SEL, REG_VAL_REG_BANK_0); 
 8001ffe:	2200      	movs	r2, #0
 8002000:	217f      	movs	r1, #127	@ 0x7f
 8002002:	20d0      	movs	r0, #208	@ 0xd0
 8002004:	f7ff f906 	bl	8001214 <I2C_WriteOneByte>

  HAL_Delay(100);
 8002008:	2064      	movs	r0, #100	@ 0x64
 800200a:	f002 fe3d 	bl	8004c88 <HAL_Delay>
  /* offset */
  icm20948GyroOffset();
 800200e:	f000 fb25 	bl	800265c <icm20948GyroOffset>

  icm20948MagCheck();
 8002012:	f000 fb6b 	bl	80026ec <icm20948MagCheck>

  icm20948WriteSecondary( I2C_ADD_ICM20948_AK09916|I2C_ADD_ICM20948_AK09916_WRITE,
 8002016:	2204      	movs	r2, #4
 8002018:	2131      	movs	r1, #49	@ 0x31
 800201a:	200c      	movs	r0, #12
 800201c:	f000 fa81 	bl	8002522 <icm20948WriteSecondary>
                               REG_ADD_MAG_CNTL2, REG_VAL_MAG_MODE_20HZ);  
  return;
 8002020:	bf00      	nop
}
 8002022:	bd80      	pop	{r7, pc}

08002024 <icm20948Check>:

bool icm20948Check(void)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b082      	sub	sp, #8
 8002028:	af00      	add	r7, sp, #0
    bool bRet = false;
 800202a:	2300      	movs	r3, #0
 800202c:	71fb      	strb	r3, [r7, #7]
    if(REG_VAL_WIA == I2C_ReadOneByte(I2C_ADD_ICM20948, REG_ADD_WIA))
 800202e:	2100      	movs	r1, #0
 8002030:	20d0      	movs	r0, #208	@ 0xd0
 8002032:	f7ff f8cd 	bl	80011d0 <I2C_ReadOneByte>
 8002036:	4603      	mov	r3, r0
 8002038:	2bea      	cmp	r3, #234	@ 0xea
 800203a:	d101      	bne.n	8002040 <icm20948Check+0x1c>
    {
        bRet = true;
 800203c:	2301      	movs	r3, #1
 800203e:	71fb      	strb	r3, [r7, #7]
    }
    return bRet;
 8002040:	79fb      	ldrb	r3, [r7, #7]
}
 8002042:	4618      	mov	r0, r3
 8002044:	3708      	adds	r7, #8
 8002046:	46bd      	mov	sp, r7
 8002048:	bd80      	pop	{r7, pc}
	...

0800204c <icm20948GyroRead>:
void icm20948GyroRead(int16_t* ps16X, int16_t* ps16Y, int16_t* ps16Z)
{
 800204c:	b590      	push	{r4, r7, lr}
 800204e:	b08d      	sub	sp, #52	@ 0x34
 8002050:	af00      	add	r7, sp, #0
 8002052:	60f8      	str	r0, [r7, #12]
 8002054:	60b9      	str	r1, [r7, #8]
 8002056:	607a      	str	r2, [r7, #4]
   uint8_t u8Buf[6];
    int16_t s16Buf[3] = {0}; 
 8002058:	f107 0320 	add.w	r3, r7, #32
 800205c:	2200      	movs	r2, #0
 800205e:	601a      	str	r2, [r3, #0]
 8002060:	809a      	strh	r2, [r3, #4]
    uint8_t i;
    int32_t s32OutBuf[3] = {0};
 8002062:	f107 0314 	add.w	r3, r7, #20
 8002066:	2200      	movs	r2, #0
 8002068:	601a      	str	r2, [r3, #0]
 800206a:	605a      	str	r2, [r3, #4]
 800206c:	609a      	str	r2, [r3, #8]
    static ICM20948_ST_AVG_DATA sstAvgBuf[3];
    static int16_t ss16c = 0;
    ss16c++;
 800206e:	4b52      	ldr	r3, [pc, #328]	@ (80021b8 <icm20948GyroRead+0x16c>)
 8002070:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002074:	b29b      	uxth	r3, r3
 8002076:	3301      	adds	r3, #1
 8002078:	b29b      	uxth	r3, r3
 800207a:	b21a      	sxth	r2, r3
 800207c:	4b4e      	ldr	r3, [pc, #312]	@ (80021b8 <icm20948GyroRead+0x16c>)
 800207e:	801a      	strh	r2, [r3, #0]

    u8Buf[0]=I2C_ReadOneByte(I2C_ADD_ICM20948,REG_ADD_GYRO_XOUT_L); 
 8002080:	2134      	movs	r1, #52	@ 0x34
 8002082:	20d0      	movs	r0, #208	@ 0xd0
 8002084:	f7ff f8a4 	bl	80011d0 <I2C_ReadOneByte>
 8002088:	4603      	mov	r3, r0
 800208a:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    u8Buf[1]=I2C_ReadOneByte(I2C_ADD_ICM20948,REG_ADD_GYRO_XOUT_H);
 800208e:	2133      	movs	r1, #51	@ 0x33
 8002090:	20d0      	movs	r0, #208	@ 0xd0
 8002092:	f7ff f89d 	bl	80011d0 <I2C_ReadOneByte>
 8002096:	4603      	mov	r3, r0
 8002098:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
    s16Buf[0]=  (u8Buf[1]<<8)|u8Buf[0];
 800209c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80020a0:	021b      	lsls	r3, r3, #8
 80020a2:	b21a      	sxth	r2, r3
 80020a4:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80020a8:	b21b      	sxth	r3, r3
 80020aa:	4313      	orrs	r3, r2
 80020ac:	b21b      	sxth	r3, r3
 80020ae:	843b      	strh	r3, [r7, #32]

    u8Buf[0]=I2C_ReadOneByte(I2C_ADD_ICM20948,REG_ADD_GYRO_YOUT_L); 
 80020b0:	2136      	movs	r1, #54	@ 0x36
 80020b2:	20d0      	movs	r0, #208	@ 0xd0
 80020b4:	f7ff f88c 	bl	80011d0 <I2C_ReadOneByte>
 80020b8:	4603      	mov	r3, r0
 80020ba:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    u8Buf[1]=I2C_ReadOneByte(I2C_ADD_ICM20948,REG_ADD_GYRO_YOUT_H);
 80020be:	2135      	movs	r1, #53	@ 0x35
 80020c0:	20d0      	movs	r0, #208	@ 0xd0
 80020c2:	f7ff f885 	bl	80011d0 <I2C_ReadOneByte>
 80020c6:	4603      	mov	r3, r0
 80020c8:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
    s16Buf[1]=  (u8Buf[1]<<8)|u8Buf[0];
 80020cc:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 80020d0:	021b      	lsls	r3, r3, #8
 80020d2:	b21a      	sxth	r2, r3
 80020d4:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80020d8:	b21b      	sxth	r3, r3
 80020da:	4313      	orrs	r3, r2
 80020dc:	b21b      	sxth	r3, r3
 80020de:	847b      	strh	r3, [r7, #34]	@ 0x22

    u8Buf[0]=I2C_ReadOneByte(I2C_ADD_ICM20948,REG_ADD_GYRO_ZOUT_L); 
 80020e0:	2138      	movs	r1, #56	@ 0x38
 80020e2:	20d0      	movs	r0, #208	@ 0xd0
 80020e4:	f7ff f874 	bl	80011d0 <I2C_ReadOneByte>
 80020e8:	4603      	mov	r3, r0
 80020ea:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    u8Buf[1]=I2C_ReadOneByte(I2C_ADD_ICM20948,REG_ADD_GYRO_ZOUT_H);
 80020ee:	2137      	movs	r1, #55	@ 0x37
 80020f0:	20d0      	movs	r0, #208	@ 0xd0
 80020f2:	f7ff f86d 	bl	80011d0 <I2C_ReadOneByte>
 80020f6:	4603      	mov	r3, r0
 80020f8:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
    s16Buf[2]=  (u8Buf[1]<<8)|u8Buf[0];
 80020fc:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8002100:	021b      	lsls	r3, r3, #8
 8002102:	b21a      	sxth	r2, r3
 8002104:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002108:	b21b      	sxth	r3, r3
 800210a:	4313      	orrs	r3, r2
 800210c:	b21b      	sxth	r3, r3
 800210e:	84bb      	strh	r3, [r7, #36]	@ 0x24

    for(i = 0; i < 3; i ++) 
 8002110:	2300      	movs	r3, #0
 8002112:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8002116:	e025      	b.n	8002164 <icm20948GyroRead+0x118>
    {
        icm20948CalAvgValue(&sstAvgBuf[i].u8Index, sstAvgBuf[i].s16AvgBuffer, s16Buf[i], s32OutBuf + i);
 8002118:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800211c:	4613      	mov	r3, r2
 800211e:	00db      	lsls	r3, r3, #3
 8002120:	4413      	add	r3, r2
 8002122:	005b      	lsls	r3, r3, #1
 8002124:	4a25      	ldr	r2, [pc, #148]	@ (80021bc <icm20948GyroRead+0x170>)
 8002126:	1898      	adds	r0, r3, r2
 8002128:	f897 202f 	ldrb.w	r2, [r7, #47]	@ 0x2f
 800212c:	4613      	mov	r3, r2
 800212e:	00db      	lsls	r3, r3, #3
 8002130:	4413      	add	r3, r2
 8002132:	005b      	lsls	r3, r3, #1
 8002134:	4a21      	ldr	r2, [pc, #132]	@ (80021bc <icm20948GyroRead+0x170>)
 8002136:	4413      	add	r3, r2
 8002138:	1c99      	adds	r1, r3, #2
 800213a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800213e:	005b      	lsls	r3, r3, #1
 8002140:	3330      	adds	r3, #48	@ 0x30
 8002142:	443b      	add	r3, r7
 8002144:	f933 4c10 	ldrsh.w	r4, [r3, #-16]
 8002148:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800214c:	009b      	lsls	r3, r3, #2
 800214e:	f107 0214 	add.w	r2, r7, #20
 8002152:	4413      	add	r3, r2
 8002154:	4622      	mov	r2, r4
 8002156:	f000 fa45 	bl	80025e4 <icm20948CalAvgValue>
    for(i = 0; i < 3; i ++) 
 800215a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800215e:	3301      	adds	r3, #1
 8002160:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
 8002164:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002168:	2b02      	cmp	r3, #2
 800216a:	d9d5      	bls.n	8002118 <icm20948GyroRead+0xcc>
    }
    *ps16X = s32OutBuf[0] - gstGyroOffset.s16X;
 800216c:	697b      	ldr	r3, [r7, #20]
 800216e:	b29a      	uxth	r2, r3
 8002170:	4b13      	ldr	r3, [pc, #76]	@ (80021c0 <icm20948GyroRead+0x174>)
 8002172:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002176:	b29b      	uxth	r3, r3
 8002178:	1ad3      	subs	r3, r2, r3
 800217a:	b29b      	uxth	r3, r3
 800217c:	b21a      	sxth	r2, r3
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	801a      	strh	r2, [r3, #0]
    *ps16Y = s32OutBuf[1] - gstGyroOffset.s16Y;
 8002182:	69bb      	ldr	r3, [r7, #24]
 8002184:	b29a      	uxth	r2, r3
 8002186:	4b0e      	ldr	r3, [pc, #56]	@ (80021c0 <icm20948GyroRead+0x174>)
 8002188:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 800218c:	b29b      	uxth	r3, r3
 800218e:	1ad3      	subs	r3, r2, r3
 8002190:	b29b      	uxth	r3, r3
 8002192:	b21a      	sxth	r2, r3
 8002194:	68bb      	ldr	r3, [r7, #8]
 8002196:	801a      	strh	r2, [r3, #0]
    *ps16Z = s32OutBuf[2] - gstGyroOffset.s16Z;
 8002198:	69fb      	ldr	r3, [r7, #28]
 800219a:	b29a      	uxth	r2, r3
 800219c:	4b08      	ldr	r3, [pc, #32]	@ (80021c0 <icm20948GyroRead+0x174>)
 800219e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80021a2:	b29b      	uxth	r3, r3
 80021a4:	1ad3      	subs	r3, r2, r3
 80021a6:	b29b      	uxth	r3, r3
 80021a8:	b21a      	sxth	r2, r3
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	801a      	strh	r2, [r3, #0]
    
    return;
 80021ae:	bf00      	nop
}
 80021b0:	3734      	adds	r7, #52	@ 0x34
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd90      	pop	{r4, r7, pc}
 80021b6:	bf00      	nop
 80021b8:	200002e0 	.word	0x200002e0
 80021bc:	200002e4 	.word	0x200002e4
 80021c0:	200002ac 	.word	0x200002ac

080021c4 <icm20948AccelRead>:
void icm20948AccelRead(int16_t* ps16X, int16_t* ps16Y, int16_t* ps16Z)
{
 80021c4:	b590      	push	{r4, r7, lr}
 80021c6:	b08b      	sub	sp, #44	@ 0x2c
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	60f8      	str	r0, [r7, #12]
 80021cc:	60b9      	str	r1, [r7, #8]
 80021ce:	607a      	str	r2, [r7, #4]
    uint8_t u8Buf[2];
    int16_t s16Buf[3] = {0}; 
 80021d0:	f107 031c 	add.w	r3, r7, #28
 80021d4:	2200      	movs	r2, #0
 80021d6:	601a      	str	r2, [r3, #0]
 80021d8:	809a      	strh	r2, [r3, #4]
    uint8_t i;
    int32_t s32OutBuf[3] = {0};
 80021da:	f107 0310 	add.w	r3, r7, #16
 80021de:	2200      	movs	r2, #0
 80021e0:	601a      	str	r2, [r3, #0]
 80021e2:	605a      	str	r2, [r3, #4]
 80021e4:	609a      	str	r2, [r3, #8]
    static ICM20948_ST_AVG_DATA sstAvgBuf[3];

    u8Buf[0]=I2C_ReadOneByte(I2C_ADD_ICM20948,REG_ADD_ACCEL_XOUT_L); 
 80021e6:	212e      	movs	r1, #46	@ 0x2e
 80021e8:	20d0      	movs	r0, #208	@ 0xd0
 80021ea:	f7fe fff1 	bl	80011d0 <I2C_ReadOneByte>
 80021ee:	4603      	mov	r3, r0
 80021f0:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    u8Buf[1]=I2C_ReadOneByte(I2C_ADD_ICM20948,REG_ADD_ACCEL_XOUT_H);
 80021f4:	212d      	movs	r1, #45	@ 0x2d
 80021f6:	20d0      	movs	r0, #208	@ 0xd0
 80021f8:	f7fe ffea 	bl	80011d0 <I2C_ReadOneByte>
 80021fc:	4603      	mov	r3, r0
 80021fe:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
    s16Buf[0]=  (u8Buf[1]<<8)|u8Buf[0];
 8002202:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8002206:	021b      	lsls	r3, r3, #8
 8002208:	b21a      	sxth	r2, r3
 800220a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800220e:	b21b      	sxth	r3, r3
 8002210:	4313      	orrs	r3, r2
 8002212:	b21b      	sxth	r3, r3
 8002214:	83bb      	strh	r3, [r7, #28]

    u8Buf[0]=I2C_ReadOneByte(I2C_ADD_ICM20948,REG_ADD_ACCEL_YOUT_L); 
 8002216:	2130      	movs	r1, #48	@ 0x30
 8002218:	20d0      	movs	r0, #208	@ 0xd0
 800221a:	f7fe ffd9 	bl	80011d0 <I2C_ReadOneByte>
 800221e:	4603      	mov	r3, r0
 8002220:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    u8Buf[1]=I2C_ReadOneByte(I2C_ADD_ICM20948,REG_ADD_ACCEL_YOUT_H);
 8002224:	212f      	movs	r1, #47	@ 0x2f
 8002226:	20d0      	movs	r0, #208	@ 0xd0
 8002228:	f7fe ffd2 	bl	80011d0 <I2C_ReadOneByte>
 800222c:	4603      	mov	r3, r0
 800222e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
    s16Buf[1]=  (u8Buf[1]<<8)|u8Buf[0];
 8002232:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8002236:	021b      	lsls	r3, r3, #8
 8002238:	b21a      	sxth	r2, r3
 800223a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800223e:	b21b      	sxth	r3, r3
 8002240:	4313      	orrs	r3, r2
 8002242:	b21b      	sxth	r3, r3
 8002244:	83fb      	strh	r3, [r7, #30]

    u8Buf[0]=I2C_ReadOneByte(I2C_ADD_ICM20948,REG_ADD_ACCEL_ZOUT_L); 
 8002246:	2132      	movs	r1, #50	@ 0x32
 8002248:	20d0      	movs	r0, #208	@ 0xd0
 800224a:	f7fe ffc1 	bl	80011d0 <I2C_ReadOneByte>
 800224e:	4603      	mov	r3, r0
 8002250:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    u8Buf[1]=I2C_ReadOneByte(I2C_ADD_ICM20948,REG_ADD_ACCEL_ZOUT_H);
 8002254:	2131      	movs	r1, #49	@ 0x31
 8002256:	20d0      	movs	r0, #208	@ 0xd0
 8002258:	f7fe ffba 	bl	80011d0 <I2C_ReadOneByte>
 800225c:	4603      	mov	r3, r0
 800225e:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
    s16Buf[2]=  (u8Buf[1]<<8)|u8Buf[0];
 8002262:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8002266:	021b      	lsls	r3, r3, #8
 8002268:	b21a      	sxth	r2, r3
 800226a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800226e:	b21b      	sxth	r3, r3
 8002270:	4313      	orrs	r3, r2
 8002272:	b21b      	sxth	r3, r3
 8002274:	843b      	strh	r3, [r7, #32]

    for(i = 0; i < 3; i ++) 
 8002276:	2300      	movs	r3, #0
 8002278:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 800227c:	e025      	b.n	80022ca <icm20948AccelRead+0x106>
    {
        icm20948CalAvgValue(&sstAvgBuf[i].u8Index, sstAvgBuf[i].s16AvgBuffer, s16Buf[i], s32OutBuf + i);
 800227e:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8002282:	4613      	mov	r3, r2
 8002284:	00db      	lsls	r3, r3, #3
 8002286:	4413      	add	r3, r2
 8002288:	005b      	lsls	r3, r3, #1
 800228a:	4a1a      	ldr	r2, [pc, #104]	@ (80022f4 <icm20948AccelRead+0x130>)
 800228c:	1898      	adds	r0, r3, r2
 800228e:	f897 2027 	ldrb.w	r2, [r7, #39]	@ 0x27
 8002292:	4613      	mov	r3, r2
 8002294:	00db      	lsls	r3, r3, #3
 8002296:	4413      	add	r3, r2
 8002298:	005b      	lsls	r3, r3, #1
 800229a:	4a16      	ldr	r2, [pc, #88]	@ (80022f4 <icm20948AccelRead+0x130>)
 800229c:	4413      	add	r3, r2
 800229e:	1c99      	adds	r1, r3, #2
 80022a0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80022a4:	005b      	lsls	r3, r3, #1
 80022a6:	3328      	adds	r3, #40	@ 0x28
 80022a8:	443b      	add	r3, r7
 80022aa:	f933 4c0c 	ldrsh.w	r4, [r3, #-12]
 80022ae:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80022b2:	009b      	lsls	r3, r3, #2
 80022b4:	f107 0210 	add.w	r2, r7, #16
 80022b8:	4413      	add	r3, r2
 80022ba:	4622      	mov	r2, r4
 80022bc:	f000 f992 	bl	80025e4 <icm20948CalAvgValue>
    for(i = 0; i < 3; i ++) 
 80022c0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80022c4:	3301      	adds	r3, #1
 80022c6:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
 80022ca:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80022ce:	2b02      	cmp	r3, #2
 80022d0:	d9d5      	bls.n	800227e <icm20948AccelRead+0xba>
    }
    *ps16X = s32OutBuf[0];
 80022d2:	693b      	ldr	r3, [r7, #16]
 80022d4:	b21a      	sxth	r2, r3
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	801a      	strh	r2, [r3, #0]
    *ps16Y = s32OutBuf[1];
 80022da:	697b      	ldr	r3, [r7, #20]
 80022dc:	b21a      	sxth	r2, r3
 80022de:	68bb      	ldr	r3, [r7, #8]
 80022e0:	801a      	strh	r2, [r3, #0]
    *ps16Z = s32OutBuf[2];
 80022e2:	69bb      	ldr	r3, [r7, #24]
 80022e4:	b21a      	sxth	r2, r3
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	801a      	strh	r2, [r3, #0]
  
    return;
 80022ea:	bf00      	nop

}
 80022ec:	372c      	adds	r7, #44	@ 0x2c
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd90      	pop	{r4, r7, pc}
 80022f2:	bf00      	nop
 80022f4:	2000031c 	.word	0x2000031c

080022f8 <icm20948MagRead>:
void icm20948MagRead(int16_t* ps16X, int16_t* ps16Y, int16_t* ps16Z)
{
 80022f8:	b590      	push	{r4, r7, lr}
 80022fa:	b08d      	sub	sp, #52	@ 0x34
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	60f8      	str	r0, [r7, #12]
 8002300:	60b9      	str	r1, [r7, #8]
 8002302:	607a      	str	r2, [r7, #4]
    uint8_t counter = 20;
 8002304:	2314      	movs	r3, #20
 8002306:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    uint8_t u8Data[MAG_DATA_LEN];
    int16_t s16Buf[3] = {0}; 
 800230a:	f107 0320 	add.w	r3, r7, #32
 800230e:	2200      	movs	r2, #0
 8002310:	601a      	str	r2, [r3, #0]
 8002312:	809a      	strh	r2, [r3, #4]
    uint8_t i;
    int32_t s32OutBuf[3] = {0};
 8002314:	f107 0314 	add.w	r3, r7, #20
 8002318:	2200      	movs	r2, #0
 800231a:	601a      	str	r2, [r3, #0]
 800231c:	605a      	str	r2, [r3, #4]
 800231e:	609a      	str	r2, [r3, #8]
    static ICM20948_ST_AVG_DATA sstAvgBuf[3];
    while( counter>0 )
 8002320:	e014      	b.n	800234c <icm20948MagRead+0x54>
    {
        HAL_Delay(10);
 8002322:	200a      	movs	r0, #10
 8002324:	f002 fcb0 	bl	8004c88 <HAL_Delay>
        icm20948ReadSecondary( I2C_ADD_ICM20948_AK09916|I2C_ADD_ICM20948_AK09916_READ, 
 8002328:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800232c:	2201      	movs	r2, #1
 800232e:	2110      	movs	r1, #16
 8002330:	208c      	movs	r0, #140	@ 0x8c
 8002332:	f000 f881 	bl	8002438 <icm20948ReadSecondary>
                                    REG_ADD_MAG_ST2, 1, u8Data);
        
        if ((u8Data[0] & 0x01) != 0)
 8002336:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800233a:	f003 0301 	and.w	r3, r3, #1
 800233e:	2b00      	cmp	r3, #0
 8002340:	d109      	bne.n	8002356 <icm20948MagRead+0x5e>
            break;
        
        counter--;
 8002342:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002346:	3b01      	subs	r3, #1
 8002348:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    while( counter>0 )
 800234c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002350:	2b00      	cmp	r3, #0
 8002352:	d1e6      	bne.n	8002322 <icm20948MagRead+0x2a>
 8002354:	e000      	b.n	8002358 <icm20948MagRead+0x60>
            break;
 8002356:	bf00      	nop
    }
    
    if(counter != 0)
 8002358:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800235c:	2b00      	cmp	r3, #0
 800235e:	d024      	beq.n	80023aa <icm20948MagRead+0xb2>
    {
        icm20948ReadSecondary( I2C_ADD_ICM20948_AK09916|I2C_ADD_ICM20948_AK09916_READ, 
 8002360:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8002364:	2206      	movs	r2, #6
 8002366:	2111      	movs	r1, #17
 8002368:	208c      	movs	r0, #140	@ 0x8c
 800236a:	f000 f865 	bl	8002438 <icm20948ReadSecondary>
                                    REG_ADD_MAG_DATA, 
                                    MAG_DATA_LEN,
                                    u8Data);
        s16Buf[0] = ((int16_t)u8Data[1]<<8) | u8Data[0];
 800236e:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8002372:	021b      	lsls	r3, r3, #8
 8002374:	b21a      	sxth	r2, r3
 8002376:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800237a:	b21b      	sxth	r3, r3
 800237c:	4313      	orrs	r3, r2
 800237e:	b21b      	sxth	r3, r3
 8002380:	843b      	strh	r3, [r7, #32]
        s16Buf[1] = ((int16_t)u8Data[3]<<8) | u8Data[2];
 8002382:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002386:	021b      	lsls	r3, r3, #8
 8002388:	b21a      	sxth	r2, r3
 800238a:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800238e:	b21b      	sxth	r3, r3
 8002390:	4313      	orrs	r3, r2
 8002392:	b21b      	sxth	r3, r3
 8002394:	847b      	strh	r3, [r7, #34]	@ 0x22
        s16Buf[2] = ((int16_t)u8Data[5]<<8) | u8Data[4];       
 8002396:	f897 302d 	ldrb.w	r3, [r7, #45]	@ 0x2d
 800239a:	021b      	lsls	r3, r3, #8
 800239c:	b21a      	sxth	r2, r3
 800239e:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80023a2:	b21b      	sxth	r3, r3
 80023a4:	4313      	orrs	r3, r2
 80023a6:	b21b      	sxth	r3, r3
 80023a8:	84bb      	strh	r3, [r7, #36]	@ 0x24
    }

    for(i = 0; i < 3; i ++) 
 80023aa:	2300      	movs	r3, #0
 80023ac:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 80023b0:	e025      	b.n	80023fe <icm20948MagRead+0x106>
    {
        icm20948CalAvgValue(&sstAvgBuf[i].u8Index, sstAvgBuf[i].s16AvgBuffer, s16Buf[i], s32OutBuf + i);
 80023b2:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 80023b6:	4613      	mov	r3, r2
 80023b8:	00db      	lsls	r3, r3, #3
 80023ba:	4413      	add	r3, r2
 80023bc:	005b      	lsls	r3, r3, #1
 80023be:	4a1d      	ldr	r2, [pc, #116]	@ (8002434 <icm20948MagRead+0x13c>)
 80023c0:	1898      	adds	r0, r3, r2
 80023c2:	f897 202e 	ldrb.w	r2, [r7, #46]	@ 0x2e
 80023c6:	4613      	mov	r3, r2
 80023c8:	00db      	lsls	r3, r3, #3
 80023ca:	4413      	add	r3, r2
 80023cc:	005b      	lsls	r3, r3, #1
 80023ce:	4a19      	ldr	r2, [pc, #100]	@ (8002434 <icm20948MagRead+0x13c>)
 80023d0:	4413      	add	r3, r2
 80023d2:	1c99      	adds	r1, r3, #2
 80023d4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80023d8:	005b      	lsls	r3, r3, #1
 80023da:	3330      	adds	r3, #48	@ 0x30
 80023dc:	443b      	add	r3, r7
 80023de:	f933 4c10 	ldrsh.w	r4, [r3, #-16]
 80023e2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80023e6:	009b      	lsls	r3, r3, #2
 80023e8:	f107 0214 	add.w	r2, r7, #20
 80023ec:	4413      	add	r3, r2
 80023ee:	4622      	mov	r2, r4
 80023f0:	f000 f8f8 	bl	80025e4 <icm20948CalAvgValue>
    for(i = 0; i < 3; i ++) 
 80023f4:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80023f8:	3301      	adds	r3, #1
 80023fa:	f887 302e 	strb.w	r3, [r7, #46]	@ 0x2e
 80023fe:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8002402:	2b02      	cmp	r3, #2
 8002404:	d9d5      	bls.n	80023b2 <icm20948MagRead+0xba>
    }
    
    *ps16X =  s32OutBuf[0];
 8002406:	697b      	ldr	r3, [r7, #20]
 8002408:	b21a      	sxth	r2, r3
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	801a      	strh	r2, [r3, #0]
    *ps16Y = -s32OutBuf[1];
 800240e:	69bb      	ldr	r3, [r7, #24]
 8002410:	b29b      	uxth	r3, r3
 8002412:	425b      	negs	r3, r3
 8002414:	b29b      	uxth	r3, r3
 8002416:	b21a      	sxth	r2, r3
 8002418:	68bb      	ldr	r3, [r7, #8]
 800241a:	801a      	strh	r2, [r3, #0]
    *ps16Z = -s32OutBuf[2];
 800241c:	69fb      	ldr	r3, [r7, #28]
 800241e:	b29b      	uxth	r3, r3
 8002420:	425b      	negs	r3, r3
 8002422:	b29b      	uxth	r3, r3
 8002424:	b21a      	sxth	r2, r3
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	801a      	strh	r2, [r3, #0]
    return;
 800242a:	bf00      	nop
}
 800242c:	3734      	adds	r7, #52	@ 0x34
 800242e:	46bd      	mov	sp, r7
 8002430:	bd90      	pop	{r4, r7, pc}
 8002432:	bf00      	nop
 8002434:	20000354 	.word	0x20000354

08002438 <icm20948ReadSecondary>:

void icm20948ReadSecondary(uint8_t u8I2CAddr, uint8_t u8RegAddr, uint8_t u8Len, uint8_t *pu8data)
{
 8002438:	b590      	push	{r4, r7, lr}
 800243a:	b085      	sub	sp, #20
 800243c:	af00      	add	r7, sp, #0
 800243e:	603b      	str	r3, [r7, #0]
 8002440:	4603      	mov	r3, r0
 8002442:	71fb      	strb	r3, [r7, #7]
 8002444:	460b      	mov	r3, r1
 8002446:	71bb      	strb	r3, [r7, #6]
 8002448:	4613      	mov	r3, r2
 800244a:	717b      	strb	r3, [r7, #5]
    uint8_t i;
    uint8_t u8Temp;

    I2C_WriteOneByte(I2C_ADD_ICM20948, REG_ADD_REG_BANK_SEL,  REG_VAL_REG_BANK_3); //swtich bank3
 800244c:	2230      	movs	r2, #48	@ 0x30
 800244e:	217f      	movs	r1, #127	@ 0x7f
 8002450:	20d0      	movs	r0, #208	@ 0xd0
 8002452:	f7fe fedf 	bl	8001214 <I2C_WriteOneByte>
    I2C_WriteOneByte(I2C_ADD_ICM20948, REG_ADD_I2C_SLV0_ADDR, u8I2CAddr);
 8002456:	79fb      	ldrb	r3, [r7, #7]
 8002458:	461a      	mov	r2, r3
 800245a:	2103      	movs	r1, #3
 800245c:	20d0      	movs	r0, #208	@ 0xd0
 800245e:	f7fe fed9 	bl	8001214 <I2C_WriteOneByte>
    I2C_WriteOneByte(I2C_ADD_ICM20948, REG_ADD_I2C_SLV0_REG,  u8RegAddr);
 8002462:	79bb      	ldrb	r3, [r7, #6]
 8002464:	461a      	mov	r2, r3
 8002466:	2104      	movs	r1, #4
 8002468:	20d0      	movs	r0, #208	@ 0xd0
 800246a:	f7fe fed3 	bl	8001214 <I2C_WriteOneByte>
    I2C_WriteOneByte(I2C_ADD_ICM20948, REG_ADD_I2C_SLV0_CTRL, REG_VAL_BIT_SLV0_EN|u8Len);
 800246e:	797b      	ldrb	r3, [r7, #5]
 8002470:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002474:	b2db      	uxtb	r3, r3
 8002476:	461a      	mov	r2, r3
 8002478:	2105      	movs	r1, #5
 800247a:	20d0      	movs	r0, #208	@ 0xd0
 800247c:	f7fe feca 	bl	8001214 <I2C_WriteOneByte>

    I2C_WriteOneByte(I2C_ADD_ICM20948, REG_ADD_REG_BANK_SEL, REG_VAL_REG_BANK_0); //swtich bank0
 8002480:	2200      	movs	r2, #0
 8002482:	217f      	movs	r1, #127	@ 0x7f
 8002484:	20d0      	movs	r0, #208	@ 0xd0
 8002486:	f7fe fec5 	bl	8001214 <I2C_WriteOneByte>
    
    u8Temp = I2C_ReadOneByte(I2C_ADD_ICM20948,REG_ADD_USER_CTRL);
 800248a:	2103      	movs	r1, #3
 800248c:	20d0      	movs	r0, #208	@ 0xd0
 800248e:	f7fe fe9f 	bl	80011d0 <I2C_ReadOneByte>
 8002492:	4603      	mov	r3, r0
 8002494:	73bb      	strb	r3, [r7, #14]
    u8Temp |= REG_VAL_BIT_I2C_MST_EN;
 8002496:	7bbb      	ldrb	r3, [r7, #14]
 8002498:	f043 0320 	orr.w	r3, r3, #32
 800249c:	73bb      	strb	r3, [r7, #14]
    I2C_WriteOneByte(I2C_ADD_ICM20948, REG_ADD_USER_CTRL, u8Temp);
 800249e:	7bbb      	ldrb	r3, [r7, #14]
 80024a0:	461a      	mov	r2, r3
 80024a2:	2103      	movs	r1, #3
 80024a4:	20d0      	movs	r0, #208	@ 0xd0
 80024a6:	f7fe feb5 	bl	8001214 <I2C_WriteOneByte>
    HAL_Delay(5);
 80024aa:	2005      	movs	r0, #5
 80024ac:	f002 fbec 	bl	8004c88 <HAL_Delay>
    u8Temp &= ~REG_VAL_BIT_I2C_MST_EN;
 80024b0:	7bbb      	ldrb	r3, [r7, #14]
 80024b2:	f023 0320 	bic.w	r3, r3, #32
 80024b6:	73bb      	strb	r3, [r7, #14]
    I2C_WriteOneByte(I2C_ADD_ICM20948, REG_ADD_USER_CTRL, u8Temp);
 80024b8:	7bbb      	ldrb	r3, [r7, #14]
 80024ba:	461a      	mov	r2, r3
 80024bc:	2103      	movs	r1, #3
 80024be:	20d0      	movs	r0, #208	@ 0xd0
 80024c0:	f7fe fea8 	bl	8001214 <I2C_WriteOneByte>
    
    for(i=0; i<u8Len; i++)
 80024c4:	2300      	movs	r3, #0
 80024c6:	73fb      	strb	r3, [r7, #15]
 80024c8:	e00d      	b.n	80024e6 <icm20948ReadSecondary+0xae>
    {
        *(pu8data+i) = I2C_ReadOneByte(I2C_ADD_ICM20948, REG_ADD_EXT_SENS_DATA_00+i);
 80024ca:	7bfb      	ldrb	r3, [r7, #15]
 80024cc:	333b      	adds	r3, #59	@ 0x3b
 80024ce:	b2d9      	uxtb	r1, r3
 80024d0:	7bfb      	ldrb	r3, [r7, #15]
 80024d2:	683a      	ldr	r2, [r7, #0]
 80024d4:	18d4      	adds	r4, r2, r3
 80024d6:	20d0      	movs	r0, #208	@ 0xd0
 80024d8:	f7fe fe7a 	bl	80011d0 <I2C_ReadOneByte>
 80024dc:	4603      	mov	r3, r0
 80024de:	7023      	strb	r3, [r4, #0]
    for(i=0; i<u8Len; i++)
 80024e0:	7bfb      	ldrb	r3, [r7, #15]
 80024e2:	3301      	adds	r3, #1
 80024e4:	73fb      	strb	r3, [r7, #15]
 80024e6:	7bfa      	ldrb	r2, [r7, #15]
 80024e8:	797b      	ldrb	r3, [r7, #5]
 80024ea:	429a      	cmp	r2, r3
 80024ec:	d3ed      	bcc.n	80024ca <icm20948ReadSecondary+0x92>
        
    }
    I2C_WriteOneByte(I2C_ADD_ICM20948, REG_ADD_REG_BANK_SEL, REG_VAL_REG_BANK_3); //swtich bank3
 80024ee:	2230      	movs	r2, #48	@ 0x30
 80024f0:	217f      	movs	r1, #127	@ 0x7f
 80024f2:	20d0      	movs	r0, #208	@ 0xd0
 80024f4:	f7fe fe8e 	bl	8001214 <I2C_WriteOneByte>
    
    u8Temp = I2C_ReadOneByte(I2C_ADD_ICM20948,REG_ADD_I2C_SLV0_CTRL);
 80024f8:	2105      	movs	r1, #5
 80024fa:	20d0      	movs	r0, #208	@ 0xd0
 80024fc:	f7fe fe68 	bl	80011d0 <I2C_ReadOneByte>
 8002500:	4603      	mov	r3, r0
 8002502:	73bb      	strb	r3, [r7, #14]
    u8Temp &= ~((REG_VAL_BIT_I2C_MST_EN)&(REG_VAL_BIT_MASK_LEN));
    I2C_WriteOneByte(I2C_ADD_ICM20948, REG_ADD_I2C_SLV0_CTRL,  u8Temp);
 8002504:	7bbb      	ldrb	r3, [r7, #14]
 8002506:	461a      	mov	r2, r3
 8002508:	2105      	movs	r1, #5
 800250a:	20d0      	movs	r0, #208	@ 0xd0
 800250c:	f7fe fe82 	bl	8001214 <I2C_WriteOneByte>
    
    I2C_WriteOneByte(I2C_ADD_ICM20948, REG_ADD_REG_BANK_SEL, REG_VAL_REG_BANK_0); //swtich bank0
 8002510:	2200      	movs	r2, #0
 8002512:	217f      	movs	r1, #127	@ 0x7f
 8002514:	20d0      	movs	r0, #208	@ 0xd0
 8002516:	f7fe fe7d 	bl	8001214 <I2C_WriteOneByte>

}
 800251a:	bf00      	nop
 800251c:	3714      	adds	r7, #20
 800251e:	46bd      	mov	sp, r7
 8002520:	bd90      	pop	{r4, r7, pc}

08002522 <icm20948WriteSecondary>:

void icm20948WriteSecondary(uint8_t u8I2CAddr, uint8_t u8RegAddr, uint8_t u8data)
{
 8002522:	b580      	push	{r7, lr}
 8002524:	b084      	sub	sp, #16
 8002526:	af00      	add	r7, sp, #0
 8002528:	4603      	mov	r3, r0
 800252a:	71fb      	strb	r3, [r7, #7]
 800252c:	460b      	mov	r3, r1
 800252e:	71bb      	strb	r3, [r7, #6]
 8002530:	4613      	mov	r3, r2
 8002532:	717b      	strb	r3, [r7, #5]
  uint8_t u8Temp;
  I2C_WriteOneByte(I2C_ADD_ICM20948, REG_ADD_REG_BANK_SEL,  REG_VAL_REG_BANK_3); //swtich bank3
 8002534:	2230      	movs	r2, #48	@ 0x30
 8002536:	217f      	movs	r1, #127	@ 0x7f
 8002538:	20d0      	movs	r0, #208	@ 0xd0
 800253a:	f7fe fe6b 	bl	8001214 <I2C_WriteOneByte>
  I2C_WriteOneByte(I2C_ADD_ICM20948, REG_ADD_I2C_SLV1_ADDR, u8I2CAddr);
 800253e:	79fb      	ldrb	r3, [r7, #7]
 8002540:	461a      	mov	r2, r3
 8002542:	2107      	movs	r1, #7
 8002544:	20d0      	movs	r0, #208	@ 0xd0
 8002546:	f7fe fe65 	bl	8001214 <I2C_WriteOneByte>
  I2C_WriteOneByte(I2C_ADD_ICM20948, REG_ADD_I2C_SLV1_REG,  u8RegAddr);
 800254a:	79bb      	ldrb	r3, [r7, #6]
 800254c:	461a      	mov	r2, r3
 800254e:	2108      	movs	r1, #8
 8002550:	20d0      	movs	r0, #208	@ 0xd0
 8002552:	f7fe fe5f 	bl	8001214 <I2C_WriteOneByte>
  I2C_WriteOneByte(I2C_ADD_ICM20948, REG_ADD_I2C_SLV1_DO,   u8data);
 8002556:	797b      	ldrb	r3, [r7, #5]
 8002558:	461a      	mov	r2, r3
 800255a:	210a      	movs	r1, #10
 800255c:	20d0      	movs	r0, #208	@ 0xd0
 800255e:	f7fe fe59 	bl	8001214 <I2C_WriteOneByte>
  I2C_WriteOneByte(I2C_ADD_ICM20948, REG_ADD_I2C_SLV1_CTRL, REG_VAL_BIT_SLV0_EN|1);
 8002562:	2281      	movs	r2, #129	@ 0x81
 8002564:	2109      	movs	r1, #9
 8002566:	20d0      	movs	r0, #208	@ 0xd0
 8002568:	f7fe fe54 	bl	8001214 <I2C_WriteOneByte>

  I2C_WriteOneByte(I2C_ADD_ICM20948, REG_ADD_REG_BANK_SEL, REG_VAL_REG_BANK_0); //swtich bank0
 800256c:	2200      	movs	r2, #0
 800256e:	217f      	movs	r1, #127	@ 0x7f
 8002570:	20d0      	movs	r0, #208	@ 0xd0
 8002572:	f7fe fe4f 	bl	8001214 <I2C_WriteOneByte>

  u8Temp = I2C_ReadOneByte(I2C_ADD_ICM20948,REG_ADD_USER_CTRL);
 8002576:	2103      	movs	r1, #3
 8002578:	20d0      	movs	r0, #208	@ 0xd0
 800257a:	f7fe fe29 	bl	80011d0 <I2C_ReadOneByte>
 800257e:	4603      	mov	r3, r0
 8002580:	73fb      	strb	r3, [r7, #15]
  u8Temp |= REG_VAL_BIT_I2C_MST_EN;
 8002582:	7bfb      	ldrb	r3, [r7, #15]
 8002584:	f043 0320 	orr.w	r3, r3, #32
 8002588:	73fb      	strb	r3, [r7, #15]
  I2C_WriteOneByte(I2C_ADD_ICM20948, REG_ADD_USER_CTRL, u8Temp);
 800258a:	7bfb      	ldrb	r3, [r7, #15]
 800258c:	461a      	mov	r2, r3
 800258e:	2103      	movs	r1, #3
 8002590:	20d0      	movs	r0, #208	@ 0xd0
 8002592:	f7fe fe3f 	bl	8001214 <I2C_WriteOneByte>
  HAL_Delay(5);
 8002596:	2005      	movs	r0, #5
 8002598:	f002 fb76 	bl	8004c88 <HAL_Delay>
  u8Temp &= ~REG_VAL_BIT_I2C_MST_EN;
 800259c:	7bfb      	ldrb	r3, [r7, #15]
 800259e:	f023 0320 	bic.w	r3, r3, #32
 80025a2:	73fb      	strb	r3, [r7, #15]
  I2C_WriteOneByte(I2C_ADD_ICM20948, REG_ADD_USER_CTRL, u8Temp);
 80025a4:	7bfb      	ldrb	r3, [r7, #15]
 80025a6:	461a      	mov	r2, r3
 80025a8:	2103      	movs	r1, #3
 80025aa:	20d0      	movs	r0, #208	@ 0xd0
 80025ac:	f7fe fe32 	bl	8001214 <I2C_WriteOneByte>

  I2C_WriteOneByte(I2C_ADD_ICM20948, REG_ADD_REG_BANK_SEL, REG_VAL_REG_BANK_3); //swtich bank3
 80025b0:	2230      	movs	r2, #48	@ 0x30
 80025b2:	217f      	movs	r1, #127	@ 0x7f
 80025b4:	20d0      	movs	r0, #208	@ 0xd0
 80025b6:	f7fe fe2d 	bl	8001214 <I2C_WriteOneByte>

  u8Temp = I2C_ReadOneByte(I2C_ADD_ICM20948,REG_ADD_I2C_SLV0_CTRL);
 80025ba:	2105      	movs	r1, #5
 80025bc:	20d0      	movs	r0, #208	@ 0xd0
 80025be:	f7fe fe07 	bl	80011d0 <I2C_ReadOneByte>
 80025c2:	4603      	mov	r3, r0
 80025c4:	73fb      	strb	r3, [r7, #15]
  u8Temp &= ~((REG_VAL_BIT_I2C_MST_EN)&(REG_VAL_BIT_MASK_LEN));
  I2C_WriteOneByte(I2C_ADD_ICM20948, REG_ADD_I2C_SLV0_CTRL,  u8Temp);
 80025c6:	7bfb      	ldrb	r3, [r7, #15]
 80025c8:	461a      	mov	r2, r3
 80025ca:	2105      	movs	r1, #5
 80025cc:	20d0      	movs	r0, #208	@ 0xd0
 80025ce:	f7fe fe21 	bl	8001214 <I2C_WriteOneByte>

  I2C_WriteOneByte(I2C_ADD_ICM20948, REG_ADD_REG_BANK_SEL, REG_VAL_REG_BANK_0); //swtich bank0
 80025d2:	2200      	movs	r2, #0
 80025d4:	217f      	movs	r1, #127	@ 0x7f
 80025d6:	20d0      	movs	r0, #208	@ 0xd0
 80025d8:	f7fe fe1c 	bl	8001214 <I2C_WriteOneByte>
    
    return;
 80025dc:	bf00      	nop
}
 80025de:	3710      	adds	r7, #16
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bd80      	pop	{r7, pc}

080025e4 <icm20948CalAvgValue>:

void icm20948CalAvgValue(uint8_t *pIndex, int16_t *pAvgBuffer, int16_t InVal, int32_t *pOutVal)
{ 
 80025e4:	b480      	push	{r7}
 80025e6:	b087      	sub	sp, #28
 80025e8:	af00      	add	r7, sp, #0
 80025ea:	60f8      	str	r0, [r7, #12]
 80025ec:	60b9      	str	r1, [r7, #8]
 80025ee:	603b      	str	r3, [r7, #0]
 80025f0:	4613      	mov	r3, r2
 80025f2:	80fb      	strh	r3, [r7, #6]
  uint8_t i;
  
  *(pAvgBuffer + ((*pIndex) ++)) = InVal;
 80025f4:	68fb      	ldr	r3, [r7, #12]
 80025f6:	781b      	ldrb	r3, [r3, #0]
 80025f8:	1c5a      	adds	r2, r3, #1
 80025fa:	b2d1      	uxtb	r1, r2
 80025fc:	68fa      	ldr	r2, [r7, #12]
 80025fe:	7011      	strb	r1, [r2, #0]
 8002600:	005b      	lsls	r3, r3, #1
 8002602:	68ba      	ldr	r2, [r7, #8]
 8002604:	4413      	add	r3, r2
 8002606:	88fa      	ldrh	r2, [r7, #6]
 8002608:	801a      	strh	r2, [r3, #0]
    *pIndex &= 0x07;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	781b      	ldrb	r3, [r3, #0]
 800260e:	f003 0307 	and.w	r3, r3, #7
 8002612:	b2da      	uxtb	r2, r3
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	701a      	strb	r2, [r3, #0]
    
    *pOutVal = 0;
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	2200      	movs	r2, #0
 800261c:	601a      	str	r2, [r3, #0]
  for(i = 0; i < 8; i ++) 
 800261e:	2300      	movs	r3, #0
 8002620:	75fb      	strb	r3, [r7, #23]
 8002622:	e00d      	b.n	8002640 <icm20948CalAvgValue+0x5c>
    {
      *pOutVal += *(pAvgBuffer + i);
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	7dfa      	ldrb	r2, [r7, #23]
 800262a:	0052      	lsls	r2, r2, #1
 800262c:	68b9      	ldr	r1, [r7, #8]
 800262e:	440a      	add	r2, r1
 8002630:	f9b2 2000 	ldrsh.w	r2, [r2]
 8002634:	441a      	add	r2, r3
 8002636:	683b      	ldr	r3, [r7, #0]
 8002638:	601a      	str	r2, [r3, #0]
  for(i = 0; i < 8; i ++) 
 800263a:	7dfb      	ldrb	r3, [r7, #23]
 800263c:	3301      	adds	r3, #1
 800263e:	75fb      	strb	r3, [r7, #23]
 8002640:	7dfb      	ldrb	r3, [r7, #23]
 8002642:	2b07      	cmp	r3, #7
 8002644:	d9ee      	bls.n	8002624 <icm20948CalAvgValue+0x40>
    }
    *pOutVal >>= 3;
 8002646:	683b      	ldr	r3, [r7, #0]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	10da      	asrs	r2, r3, #3
 800264c:	683b      	ldr	r3, [r7, #0]
 800264e:	601a      	str	r2, [r3, #0]
}
 8002650:	bf00      	nop
 8002652:	371c      	adds	r7, #28
 8002654:	46bd      	mov	sp, r7
 8002656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265a:	4770      	bx	lr

0800265c <icm20948GyroOffset>:

void icm20948GyroOffset(void)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	b086      	sub	sp, #24
 8002660:	af00      	add	r7, sp, #0
  uint8_t i;
  int16_t s16Gx = 0, s16Gy = 0, s16Gz = 0;
 8002662:	2300      	movs	r3, #0
 8002664:	80fb      	strh	r3, [r7, #6]
 8002666:	2300      	movs	r3, #0
 8002668:	80bb      	strh	r3, [r7, #4]
 800266a:	2300      	movs	r3, #0
 800266c:	807b      	strh	r3, [r7, #2]
  int32_t s32TempGx = 0, s32TempGy = 0, s32TempGz = 0;
 800266e:	2300      	movs	r3, #0
 8002670:	613b      	str	r3, [r7, #16]
 8002672:	2300      	movs	r3, #0
 8002674:	60fb      	str	r3, [r7, #12]
 8002676:	2300      	movs	r3, #0
 8002678:	60bb      	str	r3, [r7, #8]
  for(i = 0; i < 32; i ++)
 800267a:	2300      	movs	r3, #0
 800267c:	75fb      	strb	r3, [r7, #23]
 800267e:	e01d      	b.n	80026bc <icm20948GyroOffset+0x60>
  {
    icm20948GyroRead(&s16Gx, &s16Gy, &s16Gz);
 8002680:	1cba      	adds	r2, r7, #2
 8002682:	1d39      	adds	r1, r7, #4
 8002684:	1dbb      	adds	r3, r7, #6
 8002686:	4618      	mov	r0, r3
 8002688:	f7ff fce0 	bl	800204c <icm20948GyroRead>
    s32TempGx += s16Gx;
 800268c:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002690:	461a      	mov	r2, r3
 8002692:	693b      	ldr	r3, [r7, #16]
 8002694:	4413      	add	r3, r2
 8002696:	613b      	str	r3, [r7, #16]
    s32TempGy += s16Gy;
 8002698:	f9b7 3004 	ldrsh.w	r3, [r7, #4]
 800269c:	461a      	mov	r2, r3
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	4413      	add	r3, r2
 80026a2:	60fb      	str	r3, [r7, #12]
    s32TempGz += s16Gz;
 80026a4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80026a8:	461a      	mov	r2, r3
 80026aa:	68bb      	ldr	r3, [r7, #8]
 80026ac:	4413      	add	r3, r2
 80026ae:	60bb      	str	r3, [r7, #8]
    HAL_Delay(10);
 80026b0:	200a      	movs	r0, #10
 80026b2:	f002 fae9 	bl	8004c88 <HAL_Delay>
  for(i = 0; i < 32; i ++)
 80026b6:	7dfb      	ldrb	r3, [r7, #23]
 80026b8:	3301      	adds	r3, #1
 80026ba:	75fb      	strb	r3, [r7, #23]
 80026bc:	7dfb      	ldrb	r3, [r7, #23]
 80026be:	2b1f      	cmp	r3, #31
 80026c0:	d9de      	bls.n	8002680 <icm20948GyroOffset+0x24>
  }
  gstGyroOffset.s16X = s32TempGx >> 5;
 80026c2:	693b      	ldr	r3, [r7, #16]
 80026c4:	115b      	asrs	r3, r3, #5
 80026c6:	b21a      	sxth	r2, r3
 80026c8:	4b07      	ldr	r3, [pc, #28]	@ (80026e8 <icm20948GyroOffset+0x8c>)
 80026ca:	801a      	strh	r2, [r3, #0]
  gstGyroOffset.s16Y = s32TempGy >> 5;
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	115b      	asrs	r3, r3, #5
 80026d0:	b21a      	sxth	r2, r3
 80026d2:	4b05      	ldr	r3, [pc, #20]	@ (80026e8 <icm20948GyroOffset+0x8c>)
 80026d4:	805a      	strh	r2, [r3, #2]
  gstGyroOffset.s16Z = s32TempGz >> 5;
 80026d6:	68bb      	ldr	r3, [r7, #8]
 80026d8:	115b      	asrs	r3, r3, #5
 80026da:	b21a      	sxth	r2, r3
 80026dc:	4b02      	ldr	r3, [pc, #8]	@ (80026e8 <icm20948GyroOffset+0x8c>)
 80026de:	809a      	strh	r2, [r3, #4]
  return;
 80026e0:	bf00      	nop
}
 80026e2:	3718      	adds	r7, #24
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bd80      	pop	{r7, pc}
 80026e8:	200002ac 	.word	0x200002ac

080026ec <icm20948MagCheck>:

bool icm20948MagCheck(void)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b082      	sub	sp, #8
 80026f0:	af00      	add	r7, sp, #0
    bool bRet = false;
 80026f2:	2300      	movs	r3, #0
 80026f4:	71fb      	strb	r3, [r7, #7]
    uint8_t u8Ret[2];
    
    icm20948ReadSecondary( I2C_ADD_ICM20948_AK09916|I2C_ADD_ICM20948_AK09916_READ,
 80026f6:	1d3b      	adds	r3, r7, #4
 80026f8:	2202      	movs	r2, #2
 80026fa:	2100      	movs	r1, #0
 80026fc:	208c      	movs	r0, #140	@ 0x8c
 80026fe:	f7ff fe9b 	bl	8002438 <icm20948ReadSecondary>
                                REG_ADD_MAG_WIA1, 2,u8Ret);
    if( (u8Ret[0] == REG_VAL_MAG_WIA1) && ( u8Ret[1] == REG_VAL_MAG_WIA2) )
 8002702:	793b      	ldrb	r3, [r7, #4]
 8002704:	2b48      	cmp	r3, #72	@ 0x48
 8002706:	d104      	bne.n	8002712 <icm20948MagCheck+0x26>
 8002708:	797b      	ldrb	r3, [r7, #5]
 800270a:	2b09      	cmp	r3, #9
 800270c:	d101      	bne.n	8002712 <icm20948MagCheck+0x26>
    {
        bRet = true;
 800270e:	2301      	movs	r3, #1
 8002710:	71fb      	strb	r3, [r7, #7]
    }
    
    return bRet;
 8002712:	79fb      	ldrb	r3, [r7, #7]
}
 8002714:	4618      	mov	r0, r3
 8002716:	3708      	adds	r7, #8
 8002718:	46bd      	mov	sp, r7
 800271a:	bd80      	pop	{r7, pc}

0800271c <bmp280Check>:

BMP280_HandleTypeDef bmp280;
int32_t gs32Pressure0 = MSLP; 

bool bmp280Check(void)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	b082      	sub	sp, #8
 8002720:	af00      	add	r7, sp, #0
    bool bRet = false;
 8002722:	2300      	movs	r3, #0
 8002724:	71fb      	strb	r3, [r7, #7]
    if(0x58 == I2C_ReadOneByte(BMP280_ADDR, BMP280_REGISTER_CHIPID))
 8002726:	21d0      	movs	r1, #208	@ 0xd0
 8002728:	20ee      	movs	r0, #238	@ 0xee
 800272a:	f7fe fd51 	bl	80011d0 <I2C_ReadOneByte>
 800272e:	4603      	mov	r3, r0
 8002730:	2b58      	cmp	r3, #88	@ 0x58
 8002732:	d101      	bne.n	8002738 <bmp280Check+0x1c>
    {
        bRet = true;
 8002734:	2301      	movs	r3, #1
 8002736:	71fb      	strb	r3, [r7, #7]
    }
    return bRet;
 8002738:	79fb      	ldrb	r3, [r7, #7]
}
 800273a:	4618      	mov	r0, r3
 800273c:	3708      	adds	r7, #8
 800273e:	46bd      	mov	sp, r7
 8002740:	bd80      	pop	{r7, pc}
	...

08002744 <bmp280ReadCalibration>:

void bmp280ReadCalibration(void)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b082      	sub	sp, #8
 8002748:	af00      	add	r7, sp, #0
  uint8_t lsb, msb; 
  
  /* read the temperature calibration parameters */  
  lsb = I2C_ReadOneByte(BMP280_ADDR, BMP280_DIG_T1_LSB_REG);
 800274a:	2188      	movs	r1, #136	@ 0x88
 800274c:	20ee      	movs	r0, #238	@ 0xee
 800274e:	f7fe fd3f 	bl	80011d0 <I2C_ReadOneByte>
 8002752:	4603      	mov	r3, r0
 8002754:	71fb      	strb	r3, [r7, #7]
  msb = I2C_ReadOneByte(BMP280_ADDR, BMP280_DIG_T1_MSB_REG);
 8002756:	2189      	movs	r1, #137	@ 0x89
 8002758:	20ee      	movs	r0, #238	@ 0xee
 800275a:	f7fe fd39 	bl	80011d0 <I2C_ReadOneByte>
 800275e:	4603      	mov	r3, r0
 8002760:	71bb      	strb	r3, [r7, #6]
  dig_T1 = msb << 8 | lsb;
 8002762:	79bb      	ldrb	r3, [r7, #6]
 8002764:	021b      	lsls	r3, r3, #8
 8002766:	b21a      	sxth	r2, r3
 8002768:	79fb      	ldrb	r3, [r7, #7]
 800276a:	b21b      	sxth	r3, r3
 800276c:	4313      	orrs	r3, r2
 800276e:	b21b      	sxth	r3, r3
 8002770:	b29a      	uxth	r2, r3
 8002772:	4b77      	ldr	r3, [pc, #476]	@ (8002950 <bmp280ReadCalibration+0x20c>)
 8002774:	801a      	strh	r2, [r3, #0]
  lsb = I2C_ReadOneByte(BMP280_ADDR, BMP280_DIG_T2_LSB_REG);
 8002776:	218a      	movs	r1, #138	@ 0x8a
 8002778:	20ee      	movs	r0, #238	@ 0xee
 800277a:	f7fe fd29 	bl	80011d0 <I2C_ReadOneByte>
 800277e:	4603      	mov	r3, r0
 8002780:	71fb      	strb	r3, [r7, #7]
  msb = I2C_ReadOneByte(BMP280_ADDR, BMP280_DIG_T2_MSB_REG);
 8002782:	218b      	movs	r1, #139	@ 0x8b
 8002784:	20ee      	movs	r0, #238	@ 0xee
 8002786:	f7fe fd23 	bl	80011d0 <I2C_ReadOneByte>
 800278a:	4603      	mov	r3, r0
 800278c:	71bb      	strb	r3, [r7, #6]
  dig_T2 = msb << 8 | lsb;  
 800278e:	79bb      	ldrb	r3, [r7, #6]
 8002790:	021b      	lsls	r3, r3, #8
 8002792:	b21a      	sxth	r2, r3
 8002794:	79fb      	ldrb	r3, [r7, #7]
 8002796:	b21b      	sxth	r3, r3
 8002798:	4313      	orrs	r3, r2
 800279a:	b21a      	sxth	r2, r3
 800279c:	4b6c      	ldr	r3, [pc, #432]	@ (8002950 <bmp280ReadCalibration+0x20c>)
 800279e:	805a      	strh	r2, [r3, #2]
  lsb = I2C_ReadOneByte(BMP280_ADDR, BMP280_DIG_T3_LSB_REG);
 80027a0:	218c      	movs	r1, #140	@ 0x8c
 80027a2:	20ee      	movs	r0, #238	@ 0xee
 80027a4:	f7fe fd14 	bl	80011d0 <I2C_ReadOneByte>
 80027a8:	4603      	mov	r3, r0
 80027aa:	71fb      	strb	r3, [r7, #7]
  msb = I2C_ReadOneByte(BMP280_ADDR, BMP280_DIG_T3_MSB_REG);
 80027ac:	218d      	movs	r1, #141	@ 0x8d
 80027ae:	20ee      	movs	r0, #238	@ 0xee
 80027b0:	f7fe fd0e 	bl	80011d0 <I2C_ReadOneByte>
 80027b4:	4603      	mov	r3, r0
 80027b6:	71bb      	strb	r3, [r7, #6]
  dig_T3 = msb << 8 | lsb;  
 80027b8:	79bb      	ldrb	r3, [r7, #6]
 80027ba:	021b      	lsls	r3, r3, #8
 80027bc:	b21a      	sxth	r2, r3
 80027be:	79fb      	ldrb	r3, [r7, #7]
 80027c0:	b21b      	sxth	r3, r3
 80027c2:	4313      	orrs	r3, r2
 80027c4:	b21a      	sxth	r2, r3
 80027c6:	4b62      	ldr	r3, [pc, #392]	@ (8002950 <bmp280ReadCalibration+0x20c>)
 80027c8:	809a      	strh	r2, [r3, #4]
  
  /* read the pressure calibration parameters */  
  lsb = I2C_ReadOneByte(BMP280_ADDR, BMP280_DIG_P1_LSB_REG);
 80027ca:	218e      	movs	r1, #142	@ 0x8e
 80027cc:	20ee      	movs	r0, #238	@ 0xee
 80027ce:	f7fe fcff 	bl	80011d0 <I2C_ReadOneByte>
 80027d2:	4603      	mov	r3, r0
 80027d4:	71fb      	strb	r3, [r7, #7]
  msb = I2C_ReadOneByte(BMP280_ADDR, BMP280_DIG_P1_MSB_REG);    
 80027d6:	218f      	movs	r1, #143	@ 0x8f
 80027d8:	20ee      	movs	r0, #238	@ 0xee
 80027da:	f7fe fcf9 	bl	80011d0 <I2C_ReadOneByte>
 80027de:	4603      	mov	r3, r0
 80027e0:	71bb      	strb	r3, [r7, #6]
  dig_P1 = msb << 8 | lsb;  
 80027e2:	79bb      	ldrb	r3, [r7, #6]
 80027e4:	021b      	lsls	r3, r3, #8
 80027e6:	b21a      	sxth	r2, r3
 80027e8:	79fb      	ldrb	r3, [r7, #7]
 80027ea:	b21b      	sxth	r3, r3
 80027ec:	4313      	orrs	r3, r2
 80027ee:	b21b      	sxth	r3, r3
 80027f0:	b29a      	uxth	r2, r3
 80027f2:	4b57      	ldr	r3, [pc, #348]	@ (8002950 <bmp280ReadCalibration+0x20c>)
 80027f4:	80da      	strh	r2, [r3, #6]
  lsb = I2C_ReadOneByte(BMP280_ADDR, BMP280_DIG_P2_LSB_REG);
 80027f6:	2190      	movs	r1, #144	@ 0x90
 80027f8:	20ee      	movs	r0, #238	@ 0xee
 80027fa:	f7fe fce9 	bl	80011d0 <I2C_ReadOneByte>
 80027fe:	4603      	mov	r3, r0
 8002800:	71fb      	strb	r3, [r7, #7]
  msb = I2C_ReadOneByte(BMP280_ADDR, BMP280_DIG_P2_MSB_REG);      
 8002802:	2191      	movs	r1, #145	@ 0x91
 8002804:	20ee      	movs	r0, #238	@ 0xee
 8002806:	f7fe fce3 	bl	80011d0 <I2C_ReadOneByte>
 800280a:	4603      	mov	r3, r0
 800280c:	71bb      	strb	r3, [r7, #6]
  dig_P2 = msb << 8 | lsb;  
 800280e:	79bb      	ldrb	r3, [r7, #6]
 8002810:	021b      	lsls	r3, r3, #8
 8002812:	b21a      	sxth	r2, r3
 8002814:	79fb      	ldrb	r3, [r7, #7]
 8002816:	b21b      	sxth	r3, r3
 8002818:	4313      	orrs	r3, r2
 800281a:	b21a      	sxth	r2, r3
 800281c:	4b4c      	ldr	r3, [pc, #304]	@ (8002950 <bmp280ReadCalibration+0x20c>)
 800281e:	811a      	strh	r2, [r3, #8]
  lsb = I2C_ReadOneByte(BMP280_ADDR, BMP280_DIG_P3_LSB_REG);
 8002820:	2192      	movs	r1, #146	@ 0x92
 8002822:	20ee      	movs	r0, #238	@ 0xee
 8002824:	f7fe fcd4 	bl	80011d0 <I2C_ReadOneByte>
 8002828:	4603      	mov	r3, r0
 800282a:	71fb      	strb	r3, [r7, #7]
  msb = I2C_ReadOneByte(BMP280_ADDR, BMP280_DIG_P3_MSB_REG);  
 800282c:	2193      	movs	r1, #147	@ 0x93
 800282e:	20ee      	movs	r0, #238	@ 0xee
 8002830:	f7fe fcce 	bl	80011d0 <I2C_ReadOneByte>
 8002834:	4603      	mov	r3, r0
 8002836:	71bb      	strb	r3, [r7, #6]
  dig_P3 = msb << 8 | lsb;  
 8002838:	79bb      	ldrb	r3, [r7, #6]
 800283a:	021b      	lsls	r3, r3, #8
 800283c:	b21a      	sxth	r2, r3
 800283e:	79fb      	ldrb	r3, [r7, #7]
 8002840:	b21b      	sxth	r3, r3
 8002842:	4313      	orrs	r3, r2
 8002844:	b21a      	sxth	r2, r3
 8002846:	4b42      	ldr	r3, [pc, #264]	@ (8002950 <bmp280ReadCalibration+0x20c>)
 8002848:	815a      	strh	r2, [r3, #10]
  lsb = I2C_ReadOneByte(BMP280_ADDR, BMP280_DIG_P4_LSB_REG);
 800284a:	2194      	movs	r1, #148	@ 0x94
 800284c:	20ee      	movs	r0, #238	@ 0xee
 800284e:	f7fe fcbf 	bl	80011d0 <I2C_ReadOneByte>
 8002852:	4603      	mov	r3, r0
 8002854:	71fb      	strb	r3, [r7, #7]
  msb = I2C_ReadOneByte(BMP280_ADDR, BMP280_DIG_P4_MSB_REG);         
 8002856:	2195      	movs	r1, #149	@ 0x95
 8002858:	20ee      	movs	r0, #238	@ 0xee
 800285a:	f7fe fcb9 	bl	80011d0 <I2C_ReadOneByte>
 800285e:	4603      	mov	r3, r0
 8002860:	71bb      	strb	r3, [r7, #6]
  dig_P4 = msb << 8 | lsb;    
 8002862:	79bb      	ldrb	r3, [r7, #6]
 8002864:	021b      	lsls	r3, r3, #8
 8002866:	b21a      	sxth	r2, r3
 8002868:	79fb      	ldrb	r3, [r7, #7]
 800286a:	b21b      	sxth	r3, r3
 800286c:	4313      	orrs	r3, r2
 800286e:	b21a      	sxth	r2, r3
 8002870:	4b37      	ldr	r3, [pc, #220]	@ (8002950 <bmp280ReadCalibration+0x20c>)
 8002872:	819a      	strh	r2, [r3, #12]
  lsb = I2C_ReadOneByte(BMP280_ADDR, BMP280_DIG_P5_LSB_REG);
 8002874:	2196      	movs	r1, #150	@ 0x96
 8002876:	20ee      	movs	r0, #238	@ 0xee
 8002878:	f7fe fcaa 	bl	80011d0 <I2C_ReadOneByte>
 800287c:	4603      	mov	r3, r0
 800287e:	71fb      	strb	r3, [r7, #7]
  msb = I2C_ReadOneByte(BMP280_ADDR, BMP280_DIG_P5_MSB_REG);           
 8002880:	2197      	movs	r1, #151	@ 0x97
 8002882:	20ee      	movs	r0, #238	@ 0xee
 8002884:	f7fe fca4 	bl	80011d0 <I2C_ReadOneByte>
 8002888:	4603      	mov	r3, r0
 800288a:	71bb      	strb	r3, [r7, #6]
  dig_P5 = msb << 8 | lsb;  
 800288c:	79bb      	ldrb	r3, [r7, #6]
 800288e:	021b      	lsls	r3, r3, #8
 8002890:	b21a      	sxth	r2, r3
 8002892:	79fb      	ldrb	r3, [r7, #7]
 8002894:	b21b      	sxth	r3, r3
 8002896:	4313      	orrs	r3, r2
 8002898:	b21a      	sxth	r2, r3
 800289a:	4b2d      	ldr	r3, [pc, #180]	@ (8002950 <bmp280ReadCalibration+0x20c>)
 800289c:	81da      	strh	r2, [r3, #14]
  lsb = I2C_ReadOneByte(BMP280_ADDR, BMP280_DIG_P6_LSB_REG);
 800289e:	2198      	movs	r1, #152	@ 0x98
 80028a0:	20ee      	movs	r0, #238	@ 0xee
 80028a2:	f7fe fc95 	bl	80011d0 <I2C_ReadOneByte>
 80028a6:	4603      	mov	r3, r0
 80028a8:	71fb      	strb	r3, [r7, #7]
  msb = I2C_ReadOneByte(BMP280_ADDR, BMP280_DIG_P6_MSB_REG);          
 80028aa:	2199      	movs	r1, #153	@ 0x99
 80028ac:	20ee      	movs	r0, #238	@ 0xee
 80028ae:	f7fe fc8f 	bl	80011d0 <I2C_ReadOneByte>
 80028b2:	4603      	mov	r3, r0
 80028b4:	71bb      	strb	r3, [r7, #6]
  dig_P6 = msb << 8 | lsb;  
 80028b6:	79bb      	ldrb	r3, [r7, #6]
 80028b8:	021b      	lsls	r3, r3, #8
 80028ba:	b21a      	sxth	r2, r3
 80028bc:	79fb      	ldrb	r3, [r7, #7]
 80028be:	b21b      	sxth	r3, r3
 80028c0:	4313      	orrs	r3, r2
 80028c2:	b21a      	sxth	r2, r3
 80028c4:	4b22      	ldr	r3, [pc, #136]	@ (8002950 <bmp280ReadCalibration+0x20c>)
 80028c6:	821a      	strh	r2, [r3, #16]
  lsb = I2C_ReadOneByte(BMP280_ADDR, BMP280_DIG_P7_LSB_REG);
 80028c8:	219a      	movs	r1, #154	@ 0x9a
 80028ca:	20ee      	movs	r0, #238	@ 0xee
 80028cc:	f7fe fc80 	bl	80011d0 <I2C_ReadOneByte>
 80028d0:	4603      	mov	r3, r0
 80028d2:	71fb      	strb	r3, [r7, #7]
  msb = I2C_ReadOneByte(BMP280_ADDR, BMP280_DIG_P7_MSB_REG);           
 80028d4:	219b      	movs	r1, #155	@ 0x9b
 80028d6:	20ee      	movs	r0, #238	@ 0xee
 80028d8:	f7fe fc7a 	bl	80011d0 <I2C_ReadOneByte>
 80028dc:	4603      	mov	r3, r0
 80028de:	71bb      	strb	r3, [r7, #6]
  dig_P7 = msb << 8 | lsb;  
 80028e0:	79bb      	ldrb	r3, [r7, #6]
 80028e2:	021b      	lsls	r3, r3, #8
 80028e4:	b21a      	sxth	r2, r3
 80028e6:	79fb      	ldrb	r3, [r7, #7]
 80028e8:	b21b      	sxth	r3, r3
 80028ea:	4313      	orrs	r3, r2
 80028ec:	b21a      	sxth	r2, r3
 80028ee:	4b18      	ldr	r3, [pc, #96]	@ (8002950 <bmp280ReadCalibration+0x20c>)
 80028f0:	825a      	strh	r2, [r3, #18]
  lsb = I2C_ReadOneByte(BMP280_ADDR, BMP280_DIG_P8_LSB_REG);
 80028f2:	219c      	movs	r1, #156	@ 0x9c
 80028f4:	20ee      	movs	r0, #238	@ 0xee
 80028f6:	f7fe fc6b 	bl	80011d0 <I2C_ReadOneByte>
 80028fa:	4603      	mov	r3, r0
 80028fc:	71fb      	strb	r3, [r7, #7]
  msb = I2C_ReadOneByte(BMP280_ADDR, BMP280_DIG_P8_MSB_REG);         
 80028fe:	219d      	movs	r1, #157	@ 0x9d
 8002900:	20ee      	movs	r0, #238	@ 0xee
 8002902:	f7fe fc65 	bl	80011d0 <I2C_ReadOneByte>
 8002906:	4603      	mov	r3, r0
 8002908:	71bb      	strb	r3, [r7, #6]
  dig_P8 = msb << 8 | lsb;  
 800290a:	79bb      	ldrb	r3, [r7, #6]
 800290c:	021b      	lsls	r3, r3, #8
 800290e:	b21a      	sxth	r2, r3
 8002910:	79fb      	ldrb	r3, [r7, #7]
 8002912:	b21b      	sxth	r3, r3
 8002914:	4313      	orrs	r3, r2
 8002916:	b21a      	sxth	r2, r3
 8002918:	4b0d      	ldr	r3, [pc, #52]	@ (8002950 <bmp280ReadCalibration+0x20c>)
 800291a:	829a      	strh	r2, [r3, #20]
  lsb = I2C_ReadOneByte(BMP280_ADDR, BMP280_DIG_P9_LSB_REG);
 800291c:	219e      	movs	r1, #158	@ 0x9e
 800291e:	20ee      	movs	r0, #238	@ 0xee
 8002920:	f7fe fc56 	bl	80011d0 <I2C_ReadOneByte>
 8002924:	4603      	mov	r3, r0
 8002926:	71fb      	strb	r3, [r7, #7]
  msb = I2C_ReadOneByte(BMP280_ADDR, BMP280_DIG_P9_MSB_REG);            
 8002928:	219f      	movs	r1, #159	@ 0x9f
 800292a:	20ee      	movs	r0, #238	@ 0xee
 800292c:	f7fe fc50 	bl	80011d0 <I2C_ReadOneByte>
 8002930:	4603      	mov	r3, r0
 8002932:	71bb      	strb	r3, [r7, #6]
  dig_P9 = msb << 8 | lsb; 
 8002934:	79bb      	ldrb	r3, [r7, #6]
 8002936:	021b      	lsls	r3, r3, #8
 8002938:	b21a      	sxth	r2, r3
 800293a:	79fb      	ldrb	r3, [r7, #7]
 800293c:	b21b      	sxth	r3, r3
 800293e:	4313      	orrs	r3, r2
 8002940:	b21a      	sxth	r2, r3
 8002942:	4b03      	ldr	r3, [pc, #12]	@ (8002950 <bmp280ReadCalibration+0x20c>)
 8002944:	82da      	strh	r2, [r3, #22]

}
 8002946:	bf00      	nop
 8002948:	3708      	adds	r7, #8
 800294a:	46bd      	mov	sp, r7
 800294c:	bd80      	pop	{r7, pc}
 800294e:	bf00      	nop
 8002950:	200002c4 	.word	0x200002c4

08002954 <bmp280Init>:

void bmp280Init(void)
{
 8002954:	b580      	push	{r7, lr}
 8002956:	af00      	add	r7, sp, #0
  I2C_WriteOneByte(BMP280_ADDR, BMP280_REGISTER_CONTROL, 0xFF);
 8002958:	22ff      	movs	r2, #255	@ 0xff
 800295a:	21f4      	movs	r1, #244	@ 0xf4
 800295c:	20ee      	movs	r0, #238	@ 0xee
 800295e:	f7fe fc59 	bl	8001214 <I2C_WriteOneByte>
  I2C_WriteOneByte(BMP280_ADDR, BMP280_REGISTER_CONFIG, 0x14);
 8002962:	2214      	movs	r2, #20
 8002964:	21f5      	movs	r1, #245	@ 0xf5
 8002966:	20ee      	movs	r0, #238	@ 0xee
 8002968:	f7fe fc54 	bl	8001214 <I2C_WriteOneByte>
  bmp280ReadCalibration();
 800296c:	f7ff feea 	bl	8002744 <bmp280ReadCalibration>
}
 8002970:	bf00      	nop
 8002972:	bd80      	pop	{r7, pc}

08002974 <bmp280CompensateTemperature>:

float bmp280CompensateTemperature(int32_t adc_T)  
{  
 8002974:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002978:	b0a2      	sub	sp, #136	@ 0x88
 800297a:	af00      	add	r7, sp, #0
 800297c:	66f8      	str	r0, [r7, #108]	@ 0x6c
  int64_t var1, var2, temperature; 

  var1  = ((((adc_T>>3) - ((int64_t)dig_T1 <<1))) *((int64_t)dig_T2)) >> 11;
 800297e:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002980:	10db      	asrs	r3, r3, #3
 8002982:	17da      	asrs	r2, r3, #31
 8002984:	653b      	str	r3, [r7, #80]	@ 0x50
 8002986:	657a      	str	r2, [r7, #84]	@ 0x54
 8002988:	4b69      	ldr	r3, [pc, #420]	@ (8002b30 <bmp280CompensateTemperature+0x1bc>)
 800298a:	881b      	ldrh	r3, [r3, #0]
 800298c:	b29b      	uxth	r3, r3
 800298e:	2200      	movs	r2, #0
 8002990:	461c      	mov	r4, r3
 8002992:	4615      	mov	r5, r2
 8002994:	1923      	adds	r3, r4, r4
 8002996:	60bb      	str	r3, [r7, #8]
 8002998:	eb45 0305 	adc.w	r3, r5, r5
 800299c:	60fb      	str	r3, [r7, #12]
 800299e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80029a2:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 80029a6:	4621      	mov	r1, r4
 80029a8:	ebb1 0a02 	subs.w	sl, r1, r2
 80029ac:	4629      	mov	r1, r5
 80029ae:	eb61 0b03 	sbc.w	fp, r1, r3
 80029b2:	4b5f      	ldr	r3, [pc, #380]	@ (8002b30 <bmp280CompensateTemperature+0x1bc>)
 80029b4:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80029b8:	b21b      	sxth	r3, r3
 80029ba:	17da      	asrs	r2, r3, #31
 80029bc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80029be:	64fa      	str	r2, [r7, #76]	@ 0x4c
 80029c0:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	@ 0x48
 80029c4:	4603      	mov	r3, r0
 80029c6:	fb03 f20b 	mul.w	r2, r3, fp
 80029ca:	460b      	mov	r3, r1
 80029cc:	fb0a f303 	mul.w	r3, sl, r3
 80029d0:	4413      	add	r3, r2
 80029d2:	4602      	mov	r2, r0
 80029d4:	fbaa 8902 	umull	r8, r9, sl, r2
 80029d8:	444b      	add	r3, r9
 80029da:	4699      	mov	r9, r3
 80029dc:	f04f 0200 	mov.w	r2, #0
 80029e0:	f04f 0300 	mov.w	r3, #0
 80029e4:	ea4f 22d8 	mov.w	r2, r8, lsr #11
 80029e8:	ea42 5249 	orr.w	r2, r2, r9, lsl #21
 80029ec:	ea4f 23e9 	mov.w	r3, r9, asr #11
 80029f0:	e9c7 2320 	strd	r2, r3, [r7, #128]	@ 0x80
  var2  = (((((adc_T>>4) - ((int64_t)dig_T1)) *((adc_T>>4) - ((int64_t)dig_T1))) >> 12) *
 80029f4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80029f6:	111b      	asrs	r3, r3, #4
 80029f8:	17da      	asrs	r2, r3, #31
 80029fa:	643b      	str	r3, [r7, #64]	@ 0x40
 80029fc:	647a      	str	r2, [r7, #68]	@ 0x44
 80029fe:	4b4c      	ldr	r3, [pc, #304]	@ (8002b30 <bmp280CompensateTemperature+0x1bc>)
 8002a00:	881b      	ldrh	r3, [r3, #0]
 8002a02:	b29b      	uxth	r3, r3
 8002a04:	2200      	movs	r2, #0
 8002a06:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002a08:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002a0a:	e9d7 4510 	ldrd	r4, r5, [r7, #64]	@ 0x40
 8002a0e:	4623      	mov	r3, r4
 8002a10:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	@ 0x38
 8002a14:	4602      	mov	r2, r0
 8002a16:	1a9b      	subs	r3, r3, r2
 8002a18:	633b      	str	r3, [r7, #48]	@ 0x30
 8002a1a:	462b      	mov	r3, r5
 8002a1c:	460a      	mov	r2, r1
 8002a1e:	eb63 0302 	sbc.w	r3, r3, r2
 8002a22:	637b      	str	r3, [r7, #52]	@ 0x34
 8002a24:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8002a26:	111b      	asrs	r3, r3, #4
 8002a28:	17da      	asrs	r2, r3, #31
 8002a2a:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002a2c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002a2e:	4b40      	ldr	r3, [pc, #256]	@ (8002b30 <bmp280CompensateTemperature+0x1bc>)
 8002a30:	881b      	ldrh	r3, [r3, #0]
 8002a32:	b29b      	uxth	r3, r3
 8002a34:	2200      	movs	r2, #0
 8002a36:	623b      	str	r3, [r7, #32]
 8002a38:	627a      	str	r2, [r7, #36]	@ 0x24
 8002a3a:	e9d7 450a 	ldrd	r4, r5, [r7, #40]	@ 0x28
 8002a3e:	4623      	mov	r3, r4
 8002a40:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8002a44:	4602      	mov	r2, r0
 8002a46:	1a9b      	subs	r3, r3, r2
 8002a48:	61bb      	str	r3, [r7, #24]
 8002a4a:	462b      	mov	r3, r5
 8002a4c:	460a      	mov	r2, r1
 8002a4e:	eb63 0302 	sbc.w	r3, r3, r2
 8002a52:	61fb      	str	r3, [r7, #28]
 8002a54:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002a58:	462b      	mov	r3, r5
 8002a5a:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8002a5e:	4642      	mov	r2, r8
 8002a60:	fb02 f203 	mul.w	r2, r2, r3
 8002a64:	464b      	mov	r3, r9
 8002a66:	4621      	mov	r1, r4
 8002a68:	fb01 f303 	mul.w	r3, r1, r3
 8002a6c:	4413      	add	r3, r2
 8002a6e:	4622      	mov	r2, r4
 8002a70:	4641      	mov	r1, r8
 8002a72:	fba2 1201 	umull	r1, r2, r2, r1
 8002a76:	667a      	str	r2, [r7, #100]	@ 0x64
 8002a78:	460a      	mov	r2, r1
 8002a7a:	663a      	str	r2, [r7, #96]	@ 0x60
 8002a7c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8002a7e:	4413      	add	r3, r2
 8002a80:	667b      	str	r3, [r7, #100]	@ 0x64
 8002a82:	f04f 0200 	mov.w	r2, #0
 8002a86:	f04f 0300 	mov.w	r3, #0
 8002a8a:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002a8e:	4621      	mov	r1, r4
 8002a90:	0b0a      	lsrs	r2, r1, #12
 8002a92:	4629      	mov	r1, r5
 8002a94:	ea42 5201 	orr.w	r2, r2, r1, lsl #20
 8002a98:	4629      	mov	r1, r5
 8002a9a:	130b      	asrs	r3, r1, #12
          ((int64_t)dig_T3)) >> 14;
 8002a9c:	4924      	ldr	r1, [pc, #144]	@ (8002b30 <bmp280CompensateTemperature+0x1bc>)
 8002a9e:	f9b1 1004 	ldrsh.w	r1, [r1, #4]
 8002aa2:	b209      	sxth	r1, r1
 8002aa4:	17c8      	asrs	r0, r1, #31
 8002aa6:	6139      	str	r1, [r7, #16]
 8002aa8:	6178      	str	r0, [r7, #20]
  var2  = (((((adc_T>>4) - ((int64_t)dig_T1)) *((adc_T>>4) - ((int64_t)dig_T1))) >> 12) *
 8002aaa:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002aae:	4621      	mov	r1, r4
 8002ab0:	fb01 f003 	mul.w	r0, r1, r3
 8002ab4:	4629      	mov	r1, r5
 8002ab6:	fb02 f101 	mul.w	r1, r2, r1
 8002aba:	4401      	add	r1, r0
 8002abc:	4620      	mov	r0, r4
 8002abe:	fba2 2300 	umull	r2, r3, r2, r0
 8002ac2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002ac4:	4613      	mov	r3, r2
 8002ac6:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002ac8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002aca:	18cb      	adds	r3, r1, r3
 8002acc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8002ace:	f04f 0200 	mov.w	r2, #0
 8002ad2:	f04f 0300 	mov.w	r3, #0
 8002ad6:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 8002ada:	4621      	mov	r1, r4
 8002adc:	0b8a      	lsrs	r2, r1, #14
 8002ade:	4629      	mov	r1, r5
 8002ae0:	ea42 4281 	orr.w	r2, r2, r1, lsl #18
 8002ae4:	4629      	mov	r1, r5
 8002ae6:	138b      	asrs	r3, r1, #14
 8002ae8:	e9c7 231e 	strd	r2, r3, [r7, #120]	@ 0x78
  t_fine = var1 + var2;
 8002aec:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002af0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002af2:	4413      	add	r3, r2
 8002af4:	461a      	mov	r2, r3
 8002af6:	4b0e      	ldr	r3, [pc, #56]	@ (8002b30 <bmp280CompensateTemperature+0x1bc>)
 8002af8:	619a      	str	r2, [r3, #24]

  temperature = (t_fine * 5 + 128) >> 8; 
 8002afa:	4b0d      	ldr	r3, [pc, #52]	@ (8002b30 <bmp280CompensateTemperature+0x1bc>)
 8002afc:	699a      	ldr	r2, [r3, #24]
 8002afe:	4613      	mov	r3, r2
 8002b00:	009b      	lsls	r3, r3, #2
 8002b02:	4413      	add	r3, r2
 8002b04:	3380      	adds	r3, #128	@ 0x80
 8002b06:	121b      	asrs	r3, r3, #8
 8002b08:	17da      	asrs	r2, r3, #31
 8002b0a:	603b      	str	r3, [r7, #0]
 8002b0c:	607a      	str	r2, [r7, #4]
 8002b0e:	e9d7 3400 	ldrd	r3, r4, [r7]
 8002b12:	e9c7 341c 	strd	r3, r4, [r7, #112]	@ 0x70
 
  return (float)temperature;  
 8002b16:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 8002b1a:	f7fe f965 	bl	8000de8 <__aeabi_l2f>
 8002b1e:	4603      	mov	r3, r0
 8002b20:	ee07 3a90 	vmov	s15, r3
} 
 8002b24:	eeb0 0a67 	vmov.f32	s0, s15
 8002b28:	3788      	adds	r7, #136	@ 0x88
 8002b2a:	46bd      	mov	sp, r7
 8002b2c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002b30:	200002c4 	.word	0x200002c4

08002b34 <bmp280CompensatePressure>:

float bmp280CompensatePressure(int32_t adc_P)
{  
 8002b34:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002b38:	b0c6      	sub	sp, #280	@ 0x118
 8002b3a:	af00      	add	r7, sp, #0
 8002b3c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
  int64_t var1, var2;
  uint64_t pressure;  
#if 1
  var1 = ((int64_t)t_fine) - 128000;
 8002b40:	4bae      	ldr	r3, [pc, #696]	@ (8002dfc <bmp280CompensatePressure+0x2c8>)
 8002b42:	699b      	ldr	r3, [r3, #24]
 8002b44:	17da      	asrs	r2, r3, #31
 8002b46:	461c      	mov	r4, r3
 8002b48:	4615      	mov	r5, r2
 8002b4a:	f5b4 3afa 	subs.w	sl, r4, #128000	@ 0x1f400
 8002b4e:	f145 3bff 	adc.w	fp, r5, #4294967295	@ 0xffffffff
 8002b52:	e9c7 ab44 	strd	sl, fp, [r7, #272]	@ 0x110
  var2 = var1 * var1 * (int64_t)dig_P6; 
 8002b56:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8002b5a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002b5e:	fb03 f102 	mul.w	r1, r3, r2
 8002b62:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8002b66:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002b6a:	fb02 f303 	mul.w	r3, r2, r3
 8002b6e:	18ca      	adds	r2, r1, r3
 8002b70:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002b74:	fba3 8903 	umull	r8, r9, r3, r3
 8002b78:	eb02 0309 	add.w	r3, r2, r9
 8002b7c:	4699      	mov	r9, r3
 8002b7e:	4b9f      	ldr	r3, [pc, #636]	@ (8002dfc <bmp280CompensatePressure+0x2c8>)
 8002b80:	f9b3 3010 	ldrsh.w	r3, [r3, #16]
 8002b84:	b21b      	sxth	r3, r3
 8002b86:	17da      	asrs	r2, r3, #31
 8002b88:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002b8c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002b90:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	@ 0xa8
 8002b94:	4603      	mov	r3, r0
 8002b96:	fb03 f209 	mul.w	r2, r3, r9
 8002b9a:	460b      	mov	r3, r1
 8002b9c:	fb08 f303 	mul.w	r3, r8, r3
 8002ba0:	4413      	add	r3, r2
 8002ba2:	4602      	mov	r2, r0
 8002ba4:	fba8 1202 	umull	r1, r2, r8, r2
 8002ba8:	f8c7 20b4 	str.w	r2, [r7, #180]	@ 0xb4
 8002bac:	460a      	mov	r2, r1
 8002bae:	f8c7 20b0 	str.w	r2, [r7, #176]	@ 0xb0
 8002bb2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002bb6:	4413      	add	r3, r2
 8002bb8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002bbc:	e9d7 342c 	ldrd	r3, r4, [r7, #176]	@ 0xb0
 8002bc0:	e9c7 3442 	strd	r3, r4, [r7, #264]	@ 0x108
 8002bc4:	e9c7 3442 	strd	r3, r4, [r7, #264]	@ 0x108
  var2 = var2 + ((var1*(int64_t)dig_P5)<<17);
 8002bc8:	4b8c      	ldr	r3, [pc, #560]	@ (8002dfc <bmp280CompensatePressure+0x2c8>)
 8002bca:	f9b3 300e 	ldrsh.w	r3, [r3, #14]
 8002bce:	b21b      	sxth	r3, r3
 8002bd0:	17da      	asrs	r2, r3, #31
 8002bd2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002bd6:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002bda:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002bde:	e9d7 4528 	ldrd	r4, r5, [r7, #160]	@ 0xa0
 8002be2:	462a      	mov	r2, r5
 8002be4:	fb02 f203 	mul.w	r2, r2, r3
 8002be8:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002bec:	4621      	mov	r1, r4
 8002bee:	fb01 f303 	mul.w	r3, r1, r3
 8002bf2:	441a      	add	r2, r3
 8002bf4:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002bf8:	4621      	mov	r1, r4
 8002bfa:	fba3 1301 	umull	r1, r3, r3, r1
 8002bfe:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8002c02:	460b      	mov	r3, r1
 8002c04:	f8c7 30f0 	str.w	r3, [r7, #240]	@ 0xf0
 8002c08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c0c:	18d3      	adds	r3, r2, r3
 8002c0e:	f8c7 30f4 	str.w	r3, [r7, #244]	@ 0xf4
 8002c12:	f04f 0000 	mov.w	r0, #0
 8002c16:	f04f 0100 	mov.w	r1, #0
 8002c1a:	e9d7 453c 	ldrd	r4, r5, [r7, #240]	@ 0xf0
 8002c1e:	462b      	mov	r3, r5
 8002c20:	0459      	lsls	r1, r3, #17
 8002c22:	4623      	mov	r3, r4
 8002c24:	ea41 31d3 	orr.w	r1, r1, r3, lsr #15
 8002c28:	4623      	mov	r3, r4
 8002c2a:	0458      	lsls	r0, r3, #17
 8002c2c:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	@ 0x108
 8002c30:	1814      	adds	r4, r2, r0
 8002c32:	63bc      	str	r4, [r7, #56]	@ 0x38
 8002c34:	414b      	adcs	r3, r1
 8002c36:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002c38:	e9d7 340e 	ldrd	r3, r4, [r7, #56]	@ 0x38
 8002c3c:	e9c7 3442 	strd	r3, r4, [r7, #264]	@ 0x108
  var2 = var2 + (((int64_t)dig_P4)<<35);
 8002c40:	4b6e      	ldr	r3, [pc, #440]	@ (8002dfc <bmp280CompensatePressure+0x2c8>)
 8002c42:	f9b3 300c 	ldrsh.w	r3, [r3, #12]
 8002c46:	b21b      	sxth	r3, r3
 8002c48:	17da      	asrs	r2, r3, #31
 8002c4a:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002c4e:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8002c52:	f04f 0000 	mov.w	r0, #0
 8002c56:	f04f 0100 	mov.w	r1, #0
 8002c5a:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002c5e:	00d9      	lsls	r1, r3, #3
 8002c60:	2000      	movs	r0, #0
 8002c62:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	@ 0x108
 8002c66:	1814      	adds	r4, r2, r0
 8002c68:	633c      	str	r4, [r7, #48]	@ 0x30
 8002c6a:	414b      	adcs	r3, r1
 8002c6c:	637b      	str	r3, [r7, #52]	@ 0x34
 8002c6e:	e9d7 340c 	ldrd	r3, r4, [r7, #48]	@ 0x30
 8002c72:	e9c7 3442 	strd	r3, r4, [r7, #264]	@ 0x108
  var1 = ((var1 * var1 * (int64_t)dig_P3)>>8) + ((var1 * (int64_t)dig_P2)<<12);
 8002c76:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8002c7a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002c7e:	fb03 f102 	mul.w	r1, r3, r2
 8002c82:	f8d7 2114 	ldr.w	r2, [r7, #276]	@ 0x114
 8002c86:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002c8a:	fb02 f303 	mul.w	r3, r2, r3
 8002c8e:	18ca      	adds	r2, r1, r3
 8002c90:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002c94:	fba3 1303 	umull	r1, r3, r3, r3
 8002c98:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8002c9c:	460b      	mov	r3, r1
 8002c9e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002ca2:	f8d7 30ec 	ldr.w	r3, [r7, #236]	@ 0xec
 8002ca6:	18d3      	adds	r3, r2, r3
 8002ca8:	f8c7 30ec 	str.w	r3, [r7, #236]	@ 0xec
 8002cac:	4b53      	ldr	r3, [pc, #332]	@ (8002dfc <bmp280CompensatePressure+0x2c8>)
 8002cae:	f9b3 300a 	ldrsh.w	r3, [r3, #10]
 8002cb2:	b21b      	sxth	r3, r3
 8002cb4:	17da      	asrs	r2, r3, #31
 8002cb6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002cba:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002cbe:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8002cc2:	462b      	mov	r3, r5
 8002cc4:	e9d7 8924 	ldrd	r8, r9, [r7, #144]	@ 0x90
 8002cc8:	4642      	mov	r2, r8
 8002cca:	fb02 f203 	mul.w	r2, r2, r3
 8002cce:	464b      	mov	r3, r9
 8002cd0:	4621      	mov	r1, r4
 8002cd2:	fb01 f303 	mul.w	r3, r1, r3
 8002cd6:	4413      	add	r3, r2
 8002cd8:	4622      	mov	r2, r4
 8002cda:	4641      	mov	r1, r8
 8002cdc:	fba2 1201 	umull	r1, r2, r2, r1
 8002ce0:	f8c7 20e4 	str.w	r2, [r7, #228]	@ 0xe4
 8002ce4:	460a      	mov	r2, r1
 8002ce6:	f8c7 20e0 	str.w	r2, [r7, #224]	@ 0xe0
 8002cea:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8002cee:	4413      	add	r3, r2
 8002cf0:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002cf4:	f04f 0000 	mov.w	r0, #0
 8002cf8:	f04f 0100 	mov.w	r1, #0
 8002cfc:	e9d7 4538 	ldrd	r4, r5, [r7, #224]	@ 0xe0
 8002d00:	4623      	mov	r3, r4
 8002d02:	0a18      	lsrs	r0, r3, #8
 8002d04:	462b      	mov	r3, r5
 8002d06:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 8002d0a:	462b      	mov	r3, r5
 8002d0c:	1219      	asrs	r1, r3, #8
 8002d0e:	4b3b      	ldr	r3, [pc, #236]	@ (8002dfc <bmp280CompensatePressure+0x2c8>)
 8002d10:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 8002d14:	b21b      	sxth	r3, r3
 8002d16:	17da      	asrs	r2, r3, #31
 8002d18:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002d1c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002d20:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002d24:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002d28:	464a      	mov	r2, r9
 8002d2a:	fb02 f203 	mul.w	r2, r2, r3
 8002d2e:	f8d7 3114 	ldr.w	r3, [r7, #276]	@ 0x114
 8002d32:	4644      	mov	r4, r8
 8002d34:	fb04 f303 	mul.w	r3, r4, r3
 8002d38:	441a      	add	r2, r3
 8002d3a:	f8d7 3110 	ldr.w	r3, [r7, #272]	@ 0x110
 8002d3e:	4644      	mov	r4, r8
 8002d40:	fba3 4304 	umull	r4, r3, r3, r4
 8002d44:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8002d48:	4623      	mov	r3, r4
 8002d4a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002d4e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002d52:	18d3      	adds	r3, r2, r3
 8002d54:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
 8002d58:	f04f 0200 	mov.w	r2, #0
 8002d5c:	f04f 0300 	mov.w	r3, #0
 8002d60:	e9d7 8936 	ldrd	r8, r9, [r7, #216]	@ 0xd8
 8002d64:	464c      	mov	r4, r9
 8002d66:	0323      	lsls	r3, r4, #12
 8002d68:	4644      	mov	r4, r8
 8002d6a:	ea43 5314 	orr.w	r3, r3, r4, lsr #20
 8002d6e:	4644      	mov	r4, r8
 8002d70:	0322      	lsls	r2, r4, #12
 8002d72:	1884      	adds	r4, r0, r2
 8002d74:	62bc      	str	r4, [r7, #40]	@ 0x28
 8002d76:	eb41 0303 	adc.w	r3, r1, r3
 8002d7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002d7c:	e9d7 340a 	ldrd	r3, r4, [r7, #40]	@ 0x28
 8002d80:	e9c7 3444 	strd	r3, r4, [r7, #272]	@ 0x110
  var1 = (((((int64_t)1)<<47)+var1))*((int64_t)dig_P1)>>33; 
 8002d84:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8002d88:	f503 4100 	add.w	r1, r3, #32768	@ 0x8000
 8002d8c:	f8c7 1084 	str.w	r1, [r7, #132]	@ 0x84
 8002d90:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002d94:	4b19      	ldr	r3, [pc, #100]	@ (8002dfc <bmp280CompensatePressure+0x2c8>)
 8002d96:	88db      	ldrh	r3, [r3, #6]
 8002d98:	b29b      	uxth	r3, r3
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002d9e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002da0:	e9d7 4520 	ldrd	r4, r5, [r7, #128]	@ 0x80
 8002da4:	462b      	mov	r3, r5
 8002da6:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002daa:	4642      	mov	r2, r8
 8002dac:	fb02 f203 	mul.w	r2, r2, r3
 8002db0:	464b      	mov	r3, r9
 8002db2:	4621      	mov	r1, r4
 8002db4:	fb01 f303 	mul.w	r3, r1, r3
 8002db8:	4413      	add	r3, r2
 8002dba:	4622      	mov	r2, r4
 8002dbc:	4641      	mov	r1, r8
 8002dbe:	fba2 1201 	umull	r1, r2, r2, r1
 8002dc2:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8002dc6:	460a      	mov	r2, r1
 8002dc8:	f8c7 20d0 	str.w	r2, [r7, #208]	@ 0xd0
 8002dcc:	f8d7 20d4 	ldr.w	r2, [r7, #212]	@ 0xd4
 8002dd0:	4413      	add	r3, r2
 8002dd2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
 8002dd6:	f04f 0200 	mov.w	r2, #0
 8002dda:	f04f 0300 	mov.w	r3, #0
 8002dde:	e9d7 4534 	ldrd	r4, r5, [r7, #208]	@ 0xd0
 8002de2:	4629      	mov	r1, r5
 8002de4:	104a      	asrs	r2, r1, #1
 8002de6:	4629      	mov	r1, r5
 8002de8:	17cb      	asrs	r3, r1, #31
 8002dea:	e9c7 2344 	strd	r2, r3, [r7, #272]	@ 0x110

  if (var1 == 0) {  
 8002dee:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8002df2:	4313      	orrs	r3, r2
 8002df4:	d106      	bne.n	8002e04 <bmp280CompensatePressure+0x2d0>
    return 0; // avoid exception caused by division by zero  
 8002df6:	eddf 7a02 	vldr	s15, [pc, #8]	@ 8002e00 <bmp280CompensatePressure+0x2cc>
 8002dfa:	e157      	b.n	80030ac <bmp280CompensatePressure+0x578>
 8002dfc:	200002c4 	.word	0x200002c4
 8002e00:	00000000 	.word	0x00000000
  }  

  pressure = 1048576.0 - adc_P;  
 8002e04:	f8d7 00fc 	ldr.w	r0, [r7, #252]	@ 0xfc
 8002e08:	f7fd fb8c 	bl	8000524 <__aeabi_i2d>
 8002e0c:	4602      	mov	r2, r0
 8002e0e:	460b      	mov	r3, r1
 8002e10:	f04f 0000 	mov.w	r0, #0
 8002e14:	49a9      	ldr	r1, [pc, #676]	@ (80030bc <bmp280CompensatePressure+0x588>)
 8002e16:	f7fd fa37 	bl	8000288 <__aeabi_dsub>
 8002e1a:	4602      	mov	r2, r0
 8002e1c:	460b      	mov	r3, r1
 8002e1e:	4610      	mov	r0, r2
 8002e20:	4619      	mov	r1, r3
 8002e22:	f7fe f837 	bl	8000e94 <__aeabi_d2ulz>
 8002e26:	4602      	mov	r2, r0
 8002e28:	460b      	mov	r3, r1
 8002e2a:	e9c7 2340 	strd	r2, r3, [r7, #256]	@ 0x100
  pressure = (((pressure<<31) - var2)*3125) / var1; 
 8002e2e:	e9d7 2340 	ldrd	r2, r3, [r7, #256]	@ 0x100
 8002e32:	f04f 0000 	mov.w	r0, #0
 8002e36:	f04f 0100 	mov.w	r1, #0
 8002e3a:	07d9      	lsls	r1, r3, #31
 8002e3c:	ea41 0152 	orr.w	r1, r1, r2, lsr #1
 8002e40:	07d0      	lsls	r0, r2, #31
 8002e42:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	@ 0x108
 8002e46:	1a84      	subs	r4, r0, r2
 8002e48:	673c      	str	r4, [r7, #112]	@ 0x70
 8002e4a:	eb61 0303 	sbc.w	r3, r1, r3
 8002e4e:	677b      	str	r3, [r7, #116]	@ 0x74
 8002e50:	e9d7 451c 	ldrd	r4, r5, [r7, #112]	@ 0x70
 8002e54:	4622      	mov	r2, r4
 8002e56:	462b      	mov	r3, r5
 8002e58:	1891      	adds	r1, r2, r2
 8002e5a:	6239      	str	r1, [r7, #32]
 8002e5c:	415b      	adcs	r3, r3
 8002e5e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002e60:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002e64:	4621      	mov	r1, r4
 8002e66:	1851      	adds	r1, r2, r1
 8002e68:	61b9      	str	r1, [r7, #24]
 8002e6a:	4629      	mov	r1, r5
 8002e6c:	414b      	adcs	r3, r1
 8002e6e:	61fb      	str	r3, [r7, #28]
 8002e70:	f04f 0200 	mov.w	r2, #0
 8002e74:	f04f 0300 	mov.w	r3, #0
 8002e78:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 8002e7c:	4649      	mov	r1, r9
 8002e7e:	018b      	lsls	r3, r1, #6
 8002e80:	4641      	mov	r1, r8
 8002e82:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002e86:	4641      	mov	r1, r8
 8002e88:	018a      	lsls	r2, r1, #6
 8002e8a:	4641      	mov	r1, r8
 8002e8c:	1889      	adds	r1, r1, r2
 8002e8e:	6139      	str	r1, [r7, #16]
 8002e90:	4649      	mov	r1, r9
 8002e92:	eb43 0101 	adc.w	r1, r3, r1
 8002e96:	6179      	str	r1, [r7, #20]
 8002e98:	f04f 0200 	mov.w	r2, #0
 8002e9c:	f04f 0300 	mov.w	r3, #0
 8002ea0:	e9d7 8904 	ldrd	r8, r9, [r7, #16]
 8002ea4:	4649      	mov	r1, r9
 8002ea6:	008b      	lsls	r3, r1, #2
 8002ea8:	4641      	mov	r1, r8
 8002eaa:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002eae:	4641      	mov	r1, r8
 8002eb0:	008a      	lsls	r2, r1, #2
 8002eb2:	4610      	mov	r0, r2
 8002eb4:	4619      	mov	r1, r3
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	4622      	mov	r2, r4
 8002eba:	189b      	adds	r3, r3, r2
 8002ebc:	60bb      	str	r3, [r7, #8]
 8002ebe:	460b      	mov	r3, r1
 8002ec0:	462a      	mov	r2, r5
 8002ec2:	eb42 0303 	adc.w	r3, r2, r3
 8002ec6:	60fb      	str	r3, [r7, #12]
 8002ec8:	f04f 0200 	mov.w	r2, #0
 8002ecc:	f04f 0300 	mov.w	r3, #0
 8002ed0:	e9d7 8902 	ldrd	r8, r9, [r7, #8]
 8002ed4:	4649      	mov	r1, r9
 8002ed6:	008b      	lsls	r3, r1, #2
 8002ed8:	4641      	mov	r1, r8
 8002eda:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002ede:	4641      	mov	r1, r8
 8002ee0:	008a      	lsls	r2, r1, #2
 8002ee2:	4610      	mov	r0, r2
 8002ee4:	4619      	mov	r1, r3
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	4622      	mov	r2, r4
 8002eea:	189b      	adds	r3, r3, r2
 8002eec:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002eee:	462b      	mov	r3, r5
 8002ef0:	460a      	mov	r2, r1
 8002ef2:	eb42 0303 	adc.w	r3, r2, r3
 8002ef6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002ef8:	e9d7 2344 	ldrd	r2, r3, [r7, #272]	@ 0x110
 8002efc:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002f00:	f7fd ffb0 	bl	8000e64 <__aeabi_uldivmod>
 8002f04:	4602      	mov	r2, r0
 8002f06:	460b      	mov	r3, r1
 8002f08:	e9c7 2340 	strd	r2, r3, [r7, #256]	@ 0x100
  var1 = (((int64_t)dig_P9) * (pressure>>13) * (pressure>>13)) >> 25;
 8002f0c:	4b6c      	ldr	r3, [pc, #432]	@ (80030c0 <bmp280CompensatePressure+0x58c>)
 8002f0e:	f9b3 3016 	ldrsh.w	r3, [r3, #22]
 8002f12:	b21b      	sxth	r3, r3
 8002f14:	17da      	asrs	r2, r3, #31
 8002f16:	663b      	str	r3, [r7, #96]	@ 0x60
 8002f18:	667a      	str	r2, [r7, #100]	@ 0x64
 8002f1a:	e9d7 2340 	ldrd	r2, r3, [r7, #256]	@ 0x100
 8002f1e:	f04f 0000 	mov.w	r0, #0
 8002f22:	f04f 0100 	mov.w	r1, #0
 8002f26:	0b50      	lsrs	r0, r2, #13
 8002f28:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8002f2c:	0b59      	lsrs	r1, r3, #13
 8002f2e:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002f32:	462b      	mov	r3, r5
 8002f34:	fb00 f203 	mul.w	r2, r0, r3
 8002f38:	4623      	mov	r3, r4
 8002f3a:	fb03 f301 	mul.w	r3, r3, r1
 8002f3e:	4413      	add	r3, r2
 8002f40:	4622      	mov	r2, r4
 8002f42:	fba2 1200 	umull	r1, r2, r2, r0
 8002f46:	f8c7 20cc 	str.w	r2, [r7, #204]	@ 0xcc
 8002f4a:	460a      	mov	r2, r1
 8002f4c:	f8c7 20c8 	str.w	r2, [r7, #200]	@ 0xc8
 8002f50:	f8d7 20cc 	ldr.w	r2, [r7, #204]	@ 0xcc
 8002f54:	4413      	add	r3, r2
 8002f56:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8002f5a:	e9d7 2340 	ldrd	r2, r3, [r7, #256]	@ 0x100
 8002f5e:	f04f 0000 	mov.w	r0, #0
 8002f62:	f04f 0100 	mov.w	r1, #0
 8002f66:	0b50      	lsrs	r0, r2, #13
 8002f68:	ea40 40c3 	orr.w	r0, r0, r3, lsl #19
 8002f6c:	0b59      	lsrs	r1, r3, #13
 8002f6e:	e9d7 4532 	ldrd	r4, r5, [r7, #200]	@ 0xc8
 8002f72:	462b      	mov	r3, r5
 8002f74:	fb00 f203 	mul.w	r2, r0, r3
 8002f78:	4623      	mov	r3, r4
 8002f7a:	fb03 f301 	mul.w	r3, r3, r1
 8002f7e:	4413      	add	r3, r2
 8002f80:	4622      	mov	r2, r4
 8002f82:	fba2 1200 	umull	r1, r2, r2, r0
 8002f86:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002f8a:	460a      	mov	r2, r1
 8002f8c:	f8c7 20c0 	str.w	r2, [r7, #192]	@ 0xc0
 8002f90:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002f94:	4413      	add	r3, r2
 8002f96:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002f9a:	f04f 0200 	mov.w	r2, #0
 8002f9e:	f04f 0300 	mov.w	r3, #0
 8002fa2:	e9d7 4530 	ldrd	r4, r5, [r7, #192]	@ 0xc0
 8002fa6:	4621      	mov	r1, r4
 8002fa8:	0e4a      	lsrs	r2, r1, #25
 8002faa:	4629      	mov	r1, r5
 8002fac:	ea42 12c1 	orr.w	r2, r2, r1, lsl #7
 8002fb0:	4629      	mov	r1, r5
 8002fb2:	0e4b      	lsrs	r3, r1, #25
 8002fb4:	e9c7 2344 	strd	r2, r3, [r7, #272]	@ 0x110
  var2 = (((int64_t)dig_P8) * pressure) >> 19;
 8002fb8:	4b41      	ldr	r3, [pc, #260]	@ (80030c0 <bmp280CompensatePressure+0x58c>)
 8002fba:	f9b3 3014 	ldrsh.w	r3, [r3, #20]
 8002fbe:	b21b      	sxth	r3, r3
 8002fc0:	17da      	asrs	r2, r3, #31
 8002fc2:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002fc4:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002fc6:	f8d7 3100 	ldr.w	r3, [r7, #256]	@ 0x100
 8002fca:	e9d7 4516 	ldrd	r4, r5, [r7, #88]	@ 0x58
 8002fce:	462a      	mov	r2, r5
 8002fd0:	fb02 f203 	mul.w	r2, r2, r3
 8002fd4:	f8d7 3104 	ldr.w	r3, [r7, #260]	@ 0x104
 8002fd8:	4621      	mov	r1, r4
 8002fda:	fb01 f303 	mul.w	r3, r1, r3
 8002fde:	4413      	add	r3, r2
 8002fe0:	f8d7 2100 	ldr.w	r2, [r7, #256]	@ 0x100
 8002fe4:	4621      	mov	r1, r4
 8002fe6:	fba2 1201 	umull	r1, r2, r2, r1
 8002fea:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002fee:	460a      	mov	r2, r1
 8002ff0:	f8c7 20b8 	str.w	r2, [r7, #184]	@ 0xb8
 8002ff4:	f8d7 20bc 	ldr.w	r2, [r7, #188]	@ 0xbc
 8002ff8:	4413      	add	r3, r2
 8002ffa:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
 8002ffe:	f04f 0200 	mov.w	r2, #0
 8003002:	f04f 0300 	mov.w	r3, #0
 8003006:	e9d7 452e 	ldrd	r4, r5, [r7, #184]	@ 0xb8
 800300a:	4621      	mov	r1, r4
 800300c:	0cca      	lsrs	r2, r1, #19
 800300e:	4629      	mov	r1, r5
 8003010:	ea42 3241 	orr.w	r2, r2, r1, lsl #13
 8003014:	4629      	mov	r1, r5
 8003016:	0ccb      	lsrs	r3, r1, #19
 8003018:	e9c7 2342 	strd	r2, r3, [r7, #264]	@ 0x108
  pressure = ((pressure + var1 + var2) >> 8) + (((int64_t)dig_P7)<<4);
 800301c:	e9d7 0144 	ldrd	r0, r1, [r7, #272]	@ 0x110
 8003020:	e9d7 2340 	ldrd	r2, r3, [r7, #256]	@ 0x100
 8003024:	1884      	adds	r4, r0, r2
 8003026:	653c      	str	r4, [r7, #80]	@ 0x50
 8003028:	eb41 0303 	adc.w	r3, r1, r3
 800302c:	657b      	str	r3, [r7, #84]	@ 0x54
 800302e:	e9d7 2342 	ldrd	r2, r3, [r7, #264]	@ 0x108
 8003032:	e9d7 4514 	ldrd	r4, r5, [r7, #80]	@ 0x50
 8003036:	4621      	mov	r1, r4
 8003038:	1889      	adds	r1, r1, r2
 800303a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800303c:	4629      	mov	r1, r5
 800303e:	eb43 0101 	adc.w	r1, r3, r1
 8003042:	64f9      	str	r1, [r7, #76]	@ 0x4c
 8003044:	f04f 0000 	mov.w	r0, #0
 8003048:	f04f 0100 	mov.w	r1, #0
 800304c:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 8003050:	4623      	mov	r3, r4
 8003052:	0a18      	lsrs	r0, r3, #8
 8003054:	462b      	mov	r3, r5
 8003056:	ea40 6003 	orr.w	r0, r0, r3, lsl #24
 800305a:	462b      	mov	r3, r5
 800305c:	0a19      	lsrs	r1, r3, #8
 800305e:	4b18      	ldr	r3, [pc, #96]	@ (80030c0 <bmp280CompensatePressure+0x58c>)
 8003060:	f9b3 3012 	ldrsh.w	r3, [r3, #18]
 8003064:	b21b      	sxth	r3, r3
 8003066:	17da      	asrs	r2, r3, #31
 8003068:	643b      	str	r3, [r7, #64]	@ 0x40
 800306a:	647a      	str	r2, [r7, #68]	@ 0x44
 800306c:	f04f 0200 	mov.w	r2, #0
 8003070:	f04f 0300 	mov.w	r3, #0
 8003074:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8003078:	464c      	mov	r4, r9
 800307a:	0123      	lsls	r3, r4, #4
 800307c:	4644      	mov	r4, r8
 800307e:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
 8003082:	4644      	mov	r4, r8
 8003084:	0122      	lsls	r2, r4, #4
 8003086:	1884      	adds	r4, r0, r2
 8003088:	603c      	str	r4, [r7, #0]
 800308a:	eb41 0303 	adc.w	r3, r1, r3
 800308e:	607b      	str	r3, [r7, #4]
 8003090:	e9d7 3400 	ldrd	r3, r4, [r7]
 8003094:	e9c7 3440 	strd	r3, r4, [r7, #256]	@ 0x100
   return (float)pressure/256;  
 8003098:	e9d7 0140 	ldrd	r0, r1, [r7, #256]	@ 0x100
 800309c:	f7fd fe9c 	bl	8000dd8 <__aeabi_ul2f>
 80030a0:	ee06 0a90 	vmov	s13, r0
 80030a4:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 80030c4 <bmp280CompensatePressure+0x590>
 80030a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
  var2 = (((int64_t)(pressure>>2))*((int64_t)dig_P8))>>13;
  pressure = (uint64_t)((int64_t)pressure) +((var1 + var2 + dig_P7)>>4);
  return (float)pressure; 
#endif
  
}  
 80030ac:	eeb0 0a67 	vmov.f32	s0, s15
 80030b0:	f507 778c 	add.w	r7, r7, #280	@ 0x118
 80030b4:	46bd      	mov	sp, r7
 80030b6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80030ba:	bf00      	nop
 80030bc:	41300000 	.word	0x41300000
 80030c0:	200002c4 	.word	0x200002c4
 80030c4:	43800000 	.word	0x43800000

080030c8 <bmp280TandPGet>:

void bmp280TandPGet(float *temperature, float *pressure)  
{  
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b086      	sub	sp, #24
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	6078      	str	r0, [r7, #4]
 80030d0:	6039      	str	r1, [r7, #0]
  uint8_t lsb, msb, xlsb;  
  int32_t adc_P,adc_T;
    
  xlsb = I2C_ReadOneByte(BMP280_ADDR, BMP280_TEMP_XLSB_REG);
 80030d2:	21fc      	movs	r1, #252	@ 0xfc
 80030d4:	20ee      	movs	r0, #238	@ 0xee
 80030d6:	f7fe f87b 	bl	80011d0 <I2C_ReadOneByte>
 80030da:	4603      	mov	r3, r0
 80030dc:	75fb      	strb	r3, [r7, #23]
  lsb = I2C_ReadOneByte(BMP280_ADDR, BMP280_TEMP_LSB_REG);
 80030de:	21fb      	movs	r1, #251	@ 0xfb
 80030e0:	20ee      	movs	r0, #238	@ 0xee
 80030e2:	f7fe f875 	bl	80011d0 <I2C_ReadOneByte>
 80030e6:	4603      	mov	r3, r0
 80030e8:	75bb      	strb	r3, [r7, #22]
  msb = I2C_ReadOneByte(BMP280_ADDR, BMP280_TEMP_MSB_REG);
 80030ea:	21fa      	movs	r1, #250	@ 0xfa
 80030ec:	20ee      	movs	r0, #238	@ 0xee
 80030ee:	f7fe f86f 	bl	80011d0 <I2C_ReadOneByte>
 80030f2:	4603      	mov	r3, r0
 80030f4:	757b      	strb	r3, [r7, #21]
  //adc_T = (msb << 12) | (lsb << 4) | (xlsb >> 4); 
  adc_T = msb;
 80030f6:	7d7b      	ldrb	r3, [r7, #21]
 80030f8:	613b      	str	r3, [r7, #16]
  adc_T <<= 8;
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	021b      	lsls	r3, r3, #8
 80030fe:	613b      	str	r3, [r7, #16]
  adc_T |= lsb;
 8003100:	7dbb      	ldrb	r3, [r7, #22]
 8003102:	693a      	ldr	r2, [r7, #16]
 8003104:	4313      	orrs	r3, r2
 8003106:	613b      	str	r3, [r7, #16]
  adc_T <<= 8;
 8003108:	693b      	ldr	r3, [r7, #16]
 800310a:	021b      	lsls	r3, r3, #8
 800310c:	613b      	str	r3, [r7, #16]
  adc_T |= xlsb;
 800310e:	7dfb      	ldrb	r3, [r7, #23]
 8003110:	693a      	ldr	r2, [r7, #16]
 8003112:	4313      	orrs	r3, r2
 8003114:	613b      	str	r3, [r7, #16]
  adc_T >>= 4;
 8003116:	693b      	ldr	r3, [r7, #16]
 8003118:	111b      	asrs	r3, r3, #4
 800311a:	613b      	str	r3, [r7, #16]
  //adc_T = 415148;
  *temperature = bmp280CompensateTemperature(adc_T);
 800311c:	6938      	ldr	r0, [r7, #16]
 800311e:	f7ff fc29 	bl	8002974 <bmp280CompensateTemperature>
 8003122:	eef0 7a40 	vmov.f32	s15, s0
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	edc3 7a00 	vstr	s15, [r3]

  xlsb = I2C_ReadOneByte(BMP280_ADDR, BMP280_PRESS_XLSB_REG);
 800312c:	21f9      	movs	r1, #249	@ 0xf9
 800312e:	20ee      	movs	r0, #238	@ 0xee
 8003130:	f7fe f84e 	bl	80011d0 <I2C_ReadOneByte>
 8003134:	4603      	mov	r3, r0
 8003136:	75fb      	strb	r3, [r7, #23]
  lsb = I2C_ReadOneByte(BMP280_ADDR, BMP280_PRESS_LSB_REG);
 8003138:	21f8      	movs	r1, #248	@ 0xf8
 800313a:	20ee      	movs	r0, #238	@ 0xee
 800313c:	f7fe f848 	bl	80011d0 <I2C_ReadOneByte>
 8003140:	4603      	mov	r3, r0
 8003142:	75bb      	strb	r3, [r7, #22]
  msb = I2C_ReadOneByte(BMP280_ADDR, BMP280_PRESS_MSB_REG);
 8003144:	21f7      	movs	r1, #247	@ 0xf7
 8003146:	20ee      	movs	r0, #238	@ 0xee
 8003148:	f7fe f842 	bl	80011d0 <I2C_ReadOneByte>
 800314c:	4603      	mov	r3, r0
 800314e:	757b      	strb	r3, [r7, #21]
  //adc_P = (msb << 12) | (lsb << 4) | (xlsb >> 4); 
  adc_P = msb;
 8003150:	7d7b      	ldrb	r3, [r7, #21]
 8003152:	60fb      	str	r3, [r7, #12]
  adc_P <<= 8;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	021b      	lsls	r3, r3, #8
 8003158:	60fb      	str	r3, [r7, #12]
  adc_P |= lsb;
 800315a:	7dbb      	ldrb	r3, [r7, #22]
 800315c:	68fa      	ldr	r2, [r7, #12]
 800315e:	4313      	orrs	r3, r2
 8003160:	60fb      	str	r3, [r7, #12]
  adc_P <<= 8;
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	021b      	lsls	r3, r3, #8
 8003166:	60fb      	str	r3, [r7, #12]
  adc_P |= xlsb;
 8003168:	7dfb      	ldrb	r3, [r7, #23]
 800316a:	68fa      	ldr	r2, [r7, #12]
 800316c:	4313      	orrs	r3, r2
 800316e:	60fb      	str	r3, [r7, #12]
  adc_P >>= 4;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	111b      	asrs	r3, r3, #4
 8003174:	60fb      	str	r3, [r7, #12]
  //adc_P = 51988;
  *pressure = bmp280CompensatePressure(adc_P);     
 8003176:	68f8      	ldr	r0, [r7, #12]
 8003178:	f7ff fcdc 	bl	8002b34 <bmp280CompensatePressure>
 800317c:	eef0 7a40 	vmov.f32	s15, s0
 8003180:	683b      	ldr	r3, [r7, #0]
 8003182:	edc3 7a00 	vstr	s15, [r3]
} 
 8003186:	bf00      	nop
 8003188:	3718      	adds	r7, #24
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}

0800318e <bmp280CalAvgValue>:

void bmp280CalAvgValue(uint8_t *pIndex, int32_t *pAvgBuffer, int32_t InVal, int32_t *pOutVal)
{ 
 800318e:	b480      	push	{r7}
 8003190:	b087      	sub	sp, #28
 8003192:	af00      	add	r7, sp, #0
 8003194:	60f8      	str	r0, [r7, #12]
 8003196:	60b9      	str	r1, [r7, #8]
 8003198:	607a      	str	r2, [r7, #4]
 800319a:	603b      	str	r3, [r7, #0]
  uint8_t i;

  *(pAvgBuffer + ((*pIndex) ++)) = InVal;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	781b      	ldrb	r3, [r3, #0]
 80031a0:	1c5a      	adds	r2, r3, #1
 80031a2:	b2d1      	uxtb	r1, r2
 80031a4:	68fa      	ldr	r2, [r7, #12]
 80031a6:	7011      	strb	r1, [r2, #0]
 80031a8:	009b      	lsls	r3, r3, #2
 80031aa:	68ba      	ldr	r2, [r7, #8]
 80031ac:	4413      	add	r3, r2
 80031ae:	687a      	ldr	r2, [r7, #4]
 80031b0:	601a      	str	r2, [r3, #0]
  *pIndex &= 0x07;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	781b      	ldrb	r3, [r3, #0]
 80031b6:	f003 0307 	and.w	r3, r3, #7
 80031ba:	b2da      	uxtb	r2, r3
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	701a      	strb	r2, [r3, #0]

  *pOutVal = 0;
 80031c0:	683b      	ldr	r3, [r7, #0]
 80031c2:	2200      	movs	r2, #0
 80031c4:	601a      	str	r2, [r3, #0]
  for(i = 0; i < 8; i ++) 
 80031c6:	2300      	movs	r3, #0
 80031c8:	75fb      	strb	r3, [r7, #23]
 80031ca:	e00c      	b.n	80031e6 <bmp280CalAvgValue+0x58>
  {
    *pOutVal += *(pAvgBuffer + i);
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	681a      	ldr	r2, [r3, #0]
 80031d0:	7dfb      	ldrb	r3, [r7, #23]
 80031d2:	009b      	lsls	r3, r3, #2
 80031d4:	68b9      	ldr	r1, [r7, #8]
 80031d6:	440b      	add	r3, r1
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	441a      	add	r2, r3
 80031dc:	683b      	ldr	r3, [r7, #0]
 80031de:	601a      	str	r2, [r3, #0]
  for(i = 0; i < 8; i ++) 
 80031e0:	7dfb      	ldrb	r3, [r7, #23]
 80031e2:	3301      	adds	r3, #1
 80031e4:	75fb      	strb	r3, [r7, #23]
 80031e6:	7dfb      	ldrb	r3, [r7, #23]
 80031e8:	2b07      	cmp	r3, #7
 80031ea:	d9ef      	bls.n	80031cc <bmp280CalAvgValue+0x3e>
  }
  *pOutVal >>= 3;
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	10da      	asrs	r2, r3, #3
 80031f2:	683b      	ldr	r3, [r7, #0]
 80031f4:	601a      	str	r2, [r3, #0]
}
 80031f6:	bf00      	nop
 80031f8:	371c      	adds	r7, #28
 80031fa:	46bd      	mov	sp, r7
 80031fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003200:	4770      	bx	lr
 8003202:	0000      	movs	r0, r0
 8003204:	0000      	movs	r0, r0
	...

08003208 <bmp280CalculateAbsoluteAltitude>:

void bmp280CalculateAbsoluteAltitude(int32_t *pAltitude, int32_t PressureVal)
{
 8003208:	b580      	push	{r7, lr}
 800320a:	b082      	sub	sp, #8
 800320c:	af00      	add	r7, sp, #0
 800320e:	6078      	str	r0, [r7, #4]
 8003210:	6039      	str	r1, [r7, #0]
  *pAltitude = 4433000 * (1 - pow((PressureVal / (float)gs32Pressure0), 0.1903)); 
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	ee07 3a90 	vmov	s15, r3
 8003218:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800321c:	4b1c      	ldr	r3, [pc, #112]	@ (8003290 <bmp280CalculateAbsoluteAltitude+0x88>)
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	ee07 3a90 	vmov	s15, r3
 8003224:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003228:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800322c:	ee16 0a90 	vmov	r0, s13
 8003230:	f7fd f98a 	bl	8000548 <__aeabi_f2d>
 8003234:	4602      	mov	r2, r0
 8003236:	460b      	mov	r3, r1
 8003238:	ed9f 1b11 	vldr	d1, [pc, #68]	@ 8003280 <bmp280CalculateAbsoluteAltitude+0x78>
 800323c:	ec43 2b10 	vmov	d0, r2, r3
 8003240:	f00a fc2c 	bl	800da9c <pow>
 8003244:	ec53 2b10 	vmov	r2, r3, d0
 8003248:	f04f 0000 	mov.w	r0, #0
 800324c:	4911      	ldr	r1, [pc, #68]	@ (8003294 <bmp280CalculateAbsoluteAltitude+0x8c>)
 800324e:	f7fd f81b 	bl	8000288 <__aeabi_dsub>
 8003252:	4602      	mov	r2, r0
 8003254:	460b      	mov	r3, r1
 8003256:	4610      	mov	r0, r2
 8003258:	4619      	mov	r1, r3
 800325a:	a30b      	add	r3, pc, #44	@ (adr r3, 8003288 <bmp280CalculateAbsoluteAltitude+0x80>)
 800325c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003260:	f7fd f9ca 	bl	80005f8 <__aeabi_dmul>
 8003264:	4602      	mov	r2, r0
 8003266:	460b      	mov	r3, r1
 8003268:	4610      	mov	r0, r2
 800326a:	4619      	mov	r1, r3
 800326c:	f7fd fc74 	bl	8000b58 <__aeabi_d2iz>
 8003270:	4602      	mov	r2, r0
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	601a      	str	r2, [r3, #0]
}
 8003276:	bf00      	nop
 8003278:	3708      	adds	r7, #8
 800327a:	46bd      	mov	sp, r7
 800327c:	bd80      	pop	{r7, pc}
 800327e:	bf00      	nop
 8003280:	1a36e2eb 	.word	0x1a36e2eb
 8003284:	3fc85bc0 	.word	0x3fc85bc0
 8003288:	00000000 	.word	0x00000000
 800328c:	4150e91a 	.word	0x4150e91a
 8003290:	20000000 	.word	0x20000000
 8003294:	3ff00000 	.word	0x3ff00000

08003298 <pressSensorDataGet>:

void pressSensorDataGet(int32_t *ps32Temperature, int32_t *ps32Pressure, int32_t *ps32Altitude)
{
 8003298:	b580      	push	{r7, lr}
 800329a:	b088      	sub	sp, #32
 800329c:	af00      	add	r7, sp, #0
 800329e:	60f8      	str	r0, [r7, #12]
 80032a0:	60b9      	str	r1, [r7, #8]
 80032a2:	607a      	str	r2, [r7, #4]
  float CurPressure, CurTemperature;
  int32_t CurAltitude;
  static BMP280_AvgTypeDef BMP280_Filter[3];

  bmp280TandPGet(&CurTemperature, &CurPressure);
 80032a4:	f107 021c 	add.w	r2, r7, #28
 80032a8:	f107 0318 	add.w	r3, r7, #24
 80032ac:	4611      	mov	r1, r2
 80032ae:	4618      	mov	r0, r3
 80032b0:	f7ff ff0a 	bl	80030c8 <bmp280TandPGet>
  bmp280CalAvgValue(&BMP280_Filter[0].Index, BMP280_Filter[0].AvgBuffer, (int32_t)(CurPressure), ps32Pressure);
 80032b4:	edd7 7a07 	vldr	s15, [r7, #28]
 80032b8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80032bc:	68bb      	ldr	r3, [r7, #8]
 80032be:	ee17 2a90 	vmov	r2, s15
 80032c2:	4910      	ldr	r1, [pc, #64]	@ (8003304 <pressSensorDataGet+0x6c>)
 80032c4:	4810      	ldr	r0, [pc, #64]	@ (8003308 <pressSensorDataGet+0x70>)
 80032c6:	f7ff ff62 	bl	800318e <bmp280CalAvgValue>

  bmp280CalculateAbsoluteAltitude(&CurAltitude, (*ps32Pressure));
 80032ca:	68bb      	ldr	r3, [r7, #8]
 80032cc:	681a      	ldr	r2, [r3, #0]
 80032ce:	f107 0314 	add.w	r3, r7, #20
 80032d2:	4611      	mov	r1, r2
 80032d4:	4618      	mov	r0, r3
 80032d6:	f7ff ff97 	bl	8003208 <bmp280CalculateAbsoluteAltitude>
  bmp280CalAvgValue(&BMP280_Filter[1].Index, BMP280_Filter[1].AvgBuffer, CurAltitude, ps32Altitude);
 80032da:	697a      	ldr	r2, [r7, #20]
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	490b      	ldr	r1, [pc, #44]	@ (800330c <pressSensorDataGet+0x74>)
 80032e0:	480b      	ldr	r0, [pc, #44]	@ (8003310 <pressSensorDataGet+0x78>)
 80032e2:	f7ff ff54 	bl	800318e <bmp280CalAvgValue>
  bmp280CalAvgValue(&BMP280_Filter[2].Index, BMP280_Filter[2].AvgBuffer, (int32_t)CurTemperature, ps32Temperature);
 80032e6:	edd7 7a06 	vldr	s15, [r7, #24]
 80032ea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	ee17 2a90 	vmov	r2, s15
 80032f4:	4907      	ldr	r1, [pc, #28]	@ (8003314 <pressSensorDataGet+0x7c>)
 80032f6:	4808      	ldr	r0, [pc, #32]	@ (8003318 <pressSensorDataGet+0x80>)
 80032f8:	f7ff ff49 	bl	800318e <bmp280CalAvgValue>
  return;
 80032fc:	bf00      	nop
}
 80032fe:	3720      	adds	r7, #32
 8003300:	46bd      	mov	sp, r7
 8003302:	bd80      	pop	{r7, pc}
 8003304:	20000390 	.word	0x20000390
 8003308:	2000038c 	.word	0x2000038c
 800330c:	200003b4 	.word	0x200003b4
 8003310:	200003b0 	.word	0x200003b0
 8003314:	200003d8 	.word	0x200003d8
 8003318:	200003d4 	.word	0x200003d4

0800331c <MPU6050_Init>:
    .Q_bias = 0.003f,
    .R_measure = 0.03f,
};

uint8_t MPU6050_Init(I2C_HandleTypeDef *I2Cx)
{
 800331c:	b580      	push	{r7, lr}
 800331e:	b088      	sub	sp, #32
 8003320:	af04      	add	r7, sp, #16
 8003322:	6078      	str	r0, [r7, #4]
    uint8_t check;
    uint8_t Data;

    // check device ID WHO_AM_I

    HAL_StatusTypeDef ret = HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, WHO_AM_I_REG, 1, &check, 1, i2c_timeout);
 8003324:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003328:	9302      	str	r3, [sp, #8]
 800332a:	2301      	movs	r3, #1
 800332c:	9301      	str	r3, [sp, #4]
 800332e:	f107 030e 	add.w	r3, r7, #14
 8003332:	9300      	str	r3, [sp, #0]
 8003334:	2301      	movs	r3, #1
 8003336:	2275      	movs	r2, #117	@ 0x75
 8003338:	21d2      	movs	r1, #210	@ 0xd2
 800333a:	6878      	ldr	r0, [r7, #4]
 800333c:	f002 fad2 	bl	80058e4 <HAL_I2C_Mem_Read>
 8003340:	4603      	mov	r3, r0
 8003342:	73fb      	strb	r3, [r7, #15]
    /*if (ret == HAL_OK) {
        printf("MPU6050 WHO_AM_I: 0x%02X\r\n", check);  // Should print 0x68
    } else {
        printf("I2C Read Error: %d\r\n", ret);
    }*/
    if (check == 104) // 0x68 will be returned by the sensor if everything goes well
 8003344:	7bbb      	ldrb	r3, [r7, #14]
 8003346:	2b68      	cmp	r3, #104	@ 0x68
 8003348:	d141      	bne.n	80033ce <MPU6050_Init+0xb2>
    {
        // power management register 0X6B we should write all 0's to wake the sensor up
        Data = 0;
 800334a:	2300      	movs	r3, #0
 800334c:	737b      	strb	r3, [r7, #13]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, PWR_MGMT_1_REG, 1, &Data, 1, i2c_timeout);
 800334e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003352:	9302      	str	r3, [sp, #8]
 8003354:	2301      	movs	r3, #1
 8003356:	9301      	str	r3, [sp, #4]
 8003358:	f107 030d 	add.w	r3, r7, #13
 800335c:	9300      	str	r3, [sp, #0]
 800335e:	2301      	movs	r3, #1
 8003360:	226b      	movs	r2, #107	@ 0x6b
 8003362:	21d2      	movs	r1, #210	@ 0xd2
 8003364:	6878      	ldr	r0, [r7, #4]
 8003366:	f002 f9c3 	bl	80056f0 <HAL_I2C_Mem_Write>

        // Set DATA RATE of 1KHz by writing SMPLRT_DIV register
        Data = 0x07;
 800336a:	2307      	movs	r3, #7
 800336c:	737b      	strb	r3, [r7, #13]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, SMPLRT_DIV_REG, 1, &Data, 1, i2c_timeout);
 800336e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003372:	9302      	str	r3, [sp, #8]
 8003374:	2301      	movs	r3, #1
 8003376:	9301      	str	r3, [sp, #4]
 8003378:	f107 030d 	add.w	r3, r7, #13
 800337c:	9300      	str	r3, [sp, #0]
 800337e:	2301      	movs	r3, #1
 8003380:	2219      	movs	r2, #25
 8003382:	21d2      	movs	r1, #210	@ 0xd2
 8003384:	6878      	ldr	r0, [r7, #4]
 8003386:	f002 f9b3 	bl	80056f0 <HAL_I2C_Mem_Write>

        // Set accelerometer configuration in ACCEL_CONFIG Register
        // XA_ST=0,YA_ST=0,ZA_ST=0, FS_SEL=0 -> � 2g
        Data = 0x00;
 800338a:	2300      	movs	r3, #0
 800338c:	737b      	strb	r3, [r7, #13]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, ACCEL_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 800338e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003392:	9302      	str	r3, [sp, #8]
 8003394:	2301      	movs	r3, #1
 8003396:	9301      	str	r3, [sp, #4]
 8003398:	f107 030d 	add.w	r3, r7, #13
 800339c:	9300      	str	r3, [sp, #0]
 800339e:	2301      	movs	r3, #1
 80033a0:	221c      	movs	r2, #28
 80033a2:	21d2      	movs	r1, #210	@ 0xd2
 80033a4:	6878      	ldr	r0, [r7, #4]
 80033a6:	f002 f9a3 	bl	80056f0 <HAL_I2C_Mem_Write>

        // Set Gyroscopic configuration in GYRO_CONFIG Register
        // XG_ST=0,YG_ST=0,ZG_ST=0, FS_SEL=0 -> � 250 �/s
        Data = 0x00;
 80033aa:	2300      	movs	r3, #0
 80033ac:	737b      	strb	r3, [r7, #13]
        HAL_I2C_Mem_Write(I2Cx, MPU6050_ADDR, GYRO_CONFIG_REG, 1, &Data, 1, i2c_timeout);
 80033ae:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80033b2:	9302      	str	r3, [sp, #8]
 80033b4:	2301      	movs	r3, #1
 80033b6:	9301      	str	r3, [sp, #4]
 80033b8:	f107 030d 	add.w	r3, r7, #13
 80033bc:	9300      	str	r3, [sp, #0]
 80033be:	2301      	movs	r3, #1
 80033c0:	221b      	movs	r2, #27
 80033c2:	21d2      	movs	r1, #210	@ 0xd2
 80033c4:	6878      	ldr	r0, [r7, #4]
 80033c6:	f002 f993 	bl	80056f0 <HAL_I2C_Mem_Write>
        return 0;
 80033ca:	2300      	movs	r3, #0
 80033cc:	e000      	b.n	80033d0 <MPU6050_Init+0xb4>
    }
    return 1;
 80033ce:	2301      	movs	r3, #1
}
 80033d0:	4618      	mov	r0, r3
 80033d2:	3710      	adds	r7, #16
 80033d4:	46bd      	mov	sp, r7
 80033d6:	bd80      	pop	{r7, pc}

080033d8 <MPU6050_Read_All>:
    temp = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
}

void MPU6050_Read_All(I2C_HandleTypeDef *I2Cx, MPU6050_t *DataStruct)
{
 80033d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80033dc:	b094      	sub	sp, #80	@ 0x50
 80033de:	af04      	add	r7, sp, #16
 80033e0:	6078      	str	r0, [r7, #4]
 80033e2:	6039      	str	r1, [r7, #0]
    uint8_t Rec_Data[14];
    int16_t temp;

    // Read 14 BYTES of data starting from ACCEL_XOUT_H register

    HAL_I2C_Mem_Read(I2Cx, MPU6050_ADDR, ACCEL_XOUT_H_REG, 1, Rec_Data, 14, i2c_timeout);
 80033e4:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80033e8:	9302      	str	r3, [sp, #8]
 80033ea:	230e      	movs	r3, #14
 80033ec:	9301      	str	r3, [sp, #4]
 80033ee:	f107 0308 	add.w	r3, r7, #8
 80033f2:	9300      	str	r3, [sp, #0]
 80033f4:	2301      	movs	r3, #1
 80033f6:	223b      	movs	r2, #59	@ 0x3b
 80033f8:	21d2      	movs	r1, #210	@ 0xd2
 80033fa:	6878      	ldr	r0, [r7, #4]
 80033fc:	f002 fa72 	bl	80058e4 <HAL_I2C_Mem_Read>

    DataStruct->Accel_X_RAW = (int16_t)(Rec_Data[0] << 8 | Rec_Data[1]);
 8003400:	7a3b      	ldrb	r3, [r7, #8]
 8003402:	021b      	lsls	r3, r3, #8
 8003404:	b21a      	sxth	r2, r3
 8003406:	7a7b      	ldrb	r3, [r7, #9]
 8003408:	b21b      	sxth	r3, r3
 800340a:	4313      	orrs	r3, r2
 800340c:	b21a      	sxth	r2, r3
 800340e:	683b      	ldr	r3, [r7, #0]
 8003410:	801a      	strh	r2, [r3, #0]
    DataStruct->Accel_Y_RAW = (int16_t)(Rec_Data[2] << 8 | Rec_Data[3]);
 8003412:	7abb      	ldrb	r3, [r7, #10]
 8003414:	021b      	lsls	r3, r3, #8
 8003416:	b21a      	sxth	r2, r3
 8003418:	7afb      	ldrb	r3, [r7, #11]
 800341a:	b21b      	sxth	r3, r3
 800341c:	4313      	orrs	r3, r2
 800341e:	b21a      	sxth	r2, r3
 8003420:	683b      	ldr	r3, [r7, #0]
 8003422:	805a      	strh	r2, [r3, #2]
    DataStruct->Accel_Z_RAW = (int16_t)(Rec_Data[4] << 8 | Rec_Data[5]);
 8003424:	7b3b      	ldrb	r3, [r7, #12]
 8003426:	021b      	lsls	r3, r3, #8
 8003428:	b21a      	sxth	r2, r3
 800342a:	7b7b      	ldrb	r3, [r7, #13]
 800342c:	b21b      	sxth	r3, r3
 800342e:	4313      	orrs	r3, r2
 8003430:	b21a      	sxth	r2, r3
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	809a      	strh	r2, [r3, #4]
    temp = (int16_t)(Rec_Data[6] << 8 | Rec_Data[7]);
 8003436:	7bbb      	ldrb	r3, [r7, #14]
 8003438:	021b      	lsls	r3, r3, #8
 800343a:	b21a      	sxth	r2, r3
 800343c:	7bfb      	ldrb	r3, [r7, #15]
 800343e:	b21b      	sxth	r3, r3
 8003440:	4313      	orrs	r3, r2
 8003442:	86fb      	strh	r3, [r7, #54]	@ 0x36
    DataStruct->Gyro_X_RAW = (int16_t)(Rec_Data[8] << 8 | Rec_Data[9]);
 8003444:	7c3b      	ldrb	r3, [r7, #16]
 8003446:	021b      	lsls	r3, r3, #8
 8003448:	b21a      	sxth	r2, r3
 800344a:	7c7b      	ldrb	r3, [r7, #17]
 800344c:	b21b      	sxth	r3, r3
 800344e:	4313      	orrs	r3, r2
 8003450:	b21a      	sxth	r2, r3
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	841a      	strh	r2, [r3, #32]
    DataStruct->Gyro_Y_RAW = (int16_t)(Rec_Data[10] << 8 | Rec_Data[11]);
 8003456:	7cbb      	ldrb	r3, [r7, #18]
 8003458:	021b      	lsls	r3, r3, #8
 800345a:	b21a      	sxth	r2, r3
 800345c:	7cfb      	ldrb	r3, [r7, #19]
 800345e:	b21b      	sxth	r3, r3
 8003460:	4313      	orrs	r3, r2
 8003462:	b21a      	sxth	r2, r3
 8003464:	683b      	ldr	r3, [r7, #0]
 8003466:	845a      	strh	r2, [r3, #34]	@ 0x22
    DataStruct->Gyro_Z_RAW = (int16_t)(Rec_Data[12] << 8 | Rec_Data[13]);
 8003468:	7d3b      	ldrb	r3, [r7, #20]
 800346a:	021b      	lsls	r3, r3, #8
 800346c:	b21a      	sxth	r2, r3
 800346e:	7d7b      	ldrb	r3, [r7, #21]
 8003470:	b21b      	sxth	r3, r3
 8003472:	4313      	orrs	r3, r2
 8003474:	b21a      	sxth	r2, r3
 8003476:	683b      	ldr	r3, [r7, #0]
 8003478:	849a      	strh	r2, [r3, #36]	@ 0x24

    DataStruct->Ax = DataStruct->Accel_X_RAW / 16384.0;
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003480:	4618      	mov	r0, r3
 8003482:	f7fd f84f 	bl	8000524 <__aeabi_i2d>
 8003486:	f04f 0200 	mov.w	r2, #0
 800348a:	4bbd      	ldr	r3, [pc, #756]	@ (8003780 <MPU6050_Read_All+0x3a8>)
 800348c:	f7fd f9de 	bl	800084c <__aeabi_ddiv>
 8003490:	4602      	mov	r2, r0
 8003492:	460b      	mov	r3, r1
 8003494:	6839      	ldr	r1, [r7, #0]
 8003496:	e9c1 2302 	strd	r2, r3, [r1, #8]
    DataStruct->Ay = DataStruct->Accel_Y_RAW / 16384.0;
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80034a0:	4618      	mov	r0, r3
 80034a2:	f7fd f83f 	bl	8000524 <__aeabi_i2d>
 80034a6:	f04f 0200 	mov.w	r2, #0
 80034aa:	4bb5      	ldr	r3, [pc, #724]	@ (8003780 <MPU6050_Read_All+0x3a8>)
 80034ac:	f7fd f9ce 	bl	800084c <__aeabi_ddiv>
 80034b0:	4602      	mov	r2, r0
 80034b2:	460b      	mov	r3, r1
 80034b4:	6839      	ldr	r1, [r7, #0]
 80034b6:	e9c1 2304 	strd	r2, r3, [r1, #16]
    DataStruct->Az = DataStruct->Accel_Z_RAW / Accel_Z_corrector;
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80034c0:	4618      	mov	r0, r3
 80034c2:	f7fd f82f 	bl	8000524 <__aeabi_i2d>
 80034c6:	a3a8      	add	r3, pc, #672	@ (adr r3, 8003768 <MPU6050_Read_All+0x390>)
 80034c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034cc:	f7fd f9be 	bl	800084c <__aeabi_ddiv>
 80034d0:	4602      	mov	r2, r0
 80034d2:	460b      	mov	r3, r1
 80034d4:	6839      	ldr	r1, [r7, #0]
 80034d6:	e9c1 2306 	strd	r2, r3, [r1, #24]
    DataStruct->Temperature = (float)((int16_t)temp / (float)340.0 + (float)36.53);
 80034da:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 80034de:	ee07 3a90 	vmov	s15, r3
 80034e2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80034e6:	eddf 6aa7 	vldr	s13, [pc, #668]	@ 8003784 <MPU6050_Read_All+0x3ac>
 80034ea:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80034ee:	ed9f 7aa6 	vldr	s14, [pc, #664]	@ 8003788 <MPU6050_Read_All+0x3b0>
 80034f2:	ee77 7a87 	vadd.f32	s15, s15, s14
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	edc3 7a10 	vstr	s15, [r3, #64]	@ 0x40
    DataStruct->Gx = DataStruct->Gyro_X_RAW / 131.0;
 80034fc:	683b      	ldr	r3, [r7, #0]
 80034fe:	f9b3 3020 	ldrsh.w	r3, [r3, #32]
 8003502:	4618      	mov	r0, r3
 8003504:	f7fd f80e 	bl	8000524 <__aeabi_i2d>
 8003508:	a399      	add	r3, pc, #612	@ (adr r3, 8003770 <MPU6050_Read_All+0x398>)
 800350a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800350e:	f7fd f99d 	bl	800084c <__aeabi_ddiv>
 8003512:	4602      	mov	r2, r0
 8003514:	460b      	mov	r3, r1
 8003516:	6839      	ldr	r1, [r7, #0]
 8003518:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    DataStruct->Gy = DataStruct->Gyro_Y_RAW / 131.0;
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	f9b3 3022 	ldrsh.w	r3, [r3, #34]	@ 0x22
 8003522:	4618      	mov	r0, r3
 8003524:	f7fc fffe 	bl	8000524 <__aeabi_i2d>
 8003528:	a391      	add	r3, pc, #580	@ (adr r3, 8003770 <MPU6050_Read_All+0x398>)
 800352a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800352e:	f7fd f98d 	bl	800084c <__aeabi_ddiv>
 8003532:	4602      	mov	r2, r0
 8003534:	460b      	mov	r3, r1
 8003536:	6839      	ldr	r1, [r7, #0]
 8003538:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    DataStruct->Gz = DataStruct->Gyro_Z_RAW / 131.0;
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	f9b3 3024 	ldrsh.w	r3, [r3, #36]	@ 0x24
 8003542:	4618      	mov	r0, r3
 8003544:	f7fc ffee 	bl	8000524 <__aeabi_i2d>
 8003548:	a389      	add	r3, pc, #548	@ (adr r3, 8003770 <MPU6050_Read_All+0x398>)
 800354a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800354e:	f7fd f97d 	bl	800084c <__aeabi_ddiv>
 8003552:	4602      	mov	r2, r0
 8003554:	460b      	mov	r3, r1
 8003556:	6839      	ldr	r1, [r7, #0]
 8003558:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38

    // Kalman angle solve
    double dt = (double)(HAL_GetTick() - timer) / 1000;
 800355c:	f001 fb88 	bl	8004c70 <HAL_GetTick>
 8003560:	4602      	mov	r2, r0
 8003562:	4b8a      	ldr	r3, [pc, #552]	@ (800378c <MPU6050_Read_All+0x3b4>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	1ad3      	subs	r3, r2, r3
 8003568:	4618      	mov	r0, r3
 800356a:	f7fc ffcb 	bl	8000504 <__aeabi_ui2d>
 800356e:	f04f 0200 	mov.w	r2, #0
 8003572:	4b87      	ldr	r3, [pc, #540]	@ (8003790 <MPU6050_Read_All+0x3b8>)
 8003574:	f7fd f96a 	bl	800084c <__aeabi_ddiv>
 8003578:	4602      	mov	r2, r0
 800357a:	460b      	mov	r3, r1
 800357c:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28
    timer = HAL_GetTick();
 8003580:	f001 fb76 	bl	8004c70 <HAL_GetTick>
 8003584:	4603      	mov	r3, r0
 8003586:	4a81      	ldr	r2, [pc, #516]	@ (800378c <MPU6050_Read_All+0x3b4>)
 8003588:	6013      	str	r3, [r2, #0]
    double roll;
    double roll_sqrt = sqrt(
        DataStruct->Accel_X_RAW * DataStruct->Accel_X_RAW + DataStruct->Accel_Z_RAW * DataStruct->Accel_Z_RAW);
 800358a:	683b      	ldr	r3, [r7, #0]
 800358c:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003590:	461a      	mov	r2, r3
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	f9b3 3000 	ldrsh.w	r3, [r3]
 8003598:	fb03 f202 	mul.w	r2, r3, r2
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80035a2:	4619      	mov	r1, r3
 80035a4:	683b      	ldr	r3, [r7, #0]
 80035a6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 80035aa:	fb01 f303 	mul.w	r3, r1, r3
 80035ae:	4413      	add	r3, r2
    double roll_sqrt = sqrt(
 80035b0:	4618      	mov	r0, r3
 80035b2:	f7fc ffb7 	bl	8000524 <__aeabi_i2d>
 80035b6:	4602      	mov	r2, r0
 80035b8:	460b      	mov	r3, r1
 80035ba:	ec43 2b10 	vmov	d0, r2, r3
 80035be:	f00a fadd 	bl	800db7c <sqrt>
 80035c2:	ed87 0b08 	vstr	d0, [r7, #32]
    if (roll_sqrt != 0.0)
 80035c6:	f04f 0200 	mov.w	r2, #0
 80035ca:	f04f 0300 	mov.w	r3, #0
 80035ce:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80035d2:	f7fd fa79 	bl	8000ac8 <__aeabi_dcmpeq>
 80035d6:	4603      	mov	r3, r0
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d11f      	bne.n	800361c <MPU6050_Read_All+0x244>
    {
        roll = atan(DataStruct->Accel_Y_RAW / roll_sqrt) * RAD_TO_DEG;
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	f9b3 3002 	ldrsh.w	r3, [r3, #2]
 80035e2:	4618      	mov	r0, r3
 80035e4:	f7fc ff9e 	bl	8000524 <__aeabi_i2d>
 80035e8:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80035ec:	f7fd f92e 	bl	800084c <__aeabi_ddiv>
 80035f0:	4602      	mov	r2, r0
 80035f2:	460b      	mov	r3, r1
 80035f4:	ec43 2b17 	vmov	d7, r2, r3
 80035f8:	eeb0 0a47 	vmov.f32	s0, s14
 80035fc:	eef0 0a67 	vmov.f32	s1, s15
 8003600:	f00a faea 	bl	800dbd8 <atan>
 8003604:	ec51 0b10 	vmov	r0, r1, d0
 8003608:	a35b      	add	r3, pc, #364	@ (adr r3, 8003778 <MPU6050_Read_All+0x3a0>)
 800360a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800360e:	f7fc fff3 	bl	80005f8 <__aeabi_dmul>
 8003612:	4602      	mov	r2, r0
 8003614:	460b      	mov	r3, r1
 8003616:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
 800361a:	e005      	b.n	8003628 <MPU6050_Read_All+0x250>
    }
    else
    {
        roll = 0.0;
 800361c:	f04f 0200 	mov.w	r2, #0
 8003620:	f04f 0300 	mov.w	r3, #0
 8003624:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    }
    double pitch = atan2(-DataStruct->Accel_X_RAW, DataStruct->Accel_Z_RAW) * RAD_TO_DEG;
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	f9b3 3000 	ldrsh.w	r3, [r3]
 800362e:	425b      	negs	r3, r3
 8003630:	4618      	mov	r0, r3
 8003632:	f7fc ff77 	bl	8000524 <__aeabi_i2d>
 8003636:	4682      	mov	sl, r0
 8003638:	468b      	mov	fp, r1
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8003640:	4618      	mov	r0, r3
 8003642:	f7fc ff6f 	bl	8000524 <__aeabi_i2d>
 8003646:	4602      	mov	r2, r0
 8003648:	460b      	mov	r3, r1
 800364a:	ec43 2b11 	vmov	d1, r2, r3
 800364e:	ec4b ab10 	vmov	d0, sl, fp
 8003652:	f00a fa21 	bl	800da98 <atan2>
 8003656:	ec51 0b10 	vmov	r0, r1, d0
 800365a:	a347      	add	r3, pc, #284	@ (adr r3, 8003778 <MPU6050_Read_All+0x3a0>)
 800365c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003660:	f7fc ffca 	bl	80005f8 <__aeabi_dmul>
 8003664:	4602      	mov	r2, r0
 8003666:	460b      	mov	r3, r1
 8003668:	e9c7 2306 	strd	r2, r3, [r7, #24]
    if ((pitch < -90 && DataStruct->KalmanAngleY > 90) || (pitch > 90 && DataStruct->KalmanAngleY < -90))
 800366c:	f04f 0200 	mov.w	r2, #0
 8003670:	4b48      	ldr	r3, [pc, #288]	@ (8003794 <MPU6050_Read_All+0x3bc>)
 8003672:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 8003676:	f7fd fa31 	bl	8000adc <__aeabi_dcmplt>
 800367a:	4603      	mov	r3, r0
 800367c:	2b00      	cmp	r3, #0
 800367e:	d00a      	beq.n	8003696 <MPU6050_Read_All+0x2be>
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 8003686:	f04f 0200 	mov.w	r2, #0
 800368a:	4b43      	ldr	r3, [pc, #268]	@ (8003798 <MPU6050_Read_All+0x3c0>)
 800368c:	f7fd fa44 	bl	8000b18 <__aeabi_dcmpgt>
 8003690:	4603      	mov	r3, r0
 8003692:	2b00      	cmp	r3, #0
 8003694:	d114      	bne.n	80036c0 <MPU6050_Read_All+0x2e8>
 8003696:	f04f 0200 	mov.w	r2, #0
 800369a:	4b3f      	ldr	r3, [pc, #252]	@ (8003798 <MPU6050_Read_All+0x3c0>)
 800369c:	e9d7 0106 	ldrd	r0, r1, [r7, #24]
 80036a0:	f7fd fa3a 	bl	8000b18 <__aeabi_dcmpgt>
 80036a4:	4603      	mov	r3, r0
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d015      	beq.n	80036d6 <MPU6050_Read_All+0x2fe>
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	e9d3 0114 	ldrd	r0, r1, [r3, #80]	@ 0x50
 80036b0:	f04f 0200 	mov.w	r2, #0
 80036b4:	4b37      	ldr	r3, [pc, #220]	@ (8003794 <MPU6050_Read_All+0x3bc>)
 80036b6:	f7fd fa11 	bl	8000adc <__aeabi_dcmplt>
 80036ba:	4603      	mov	r3, r0
 80036bc:	2b00      	cmp	r3, #0
 80036be:	d00a      	beq.n	80036d6 <MPU6050_Read_All+0x2fe>
    {
        KalmanY.angle = pitch;
 80036c0:	4936      	ldr	r1, [pc, #216]	@ (800379c <MPU6050_Read_All+0x3c4>)
 80036c2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80036c6:	e9c1 2306 	strd	r2, r3, [r1, #24]
        DataStruct->KalmanAngleY = pitch;
 80036ca:	6839      	ldr	r1, [r7, #0]
 80036cc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80036d0:	e9c1 2314 	strd	r2, r3, [r1, #80]	@ 0x50
 80036d4:	e014      	b.n	8003700 <MPU6050_Read_All+0x328>
    }
    else
    {
        DataStruct->KalmanAngleY = Kalman_getAngle(&KalmanY, pitch, DataStruct->Gy, dt);
 80036d6:	683b      	ldr	r3, [r7, #0]
 80036d8:	ed93 7b0c 	vldr	d7, [r3, #48]	@ 0x30
 80036dc:	ed97 2b0a 	vldr	d2, [r7, #40]	@ 0x28
 80036e0:	eeb0 1a47 	vmov.f32	s2, s14
 80036e4:	eef0 1a67 	vmov.f32	s3, s15
 80036e8:	ed97 0b06 	vldr	d0, [r7, #24]
 80036ec:	482b      	ldr	r0, [pc, #172]	@ (800379c <MPU6050_Read_All+0x3c4>)
 80036ee:	f000 f859 	bl	80037a4 <Kalman_getAngle>
 80036f2:	eeb0 7a40 	vmov.f32	s14, s0
 80036f6:	eef0 7a60 	vmov.f32	s15, s1
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	ed83 7b14 	vstr	d7, [r3, #80]	@ 0x50
    }
    if (fabs(DataStruct->KalmanAngleY) > 90)
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	e9d3 2314 	ldrd	r2, r3, [r3, #80]	@ 0x50
 8003706:	4690      	mov	r8, r2
 8003708:	f023 4900 	bic.w	r9, r3, #2147483648	@ 0x80000000
 800370c:	f04f 0200 	mov.w	r2, #0
 8003710:	4b21      	ldr	r3, [pc, #132]	@ (8003798 <MPU6050_Read_All+0x3c0>)
 8003712:	4640      	mov	r0, r8
 8003714:	4649      	mov	r1, r9
 8003716:	f7fd f9ff 	bl	8000b18 <__aeabi_dcmpgt>
 800371a:	4603      	mov	r3, r0
 800371c:	2b00      	cmp	r3, #0
 800371e:	d008      	beq.n	8003732 <MPU6050_Read_All+0x35a>
        DataStruct->Gx = -DataStruct->Gx;
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8003726:	4614      	mov	r4, r2
 8003728:	f083 4500 	eor.w	r5, r3, #2147483648	@ 0x80000000
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	e9c3 450a 	strd	r4, r5, [r3, #40]	@ 0x28
    DataStruct->KalmanAngleX = Kalman_getAngle(&KalmanX, roll, DataStruct->Gx, dt);
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	ed93 7b0a 	vldr	d7, [r3, #40]	@ 0x28
 8003738:	ed97 2b0a 	vldr	d2, [r7, #40]	@ 0x28
 800373c:	eeb0 1a47 	vmov.f32	s2, s14
 8003740:	eef0 1a67 	vmov.f32	s3, s15
 8003744:	ed97 0b0e 	vldr	d0, [r7, #56]	@ 0x38
 8003748:	4815      	ldr	r0, [pc, #84]	@ (80037a0 <MPU6050_Read_All+0x3c8>)
 800374a:	f000 f82b 	bl	80037a4 <Kalman_getAngle>
 800374e:	eeb0 7a40 	vmov.f32	s14, s0
 8003752:	eef0 7a60 	vmov.f32	s15, s1
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	ed83 7b12 	vstr	d7, [r3, #72]	@ 0x48
}
 800375c:	bf00      	nop
 800375e:	3740      	adds	r7, #64	@ 0x40
 8003760:	46bd      	mov	sp, r7
 8003762:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003766:	bf00      	nop
 8003768:	00000000 	.word	0x00000000
 800376c:	40cc2900 	.word	0x40cc2900
 8003770:	00000000 	.word	0x00000000
 8003774:	40606000 	.word	0x40606000
 8003778:	1a63c1f8 	.word	0x1a63c1f8
 800377c:	404ca5dc 	.word	0x404ca5dc
 8003780:	40d00000 	.word	0x40d00000
 8003784:	43aa0000 	.word	0x43aa0000
 8003788:	42121eb8 	.word	0x42121eb8
 800378c:	200003f8 	.word	0x200003f8
 8003790:	408f4000 	.word	0x408f4000
 8003794:	c0568000 	.word	0xc0568000
 8003798:	40568000 	.word	0x40568000
 800379c:	20000050 	.word	0x20000050
 80037a0:	20000008 	.word	0x20000008

080037a4 <Kalman_getAngle>:

double Kalman_getAngle(Kalman_t *Kalman, double newAngle, double newRate, double dt)
{
 80037a4:	b5b0      	push	{r4, r5, r7, lr}
 80037a6:	b096      	sub	sp, #88	@ 0x58
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	61f8      	str	r0, [r7, #28]
 80037ac:	ed87 0b04 	vstr	d0, [r7, #16]
 80037b0:	ed87 1b02 	vstr	d1, [r7, #8]
 80037b4:	ed87 2b00 	vstr	d2, [r7]
    double rate = newRate - Kalman->bias;
 80037b8:	69fb      	ldr	r3, [r7, #28]
 80037ba:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80037be:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80037c2:	f7fc fd61 	bl	8000288 <__aeabi_dsub>
 80037c6:	4602      	mov	r2, r0
 80037c8:	460b      	mov	r3, r1
 80037ca:	e9c7 2314 	strd	r2, r3, [r7, #80]	@ 0x50
    Kalman->angle += dt * rate;
 80037ce:	69fb      	ldr	r3, [r7, #28]
 80037d0:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 80037d4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80037d8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80037dc:	f7fc ff0c 	bl	80005f8 <__aeabi_dmul>
 80037e0:	4602      	mov	r2, r0
 80037e2:	460b      	mov	r3, r1
 80037e4:	4620      	mov	r0, r4
 80037e6:	4629      	mov	r1, r5
 80037e8:	f7fc fd50 	bl	800028c <__adddf3>
 80037ec:	4602      	mov	r2, r0
 80037ee:	460b      	mov	r3, r1
 80037f0:	69f9      	ldr	r1, [r7, #28]
 80037f2:	e9c1 2306 	strd	r2, r3, [r1, #24]

    Kalman->P[0][0] += dt * (dt * Kalman->P[1][1] - Kalman->P[0][1] - Kalman->P[1][0] + Kalman->Q_angle);
 80037f6:	69fb      	ldr	r3, [r7, #28]
 80037f8:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	@ 0x28
 80037fc:	69fb      	ldr	r3, [r7, #28]
 80037fe:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 8003802:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003806:	f7fc fef7 	bl	80005f8 <__aeabi_dmul>
 800380a:	4602      	mov	r2, r0
 800380c:	460b      	mov	r3, r1
 800380e:	4610      	mov	r0, r2
 8003810:	4619      	mov	r1, r3
 8003812:	69fb      	ldr	r3, [r7, #28]
 8003814:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 8003818:	f7fc fd36 	bl	8000288 <__aeabi_dsub>
 800381c:	4602      	mov	r2, r0
 800381e:	460b      	mov	r3, r1
 8003820:	4610      	mov	r0, r2
 8003822:	4619      	mov	r1, r3
 8003824:	69fb      	ldr	r3, [r7, #28]
 8003826:	e9d3 230e 	ldrd	r2, r3, [r3, #56]	@ 0x38
 800382a:	f7fc fd2d 	bl	8000288 <__aeabi_dsub>
 800382e:	4602      	mov	r2, r0
 8003830:	460b      	mov	r3, r1
 8003832:	4610      	mov	r0, r2
 8003834:	4619      	mov	r1, r3
 8003836:	69fb      	ldr	r3, [r7, #28]
 8003838:	e9d3 2300 	ldrd	r2, r3, [r3]
 800383c:	f7fc fd26 	bl	800028c <__adddf3>
 8003840:	4602      	mov	r2, r0
 8003842:	460b      	mov	r3, r1
 8003844:	4610      	mov	r0, r2
 8003846:	4619      	mov	r1, r3
 8003848:	e9d7 2300 	ldrd	r2, r3, [r7]
 800384c:	f7fc fed4 	bl	80005f8 <__aeabi_dmul>
 8003850:	4602      	mov	r2, r0
 8003852:	460b      	mov	r3, r1
 8003854:	4620      	mov	r0, r4
 8003856:	4629      	mov	r1, r5
 8003858:	f7fc fd18 	bl	800028c <__adddf3>
 800385c:	4602      	mov	r2, r0
 800385e:	460b      	mov	r3, r1
 8003860:	69f9      	ldr	r1, [r7, #28]
 8003862:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    Kalman->P[0][1] -= dt * Kalman->P[1][1];
 8003866:	69fb      	ldr	r3, [r7, #28]
 8003868:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	@ 0x30
 800386c:	69fb      	ldr	r3, [r7, #28]
 800386e:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 8003872:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003876:	f7fc febf 	bl	80005f8 <__aeabi_dmul>
 800387a:	4602      	mov	r2, r0
 800387c:	460b      	mov	r3, r1
 800387e:	4620      	mov	r0, r4
 8003880:	4629      	mov	r1, r5
 8003882:	f7fc fd01 	bl	8000288 <__aeabi_dsub>
 8003886:	4602      	mov	r2, r0
 8003888:	460b      	mov	r3, r1
 800388a:	69f9      	ldr	r1, [r7, #28]
 800388c:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    Kalman->P[1][0] -= dt * Kalman->P[1][1];
 8003890:	69fb      	ldr	r3, [r7, #28]
 8003892:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	@ 0x38
 8003896:	69fb      	ldr	r3, [r7, #28]
 8003898:	e9d3 0110 	ldrd	r0, r1, [r3, #64]	@ 0x40
 800389c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80038a0:	f7fc feaa 	bl	80005f8 <__aeabi_dmul>
 80038a4:	4602      	mov	r2, r0
 80038a6:	460b      	mov	r3, r1
 80038a8:	4620      	mov	r0, r4
 80038aa:	4629      	mov	r1, r5
 80038ac:	f7fc fcec 	bl	8000288 <__aeabi_dsub>
 80038b0:	4602      	mov	r2, r0
 80038b2:	460b      	mov	r3, r1
 80038b4:	69f9      	ldr	r1, [r7, #28]
 80038b6:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
    Kalman->P[1][1] += Kalman->Q_bias * dt;
 80038ba:	69fb      	ldr	r3, [r7, #28]
 80038bc:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	@ 0x40
 80038c0:	69fb      	ldr	r3, [r7, #28]
 80038c2:	e9d3 0102 	ldrd	r0, r1, [r3, #8]
 80038c6:	e9d7 2300 	ldrd	r2, r3, [r7]
 80038ca:	f7fc fe95 	bl	80005f8 <__aeabi_dmul>
 80038ce:	4602      	mov	r2, r0
 80038d0:	460b      	mov	r3, r1
 80038d2:	4620      	mov	r0, r4
 80038d4:	4629      	mov	r1, r5
 80038d6:	f7fc fcd9 	bl	800028c <__adddf3>
 80038da:	4602      	mov	r2, r0
 80038dc:	460b      	mov	r3, r1
 80038de:	69f9      	ldr	r1, [r7, #28]
 80038e0:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40

    double S = Kalman->P[0][0] + Kalman->R_measure;
 80038e4:	69fb      	ldr	r3, [r7, #28]
 80038e6:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 80038ea:	69fb      	ldr	r3, [r7, #28]
 80038ec:	e9d3 2304 	ldrd	r2, r3, [r3, #16]
 80038f0:	f7fc fccc 	bl	800028c <__adddf3>
 80038f4:	4602      	mov	r2, r0
 80038f6:	460b      	mov	r3, r1
 80038f8:	e9c7 2312 	strd	r2, r3, [r7, #72]	@ 0x48
    double K[2];
    K[0] = Kalman->P[0][0] / S;
 80038fc:	69fb      	ldr	r3, [r7, #28]
 80038fe:	e9d3 010a 	ldrd	r0, r1, [r3, #40]	@ 0x28
 8003902:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003906:	f7fc ffa1 	bl	800084c <__aeabi_ddiv>
 800390a:	4602      	mov	r2, r0
 800390c:	460b      	mov	r3, r1
 800390e:	e9c7 2308 	strd	r2, r3, [r7, #32]
    K[1] = Kalman->P[1][0] / S;
 8003912:	69fb      	ldr	r3, [r7, #28]
 8003914:	e9d3 010e 	ldrd	r0, r1, [r3, #56]	@ 0x38
 8003918:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800391c:	f7fc ff96 	bl	800084c <__aeabi_ddiv>
 8003920:	4602      	mov	r2, r0
 8003922:	460b      	mov	r3, r1
 8003924:	e9c7 230a 	strd	r2, r3, [r7, #40]	@ 0x28

    double y = newAngle - Kalman->angle;
 8003928:	69fb      	ldr	r3, [r7, #28]
 800392a:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 800392e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8003932:	f7fc fca9 	bl	8000288 <__aeabi_dsub>
 8003936:	4602      	mov	r2, r0
 8003938:	460b      	mov	r3, r1
 800393a:	e9c7 2310 	strd	r2, r3, [r7, #64]	@ 0x40
    Kalman->angle += K[0] * y;
 800393e:	69fb      	ldr	r3, [r7, #28]
 8003940:	e9d3 4506 	ldrd	r4, r5, [r3, #24]
 8003944:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8003948:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800394c:	f7fc fe54 	bl	80005f8 <__aeabi_dmul>
 8003950:	4602      	mov	r2, r0
 8003952:	460b      	mov	r3, r1
 8003954:	4620      	mov	r0, r4
 8003956:	4629      	mov	r1, r5
 8003958:	f7fc fc98 	bl	800028c <__adddf3>
 800395c:	4602      	mov	r2, r0
 800395e:	460b      	mov	r3, r1
 8003960:	69f9      	ldr	r1, [r7, #28]
 8003962:	e9c1 2306 	strd	r2, r3, [r1, #24]
    Kalman->bias += K[1] * y;
 8003966:	69fb      	ldr	r3, [r7, #28]
 8003968:	e9d3 4508 	ldrd	r4, r5, [r3, #32]
 800396c:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003970:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003974:	f7fc fe40 	bl	80005f8 <__aeabi_dmul>
 8003978:	4602      	mov	r2, r0
 800397a:	460b      	mov	r3, r1
 800397c:	4620      	mov	r0, r4
 800397e:	4629      	mov	r1, r5
 8003980:	f7fc fc84 	bl	800028c <__adddf3>
 8003984:	4602      	mov	r2, r0
 8003986:	460b      	mov	r3, r1
 8003988:	69f9      	ldr	r1, [r7, #28]
 800398a:	e9c1 2308 	strd	r2, r3, [r1, #32]

    double P00_temp = Kalman->P[0][0];
 800398e:	69fb      	ldr	r3, [r7, #28]
 8003990:	e9d3 230a 	ldrd	r2, r3, [r3, #40]	@ 0x28
 8003994:	e9c7 230e 	strd	r2, r3, [r7, #56]	@ 0x38
    double P01_temp = Kalman->P[0][1];
 8003998:	69fb      	ldr	r3, [r7, #28]
 800399a:	e9d3 230c 	ldrd	r2, r3, [r3, #48]	@ 0x30
 800399e:	e9c7 230c 	strd	r2, r3, [r7, #48]	@ 0x30

    Kalman->P[0][0] -= K[0] * P00_temp;
 80039a2:	69fb      	ldr	r3, [r7, #28]
 80039a4:	e9d3 450a 	ldrd	r4, r5, [r3, #40]	@ 0x28
 80039a8:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80039ac:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80039b0:	f7fc fe22 	bl	80005f8 <__aeabi_dmul>
 80039b4:	4602      	mov	r2, r0
 80039b6:	460b      	mov	r3, r1
 80039b8:	4620      	mov	r0, r4
 80039ba:	4629      	mov	r1, r5
 80039bc:	f7fc fc64 	bl	8000288 <__aeabi_dsub>
 80039c0:	4602      	mov	r2, r0
 80039c2:	460b      	mov	r3, r1
 80039c4:	69f9      	ldr	r1, [r7, #28]
 80039c6:	e9c1 230a 	strd	r2, r3, [r1, #40]	@ 0x28
    Kalman->P[0][1] -= K[0] * P01_temp;
 80039ca:	69fb      	ldr	r3, [r7, #28]
 80039cc:	e9d3 450c 	ldrd	r4, r5, [r3, #48]	@ 0x30
 80039d0:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80039d4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80039d8:	f7fc fe0e 	bl	80005f8 <__aeabi_dmul>
 80039dc:	4602      	mov	r2, r0
 80039de:	460b      	mov	r3, r1
 80039e0:	4620      	mov	r0, r4
 80039e2:	4629      	mov	r1, r5
 80039e4:	f7fc fc50 	bl	8000288 <__aeabi_dsub>
 80039e8:	4602      	mov	r2, r0
 80039ea:	460b      	mov	r3, r1
 80039ec:	69f9      	ldr	r1, [r7, #28]
 80039ee:	e9c1 230c 	strd	r2, r3, [r1, #48]	@ 0x30
    Kalman->P[1][0] -= K[1] * P00_temp;
 80039f2:	69fb      	ldr	r3, [r7, #28]
 80039f4:	e9d3 450e 	ldrd	r4, r5, [r3, #56]	@ 0x38
 80039f8:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 80039fc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003a00:	f7fc fdfa 	bl	80005f8 <__aeabi_dmul>
 8003a04:	4602      	mov	r2, r0
 8003a06:	460b      	mov	r3, r1
 8003a08:	4620      	mov	r0, r4
 8003a0a:	4629      	mov	r1, r5
 8003a0c:	f7fc fc3c 	bl	8000288 <__aeabi_dsub>
 8003a10:	4602      	mov	r2, r0
 8003a12:	460b      	mov	r3, r1
 8003a14:	69f9      	ldr	r1, [r7, #28]
 8003a16:	e9c1 230e 	strd	r2, r3, [r1, #56]	@ 0x38
    Kalman->P[1][1] -= K[1] * P01_temp;
 8003a1a:	69fb      	ldr	r3, [r7, #28]
 8003a1c:	e9d3 4510 	ldrd	r4, r5, [r3, #64]	@ 0x40
 8003a20:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8003a24:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 8003a28:	f7fc fde6 	bl	80005f8 <__aeabi_dmul>
 8003a2c:	4602      	mov	r2, r0
 8003a2e:	460b      	mov	r3, r1
 8003a30:	4620      	mov	r0, r4
 8003a32:	4629      	mov	r1, r5
 8003a34:	f7fc fc28 	bl	8000288 <__aeabi_dsub>
 8003a38:	4602      	mov	r2, r0
 8003a3a:	460b      	mov	r3, r1
 8003a3c:	69f9      	ldr	r1, [r7, #28]
 8003a3e:	e9c1 2310 	strd	r2, r3, [r1, #64]	@ 0x40

    return Kalman->angle;
 8003a42:	69fb      	ldr	r3, [r7, #28]
 8003a44:	e9d3 2306 	ldrd	r2, r3, [r3, #24]
 8003a48:	ec43 2b17 	vmov	d7, r2, r3
};
 8003a4c:	eeb0 0a47 	vmov.f32	s0, s14
 8003a50:	eef0 0a67 	vmov.f32	s1, s15
 8003a54:	3758      	adds	r7, #88	@ 0x58
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bdb0      	pop	{r4, r5, r7, pc}

08003a5a <width>:
SSD1306_Geometry display_geometry = SSD1306_GEOMETRY;

//
//  Get a width and height screen size
//
static const uint16_t width(void)  { return SSD1306_WIDTH; };
 8003a5a:	b480      	push	{r7}
 8003a5c:	af00      	add	r7, sp, #0
 8003a5e:	2380      	movs	r3, #128	@ 0x80
 8003a60:	4618      	mov	r0, r3
 8003a62:	46bd      	mov	sp, r7
 8003a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a68:	4770      	bx	lr

08003a6a <height>:
static const uint16_t height(void)  { return SSD1306_HEIGHT; };
 8003a6a:	b480      	push	{r7}
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	2320      	movs	r3, #32
 8003a70:	4618      	mov	r0, r3
 8003a72:	46bd      	mov	sp, r7
 8003a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a78:	4770      	bx	lr

08003a7a <ssd1306_GetWidth>:

uint16_t ssd1306_GetWidth(void)
{
 8003a7a:	b480      	push	{r7}
 8003a7c:	af00      	add	r7, sp, #0
  return SSD1306_WIDTH;
 8003a7e:	2380      	movs	r3, #128	@ 0x80
}
 8003a80:	4618      	mov	r0, r3
 8003a82:	46bd      	mov	sp, r7
 8003a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a88:	4770      	bx	lr

08003a8a <ssd1306_GetHeight>:

uint16_t ssd1306_GetHeight(void)
{
 8003a8a:	b480      	push	{r7}
 8003a8c:	af00      	add	r7, sp, #0
  return SSD1306_HEIGHT;
 8003a8e:	2320      	movs	r3, #32
}
 8003a90:	4618      	mov	r0, r3
 8003a92:	46bd      	mov	sp, r7
 8003a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a98:	4770      	bx	lr
	...

08003a9c <ssd1306_Init>:
  SSD1306.Color = color;
}

//  Initialize the oled screen
uint8_t ssd1306_Init(void)
{
 8003a9c:	b580      	push	{r7, lr}
 8003a9e:	af00      	add	r7, sp, #0
  /* Check if LCD connected to I2C */
  if (HAL_I2C_IsDeviceReady(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 5, 1000) != HAL_OK)
 8003aa0:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8003aa4:	2205      	movs	r2, #5
 8003aa6:	2178      	movs	r1, #120	@ 0x78
 8003aa8:	4847      	ldr	r0, [pc, #284]	@ (8003bc8 <ssd1306_Init+0x12c>)
 8003aaa:	f002 f94d 	bl	8005d48 <HAL_I2C_IsDeviceReady>
 8003aae:	4603      	mov	r3, r0
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d004      	beq.n	8003abe <ssd1306_Init+0x22>
  {
    SSD1306.Initialized = 0;
 8003ab4:	4b45      	ldr	r3, [pc, #276]	@ (8003bcc <ssd1306_Init+0x130>)
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	719a      	strb	r2, [r3, #6]
    /* Return false */
    return 0;
 8003aba:	2300      	movs	r3, #0
 8003abc:	e082      	b.n	8003bc4 <ssd1306_Init+0x128>
  }

  // Wait for the screen to boot
  HAL_Delay(100);
 8003abe:	2064      	movs	r0, #100	@ 0x64
 8003ac0:	f001 f8e2 	bl	8004c88 <HAL_Delay>

  /* Init LCD */
  ssd1306_WriteCommand(DISPLAYOFF);
 8003ac4:	20ae      	movs	r0, #174	@ 0xae
 8003ac6:	f000 f9d5 	bl	8003e74 <ssd1306_WriteCommand>
  ssd1306_WriteCommand(SETDISPLAYCLOCKDIV);
 8003aca:	20d5      	movs	r0, #213	@ 0xd5
 8003acc:	f000 f9d2 	bl	8003e74 <ssd1306_WriteCommand>
  ssd1306_WriteCommand(0xF0); // Increase speed of the display max ~96Hz
 8003ad0:	20f0      	movs	r0, #240	@ 0xf0
 8003ad2:	f000 f9cf 	bl	8003e74 <ssd1306_WriteCommand>
  ssd1306_WriteCommand(SETMULTIPLEX);
 8003ad6:	20a8      	movs	r0, #168	@ 0xa8
 8003ad8:	f000 f9cc 	bl	8003e74 <ssd1306_WriteCommand>
  ssd1306_WriteCommand(height() - 1);
 8003adc:	f7ff ffc5 	bl	8003a6a <height>
 8003ae0:	4603      	mov	r3, r0
 8003ae2:	b2db      	uxtb	r3, r3
 8003ae4:	3b01      	subs	r3, #1
 8003ae6:	b2db      	uxtb	r3, r3
 8003ae8:	4618      	mov	r0, r3
 8003aea:	f000 f9c3 	bl	8003e74 <ssd1306_WriteCommand>
  ssd1306_WriteCommand(SETDISPLAYOFFSET);
 8003aee:	20d3      	movs	r0, #211	@ 0xd3
 8003af0:	f000 f9c0 	bl	8003e74 <ssd1306_WriteCommand>
  ssd1306_WriteCommand(0x00);
 8003af4:	2000      	movs	r0, #0
 8003af6:	f000 f9bd 	bl	8003e74 <ssd1306_WriteCommand>
  ssd1306_WriteCommand(SETSTARTLINE);
 8003afa:	2040      	movs	r0, #64	@ 0x40
 8003afc:	f000 f9ba 	bl	8003e74 <ssd1306_WriteCommand>
  ssd1306_WriteCommand(CHARGEPUMP);
 8003b00:	208d      	movs	r0, #141	@ 0x8d
 8003b02:	f000 f9b7 	bl	8003e74 <ssd1306_WriteCommand>
  ssd1306_WriteCommand(0x14);
 8003b06:	2014      	movs	r0, #20
 8003b08:	f000 f9b4 	bl	8003e74 <ssd1306_WriteCommand>
  ssd1306_WriteCommand(MEMORYMODE);
 8003b0c:	2020      	movs	r0, #32
 8003b0e:	f000 f9b1 	bl	8003e74 <ssd1306_WriteCommand>
  ssd1306_WriteCommand(0x00);
 8003b12:	2000      	movs	r0, #0
 8003b14:	f000 f9ae 	bl	8003e74 <ssd1306_WriteCommand>
  ssd1306_WriteCommand(SEGREMAP);
 8003b18:	20a0      	movs	r0, #160	@ 0xa0
 8003b1a:	f000 f9ab 	bl	8003e74 <ssd1306_WriteCommand>
  ssd1306_WriteCommand(COMSCANINC);
 8003b1e:	20c0      	movs	r0, #192	@ 0xc0
 8003b20:	f000 f9a8 	bl	8003e74 <ssd1306_WriteCommand>
  ssd1306_WriteCommand(SETCOMPINS);
 8003b24:	20da      	movs	r0, #218	@ 0xda
 8003b26:	f000 f9a5 	bl	8003e74 <ssd1306_WriteCommand>

  if (display_geometry == GEOMETRY_128_64)
 8003b2a:	4b29      	ldr	r3, [pc, #164]	@ (8003bd0 <ssd1306_Init+0x134>)
 8003b2c:	781b      	ldrb	r3, [r3, #0]
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d103      	bne.n	8003b3a <ssd1306_Init+0x9e>
  {
    ssd1306_WriteCommand(0x12);
 8003b32:	2012      	movs	r0, #18
 8003b34:	f000 f99e 	bl	8003e74 <ssd1306_WriteCommand>
 8003b38:	e006      	b.n	8003b48 <ssd1306_Init+0xac>
  }
  else if (display_geometry == GEOMETRY_128_32)
 8003b3a:	4b25      	ldr	r3, [pc, #148]	@ (8003bd0 <ssd1306_Init+0x134>)
 8003b3c:	781b      	ldrb	r3, [r3, #0]
 8003b3e:	2b01      	cmp	r3, #1
 8003b40:	d102      	bne.n	8003b48 <ssd1306_Init+0xac>
  {
    ssd1306_WriteCommand(0x02);
 8003b42:	2002      	movs	r0, #2
 8003b44:	f000 f996 	bl	8003e74 <ssd1306_WriteCommand>
  }

  ssd1306_WriteCommand(SETCONTRAST);
 8003b48:	2081      	movs	r0, #129	@ 0x81
 8003b4a:	f000 f993 	bl	8003e74 <ssd1306_WriteCommand>

  if (display_geometry == GEOMETRY_128_64)
 8003b4e:	4b20      	ldr	r3, [pc, #128]	@ (8003bd0 <ssd1306_Init+0x134>)
 8003b50:	781b      	ldrb	r3, [r3, #0]
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d103      	bne.n	8003b5e <ssd1306_Init+0xc2>
  {
    ssd1306_WriteCommand(0xCF);
 8003b56:	20cf      	movs	r0, #207	@ 0xcf
 8003b58:	f000 f98c 	bl	8003e74 <ssd1306_WriteCommand>
 8003b5c:	e006      	b.n	8003b6c <ssd1306_Init+0xd0>
  }
  else if (display_geometry == GEOMETRY_128_32)
 8003b5e:	4b1c      	ldr	r3, [pc, #112]	@ (8003bd0 <ssd1306_Init+0x134>)
 8003b60:	781b      	ldrb	r3, [r3, #0]
 8003b62:	2b01      	cmp	r3, #1
 8003b64:	d102      	bne.n	8003b6c <ssd1306_Init+0xd0>
  {
    ssd1306_WriteCommand(0x8F);
 8003b66:	208f      	movs	r0, #143	@ 0x8f
 8003b68:	f000 f984 	bl	8003e74 <ssd1306_WriteCommand>
  }

  ssd1306_WriteCommand(SETPRECHARGE);
 8003b6c:	20d9      	movs	r0, #217	@ 0xd9
 8003b6e:	f000 f981 	bl	8003e74 <ssd1306_WriteCommand>
  ssd1306_WriteCommand(0xF1);
 8003b72:	20f1      	movs	r0, #241	@ 0xf1
 8003b74:	f000 f97e 	bl	8003e74 <ssd1306_WriteCommand>
  ssd1306_WriteCommand(SETVCOMDETECT); //0xDB, (additionally needed to lower the contrast)
 8003b78:	20db      	movs	r0, #219	@ 0xdb
 8003b7a:	f000 f97b 	bl	8003e74 <ssd1306_WriteCommand>
  ssd1306_WriteCommand(0x40);          //0x40 default, to lower the contrast, put 0
 8003b7e:	2040      	movs	r0, #64	@ 0x40
 8003b80:	f000 f978 	bl	8003e74 <ssd1306_WriteCommand>
  ssd1306_WriteCommand(DISPLAYALLON_RESUME);
 8003b84:	20a4      	movs	r0, #164	@ 0xa4
 8003b86:	f000 f975 	bl	8003e74 <ssd1306_WriteCommand>
  ssd1306_WriteCommand(NORMALDISPLAY);
 8003b8a:	20a6      	movs	r0, #166	@ 0xa6
 8003b8c:	f000 f972 	bl	8003e74 <ssd1306_WriteCommand>
  ssd1306_WriteCommand(0x2e);            // stop scroll
 8003b90:	202e      	movs	r0, #46	@ 0x2e
 8003b92:	f000 f96f 	bl	8003e74 <ssd1306_WriteCommand>
  ssd1306_WriteCommand(DISPLAYON);
 8003b96:	20af      	movs	r0, #175	@ 0xaf
 8003b98:	f000 f96c 	bl	8003e74 <ssd1306_WriteCommand>

  // Set default values for screen object
  SSD1306.CurrentX = 0;
 8003b9c:	4b0b      	ldr	r3, [pc, #44]	@ (8003bcc <ssd1306_Init+0x130>)
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	801a      	strh	r2, [r3, #0]
  SSD1306.CurrentY = 0;
 8003ba2:	4b0a      	ldr	r3, [pc, #40]	@ (8003bcc <ssd1306_Init+0x130>)
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	805a      	strh	r2, [r3, #2]
  SSD1306.Color = Black;
 8003ba8:	4b08      	ldr	r3, [pc, #32]	@ (8003bcc <ssd1306_Init+0x130>)
 8003baa:	2200      	movs	r2, #0
 8003bac:	715a      	strb	r2, [r3, #5]
  SSD1306.Inverted = 1;
 8003bae:	4b07      	ldr	r3, [pc, #28]	@ (8003bcc <ssd1306_Init+0x130>)
 8003bb0:	2201      	movs	r2, #1
 8003bb2:	711a      	strb	r2, [r3, #4]
  // Clear screen
  ssd1306_Clear();
 8003bb4:	f000 f952 	bl	8003e5c <ssd1306_Clear>

  // Continuous Update on
  ssd1306_ContUpdateEnable();

  // Flush buffer to screen
  ssd1306_UpdateScreen();
 8003bb8:	f000 f98c 	bl	8003ed4 <ssd1306_UpdateScreen>

  SSD1306.Initialized = 1;
 8003bbc:	4b03      	ldr	r3, [pc, #12]	@ (8003bcc <ssd1306_Init+0x130>)
 8003bbe:	2201      	movs	r2, #1
 8003bc0:	719a      	strb	r2, [r3, #6]


  /* Return OK */
  return 1;
 8003bc2:	2301      	movs	r3, #1
}
 8003bc4:	4618      	mov	r0, r3
 8003bc6:	bd80      	pop	{r7, pc}
 8003bc8:	20000608 	.word	0x20000608
 8003bcc:	200003fc 	.word	0x200003fc
 8003bd0:	200000a0 	.word	0x200000a0

08003bd4 <ssd1306_DrawPixel>:
//  X => X Coordinate
//  Y => Y Coordinate
//  color => Pixel color
//
void ssd1306_DrawPixel(uint8_t x, uint8_t y)
{
 8003bd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003bd6:	b085      	sub	sp, #20
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	4603      	mov	r3, r0
 8003bdc:	460a      	mov	r2, r1
 8003bde:	71fb      	strb	r3, [r7, #7]
 8003be0:	4613      	mov	r3, r2
 8003be2:	71bb      	strb	r3, [r7, #6]
  SSD1306_COLOR color = SSD1306.Color;
 8003be4:	4b34      	ldr	r3, [pc, #208]	@ (8003cb8 <ssd1306_DrawPixel+0xe4>)
 8003be6:	795b      	ldrb	r3, [r3, #5]
 8003be8:	73fb      	strb	r3, [r7, #15]

  if (x >= ssd1306_GetWidth() || y >= ssd1306_GetHeight())
 8003bea:	79fb      	ldrb	r3, [r7, #7]
 8003bec:	b29c      	uxth	r4, r3
 8003bee:	f7ff ff44 	bl	8003a7a <ssd1306_GetWidth>
 8003bf2:	4603      	mov	r3, r0
 8003bf4:	429c      	cmp	r4, r3
 8003bf6:	d25a      	bcs.n	8003cae <ssd1306_DrawPixel+0xda>
 8003bf8:	79bb      	ldrb	r3, [r7, #6]
 8003bfa:	b29c      	uxth	r4, r3
 8003bfc:	f7ff ff45 	bl	8003a8a <ssd1306_GetHeight>
 8003c00:	4603      	mov	r3, r0
 8003c02:	429c      	cmp	r4, r3
 8003c04:	d253      	bcs.n	8003cae <ssd1306_DrawPixel+0xda>
    // Don't write outside the buffer
    return;
  }

  // Check if pixel should be inverted
  if (SSD1306.Inverted)
 8003c06:	4b2c      	ldr	r3, [pc, #176]	@ (8003cb8 <ssd1306_DrawPixel+0xe4>)
 8003c08:	791b      	ldrb	r3, [r3, #4]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d006      	beq.n	8003c1c <ssd1306_DrawPixel+0x48>
  {
    color = (SSD1306_COLOR) !color;
 8003c0e:	7bfb      	ldrb	r3, [r7, #15]
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	bf0c      	ite	eq
 8003c14:	2301      	moveq	r3, #1
 8003c16:	2300      	movne	r3, #0
 8003c18:	b2db      	uxtb	r3, r3
 8003c1a:	73fb      	strb	r3, [r7, #15]
  }

  // Draw in the right color
  if (color == White)
 8003c1c:	7bfb      	ldrb	r3, [r7, #15]
 8003c1e:	2b01      	cmp	r3, #1
 8003c20:	d121      	bne.n	8003c66 <ssd1306_DrawPixel+0x92>
  {
    SSD1306_Buffer[x + (y / 8) * width()] |= 1 << (y % 8);
 8003c22:	79fc      	ldrb	r4, [r7, #7]
 8003c24:	79bb      	ldrb	r3, [r7, #6]
 8003c26:	08db      	lsrs	r3, r3, #3
 8003c28:	b2dd      	uxtb	r5, r3
 8003c2a:	462e      	mov	r6, r5
 8003c2c:	f7ff ff15 	bl	8003a5a <width>
 8003c30:	4603      	mov	r3, r0
 8003c32:	4618      	mov	r0, r3
 8003c34:	4603      	mov	r3, r0
 8003c36:	fb06 f303 	mul.w	r3, r6, r3
 8003c3a:	4423      	add	r3, r4
 8003c3c:	4a1f      	ldr	r2, [pc, #124]	@ (8003cbc <ssd1306_DrawPixel+0xe8>)
 8003c3e:	5cd3      	ldrb	r3, [r2, r3]
 8003c40:	b25a      	sxtb	r2, r3
 8003c42:	79bb      	ldrb	r3, [r7, #6]
 8003c44:	f003 0307 	and.w	r3, r3, #7
 8003c48:	2101      	movs	r1, #1
 8003c4a:	fa01 f303 	lsl.w	r3, r1, r3
 8003c4e:	b25b      	sxtb	r3, r3
 8003c50:	4313      	orrs	r3, r2
 8003c52:	b259      	sxtb	r1, r3
 8003c54:	79fa      	ldrb	r2, [r7, #7]
 8003c56:	462b      	mov	r3, r5
 8003c58:	fb00 f303 	mul.w	r3, r0, r3
 8003c5c:	4413      	add	r3, r2
 8003c5e:	b2c9      	uxtb	r1, r1
 8003c60:	4a16      	ldr	r2, [pc, #88]	@ (8003cbc <ssd1306_DrawPixel+0xe8>)
 8003c62:	54d1      	strb	r1, [r2, r3]
 8003c64:	e024      	b.n	8003cb0 <ssd1306_DrawPixel+0xdc>
  }
  else
  {
    SSD1306_Buffer[x + (y / 8) * width()] &= ~(1 << (y % 8));
 8003c66:	79fc      	ldrb	r4, [r7, #7]
 8003c68:	79bb      	ldrb	r3, [r7, #6]
 8003c6a:	08db      	lsrs	r3, r3, #3
 8003c6c:	b2dd      	uxtb	r5, r3
 8003c6e:	462e      	mov	r6, r5
 8003c70:	f7ff fef3 	bl	8003a5a <width>
 8003c74:	4603      	mov	r3, r0
 8003c76:	4618      	mov	r0, r3
 8003c78:	4603      	mov	r3, r0
 8003c7a:	fb06 f303 	mul.w	r3, r6, r3
 8003c7e:	4423      	add	r3, r4
 8003c80:	4a0e      	ldr	r2, [pc, #56]	@ (8003cbc <ssd1306_DrawPixel+0xe8>)
 8003c82:	5cd3      	ldrb	r3, [r2, r3]
 8003c84:	b25a      	sxtb	r2, r3
 8003c86:	79bb      	ldrb	r3, [r7, #6]
 8003c88:	f003 0307 	and.w	r3, r3, #7
 8003c8c:	2101      	movs	r1, #1
 8003c8e:	fa01 f303 	lsl.w	r3, r1, r3
 8003c92:	b25b      	sxtb	r3, r3
 8003c94:	43db      	mvns	r3, r3
 8003c96:	b25b      	sxtb	r3, r3
 8003c98:	4013      	ands	r3, r2
 8003c9a:	b259      	sxtb	r1, r3
 8003c9c:	79fa      	ldrb	r2, [r7, #7]
 8003c9e:	462b      	mov	r3, r5
 8003ca0:	fb00 f303 	mul.w	r3, r0, r3
 8003ca4:	4413      	add	r3, r2
 8003ca6:	b2c9      	uxtb	r1, r1
 8003ca8:	4a04      	ldr	r2, [pc, #16]	@ (8003cbc <ssd1306_DrawPixel+0xe8>)
 8003caa:	54d1      	strb	r1, [r2, r3]
 8003cac:	e000      	b.n	8003cb0 <ssd1306_DrawPixel+0xdc>
    return;
 8003cae:	bf00      	nop
  }
}
 8003cb0:	3714      	adds	r7, #20
 8003cb2:	46bd      	mov	sp, r7
 8003cb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003cb6:	bf00      	nop
 8003cb8:	200003fc 	.word	0x200003fc
 8003cbc:	20000404 	.word	0x20000404

08003cc0 <ssd1306_WriteChar>:
    pY += 8;
  }
}

char ssd1306_WriteChar(char ch, FontDef Font)
{
 8003cc0:	b580      	push	{r7, lr}
 8003cc2:	b088      	sub	sp, #32
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	1d3b      	adds	r3, r7, #4
 8003cc8:	e883 0006 	stmia.w	r3, {r1, r2}
 8003ccc:	4603      	mov	r3, r0
 8003cce:	73fb      	strb	r3, [r7, #15]
  uint32_t i, b, j;

  // Check remaining space on current line
  if (width() <= (SSD1306.CurrentX + Font.FontWidth) ||
 8003cd0:	f7ff fec3 	bl	8003a5a <width>
 8003cd4:	4603      	mov	r3, r0
 8003cd6:	461a      	mov	r2, r3
 8003cd8:	4b40      	ldr	r3, [pc, #256]	@ (8003ddc <ssd1306_WriteChar+0x11c>)
 8003cda:	881b      	ldrh	r3, [r3, #0]
 8003cdc:	4619      	mov	r1, r3
 8003cde:	793b      	ldrb	r3, [r7, #4]
 8003ce0:	440b      	add	r3, r1
 8003ce2:	429a      	cmp	r2, r3
 8003ce4:	dd0a      	ble.n	8003cfc <ssd1306_WriteChar+0x3c>
    height() <= (SSD1306.CurrentY + Font.FontHeight))
 8003ce6:	f7ff fec0 	bl	8003a6a <height>
 8003cea:	4603      	mov	r3, r0
 8003cec:	461a      	mov	r2, r3
 8003cee:	4b3b      	ldr	r3, [pc, #236]	@ (8003ddc <ssd1306_WriteChar+0x11c>)
 8003cf0:	885b      	ldrh	r3, [r3, #2]
 8003cf2:	4619      	mov	r1, r3
 8003cf4:	797b      	ldrb	r3, [r7, #5]
 8003cf6:	440b      	add	r3, r1
  if (width() <= (SSD1306.CurrentX + Font.FontWidth) ||
 8003cf8:	429a      	cmp	r2, r3
 8003cfa:	dc01      	bgt.n	8003d00 <ssd1306_WriteChar+0x40>
  {
    // Not enough space on current line
    return 0;
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	e069      	b.n	8003dd4 <ssd1306_WriteChar+0x114>
  }

  // Use the font to write
  for (i = 0; i < Font.FontHeight; i++)
 8003d00:	2300      	movs	r3, #0
 8003d02:	61fb      	str	r3, [r7, #28]
 8003d04:	e059      	b.n	8003dba <ssd1306_WriteChar+0xfa>
  {
    b = Font.data[(ch - 32) * Font.FontHeight + i];
 8003d06:	68ba      	ldr	r2, [r7, #8]
 8003d08:	7bfb      	ldrb	r3, [r7, #15]
 8003d0a:	3b20      	subs	r3, #32
 8003d0c:	7979      	ldrb	r1, [r7, #5]
 8003d0e:	fb01 f303 	mul.w	r3, r1, r3
 8003d12:	4619      	mov	r1, r3
 8003d14:	69fb      	ldr	r3, [r7, #28]
 8003d16:	440b      	add	r3, r1
 8003d18:	005b      	lsls	r3, r3, #1
 8003d1a:	4413      	add	r3, r2
 8003d1c:	881b      	ldrh	r3, [r3, #0]
 8003d1e:	617b      	str	r3, [r7, #20]
    for (j = 0; j < Font.FontWidth; j++)
 8003d20:	2300      	movs	r3, #0
 8003d22:	61bb      	str	r3, [r7, #24]
 8003d24:	e041      	b.n	8003daa <ssd1306_WriteChar+0xea>
    {
      if ((b << j) & 0x8000)
 8003d26:	697a      	ldr	r2, [r7, #20]
 8003d28:	69bb      	ldr	r3, [r7, #24]
 8003d2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003d2e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d011      	beq.n	8003d5a <ssd1306_WriteChar+0x9a>
      {
        ssd1306_DrawPixel(SSD1306.CurrentX + j, SSD1306.CurrentY + i);
 8003d36:	4b29      	ldr	r3, [pc, #164]	@ (8003ddc <ssd1306_WriteChar+0x11c>)
 8003d38:	881b      	ldrh	r3, [r3, #0]
 8003d3a:	b2da      	uxtb	r2, r3
 8003d3c:	69bb      	ldr	r3, [r7, #24]
 8003d3e:	b2db      	uxtb	r3, r3
 8003d40:	4413      	add	r3, r2
 8003d42:	b2d8      	uxtb	r0, r3
 8003d44:	4b25      	ldr	r3, [pc, #148]	@ (8003ddc <ssd1306_WriteChar+0x11c>)
 8003d46:	885b      	ldrh	r3, [r3, #2]
 8003d48:	b2da      	uxtb	r2, r3
 8003d4a:	69fb      	ldr	r3, [r7, #28]
 8003d4c:	b2db      	uxtb	r3, r3
 8003d4e:	4413      	add	r3, r2
 8003d50:	b2db      	uxtb	r3, r3
 8003d52:	4619      	mov	r1, r3
 8003d54:	f7ff ff3e 	bl	8003bd4 <ssd1306_DrawPixel>
 8003d58:	e024      	b.n	8003da4 <ssd1306_WriteChar+0xe4>
      }
      else
      {
        SSD1306.Color = !SSD1306.Color;
 8003d5a:	4b20      	ldr	r3, [pc, #128]	@ (8003ddc <ssd1306_WriteChar+0x11c>)
 8003d5c:	795b      	ldrb	r3, [r3, #5]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	bf0c      	ite	eq
 8003d62:	2301      	moveq	r3, #1
 8003d64:	2300      	movne	r3, #0
 8003d66:	b2db      	uxtb	r3, r3
 8003d68:	461a      	mov	r2, r3
 8003d6a:	4b1c      	ldr	r3, [pc, #112]	@ (8003ddc <ssd1306_WriteChar+0x11c>)
 8003d6c:	715a      	strb	r2, [r3, #5]
        ssd1306_DrawPixel(SSD1306.CurrentX + j, SSD1306.CurrentY + i);
 8003d6e:	4b1b      	ldr	r3, [pc, #108]	@ (8003ddc <ssd1306_WriteChar+0x11c>)
 8003d70:	881b      	ldrh	r3, [r3, #0]
 8003d72:	b2da      	uxtb	r2, r3
 8003d74:	69bb      	ldr	r3, [r7, #24]
 8003d76:	b2db      	uxtb	r3, r3
 8003d78:	4413      	add	r3, r2
 8003d7a:	b2d8      	uxtb	r0, r3
 8003d7c:	4b17      	ldr	r3, [pc, #92]	@ (8003ddc <ssd1306_WriteChar+0x11c>)
 8003d7e:	885b      	ldrh	r3, [r3, #2]
 8003d80:	b2da      	uxtb	r2, r3
 8003d82:	69fb      	ldr	r3, [r7, #28]
 8003d84:	b2db      	uxtb	r3, r3
 8003d86:	4413      	add	r3, r2
 8003d88:	b2db      	uxtb	r3, r3
 8003d8a:	4619      	mov	r1, r3
 8003d8c:	f7ff ff22 	bl	8003bd4 <ssd1306_DrawPixel>
        SSD1306.Color = !SSD1306.Color;
 8003d90:	4b12      	ldr	r3, [pc, #72]	@ (8003ddc <ssd1306_WriteChar+0x11c>)
 8003d92:	795b      	ldrb	r3, [r3, #5]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	bf0c      	ite	eq
 8003d98:	2301      	moveq	r3, #1
 8003d9a:	2300      	movne	r3, #0
 8003d9c:	b2db      	uxtb	r3, r3
 8003d9e:	461a      	mov	r2, r3
 8003da0:	4b0e      	ldr	r3, [pc, #56]	@ (8003ddc <ssd1306_WriteChar+0x11c>)
 8003da2:	715a      	strb	r2, [r3, #5]
    for (j = 0; j < Font.FontWidth; j++)
 8003da4:	69bb      	ldr	r3, [r7, #24]
 8003da6:	3301      	adds	r3, #1
 8003da8:	61bb      	str	r3, [r7, #24]
 8003daa:	793b      	ldrb	r3, [r7, #4]
 8003dac:	461a      	mov	r2, r3
 8003dae:	69bb      	ldr	r3, [r7, #24]
 8003db0:	4293      	cmp	r3, r2
 8003db2:	d3b8      	bcc.n	8003d26 <ssd1306_WriteChar+0x66>
  for (i = 0; i < Font.FontHeight; i++)
 8003db4:	69fb      	ldr	r3, [r7, #28]
 8003db6:	3301      	adds	r3, #1
 8003db8:	61fb      	str	r3, [r7, #28]
 8003dba:	797b      	ldrb	r3, [r7, #5]
 8003dbc:	461a      	mov	r2, r3
 8003dbe:	69fb      	ldr	r3, [r7, #28]
 8003dc0:	4293      	cmp	r3, r2
 8003dc2:	d3a0      	bcc.n	8003d06 <ssd1306_WriteChar+0x46>
      }
    }
  }

  // The current space is now taken
  SSD1306.CurrentX += Font.FontWidth;
 8003dc4:	4b05      	ldr	r3, [pc, #20]	@ (8003ddc <ssd1306_WriteChar+0x11c>)
 8003dc6:	881b      	ldrh	r3, [r3, #0]
 8003dc8:	793a      	ldrb	r2, [r7, #4]
 8003dca:	4413      	add	r3, r2
 8003dcc:	b29a      	uxth	r2, r3
 8003dce:	4b03      	ldr	r3, [pc, #12]	@ (8003ddc <ssd1306_WriteChar+0x11c>)
 8003dd0:	801a      	strh	r2, [r3, #0]

  // Return written char for validation
  return ch;
 8003dd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003dd4:	4618      	mov	r0, r3
 8003dd6:	3720      	adds	r7, #32
 8003dd8:	46bd      	mov	sp, r7
 8003dda:	bd80      	pop	{r7, pc}
 8003ddc:	200003fc 	.word	0x200003fc

08003de0 <ssd1306_WriteString>:

//
//  Write full string to screenbuffer
//
char ssd1306_WriteString(char* str, FontDef Font)
{
 8003de0:	b580      	push	{r7, lr}
 8003de2:	b084      	sub	sp, #16
 8003de4:	af00      	add	r7, sp, #0
 8003de6:	60f8      	str	r0, [r7, #12]
 8003de8:	1d3b      	adds	r3, r7, #4
 8003dea:	e883 0006 	stmia.w	r3, {r1, r2}
  // Write until null-byte
  while (*str)
 8003dee:	e012      	b.n	8003e16 <ssd1306_WriteString+0x36>
  {
    if (ssd1306_WriteChar(*str, Font) != *str)
 8003df0:	68fb      	ldr	r3, [r7, #12]
 8003df2:	7818      	ldrb	r0, [r3, #0]
 8003df4:	1d3b      	adds	r3, r7, #4
 8003df6:	e893 0006 	ldmia.w	r3, {r1, r2}
 8003dfa:	f7ff ff61 	bl	8003cc0 <ssd1306_WriteChar>
 8003dfe:	4603      	mov	r3, r0
 8003e00:	461a      	mov	r2, r3
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	781b      	ldrb	r3, [r3, #0]
 8003e06:	429a      	cmp	r2, r3
 8003e08:	d002      	beq.n	8003e10 <ssd1306_WriteString+0x30>
    {
      // Char could not be written
      return *str;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	781b      	ldrb	r3, [r3, #0]
 8003e0e:	e008      	b.n	8003e22 <ssd1306_WriteString+0x42>
    }

    // Next char
    str++;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	3301      	adds	r3, #1
 8003e14:	60fb      	str	r3, [r7, #12]
  while (*str)
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	781b      	ldrb	r3, [r3, #0]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d1e8      	bne.n	8003df0 <ssd1306_WriteString+0x10>
  }

  // Everything ok
  return *str;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	781b      	ldrb	r3, [r3, #0]
}
 8003e22:	4618      	mov	r0, r3
 8003e24:	3710      	adds	r7, #16
 8003e26:	46bd      	mov	sp, r7
 8003e28:	bd80      	pop	{r7, pc}
	...

08003e2c <ssd1306_SetCursor>:

//
//  Position the cursor
//
void ssd1306_SetCursor(uint8_t x, uint8_t y)
{
 8003e2c:	b480      	push	{r7}
 8003e2e:	b083      	sub	sp, #12
 8003e30:	af00      	add	r7, sp, #0
 8003e32:	4603      	mov	r3, r0
 8003e34:	460a      	mov	r2, r1
 8003e36:	71fb      	strb	r3, [r7, #7]
 8003e38:	4613      	mov	r3, r2
 8003e3a:	71bb      	strb	r3, [r7, #6]
  SSD1306.CurrentX = x;
 8003e3c:	79fb      	ldrb	r3, [r7, #7]
 8003e3e:	b29a      	uxth	r2, r3
 8003e40:	4b05      	ldr	r3, [pc, #20]	@ (8003e58 <ssd1306_SetCursor+0x2c>)
 8003e42:	801a      	strh	r2, [r3, #0]
  SSD1306.CurrentY = y;
 8003e44:	79bb      	ldrb	r3, [r7, #6]
 8003e46:	b29a      	uxth	r2, r3
 8003e48:	4b03      	ldr	r3, [pc, #12]	@ (8003e58 <ssd1306_SetCursor+0x2c>)
 8003e4a:	805a      	strh	r2, [r3, #2]
}
 8003e4c:	bf00      	nop
 8003e4e:	370c      	adds	r7, #12
 8003e50:	46bd      	mov	sp, r7
 8003e52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e56:	4770      	bx	lr
 8003e58:	200003fc 	.word	0x200003fc

08003e5c <ssd1306_Clear>:

void ssd1306_Clear()
{
 8003e5c:	b580      	push	{r7, lr}
 8003e5e:	af00      	add	r7, sp, #0
  memset(SSD1306_Buffer, 0, SSD1306_BUFFER_SIZE);
 8003e60:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003e64:	2100      	movs	r1, #0
 8003e66:	4802      	ldr	r0, [pc, #8]	@ (8003e70 <ssd1306_Clear+0x14>)
 8003e68:	f007 fdac 	bl	800b9c4 <memset>
}
 8003e6c:	bf00      	nop
 8003e6e:	bd80      	pop	{r7, pc}
 8003e70:	20000404 	.word	0x20000404

08003e74 <ssd1306_WriteCommand>:

//
//  Send a byte to the command register
//
void ssd1306_WriteCommand(uint8_t command)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b086      	sub	sp, #24
 8003e78:	af04      	add	r7, sp, #16
 8003e7a:	4603      	mov	r3, r0
 8003e7c:	71fb      	strb	r3, [r7, #7]
  HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x00, 1, &command, 1, 10);
 8003e7e:	230a      	movs	r3, #10
 8003e80:	9302      	str	r3, [sp, #8]
 8003e82:	2301      	movs	r3, #1
 8003e84:	9301      	str	r3, [sp, #4]
 8003e86:	1dfb      	adds	r3, r7, #7
 8003e88:	9300      	str	r3, [sp, #0]
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	2200      	movs	r2, #0
 8003e8e:	2178      	movs	r1, #120	@ 0x78
 8003e90:	4803      	ldr	r0, [pc, #12]	@ (8003ea0 <ssd1306_WriteCommand+0x2c>)
 8003e92:	f001 fc2d 	bl	80056f0 <HAL_I2C_Mem_Write>
}
 8003e96:	bf00      	nop
 8003e98:	3708      	adds	r7, #8
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bd80      	pop	{r7, pc}
 8003e9e:	bf00      	nop
 8003ea0:	20000608 	.word	0x20000608

08003ea4 <ssd1306_WriteData>:

void ssd1306_WriteData(uint8_t* data, uint16_t size)
{
 8003ea4:	b580      	push	{r7, lr}
 8003ea6:	b086      	sub	sp, #24
 8003ea8:	af04      	add	r7, sp, #16
 8003eaa:	6078      	str	r0, [r7, #4]
 8003eac:	460b      	mov	r3, r1
 8003eae:	807b      	strh	r3, [r7, #2]
  HAL_I2C_Mem_Write(&SSD1306_I2C_PORT, SSD1306_I2C_ADDR, 0x40, 1, data, size, 100);
 8003eb0:	2364      	movs	r3, #100	@ 0x64
 8003eb2:	9302      	str	r3, [sp, #8]
 8003eb4:	887b      	ldrh	r3, [r7, #2]
 8003eb6:	9301      	str	r3, [sp, #4]
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	9300      	str	r3, [sp, #0]
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	2240      	movs	r2, #64	@ 0x40
 8003ec0:	2178      	movs	r1, #120	@ 0x78
 8003ec2:	4803      	ldr	r0, [pc, #12]	@ (8003ed0 <ssd1306_WriteData+0x2c>)
 8003ec4:	f001 fc14 	bl	80056f0 <HAL_I2C_Mem_Write>
}
 8003ec8:	bf00      	nop
 8003eca:	3708      	adds	r7, #8
 8003ecc:	46bd      	mov	sp, r7
 8003ece:	bd80      	pop	{r7, pc}
 8003ed0:	20000608 	.word	0x20000608

08003ed4 <ssd1306_UpdateScreen>:

//
//  Write the screenbuffer with changed to the screen
//
void ssd1306_UpdateScreen(void)
{
 8003ed4:	b590      	push	{r4, r7, lr}
 8003ed6:	b083      	sub	sp, #12
 8003ed8:	af00      	add	r7, sp, #0
  uint8_t i;
  for (i = 0; i < SSD1306_HEIGHT / 8; i++)
 8003eda:	2300      	movs	r3, #0
 8003edc:	71fb      	strb	r3, [r7, #7]
 8003ede:	e019      	b.n	8003f14 <ssd1306_UpdateScreen+0x40>
  {
    ssd1306_WriteCommand(0xB0 + i);
 8003ee0:	79fb      	ldrb	r3, [r7, #7]
 8003ee2:	3b50      	subs	r3, #80	@ 0x50
 8003ee4:	b2db      	uxtb	r3, r3
 8003ee6:	4618      	mov	r0, r3
 8003ee8:	f7ff ffc4 	bl	8003e74 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(SETLOWCOLUMN);
 8003eec:	2000      	movs	r0, #0
 8003eee:	f7ff ffc1 	bl	8003e74 <ssd1306_WriteCommand>
    ssd1306_WriteCommand(SETHIGHCOLUMN);
 8003ef2:	2010      	movs	r0, #16
 8003ef4:	f7ff ffbe 	bl	8003e74 <ssd1306_WriteCommand>
    ssd1306_WriteData(&SSD1306_Buffer[SSD1306_WIDTH * i], width());
 8003ef8:	79fb      	ldrb	r3, [r7, #7]
 8003efa:	01db      	lsls	r3, r3, #7
 8003efc:	4a09      	ldr	r2, [pc, #36]	@ (8003f24 <ssd1306_UpdateScreen+0x50>)
 8003efe:	189c      	adds	r4, r3, r2
 8003f00:	f7ff fdab 	bl	8003a5a <width>
 8003f04:	4603      	mov	r3, r0
 8003f06:	4619      	mov	r1, r3
 8003f08:	4620      	mov	r0, r4
 8003f0a:	f7ff ffcb 	bl	8003ea4 <ssd1306_WriteData>
  for (i = 0; i < SSD1306_HEIGHT / 8; i++)
 8003f0e:	79fb      	ldrb	r3, [r7, #7]
 8003f10:	3301      	adds	r3, #1
 8003f12:	71fb      	strb	r3, [r7, #7]
 8003f14:	79fb      	ldrb	r3, [r7, #7]
 8003f16:	2b03      	cmp	r3, #3
 8003f18:	d9e2      	bls.n	8003ee0 <ssd1306_UpdateScreen+0xc>
  }
}
 8003f1a:	bf00      	nop
 8003f1c:	bf00      	nop
 8003f1e:	370c      	adds	r7, #12
 8003f20:	46bd      	mov	sp, r7
 8003f22:	bd90      	pop	{r4, r7, pc}
 8003f24:	20000404 	.word	0x20000404

08003f28 <board_button_init>:
---------------------------------------*/

#include "board.h"

void board_button_init(void)
{
 8003f28:	b580      	push	{r7, lr}
 8003f2a:	b086      	sub	sp, #24
 8003f2c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003f2e:	1d3b      	adds	r3, r7, #4
 8003f30:	2200      	movs	r2, #0
 8003f32:	601a      	str	r2, [r3, #0]
 8003f34:	605a      	str	r2, [r3, #4]
 8003f36:	609a      	str	r2, [r3, #8]
 8003f38:	60da      	str	r2, [r3, #12]
 8003f3a:	611a      	str	r2, [r3, #16]
  
  /* GPIO Ports Clock Enable */
  KEY_GPIO_CLK_ENABLE();
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	603b      	str	r3, [r7, #0]
 8003f40:	4b0d      	ldr	r3, [pc, #52]	@ (8003f78 <board_button_init+0x50>)
 8003f42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f44:	4a0c      	ldr	r2, [pc, #48]	@ (8003f78 <board_button_init+0x50>)
 8003f46:	f043 0304 	orr.w	r3, r3, #4
 8003f4a:	6313      	str	r3, [r2, #48]	@ 0x30
 8003f4c:	4b0a      	ldr	r3, [pc, #40]	@ (8003f78 <board_button_init+0x50>)
 8003f4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003f50:	f003 0304 	and.w	r3, r3, #4
 8003f54:	603b      	str	r3, [r7, #0]
 8003f56:	683b      	ldr	r3, [r7, #0]
  
  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = KEY_Pin;
 8003f58:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8003f5c:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003f5e:	2300      	movs	r3, #0
 8003f60:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8003f62:	2302      	movs	r3, #2
 8003f64:	60fb      	str	r3, [r7, #12]
  HAL_GPIO_Init(KEY_GPIO_Port, &GPIO_InitStruct);
 8003f66:	1d3b      	adds	r3, r7, #4
 8003f68:	4619      	mov	r1, r3
 8003f6a:	4804      	ldr	r0, [pc, #16]	@ (8003f7c <board_button_init+0x54>)
 8003f6c:	f000 ff96 	bl	8004e9c <HAL_GPIO_Init>
}
 8003f70:	bf00      	nop
 8003f72:	3718      	adds	r7, #24
 8003f74:	46bd      	mov	sp, r7
 8003f76:	bd80      	pop	{r7, pc}
 8003f78:	40023800 	.word	0x40023800
 8003f7c:	40020800 	.word	0x40020800

08003f80 <board_button_getstate>:

uint8_t board_button_getstate(void)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	af00      	add	r7, sp, #0
  return HAL_GPIO_ReadPin(KEY_GPIO_Port,KEY_Pin)==GPIO_PIN_SET?1:0;
 8003f84:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8003f88:	4805      	ldr	r0, [pc, #20]	@ (8003fa0 <board_button_getstate+0x20>)
 8003f8a:	f001 f923 	bl	80051d4 <HAL_GPIO_ReadPin>
 8003f8e:	4603      	mov	r3, r0
 8003f90:	2b01      	cmp	r3, #1
 8003f92:	bf0c      	ite	eq
 8003f94:	2301      	moveq	r3, #1
 8003f96:	2300      	movne	r3, #0
 8003f98:	b2db      	uxtb	r3, r3
}
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	bd80      	pop	{r7, pc}
 8003f9e:	bf00      	nop
 8003fa0:	40020800 	.word	0x40020800

08003fa4 <board_led_init>:

void board_led_init(void)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b086      	sub	sp, #24
 8003fa8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003faa:	1d3b      	adds	r3, r7, #4
 8003fac:	2200      	movs	r2, #0
 8003fae:	601a      	str	r2, [r3, #0]
 8003fb0:	605a      	str	r2, [r3, #4]
 8003fb2:	609a      	str	r2, [r3, #8]
 8003fb4:	60da      	str	r2, [r3, #12]
 8003fb6:	611a      	str	r2, [r3, #16]
  
  /* GPIO Ports Clock Enable */
  LED_GPIO_CLK_ENABLE();
 8003fb8:	2300      	movs	r3, #0
 8003fba:	603b      	str	r3, [r7, #0]
 8003fbc:	4b10      	ldr	r3, [pc, #64]	@ (8004000 <board_led_init+0x5c>)
 8003fbe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fc0:	4a0f      	ldr	r2, [pc, #60]	@ (8004000 <board_led_init+0x5c>)
 8003fc2:	f043 0302 	orr.w	r3, r3, #2
 8003fc6:	6313      	str	r3, [r2, #48]	@ 0x30
 8003fc8:	4b0d      	ldr	r3, [pc, #52]	@ (8004000 <board_led_init+0x5c>)
 8003fca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fcc:	f003 0302 	and.w	r3, r3, #2
 8003fd0:	603b      	str	r3, [r7, #0]
 8003fd2:	683b      	ldr	r3, [r7, #0]
  
  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	2104      	movs	r1, #4
 8003fd8:	480a      	ldr	r0, [pc, #40]	@ (8004004 <board_led_init+0x60>)
 8003fda:	f001 f913 	bl	8005204 <HAL_GPIO_WritePin>
  
  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LED_Pin;
 8003fde:	2304      	movs	r3, #4
 8003fe0:	607b      	str	r3, [r7, #4]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003fe2:	2301      	movs	r3, #1
 8003fe4:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fe6:	2300      	movs	r3, #0
 8003fe8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003fea:	2300      	movs	r3, #0
 8003fec:	613b      	str	r3, [r7, #16]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 8003fee:	1d3b      	adds	r3, r7, #4
 8003ff0:	4619      	mov	r1, r3
 8003ff2:	4804      	ldr	r0, [pc, #16]	@ (8004004 <board_led_init+0x60>)
 8003ff4:	f000 ff52 	bl	8004e9c <HAL_GPIO_Init>
}
 8003ff8:	bf00      	nop
 8003ffa:	3718      	adds	r7, #24
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	bd80      	pop	{r7, pc}
 8004000:	40023800 	.word	0x40023800
 8004004:	40020400 	.word	0x40020400

08004008 <board_led_toggle>:

void board_led_toggle(void)
{
 8004008:	b580      	push	{r7, lr}
 800400a:	af00      	add	r7, sp, #0
    HAL_GPIO_TogglePin(LED_GPIO_Port,LED_Pin);
 800400c:	2104      	movs	r1, #4
 800400e:	4802      	ldr	r0, [pc, #8]	@ (8004018 <board_led_toggle+0x10>)
 8004010:	f001 f911 	bl	8005236 <HAL_GPIO_TogglePin>
}
 8004014:	bf00      	nop
 8004016:	bd80      	pop	{r7, pc}
 8004018:	40020400 	.word	0x40020400

0800401c <board_led_set>:

void board_led_set(uint8_t set)
{
 800401c:	b580      	push	{r7, lr}
 800401e:	b082      	sub	sp, #8
 8004020:	af00      	add	r7, sp, #0
 8004022:	4603      	mov	r3, r0
 8004024:	71fb      	strb	r3, [r7, #7]
    if (set)
 8004026:	79fb      	ldrb	r3, [r7, #7]
 8004028:	2b00      	cmp	r3, #0
 800402a:	d005      	beq.n	8004038 <board_led_set+0x1c>
        HAL_GPIO_WritePin(LED_GPIO_Port,LED_Pin,GPIO_PIN_SET);
 800402c:	2201      	movs	r2, #1
 800402e:	2104      	movs	r1, #4
 8004030:	4806      	ldr	r0, [pc, #24]	@ (800404c <board_led_set+0x30>)
 8004032:	f001 f8e7 	bl	8005204 <HAL_GPIO_WritePin>
    else
        HAL_GPIO_WritePin(LED_GPIO_Port,LED_Pin,GPIO_PIN_RESET);
}
 8004036:	e004      	b.n	8004042 <board_led_set+0x26>
        HAL_GPIO_WritePin(LED_GPIO_Port,LED_Pin,GPIO_PIN_RESET);
 8004038:	2200      	movs	r2, #0
 800403a:	2104      	movs	r1, #4
 800403c:	4803      	ldr	r0, [pc, #12]	@ (800404c <board_led_set+0x30>)
 800403e:	f001 f8e1 	bl	8005204 <HAL_GPIO_WritePin>
}
 8004042:	bf00      	nop
 8004044:	3708      	adds	r7, #8
 8004046:	46bd      	mov	sp, r7
 8004048:	bd80      	pop	{r7, pc}
 800404a:	bf00      	nop
 800404c:	40020400 	.word	0x40020400

08004050 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8004050:	b580      	push	{r7, lr}
 8004052:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8004054:	4a04      	ldr	r2, [pc, #16]	@ (8004068 <MX_FREERTOS_Init+0x18>)
 8004056:	2100      	movs	r1, #0
 8004058:	4804      	ldr	r0, [pc, #16]	@ (800406c <MX_FREERTOS_Init+0x1c>)
 800405a:	f004 f8e9 	bl	8008230 <osThreadNew>
 800405e:	4603      	mov	r3, r0
 8004060:	4a03      	ldr	r2, [pc, #12]	@ (8004070 <MX_FREERTOS_Init+0x20>)
 8004062:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8004064:	bf00      	nop
 8004066:	bd80      	pop	{r7, pc}
 8004068:	0800fb48 	.word	0x0800fb48
 800406c:	08004075 	.word	0x08004075
 8004070:	20000604 	.word	0x20000604

08004074 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b082      	sub	sp, #8
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 800407c:	2001      	movs	r0, #1
 800407e:	f004 f969 	bl	8008354 <osDelay>
 8004082:	e7fb      	b.n	800407c <StartDefaultTask+0x8>

08004084 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8004084:	b480      	push	{r7}
 8004086:	b085      	sub	sp, #20
 8004088:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800408a:	2300      	movs	r3, #0
 800408c:	60fb      	str	r3, [r7, #12]
 800408e:	4b1e      	ldr	r3, [pc, #120]	@ (8004108 <MX_GPIO_Init+0x84>)
 8004090:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004092:	4a1d      	ldr	r2, [pc, #116]	@ (8004108 <MX_GPIO_Init+0x84>)
 8004094:	f043 0304 	orr.w	r3, r3, #4
 8004098:	6313      	str	r3, [r2, #48]	@ 0x30
 800409a:	4b1b      	ldr	r3, [pc, #108]	@ (8004108 <MX_GPIO_Init+0x84>)
 800409c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800409e:	f003 0304 	and.w	r3, r3, #4
 80040a2:	60fb      	str	r3, [r7, #12]
 80040a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80040a6:	2300      	movs	r3, #0
 80040a8:	60bb      	str	r3, [r7, #8]
 80040aa:	4b17      	ldr	r3, [pc, #92]	@ (8004108 <MX_GPIO_Init+0x84>)
 80040ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040ae:	4a16      	ldr	r2, [pc, #88]	@ (8004108 <MX_GPIO_Init+0x84>)
 80040b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80040b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80040b6:	4b14      	ldr	r3, [pc, #80]	@ (8004108 <MX_GPIO_Init+0x84>)
 80040b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040ba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040be:	60bb      	str	r3, [r7, #8]
 80040c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80040c2:	2300      	movs	r3, #0
 80040c4:	607b      	str	r3, [r7, #4]
 80040c6:	4b10      	ldr	r3, [pc, #64]	@ (8004108 <MX_GPIO_Init+0x84>)
 80040c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040ca:	4a0f      	ldr	r2, [pc, #60]	@ (8004108 <MX_GPIO_Init+0x84>)
 80040cc:	f043 0301 	orr.w	r3, r3, #1
 80040d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80040d2:	4b0d      	ldr	r3, [pc, #52]	@ (8004108 <MX_GPIO_Init+0x84>)
 80040d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040d6:	f003 0301 	and.w	r3, r3, #1
 80040da:	607b      	str	r3, [r7, #4]
 80040dc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80040de:	2300      	movs	r3, #0
 80040e0:	603b      	str	r3, [r7, #0]
 80040e2:	4b09      	ldr	r3, [pc, #36]	@ (8004108 <MX_GPIO_Init+0x84>)
 80040e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040e6:	4a08      	ldr	r2, [pc, #32]	@ (8004108 <MX_GPIO_Init+0x84>)
 80040e8:	f043 0302 	orr.w	r3, r3, #2
 80040ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80040ee:	4b06      	ldr	r3, [pc, #24]	@ (8004108 <MX_GPIO_Init+0x84>)
 80040f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040f2:	f003 0302 	and.w	r3, r3, #2
 80040f6:	603b      	str	r3, [r7, #0]
 80040f8:	683b      	ldr	r3, [r7, #0]

}
 80040fa:	bf00      	nop
 80040fc:	3714      	adds	r7, #20
 80040fe:	46bd      	mov	sp, r7
 8004100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004104:	4770      	bx	lr
 8004106:	bf00      	nop
 8004108:	40023800 	.word	0x40023800

0800410c <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8004110:	4b12      	ldr	r3, [pc, #72]	@ (800415c <MX_I2C1_Init+0x50>)
 8004112:	4a13      	ldr	r2, [pc, #76]	@ (8004160 <MX_I2C1_Init+0x54>)
 8004114:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 400000;
 8004116:	4b11      	ldr	r3, [pc, #68]	@ (800415c <MX_I2C1_Init+0x50>)
 8004118:	4a12      	ldr	r2, [pc, #72]	@ (8004164 <MX_I2C1_Init+0x58>)
 800411a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800411c:	4b0f      	ldr	r3, [pc, #60]	@ (800415c <MX_I2C1_Init+0x50>)
 800411e:	2200      	movs	r2, #0
 8004120:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8004122:	4b0e      	ldr	r3, [pc, #56]	@ (800415c <MX_I2C1_Init+0x50>)
 8004124:	2200      	movs	r2, #0
 8004126:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8004128:	4b0c      	ldr	r3, [pc, #48]	@ (800415c <MX_I2C1_Init+0x50>)
 800412a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800412e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8004130:	4b0a      	ldr	r3, [pc, #40]	@ (800415c <MX_I2C1_Init+0x50>)
 8004132:	2200      	movs	r2, #0
 8004134:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8004136:	4b09      	ldr	r3, [pc, #36]	@ (800415c <MX_I2C1_Init+0x50>)
 8004138:	2200      	movs	r2, #0
 800413a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800413c:	4b07      	ldr	r3, [pc, #28]	@ (800415c <MX_I2C1_Init+0x50>)
 800413e:	2200      	movs	r2, #0
 8004140:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8004142:	4b06      	ldr	r3, [pc, #24]	@ (800415c <MX_I2C1_Init+0x50>)
 8004144:	2200      	movs	r2, #0
 8004146:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8004148:	4804      	ldr	r0, [pc, #16]	@ (800415c <MX_I2C1_Init+0x50>)
 800414a:	f001 f88f 	bl	800526c <HAL_I2C_Init>
 800414e:	4603      	mov	r3, r0
 8004150:	2b00      	cmp	r3, #0
 8004152:	d001      	beq.n	8004158 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8004154:	f000 fad4 	bl	8004700 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8004158:	bf00      	nop
 800415a:	bd80      	pop	{r7, pc}
 800415c:	20000608 	.word	0x20000608
 8004160:	40005400 	.word	0x40005400
 8004164:	00061a80 	.word	0x00061a80

08004168 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b08a      	sub	sp, #40	@ 0x28
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004170:	f107 0314 	add.w	r3, r7, #20
 8004174:	2200      	movs	r2, #0
 8004176:	601a      	str	r2, [r3, #0]
 8004178:	605a      	str	r2, [r3, #4]
 800417a:	609a      	str	r2, [r3, #8]
 800417c:	60da      	str	r2, [r3, #12]
 800417e:	611a      	str	r2, [r3, #16]
  if(i2cHandle->Instance==I2C1)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	4a19      	ldr	r2, [pc, #100]	@ (80041ec <HAL_I2C_MspInit+0x84>)
 8004186:	4293      	cmp	r3, r2
 8004188:	d12c      	bne.n	80041e4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800418a:	2300      	movs	r3, #0
 800418c:	613b      	str	r3, [r7, #16]
 800418e:	4b18      	ldr	r3, [pc, #96]	@ (80041f0 <HAL_I2C_MspInit+0x88>)
 8004190:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004192:	4a17      	ldr	r2, [pc, #92]	@ (80041f0 <HAL_I2C_MspInit+0x88>)
 8004194:	f043 0302 	orr.w	r3, r3, #2
 8004198:	6313      	str	r3, [r2, #48]	@ 0x30
 800419a:	4b15      	ldr	r3, [pc, #84]	@ (80041f0 <HAL_I2C_MspInit+0x88>)
 800419c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800419e:	f003 0302 	and.w	r3, r3, #2
 80041a2:	613b      	str	r3, [r7, #16]
 80041a4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB7     ------> I2C1_SDA
    PB8     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8;
 80041a6:	f44f 73c0 	mov.w	r3, #384	@ 0x180
 80041aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80041ac:	2312      	movs	r3, #18
 80041ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80041b0:	2301      	movs	r3, #1
 80041b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80041b4:	2303      	movs	r3, #3
 80041b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80041b8:	2304      	movs	r3, #4
 80041ba:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80041bc:	f107 0314 	add.w	r3, r7, #20
 80041c0:	4619      	mov	r1, r3
 80041c2:	480c      	ldr	r0, [pc, #48]	@ (80041f4 <HAL_I2C_MspInit+0x8c>)
 80041c4:	f000 fe6a 	bl	8004e9c <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80041c8:	2300      	movs	r3, #0
 80041ca:	60fb      	str	r3, [r7, #12]
 80041cc:	4b08      	ldr	r3, [pc, #32]	@ (80041f0 <HAL_I2C_MspInit+0x88>)
 80041ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041d0:	4a07      	ldr	r2, [pc, #28]	@ (80041f0 <HAL_I2C_MspInit+0x88>)
 80041d2:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80041d6:	6413      	str	r3, [r2, #64]	@ 0x40
 80041d8:	4b05      	ldr	r3, [pc, #20]	@ (80041f0 <HAL_I2C_MspInit+0x88>)
 80041da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041dc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80041e0:	60fb      	str	r3, [r7, #12]
 80041e2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80041e4:	bf00      	nop
 80041e6:	3728      	adds	r7, #40	@ 0x28
 80041e8:	46bd      	mov	sp, r7
 80041ea:	bd80      	pop	{r7, pc}
 80041ec:	40005400 	.word	0x40005400
 80041f0:	40023800 	.word	0x40023800
 80041f4:	40020400 	.word	0x40020400

080041f8 <__io_putchar>:
  int __io_putchar(int ch)
#else
  // For other compilers, implement fputc for printf redirection
  int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b082      	sub	sp, #8
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
    // Transmit the character over UART1
    HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8004200:	1d39      	adds	r1, r7, #4
 8004202:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004206:	2201      	movs	r2, #1
 8004208:	4803      	ldr	r0, [pc, #12]	@ (8004218 <__io_putchar+0x20>)
 800420a:	f003 fbd7 	bl	80079bc <HAL_UART_Transmit>
    return ch;
 800420e:	687b      	ldr	r3, [r7, #4]
}
 8004210:	4618      	mov	r0, r3
 8004212:	3708      	adds	r7, #8
 8004214:	46bd      	mov	sp, r7
 8004216:	bd80      	pop	{r7, pc}
 8004218:	200006e0 	.word	0x200006e0

0800421c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800421c:	b580      	push	{r7, lr}
 800421e:	ed2d 8b04 	vpush	{d8-d9}
 8004222:	b096      	sub	sp, #88	@ 0x58
 8004224:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004226:	f000 fcbd 	bl	8004ba4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800422a:	f000 f907 	bl	800443c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800422e:	f7ff ff29 	bl	8004084 <MX_GPIO_Init>
  MX_RTC_Init();
 8004232:	f000 fa6b 	bl	800470c <MX_RTC_Init>
  MX_USART1_UART_Init();
 8004236:	f000 fc19 	bl	8004a6c <MX_USART1_UART_Init>
  MX_I2C1_Init();
 800423a:	f7ff ff67 	bl	800410c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  I2C_Scan();
 800423e:	f000 f969 	bl	8004514 <I2C_Scan>
  while (MPU6050_Init(&hi2c1) == 1);
 8004242:	bf00      	nop
 8004244:	4872      	ldr	r0, [pc, #456]	@ (8004410 <main+0x1f4>)
 8004246:	f7ff f869 	bl	800331c <MPU6050_Init>
 800424a:	4603      	mov	r3, r0
 800424c:	2b01      	cmp	r3, #1
 800424e:	d0f9      	beq.n	8004244 <main+0x28>
  ssd1306_Init();
 8004250:	f7ff fc24 	bl	8003a9c <ssd1306_Init>
  ssd1306_WriteString("Hello World", Font_7x10);
 8004254:	4b6f      	ldr	r3, [pc, #444]	@ (8004414 <main+0x1f8>)
 8004256:	e893 0006 	ldmia.w	r3, {r1, r2}
 800425a:	486f      	ldr	r0, [pc, #444]	@ (8004418 <main+0x1fc>)
 800425c:	f7ff fdc0 	bl	8003de0 <ssd1306_WriteString>
  ssd1306_UpdateScreen();
 8004260:	f7ff fe38 	bl	8003ed4 <ssd1306_UpdateScreen>
  IMU_EN_SENSOR_TYPE enMotionSensorType, enPressureType;
  IMU_ST_ANGLES_DATA stAngles;
  IMU_ST_SENSOR_DATA stGyroRawData;
  IMU_ST_SENSOR_DATA stAccelRawData;
  IMU_ST_SENSOR_DATA stMagnRawData;
  int32_t s32PressureVal = 0, s32TemperatureVal = 0, s32AltitudeVal = 0;
 8004264:	2300      	movs	r3, #0
 8004266:	627b      	str	r3, [r7, #36]	@ 0x24
 8004268:	2300      	movs	r3, #0
 800426a:	623b      	str	r3, [r7, #32]
 800426c:	2300      	movs	r3, #0
 800426e:	61fb      	str	r3, [r7, #28]

  imuInit(&enMotionSensorType, &enPressureType);
 8004270:	f107 024e 	add.w	r2, r7, #78	@ 0x4e
 8004274:	f107 034f 	add.w	r3, r7, #79	@ 0x4f
 8004278:	4611      	mov	r1, r2
 800427a:	4618      	mov	r0, r3
 800427c:	f7fc ffea 	bl	8001254 <imuInit>
  if(IMU_EN_SENSOR_TYPE_ICM20948 == enMotionSensorType)
 8004280:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8004284:	2b01      	cmp	r3, #1
 8004286:	d103      	bne.n	8004290 <main+0x74>
  {
	  printf("Motion sersor is ICM-20948\r\n" );
 8004288:	4864      	ldr	r0, [pc, #400]	@ (800441c <main+0x200>)
 800428a:	f007 fa87 	bl	800b79c <puts>
 800428e:	e002      	b.n	8004296 <main+0x7a>
  }
  else
  {
	  printf("Motion sersor NULL\r\n");
 8004290:	4863      	ldr	r0, [pc, #396]	@ (8004420 <main+0x204>)
 8004292:	f007 fa83 	bl	800b79c <puts>
  }
  if(IMU_EN_SENSOR_TYPE_BMP280 == enPressureType)
 8004296:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 800429a:	2b02      	cmp	r3, #2
 800429c:	d103      	bne.n	80042a6 <main+0x8a>
  {
	  printf("Pressure sersor is BMP280\r\n");
 800429e:	4861      	ldr	r0, [pc, #388]	@ (8004424 <main+0x208>)
 80042a0:	f007 fa7c 	bl	800b79c <puts>
 80042a4:	e002      	b.n	80042ac <main+0x90>
  }
  else
  {
	  printf("Pressure sersor NULL\r\n");
 80042a6:	4860      	ldr	r0, [pc, #384]	@ (8004428 <main+0x20c>)
 80042a8:	f007 fa78 	bl	800b79c <puts>
  }

  board_button_init();
 80042ac:	f7ff fe3c 	bl	8003f28 <board_button_init>
  board_led_init();
 80042b0:	f7ff fe78 	bl	8003fa4 <board_led_init>

  uint32_t tick,tick_now;
  tick = HAL_GetTick() + 200;
 80042b4:	f000 fcdc 	bl	8004c70 <HAL_GetTick>
 80042b8:	4603      	mov	r3, r0
 80042ba:	33c8      	adds	r3, #200	@ 0xc8
 80042bc:	657b      	str	r3, [r7, #84]	@ 0x54
  tick_now = HAL_GetTick();
 80042be:	f000 fcd7 	bl	8004c70 <HAL_GetTick>
 80042c2:	6538      	str	r0, [r7, #80]	@ 0x50
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80042c4:	f003 ff6a 	bl	800819c <osKernelInitialize>

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 80042c8:	f7ff fec2 	bl	8004050 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80042cc:	f003 ff8a 	bl	80081e4 <osKernelStart>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  tick_now = HAL_GetTick();
 80042d0:	f000 fcce 	bl	8004c70 <HAL_GetTick>
 80042d4:	6538      	str	r0, [r7, #80]	@ 0x50
	  if(board_button_getstate())
 80042d6:	f7ff fe53 	bl	8003f80 <board_button_getstate>
 80042da:	4603      	mov	r3, r0
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d009      	beq.n	80042f4 <main+0xd8>
	  {
		  if(tick_now >= tick)
 80042e0:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80042e2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80042e4:	429a      	cmp	r2, r3
 80042e6:	d3f3      	bcc.n	80042d0 <main+0xb4>
		  {
			  tick = tick_now + 200;
 80042e8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80042ea:	33c8      	adds	r3, #200	@ 0xc8
 80042ec:	657b      	str	r3, [r7, #84]	@ 0x54
			  board_led_toggle();
 80042ee:	f7ff fe8b 	bl	8004008 <board_led_toggle>
 80042f2:	e7ed      	b.n	80042d0 <main+0xb4>
		  }
	  }
	  else
	  {
		  if(tick_now >= tick)
 80042f4:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 80042f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80042f8:	429a      	cmp	r2, r3
 80042fa:	d3e9      	bcc.n	80042d0 <main+0xb4>
		  {
			  MPU6050_Read_All(&hi2c1, &MPU6050);
 80042fc:	494b      	ldr	r1, [pc, #300]	@ (800442c <main+0x210>)
 80042fe:	4844      	ldr	r0, [pc, #272]	@ (8004410 <main+0x1f4>)
 8004300:	f7ff f86a 	bl	80033d8 <MPU6050_Read_All>
			  //printf("Ax: %.5f Ay: %.5f Az: %.5f\r\n", MPU6050.Ax, MPU6050.Ay, MPU6050.Az);
			  Display_Accel_Data(MPU6050.Ax, MPU6050.Ay, MPU6050.Az, 0);
 8004304:	4b49      	ldr	r3, [pc, #292]	@ (800442c <main+0x210>)
 8004306:	ed93 7b02 	vldr	d7, [r3, #8]
 800430a:	4b48      	ldr	r3, [pc, #288]	@ (800442c <main+0x210>)
 800430c:	ed93 6b04 	vldr	d6, [r3, #16]
 8004310:	4b46      	ldr	r3, [pc, #280]	@ (800442c <main+0x210>)
 8004312:	ed93 5b06 	vldr	d5, [r3, #24]
 8004316:	2000      	movs	r0, #0
 8004318:	eeb0 2a45 	vmov.f32	s4, s10
 800431c:	eef0 2a65 	vmov.f32	s5, s11
 8004320:	eeb0 1a46 	vmov.f32	s2, s12
 8004324:	eef0 1a66 	vmov.f32	s3, s13
 8004328:	eeb0 0a47 	vmov.f32	s0, s14
 800432c:	eef0 0a67 	vmov.f32	s1, s15
 8004330:	f000 f93e 	bl	80045b0 <Display_Accel_Data>
			  imuDataGet( &stAngles, &stGyroRawData, &stAccelRawData, &stMagnRawData);
 8004334:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8004338:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 800433c:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 8004340:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 8004344:	f7fc ffcc 	bl	80012e0 <imuDataGet>
			  pressSensorDataGet(&s32TemperatureVal, &s32PressureVal, &s32AltitudeVal);
 8004348:	f107 021c 	add.w	r2, r7, #28
 800434c:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8004350:	f107 0320 	add.w	r3, r7, #32
 8004354:	4618      	mov	r0, r3
 8004356:	f7fe ff9f 	bl	8003298 <pressSensorDataGet>
			  Display_Accel_Data(-stAccelRawData.s16Y/16384., stAccelRawData.s16X/16384., stAccelRawData.s16Z/16384., 1);
 800435a:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 800435e:	425b      	negs	r3, r3
 8004360:	4618      	mov	r0, r3
 8004362:	f7fc f8df 	bl	8000524 <__aeabi_i2d>
 8004366:	f04f 0200 	mov.w	r2, #0
 800436a:	4b31      	ldr	r3, [pc, #196]	@ (8004430 <main+0x214>)
 800436c:	f7fc fa6e 	bl	800084c <__aeabi_ddiv>
 8004370:	4602      	mov	r2, r0
 8004372:	460b      	mov	r3, r1
 8004374:	ec43 2b18 	vmov	d8, r2, r3
 8004378:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	@ 0x30
 800437c:	4618      	mov	r0, r3
 800437e:	f7fc f8d1 	bl	8000524 <__aeabi_i2d>
 8004382:	f04f 0200 	mov.w	r2, #0
 8004386:	4b2a      	ldr	r3, [pc, #168]	@ (8004430 <main+0x214>)
 8004388:	f7fc fa60 	bl	800084c <__aeabi_ddiv>
 800438c:	4602      	mov	r2, r0
 800438e:	460b      	mov	r3, r1
 8004390:	ec43 2b19 	vmov	d9, r2, r3
 8004394:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	@ 0x34
 8004398:	4618      	mov	r0, r3
 800439a:	f7fc f8c3 	bl	8000524 <__aeabi_i2d>
 800439e:	f04f 0200 	mov.w	r2, #0
 80043a2:	4b23      	ldr	r3, [pc, #140]	@ (8004430 <main+0x214>)
 80043a4:	f7fc fa52 	bl	800084c <__aeabi_ddiv>
 80043a8:	4602      	mov	r2, r0
 80043aa:	460b      	mov	r3, r1
 80043ac:	ec43 2b17 	vmov	d7, r2, r3
 80043b0:	2001      	movs	r0, #1
 80043b2:	eeb0 2a47 	vmov.f32	s4, s14
 80043b6:	eef0 2a67 	vmov.f32	s5, s15
 80043ba:	eeb0 1a49 	vmov.f32	s2, s18
 80043be:	eef0 1a69 	vmov.f32	s3, s19
 80043c2:	eeb0 0a48 	vmov.f32	s0, s16
 80043c6:	eef0 0a68 	vmov.f32	s1, s17
 80043ca:	f000 f8f1 	bl	80045b0 <Display_Accel_Data>

			  tick = tick_now + 50;
 80043ce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80043d0:	3332      	adds	r3, #50	@ 0x32
 80043d2:	657b      	str	r3, [r7, #84]	@ 0x54
			  RTC_DateTypeDef sdatestructureget;
			  RTC_TimeTypeDef stimestructureget;
			  static uint8_t Seconds_o;

			  /* Get the RTC current Time */
			  HAL_RTC_GetTime(&hrtc, &stimestructureget, RTC_FORMAT_BIN);
 80043d4:	1d3b      	adds	r3, r7, #4
 80043d6:	2200      	movs	r2, #0
 80043d8:	4619      	mov	r1, r3
 80043da:	4816      	ldr	r0, [pc, #88]	@ (8004434 <main+0x218>)
 80043dc:	f003 f8af 	bl	800753e <HAL_RTC_GetTime>
			  /* Get the RTC current Date */
			  HAL_RTC_GetDate(&hrtc, &sdatestructureget, RTC_FORMAT_BIN);
 80043e0:	f107 0318 	add.w	r3, r7, #24
 80043e4:	2200      	movs	r2, #0
 80043e6:	4619      	mov	r1, r3
 80043e8:	4812      	ldr	r0, [pc, #72]	@ (8004434 <main+0x218>)
 80043ea:	f003 f98a 	bl	8007702 <HAL_RTC_GetDate>
 			  if(Seconds_o != stimestructureget.Seconds)
 80043ee:	79ba      	ldrb	r2, [r7, #6]
 80043f0:	4b11      	ldr	r3, [pc, #68]	@ (8004438 <main+0x21c>)
 80043f2:	781b      	ldrb	r3, [r3, #0]
 80043f4:	429a      	cmp	r2, r3
 80043f6:	d006      	beq.n	8004406 <main+0x1ea>
  			  {

 				  Seconds_o = stimestructureget.Seconds;
 80043f8:	79ba      	ldrb	r2, [r7, #6]
 80043fa:	4b0f      	ldr	r3, [pc, #60]	@ (8004438 <main+0x21c>)
 80043fc:	701a      	strb	r2, [r3, #0]
	  					sdatestructureget.Month,
	  					sdatestructureget.Date,
	  					stimestructureget.Hours,
	  					stimestructureget.Minutes,
	  					stimestructureget.Seconds);*/
 				  board_led_set(1);
 80043fe:	2001      	movs	r0, #1
 8004400:	f7ff fe0c 	bl	800401c <board_led_set>
 8004404:	e764      	b.n	80042d0 <main+0xb4>
  			  }
	  		  else
	  		  {
	  			  board_led_set(0);
 8004406:	2000      	movs	r0, #0
 8004408:	f7ff fe08 	bl	800401c <board_led_set>
	  tick_now = HAL_GetTick();
 800440c:	e760      	b.n	80042d0 <main+0xb4>
 800440e:	bf00      	nop
 8004410:	20000608 	.word	0x20000608
 8004414:	20000098 	.word	0x20000098
 8004418:	0800f2b4 	.word	0x0800f2b4
 800441c:	0800f2c0 	.word	0x0800f2c0
 8004420:	0800f2dc 	.word	0x0800f2dc
 8004424:	0800f2f0 	.word	0x0800f2f0
 8004428:	0800f30c 	.word	0x0800f30c
 800442c:	20000660 	.word	0x20000660
 8004430:	40d00000 	.word	0x40d00000
 8004434:	200006bc 	.word	0x200006bc
 8004438:	200006b8 	.word	0x200006b8

0800443c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800443c:	b580      	push	{r7, lr}
 800443e:	b094      	sub	sp, #80	@ 0x50
 8004440:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8004442:	f107 0320 	add.w	r3, r7, #32
 8004446:	2230      	movs	r2, #48	@ 0x30
 8004448:	2100      	movs	r1, #0
 800444a:	4618      	mov	r0, r3
 800444c:	f007 faba 	bl	800b9c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8004450:	f107 030c 	add.w	r3, r7, #12
 8004454:	2200      	movs	r2, #0
 8004456:	601a      	str	r2, [r3, #0]
 8004458:	605a      	str	r2, [r3, #4]
 800445a:	609a      	str	r2, [r3, #8]
 800445c:	60da      	str	r2, [r3, #12]
 800445e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8004460:	2300      	movs	r3, #0
 8004462:	60bb      	str	r3, [r7, #8]
 8004464:	4b29      	ldr	r3, [pc, #164]	@ (800450c <SystemClock_Config+0xd0>)
 8004466:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004468:	4a28      	ldr	r2, [pc, #160]	@ (800450c <SystemClock_Config+0xd0>)
 800446a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800446e:	6413      	str	r3, [r2, #64]	@ 0x40
 8004470:	4b26      	ldr	r3, [pc, #152]	@ (800450c <SystemClock_Config+0xd0>)
 8004472:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004474:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004478:	60bb      	str	r3, [r7, #8]
 800447a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800447c:	2300      	movs	r3, #0
 800447e:	607b      	str	r3, [r7, #4]
 8004480:	4b23      	ldr	r3, [pc, #140]	@ (8004510 <SystemClock_Config+0xd4>)
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	4a22      	ldr	r2, [pc, #136]	@ (8004510 <SystemClock_Config+0xd4>)
 8004486:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800448a:	6013      	str	r3, [r2, #0]
 800448c:	4b20      	ldr	r3, [pc, #128]	@ (8004510 <SystemClock_Config+0xd4>)
 800448e:	681b      	ldr	r3, [r3, #0]
 8004490:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004494:	607b      	str	r3, [r7, #4]
 8004496:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE|RCC_OSCILLATORTYPE_LSE;
 8004498:	2305      	movs	r3, #5
 800449a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800449c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80044a0:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80044a2:	2301      	movs	r3, #1
 80044a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80044a6:	2302      	movs	r3, #2
 80044a8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80044aa:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80044ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80044b0:	2304      	movs	r3, #4
 80044b2:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80044b4:	23a8      	movs	r3, #168	@ 0xa8
 80044b6:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80044b8:	2302      	movs	r3, #2
 80044ba:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80044bc:	2304      	movs	r3, #4
 80044be:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80044c0:	f107 0320 	add.w	r3, r7, #32
 80044c4:	4618      	mov	r0, r3
 80044c6:	f002 f9a3 	bl	8006810 <HAL_RCC_OscConfig>
 80044ca:	4603      	mov	r3, r0
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d001      	beq.n	80044d4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80044d0:	f000 f916 	bl	8004700 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80044d4:	230f      	movs	r3, #15
 80044d6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80044d8:	2302      	movs	r3, #2
 80044da:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80044dc:	2300      	movs	r3, #0
 80044de:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80044e0:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80044e4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80044e6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80044ea:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80044ec:	f107 030c 	add.w	r3, r7, #12
 80044f0:	2105      	movs	r1, #5
 80044f2:	4618      	mov	r0, r3
 80044f4:	f002 fc04 	bl	8006d00 <HAL_RCC_ClockConfig>
 80044f8:	4603      	mov	r3, r0
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d001      	beq.n	8004502 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 80044fe:	f000 f8ff 	bl	8004700 <Error_Handler>
  }
}
 8004502:	bf00      	nop
 8004504:	3750      	adds	r7, #80	@ 0x50
 8004506:	46bd      	mov	sp, r7
 8004508:	bd80      	pop	{r7, pc}
 800450a:	bf00      	nop
 800450c:	40023800 	.word	0x40023800
 8004510:	40007000 	.word	0x40007000

08004514 <I2C_Scan>:

/* USER CODE BEGIN 4 */
void I2C_Scan(void)
{
 8004514:	b5b0      	push	{r4, r5, r7, lr}
 8004516:	b08c      	sub	sp, #48	@ 0x30
 8004518:	af04      	add	r7, sp, #16

	RTC_DateTypeDef sdatestructureget;
	RTC_TimeTypeDef stimestructureget;
	HAL_RTC_GetTime(&hrtc, &stimestructureget, RTC_FORMAT_BIN);
 800451a:	1d3b      	adds	r3, r7, #4
 800451c:	2200      	movs	r2, #0
 800451e:	4619      	mov	r1, r3
 8004520:	481e      	ldr	r0, [pc, #120]	@ (800459c <I2C_Scan+0x88>)
 8004522:	f003 f80c 	bl	800753e <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&hrtc, &sdatestructureget, RTC_FORMAT_BIN);
 8004526:	f107 0318 	add.w	r3, r7, #24
 800452a:	2200      	movs	r2, #0
 800452c:	4619      	mov	r1, r3
 800452e:	481b      	ldr	r0, [pc, #108]	@ (800459c <I2C_Scan+0x88>)
 8004530:	f003 f8e7 	bl	8007702 <HAL_RTC_GetDate>
    printf("Scanning I2C bus on Y20%02d.M%02d.D%02d at %02d:%02d:%02d...\r\n",
    		sdatestructureget.Year,
 8004534:	7efb      	ldrb	r3, [r7, #27]
    printf("Scanning I2C bus on Y20%02d.M%02d.D%02d at %02d:%02d:%02d...\r\n",
 8004536:	4618      	mov	r0, r3
			sdatestructureget.Month,
 8004538:	7e7b      	ldrb	r3, [r7, #25]
    printf("Scanning I2C bus on Y20%02d.M%02d.D%02d at %02d:%02d:%02d...\r\n",
 800453a:	461c      	mov	r4, r3
			sdatestructureget.Date,
 800453c:	7ebb      	ldrb	r3, [r7, #26]
    printf("Scanning I2C bus on Y20%02d.M%02d.D%02d at %02d:%02d:%02d...\r\n",
 800453e:	461d      	mov	r5, r3
			stimestructureget.Hours,
 8004540:	793b      	ldrb	r3, [r7, #4]
			stimestructureget.Minutes,
 8004542:	797a      	ldrb	r2, [r7, #5]
			stimestructureget.Seconds);
 8004544:	79b9      	ldrb	r1, [r7, #6]
    printf("Scanning I2C bus on Y20%02d.M%02d.D%02d at %02d:%02d:%02d...\r\n",
 8004546:	9102      	str	r1, [sp, #8]
 8004548:	9201      	str	r2, [sp, #4]
 800454a:	9300      	str	r3, [sp, #0]
 800454c:	462b      	mov	r3, r5
 800454e:	4622      	mov	r2, r4
 8004550:	4601      	mov	r1, r0
 8004552:	4813      	ldr	r0, [pc, #76]	@ (80045a0 <I2C_Scan+0x8c>)
 8004554:	f007 f8ba 	bl	800b6cc <iprintf>
    for (uint16_t addr = 0; addr < 128; addr++)
 8004558:	2300      	movs	r3, #0
 800455a:	83fb      	strh	r3, [r7, #30]
 800455c:	e013      	b.n	8004586 <I2C_Scan+0x72>
    {
        if (HAL_I2C_IsDeviceReady(&hi2c1, addr << 1, 1, HAL_MAX_DELAY) == HAL_OK)
 800455e:	8bfb      	ldrh	r3, [r7, #30]
 8004560:	005b      	lsls	r3, r3, #1
 8004562:	b299      	uxth	r1, r3
 8004564:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004568:	2201      	movs	r2, #1
 800456a:	480e      	ldr	r0, [pc, #56]	@ (80045a4 <I2C_Scan+0x90>)
 800456c:	f001 fbec 	bl	8005d48 <HAL_I2C_IsDeviceReady>
 8004570:	4603      	mov	r3, r0
 8004572:	2b00      	cmp	r3, #0
 8004574:	d104      	bne.n	8004580 <I2C_Scan+0x6c>
        {
            printf("Device found at 0x%02X\r\n", addr);
 8004576:	8bfb      	ldrh	r3, [r7, #30]
 8004578:	4619      	mov	r1, r3
 800457a:	480b      	ldr	r0, [pc, #44]	@ (80045a8 <I2C_Scan+0x94>)
 800457c:	f007 f8a6 	bl	800b6cc <iprintf>
    for (uint16_t addr = 0; addr < 128; addr++)
 8004580:	8bfb      	ldrh	r3, [r7, #30]
 8004582:	3301      	adds	r3, #1
 8004584:	83fb      	strh	r3, [r7, #30]
 8004586:	8bfb      	ldrh	r3, [r7, #30]
 8004588:	2b7f      	cmp	r3, #127	@ 0x7f
 800458a:	d9e8      	bls.n	800455e <I2C_Scan+0x4a>
        }
    }
    printf("Scanning I2C DONE!...\r\n");
 800458c:	4807      	ldr	r0, [pc, #28]	@ (80045ac <I2C_Scan+0x98>)
 800458e:	f007 f905 	bl	800b79c <puts>
}
 8004592:	bf00      	nop
 8004594:	3720      	adds	r7, #32
 8004596:	46bd      	mov	sp, r7
 8004598:	bdb0      	pop	{r4, r5, r7, pc}
 800459a:	bf00      	nop
 800459c:	200006bc 	.word	0x200006bc
 80045a0:	0800f324 	.word	0x0800f324
 80045a4:	20000608 	.word	0x20000608
 80045a8:	0800f364 	.word	0x0800f364
 80045ac:	0800f380 	.word	0x0800f380

080045b0 <Display_Accel_Data>:

void Display_Accel_Data(double Ax, double Ay, double Az, uint8_t col) {
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b090      	sub	sp, #64	@ 0x40
 80045b4:	af02      	add	r7, sp, #8
 80045b6:	ed87 0b06 	vstr	d0, [r7, #24]
 80045ba:	ed87 1b04 	vstr	d1, [r7, #16]
 80045be:	ed87 2b02 	vstr	d2, [r7, #8]
 80045c2:	4603      	mov	r3, r0
 80045c4:	71fb      	strb	r3, [r7, #7]
    char buffer[20];  // Buffer to hold the text
    uint8_t len = 75;
 80045c6:	234b      	movs	r3, #75	@ 0x4b
 80045c8:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    // Clear the screen
    ssd1306_Clear();
 80045cc:	f7ff fc46 	bl	8003e5c <ssd1306_Clear>

    if(!col)
 80045d0:	79fb      	ldrb	r3, [r7, #7]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d13f      	bne.n	8004656 <Display_Accel_Data+0xa6>
    {
    	// Display the Ax value
    	snprintf(buffer, sizeof(buffer), "x:%8.5f|", Ax);
 80045d6:	f107 0020 	add.w	r0, r7, #32
 80045da:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80045de:	e9cd 2300 	strd	r2, r3, [sp]
 80045e2:	4a42      	ldr	r2, [pc, #264]	@ (80046ec <Display_Accel_Data+0x13c>)
 80045e4:	2114      	movs	r1, #20
 80045e6:	f007 f8e1 	bl	800b7ac <sniprintf>
		ssd1306_SetCursor(0, 0);
 80045ea:	2100      	movs	r1, #0
 80045ec:	2000      	movs	r0, #0
 80045ee:	f7ff fc1d 	bl	8003e2c <ssd1306_SetCursor>
		ssd1306_WriteString(buffer, Font_7x10);
 80045f2:	4a3f      	ldr	r2, [pc, #252]	@ (80046f0 <Display_Accel_Data+0x140>)
 80045f4:	f107 0320 	add.w	r3, r7, #32
 80045f8:	ca06      	ldmia	r2, {r1, r2}
 80045fa:	4618      	mov	r0, r3
 80045fc:	f7ff fbf0 	bl	8003de0 <ssd1306_WriteString>

		// Display the Ay value
		snprintf(buffer, sizeof(buffer), "y:%8.5f|", Ay);
 8004600:	f107 0020 	add.w	r0, r7, #32
 8004604:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004608:	e9cd 2300 	strd	r2, r3, [sp]
 800460c:	4a39      	ldr	r2, [pc, #228]	@ (80046f4 <Display_Accel_Data+0x144>)
 800460e:	2114      	movs	r1, #20
 8004610:	f007 f8cc 	bl	800b7ac <sniprintf>
		ssd1306_SetCursor(0, 10);
 8004614:	210a      	movs	r1, #10
 8004616:	2000      	movs	r0, #0
 8004618:	f7ff fc08 	bl	8003e2c <ssd1306_SetCursor>
		ssd1306_WriteString(buffer, Font_7x10);
 800461c:	4a34      	ldr	r2, [pc, #208]	@ (80046f0 <Display_Accel_Data+0x140>)
 800461e:	f107 0320 	add.w	r3, r7, #32
 8004622:	ca06      	ldmia	r2, {r1, r2}
 8004624:	4618      	mov	r0, r3
 8004626:	f7ff fbdb 	bl	8003de0 <ssd1306_WriteString>

		// Display the Az value
		snprintf(buffer, sizeof(buffer), "z:%8.5f|", Az);
 800462a:	f107 0020 	add.w	r0, r7, #32
 800462e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004632:	e9cd 2300 	strd	r2, r3, [sp]
 8004636:	4a30      	ldr	r2, [pc, #192]	@ (80046f8 <Display_Accel_Data+0x148>)
 8004638:	2114      	movs	r1, #20
 800463a:	f007 f8b7 	bl	800b7ac <sniprintf>
		ssd1306_SetCursor(0, 20);
 800463e:	2114      	movs	r1, #20
 8004640:	2000      	movs	r0, #0
 8004642:	f7ff fbf3 	bl	8003e2c <ssd1306_SetCursor>
		ssd1306_WriteString(buffer, Font_7x10);
 8004646:	4a2a      	ldr	r2, [pc, #168]	@ (80046f0 <Display_Accel_Data+0x140>)
 8004648:	f107 0320 	add.w	r3, r7, #32
 800464c:	ca06      	ldmia	r2, {r1, r2}
 800464e:	4618      	mov	r0, r3
 8004650:	f7ff fbc6 	bl	8003de0 <ssd1306_WriteString>
 8004654:	e044      	b.n	80046e0 <Display_Accel_Data+0x130>
    }
    else
    {
    	// Display the Ax value
		snprintf(buffer, sizeof(buffer), "%8.5f", Ax);
 8004656:	f107 0020 	add.w	r0, r7, #32
 800465a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800465e:	e9cd 2300 	strd	r2, r3, [sp]
 8004662:	4a26      	ldr	r2, [pc, #152]	@ (80046fc <Display_Accel_Data+0x14c>)
 8004664:	2114      	movs	r1, #20
 8004666:	f007 f8a1 	bl	800b7ac <sniprintf>
		ssd1306_SetCursor(len, 0);
 800466a:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800466e:	2100      	movs	r1, #0
 8004670:	4618      	mov	r0, r3
 8004672:	f7ff fbdb 	bl	8003e2c <ssd1306_SetCursor>
		ssd1306_WriteString(buffer, Font_7x10);
 8004676:	4a1e      	ldr	r2, [pc, #120]	@ (80046f0 <Display_Accel_Data+0x140>)
 8004678:	f107 0320 	add.w	r3, r7, #32
 800467c:	ca06      	ldmia	r2, {r1, r2}
 800467e:	4618      	mov	r0, r3
 8004680:	f7ff fbae 	bl	8003de0 <ssd1306_WriteString>

		// Display the Ay value
		snprintf(buffer, sizeof(buffer), "%8.5f", Ay);
 8004684:	f107 0020 	add.w	r0, r7, #32
 8004688:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 800468c:	e9cd 2300 	strd	r2, r3, [sp]
 8004690:	4a1a      	ldr	r2, [pc, #104]	@ (80046fc <Display_Accel_Data+0x14c>)
 8004692:	2114      	movs	r1, #20
 8004694:	f007 f88a 	bl	800b7ac <sniprintf>
		ssd1306_SetCursor(len, 10);
 8004698:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 800469c:	210a      	movs	r1, #10
 800469e:	4618      	mov	r0, r3
 80046a0:	f7ff fbc4 	bl	8003e2c <ssd1306_SetCursor>
		ssd1306_WriteString(buffer, Font_7x10);
 80046a4:	4a12      	ldr	r2, [pc, #72]	@ (80046f0 <Display_Accel_Data+0x140>)
 80046a6:	f107 0320 	add.w	r3, r7, #32
 80046aa:	ca06      	ldmia	r2, {r1, r2}
 80046ac:	4618      	mov	r0, r3
 80046ae:	f7ff fb97 	bl	8003de0 <ssd1306_WriteString>

		// Display the Az value
		snprintf(buffer, sizeof(buffer), "%8.5f", Az);
 80046b2:	f107 0020 	add.w	r0, r7, #32
 80046b6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80046ba:	e9cd 2300 	strd	r2, r3, [sp]
 80046be:	4a0f      	ldr	r2, [pc, #60]	@ (80046fc <Display_Accel_Data+0x14c>)
 80046c0:	2114      	movs	r1, #20
 80046c2:	f007 f873 	bl	800b7ac <sniprintf>
		ssd1306_SetCursor(len, 20);
 80046c6:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
 80046ca:	2114      	movs	r1, #20
 80046cc:	4618      	mov	r0, r3
 80046ce:	f7ff fbad 	bl	8003e2c <ssd1306_SetCursor>
		ssd1306_WriteString(buffer, Font_7x10);
 80046d2:	4a07      	ldr	r2, [pc, #28]	@ (80046f0 <Display_Accel_Data+0x140>)
 80046d4:	f107 0320 	add.w	r3, r7, #32
 80046d8:	ca06      	ldmia	r2, {r1, r2}
 80046da:	4618      	mov	r0, r3
 80046dc:	f7ff fb80 	bl	8003de0 <ssd1306_WriteString>
    }


    // Update the screen
    ssd1306_UpdateScreen();
 80046e0:	f7ff fbf8 	bl	8003ed4 <ssd1306_UpdateScreen>
}
 80046e4:	bf00      	nop
 80046e6:	3738      	adds	r7, #56	@ 0x38
 80046e8:	46bd      	mov	sp, r7
 80046ea:	bd80      	pop	{r7, pc}
 80046ec:	0800f398 	.word	0x0800f398
 80046f0:	20000098 	.word	0x20000098
 80046f4:	0800f3a4 	.word	0x0800f3a4
 80046f8:	0800f3b0 	.word	0x0800f3b0
 80046fc:	0800f3bc 	.word	0x0800f3bc

08004700 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004700:	b480      	push	{r7}
 8004702:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004704:	b672      	cpsid	i
}
 8004706:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004708:	bf00      	nop
 800470a:	e7fd      	b.n	8004708 <Error_Handler+0x8>

0800470c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b086      	sub	sp, #24
 8004710:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8004712:	1d3b      	adds	r3, r7, #4
 8004714:	2200      	movs	r2, #0
 8004716:	601a      	str	r2, [r3, #0]
 8004718:	605a      	str	r2, [r3, #4]
 800471a:	609a      	str	r2, [r3, #8]
 800471c:	60da      	str	r2, [r3, #12]
 800471e:	611a      	str	r2, [r3, #16]
  RTC_DateTypeDef sDate = {0};
 8004720:	2300      	movs	r3, #0
 8004722:	603b      	str	r3, [r7, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8004724:	4b24      	ldr	r3, [pc, #144]	@ (80047b8 <MX_RTC_Init+0xac>)
 8004726:	4a25      	ldr	r2, [pc, #148]	@ (80047bc <MX_RTC_Init+0xb0>)
 8004728:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 800472a:	4b23      	ldr	r3, [pc, #140]	@ (80047b8 <MX_RTC_Init+0xac>)
 800472c:	2200      	movs	r2, #0
 800472e:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8004730:	4b21      	ldr	r3, [pc, #132]	@ (80047b8 <MX_RTC_Init+0xac>)
 8004732:	227f      	movs	r2, #127	@ 0x7f
 8004734:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8004736:	4b20      	ldr	r3, [pc, #128]	@ (80047b8 <MX_RTC_Init+0xac>)
 8004738:	22ff      	movs	r2, #255	@ 0xff
 800473a:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 800473c:	4b1e      	ldr	r3, [pc, #120]	@ (80047b8 <MX_RTC_Init+0xac>)
 800473e:	2200      	movs	r2, #0
 8004740:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8004742:	4b1d      	ldr	r3, [pc, #116]	@ (80047b8 <MX_RTC_Init+0xac>)
 8004744:	2200      	movs	r2, #0
 8004746:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8004748:	4b1b      	ldr	r3, [pc, #108]	@ (80047b8 <MX_RTC_Init+0xac>)
 800474a:	2200      	movs	r2, #0
 800474c:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800474e:	481a      	ldr	r0, [pc, #104]	@ (80047b8 <MX_RTC_Init+0xac>)
 8004750:	f002 fdd8 	bl	8007304 <HAL_RTC_Init>
 8004754:	4603      	mov	r3, r0
 8004756:	2b00      	cmp	r3, #0
 8004758:	d001      	beq.n	800475e <MX_RTC_Init+0x52>
  {
    Error_Handler();
 800475a:	f7ff ffd1 	bl	8004700 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0x0;
 800475e:	2300      	movs	r3, #0
 8004760:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0x0;
 8004762:	2300      	movs	r3, #0
 8004764:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0x0;
 8004766:	2300      	movs	r3, #0
 8004768:	71bb      	strb	r3, [r7, #6]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 800476a:	2300      	movs	r3, #0
 800476c:	613b      	str	r3, [r7, #16]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 800476e:	2300      	movs	r3, #0
 8004770:	617b      	str	r3, [r7, #20]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BCD) != HAL_OK)
 8004772:	1d3b      	adds	r3, r7, #4
 8004774:	2201      	movs	r2, #1
 8004776:	4619      	mov	r1, r3
 8004778:	480f      	ldr	r0, [pc, #60]	@ (80047b8 <MX_RTC_Init+0xac>)
 800477a:	f002 fe46 	bl	800740a <HAL_RTC_SetTime>
 800477e:	4603      	mov	r3, r0
 8004780:	2b00      	cmp	r3, #0
 8004782:	d001      	beq.n	8004788 <MX_RTC_Init+0x7c>
  {
    Error_Handler();
 8004784:	f7ff ffbc 	bl	8004700 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_MONDAY;
 8004788:	2301      	movs	r3, #1
 800478a:	703b      	strb	r3, [r7, #0]
  sDate.Month = RTC_MONTH_AUGUST;
 800478c:	2308      	movs	r3, #8
 800478e:	707b      	strb	r3, [r7, #1]
  sDate.Date = 0x7;
 8004790:	2307      	movs	r3, #7
 8004792:	70bb      	strb	r3, [r7, #2]
  sDate.Year = 0x23;
 8004794:	2323      	movs	r3, #35	@ 0x23
 8004796:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BCD) != HAL_OK)
 8004798:	463b      	mov	r3, r7
 800479a:	2201      	movs	r2, #1
 800479c:	4619      	mov	r1, r3
 800479e:	4806      	ldr	r0, [pc, #24]	@ (80047b8 <MX_RTC_Init+0xac>)
 80047a0:	f002 ff2b 	bl	80075fa <HAL_RTC_SetDate>
 80047a4:	4603      	mov	r3, r0
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d001      	beq.n	80047ae <MX_RTC_Init+0xa2>
  {
    Error_Handler();
 80047aa:	f7ff ffa9 	bl	8004700 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80047ae:	bf00      	nop
 80047b0:	3718      	adds	r7, #24
 80047b2:	46bd      	mov	sp, r7
 80047b4:	bd80      	pop	{r7, pc}
 80047b6:	bf00      	nop
 80047b8:	200006bc 	.word	0x200006bc
 80047bc:	40002800 	.word	0x40002800

080047c0 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80047c0:	b580      	push	{r7, lr}
 80047c2:	b086      	sub	sp, #24
 80047c4:	af00      	add	r7, sp, #0
 80047c6:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80047c8:	f107 0308 	add.w	r3, r7, #8
 80047cc:	2200      	movs	r2, #0
 80047ce:	601a      	str	r2, [r3, #0]
 80047d0:	605a      	str	r2, [r3, #4]
 80047d2:	609a      	str	r2, [r3, #8]
 80047d4:	60da      	str	r2, [r3, #12]
  if(rtcHandle->Instance==RTC)
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4a0c      	ldr	r2, [pc, #48]	@ (800480c <HAL_RTC_MspInit+0x4c>)
 80047dc:	4293      	cmp	r3, r2
 80047de:	d111      	bne.n	8004804 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 80047e0:	2302      	movs	r3, #2
 80047e2:	60bb      	str	r3, [r7, #8]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 80047e4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80047e8:	617b      	str	r3, [r7, #20]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80047ea:	f107 0308 	add.w	r3, r7, #8
 80047ee:	4618      	mov	r0, r3
 80047f0:	f002 fca6 	bl	8007140 <HAL_RCCEx_PeriphCLKConfig>
 80047f4:	4603      	mov	r3, r0
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d001      	beq.n	80047fe <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 80047fa:	f7ff ff81 	bl	8004700 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80047fe:	4b04      	ldr	r3, [pc, #16]	@ (8004810 <HAL_RTC_MspInit+0x50>)
 8004800:	2201      	movs	r2, #1
 8004802:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8004804:	bf00      	nop
 8004806:	3718      	adds	r7, #24
 8004808:	46bd      	mov	sp, r7
 800480a:	bd80      	pop	{r7, pc}
 800480c:	40002800 	.word	0x40002800
 8004810:	42470e3c 	.word	0x42470e3c

08004814 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	b082      	sub	sp, #8
 8004818:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800481a:	2300      	movs	r3, #0
 800481c:	607b      	str	r3, [r7, #4]
 800481e:	4b12      	ldr	r3, [pc, #72]	@ (8004868 <HAL_MspInit+0x54>)
 8004820:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004822:	4a11      	ldr	r2, [pc, #68]	@ (8004868 <HAL_MspInit+0x54>)
 8004824:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8004828:	6453      	str	r3, [r2, #68]	@ 0x44
 800482a:	4b0f      	ldr	r3, [pc, #60]	@ (8004868 <HAL_MspInit+0x54>)
 800482c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800482e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004832:	607b      	str	r3, [r7, #4]
 8004834:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8004836:	2300      	movs	r3, #0
 8004838:	603b      	str	r3, [r7, #0]
 800483a:	4b0b      	ldr	r3, [pc, #44]	@ (8004868 <HAL_MspInit+0x54>)
 800483c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800483e:	4a0a      	ldr	r2, [pc, #40]	@ (8004868 <HAL_MspInit+0x54>)
 8004840:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004844:	6413      	str	r3, [r2, #64]	@ 0x40
 8004846:	4b08      	ldr	r3, [pc, #32]	@ (8004868 <HAL_MspInit+0x54>)
 8004848:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800484a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800484e:	603b      	str	r3, [r7, #0]
 8004850:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8004852:	2200      	movs	r2, #0
 8004854:	210f      	movs	r1, #15
 8004856:	f06f 0001 	mvn.w	r0, #1
 800485a:	f000 faf6 	bl	8004e4a <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800485e:	bf00      	nop
 8004860:	3708      	adds	r7, #8
 8004862:	46bd      	mov	sp, r7
 8004864:	bd80      	pop	{r7, pc}
 8004866:	bf00      	nop
 8004868:	40023800 	.word	0x40023800

0800486c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800486c:	b480      	push	{r7}
 800486e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8004870:	bf00      	nop
 8004872:	e7fd      	b.n	8004870 <NMI_Handler+0x4>

08004874 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004874:	b480      	push	{r7}
 8004876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004878:	bf00      	nop
 800487a:	e7fd      	b.n	8004878 <HardFault_Handler+0x4>

0800487c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800487c:	b480      	push	{r7}
 800487e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004880:	bf00      	nop
 8004882:	e7fd      	b.n	8004880 <MemManage_Handler+0x4>

08004884 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004884:	b480      	push	{r7}
 8004886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004888:	bf00      	nop
 800488a:	e7fd      	b.n	8004888 <BusFault_Handler+0x4>

0800488c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800488c:	b480      	push	{r7}
 800488e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004890:	bf00      	nop
 8004892:	e7fd      	b.n	8004890 <UsageFault_Handler+0x4>

08004894 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004894:	b480      	push	{r7}
 8004896:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004898:	bf00      	nop
 800489a:	46bd      	mov	sp, r7
 800489c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a0:	4770      	bx	lr

080048a2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80048a2:	b580      	push	{r7, lr}
 80048a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80048a6:	f000 f9cf 	bl	8004c48 <HAL_IncTick>
#if (INCLUDE_xTaskGetSchedulerState == 1 )
  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED)
 80048aa:	f005 f97b 	bl	8009ba4 <xTaskGetSchedulerState>
 80048ae:	4603      	mov	r3, r0
 80048b0:	2b01      	cmp	r3, #1
 80048b2:	d001      	beq.n	80048b8 <SysTick_Handler+0x16>
  {
#endif /* INCLUDE_xTaskGetSchedulerState */
  xPortSysTickHandler();
 80048b4:	f005 ff70 	bl	800a798 <xPortSysTickHandler>
  }
#endif /* INCLUDE_xTaskGetSchedulerState */
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80048b8:	bf00      	nop
 80048ba:	bd80      	pop	{r7, pc}

080048bc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80048bc:	b480      	push	{r7}
 80048be:	af00      	add	r7, sp, #0
  return 1;
 80048c0:	2301      	movs	r3, #1
}
 80048c2:	4618      	mov	r0, r3
 80048c4:	46bd      	mov	sp, r7
 80048c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ca:	4770      	bx	lr

080048cc <_kill>:

int _kill(int pid, int sig)
{
 80048cc:	b580      	push	{r7, lr}
 80048ce:	b082      	sub	sp, #8
 80048d0:	af00      	add	r7, sp, #0
 80048d2:	6078      	str	r0, [r7, #4]
 80048d4:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80048d6:	f007 f8c7 	bl	800ba68 <__errno>
 80048da:	4603      	mov	r3, r0
 80048dc:	2216      	movs	r2, #22
 80048de:	601a      	str	r2, [r3, #0]
  return -1;
 80048e0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80048e4:	4618      	mov	r0, r3
 80048e6:	3708      	adds	r7, #8
 80048e8:	46bd      	mov	sp, r7
 80048ea:	bd80      	pop	{r7, pc}

080048ec <_exit>:

void _exit (int status)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b082      	sub	sp, #8
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80048f4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80048f8:	6878      	ldr	r0, [r7, #4]
 80048fa:	f7ff ffe7 	bl	80048cc <_kill>
  while (1) {}    /* Make sure we hang here */
 80048fe:	bf00      	nop
 8004900:	e7fd      	b.n	80048fe <_exit+0x12>

08004902 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004902:	b580      	push	{r7, lr}
 8004904:	b086      	sub	sp, #24
 8004906:	af00      	add	r7, sp, #0
 8004908:	60f8      	str	r0, [r7, #12]
 800490a:	60b9      	str	r1, [r7, #8]
 800490c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800490e:	2300      	movs	r3, #0
 8004910:	617b      	str	r3, [r7, #20]
 8004912:	e00a      	b.n	800492a <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8004914:	f3af 8000 	nop.w
 8004918:	4601      	mov	r1, r0
 800491a:	68bb      	ldr	r3, [r7, #8]
 800491c:	1c5a      	adds	r2, r3, #1
 800491e:	60ba      	str	r2, [r7, #8]
 8004920:	b2ca      	uxtb	r2, r1
 8004922:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004924:	697b      	ldr	r3, [r7, #20]
 8004926:	3301      	adds	r3, #1
 8004928:	617b      	str	r3, [r7, #20]
 800492a:	697a      	ldr	r2, [r7, #20]
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	429a      	cmp	r2, r3
 8004930:	dbf0      	blt.n	8004914 <_read+0x12>
  }

  return len;
 8004932:	687b      	ldr	r3, [r7, #4]
}
 8004934:	4618      	mov	r0, r3
 8004936:	3718      	adds	r7, #24
 8004938:	46bd      	mov	sp, r7
 800493a:	bd80      	pop	{r7, pc}

0800493c <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800493c:	b580      	push	{r7, lr}
 800493e:	b086      	sub	sp, #24
 8004940:	af00      	add	r7, sp, #0
 8004942:	60f8      	str	r0, [r7, #12]
 8004944:	60b9      	str	r1, [r7, #8]
 8004946:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004948:	2300      	movs	r3, #0
 800494a:	617b      	str	r3, [r7, #20]
 800494c:	e009      	b.n	8004962 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800494e:	68bb      	ldr	r3, [r7, #8]
 8004950:	1c5a      	adds	r2, r3, #1
 8004952:	60ba      	str	r2, [r7, #8]
 8004954:	781b      	ldrb	r3, [r3, #0]
 8004956:	4618      	mov	r0, r3
 8004958:	f7ff fc4e 	bl	80041f8 <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800495c:	697b      	ldr	r3, [r7, #20]
 800495e:	3301      	adds	r3, #1
 8004960:	617b      	str	r3, [r7, #20]
 8004962:	697a      	ldr	r2, [r7, #20]
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	429a      	cmp	r2, r3
 8004968:	dbf1      	blt.n	800494e <_write+0x12>
  }
  return len;
 800496a:	687b      	ldr	r3, [r7, #4]
}
 800496c:	4618      	mov	r0, r3
 800496e:	3718      	adds	r7, #24
 8004970:	46bd      	mov	sp, r7
 8004972:	bd80      	pop	{r7, pc}

08004974 <_close>:

int _close(int file)
{
 8004974:	b480      	push	{r7}
 8004976:	b083      	sub	sp, #12
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800497c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8004980:	4618      	mov	r0, r3
 8004982:	370c      	adds	r7, #12
 8004984:	46bd      	mov	sp, r7
 8004986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800498a:	4770      	bx	lr

0800498c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800498c:	b480      	push	{r7}
 800498e:	b083      	sub	sp, #12
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
 8004994:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004996:	683b      	ldr	r3, [r7, #0]
 8004998:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800499c:	605a      	str	r2, [r3, #4]
  return 0;
 800499e:	2300      	movs	r3, #0
}
 80049a0:	4618      	mov	r0, r3
 80049a2:	370c      	adds	r7, #12
 80049a4:	46bd      	mov	sp, r7
 80049a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049aa:	4770      	bx	lr

080049ac <_isatty>:

int _isatty(int file)
{
 80049ac:	b480      	push	{r7}
 80049ae:	b083      	sub	sp, #12
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80049b4:	2301      	movs	r3, #1
}
 80049b6:	4618      	mov	r0, r3
 80049b8:	370c      	adds	r7, #12
 80049ba:	46bd      	mov	sp, r7
 80049bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c0:	4770      	bx	lr

080049c2 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80049c2:	b480      	push	{r7}
 80049c4:	b085      	sub	sp, #20
 80049c6:	af00      	add	r7, sp, #0
 80049c8:	60f8      	str	r0, [r7, #12]
 80049ca:	60b9      	str	r1, [r7, #8]
 80049cc:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80049ce:	2300      	movs	r3, #0
}
 80049d0:	4618      	mov	r0, r3
 80049d2:	3714      	adds	r7, #20
 80049d4:	46bd      	mov	sp, r7
 80049d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049da:	4770      	bx	lr

080049dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b086      	sub	sp, #24
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80049e4:	4a14      	ldr	r2, [pc, #80]	@ (8004a38 <_sbrk+0x5c>)
 80049e6:	4b15      	ldr	r3, [pc, #84]	@ (8004a3c <_sbrk+0x60>)
 80049e8:	1ad3      	subs	r3, r2, r3
 80049ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80049ec:	697b      	ldr	r3, [r7, #20]
 80049ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80049f0:	4b13      	ldr	r3, [pc, #76]	@ (8004a40 <_sbrk+0x64>)
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d102      	bne.n	80049fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80049f8:	4b11      	ldr	r3, [pc, #68]	@ (8004a40 <_sbrk+0x64>)
 80049fa:	4a12      	ldr	r2, [pc, #72]	@ (8004a44 <_sbrk+0x68>)
 80049fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80049fe:	4b10      	ldr	r3, [pc, #64]	@ (8004a40 <_sbrk+0x64>)
 8004a00:	681a      	ldr	r2, [r3, #0]
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	4413      	add	r3, r2
 8004a06:	693a      	ldr	r2, [r7, #16]
 8004a08:	429a      	cmp	r2, r3
 8004a0a:	d207      	bcs.n	8004a1c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004a0c:	f007 f82c 	bl	800ba68 <__errno>
 8004a10:	4603      	mov	r3, r0
 8004a12:	220c      	movs	r2, #12
 8004a14:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004a16:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8004a1a:	e009      	b.n	8004a30 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8004a1c:	4b08      	ldr	r3, [pc, #32]	@ (8004a40 <_sbrk+0x64>)
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004a22:	4b07      	ldr	r3, [pc, #28]	@ (8004a40 <_sbrk+0x64>)
 8004a24:	681a      	ldr	r2, [r3, #0]
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	4413      	add	r3, r2
 8004a2a:	4a05      	ldr	r2, [pc, #20]	@ (8004a40 <_sbrk+0x64>)
 8004a2c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
}
 8004a30:	4618      	mov	r0, r3
 8004a32:	3718      	adds	r7, #24
 8004a34:	46bd      	mov	sp, r7
 8004a36:	bd80      	pop	{r7, pc}
 8004a38:	20020000 	.word	0x20020000
 8004a3c:	00000400 	.word	0x00000400
 8004a40:	200006dc 	.word	0x200006dc
 8004a44:	200051c8 	.word	0x200051c8

08004a48 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004a48:	b480      	push	{r7}
 8004a4a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8004a4c:	4b06      	ldr	r3, [pc, #24]	@ (8004a68 <SystemInit+0x20>)
 8004a4e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004a52:	4a05      	ldr	r2, [pc, #20]	@ (8004a68 <SystemInit+0x20>)
 8004a54:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8004a58:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004a5c:	bf00      	nop
 8004a5e:	46bd      	mov	sp, r7
 8004a60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a64:	4770      	bx	lr
 8004a66:	bf00      	nop
 8004a68:	e000ed00 	.word	0xe000ed00

08004a6c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart1;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004a70:	4b11      	ldr	r3, [pc, #68]	@ (8004ab8 <MX_USART1_UART_Init+0x4c>)
 8004a72:	4a12      	ldr	r2, [pc, #72]	@ (8004abc <MX_USART1_UART_Init+0x50>)
 8004a74:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8004a76:	4b10      	ldr	r3, [pc, #64]	@ (8004ab8 <MX_USART1_UART_Init+0x4c>)
 8004a78:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8004a7c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004a7e:	4b0e      	ldr	r3, [pc, #56]	@ (8004ab8 <MX_USART1_UART_Init+0x4c>)
 8004a80:	2200      	movs	r2, #0
 8004a82:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004a84:	4b0c      	ldr	r3, [pc, #48]	@ (8004ab8 <MX_USART1_UART_Init+0x4c>)
 8004a86:	2200      	movs	r2, #0
 8004a88:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8004a8a:	4b0b      	ldr	r3, [pc, #44]	@ (8004ab8 <MX_USART1_UART_Init+0x4c>)
 8004a8c:	2200      	movs	r2, #0
 8004a8e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004a90:	4b09      	ldr	r3, [pc, #36]	@ (8004ab8 <MX_USART1_UART_Init+0x4c>)
 8004a92:	220c      	movs	r2, #12
 8004a94:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8004a96:	4b08      	ldr	r3, [pc, #32]	@ (8004ab8 <MX_USART1_UART_Init+0x4c>)
 8004a98:	2200      	movs	r2, #0
 8004a9a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004a9c:	4b06      	ldr	r3, [pc, #24]	@ (8004ab8 <MX_USART1_UART_Init+0x4c>)
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004aa2:	4805      	ldr	r0, [pc, #20]	@ (8004ab8 <MX_USART1_UART_Init+0x4c>)
 8004aa4:	f002 ff3a 	bl	800791c <HAL_UART_Init>
 8004aa8:	4603      	mov	r3, r0
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d001      	beq.n	8004ab2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8004aae:	f7ff fe27 	bl	8004700 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004ab2:	bf00      	nop
 8004ab4:	bd80      	pop	{r7, pc}
 8004ab6:	bf00      	nop
 8004ab8:	200006e0 	.word	0x200006e0
 8004abc:	40011000 	.word	0x40011000

08004ac0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8004ac0:	b580      	push	{r7, lr}
 8004ac2:	b08a      	sub	sp, #40	@ 0x28
 8004ac4:	af00      	add	r7, sp, #0
 8004ac6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8004ac8:	f107 0314 	add.w	r3, r7, #20
 8004acc:	2200      	movs	r2, #0
 8004ace:	601a      	str	r2, [r3, #0]
 8004ad0:	605a      	str	r2, [r3, #4]
 8004ad2:	609a      	str	r2, [r3, #8]
 8004ad4:	60da      	str	r2, [r3, #12]
 8004ad6:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	4a19      	ldr	r2, [pc, #100]	@ (8004b44 <HAL_UART_MspInit+0x84>)
 8004ade:	4293      	cmp	r3, r2
 8004ae0:	d12c      	bne.n	8004b3c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	613b      	str	r3, [r7, #16]
 8004ae6:	4b18      	ldr	r3, [pc, #96]	@ (8004b48 <HAL_UART_MspInit+0x88>)
 8004ae8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004aea:	4a17      	ldr	r2, [pc, #92]	@ (8004b48 <HAL_UART_MspInit+0x88>)
 8004aec:	f043 0310 	orr.w	r3, r3, #16
 8004af0:	6453      	str	r3, [r2, #68]	@ 0x44
 8004af2:	4b15      	ldr	r3, [pc, #84]	@ (8004b48 <HAL_UART_MspInit+0x88>)
 8004af4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004af6:	f003 0310 	and.w	r3, r3, #16
 8004afa:	613b      	str	r3, [r7, #16]
 8004afc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8004afe:	2300      	movs	r3, #0
 8004b00:	60fb      	str	r3, [r7, #12]
 8004b02:	4b11      	ldr	r3, [pc, #68]	@ (8004b48 <HAL_UART_MspInit+0x88>)
 8004b04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b06:	4a10      	ldr	r2, [pc, #64]	@ (8004b48 <HAL_UART_MspInit+0x88>)
 8004b08:	f043 0301 	orr.w	r3, r3, #1
 8004b0c:	6313      	str	r3, [r2, #48]	@ 0x30
 8004b0e:	4b0e      	ldr	r3, [pc, #56]	@ (8004b48 <HAL_UART_MspInit+0x88>)
 8004b10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004b12:	f003 0301 	and.w	r3, r3, #1
 8004b16:	60fb      	str	r3, [r7, #12]
 8004b18:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8004b1a:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8004b1e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8004b20:	2302      	movs	r3, #2
 8004b22:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004b24:	2300      	movs	r3, #0
 8004b26:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004b28:	2303      	movs	r3, #3
 8004b2a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8004b2c:	2307      	movs	r3, #7
 8004b2e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004b30:	f107 0314 	add.w	r3, r7, #20
 8004b34:	4619      	mov	r1, r3
 8004b36:	4805      	ldr	r0, [pc, #20]	@ (8004b4c <HAL_UART_MspInit+0x8c>)
 8004b38:	f000 f9b0 	bl	8004e9c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8004b3c:	bf00      	nop
 8004b3e:	3728      	adds	r7, #40	@ 0x28
 8004b40:	46bd      	mov	sp, r7
 8004b42:	bd80      	pop	{r7, pc}
 8004b44:	40011000 	.word	0x40011000
 8004b48:	40023800 	.word	0x40023800
 8004b4c:	40020000 	.word	0x40020000

08004b50 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004b50:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8004b88 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004b54:	480d      	ldr	r0, [pc, #52]	@ (8004b8c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004b56:	490e      	ldr	r1, [pc, #56]	@ (8004b90 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004b58:	4a0e      	ldr	r2, [pc, #56]	@ (8004b94 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004b5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004b5c:	e002      	b.n	8004b64 <LoopCopyDataInit>

08004b5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004b5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004b60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004b62:	3304      	adds	r3, #4

08004b64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004b64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004b66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004b68:	d3f9      	bcc.n	8004b5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004b6a:	4a0b      	ldr	r2, [pc, #44]	@ (8004b98 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004b6c:	4c0b      	ldr	r4, [pc, #44]	@ (8004b9c <LoopFillZerobss+0x26>)
  movs r3, #0
 8004b6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004b70:	e001      	b.n	8004b76 <LoopFillZerobss>

08004b72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004b72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004b74:	3204      	adds	r2, #4

08004b76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004b76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004b78:	d3fb      	bcc.n	8004b72 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8004b7a:	f7ff ff65 	bl	8004a48 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004b7e:	f006 ff79 	bl	800ba74 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004b82:	f7ff fb4b 	bl	800421c <main>
  bx  lr    
 8004b86:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8004b88:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004b8c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004b90:	20000290 	.word	0x20000290
  ldr r2, =_sidata
 8004b94:	0800ffa8 	.word	0x0800ffa8
  ldr r2, =_sbss
 8004b98:	20000290 	.word	0x20000290
  ldr r4, =_ebss
 8004b9c:	200051c8 	.word	0x200051c8

08004ba0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004ba0:	e7fe      	b.n	8004ba0 <ADC_IRQHandler>
	...

08004ba4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004ba4:	b580      	push	{r7, lr}
 8004ba6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004ba8:	4b0e      	ldr	r3, [pc, #56]	@ (8004be4 <HAL_Init+0x40>)
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	4a0d      	ldr	r2, [pc, #52]	@ (8004be4 <HAL_Init+0x40>)
 8004bae:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8004bb2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004bb4:	4b0b      	ldr	r3, [pc, #44]	@ (8004be4 <HAL_Init+0x40>)
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	4a0a      	ldr	r2, [pc, #40]	@ (8004be4 <HAL_Init+0x40>)
 8004bba:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8004bbe:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004bc0:	4b08      	ldr	r3, [pc, #32]	@ (8004be4 <HAL_Init+0x40>)
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4a07      	ldr	r2, [pc, #28]	@ (8004be4 <HAL_Init+0x40>)
 8004bc6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004bca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004bcc:	2003      	movs	r0, #3
 8004bce:	f000 f931 	bl	8004e34 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004bd2:	200f      	movs	r0, #15
 8004bd4:	f000 f808 	bl	8004be8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004bd8:	f7ff fe1c 	bl	8004814 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004bdc:	2300      	movs	r3, #0
}
 8004bde:	4618      	mov	r0, r3
 8004be0:	bd80      	pop	{r7, pc}
 8004be2:	bf00      	nop
 8004be4:	40023c00 	.word	0x40023c00

08004be8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004be8:	b580      	push	{r7, lr}
 8004bea:	b082      	sub	sp, #8
 8004bec:	af00      	add	r7, sp, #0
 8004bee:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004bf0:	4b12      	ldr	r3, [pc, #72]	@ (8004c3c <HAL_InitTick+0x54>)
 8004bf2:	681a      	ldr	r2, [r3, #0]
 8004bf4:	4b12      	ldr	r3, [pc, #72]	@ (8004c40 <HAL_InitTick+0x58>)
 8004bf6:	781b      	ldrb	r3, [r3, #0]
 8004bf8:	4619      	mov	r1, r3
 8004bfa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004bfe:	fbb3 f3f1 	udiv	r3, r3, r1
 8004c02:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c06:	4618      	mov	r0, r3
 8004c08:	f000 f93b 	bl	8004e82 <HAL_SYSTICK_Config>
 8004c0c:	4603      	mov	r3, r0
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d001      	beq.n	8004c16 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004c12:	2301      	movs	r3, #1
 8004c14:	e00e      	b.n	8004c34 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2b0f      	cmp	r3, #15
 8004c1a:	d80a      	bhi.n	8004c32 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	6879      	ldr	r1, [r7, #4]
 8004c20:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004c24:	f000 f911 	bl	8004e4a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004c28:	4a06      	ldr	r2, [pc, #24]	@ (8004c44 <HAL_InitTick+0x5c>)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004c2e:	2300      	movs	r3, #0
 8004c30:	e000      	b.n	8004c34 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004c32:	2301      	movs	r3, #1
}
 8004c34:	4618      	mov	r0, r3
 8004c36:	3708      	adds	r7, #8
 8004c38:	46bd      	mov	sp, r7
 8004c3a:	bd80      	pop	{r7, pc}
 8004c3c:	200000a4 	.word	0x200000a4
 8004c40:	200000ac 	.word	0x200000ac
 8004c44:	200000a8 	.word	0x200000a8

08004c48 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004c48:	b480      	push	{r7}
 8004c4a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004c4c:	4b06      	ldr	r3, [pc, #24]	@ (8004c68 <HAL_IncTick+0x20>)
 8004c4e:	781b      	ldrb	r3, [r3, #0]
 8004c50:	461a      	mov	r2, r3
 8004c52:	4b06      	ldr	r3, [pc, #24]	@ (8004c6c <HAL_IncTick+0x24>)
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	4413      	add	r3, r2
 8004c58:	4a04      	ldr	r2, [pc, #16]	@ (8004c6c <HAL_IncTick+0x24>)
 8004c5a:	6013      	str	r3, [r2, #0]
}
 8004c5c:	bf00      	nop
 8004c5e:	46bd      	mov	sp, r7
 8004c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c64:	4770      	bx	lr
 8004c66:	bf00      	nop
 8004c68:	200000ac 	.word	0x200000ac
 8004c6c:	20000728 	.word	0x20000728

08004c70 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004c70:	b480      	push	{r7}
 8004c72:	af00      	add	r7, sp, #0
  return uwTick;
 8004c74:	4b03      	ldr	r3, [pc, #12]	@ (8004c84 <HAL_GetTick+0x14>)
 8004c76:	681b      	ldr	r3, [r3, #0]
}
 8004c78:	4618      	mov	r0, r3
 8004c7a:	46bd      	mov	sp, r7
 8004c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c80:	4770      	bx	lr
 8004c82:	bf00      	nop
 8004c84:	20000728 	.word	0x20000728

08004c88 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004c88:	b580      	push	{r7, lr}
 8004c8a:	b084      	sub	sp, #16
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004c90:	f7ff ffee 	bl	8004c70 <HAL_GetTick>
 8004c94:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004ca0:	d005      	beq.n	8004cae <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004ca2:	4b0a      	ldr	r3, [pc, #40]	@ (8004ccc <HAL_Delay+0x44>)
 8004ca4:	781b      	ldrb	r3, [r3, #0]
 8004ca6:	461a      	mov	r2, r3
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	4413      	add	r3, r2
 8004cac:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004cae:	bf00      	nop
 8004cb0:	f7ff ffde 	bl	8004c70 <HAL_GetTick>
 8004cb4:	4602      	mov	r2, r0
 8004cb6:	68bb      	ldr	r3, [r7, #8]
 8004cb8:	1ad3      	subs	r3, r2, r3
 8004cba:	68fa      	ldr	r2, [r7, #12]
 8004cbc:	429a      	cmp	r2, r3
 8004cbe:	d8f7      	bhi.n	8004cb0 <HAL_Delay+0x28>
  {
  }
}
 8004cc0:	bf00      	nop
 8004cc2:	bf00      	nop
 8004cc4:	3710      	adds	r7, #16
 8004cc6:	46bd      	mov	sp, r7
 8004cc8:	bd80      	pop	{r7, pc}
 8004cca:	bf00      	nop
 8004ccc:	200000ac 	.word	0x200000ac

08004cd0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004cd0:	b480      	push	{r7}
 8004cd2:	b085      	sub	sp, #20
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	f003 0307 	and.w	r3, r3, #7
 8004cde:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004ce0:	4b0c      	ldr	r3, [pc, #48]	@ (8004d14 <__NVIC_SetPriorityGrouping+0x44>)
 8004ce2:	68db      	ldr	r3, [r3, #12]
 8004ce4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004ce6:	68ba      	ldr	r2, [r7, #8]
 8004ce8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004cec:	4013      	ands	r3, r2
 8004cee:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004cf4:	68bb      	ldr	r3, [r7, #8]
 8004cf6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004cf8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004cfc:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004d00:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004d02:	4a04      	ldr	r2, [pc, #16]	@ (8004d14 <__NVIC_SetPriorityGrouping+0x44>)
 8004d04:	68bb      	ldr	r3, [r7, #8]
 8004d06:	60d3      	str	r3, [r2, #12]
}
 8004d08:	bf00      	nop
 8004d0a:	3714      	adds	r7, #20
 8004d0c:	46bd      	mov	sp, r7
 8004d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d12:	4770      	bx	lr
 8004d14:	e000ed00 	.word	0xe000ed00

08004d18 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004d18:	b480      	push	{r7}
 8004d1a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004d1c:	4b04      	ldr	r3, [pc, #16]	@ (8004d30 <__NVIC_GetPriorityGrouping+0x18>)
 8004d1e:	68db      	ldr	r3, [r3, #12]
 8004d20:	0a1b      	lsrs	r3, r3, #8
 8004d22:	f003 0307 	and.w	r3, r3, #7
}
 8004d26:	4618      	mov	r0, r3
 8004d28:	46bd      	mov	sp, r7
 8004d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d2e:	4770      	bx	lr
 8004d30:	e000ed00 	.word	0xe000ed00

08004d34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004d34:	b480      	push	{r7}
 8004d36:	b083      	sub	sp, #12
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	4603      	mov	r3, r0
 8004d3c:	6039      	str	r1, [r7, #0]
 8004d3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004d40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	db0a      	blt.n	8004d5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004d48:	683b      	ldr	r3, [r7, #0]
 8004d4a:	b2da      	uxtb	r2, r3
 8004d4c:	490c      	ldr	r1, [pc, #48]	@ (8004d80 <__NVIC_SetPriority+0x4c>)
 8004d4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004d52:	0112      	lsls	r2, r2, #4
 8004d54:	b2d2      	uxtb	r2, r2
 8004d56:	440b      	add	r3, r1
 8004d58:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004d5c:	e00a      	b.n	8004d74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004d5e:	683b      	ldr	r3, [r7, #0]
 8004d60:	b2da      	uxtb	r2, r3
 8004d62:	4908      	ldr	r1, [pc, #32]	@ (8004d84 <__NVIC_SetPriority+0x50>)
 8004d64:	79fb      	ldrb	r3, [r7, #7]
 8004d66:	f003 030f 	and.w	r3, r3, #15
 8004d6a:	3b04      	subs	r3, #4
 8004d6c:	0112      	lsls	r2, r2, #4
 8004d6e:	b2d2      	uxtb	r2, r2
 8004d70:	440b      	add	r3, r1
 8004d72:	761a      	strb	r2, [r3, #24]
}
 8004d74:	bf00      	nop
 8004d76:	370c      	adds	r7, #12
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7e:	4770      	bx	lr
 8004d80:	e000e100 	.word	0xe000e100
 8004d84:	e000ed00 	.word	0xe000ed00

08004d88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004d88:	b480      	push	{r7}
 8004d8a:	b089      	sub	sp, #36	@ 0x24
 8004d8c:	af00      	add	r7, sp, #0
 8004d8e:	60f8      	str	r0, [r7, #12]
 8004d90:	60b9      	str	r1, [r7, #8]
 8004d92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004d94:	68fb      	ldr	r3, [r7, #12]
 8004d96:	f003 0307 	and.w	r3, r3, #7
 8004d9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004d9c:	69fb      	ldr	r3, [r7, #28]
 8004d9e:	f1c3 0307 	rsb	r3, r3, #7
 8004da2:	2b04      	cmp	r3, #4
 8004da4:	bf28      	it	cs
 8004da6:	2304      	movcs	r3, #4
 8004da8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004daa:	69fb      	ldr	r3, [r7, #28]
 8004dac:	3304      	adds	r3, #4
 8004dae:	2b06      	cmp	r3, #6
 8004db0:	d902      	bls.n	8004db8 <NVIC_EncodePriority+0x30>
 8004db2:	69fb      	ldr	r3, [r7, #28]
 8004db4:	3b03      	subs	r3, #3
 8004db6:	e000      	b.n	8004dba <NVIC_EncodePriority+0x32>
 8004db8:	2300      	movs	r3, #0
 8004dba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004dbc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004dc0:	69bb      	ldr	r3, [r7, #24]
 8004dc2:	fa02 f303 	lsl.w	r3, r2, r3
 8004dc6:	43da      	mvns	r2, r3
 8004dc8:	68bb      	ldr	r3, [r7, #8]
 8004dca:	401a      	ands	r2, r3
 8004dcc:	697b      	ldr	r3, [r7, #20]
 8004dce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004dd0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8004dd4:	697b      	ldr	r3, [r7, #20]
 8004dd6:	fa01 f303 	lsl.w	r3, r1, r3
 8004dda:	43d9      	mvns	r1, r3
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004de0:	4313      	orrs	r3, r2
         );
}
 8004de2:	4618      	mov	r0, r3
 8004de4:	3724      	adds	r7, #36	@ 0x24
 8004de6:	46bd      	mov	sp, r7
 8004de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dec:	4770      	bx	lr
	...

08004df0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004df0:	b580      	push	{r7, lr}
 8004df2:	b082      	sub	sp, #8
 8004df4:	af00      	add	r7, sp, #0
 8004df6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	3b01      	subs	r3, #1
 8004dfc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004e00:	d301      	bcc.n	8004e06 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004e02:	2301      	movs	r3, #1
 8004e04:	e00f      	b.n	8004e26 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004e06:	4a0a      	ldr	r2, [pc, #40]	@ (8004e30 <SysTick_Config+0x40>)
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	3b01      	subs	r3, #1
 8004e0c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004e0e:	210f      	movs	r1, #15
 8004e10:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004e14:	f7ff ff8e 	bl	8004d34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004e18:	4b05      	ldr	r3, [pc, #20]	@ (8004e30 <SysTick_Config+0x40>)
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004e1e:	4b04      	ldr	r3, [pc, #16]	@ (8004e30 <SysTick_Config+0x40>)
 8004e20:	2207      	movs	r2, #7
 8004e22:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004e24:	2300      	movs	r3, #0
}
 8004e26:	4618      	mov	r0, r3
 8004e28:	3708      	adds	r7, #8
 8004e2a:	46bd      	mov	sp, r7
 8004e2c:	bd80      	pop	{r7, pc}
 8004e2e:	bf00      	nop
 8004e30:	e000e010 	.word	0xe000e010

08004e34 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004e34:	b580      	push	{r7, lr}
 8004e36:	b082      	sub	sp, #8
 8004e38:	af00      	add	r7, sp, #0
 8004e3a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004e3c:	6878      	ldr	r0, [r7, #4]
 8004e3e:	f7ff ff47 	bl	8004cd0 <__NVIC_SetPriorityGrouping>
}
 8004e42:	bf00      	nop
 8004e44:	3708      	adds	r7, #8
 8004e46:	46bd      	mov	sp, r7
 8004e48:	bd80      	pop	{r7, pc}

08004e4a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004e4a:	b580      	push	{r7, lr}
 8004e4c:	b086      	sub	sp, #24
 8004e4e:	af00      	add	r7, sp, #0
 8004e50:	4603      	mov	r3, r0
 8004e52:	60b9      	str	r1, [r7, #8]
 8004e54:	607a      	str	r2, [r7, #4]
 8004e56:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004e58:	2300      	movs	r3, #0
 8004e5a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004e5c:	f7ff ff5c 	bl	8004d18 <__NVIC_GetPriorityGrouping>
 8004e60:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004e62:	687a      	ldr	r2, [r7, #4]
 8004e64:	68b9      	ldr	r1, [r7, #8]
 8004e66:	6978      	ldr	r0, [r7, #20]
 8004e68:	f7ff ff8e 	bl	8004d88 <NVIC_EncodePriority>
 8004e6c:	4602      	mov	r2, r0
 8004e6e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004e72:	4611      	mov	r1, r2
 8004e74:	4618      	mov	r0, r3
 8004e76:	f7ff ff5d 	bl	8004d34 <__NVIC_SetPriority>
}
 8004e7a:	bf00      	nop
 8004e7c:	3718      	adds	r7, #24
 8004e7e:	46bd      	mov	sp, r7
 8004e80:	bd80      	pop	{r7, pc}

08004e82 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004e82:	b580      	push	{r7, lr}
 8004e84:	b082      	sub	sp, #8
 8004e86:	af00      	add	r7, sp, #0
 8004e88:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004e8a:	6878      	ldr	r0, [r7, #4]
 8004e8c:	f7ff ffb0 	bl	8004df0 <SysTick_Config>
 8004e90:	4603      	mov	r3, r0
}
 8004e92:	4618      	mov	r0, r3
 8004e94:	3708      	adds	r7, #8
 8004e96:	46bd      	mov	sp, r7
 8004e98:	bd80      	pop	{r7, pc}
	...

08004e9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004e9c:	b480      	push	{r7}
 8004e9e:	b089      	sub	sp, #36	@ 0x24
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
 8004ea4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004eaa:	2300      	movs	r3, #0
 8004eac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004eae:	2300      	movs	r3, #0
 8004eb0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004eb2:	2300      	movs	r3, #0
 8004eb4:	61fb      	str	r3, [r7, #28]
 8004eb6:	e16b      	b.n	8005190 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004eb8:	2201      	movs	r2, #1
 8004eba:	69fb      	ldr	r3, [r7, #28]
 8004ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8004ec0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	697a      	ldr	r2, [r7, #20]
 8004ec8:	4013      	ands	r3, r2
 8004eca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004ecc:	693a      	ldr	r2, [r7, #16]
 8004ece:	697b      	ldr	r3, [r7, #20]
 8004ed0:	429a      	cmp	r2, r3
 8004ed2:	f040 815a 	bne.w	800518a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004ed6:	683b      	ldr	r3, [r7, #0]
 8004ed8:	685b      	ldr	r3, [r3, #4]
 8004eda:	f003 0303 	and.w	r3, r3, #3
 8004ede:	2b01      	cmp	r3, #1
 8004ee0:	d005      	beq.n	8004eee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	685b      	ldr	r3, [r3, #4]
 8004ee6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004eea:	2b02      	cmp	r3, #2
 8004eec:	d130      	bne.n	8004f50 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	689b      	ldr	r3, [r3, #8]
 8004ef2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004ef4:	69fb      	ldr	r3, [r7, #28]
 8004ef6:	005b      	lsls	r3, r3, #1
 8004ef8:	2203      	movs	r2, #3
 8004efa:	fa02 f303 	lsl.w	r3, r2, r3
 8004efe:	43db      	mvns	r3, r3
 8004f00:	69ba      	ldr	r2, [r7, #24]
 8004f02:	4013      	ands	r3, r2
 8004f04:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	68da      	ldr	r2, [r3, #12]
 8004f0a:	69fb      	ldr	r3, [r7, #28]
 8004f0c:	005b      	lsls	r3, r3, #1
 8004f0e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f12:	69ba      	ldr	r2, [r7, #24]
 8004f14:	4313      	orrs	r3, r2
 8004f16:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	69ba      	ldr	r2, [r7, #24]
 8004f1c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	685b      	ldr	r3, [r3, #4]
 8004f22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004f24:	2201      	movs	r2, #1
 8004f26:	69fb      	ldr	r3, [r7, #28]
 8004f28:	fa02 f303 	lsl.w	r3, r2, r3
 8004f2c:	43db      	mvns	r3, r3
 8004f2e:	69ba      	ldr	r2, [r7, #24]
 8004f30:	4013      	ands	r3, r2
 8004f32:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	685b      	ldr	r3, [r3, #4]
 8004f38:	091b      	lsrs	r3, r3, #4
 8004f3a:	f003 0201 	and.w	r2, r3, #1
 8004f3e:	69fb      	ldr	r3, [r7, #28]
 8004f40:	fa02 f303 	lsl.w	r3, r2, r3
 8004f44:	69ba      	ldr	r2, [r7, #24]
 8004f46:	4313      	orrs	r3, r2
 8004f48:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	69ba      	ldr	r2, [r7, #24]
 8004f4e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	685b      	ldr	r3, [r3, #4]
 8004f54:	f003 0303 	and.w	r3, r3, #3
 8004f58:	2b03      	cmp	r3, #3
 8004f5a:	d017      	beq.n	8004f8c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	68db      	ldr	r3, [r3, #12]
 8004f60:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004f62:	69fb      	ldr	r3, [r7, #28]
 8004f64:	005b      	lsls	r3, r3, #1
 8004f66:	2203      	movs	r2, #3
 8004f68:	fa02 f303 	lsl.w	r3, r2, r3
 8004f6c:	43db      	mvns	r3, r3
 8004f6e:	69ba      	ldr	r2, [r7, #24]
 8004f70:	4013      	ands	r3, r2
 8004f72:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	689a      	ldr	r2, [r3, #8]
 8004f78:	69fb      	ldr	r3, [r7, #28]
 8004f7a:	005b      	lsls	r3, r3, #1
 8004f7c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f80:	69ba      	ldr	r2, [r7, #24]
 8004f82:	4313      	orrs	r3, r2
 8004f84:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	69ba      	ldr	r2, [r7, #24]
 8004f8a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	685b      	ldr	r3, [r3, #4]
 8004f90:	f003 0303 	and.w	r3, r3, #3
 8004f94:	2b02      	cmp	r3, #2
 8004f96:	d123      	bne.n	8004fe0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004f98:	69fb      	ldr	r3, [r7, #28]
 8004f9a:	08da      	lsrs	r2, r3, #3
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	3208      	adds	r2, #8
 8004fa0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004fa4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004fa6:	69fb      	ldr	r3, [r7, #28]
 8004fa8:	f003 0307 	and.w	r3, r3, #7
 8004fac:	009b      	lsls	r3, r3, #2
 8004fae:	220f      	movs	r2, #15
 8004fb0:	fa02 f303 	lsl.w	r3, r2, r3
 8004fb4:	43db      	mvns	r3, r3
 8004fb6:	69ba      	ldr	r2, [r7, #24]
 8004fb8:	4013      	ands	r3, r2
 8004fba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	691a      	ldr	r2, [r3, #16]
 8004fc0:	69fb      	ldr	r3, [r7, #28]
 8004fc2:	f003 0307 	and.w	r3, r3, #7
 8004fc6:	009b      	lsls	r3, r3, #2
 8004fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8004fcc:	69ba      	ldr	r2, [r7, #24]
 8004fce:	4313      	orrs	r3, r2
 8004fd0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004fd2:	69fb      	ldr	r3, [r7, #28]
 8004fd4:	08da      	lsrs	r2, r3, #3
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	3208      	adds	r2, #8
 8004fda:	69b9      	ldr	r1, [r7, #24]
 8004fdc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004fe6:	69fb      	ldr	r3, [r7, #28]
 8004fe8:	005b      	lsls	r3, r3, #1
 8004fea:	2203      	movs	r2, #3
 8004fec:	fa02 f303 	lsl.w	r3, r2, r3
 8004ff0:	43db      	mvns	r3, r3
 8004ff2:	69ba      	ldr	r2, [r7, #24]
 8004ff4:	4013      	ands	r3, r2
 8004ff6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	685b      	ldr	r3, [r3, #4]
 8004ffc:	f003 0203 	and.w	r2, r3, #3
 8005000:	69fb      	ldr	r3, [r7, #28]
 8005002:	005b      	lsls	r3, r3, #1
 8005004:	fa02 f303 	lsl.w	r3, r2, r3
 8005008:	69ba      	ldr	r2, [r7, #24]
 800500a:	4313      	orrs	r3, r2
 800500c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	69ba      	ldr	r2, [r7, #24]
 8005012:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	685b      	ldr	r3, [r3, #4]
 8005018:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800501c:	2b00      	cmp	r3, #0
 800501e:	f000 80b4 	beq.w	800518a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005022:	2300      	movs	r3, #0
 8005024:	60fb      	str	r3, [r7, #12]
 8005026:	4b60      	ldr	r3, [pc, #384]	@ (80051a8 <HAL_GPIO_Init+0x30c>)
 8005028:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800502a:	4a5f      	ldr	r2, [pc, #380]	@ (80051a8 <HAL_GPIO_Init+0x30c>)
 800502c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8005030:	6453      	str	r3, [r2, #68]	@ 0x44
 8005032:	4b5d      	ldr	r3, [pc, #372]	@ (80051a8 <HAL_GPIO_Init+0x30c>)
 8005034:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005036:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800503a:	60fb      	str	r3, [r7, #12]
 800503c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800503e:	4a5b      	ldr	r2, [pc, #364]	@ (80051ac <HAL_GPIO_Init+0x310>)
 8005040:	69fb      	ldr	r3, [r7, #28]
 8005042:	089b      	lsrs	r3, r3, #2
 8005044:	3302      	adds	r3, #2
 8005046:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800504a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800504c:	69fb      	ldr	r3, [r7, #28]
 800504e:	f003 0303 	and.w	r3, r3, #3
 8005052:	009b      	lsls	r3, r3, #2
 8005054:	220f      	movs	r2, #15
 8005056:	fa02 f303 	lsl.w	r3, r2, r3
 800505a:	43db      	mvns	r3, r3
 800505c:	69ba      	ldr	r2, [r7, #24]
 800505e:	4013      	ands	r3, r2
 8005060:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	4a52      	ldr	r2, [pc, #328]	@ (80051b0 <HAL_GPIO_Init+0x314>)
 8005066:	4293      	cmp	r3, r2
 8005068:	d02b      	beq.n	80050c2 <HAL_GPIO_Init+0x226>
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	4a51      	ldr	r2, [pc, #324]	@ (80051b4 <HAL_GPIO_Init+0x318>)
 800506e:	4293      	cmp	r3, r2
 8005070:	d025      	beq.n	80050be <HAL_GPIO_Init+0x222>
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	4a50      	ldr	r2, [pc, #320]	@ (80051b8 <HAL_GPIO_Init+0x31c>)
 8005076:	4293      	cmp	r3, r2
 8005078:	d01f      	beq.n	80050ba <HAL_GPIO_Init+0x21e>
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	4a4f      	ldr	r2, [pc, #316]	@ (80051bc <HAL_GPIO_Init+0x320>)
 800507e:	4293      	cmp	r3, r2
 8005080:	d019      	beq.n	80050b6 <HAL_GPIO_Init+0x21a>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	4a4e      	ldr	r2, [pc, #312]	@ (80051c0 <HAL_GPIO_Init+0x324>)
 8005086:	4293      	cmp	r3, r2
 8005088:	d013      	beq.n	80050b2 <HAL_GPIO_Init+0x216>
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	4a4d      	ldr	r2, [pc, #308]	@ (80051c4 <HAL_GPIO_Init+0x328>)
 800508e:	4293      	cmp	r3, r2
 8005090:	d00d      	beq.n	80050ae <HAL_GPIO_Init+0x212>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	4a4c      	ldr	r2, [pc, #304]	@ (80051c8 <HAL_GPIO_Init+0x32c>)
 8005096:	4293      	cmp	r3, r2
 8005098:	d007      	beq.n	80050aa <HAL_GPIO_Init+0x20e>
 800509a:	687b      	ldr	r3, [r7, #4]
 800509c:	4a4b      	ldr	r2, [pc, #300]	@ (80051cc <HAL_GPIO_Init+0x330>)
 800509e:	4293      	cmp	r3, r2
 80050a0:	d101      	bne.n	80050a6 <HAL_GPIO_Init+0x20a>
 80050a2:	2307      	movs	r3, #7
 80050a4:	e00e      	b.n	80050c4 <HAL_GPIO_Init+0x228>
 80050a6:	2308      	movs	r3, #8
 80050a8:	e00c      	b.n	80050c4 <HAL_GPIO_Init+0x228>
 80050aa:	2306      	movs	r3, #6
 80050ac:	e00a      	b.n	80050c4 <HAL_GPIO_Init+0x228>
 80050ae:	2305      	movs	r3, #5
 80050b0:	e008      	b.n	80050c4 <HAL_GPIO_Init+0x228>
 80050b2:	2304      	movs	r3, #4
 80050b4:	e006      	b.n	80050c4 <HAL_GPIO_Init+0x228>
 80050b6:	2303      	movs	r3, #3
 80050b8:	e004      	b.n	80050c4 <HAL_GPIO_Init+0x228>
 80050ba:	2302      	movs	r3, #2
 80050bc:	e002      	b.n	80050c4 <HAL_GPIO_Init+0x228>
 80050be:	2301      	movs	r3, #1
 80050c0:	e000      	b.n	80050c4 <HAL_GPIO_Init+0x228>
 80050c2:	2300      	movs	r3, #0
 80050c4:	69fa      	ldr	r2, [r7, #28]
 80050c6:	f002 0203 	and.w	r2, r2, #3
 80050ca:	0092      	lsls	r2, r2, #2
 80050cc:	4093      	lsls	r3, r2
 80050ce:	69ba      	ldr	r2, [r7, #24]
 80050d0:	4313      	orrs	r3, r2
 80050d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80050d4:	4935      	ldr	r1, [pc, #212]	@ (80051ac <HAL_GPIO_Init+0x310>)
 80050d6:	69fb      	ldr	r3, [r7, #28]
 80050d8:	089b      	lsrs	r3, r3, #2
 80050da:	3302      	adds	r3, #2
 80050dc:	69ba      	ldr	r2, [r7, #24]
 80050de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80050e2:	4b3b      	ldr	r3, [pc, #236]	@ (80051d0 <HAL_GPIO_Init+0x334>)
 80050e4:	689b      	ldr	r3, [r3, #8]
 80050e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80050e8:	693b      	ldr	r3, [r7, #16]
 80050ea:	43db      	mvns	r3, r3
 80050ec:	69ba      	ldr	r2, [r7, #24]
 80050ee:	4013      	ands	r3, r2
 80050f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80050f2:	683b      	ldr	r3, [r7, #0]
 80050f4:	685b      	ldr	r3, [r3, #4]
 80050f6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80050fa:	2b00      	cmp	r3, #0
 80050fc:	d003      	beq.n	8005106 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80050fe:	69ba      	ldr	r2, [r7, #24]
 8005100:	693b      	ldr	r3, [r7, #16]
 8005102:	4313      	orrs	r3, r2
 8005104:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8005106:	4a32      	ldr	r2, [pc, #200]	@ (80051d0 <HAL_GPIO_Init+0x334>)
 8005108:	69bb      	ldr	r3, [r7, #24]
 800510a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800510c:	4b30      	ldr	r3, [pc, #192]	@ (80051d0 <HAL_GPIO_Init+0x334>)
 800510e:	68db      	ldr	r3, [r3, #12]
 8005110:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005112:	693b      	ldr	r3, [r7, #16]
 8005114:	43db      	mvns	r3, r3
 8005116:	69ba      	ldr	r2, [r7, #24]
 8005118:	4013      	ands	r3, r2
 800511a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800511c:	683b      	ldr	r3, [r7, #0]
 800511e:	685b      	ldr	r3, [r3, #4]
 8005120:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8005124:	2b00      	cmp	r3, #0
 8005126:	d003      	beq.n	8005130 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8005128:	69ba      	ldr	r2, [r7, #24]
 800512a:	693b      	ldr	r3, [r7, #16]
 800512c:	4313      	orrs	r3, r2
 800512e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8005130:	4a27      	ldr	r2, [pc, #156]	@ (80051d0 <HAL_GPIO_Init+0x334>)
 8005132:	69bb      	ldr	r3, [r7, #24]
 8005134:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8005136:	4b26      	ldr	r3, [pc, #152]	@ (80051d0 <HAL_GPIO_Init+0x334>)
 8005138:	685b      	ldr	r3, [r3, #4]
 800513a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800513c:	693b      	ldr	r3, [r7, #16]
 800513e:	43db      	mvns	r3, r3
 8005140:	69ba      	ldr	r2, [r7, #24]
 8005142:	4013      	ands	r3, r2
 8005144:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8005146:	683b      	ldr	r3, [r7, #0]
 8005148:	685b      	ldr	r3, [r3, #4]
 800514a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800514e:	2b00      	cmp	r3, #0
 8005150:	d003      	beq.n	800515a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8005152:	69ba      	ldr	r2, [r7, #24]
 8005154:	693b      	ldr	r3, [r7, #16]
 8005156:	4313      	orrs	r3, r2
 8005158:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800515a:	4a1d      	ldr	r2, [pc, #116]	@ (80051d0 <HAL_GPIO_Init+0x334>)
 800515c:	69bb      	ldr	r3, [r7, #24]
 800515e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8005160:	4b1b      	ldr	r3, [pc, #108]	@ (80051d0 <HAL_GPIO_Init+0x334>)
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8005166:	693b      	ldr	r3, [r7, #16]
 8005168:	43db      	mvns	r3, r3
 800516a:	69ba      	ldr	r2, [r7, #24]
 800516c:	4013      	ands	r3, r2
 800516e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005170:	683b      	ldr	r3, [r7, #0]
 8005172:	685b      	ldr	r3, [r3, #4]
 8005174:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8005178:	2b00      	cmp	r3, #0
 800517a:	d003      	beq.n	8005184 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800517c:	69ba      	ldr	r2, [r7, #24]
 800517e:	693b      	ldr	r3, [r7, #16]
 8005180:	4313      	orrs	r3, r2
 8005182:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005184:	4a12      	ldr	r2, [pc, #72]	@ (80051d0 <HAL_GPIO_Init+0x334>)
 8005186:	69bb      	ldr	r3, [r7, #24]
 8005188:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800518a:	69fb      	ldr	r3, [r7, #28]
 800518c:	3301      	adds	r3, #1
 800518e:	61fb      	str	r3, [r7, #28]
 8005190:	69fb      	ldr	r3, [r7, #28]
 8005192:	2b0f      	cmp	r3, #15
 8005194:	f67f ae90 	bls.w	8004eb8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8005198:	bf00      	nop
 800519a:	bf00      	nop
 800519c:	3724      	adds	r7, #36	@ 0x24
 800519e:	46bd      	mov	sp, r7
 80051a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a4:	4770      	bx	lr
 80051a6:	bf00      	nop
 80051a8:	40023800 	.word	0x40023800
 80051ac:	40013800 	.word	0x40013800
 80051b0:	40020000 	.word	0x40020000
 80051b4:	40020400 	.word	0x40020400
 80051b8:	40020800 	.word	0x40020800
 80051bc:	40020c00 	.word	0x40020c00
 80051c0:	40021000 	.word	0x40021000
 80051c4:	40021400 	.word	0x40021400
 80051c8:	40021800 	.word	0x40021800
 80051cc:	40021c00 	.word	0x40021c00
 80051d0:	40013c00 	.word	0x40013c00

080051d4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80051d4:	b480      	push	{r7}
 80051d6:	b085      	sub	sp, #20
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
 80051dc:	460b      	mov	r3, r1
 80051de:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	691a      	ldr	r2, [r3, #16]
 80051e4:	887b      	ldrh	r3, [r7, #2]
 80051e6:	4013      	ands	r3, r2
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d002      	beq.n	80051f2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80051ec:	2301      	movs	r3, #1
 80051ee:	73fb      	strb	r3, [r7, #15]
 80051f0:	e001      	b.n	80051f6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80051f2:	2300      	movs	r3, #0
 80051f4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80051f6:	7bfb      	ldrb	r3, [r7, #15]
}
 80051f8:	4618      	mov	r0, r3
 80051fa:	3714      	adds	r7, #20
 80051fc:	46bd      	mov	sp, r7
 80051fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005202:	4770      	bx	lr

08005204 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005204:	b480      	push	{r7}
 8005206:	b083      	sub	sp, #12
 8005208:	af00      	add	r7, sp, #0
 800520a:	6078      	str	r0, [r7, #4]
 800520c:	460b      	mov	r3, r1
 800520e:	807b      	strh	r3, [r7, #2]
 8005210:	4613      	mov	r3, r2
 8005212:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8005214:	787b      	ldrb	r3, [r7, #1]
 8005216:	2b00      	cmp	r3, #0
 8005218:	d003      	beq.n	8005222 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800521a:	887a      	ldrh	r2, [r7, #2]
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8005220:	e003      	b.n	800522a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8005222:	887b      	ldrh	r3, [r7, #2]
 8005224:	041a      	lsls	r2, r3, #16
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	619a      	str	r2, [r3, #24]
}
 800522a:	bf00      	nop
 800522c:	370c      	adds	r7, #12
 800522e:	46bd      	mov	sp, r7
 8005230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005234:	4770      	bx	lr

08005236 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005236:	b480      	push	{r7}
 8005238:	b085      	sub	sp, #20
 800523a:	af00      	add	r7, sp, #0
 800523c:	6078      	str	r0, [r7, #4]
 800523e:	460b      	mov	r3, r1
 8005240:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	695b      	ldr	r3, [r3, #20]
 8005246:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005248:	887a      	ldrh	r2, [r7, #2]
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	4013      	ands	r3, r2
 800524e:	041a      	lsls	r2, r3, #16
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	43d9      	mvns	r1, r3
 8005254:	887b      	ldrh	r3, [r7, #2]
 8005256:	400b      	ands	r3, r1
 8005258:	431a      	orrs	r2, r3
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	619a      	str	r2, [r3, #24]
}
 800525e:	bf00      	nop
 8005260:	3714      	adds	r7, #20
 8005262:	46bd      	mov	sp, r7
 8005264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005268:	4770      	bx	lr
	...

0800526c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800526c:	b580      	push	{r7, lr}
 800526e:	b084      	sub	sp, #16
 8005270:	af00      	add	r7, sp, #0
 8005272:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	2b00      	cmp	r3, #0
 8005278:	d101      	bne.n	800527e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800527a:	2301      	movs	r3, #1
 800527c:	e12b      	b.n	80054d6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005284:	b2db      	uxtb	r3, r3
 8005286:	2b00      	cmp	r3, #0
 8005288:	d106      	bne.n	8005298 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2200      	movs	r2, #0
 800528e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8005292:	6878      	ldr	r0, [r7, #4]
 8005294:	f7fe ff68 	bl	8004168 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2224      	movs	r2, #36	@ 0x24
 800529c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	681a      	ldr	r2, [r3, #0]
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f022 0201 	bic.w	r2, r2, #1
 80052ae:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	681a      	ldr	r2, [r3, #0]
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80052be:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	681a      	ldr	r2, [r3, #0]
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80052ce:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80052d0:	f001 ff0e 	bl	80070f0 <HAL_RCC_GetPCLK1Freq>
 80052d4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	685b      	ldr	r3, [r3, #4]
 80052da:	4a81      	ldr	r2, [pc, #516]	@ (80054e0 <HAL_I2C_Init+0x274>)
 80052dc:	4293      	cmp	r3, r2
 80052de:	d807      	bhi.n	80052f0 <HAL_I2C_Init+0x84>
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	4a80      	ldr	r2, [pc, #512]	@ (80054e4 <HAL_I2C_Init+0x278>)
 80052e4:	4293      	cmp	r3, r2
 80052e6:	bf94      	ite	ls
 80052e8:	2301      	movls	r3, #1
 80052ea:	2300      	movhi	r3, #0
 80052ec:	b2db      	uxtb	r3, r3
 80052ee:	e006      	b.n	80052fe <HAL_I2C_Init+0x92>
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	4a7d      	ldr	r2, [pc, #500]	@ (80054e8 <HAL_I2C_Init+0x27c>)
 80052f4:	4293      	cmp	r3, r2
 80052f6:	bf94      	ite	ls
 80052f8:	2301      	movls	r3, #1
 80052fa:	2300      	movhi	r3, #0
 80052fc:	b2db      	uxtb	r3, r3
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d001      	beq.n	8005306 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8005302:	2301      	movs	r3, #1
 8005304:	e0e7      	b.n	80054d6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8005306:	68fb      	ldr	r3, [r7, #12]
 8005308:	4a78      	ldr	r2, [pc, #480]	@ (80054ec <HAL_I2C_Init+0x280>)
 800530a:	fba2 2303 	umull	r2, r3, r2, r3
 800530e:	0c9b      	lsrs	r3, r3, #18
 8005310:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	681b      	ldr	r3, [r3, #0]
 8005316:	685b      	ldr	r3, [r3, #4]
 8005318:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	681b      	ldr	r3, [r3, #0]
 8005320:	68ba      	ldr	r2, [r7, #8]
 8005322:	430a      	orrs	r2, r1
 8005324:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	6a1b      	ldr	r3, [r3, #32]
 800532c:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	685b      	ldr	r3, [r3, #4]
 8005334:	4a6a      	ldr	r2, [pc, #424]	@ (80054e0 <HAL_I2C_Init+0x274>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d802      	bhi.n	8005340 <HAL_I2C_Init+0xd4>
 800533a:	68bb      	ldr	r3, [r7, #8]
 800533c:	3301      	adds	r3, #1
 800533e:	e009      	b.n	8005354 <HAL_I2C_Init+0xe8>
 8005340:	68bb      	ldr	r3, [r7, #8]
 8005342:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8005346:	fb02 f303 	mul.w	r3, r2, r3
 800534a:	4a69      	ldr	r2, [pc, #420]	@ (80054f0 <HAL_I2C_Init+0x284>)
 800534c:	fba2 2303 	umull	r2, r3, r2, r3
 8005350:	099b      	lsrs	r3, r3, #6
 8005352:	3301      	adds	r3, #1
 8005354:	687a      	ldr	r2, [r7, #4]
 8005356:	6812      	ldr	r2, [r2, #0]
 8005358:	430b      	orrs	r3, r1
 800535a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	69db      	ldr	r3, [r3, #28]
 8005362:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8005366:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	685b      	ldr	r3, [r3, #4]
 800536e:	495c      	ldr	r1, [pc, #368]	@ (80054e0 <HAL_I2C_Init+0x274>)
 8005370:	428b      	cmp	r3, r1
 8005372:	d819      	bhi.n	80053a8 <HAL_I2C_Init+0x13c>
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	1e59      	subs	r1, r3, #1
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	685b      	ldr	r3, [r3, #4]
 800537c:	005b      	lsls	r3, r3, #1
 800537e:	fbb1 f3f3 	udiv	r3, r1, r3
 8005382:	1c59      	adds	r1, r3, #1
 8005384:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8005388:	400b      	ands	r3, r1
 800538a:	2b00      	cmp	r3, #0
 800538c:	d00a      	beq.n	80053a4 <HAL_I2C_Init+0x138>
 800538e:	68fb      	ldr	r3, [r7, #12]
 8005390:	1e59      	subs	r1, r3, #1
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	685b      	ldr	r3, [r3, #4]
 8005396:	005b      	lsls	r3, r3, #1
 8005398:	fbb1 f3f3 	udiv	r3, r1, r3
 800539c:	3301      	adds	r3, #1
 800539e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80053a2:	e051      	b.n	8005448 <HAL_I2C_Init+0x1dc>
 80053a4:	2304      	movs	r3, #4
 80053a6:	e04f      	b.n	8005448 <HAL_I2C_Init+0x1dc>
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	689b      	ldr	r3, [r3, #8]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d111      	bne.n	80053d4 <HAL_I2C_Init+0x168>
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	1e58      	subs	r0, r3, #1
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	6859      	ldr	r1, [r3, #4]
 80053b8:	460b      	mov	r3, r1
 80053ba:	005b      	lsls	r3, r3, #1
 80053bc:	440b      	add	r3, r1
 80053be:	fbb0 f3f3 	udiv	r3, r0, r3
 80053c2:	3301      	adds	r3, #1
 80053c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	bf0c      	ite	eq
 80053cc:	2301      	moveq	r3, #1
 80053ce:	2300      	movne	r3, #0
 80053d0:	b2db      	uxtb	r3, r3
 80053d2:	e012      	b.n	80053fa <HAL_I2C_Init+0x18e>
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	1e58      	subs	r0, r3, #1
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	6859      	ldr	r1, [r3, #4]
 80053dc:	460b      	mov	r3, r1
 80053de:	009b      	lsls	r3, r3, #2
 80053e0:	440b      	add	r3, r1
 80053e2:	0099      	lsls	r1, r3, #2
 80053e4:	440b      	add	r3, r1
 80053e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80053ea:	3301      	adds	r3, #1
 80053ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	bf0c      	ite	eq
 80053f4:	2301      	moveq	r3, #1
 80053f6:	2300      	movne	r3, #0
 80053f8:	b2db      	uxtb	r3, r3
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d001      	beq.n	8005402 <HAL_I2C_Init+0x196>
 80053fe:	2301      	movs	r3, #1
 8005400:	e022      	b.n	8005448 <HAL_I2C_Init+0x1dc>
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	689b      	ldr	r3, [r3, #8]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d10e      	bne.n	8005428 <HAL_I2C_Init+0x1bc>
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	1e58      	subs	r0, r3, #1
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	6859      	ldr	r1, [r3, #4]
 8005412:	460b      	mov	r3, r1
 8005414:	005b      	lsls	r3, r3, #1
 8005416:	440b      	add	r3, r1
 8005418:	fbb0 f3f3 	udiv	r3, r0, r3
 800541c:	3301      	adds	r3, #1
 800541e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005422:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8005426:	e00f      	b.n	8005448 <HAL_I2C_Init+0x1dc>
 8005428:	68fb      	ldr	r3, [r7, #12]
 800542a:	1e58      	subs	r0, r3, #1
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	6859      	ldr	r1, [r3, #4]
 8005430:	460b      	mov	r3, r1
 8005432:	009b      	lsls	r3, r3, #2
 8005434:	440b      	add	r3, r1
 8005436:	0099      	lsls	r1, r3, #2
 8005438:	440b      	add	r3, r1
 800543a:	fbb0 f3f3 	udiv	r3, r0, r3
 800543e:	3301      	adds	r3, #1
 8005440:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8005444:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8005448:	6879      	ldr	r1, [r7, #4]
 800544a:	6809      	ldr	r1, [r1, #0]
 800544c:	4313      	orrs	r3, r2
 800544e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	681b      	ldr	r3, [r3, #0]
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	69da      	ldr	r2, [r3, #28]
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	6a1b      	ldr	r3, [r3, #32]
 8005462:	431a      	orrs	r2, r3
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	430a      	orrs	r2, r1
 800546a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	689b      	ldr	r3, [r3, #8]
 8005472:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8005476:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 800547a:	687a      	ldr	r2, [r7, #4]
 800547c:	6911      	ldr	r1, [r2, #16]
 800547e:	687a      	ldr	r2, [r7, #4]
 8005480:	68d2      	ldr	r2, [r2, #12]
 8005482:	4311      	orrs	r1, r2
 8005484:	687a      	ldr	r2, [r7, #4]
 8005486:	6812      	ldr	r2, [r2, #0]
 8005488:	430b      	orrs	r3, r1
 800548a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	68db      	ldr	r3, [r3, #12]
 8005492:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	695a      	ldr	r2, [r3, #20]
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	699b      	ldr	r3, [r3, #24]
 800549e:	431a      	orrs	r2, r3
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	430a      	orrs	r2, r1
 80054a6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80054a8:	687b      	ldr	r3, [r7, #4]
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	681a      	ldr	r2, [r3, #0]
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	f042 0201 	orr.w	r2, r2, #1
 80054b6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2200      	movs	r2, #0
 80054bc:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2220      	movs	r2, #32
 80054c2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	2200      	movs	r2, #0
 80054ca:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2200      	movs	r2, #0
 80054d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80054d4:	2300      	movs	r3, #0
}
 80054d6:	4618      	mov	r0, r3
 80054d8:	3710      	adds	r7, #16
 80054da:	46bd      	mov	sp, r7
 80054dc:	bd80      	pop	{r7, pc}
 80054de:	bf00      	nop
 80054e0:	000186a0 	.word	0x000186a0
 80054e4:	001e847f 	.word	0x001e847f
 80054e8:	003d08ff 	.word	0x003d08ff
 80054ec:	431bde83 	.word	0x431bde83
 80054f0:	10624dd3 	.word	0x10624dd3

080054f4 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80054f4:	b580      	push	{r7, lr}
 80054f6:	b088      	sub	sp, #32
 80054f8:	af02      	add	r7, sp, #8
 80054fa:	60f8      	str	r0, [r7, #12]
 80054fc:	607a      	str	r2, [r7, #4]
 80054fe:	461a      	mov	r2, r3
 8005500:	460b      	mov	r3, r1
 8005502:	817b      	strh	r3, [r7, #10]
 8005504:	4613      	mov	r3, r2
 8005506:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005508:	f7ff fbb2 	bl	8004c70 <HAL_GetTick>
 800550c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005514:	b2db      	uxtb	r3, r3
 8005516:	2b20      	cmp	r3, #32
 8005518:	f040 80e0 	bne.w	80056dc <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800551c:	697b      	ldr	r3, [r7, #20]
 800551e:	9300      	str	r3, [sp, #0]
 8005520:	2319      	movs	r3, #25
 8005522:	2201      	movs	r2, #1
 8005524:	4970      	ldr	r1, [pc, #448]	@ (80056e8 <HAL_I2C_Master_Transmit+0x1f4>)
 8005526:	68f8      	ldr	r0, [r7, #12]
 8005528:	f000 ff3c 	bl	80063a4 <I2C_WaitOnFlagUntilTimeout>
 800552c:	4603      	mov	r3, r0
 800552e:	2b00      	cmp	r3, #0
 8005530:	d001      	beq.n	8005536 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8005532:	2302      	movs	r3, #2
 8005534:	e0d3      	b.n	80056de <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005536:	68fb      	ldr	r3, [r7, #12]
 8005538:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800553c:	2b01      	cmp	r3, #1
 800553e:	d101      	bne.n	8005544 <HAL_I2C_Master_Transmit+0x50>
 8005540:	2302      	movs	r3, #2
 8005542:	e0cc      	b.n	80056de <HAL_I2C_Master_Transmit+0x1ea>
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	2201      	movs	r2, #1
 8005548:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	681b      	ldr	r3, [r3, #0]
 8005552:	f003 0301 	and.w	r3, r3, #1
 8005556:	2b01      	cmp	r3, #1
 8005558:	d007      	beq.n	800556a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800555a:	68fb      	ldr	r3, [r7, #12]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	681a      	ldr	r2, [r3, #0]
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	f042 0201 	orr.w	r2, r2, #1
 8005568:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800556a:	68fb      	ldr	r3, [r7, #12]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	681a      	ldr	r2, [r3, #0]
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005578:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800557a:	68fb      	ldr	r3, [r7, #12]
 800557c:	2221      	movs	r2, #33	@ 0x21
 800557e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8005582:	68fb      	ldr	r3, [r7, #12]
 8005584:	2210      	movs	r2, #16
 8005586:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	2200      	movs	r2, #0
 800558e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	687a      	ldr	r2, [r7, #4]
 8005594:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	893a      	ldrh	r2, [r7, #8]
 800559a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80055a0:	b29a      	uxth	r2, r3
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	4a50      	ldr	r2, [pc, #320]	@ (80056ec <HAL_I2C_Master_Transmit+0x1f8>)
 80055aa:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80055ac:	8979      	ldrh	r1, [r7, #10]
 80055ae:	697b      	ldr	r3, [r7, #20]
 80055b0:	6a3a      	ldr	r2, [r7, #32]
 80055b2:	68f8      	ldr	r0, [r7, #12]
 80055b4:	f000 fcf6 	bl	8005fa4 <I2C_MasterRequestWrite>
 80055b8:	4603      	mov	r3, r0
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d001      	beq.n	80055c2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80055be:	2301      	movs	r3, #1
 80055c0:	e08d      	b.n	80056de <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80055c2:	2300      	movs	r3, #0
 80055c4:	613b      	str	r3, [r7, #16]
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	695b      	ldr	r3, [r3, #20]
 80055cc:	613b      	str	r3, [r7, #16]
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	699b      	ldr	r3, [r3, #24]
 80055d4:	613b      	str	r3, [r7, #16]
 80055d6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80055d8:	e066      	b.n	80056a8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80055da:	697a      	ldr	r2, [r7, #20]
 80055dc:	6a39      	ldr	r1, [r7, #32]
 80055de:	68f8      	ldr	r0, [r7, #12]
 80055e0:	f000 fffa 	bl	80065d8 <I2C_WaitOnTXEFlagUntilTimeout>
 80055e4:	4603      	mov	r3, r0
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d00d      	beq.n	8005606 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055ee:	2b04      	cmp	r3, #4
 80055f0:	d107      	bne.n	8005602 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	681a      	ldr	r2, [r3, #0]
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005600:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8005602:	2301      	movs	r3, #1
 8005604:	e06b      	b.n	80056de <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005606:	68fb      	ldr	r3, [r7, #12]
 8005608:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800560a:	781a      	ldrb	r2, [r3, #0]
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005616:	1c5a      	adds	r2, r3, #1
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005620:	b29b      	uxth	r3, r3
 8005622:	3b01      	subs	r3, #1
 8005624:	b29a      	uxth	r2, r3
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800562a:	68fb      	ldr	r3, [r7, #12]
 800562c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800562e:	3b01      	subs	r3, #1
 8005630:	b29a      	uxth	r2, r3
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	695b      	ldr	r3, [r3, #20]
 800563c:	f003 0304 	and.w	r3, r3, #4
 8005640:	2b04      	cmp	r3, #4
 8005642:	d11b      	bne.n	800567c <HAL_I2C_Master_Transmit+0x188>
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005648:	2b00      	cmp	r3, #0
 800564a:	d017      	beq.n	800567c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 800564c:	68fb      	ldr	r3, [r7, #12]
 800564e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005650:	781a      	ldrb	r2, [r3, #0]
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005658:	68fb      	ldr	r3, [r7, #12]
 800565a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800565c:	1c5a      	adds	r2, r3, #1
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005666:	b29b      	uxth	r3, r3
 8005668:	3b01      	subs	r3, #1
 800566a:	b29a      	uxth	r2, r3
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005674:	3b01      	subs	r3, #1
 8005676:	b29a      	uxth	r2, r3
 8005678:	68fb      	ldr	r3, [r7, #12]
 800567a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800567c:	697a      	ldr	r2, [r7, #20]
 800567e:	6a39      	ldr	r1, [r7, #32]
 8005680:	68f8      	ldr	r0, [r7, #12]
 8005682:	f000 fff1 	bl	8006668 <I2C_WaitOnBTFFlagUntilTimeout>
 8005686:	4603      	mov	r3, r0
 8005688:	2b00      	cmp	r3, #0
 800568a:	d00d      	beq.n	80056a8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005690:	2b04      	cmp	r3, #4
 8005692:	d107      	bne.n	80056a4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	681a      	ldr	r2, [r3, #0]
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80056a2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80056a4:	2301      	movs	r3, #1
 80056a6:	e01a      	b.n	80056de <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d194      	bne.n	80055da <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	681a      	ldr	r2, [r3, #0]
 80056b6:	68fb      	ldr	r3, [r7, #12]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80056be:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	2220      	movs	r2, #32
 80056c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	2200      	movs	r2, #0
 80056cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	2200      	movs	r2, #0
 80056d4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80056d8:	2300      	movs	r3, #0
 80056da:	e000      	b.n	80056de <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80056dc:	2302      	movs	r3, #2
  }
}
 80056de:	4618      	mov	r0, r3
 80056e0:	3718      	adds	r7, #24
 80056e2:	46bd      	mov	sp, r7
 80056e4:	bd80      	pop	{r7, pc}
 80056e6:	bf00      	nop
 80056e8:	00100002 	.word	0x00100002
 80056ec:	ffff0000 	.word	0xffff0000

080056f0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b088      	sub	sp, #32
 80056f4:	af02      	add	r7, sp, #8
 80056f6:	60f8      	str	r0, [r7, #12]
 80056f8:	4608      	mov	r0, r1
 80056fa:	4611      	mov	r1, r2
 80056fc:	461a      	mov	r2, r3
 80056fe:	4603      	mov	r3, r0
 8005700:	817b      	strh	r3, [r7, #10]
 8005702:	460b      	mov	r3, r1
 8005704:	813b      	strh	r3, [r7, #8]
 8005706:	4613      	mov	r3, r2
 8005708:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800570a:	f7ff fab1 	bl	8004c70 <HAL_GetTick>
 800570e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005716:	b2db      	uxtb	r3, r3
 8005718:	2b20      	cmp	r3, #32
 800571a:	f040 80d9 	bne.w	80058d0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800571e:	697b      	ldr	r3, [r7, #20]
 8005720:	9300      	str	r3, [sp, #0]
 8005722:	2319      	movs	r3, #25
 8005724:	2201      	movs	r2, #1
 8005726:	496d      	ldr	r1, [pc, #436]	@ (80058dc <HAL_I2C_Mem_Write+0x1ec>)
 8005728:	68f8      	ldr	r0, [r7, #12]
 800572a:	f000 fe3b 	bl	80063a4 <I2C_WaitOnFlagUntilTimeout>
 800572e:	4603      	mov	r3, r0
 8005730:	2b00      	cmp	r3, #0
 8005732:	d001      	beq.n	8005738 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8005734:	2302      	movs	r3, #2
 8005736:	e0cc      	b.n	80058d2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800573e:	2b01      	cmp	r3, #1
 8005740:	d101      	bne.n	8005746 <HAL_I2C_Mem_Write+0x56>
 8005742:	2302      	movs	r3, #2
 8005744:	e0c5      	b.n	80058d2 <HAL_I2C_Mem_Write+0x1e2>
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	2201      	movs	r2, #1
 800574a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800574e:	68fb      	ldr	r3, [r7, #12]
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f003 0301 	and.w	r3, r3, #1
 8005758:	2b01      	cmp	r3, #1
 800575a:	d007      	beq.n	800576c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	681a      	ldr	r2, [r3, #0]
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	f042 0201 	orr.w	r2, r2, #1
 800576a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	681a      	ldr	r2, [r3, #0]
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800577a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	2221      	movs	r2, #33	@ 0x21
 8005780:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	2240      	movs	r2, #64	@ 0x40
 8005788:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	2200      	movs	r2, #0
 8005790:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	6a3a      	ldr	r2, [r7, #32]
 8005796:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8005798:	68fb      	ldr	r3, [r7, #12]
 800579a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800579c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80057a2:	b29a      	uxth	r2, r3
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	4a4d      	ldr	r2, [pc, #308]	@ (80058e0 <HAL_I2C_Mem_Write+0x1f0>)
 80057ac:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80057ae:	88f8      	ldrh	r0, [r7, #6]
 80057b0:	893a      	ldrh	r2, [r7, #8]
 80057b2:	8979      	ldrh	r1, [r7, #10]
 80057b4:	697b      	ldr	r3, [r7, #20]
 80057b6:	9301      	str	r3, [sp, #4]
 80057b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057ba:	9300      	str	r3, [sp, #0]
 80057bc:	4603      	mov	r3, r0
 80057be:	68f8      	ldr	r0, [r7, #12]
 80057c0:	f000 fc72 	bl	80060a8 <I2C_RequestMemoryWrite>
 80057c4:	4603      	mov	r3, r0
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d052      	beq.n	8005870 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80057ca:	2301      	movs	r3, #1
 80057cc:	e081      	b.n	80058d2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80057ce:	697a      	ldr	r2, [r7, #20]
 80057d0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80057d2:	68f8      	ldr	r0, [r7, #12]
 80057d4:	f000 ff00 	bl	80065d8 <I2C_WaitOnTXEFlagUntilTimeout>
 80057d8:	4603      	mov	r3, r0
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d00d      	beq.n	80057fa <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80057e2:	2b04      	cmp	r3, #4
 80057e4:	d107      	bne.n	80057f6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057e6:	68fb      	ldr	r3, [r7, #12]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	681a      	ldr	r2, [r3, #0]
 80057ec:	68fb      	ldr	r3, [r7, #12]
 80057ee:	681b      	ldr	r3, [r3, #0]
 80057f0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80057f4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80057f6:	2301      	movs	r3, #1
 80057f8:	e06b      	b.n	80058d2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057fe:	781a      	ldrb	r2, [r3, #0]
 8005800:	68fb      	ldr	r3, [r7, #12]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005806:	68fb      	ldr	r3, [r7, #12]
 8005808:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800580a:	1c5a      	adds	r2, r3, #1
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005814:	3b01      	subs	r3, #1
 8005816:	b29a      	uxth	r2, r3
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005820:	b29b      	uxth	r3, r3
 8005822:	3b01      	subs	r3, #1
 8005824:	b29a      	uxth	r2, r3
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	695b      	ldr	r3, [r3, #20]
 8005830:	f003 0304 	and.w	r3, r3, #4
 8005834:	2b04      	cmp	r3, #4
 8005836:	d11b      	bne.n	8005870 <HAL_I2C_Mem_Write+0x180>
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800583c:	2b00      	cmp	r3, #0
 800583e:	d017      	beq.n	8005870 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005844:	781a      	ldrb	r2, [r3, #0]
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005850:	1c5a      	adds	r2, r3, #1
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800585a:	3b01      	subs	r3, #1
 800585c:	b29a      	uxth	r2, r3
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005866:	b29b      	uxth	r3, r3
 8005868:	3b01      	subs	r3, #1
 800586a:	b29a      	uxth	r2, r3
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005870:	68fb      	ldr	r3, [r7, #12]
 8005872:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005874:	2b00      	cmp	r3, #0
 8005876:	d1aa      	bne.n	80057ce <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005878:	697a      	ldr	r2, [r7, #20]
 800587a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800587c:	68f8      	ldr	r0, [r7, #12]
 800587e:	f000 fef3 	bl	8006668 <I2C_WaitOnBTFFlagUntilTimeout>
 8005882:	4603      	mov	r3, r0
 8005884:	2b00      	cmp	r3, #0
 8005886:	d00d      	beq.n	80058a4 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8005888:	68fb      	ldr	r3, [r7, #12]
 800588a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800588c:	2b04      	cmp	r3, #4
 800588e:	d107      	bne.n	80058a0 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	681a      	ldr	r2, [r3, #0]
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800589e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80058a0:	2301      	movs	r3, #1
 80058a2:	e016      	b.n	80058d2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80058a4:	68fb      	ldr	r3, [r7, #12]
 80058a6:	681b      	ldr	r3, [r3, #0]
 80058a8:	681a      	ldr	r2, [r3, #0]
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80058b2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	2220      	movs	r2, #32
 80058b8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	2200      	movs	r2, #0
 80058c0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	2200      	movs	r2, #0
 80058c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80058cc:	2300      	movs	r3, #0
 80058ce:	e000      	b.n	80058d2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80058d0:	2302      	movs	r3, #2
  }
}
 80058d2:	4618      	mov	r0, r3
 80058d4:	3718      	adds	r7, #24
 80058d6:	46bd      	mov	sp, r7
 80058d8:	bd80      	pop	{r7, pc}
 80058da:	bf00      	nop
 80058dc:	00100002 	.word	0x00100002
 80058e0:	ffff0000 	.word	0xffff0000

080058e4 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b08c      	sub	sp, #48	@ 0x30
 80058e8:	af02      	add	r7, sp, #8
 80058ea:	60f8      	str	r0, [r7, #12]
 80058ec:	4608      	mov	r0, r1
 80058ee:	4611      	mov	r1, r2
 80058f0:	461a      	mov	r2, r3
 80058f2:	4603      	mov	r3, r0
 80058f4:	817b      	strh	r3, [r7, #10]
 80058f6:	460b      	mov	r3, r1
 80058f8:	813b      	strh	r3, [r7, #8]
 80058fa:	4613      	mov	r3, r2
 80058fc:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80058fe:	f7ff f9b7 	bl	8004c70 <HAL_GetTick>
 8005902:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005904:	68fb      	ldr	r3, [r7, #12]
 8005906:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800590a:	b2db      	uxtb	r3, r3
 800590c:	2b20      	cmp	r3, #32
 800590e:	f040 8214 	bne.w	8005d3a <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005912:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005914:	9300      	str	r3, [sp, #0]
 8005916:	2319      	movs	r3, #25
 8005918:	2201      	movs	r2, #1
 800591a:	497b      	ldr	r1, [pc, #492]	@ (8005b08 <HAL_I2C_Mem_Read+0x224>)
 800591c:	68f8      	ldr	r0, [r7, #12]
 800591e:	f000 fd41 	bl	80063a4 <I2C_WaitOnFlagUntilTimeout>
 8005922:	4603      	mov	r3, r0
 8005924:	2b00      	cmp	r3, #0
 8005926:	d001      	beq.n	800592c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005928:	2302      	movs	r3, #2
 800592a:	e207      	b.n	8005d3c <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005932:	2b01      	cmp	r3, #1
 8005934:	d101      	bne.n	800593a <HAL_I2C_Mem_Read+0x56>
 8005936:	2302      	movs	r3, #2
 8005938:	e200      	b.n	8005d3c <HAL_I2C_Mem_Read+0x458>
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	2201      	movs	r2, #1
 800593e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	f003 0301 	and.w	r3, r3, #1
 800594c:	2b01      	cmp	r3, #1
 800594e:	d007      	beq.n	8005960 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005950:	68fb      	ldr	r3, [r7, #12]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	681a      	ldr	r2, [r3, #0]
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	f042 0201 	orr.w	r2, r2, #1
 800595e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	681a      	ldr	r2, [r3, #0]
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800596e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	2222      	movs	r2, #34	@ 0x22
 8005974:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005978:	68fb      	ldr	r3, [r7, #12]
 800597a:	2240      	movs	r2, #64	@ 0x40
 800597c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	2200      	movs	r2, #0
 8005984:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800598a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8005990:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005996:	b29a      	uxth	r2, r3
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	4a5b      	ldr	r2, [pc, #364]	@ (8005b0c <HAL_I2C_Mem_Read+0x228>)
 80059a0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80059a2:	88f8      	ldrh	r0, [r7, #6]
 80059a4:	893a      	ldrh	r2, [r7, #8]
 80059a6:	8979      	ldrh	r1, [r7, #10]
 80059a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059aa:	9301      	str	r3, [sp, #4]
 80059ac:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059ae:	9300      	str	r3, [sp, #0]
 80059b0:	4603      	mov	r3, r0
 80059b2:	68f8      	ldr	r0, [r7, #12]
 80059b4:	f000 fc0e 	bl	80061d4 <I2C_RequestMemoryRead>
 80059b8:	4603      	mov	r3, r0
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d001      	beq.n	80059c2 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80059be:	2301      	movs	r3, #1
 80059c0:	e1bc      	b.n	8005d3c <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80059c2:	68fb      	ldr	r3, [r7, #12]
 80059c4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d113      	bne.n	80059f2 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80059ca:	2300      	movs	r3, #0
 80059cc:	623b      	str	r3, [r7, #32]
 80059ce:	68fb      	ldr	r3, [r7, #12]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	695b      	ldr	r3, [r3, #20]
 80059d4:	623b      	str	r3, [r7, #32]
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	699b      	ldr	r3, [r3, #24]
 80059dc:	623b      	str	r3, [r7, #32]
 80059de:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	681a      	ldr	r2, [r3, #0]
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80059ee:	601a      	str	r2, [r3, #0]
 80059f0:	e190      	b.n	8005d14 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80059f6:	2b01      	cmp	r3, #1
 80059f8:	d11b      	bne.n	8005a32 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	681a      	ldr	r2, [r3, #0]
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	681b      	ldr	r3, [r3, #0]
 8005a04:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005a08:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	61fb      	str	r3, [r7, #28]
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	695b      	ldr	r3, [r3, #20]
 8005a14:	61fb      	str	r3, [r7, #28]
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	699b      	ldr	r3, [r3, #24]
 8005a1c:	61fb      	str	r3, [r7, #28]
 8005a1e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	681a      	ldr	r2, [r3, #0]
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005a2e:	601a      	str	r2, [r3, #0]
 8005a30:	e170      	b.n	8005d14 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a36:	2b02      	cmp	r3, #2
 8005a38:	d11b      	bne.n	8005a72 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	681b      	ldr	r3, [r3, #0]
 8005a3e:	681a      	ldr	r2, [r3, #0]
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	681b      	ldr	r3, [r3, #0]
 8005a44:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005a48:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005a4a:	68fb      	ldr	r3, [r7, #12]
 8005a4c:	681b      	ldr	r3, [r3, #0]
 8005a4e:	681a      	ldr	r2, [r3, #0]
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005a58:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a5a:	2300      	movs	r3, #0
 8005a5c:	61bb      	str	r3, [r7, #24]
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	695b      	ldr	r3, [r3, #20]
 8005a64:	61bb      	str	r3, [r7, #24]
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	699b      	ldr	r3, [r3, #24]
 8005a6c:	61bb      	str	r3, [r7, #24]
 8005a6e:	69bb      	ldr	r3, [r7, #24]
 8005a70:	e150      	b.n	8005d14 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a72:	2300      	movs	r3, #0
 8005a74:	617b      	str	r3, [r7, #20]
 8005a76:	68fb      	ldr	r3, [r7, #12]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	695b      	ldr	r3, [r3, #20]
 8005a7c:	617b      	str	r3, [r7, #20]
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	699b      	ldr	r3, [r3, #24]
 8005a84:	617b      	str	r3, [r7, #20]
 8005a86:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8005a88:	e144      	b.n	8005d14 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8005a8a:	68fb      	ldr	r3, [r7, #12]
 8005a8c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a8e:	2b03      	cmp	r3, #3
 8005a90:	f200 80f1 	bhi.w	8005c76 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005a98:	2b01      	cmp	r3, #1
 8005a9a:	d123      	bne.n	8005ae4 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005a9c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005a9e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005aa0:	68f8      	ldr	r0, [r7, #12]
 8005aa2:	f000 fe29 	bl	80066f8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005aa6:	4603      	mov	r3, r0
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d001      	beq.n	8005ab0 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8005aac:	2301      	movs	r3, #1
 8005aae:	e145      	b.n	8005d3c <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	691a      	ldr	r2, [r3, #16]
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005aba:	b2d2      	uxtb	r2, r2
 8005abc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ac2:	1c5a      	adds	r2, r3, #1
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005acc:	3b01      	subs	r3, #1
 8005ace:	b29a      	uxth	r2, r3
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005ad8:	b29b      	uxth	r3, r3
 8005ada:	3b01      	subs	r3, #1
 8005adc:	b29a      	uxth	r2, r3
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005ae2:	e117      	b.n	8005d14 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ae8:	2b02      	cmp	r3, #2
 8005aea:	d14e      	bne.n	8005b8a <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005aec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005aee:	9300      	str	r3, [sp, #0]
 8005af0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005af2:	2200      	movs	r2, #0
 8005af4:	4906      	ldr	r1, [pc, #24]	@ (8005b10 <HAL_I2C_Mem_Read+0x22c>)
 8005af6:	68f8      	ldr	r0, [r7, #12]
 8005af8:	f000 fc54 	bl	80063a4 <I2C_WaitOnFlagUntilTimeout>
 8005afc:	4603      	mov	r3, r0
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d008      	beq.n	8005b14 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8005b02:	2301      	movs	r3, #1
 8005b04:	e11a      	b.n	8005d3c <HAL_I2C_Mem_Read+0x458>
 8005b06:	bf00      	nop
 8005b08:	00100002 	.word	0x00100002
 8005b0c:	ffff0000 	.word	0xffff0000
 8005b10:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	681a      	ldr	r2, [r3, #0]
 8005b1a:	68fb      	ldr	r3, [r7, #12]
 8005b1c:	681b      	ldr	r3, [r3, #0]
 8005b1e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005b22:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b24:	68fb      	ldr	r3, [r7, #12]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	691a      	ldr	r2, [r3, #16]
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b2e:	b2d2      	uxtb	r2, r2
 8005b30:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b36:	1c5a      	adds	r2, r3, #1
 8005b38:	68fb      	ldr	r3, [r7, #12]
 8005b3a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b40:	3b01      	subs	r3, #1
 8005b42:	b29a      	uxth	r2, r3
 8005b44:	68fb      	ldr	r3, [r7, #12]
 8005b46:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b4c:	b29b      	uxth	r3, r3
 8005b4e:	3b01      	subs	r3, #1
 8005b50:	b29a      	uxth	r2, r3
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	691a      	ldr	r2, [r3, #16]
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b60:	b2d2      	uxtb	r2, r2
 8005b62:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005b64:	68fb      	ldr	r3, [r7, #12]
 8005b66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b68:	1c5a      	adds	r2, r3, #1
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005b6e:	68fb      	ldr	r3, [r7, #12]
 8005b70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005b72:	3b01      	subs	r3, #1
 8005b74:	b29a      	uxth	r2, r3
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005b7e:	b29b      	uxth	r3, r3
 8005b80:	3b01      	subs	r3, #1
 8005b82:	b29a      	uxth	r2, r3
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005b88:	e0c4      	b.n	8005d14 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005b8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b8c:	9300      	str	r3, [sp, #0]
 8005b8e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b90:	2200      	movs	r2, #0
 8005b92:	496c      	ldr	r1, [pc, #432]	@ (8005d44 <HAL_I2C_Mem_Read+0x460>)
 8005b94:	68f8      	ldr	r0, [r7, #12]
 8005b96:	f000 fc05 	bl	80063a4 <I2C_WaitOnFlagUntilTimeout>
 8005b9a:	4603      	mov	r3, r0
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d001      	beq.n	8005ba4 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8005ba0:	2301      	movs	r3, #1
 8005ba2:	e0cb      	b.n	8005d3c <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ba4:	68fb      	ldr	r3, [r7, #12]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	681a      	ldr	r2, [r3, #0]
 8005baa:	68fb      	ldr	r3, [r7, #12]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005bb2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005bb4:	68fb      	ldr	r3, [r7, #12]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	691a      	ldr	r2, [r3, #16]
 8005bba:	68fb      	ldr	r3, [r7, #12]
 8005bbc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bbe:	b2d2      	uxtb	r2, r2
 8005bc0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005bc6:	1c5a      	adds	r2, r3, #1
 8005bc8:	68fb      	ldr	r3, [r7, #12]
 8005bca:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005bd0:	3b01      	subs	r3, #1
 8005bd2:	b29a      	uxth	r2, r3
 8005bd4:	68fb      	ldr	r3, [r7, #12]
 8005bd6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005bdc:	b29b      	uxth	r3, r3
 8005bde:	3b01      	subs	r3, #1
 8005be0:	b29a      	uxth	r2, r3
 8005be2:	68fb      	ldr	r3, [r7, #12]
 8005be4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005be6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005be8:	9300      	str	r3, [sp, #0]
 8005bea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bec:	2200      	movs	r2, #0
 8005bee:	4955      	ldr	r1, [pc, #340]	@ (8005d44 <HAL_I2C_Mem_Read+0x460>)
 8005bf0:	68f8      	ldr	r0, [r7, #12]
 8005bf2:	f000 fbd7 	bl	80063a4 <I2C_WaitOnFlagUntilTimeout>
 8005bf6:	4603      	mov	r3, r0
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d001      	beq.n	8005c00 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8005bfc:	2301      	movs	r3, #1
 8005bfe:	e09d      	b.n	8005d3c <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	681a      	ldr	r2, [r3, #0]
 8005c06:	68fb      	ldr	r3, [r7, #12]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005c0e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	691a      	ldr	r2, [r3, #16]
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c1a:	b2d2      	uxtb	r2, r2
 8005c1c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005c1e:	68fb      	ldr	r3, [r7, #12]
 8005c20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c22:	1c5a      	adds	r2, r3, #1
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005c28:	68fb      	ldr	r3, [r7, #12]
 8005c2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c2c:	3b01      	subs	r3, #1
 8005c2e:	b29a      	uxth	r2, r3
 8005c30:	68fb      	ldr	r3, [r7, #12]
 8005c32:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c38:	b29b      	uxth	r3, r3
 8005c3a:	3b01      	subs	r3, #1
 8005c3c:	b29a      	uxth	r2, r3
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	691a      	ldr	r2, [r3, #16]
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c4c:	b2d2      	uxtb	r2, r2
 8005c4e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005c50:	68fb      	ldr	r3, [r7, #12]
 8005c52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c54:	1c5a      	adds	r2, r3, #1
 8005c56:	68fb      	ldr	r3, [r7, #12]
 8005c58:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005c5e:	3b01      	subs	r3, #1
 8005c60:	b29a      	uxth	r2, r3
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005c6a:	b29b      	uxth	r3, r3
 8005c6c:	3b01      	subs	r3, #1
 8005c6e:	b29a      	uxth	r2, r3
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8005c74:	e04e      	b.n	8005d14 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8005c76:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005c78:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8005c7a:	68f8      	ldr	r0, [r7, #12]
 8005c7c:	f000 fd3c 	bl	80066f8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005c80:	4603      	mov	r3, r0
 8005c82:	2b00      	cmp	r3, #0
 8005c84:	d001      	beq.n	8005c8a <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8005c86:	2301      	movs	r3, #1
 8005c88:	e058      	b.n	8005d3c <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	691a      	ldr	r2, [r3, #16]
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c94:	b2d2      	uxtb	r2, r2
 8005c96:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8005c98:	68fb      	ldr	r3, [r7, #12]
 8005c9a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c9c:	1c5a      	adds	r2, r3, #1
 8005c9e:	68fb      	ldr	r3, [r7, #12]
 8005ca0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005ca6:	3b01      	subs	r3, #1
 8005ca8:	b29a      	uxth	r2, r3
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005cb2:	b29b      	uxth	r3, r3
 8005cb4:	3b01      	subs	r3, #1
 8005cb6:	b29a      	uxth	r2, r3
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	695b      	ldr	r3, [r3, #20]
 8005cc2:	f003 0304 	and.w	r3, r3, #4
 8005cc6:	2b04      	cmp	r3, #4
 8005cc8:	d124      	bne.n	8005d14 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005cce:	2b03      	cmp	r3, #3
 8005cd0:	d107      	bne.n	8005ce2 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	681b      	ldr	r3, [r3, #0]
 8005cd6:	681a      	ldr	r2, [r3, #0]
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	681b      	ldr	r3, [r3, #0]
 8005cdc:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005ce0:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	691a      	ldr	r2, [r3, #16]
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cec:	b2d2      	uxtb	r2, r2
 8005cee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cf4:	1c5a      	adds	r2, r3, #1
 8005cf6:	68fb      	ldr	r3, [r7, #12]
 8005cf8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005cfe:	3b01      	subs	r3, #1
 8005d00:	b29a      	uxth	r2, r3
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8005d0a:	b29b      	uxth	r3, r3
 8005d0c:	3b01      	subs	r3, #1
 8005d0e:	b29a      	uxth	r2, r3
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	f47f aeb6 	bne.w	8005a8a <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	2220      	movs	r2, #32
 8005d22:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	2200      	movs	r2, #0
 8005d2a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005d2e:	68fb      	ldr	r3, [r7, #12]
 8005d30:	2200      	movs	r2, #0
 8005d32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8005d36:	2300      	movs	r3, #0
 8005d38:	e000      	b.n	8005d3c <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8005d3a:	2302      	movs	r3, #2
  }
}
 8005d3c:	4618      	mov	r0, r3
 8005d3e:	3728      	adds	r7, #40	@ 0x28
 8005d40:	46bd      	mov	sp, r7
 8005d42:	bd80      	pop	{r7, pc}
 8005d44:	00010004 	.word	0x00010004

08005d48 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b08a      	sub	sp, #40	@ 0x28
 8005d4c:	af02      	add	r7, sp, #8
 8005d4e:	60f8      	str	r0, [r7, #12]
 8005d50:	607a      	str	r2, [r7, #4]
 8005d52:	603b      	str	r3, [r7, #0]
 8005d54:	460b      	mov	r3, r1
 8005d56:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8005d58:	f7fe ff8a 	bl	8004c70 <HAL_GetTick>
 8005d5c:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8005d5e:	2300      	movs	r3, #0
 8005d60:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005d68:	b2db      	uxtb	r3, r3
 8005d6a:	2b20      	cmp	r3, #32
 8005d6c:	f040 8111 	bne.w	8005f92 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005d70:	69fb      	ldr	r3, [r7, #28]
 8005d72:	9300      	str	r3, [sp, #0]
 8005d74:	2319      	movs	r3, #25
 8005d76:	2201      	movs	r2, #1
 8005d78:	4988      	ldr	r1, [pc, #544]	@ (8005f9c <HAL_I2C_IsDeviceReady+0x254>)
 8005d7a:	68f8      	ldr	r0, [r7, #12]
 8005d7c:	f000 fb12 	bl	80063a4 <I2C_WaitOnFlagUntilTimeout>
 8005d80:	4603      	mov	r3, r0
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d001      	beq.n	8005d8a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8005d86:	2302      	movs	r3, #2
 8005d88:	e104      	b.n	8005f94 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005d8a:	68fb      	ldr	r3, [r7, #12]
 8005d8c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005d90:	2b01      	cmp	r3, #1
 8005d92:	d101      	bne.n	8005d98 <HAL_I2C_IsDeviceReady+0x50>
 8005d94:	2302      	movs	r3, #2
 8005d96:	e0fd      	b.n	8005f94 <HAL_I2C_IsDeviceReady+0x24c>
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	2201      	movs	r2, #1
 8005d9c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8005da0:	68fb      	ldr	r3, [r7, #12]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	681b      	ldr	r3, [r3, #0]
 8005da6:	f003 0301 	and.w	r3, r3, #1
 8005daa:	2b01      	cmp	r3, #1
 8005dac:	d007      	beq.n	8005dbe <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	681a      	ldr	r2, [r3, #0]
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	f042 0201 	orr.w	r2, r2, #1
 8005dbc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005dbe:	68fb      	ldr	r3, [r7, #12]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	681a      	ldr	r2, [r3, #0]
 8005dc4:	68fb      	ldr	r3, [r7, #12]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005dcc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	2224      	movs	r2, #36	@ 0x24
 8005dd2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	2200      	movs	r2, #0
 8005dda:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005ddc:	68fb      	ldr	r3, [r7, #12]
 8005dde:	4a70      	ldr	r2, [pc, #448]	@ (8005fa0 <HAL_I2C_IsDeviceReady+0x258>)
 8005de0:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	681a      	ldr	r2, [r3, #0]
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	681b      	ldr	r3, [r3, #0]
 8005dec:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005df0:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8005df2:	69fb      	ldr	r3, [r7, #28]
 8005df4:	9300      	str	r3, [sp, #0]
 8005df6:	683b      	ldr	r3, [r7, #0]
 8005df8:	2200      	movs	r2, #0
 8005dfa:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8005dfe:	68f8      	ldr	r0, [r7, #12]
 8005e00:	f000 fad0 	bl	80063a4 <I2C_WaitOnFlagUntilTimeout>
 8005e04:	4603      	mov	r3, r0
 8005e06:	2b00      	cmp	r3, #0
 8005e08:	d00d      	beq.n	8005e26 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005e14:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005e18:	d103      	bne.n	8005e22 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8005e20:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8005e22:	2303      	movs	r3, #3
 8005e24:	e0b6      	b.n	8005f94 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8005e26:	897b      	ldrh	r3, [r7, #10]
 8005e28:	b2db      	uxtb	r3, r3
 8005e2a:	461a      	mov	r2, r3
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	681b      	ldr	r3, [r3, #0]
 8005e30:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8005e34:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8005e36:	f7fe ff1b 	bl	8004c70 <HAL_GetTick>
 8005e3a:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	695b      	ldr	r3, [r3, #20]
 8005e42:	f003 0302 	and.w	r3, r3, #2
 8005e46:	2b02      	cmp	r3, #2
 8005e48:	bf0c      	ite	eq
 8005e4a:	2301      	moveq	r3, #1
 8005e4c:	2300      	movne	r3, #0
 8005e4e:	b2db      	uxtb	r3, r3
 8005e50:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	695b      	ldr	r3, [r3, #20]
 8005e58:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005e5c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005e60:	bf0c      	ite	eq
 8005e62:	2301      	moveq	r3, #1
 8005e64:	2300      	movne	r3, #0
 8005e66:	b2db      	uxtb	r3, r3
 8005e68:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8005e6a:	e025      	b.n	8005eb8 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8005e6c:	f7fe ff00 	bl	8004c70 <HAL_GetTick>
 8005e70:	4602      	mov	r2, r0
 8005e72:	69fb      	ldr	r3, [r7, #28]
 8005e74:	1ad3      	subs	r3, r2, r3
 8005e76:	683a      	ldr	r2, [r7, #0]
 8005e78:	429a      	cmp	r2, r3
 8005e7a:	d302      	bcc.n	8005e82 <HAL_I2C_IsDeviceReady+0x13a>
 8005e7c:	683b      	ldr	r3, [r7, #0]
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d103      	bne.n	8005e8a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	22a0      	movs	r2, #160	@ 0xa0
 8005e86:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8005e8a:	68fb      	ldr	r3, [r7, #12]
 8005e8c:	681b      	ldr	r3, [r3, #0]
 8005e8e:	695b      	ldr	r3, [r3, #20]
 8005e90:	f003 0302 	and.w	r3, r3, #2
 8005e94:	2b02      	cmp	r3, #2
 8005e96:	bf0c      	ite	eq
 8005e98:	2301      	moveq	r3, #1
 8005e9a:	2300      	movne	r3, #0
 8005e9c:	b2db      	uxtb	r3, r3
 8005e9e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	681b      	ldr	r3, [r3, #0]
 8005ea4:	695b      	ldr	r3, [r3, #20]
 8005ea6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005eaa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005eae:	bf0c      	ite	eq
 8005eb0:	2301      	moveq	r3, #1
 8005eb2:	2300      	movne	r3, #0
 8005eb4:	b2db      	uxtb	r3, r3
 8005eb6:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8005ebe:	b2db      	uxtb	r3, r3
 8005ec0:	2ba0      	cmp	r3, #160	@ 0xa0
 8005ec2:	d005      	beq.n	8005ed0 <HAL_I2C_IsDeviceReady+0x188>
 8005ec4:	7dfb      	ldrb	r3, [r7, #23]
 8005ec6:	2b00      	cmp	r3, #0
 8005ec8:	d102      	bne.n	8005ed0 <HAL_I2C_IsDeviceReady+0x188>
 8005eca:	7dbb      	ldrb	r3, [r7, #22]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d0cd      	beq.n	8005e6c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	2220      	movs	r2, #32
 8005ed4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	695b      	ldr	r3, [r3, #20]
 8005ede:	f003 0302 	and.w	r3, r3, #2
 8005ee2:	2b02      	cmp	r3, #2
 8005ee4:	d129      	bne.n	8005f3a <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	681a      	ldr	r2, [r3, #0]
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005ef4:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005ef6:	2300      	movs	r3, #0
 8005ef8:	613b      	str	r3, [r7, #16]
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	681b      	ldr	r3, [r3, #0]
 8005efe:	695b      	ldr	r3, [r3, #20]
 8005f00:	613b      	str	r3, [r7, #16]
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	699b      	ldr	r3, [r3, #24]
 8005f08:	613b      	str	r3, [r7, #16]
 8005f0a:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005f0c:	69fb      	ldr	r3, [r7, #28]
 8005f0e:	9300      	str	r3, [sp, #0]
 8005f10:	2319      	movs	r3, #25
 8005f12:	2201      	movs	r2, #1
 8005f14:	4921      	ldr	r1, [pc, #132]	@ (8005f9c <HAL_I2C_IsDeviceReady+0x254>)
 8005f16:	68f8      	ldr	r0, [r7, #12]
 8005f18:	f000 fa44 	bl	80063a4 <I2C_WaitOnFlagUntilTimeout>
 8005f1c:	4603      	mov	r3, r0
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d001      	beq.n	8005f26 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8005f22:	2301      	movs	r3, #1
 8005f24:	e036      	b.n	8005f94 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	2220      	movs	r2, #32
 8005f2a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005f2e:	68fb      	ldr	r3, [r7, #12]
 8005f30:	2200      	movs	r2, #0
 8005f32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8005f36:	2300      	movs	r3, #0
 8005f38:	e02c      	b.n	8005f94 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	681a      	ldr	r2, [r3, #0]
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8005f48:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005f4a:	68fb      	ldr	r3, [r7, #12]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005f52:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8005f54:	69fb      	ldr	r3, [r7, #28]
 8005f56:	9300      	str	r3, [sp, #0]
 8005f58:	2319      	movs	r3, #25
 8005f5a:	2201      	movs	r2, #1
 8005f5c:	490f      	ldr	r1, [pc, #60]	@ (8005f9c <HAL_I2C_IsDeviceReady+0x254>)
 8005f5e:	68f8      	ldr	r0, [r7, #12]
 8005f60:	f000 fa20 	bl	80063a4 <I2C_WaitOnFlagUntilTimeout>
 8005f64:	4603      	mov	r3, r0
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d001      	beq.n	8005f6e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8005f6a:	2301      	movs	r3, #1
 8005f6c:	e012      	b.n	8005f94 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8005f6e:	69bb      	ldr	r3, [r7, #24]
 8005f70:	3301      	adds	r3, #1
 8005f72:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8005f74:	69ba      	ldr	r2, [r7, #24]
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	429a      	cmp	r2, r3
 8005f7a:	f4ff af32 	bcc.w	8005de2 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	2220      	movs	r2, #32
 8005f82:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	2200      	movs	r2, #0
 8005f8a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005f8e:	2301      	movs	r3, #1
 8005f90:	e000      	b.n	8005f94 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8005f92:	2302      	movs	r3, #2
  }
}
 8005f94:	4618      	mov	r0, r3
 8005f96:	3720      	adds	r7, #32
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	bd80      	pop	{r7, pc}
 8005f9c:	00100002 	.word	0x00100002
 8005fa0:	ffff0000 	.word	0xffff0000

08005fa4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8005fa4:	b580      	push	{r7, lr}
 8005fa6:	b088      	sub	sp, #32
 8005fa8:	af02      	add	r7, sp, #8
 8005faa:	60f8      	str	r0, [r7, #12]
 8005fac:	607a      	str	r2, [r7, #4]
 8005fae:	603b      	str	r3, [r7, #0]
 8005fb0:	460b      	mov	r3, r1
 8005fb2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005fb4:	68fb      	ldr	r3, [r7, #12]
 8005fb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fb8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8005fba:	697b      	ldr	r3, [r7, #20]
 8005fbc:	2b08      	cmp	r3, #8
 8005fbe:	d006      	beq.n	8005fce <I2C_MasterRequestWrite+0x2a>
 8005fc0:	697b      	ldr	r3, [r7, #20]
 8005fc2:	2b01      	cmp	r3, #1
 8005fc4:	d003      	beq.n	8005fce <I2C_MasterRequestWrite+0x2a>
 8005fc6:	697b      	ldr	r3, [r7, #20]
 8005fc8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8005fcc:	d108      	bne.n	8005fe0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	681a      	ldr	r2, [r3, #0]
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005fdc:	601a      	str	r2, [r3, #0]
 8005fde:	e00b      	b.n	8005ff8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8005fe0:	68fb      	ldr	r3, [r7, #12]
 8005fe2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005fe4:	2b12      	cmp	r3, #18
 8005fe6:	d107      	bne.n	8005ff8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	681a      	ldr	r2, [r3, #0]
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005ff6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005ff8:	683b      	ldr	r3, [r7, #0]
 8005ffa:	9300      	str	r3, [sp, #0]
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	2200      	movs	r2, #0
 8006000:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006004:	68f8      	ldr	r0, [r7, #12]
 8006006:	f000 f9cd 	bl	80063a4 <I2C_WaitOnFlagUntilTimeout>
 800600a:	4603      	mov	r3, r0
 800600c:	2b00      	cmp	r3, #0
 800600e:	d00d      	beq.n	800602c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800601a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800601e:	d103      	bne.n	8006028 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006026:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006028:	2303      	movs	r3, #3
 800602a:	e035      	b.n	8006098 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	691b      	ldr	r3, [r3, #16]
 8006030:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006034:	d108      	bne.n	8006048 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006036:	897b      	ldrh	r3, [r7, #10]
 8006038:	b2db      	uxtb	r3, r3
 800603a:	461a      	mov	r2, r3
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006044:	611a      	str	r2, [r3, #16]
 8006046:	e01b      	b.n	8006080 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8006048:	897b      	ldrh	r3, [r7, #10]
 800604a:	11db      	asrs	r3, r3, #7
 800604c:	b2db      	uxtb	r3, r3
 800604e:	f003 0306 	and.w	r3, r3, #6
 8006052:	b2db      	uxtb	r3, r3
 8006054:	f063 030f 	orn	r3, r3, #15
 8006058:	b2da      	uxtb	r2, r3
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	681b      	ldr	r3, [r3, #0]
 800605e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	687a      	ldr	r2, [r7, #4]
 8006064:	490e      	ldr	r1, [pc, #56]	@ (80060a0 <I2C_MasterRequestWrite+0xfc>)
 8006066:	68f8      	ldr	r0, [r7, #12]
 8006068:	f000 fa16 	bl	8006498 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800606c:	4603      	mov	r3, r0
 800606e:	2b00      	cmp	r3, #0
 8006070:	d001      	beq.n	8006076 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8006072:	2301      	movs	r3, #1
 8006074:	e010      	b.n	8006098 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8006076:	897b      	ldrh	r3, [r7, #10]
 8006078:	b2da      	uxtb	r2, r3
 800607a:	68fb      	ldr	r3, [r7, #12]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	687a      	ldr	r2, [r7, #4]
 8006084:	4907      	ldr	r1, [pc, #28]	@ (80060a4 <I2C_MasterRequestWrite+0x100>)
 8006086:	68f8      	ldr	r0, [r7, #12]
 8006088:	f000 fa06 	bl	8006498 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800608c:	4603      	mov	r3, r0
 800608e:	2b00      	cmp	r3, #0
 8006090:	d001      	beq.n	8006096 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8006092:	2301      	movs	r3, #1
 8006094:	e000      	b.n	8006098 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8006096:	2300      	movs	r3, #0
}
 8006098:	4618      	mov	r0, r3
 800609a:	3718      	adds	r7, #24
 800609c:	46bd      	mov	sp, r7
 800609e:	bd80      	pop	{r7, pc}
 80060a0:	00010008 	.word	0x00010008
 80060a4:	00010002 	.word	0x00010002

080060a8 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80060a8:	b580      	push	{r7, lr}
 80060aa:	b088      	sub	sp, #32
 80060ac:	af02      	add	r7, sp, #8
 80060ae:	60f8      	str	r0, [r7, #12]
 80060b0:	4608      	mov	r0, r1
 80060b2:	4611      	mov	r1, r2
 80060b4:	461a      	mov	r2, r3
 80060b6:	4603      	mov	r3, r0
 80060b8:	817b      	strh	r3, [r7, #10]
 80060ba:	460b      	mov	r3, r1
 80060bc:	813b      	strh	r3, [r7, #8]
 80060be:	4613      	mov	r3, r2
 80060c0:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80060c2:	68fb      	ldr	r3, [r7, #12]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	681a      	ldr	r2, [r3, #0]
 80060c8:	68fb      	ldr	r3, [r7, #12]
 80060ca:	681b      	ldr	r3, [r3, #0]
 80060cc:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80060d0:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80060d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80060d4:	9300      	str	r3, [sp, #0]
 80060d6:	6a3b      	ldr	r3, [r7, #32]
 80060d8:	2200      	movs	r2, #0
 80060da:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80060de:	68f8      	ldr	r0, [r7, #12]
 80060e0:	f000 f960 	bl	80063a4 <I2C_WaitOnFlagUntilTimeout>
 80060e4:	4603      	mov	r3, r0
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d00d      	beq.n	8006106 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80060f4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80060f8:	d103      	bne.n	8006102 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8006100:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8006102:	2303      	movs	r3, #3
 8006104:	e05f      	b.n	80061c6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006106:	897b      	ldrh	r3, [r7, #10]
 8006108:	b2db      	uxtb	r3, r3
 800610a:	461a      	mov	r2, r3
 800610c:	68fb      	ldr	r3, [r7, #12]
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006114:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006116:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006118:	6a3a      	ldr	r2, [r7, #32]
 800611a:	492d      	ldr	r1, [pc, #180]	@ (80061d0 <I2C_RequestMemoryWrite+0x128>)
 800611c:	68f8      	ldr	r0, [r7, #12]
 800611e:	f000 f9bb 	bl	8006498 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8006122:	4603      	mov	r3, r0
 8006124:	2b00      	cmp	r3, #0
 8006126:	d001      	beq.n	800612c <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8006128:	2301      	movs	r3, #1
 800612a:	e04c      	b.n	80061c6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800612c:	2300      	movs	r3, #0
 800612e:	617b      	str	r3, [r7, #20]
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	695b      	ldr	r3, [r3, #20]
 8006136:	617b      	str	r3, [r7, #20]
 8006138:	68fb      	ldr	r3, [r7, #12]
 800613a:	681b      	ldr	r3, [r3, #0]
 800613c:	699b      	ldr	r3, [r3, #24]
 800613e:	617b      	str	r3, [r7, #20]
 8006140:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006142:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006144:	6a39      	ldr	r1, [r7, #32]
 8006146:	68f8      	ldr	r0, [r7, #12]
 8006148:	f000 fa46 	bl	80065d8 <I2C_WaitOnTXEFlagUntilTimeout>
 800614c:	4603      	mov	r3, r0
 800614e:	2b00      	cmp	r3, #0
 8006150:	d00d      	beq.n	800616e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006156:	2b04      	cmp	r3, #4
 8006158:	d107      	bne.n	800616a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	681a      	ldr	r2, [r3, #0]
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006168:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800616a:	2301      	movs	r3, #1
 800616c:	e02b      	b.n	80061c6 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800616e:	88fb      	ldrh	r3, [r7, #6]
 8006170:	2b01      	cmp	r3, #1
 8006172:	d105      	bne.n	8006180 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8006174:	893b      	ldrh	r3, [r7, #8]
 8006176:	b2da      	uxtb	r2, r3
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	611a      	str	r2, [r3, #16]
 800617e:	e021      	b.n	80061c4 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8006180:	893b      	ldrh	r3, [r7, #8]
 8006182:	0a1b      	lsrs	r3, r3, #8
 8006184:	b29b      	uxth	r3, r3
 8006186:	b2da      	uxtb	r2, r3
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800618e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006190:	6a39      	ldr	r1, [r7, #32]
 8006192:	68f8      	ldr	r0, [r7, #12]
 8006194:	f000 fa20 	bl	80065d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8006198:	4603      	mov	r3, r0
 800619a:	2b00      	cmp	r3, #0
 800619c:	d00d      	beq.n	80061ba <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061a2:	2b04      	cmp	r3, #4
 80061a4:	d107      	bne.n	80061b6 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	681a      	ldr	r2, [r3, #0]
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80061b4:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80061b6:	2301      	movs	r3, #1
 80061b8:	e005      	b.n	80061c6 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80061ba:	893b      	ldrh	r3, [r7, #8]
 80061bc:	b2da      	uxtb	r2, r3
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80061c4:	2300      	movs	r3, #0
}
 80061c6:	4618      	mov	r0, r3
 80061c8:	3718      	adds	r7, #24
 80061ca:	46bd      	mov	sp, r7
 80061cc:	bd80      	pop	{r7, pc}
 80061ce:	bf00      	nop
 80061d0:	00010002 	.word	0x00010002

080061d4 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80061d4:	b580      	push	{r7, lr}
 80061d6:	b088      	sub	sp, #32
 80061d8:	af02      	add	r7, sp, #8
 80061da:	60f8      	str	r0, [r7, #12]
 80061dc:	4608      	mov	r0, r1
 80061de:	4611      	mov	r1, r2
 80061e0:	461a      	mov	r2, r3
 80061e2:	4603      	mov	r3, r0
 80061e4:	817b      	strh	r3, [r7, #10]
 80061e6:	460b      	mov	r3, r1
 80061e8:	813b      	strh	r3, [r7, #8]
 80061ea:	4613      	mov	r3, r2
 80061ec:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	681b      	ldr	r3, [r3, #0]
 80061f2:	681a      	ldr	r2, [r3, #0]
 80061f4:	68fb      	ldr	r3, [r7, #12]
 80061f6:	681b      	ldr	r3, [r3, #0]
 80061f8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80061fc:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	681a      	ldr	r2, [r3, #0]
 8006204:	68fb      	ldr	r3, [r7, #12]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800620c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800620e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006210:	9300      	str	r3, [sp, #0]
 8006212:	6a3b      	ldr	r3, [r7, #32]
 8006214:	2200      	movs	r2, #0
 8006216:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800621a:	68f8      	ldr	r0, [r7, #12]
 800621c:	f000 f8c2 	bl	80063a4 <I2C_WaitOnFlagUntilTimeout>
 8006220:	4603      	mov	r3, r0
 8006222:	2b00      	cmp	r3, #0
 8006224:	d00d      	beq.n	8006242 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006226:	68fb      	ldr	r3, [r7, #12]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006230:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006234:	d103      	bne.n	800623e <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800623c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800623e:	2303      	movs	r3, #3
 8006240:	e0aa      	b.n	8006398 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8006242:	897b      	ldrh	r3, [r7, #10]
 8006244:	b2db      	uxtb	r3, r3
 8006246:	461a      	mov	r2, r3
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	681b      	ldr	r3, [r3, #0]
 800624c:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8006250:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006252:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006254:	6a3a      	ldr	r2, [r7, #32]
 8006256:	4952      	ldr	r1, [pc, #328]	@ (80063a0 <I2C_RequestMemoryRead+0x1cc>)
 8006258:	68f8      	ldr	r0, [r7, #12]
 800625a:	f000 f91d 	bl	8006498 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800625e:	4603      	mov	r3, r0
 8006260:	2b00      	cmp	r3, #0
 8006262:	d001      	beq.n	8006268 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8006264:	2301      	movs	r3, #1
 8006266:	e097      	b.n	8006398 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8006268:	2300      	movs	r3, #0
 800626a:	617b      	str	r3, [r7, #20]
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	695b      	ldr	r3, [r3, #20]
 8006272:	617b      	str	r3, [r7, #20]
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	699b      	ldr	r3, [r3, #24]
 800627a:	617b      	str	r3, [r7, #20]
 800627c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800627e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006280:	6a39      	ldr	r1, [r7, #32]
 8006282:	68f8      	ldr	r0, [r7, #12]
 8006284:	f000 f9a8 	bl	80065d8 <I2C_WaitOnTXEFlagUntilTimeout>
 8006288:	4603      	mov	r3, r0
 800628a:	2b00      	cmp	r3, #0
 800628c:	d00d      	beq.n	80062aa <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800628e:	68fb      	ldr	r3, [r7, #12]
 8006290:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006292:	2b04      	cmp	r3, #4
 8006294:	d107      	bne.n	80062a6 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006296:	68fb      	ldr	r3, [r7, #12]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	681a      	ldr	r2, [r3, #0]
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80062a4:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80062a6:	2301      	movs	r3, #1
 80062a8:	e076      	b.n	8006398 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80062aa:	88fb      	ldrh	r3, [r7, #6]
 80062ac:	2b01      	cmp	r3, #1
 80062ae:	d105      	bne.n	80062bc <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80062b0:	893b      	ldrh	r3, [r7, #8]
 80062b2:	b2da      	uxtb	r2, r3
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	611a      	str	r2, [r3, #16]
 80062ba:	e021      	b.n	8006300 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80062bc:	893b      	ldrh	r3, [r7, #8]
 80062be:	0a1b      	lsrs	r3, r3, #8
 80062c0:	b29b      	uxth	r3, r3
 80062c2:	b2da      	uxtb	r2, r3
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	681b      	ldr	r3, [r3, #0]
 80062c8:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80062ca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80062cc:	6a39      	ldr	r1, [r7, #32]
 80062ce:	68f8      	ldr	r0, [r7, #12]
 80062d0:	f000 f982 	bl	80065d8 <I2C_WaitOnTXEFlagUntilTimeout>
 80062d4:	4603      	mov	r3, r0
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d00d      	beq.n	80062f6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80062de:	2b04      	cmp	r3, #4
 80062e0:	d107      	bne.n	80062f2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	681b      	ldr	r3, [r3, #0]
 80062e6:	681a      	ldr	r2, [r3, #0]
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80062f0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80062f2:	2301      	movs	r3, #1
 80062f4:	e050      	b.n	8006398 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80062f6:	893b      	ldrh	r3, [r7, #8]
 80062f8:	b2da      	uxtb	r2, r3
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8006300:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006302:	6a39      	ldr	r1, [r7, #32]
 8006304:	68f8      	ldr	r0, [r7, #12]
 8006306:	f000 f967 	bl	80065d8 <I2C_WaitOnTXEFlagUntilTimeout>
 800630a:	4603      	mov	r3, r0
 800630c:	2b00      	cmp	r3, #0
 800630e:	d00d      	beq.n	800632c <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006314:	2b04      	cmp	r3, #4
 8006316:	d107      	bne.n	8006328 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8006318:	68fb      	ldr	r3, [r7, #12]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	681a      	ldr	r2, [r3, #0]
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8006326:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8006328:	2301      	movs	r3, #1
 800632a:	e035      	b.n	8006398 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	681b      	ldr	r3, [r3, #0]
 8006330:	681a      	ldr	r2, [r3, #0]
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	681b      	ldr	r3, [r3, #0]
 8006336:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800633a:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800633c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800633e:	9300      	str	r3, [sp, #0]
 8006340:	6a3b      	ldr	r3, [r7, #32]
 8006342:	2200      	movs	r2, #0
 8006344:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8006348:	68f8      	ldr	r0, [r7, #12]
 800634a:	f000 f82b 	bl	80063a4 <I2C_WaitOnFlagUntilTimeout>
 800634e:	4603      	mov	r3, r0
 8006350:	2b00      	cmp	r3, #0
 8006352:	d00d      	beq.n	8006370 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	681b      	ldr	r3, [r3, #0]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800635e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006362:	d103      	bne.n	800636c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8006364:	68fb      	ldr	r3, [r7, #12]
 8006366:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800636a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800636c:	2303      	movs	r3, #3
 800636e:	e013      	b.n	8006398 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8006370:	897b      	ldrh	r3, [r7, #10]
 8006372:	b2db      	uxtb	r3, r3
 8006374:	f043 0301 	orr.w	r3, r3, #1
 8006378:	b2da      	uxtb	r2, r3
 800637a:	68fb      	ldr	r3, [r7, #12]
 800637c:	681b      	ldr	r3, [r3, #0]
 800637e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8006380:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006382:	6a3a      	ldr	r2, [r7, #32]
 8006384:	4906      	ldr	r1, [pc, #24]	@ (80063a0 <I2C_RequestMemoryRead+0x1cc>)
 8006386:	68f8      	ldr	r0, [r7, #12]
 8006388:	f000 f886 	bl	8006498 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800638c:	4603      	mov	r3, r0
 800638e:	2b00      	cmp	r3, #0
 8006390:	d001      	beq.n	8006396 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8006392:	2301      	movs	r3, #1
 8006394:	e000      	b.n	8006398 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8006396:	2300      	movs	r3, #0
}
 8006398:	4618      	mov	r0, r3
 800639a:	3718      	adds	r7, #24
 800639c:	46bd      	mov	sp, r7
 800639e:	bd80      	pop	{r7, pc}
 80063a0:	00010002 	.word	0x00010002

080063a4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80063a4:	b580      	push	{r7, lr}
 80063a6:	b084      	sub	sp, #16
 80063a8:	af00      	add	r7, sp, #0
 80063aa:	60f8      	str	r0, [r7, #12]
 80063ac:	60b9      	str	r1, [r7, #8]
 80063ae:	603b      	str	r3, [r7, #0]
 80063b0:	4613      	mov	r3, r2
 80063b2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80063b4:	e048      	b.n	8006448 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80063b6:	683b      	ldr	r3, [r7, #0]
 80063b8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80063bc:	d044      	beq.n	8006448 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80063be:	f7fe fc57 	bl	8004c70 <HAL_GetTick>
 80063c2:	4602      	mov	r2, r0
 80063c4:	69bb      	ldr	r3, [r7, #24]
 80063c6:	1ad3      	subs	r3, r2, r3
 80063c8:	683a      	ldr	r2, [r7, #0]
 80063ca:	429a      	cmp	r2, r3
 80063cc:	d302      	bcc.n	80063d4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80063ce:	683b      	ldr	r3, [r7, #0]
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d139      	bne.n	8006448 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 80063d4:	68bb      	ldr	r3, [r7, #8]
 80063d6:	0c1b      	lsrs	r3, r3, #16
 80063d8:	b2db      	uxtb	r3, r3
 80063da:	2b01      	cmp	r3, #1
 80063dc:	d10d      	bne.n	80063fa <I2C_WaitOnFlagUntilTimeout+0x56>
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	695b      	ldr	r3, [r3, #20]
 80063e4:	43da      	mvns	r2, r3
 80063e6:	68bb      	ldr	r3, [r7, #8]
 80063e8:	4013      	ands	r3, r2
 80063ea:	b29b      	uxth	r3, r3
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	bf0c      	ite	eq
 80063f0:	2301      	moveq	r3, #1
 80063f2:	2300      	movne	r3, #0
 80063f4:	b2db      	uxtb	r3, r3
 80063f6:	461a      	mov	r2, r3
 80063f8:	e00c      	b.n	8006414 <I2C_WaitOnFlagUntilTimeout+0x70>
 80063fa:	68fb      	ldr	r3, [r7, #12]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	699b      	ldr	r3, [r3, #24]
 8006400:	43da      	mvns	r2, r3
 8006402:	68bb      	ldr	r3, [r7, #8]
 8006404:	4013      	ands	r3, r2
 8006406:	b29b      	uxth	r3, r3
 8006408:	2b00      	cmp	r3, #0
 800640a:	bf0c      	ite	eq
 800640c:	2301      	moveq	r3, #1
 800640e:	2300      	movne	r3, #0
 8006410:	b2db      	uxtb	r3, r3
 8006412:	461a      	mov	r2, r3
 8006414:	79fb      	ldrb	r3, [r7, #7]
 8006416:	429a      	cmp	r2, r3
 8006418:	d116      	bne.n	8006448 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	2200      	movs	r2, #0
 800641e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	2220      	movs	r2, #32
 8006424:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8006428:	68fb      	ldr	r3, [r7, #12]
 800642a:	2200      	movs	r2, #0
 800642c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006434:	f043 0220 	orr.w	r2, r3, #32
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800643c:	68fb      	ldr	r3, [r7, #12]
 800643e:	2200      	movs	r2, #0
 8006440:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006444:	2301      	movs	r3, #1
 8006446:	e023      	b.n	8006490 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8006448:	68bb      	ldr	r3, [r7, #8]
 800644a:	0c1b      	lsrs	r3, r3, #16
 800644c:	b2db      	uxtb	r3, r3
 800644e:	2b01      	cmp	r3, #1
 8006450:	d10d      	bne.n	800646e <I2C_WaitOnFlagUntilTimeout+0xca>
 8006452:	68fb      	ldr	r3, [r7, #12]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	695b      	ldr	r3, [r3, #20]
 8006458:	43da      	mvns	r2, r3
 800645a:	68bb      	ldr	r3, [r7, #8]
 800645c:	4013      	ands	r3, r2
 800645e:	b29b      	uxth	r3, r3
 8006460:	2b00      	cmp	r3, #0
 8006462:	bf0c      	ite	eq
 8006464:	2301      	moveq	r3, #1
 8006466:	2300      	movne	r3, #0
 8006468:	b2db      	uxtb	r3, r3
 800646a:	461a      	mov	r2, r3
 800646c:	e00c      	b.n	8006488 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800646e:	68fb      	ldr	r3, [r7, #12]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	699b      	ldr	r3, [r3, #24]
 8006474:	43da      	mvns	r2, r3
 8006476:	68bb      	ldr	r3, [r7, #8]
 8006478:	4013      	ands	r3, r2
 800647a:	b29b      	uxth	r3, r3
 800647c:	2b00      	cmp	r3, #0
 800647e:	bf0c      	ite	eq
 8006480:	2301      	moveq	r3, #1
 8006482:	2300      	movne	r3, #0
 8006484:	b2db      	uxtb	r3, r3
 8006486:	461a      	mov	r2, r3
 8006488:	79fb      	ldrb	r3, [r7, #7]
 800648a:	429a      	cmp	r2, r3
 800648c:	d093      	beq.n	80063b6 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800648e:	2300      	movs	r3, #0
}
 8006490:	4618      	mov	r0, r3
 8006492:	3710      	adds	r7, #16
 8006494:	46bd      	mov	sp, r7
 8006496:	bd80      	pop	{r7, pc}

08006498 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8006498:	b580      	push	{r7, lr}
 800649a:	b084      	sub	sp, #16
 800649c:	af00      	add	r7, sp, #0
 800649e:	60f8      	str	r0, [r7, #12]
 80064a0:	60b9      	str	r1, [r7, #8]
 80064a2:	607a      	str	r2, [r7, #4]
 80064a4:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80064a6:	e071      	b.n	800658c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	695b      	ldr	r3, [r3, #20]
 80064ae:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80064b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80064b6:	d123      	bne.n	8006500 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	681a      	ldr	r2, [r3, #0]
 80064be:	68fb      	ldr	r3, [r7, #12]
 80064c0:	681b      	ldr	r3, [r3, #0]
 80064c2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80064c6:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	681b      	ldr	r3, [r3, #0]
 80064cc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80064d0:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	2200      	movs	r2, #0
 80064d6:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80064d8:	68fb      	ldr	r3, [r7, #12]
 80064da:	2220      	movs	r2, #32
 80064dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80064e0:	68fb      	ldr	r3, [r7, #12]
 80064e2:	2200      	movs	r2, #0
 80064e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80064e8:	68fb      	ldr	r3, [r7, #12]
 80064ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80064ec:	f043 0204 	orr.w	r2, r3, #4
 80064f0:	68fb      	ldr	r3, [r7, #12]
 80064f2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	2200      	movs	r2, #0
 80064f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80064fc:	2301      	movs	r3, #1
 80064fe:	e067      	b.n	80065d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8006506:	d041      	beq.n	800658c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006508:	f7fe fbb2 	bl	8004c70 <HAL_GetTick>
 800650c:	4602      	mov	r2, r0
 800650e:	683b      	ldr	r3, [r7, #0]
 8006510:	1ad3      	subs	r3, r2, r3
 8006512:	687a      	ldr	r2, [r7, #4]
 8006514:	429a      	cmp	r2, r3
 8006516:	d302      	bcc.n	800651e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	2b00      	cmp	r3, #0
 800651c:	d136      	bne.n	800658c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 800651e:	68bb      	ldr	r3, [r7, #8]
 8006520:	0c1b      	lsrs	r3, r3, #16
 8006522:	b2db      	uxtb	r3, r3
 8006524:	2b01      	cmp	r3, #1
 8006526:	d10c      	bne.n	8006542 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8006528:	68fb      	ldr	r3, [r7, #12]
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	695b      	ldr	r3, [r3, #20]
 800652e:	43da      	mvns	r2, r3
 8006530:	68bb      	ldr	r3, [r7, #8]
 8006532:	4013      	ands	r3, r2
 8006534:	b29b      	uxth	r3, r3
 8006536:	2b00      	cmp	r3, #0
 8006538:	bf14      	ite	ne
 800653a:	2301      	movne	r3, #1
 800653c:	2300      	moveq	r3, #0
 800653e:	b2db      	uxtb	r3, r3
 8006540:	e00b      	b.n	800655a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	699b      	ldr	r3, [r3, #24]
 8006548:	43da      	mvns	r2, r3
 800654a:	68bb      	ldr	r3, [r7, #8]
 800654c:	4013      	ands	r3, r2
 800654e:	b29b      	uxth	r3, r3
 8006550:	2b00      	cmp	r3, #0
 8006552:	bf14      	ite	ne
 8006554:	2301      	movne	r3, #1
 8006556:	2300      	moveq	r3, #0
 8006558:	b2db      	uxtb	r3, r3
 800655a:	2b00      	cmp	r3, #0
 800655c:	d016      	beq.n	800658c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	2200      	movs	r2, #0
 8006562:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	2220      	movs	r2, #32
 8006568:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800656c:	68fb      	ldr	r3, [r7, #12]
 800656e:	2200      	movs	r2, #0
 8006570:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006578:	f043 0220 	orr.w	r2, r3, #32
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	2200      	movs	r2, #0
 8006584:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8006588:	2301      	movs	r3, #1
 800658a:	e021      	b.n	80065d0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800658c:	68bb      	ldr	r3, [r7, #8]
 800658e:	0c1b      	lsrs	r3, r3, #16
 8006590:	b2db      	uxtb	r3, r3
 8006592:	2b01      	cmp	r3, #1
 8006594:	d10c      	bne.n	80065b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	695b      	ldr	r3, [r3, #20]
 800659c:	43da      	mvns	r2, r3
 800659e:	68bb      	ldr	r3, [r7, #8]
 80065a0:	4013      	ands	r3, r2
 80065a2:	b29b      	uxth	r3, r3
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	bf14      	ite	ne
 80065a8:	2301      	movne	r3, #1
 80065aa:	2300      	moveq	r3, #0
 80065ac:	b2db      	uxtb	r3, r3
 80065ae:	e00b      	b.n	80065c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	699b      	ldr	r3, [r3, #24]
 80065b6:	43da      	mvns	r2, r3
 80065b8:	68bb      	ldr	r3, [r7, #8]
 80065ba:	4013      	ands	r3, r2
 80065bc:	b29b      	uxth	r3, r3
 80065be:	2b00      	cmp	r3, #0
 80065c0:	bf14      	ite	ne
 80065c2:	2301      	movne	r3, #1
 80065c4:	2300      	moveq	r3, #0
 80065c6:	b2db      	uxtb	r3, r3
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	f47f af6d 	bne.w	80064a8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 80065ce:	2300      	movs	r3, #0
}
 80065d0:	4618      	mov	r0, r3
 80065d2:	3710      	adds	r7, #16
 80065d4:	46bd      	mov	sp, r7
 80065d6:	bd80      	pop	{r7, pc}

080065d8 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80065d8:	b580      	push	{r7, lr}
 80065da:	b084      	sub	sp, #16
 80065dc:	af00      	add	r7, sp, #0
 80065de:	60f8      	str	r0, [r7, #12]
 80065e0:	60b9      	str	r1, [r7, #8]
 80065e2:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80065e4:	e034      	b.n	8006650 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80065e6:	68f8      	ldr	r0, [r7, #12]
 80065e8:	f000 f8e3 	bl	80067b2 <I2C_IsAcknowledgeFailed>
 80065ec:	4603      	mov	r3, r0
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d001      	beq.n	80065f6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80065f2:	2301      	movs	r3, #1
 80065f4:	e034      	b.n	8006660 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80065f6:	68bb      	ldr	r3, [r7, #8]
 80065f8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80065fc:	d028      	beq.n	8006650 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80065fe:	f7fe fb37 	bl	8004c70 <HAL_GetTick>
 8006602:	4602      	mov	r2, r0
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	1ad3      	subs	r3, r2, r3
 8006608:	68ba      	ldr	r2, [r7, #8]
 800660a:	429a      	cmp	r2, r3
 800660c:	d302      	bcc.n	8006614 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800660e:	68bb      	ldr	r3, [r7, #8]
 8006610:	2b00      	cmp	r3, #0
 8006612:	d11d      	bne.n	8006650 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	695b      	ldr	r3, [r3, #20]
 800661a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800661e:	2b80      	cmp	r3, #128	@ 0x80
 8006620:	d016      	beq.n	8006650 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	2200      	movs	r2, #0
 8006626:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	2220      	movs	r2, #32
 800662c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	2200      	movs	r2, #0
 8006634:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800663c:	f043 0220 	orr.w	r2, r3, #32
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8006644:	68fb      	ldr	r3, [r7, #12]
 8006646:	2200      	movs	r2, #0
 8006648:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800664c:	2301      	movs	r3, #1
 800664e:	e007      	b.n	8006660 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	695b      	ldr	r3, [r3, #20]
 8006656:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800665a:	2b80      	cmp	r3, #128	@ 0x80
 800665c:	d1c3      	bne.n	80065e6 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800665e:	2300      	movs	r3, #0
}
 8006660:	4618      	mov	r0, r3
 8006662:	3710      	adds	r7, #16
 8006664:	46bd      	mov	sp, r7
 8006666:	bd80      	pop	{r7, pc}

08006668 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8006668:	b580      	push	{r7, lr}
 800666a:	b084      	sub	sp, #16
 800666c:	af00      	add	r7, sp, #0
 800666e:	60f8      	str	r0, [r7, #12]
 8006670:	60b9      	str	r1, [r7, #8]
 8006672:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8006674:	e034      	b.n	80066e0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8006676:	68f8      	ldr	r0, [r7, #12]
 8006678:	f000 f89b 	bl	80067b2 <I2C_IsAcknowledgeFailed>
 800667c:	4603      	mov	r3, r0
 800667e:	2b00      	cmp	r3, #0
 8006680:	d001      	beq.n	8006686 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8006682:	2301      	movs	r3, #1
 8006684:	e034      	b.n	80066f0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006686:	68bb      	ldr	r3, [r7, #8]
 8006688:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800668c:	d028      	beq.n	80066e0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800668e:	f7fe faef 	bl	8004c70 <HAL_GetTick>
 8006692:	4602      	mov	r2, r0
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	1ad3      	subs	r3, r2, r3
 8006698:	68ba      	ldr	r2, [r7, #8]
 800669a:	429a      	cmp	r2, r3
 800669c:	d302      	bcc.n	80066a4 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800669e:	68bb      	ldr	r3, [r7, #8]
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d11d      	bne.n	80066e0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	695b      	ldr	r3, [r3, #20]
 80066aa:	f003 0304 	and.w	r3, r3, #4
 80066ae:	2b04      	cmp	r3, #4
 80066b0:	d016      	beq.n	80066e0 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	2200      	movs	r2, #0
 80066b6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	2220      	movs	r2, #32
 80066bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80066c0:	68fb      	ldr	r3, [r7, #12]
 80066c2:	2200      	movs	r2, #0
 80066c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80066cc:	f043 0220 	orr.w	r2, r3, #32
 80066d0:	68fb      	ldr	r3, [r7, #12]
 80066d2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	2200      	movs	r2, #0
 80066d8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80066dc:	2301      	movs	r3, #1
 80066de:	e007      	b.n	80066f0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	695b      	ldr	r3, [r3, #20]
 80066e6:	f003 0304 	and.w	r3, r3, #4
 80066ea:	2b04      	cmp	r3, #4
 80066ec:	d1c3      	bne.n	8006676 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80066ee:	2300      	movs	r3, #0
}
 80066f0:	4618      	mov	r0, r3
 80066f2:	3710      	adds	r7, #16
 80066f4:	46bd      	mov	sp, r7
 80066f6:	bd80      	pop	{r7, pc}

080066f8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80066f8:	b580      	push	{r7, lr}
 80066fa:	b084      	sub	sp, #16
 80066fc:	af00      	add	r7, sp, #0
 80066fe:	60f8      	str	r0, [r7, #12]
 8006700:	60b9      	str	r1, [r7, #8]
 8006702:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8006704:	e049      	b.n	800679a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	681b      	ldr	r3, [r3, #0]
 800670a:	695b      	ldr	r3, [r3, #20]
 800670c:	f003 0310 	and.w	r3, r3, #16
 8006710:	2b10      	cmp	r3, #16
 8006712:	d119      	bne.n	8006748 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f06f 0210 	mvn.w	r2, #16
 800671c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	2200      	movs	r2, #0
 8006722:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	2220      	movs	r2, #32
 8006728:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	2200      	movs	r2, #0
 8006730:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8006734:	68fb      	ldr	r3, [r7, #12]
 8006736:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006738:	68fb      	ldr	r3, [r7, #12]
 800673a:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	2200      	movs	r2, #0
 8006740:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8006744:	2301      	movs	r3, #1
 8006746:	e030      	b.n	80067aa <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006748:	f7fe fa92 	bl	8004c70 <HAL_GetTick>
 800674c:	4602      	mov	r2, r0
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	1ad3      	subs	r3, r2, r3
 8006752:	68ba      	ldr	r2, [r7, #8]
 8006754:	429a      	cmp	r2, r3
 8006756:	d302      	bcc.n	800675e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8006758:	68bb      	ldr	r3, [r7, #8]
 800675a:	2b00      	cmp	r3, #0
 800675c:	d11d      	bne.n	800679a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800675e:	68fb      	ldr	r3, [r7, #12]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	695b      	ldr	r3, [r3, #20]
 8006764:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006768:	2b40      	cmp	r3, #64	@ 0x40
 800676a:	d016      	beq.n	800679a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	2200      	movs	r2, #0
 8006770:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	2220      	movs	r2, #32
 8006776:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	2200      	movs	r2, #0
 800677e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006782:	68fb      	ldr	r3, [r7, #12]
 8006784:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006786:	f043 0220 	orr.w	r2, r3, #32
 800678a:	68fb      	ldr	r3, [r7, #12]
 800678c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	2200      	movs	r2, #0
 8006792:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8006796:	2301      	movs	r3, #1
 8006798:	e007      	b.n	80067aa <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800679a:	68fb      	ldr	r3, [r7, #12]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	695b      	ldr	r3, [r3, #20]
 80067a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80067a4:	2b40      	cmp	r3, #64	@ 0x40
 80067a6:	d1ae      	bne.n	8006706 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80067a8:	2300      	movs	r3, #0
}
 80067aa:	4618      	mov	r0, r3
 80067ac:	3710      	adds	r7, #16
 80067ae:	46bd      	mov	sp, r7
 80067b0:	bd80      	pop	{r7, pc}

080067b2 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80067b2:	b480      	push	{r7}
 80067b4:	b083      	sub	sp, #12
 80067b6:	af00      	add	r7, sp, #0
 80067b8:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	695b      	ldr	r3, [r3, #20]
 80067c0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80067c4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80067c8:	d11b      	bne.n	8006802 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80067d2:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	2200      	movs	r2, #0
 80067d8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	2220      	movs	r2, #32
 80067de:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	2200      	movs	r2, #0
 80067e6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80067ee:	f043 0204 	orr.w	r2, r3, #4
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	2200      	movs	r2, #0
 80067fa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80067fe:	2301      	movs	r3, #1
 8006800:	e000      	b.n	8006804 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8006802:	2300      	movs	r3, #0
}
 8006804:	4618      	mov	r0, r3
 8006806:	370c      	adds	r7, #12
 8006808:	46bd      	mov	sp, r7
 800680a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680e:	4770      	bx	lr

08006810 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006810:	b580      	push	{r7, lr}
 8006812:	b086      	sub	sp, #24
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2b00      	cmp	r3, #0
 800681c:	d101      	bne.n	8006822 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800681e:	2301      	movs	r3, #1
 8006820:	e267      	b.n	8006cf2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	681b      	ldr	r3, [r3, #0]
 8006826:	f003 0301 	and.w	r3, r3, #1
 800682a:	2b00      	cmp	r3, #0
 800682c:	d075      	beq.n	800691a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800682e:	4b88      	ldr	r3, [pc, #544]	@ (8006a50 <HAL_RCC_OscConfig+0x240>)
 8006830:	689b      	ldr	r3, [r3, #8]
 8006832:	f003 030c 	and.w	r3, r3, #12
 8006836:	2b04      	cmp	r3, #4
 8006838:	d00c      	beq.n	8006854 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800683a:	4b85      	ldr	r3, [pc, #532]	@ (8006a50 <HAL_RCC_OscConfig+0x240>)
 800683c:	689b      	ldr	r3, [r3, #8]
 800683e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8006842:	2b08      	cmp	r3, #8
 8006844:	d112      	bne.n	800686c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8006846:	4b82      	ldr	r3, [pc, #520]	@ (8006a50 <HAL_RCC_OscConfig+0x240>)
 8006848:	685b      	ldr	r3, [r3, #4]
 800684a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800684e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006852:	d10b      	bne.n	800686c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006854:	4b7e      	ldr	r3, [pc, #504]	@ (8006a50 <HAL_RCC_OscConfig+0x240>)
 8006856:	681b      	ldr	r3, [r3, #0]
 8006858:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800685c:	2b00      	cmp	r3, #0
 800685e:	d05b      	beq.n	8006918 <HAL_RCC_OscConfig+0x108>
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	685b      	ldr	r3, [r3, #4]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d157      	bne.n	8006918 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006868:	2301      	movs	r3, #1
 800686a:	e242      	b.n	8006cf2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800686c:	687b      	ldr	r3, [r7, #4]
 800686e:	685b      	ldr	r3, [r3, #4]
 8006870:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006874:	d106      	bne.n	8006884 <HAL_RCC_OscConfig+0x74>
 8006876:	4b76      	ldr	r3, [pc, #472]	@ (8006a50 <HAL_RCC_OscConfig+0x240>)
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	4a75      	ldr	r2, [pc, #468]	@ (8006a50 <HAL_RCC_OscConfig+0x240>)
 800687c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006880:	6013      	str	r3, [r2, #0]
 8006882:	e01d      	b.n	80068c0 <HAL_RCC_OscConfig+0xb0>
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	685b      	ldr	r3, [r3, #4]
 8006888:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800688c:	d10c      	bne.n	80068a8 <HAL_RCC_OscConfig+0x98>
 800688e:	4b70      	ldr	r3, [pc, #448]	@ (8006a50 <HAL_RCC_OscConfig+0x240>)
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	4a6f      	ldr	r2, [pc, #444]	@ (8006a50 <HAL_RCC_OscConfig+0x240>)
 8006894:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8006898:	6013      	str	r3, [r2, #0]
 800689a:	4b6d      	ldr	r3, [pc, #436]	@ (8006a50 <HAL_RCC_OscConfig+0x240>)
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	4a6c      	ldr	r2, [pc, #432]	@ (8006a50 <HAL_RCC_OscConfig+0x240>)
 80068a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80068a4:	6013      	str	r3, [r2, #0]
 80068a6:	e00b      	b.n	80068c0 <HAL_RCC_OscConfig+0xb0>
 80068a8:	4b69      	ldr	r3, [pc, #420]	@ (8006a50 <HAL_RCC_OscConfig+0x240>)
 80068aa:	681b      	ldr	r3, [r3, #0]
 80068ac:	4a68      	ldr	r2, [pc, #416]	@ (8006a50 <HAL_RCC_OscConfig+0x240>)
 80068ae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80068b2:	6013      	str	r3, [r2, #0]
 80068b4:	4b66      	ldr	r3, [pc, #408]	@ (8006a50 <HAL_RCC_OscConfig+0x240>)
 80068b6:	681b      	ldr	r3, [r3, #0]
 80068b8:	4a65      	ldr	r2, [pc, #404]	@ (8006a50 <HAL_RCC_OscConfig+0x240>)
 80068ba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80068be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	685b      	ldr	r3, [r3, #4]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d013      	beq.n	80068f0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80068c8:	f7fe f9d2 	bl	8004c70 <HAL_GetTick>
 80068cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80068ce:	e008      	b.n	80068e2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80068d0:	f7fe f9ce 	bl	8004c70 <HAL_GetTick>
 80068d4:	4602      	mov	r2, r0
 80068d6:	693b      	ldr	r3, [r7, #16]
 80068d8:	1ad3      	subs	r3, r2, r3
 80068da:	2b64      	cmp	r3, #100	@ 0x64
 80068dc:	d901      	bls.n	80068e2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80068de:	2303      	movs	r3, #3
 80068e0:	e207      	b.n	8006cf2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80068e2:	4b5b      	ldr	r3, [pc, #364]	@ (8006a50 <HAL_RCC_OscConfig+0x240>)
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80068ea:	2b00      	cmp	r3, #0
 80068ec:	d0f0      	beq.n	80068d0 <HAL_RCC_OscConfig+0xc0>
 80068ee:	e014      	b.n	800691a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80068f0:	f7fe f9be 	bl	8004c70 <HAL_GetTick>
 80068f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80068f6:	e008      	b.n	800690a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80068f8:	f7fe f9ba 	bl	8004c70 <HAL_GetTick>
 80068fc:	4602      	mov	r2, r0
 80068fe:	693b      	ldr	r3, [r7, #16]
 8006900:	1ad3      	subs	r3, r2, r3
 8006902:	2b64      	cmp	r3, #100	@ 0x64
 8006904:	d901      	bls.n	800690a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006906:	2303      	movs	r3, #3
 8006908:	e1f3      	b.n	8006cf2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800690a:	4b51      	ldr	r3, [pc, #324]	@ (8006a50 <HAL_RCC_OscConfig+0x240>)
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006912:	2b00      	cmp	r3, #0
 8006914:	d1f0      	bne.n	80068f8 <HAL_RCC_OscConfig+0xe8>
 8006916:	e000      	b.n	800691a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006918:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	f003 0302 	and.w	r3, r3, #2
 8006922:	2b00      	cmp	r3, #0
 8006924:	d063      	beq.n	80069ee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8006926:	4b4a      	ldr	r3, [pc, #296]	@ (8006a50 <HAL_RCC_OscConfig+0x240>)
 8006928:	689b      	ldr	r3, [r3, #8]
 800692a:	f003 030c 	and.w	r3, r3, #12
 800692e:	2b00      	cmp	r3, #0
 8006930:	d00b      	beq.n	800694a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8006932:	4b47      	ldr	r3, [pc, #284]	@ (8006a50 <HAL_RCC_OscConfig+0x240>)
 8006934:	689b      	ldr	r3, [r3, #8]
 8006936:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800693a:	2b08      	cmp	r3, #8
 800693c:	d11c      	bne.n	8006978 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800693e:	4b44      	ldr	r3, [pc, #272]	@ (8006a50 <HAL_RCC_OscConfig+0x240>)
 8006940:	685b      	ldr	r3, [r3, #4]
 8006942:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006946:	2b00      	cmp	r3, #0
 8006948:	d116      	bne.n	8006978 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800694a:	4b41      	ldr	r3, [pc, #260]	@ (8006a50 <HAL_RCC_OscConfig+0x240>)
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	f003 0302 	and.w	r3, r3, #2
 8006952:	2b00      	cmp	r3, #0
 8006954:	d005      	beq.n	8006962 <HAL_RCC_OscConfig+0x152>
 8006956:	687b      	ldr	r3, [r7, #4]
 8006958:	68db      	ldr	r3, [r3, #12]
 800695a:	2b01      	cmp	r3, #1
 800695c:	d001      	beq.n	8006962 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800695e:	2301      	movs	r3, #1
 8006960:	e1c7      	b.n	8006cf2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006962:	4b3b      	ldr	r3, [pc, #236]	@ (8006a50 <HAL_RCC_OscConfig+0x240>)
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	691b      	ldr	r3, [r3, #16]
 800696e:	00db      	lsls	r3, r3, #3
 8006970:	4937      	ldr	r1, [pc, #220]	@ (8006a50 <HAL_RCC_OscConfig+0x240>)
 8006972:	4313      	orrs	r3, r2
 8006974:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006976:	e03a      	b.n	80069ee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	68db      	ldr	r3, [r3, #12]
 800697c:	2b00      	cmp	r3, #0
 800697e:	d020      	beq.n	80069c2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006980:	4b34      	ldr	r3, [pc, #208]	@ (8006a54 <HAL_RCC_OscConfig+0x244>)
 8006982:	2201      	movs	r2, #1
 8006984:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006986:	f7fe f973 	bl	8004c70 <HAL_GetTick>
 800698a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800698c:	e008      	b.n	80069a0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800698e:	f7fe f96f 	bl	8004c70 <HAL_GetTick>
 8006992:	4602      	mov	r2, r0
 8006994:	693b      	ldr	r3, [r7, #16]
 8006996:	1ad3      	subs	r3, r2, r3
 8006998:	2b02      	cmp	r3, #2
 800699a:	d901      	bls.n	80069a0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800699c:	2303      	movs	r3, #3
 800699e:	e1a8      	b.n	8006cf2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80069a0:	4b2b      	ldr	r3, [pc, #172]	@ (8006a50 <HAL_RCC_OscConfig+0x240>)
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	f003 0302 	and.w	r3, r3, #2
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d0f0      	beq.n	800698e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80069ac:	4b28      	ldr	r3, [pc, #160]	@ (8006a50 <HAL_RCC_OscConfig+0x240>)
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	691b      	ldr	r3, [r3, #16]
 80069b8:	00db      	lsls	r3, r3, #3
 80069ba:	4925      	ldr	r1, [pc, #148]	@ (8006a50 <HAL_RCC_OscConfig+0x240>)
 80069bc:	4313      	orrs	r3, r2
 80069be:	600b      	str	r3, [r1, #0]
 80069c0:	e015      	b.n	80069ee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80069c2:	4b24      	ldr	r3, [pc, #144]	@ (8006a54 <HAL_RCC_OscConfig+0x244>)
 80069c4:	2200      	movs	r2, #0
 80069c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80069c8:	f7fe f952 	bl	8004c70 <HAL_GetTick>
 80069cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80069ce:	e008      	b.n	80069e2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80069d0:	f7fe f94e 	bl	8004c70 <HAL_GetTick>
 80069d4:	4602      	mov	r2, r0
 80069d6:	693b      	ldr	r3, [r7, #16]
 80069d8:	1ad3      	subs	r3, r2, r3
 80069da:	2b02      	cmp	r3, #2
 80069dc:	d901      	bls.n	80069e2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80069de:	2303      	movs	r3, #3
 80069e0:	e187      	b.n	8006cf2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80069e2:	4b1b      	ldr	r3, [pc, #108]	@ (8006a50 <HAL_RCC_OscConfig+0x240>)
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	f003 0302 	and.w	r3, r3, #2
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d1f0      	bne.n	80069d0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	f003 0308 	and.w	r3, r3, #8
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d036      	beq.n	8006a68 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	695b      	ldr	r3, [r3, #20]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d016      	beq.n	8006a30 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006a02:	4b15      	ldr	r3, [pc, #84]	@ (8006a58 <HAL_RCC_OscConfig+0x248>)
 8006a04:	2201      	movs	r2, #1
 8006a06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006a08:	f7fe f932 	bl	8004c70 <HAL_GetTick>
 8006a0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006a0e:	e008      	b.n	8006a22 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006a10:	f7fe f92e 	bl	8004c70 <HAL_GetTick>
 8006a14:	4602      	mov	r2, r0
 8006a16:	693b      	ldr	r3, [r7, #16]
 8006a18:	1ad3      	subs	r3, r2, r3
 8006a1a:	2b02      	cmp	r3, #2
 8006a1c:	d901      	bls.n	8006a22 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006a1e:	2303      	movs	r3, #3
 8006a20:	e167      	b.n	8006cf2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006a22:	4b0b      	ldr	r3, [pc, #44]	@ (8006a50 <HAL_RCC_OscConfig+0x240>)
 8006a24:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006a26:	f003 0302 	and.w	r3, r3, #2
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d0f0      	beq.n	8006a10 <HAL_RCC_OscConfig+0x200>
 8006a2e:	e01b      	b.n	8006a68 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006a30:	4b09      	ldr	r3, [pc, #36]	@ (8006a58 <HAL_RCC_OscConfig+0x248>)
 8006a32:	2200      	movs	r2, #0
 8006a34:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006a36:	f7fe f91b 	bl	8004c70 <HAL_GetTick>
 8006a3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006a3c:	e00e      	b.n	8006a5c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8006a3e:	f7fe f917 	bl	8004c70 <HAL_GetTick>
 8006a42:	4602      	mov	r2, r0
 8006a44:	693b      	ldr	r3, [r7, #16]
 8006a46:	1ad3      	subs	r3, r2, r3
 8006a48:	2b02      	cmp	r3, #2
 8006a4a:	d907      	bls.n	8006a5c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8006a4c:	2303      	movs	r3, #3
 8006a4e:	e150      	b.n	8006cf2 <HAL_RCC_OscConfig+0x4e2>
 8006a50:	40023800 	.word	0x40023800
 8006a54:	42470000 	.word	0x42470000
 8006a58:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006a5c:	4b88      	ldr	r3, [pc, #544]	@ (8006c80 <HAL_RCC_OscConfig+0x470>)
 8006a5e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8006a60:	f003 0302 	and.w	r3, r3, #2
 8006a64:	2b00      	cmp	r3, #0
 8006a66:	d1ea      	bne.n	8006a3e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f003 0304 	and.w	r3, r3, #4
 8006a70:	2b00      	cmp	r3, #0
 8006a72:	f000 8097 	beq.w	8006ba4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006a76:	2300      	movs	r3, #0
 8006a78:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006a7a:	4b81      	ldr	r3, [pc, #516]	@ (8006c80 <HAL_RCC_OscConfig+0x470>)
 8006a7c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a7e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d10f      	bne.n	8006aa6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006a86:	2300      	movs	r3, #0
 8006a88:	60bb      	str	r3, [r7, #8]
 8006a8a:	4b7d      	ldr	r3, [pc, #500]	@ (8006c80 <HAL_RCC_OscConfig+0x470>)
 8006a8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a8e:	4a7c      	ldr	r2, [pc, #496]	@ (8006c80 <HAL_RCC_OscConfig+0x470>)
 8006a90:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8006a94:	6413      	str	r3, [r2, #64]	@ 0x40
 8006a96:	4b7a      	ldr	r3, [pc, #488]	@ (8006c80 <HAL_RCC_OscConfig+0x470>)
 8006a98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006a9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006a9e:	60bb      	str	r3, [r7, #8]
 8006aa0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006aa2:	2301      	movs	r3, #1
 8006aa4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006aa6:	4b77      	ldr	r3, [pc, #476]	@ (8006c84 <HAL_RCC_OscConfig+0x474>)
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d118      	bne.n	8006ae4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006ab2:	4b74      	ldr	r3, [pc, #464]	@ (8006c84 <HAL_RCC_OscConfig+0x474>)
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	4a73      	ldr	r2, [pc, #460]	@ (8006c84 <HAL_RCC_OscConfig+0x474>)
 8006ab8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006abc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006abe:	f7fe f8d7 	bl	8004c70 <HAL_GetTick>
 8006ac2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006ac4:	e008      	b.n	8006ad8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006ac6:	f7fe f8d3 	bl	8004c70 <HAL_GetTick>
 8006aca:	4602      	mov	r2, r0
 8006acc:	693b      	ldr	r3, [r7, #16]
 8006ace:	1ad3      	subs	r3, r2, r3
 8006ad0:	2b02      	cmp	r3, #2
 8006ad2:	d901      	bls.n	8006ad8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8006ad4:	2303      	movs	r3, #3
 8006ad6:	e10c      	b.n	8006cf2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006ad8:	4b6a      	ldr	r3, [pc, #424]	@ (8006c84 <HAL_RCC_OscConfig+0x474>)
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006ae0:	2b00      	cmp	r3, #0
 8006ae2:	d0f0      	beq.n	8006ac6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	689b      	ldr	r3, [r3, #8]
 8006ae8:	2b01      	cmp	r3, #1
 8006aea:	d106      	bne.n	8006afa <HAL_RCC_OscConfig+0x2ea>
 8006aec:	4b64      	ldr	r3, [pc, #400]	@ (8006c80 <HAL_RCC_OscConfig+0x470>)
 8006aee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006af0:	4a63      	ldr	r2, [pc, #396]	@ (8006c80 <HAL_RCC_OscConfig+0x470>)
 8006af2:	f043 0301 	orr.w	r3, r3, #1
 8006af6:	6713      	str	r3, [r2, #112]	@ 0x70
 8006af8:	e01c      	b.n	8006b34 <HAL_RCC_OscConfig+0x324>
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	689b      	ldr	r3, [r3, #8]
 8006afe:	2b05      	cmp	r3, #5
 8006b00:	d10c      	bne.n	8006b1c <HAL_RCC_OscConfig+0x30c>
 8006b02:	4b5f      	ldr	r3, [pc, #380]	@ (8006c80 <HAL_RCC_OscConfig+0x470>)
 8006b04:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b06:	4a5e      	ldr	r2, [pc, #376]	@ (8006c80 <HAL_RCC_OscConfig+0x470>)
 8006b08:	f043 0304 	orr.w	r3, r3, #4
 8006b0c:	6713      	str	r3, [r2, #112]	@ 0x70
 8006b0e:	4b5c      	ldr	r3, [pc, #368]	@ (8006c80 <HAL_RCC_OscConfig+0x470>)
 8006b10:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b12:	4a5b      	ldr	r2, [pc, #364]	@ (8006c80 <HAL_RCC_OscConfig+0x470>)
 8006b14:	f043 0301 	orr.w	r3, r3, #1
 8006b18:	6713      	str	r3, [r2, #112]	@ 0x70
 8006b1a:	e00b      	b.n	8006b34 <HAL_RCC_OscConfig+0x324>
 8006b1c:	4b58      	ldr	r3, [pc, #352]	@ (8006c80 <HAL_RCC_OscConfig+0x470>)
 8006b1e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b20:	4a57      	ldr	r2, [pc, #348]	@ (8006c80 <HAL_RCC_OscConfig+0x470>)
 8006b22:	f023 0301 	bic.w	r3, r3, #1
 8006b26:	6713      	str	r3, [r2, #112]	@ 0x70
 8006b28:	4b55      	ldr	r3, [pc, #340]	@ (8006c80 <HAL_RCC_OscConfig+0x470>)
 8006b2a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b2c:	4a54      	ldr	r2, [pc, #336]	@ (8006c80 <HAL_RCC_OscConfig+0x470>)
 8006b2e:	f023 0304 	bic.w	r3, r3, #4
 8006b32:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	689b      	ldr	r3, [r3, #8]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d015      	beq.n	8006b68 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006b3c:	f7fe f898 	bl	8004c70 <HAL_GetTick>
 8006b40:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b42:	e00a      	b.n	8006b5a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b44:	f7fe f894 	bl	8004c70 <HAL_GetTick>
 8006b48:	4602      	mov	r2, r0
 8006b4a:	693b      	ldr	r3, [r7, #16]
 8006b4c:	1ad3      	subs	r3, r2, r3
 8006b4e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006b52:	4293      	cmp	r3, r2
 8006b54:	d901      	bls.n	8006b5a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8006b56:	2303      	movs	r3, #3
 8006b58:	e0cb      	b.n	8006cf2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006b5a:	4b49      	ldr	r3, [pc, #292]	@ (8006c80 <HAL_RCC_OscConfig+0x470>)
 8006b5c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b5e:	f003 0302 	and.w	r3, r3, #2
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d0ee      	beq.n	8006b44 <HAL_RCC_OscConfig+0x334>
 8006b66:	e014      	b.n	8006b92 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006b68:	f7fe f882 	bl	8004c70 <HAL_GetTick>
 8006b6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006b6e:	e00a      	b.n	8006b86 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8006b70:	f7fe f87e 	bl	8004c70 <HAL_GetTick>
 8006b74:	4602      	mov	r2, r0
 8006b76:	693b      	ldr	r3, [r7, #16]
 8006b78:	1ad3      	subs	r3, r2, r3
 8006b7a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006b7e:	4293      	cmp	r3, r2
 8006b80:	d901      	bls.n	8006b86 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8006b82:	2303      	movs	r3, #3
 8006b84:	e0b5      	b.n	8006cf2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006b86:	4b3e      	ldr	r3, [pc, #248]	@ (8006c80 <HAL_RCC_OscConfig+0x470>)
 8006b88:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8006b8a:	f003 0302 	and.w	r3, r3, #2
 8006b8e:	2b00      	cmp	r3, #0
 8006b90:	d1ee      	bne.n	8006b70 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8006b92:	7dfb      	ldrb	r3, [r7, #23]
 8006b94:	2b01      	cmp	r3, #1
 8006b96:	d105      	bne.n	8006ba4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006b98:	4b39      	ldr	r3, [pc, #228]	@ (8006c80 <HAL_RCC_OscConfig+0x470>)
 8006b9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006b9c:	4a38      	ldr	r2, [pc, #224]	@ (8006c80 <HAL_RCC_OscConfig+0x470>)
 8006b9e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006ba2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	699b      	ldr	r3, [r3, #24]
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	f000 80a1 	beq.w	8006cf0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006bae:	4b34      	ldr	r3, [pc, #208]	@ (8006c80 <HAL_RCC_OscConfig+0x470>)
 8006bb0:	689b      	ldr	r3, [r3, #8]
 8006bb2:	f003 030c 	and.w	r3, r3, #12
 8006bb6:	2b08      	cmp	r3, #8
 8006bb8:	d05c      	beq.n	8006c74 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	699b      	ldr	r3, [r3, #24]
 8006bbe:	2b02      	cmp	r3, #2
 8006bc0:	d141      	bne.n	8006c46 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006bc2:	4b31      	ldr	r3, [pc, #196]	@ (8006c88 <HAL_RCC_OscConfig+0x478>)
 8006bc4:	2200      	movs	r2, #0
 8006bc6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006bc8:	f7fe f852 	bl	8004c70 <HAL_GetTick>
 8006bcc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006bce:	e008      	b.n	8006be2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006bd0:	f7fe f84e 	bl	8004c70 <HAL_GetTick>
 8006bd4:	4602      	mov	r2, r0
 8006bd6:	693b      	ldr	r3, [r7, #16]
 8006bd8:	1ad3      	subs	r3, r2, r3
 8006bda:	2b02      	cmp	r3, #2
 8006bdc:	d901      	bls.n	8006be2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8006bde:	2303      	movs	r3, #3
 8006be0:	e087      	b.n	8006cf2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006be2:	4b27      	ldr	r3, [pc, #156]	@ (8006c80 <HAL_RCC_OscConfig+0x470>)
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d1f0      	bne.n	8006bd0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	69da      	ldr	r2, [r3, #28]
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	6a1b      	ldr	r3, [r3, #32]
 8006bf6:	431a      	orrs	r2, r3
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006bfc:	019b      	lsls	r3, r3, #6
 8006bfe:	431a      	orrs	r2, r3
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c04:	085b      	lsrs	r3, r3, #1
 8006c06:	3b01      	subs	r3, #1
 8006c08:	041b      	lsls	r3, r3, #16
 8006c0a:	431a      	orrs	r2, r3
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c10:	061b      	lsls	r3, r3, #24
 8006c12:	491b      	ldr	r1, [pc, #108]	@ (8006c80 <HAL_RCC_OscConfig+0x470>)
 8006c14:	4313      	orrs	r3, r2
 8006c16:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006c18:	4b1b      	ldr	r3, [pc, #108]	@ (8006c88 <HAL_RCC_OscConfig+0x478>)
 8006c1a:	2201      	movs	r2, #1
 8006c1c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c1e:	f7fe f827 	bl	8004c70 <HAL_GetTick>
 8006c22:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006c24:	e008      	b.n	8006c38 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c26:	f7fe f823 	bl	8004c70 <HAL_GetTick>
 8006c2a:	4602      	mov	r2, r0
 8006c2c:	693b      	ldr	r3, [r7, #16]
 8006c2e:	1ad3      	subs	r3, r2, r3
 8006c30:	2b02      	cmp	r3, #2
 8006c32:	d901      	bls.n	8006c38 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8006c34:	2303      	movs	r3, #3
 8006c36:	e05c      	b.n	8006cf2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006c38:	4b11      	ldr	r3, [pc, #68]	@ (8006c80 <HAL_RCC_OscConfig+0x470>)
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006c40:	2b00      	cmp	r3, #0
 8006c42:	d0f0      	beq.n	8006c26 <HAL_RCC_OscConfig+0x416>
 8006c44:	e054      	b.n	8006cf0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006c46:	4b10      	ldr	r3, [pc, #64]	@ (8006c88 <HAL_RCC_OscConfig+0x478>)
 8006c48:	2200      	movs	r2, #0
 8006c4a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c4c:	f7fe f810 	bl	8004c70 <HAL_GetTick>
 8006c50:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006c52:	e008      	b.n	8006c66 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8006c54:	f7fe f80c 	bl	8004c70 <HAL_GetTick>
 8006c58:	4602      	mov	r2, r0
 8006c5a:	693b      	ldr	r3, [r7, #16]
 8006c5c:	1ad3      	subs	r3, r2, r3
 8006c5e:	2b02      	cmp	r3, #2
 8006c60:	d901      	bls.n	8006c66 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8006c62:	2303      	movs	r3, #3
 8006c64:	e045      	b.n	8006cf2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006c66:	4b06      	ldr	r3, [pc, #24]	@ (8006c80 <HAL_RCC_OscConfig+0x470>)
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d1f0      	bne.n	8006c54 <HAL_RCC_OscConfig+0x444>
 8006c72:	e03d      	b.n	8006cf0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	699b      	ldr	r3, [r3, #24]
 8006c78:	2b01      	cmp	r3, #1
 8006c7a:	d107      	bne.n	8006c8c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8006c7c:	2301      	movs	r3, #1
 8006c7e:	e038      	b.n	8006cf2 <HAL_RCC_OscConfig+0x4e2>
 8006c80:	40023800 	.word	0x40023800
 8006c84:	40007000 	.word	0x40007000
 8006c88:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006c8c:	4b1b      	ldr	r3, [pc, #108]	@ (8006cfc <HAL_RCC_OscConfig+0x4ec>)
 8006c8e:	685b      	ldr	r3, [r3, #4]
 8006c90:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	699b      	ldr	r3, [r3, #24]
 8006c96:	2b01      	cmp	r3, #1
 8006c98:	d028      	beq.n	8006cec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006ca4:	429a      	cmp	r2, r3
 8006ca6:	d121      	bne.n	8006cec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006cb2:	429a      	cmp	r2, r3
 8006cb4:	d11a      	bne.n	8006cec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006cb6:	68fa      	ldr	r2, [r7, #12]
 8006cb8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8006cbc:	4013      	ands	r3, r2
 8006cbe:	687a      	ldr	r2, [r7, #4]
 8006cc0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8006cc2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006cc4:	4293      	cmp	r3, r2
 8006cc6:	d111      	bne.n	8006cec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006cc8:	68fb      	ldr	r3, [r7, #12]
 8006cca:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006cd2:	085b      	lsrs	r3, r3, #1
 8006cd4:	3b01      	subs	r3, #1
 8006cd6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006cd8:	429a      	cmp	r2, r3
 8006cda:	d107      	bne.n	8006cec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006cdc:	68fb      	ldr	r3, [r7, #12]
 8006cde:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006ce6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006ce8:	429a      	cmp	r2, r3
 8006cea:	d001      	beq.n	8006cf0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8006cec:	2301      	movs	r3, #1
 8006cee:	e000      	b.n	8006cf2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006cf0:	2300      	movs	r3, #0
}
 8006cf2:	4618      	mov	r0, r3
 8006cf4:	3718      	adds	r7, #24
 8006cf6:	46bd      	mov	sp, r7
 8006cf8:	bd80      	pop	{r7, pc}
 8006cfa:	bf00      	nop
 8006cfc:	40023800 	.word	0x40023800

08006d00 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006d00:	b580      	push	{r7, lr}
 8006d02:	b084      	sub	sp, #16
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
 8006d08:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d101      	bne.n	8006d14 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006d10:	2301      	movs	r3, #1
 8006d12:	e0cc      	b.n	8006eae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8006d14:	4b68      	ldr	r3, [pc, #416]	@ (8006eb8 <HAL_RCC_ClockConfig+0x1b8>)
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	f003 0307 	and.w	r3, r3, #7
 8006d1c:	683a      	ldr	r2, [r7, #0]
 8006d1e:	429a      	cmp	r2, r3
 8006d20:	d90c      	bls.n	8006d3c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006d22:	4b65      	ldr	r3, [pc, #404]	@ (8006eb8 <HAL_RCC_ClockConfig+0x1b8>)
 8006d24:	683a      	ldr	r2, [r7, #0]
 8006d26:	b2d2      	uxtb	r2, r2
 8006d28:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006d2a:	4b63      	ldr	r3, [pc, #396]	@ (8006eb8 <HAL_RCC_ClockConfig+0x1b8>)
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	f003 0307 	and.w	r3, r3, #7
 8006d32:	683a      	ldr	r2, [r7, #0]
 8006d34:	429a      	cmp	r2, r3
 8006d36:	d001      	beq.n	8006d3c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006d38:	2301      	movs	r3, #1
 8006d3a:	e0b8      	b.n	8006eae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	f003 0302 	and.w	r3, r3, #2
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d020      	beq.n	8006d8a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	f003 0304 	and.w	r3, r3, #4
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d005      	beq.n	8006d60 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006d54:	4b59      	ldr	r3, [pc, #356]	@ (8006ebc <HAL_RCC_ClockConfig+0x1bc>)
 8006d56:	689b      	ldr	r3, [r3, #8]
 8006d58:	4a58      	ldr	r2, [pc, #352]	@ (8006ebc <HAL_RCC_ClockConfig+0x1bc>)
 8006d5a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8006d5e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	681b      	ldr	r3, [r3, #0]
 8006d64:	f003 0308 	and.w	r3, r3, #8
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d005      	beq.n	8006d78 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006d6c:	4b53      	ldr	r3, [pc, #332]	@ (8006ebc <HAL_RCC_ClockConfig+0x1bc>)
 8006d6e:	689b      	ldr	r3, [r3, #8]
 8006d70:	4a52      	ldr	r2, [pc, #328]	@ (8006ebc <HAL_RCC_ClockConfig+0x1bc>)
 8006d72:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8006d76:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006d78:	4b50      	ldr	r3, [pc, #320]	@ (8006ebc <HAL_RCC_ClockConfig+0x1bc>)
 8006d7a:	689b      	ldr	r3, [r3, #8]
 8006d7c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8006d80:	687b      	ldr	r3, [r7, #4]
 8006d82:	689b      	ldr	r3, [r3, #8]
 8006d84:	494d      	ldr	r1, [pc, #308]	@ (8006ebc <HAL_RCC_ClockConfig+0x1bc>)
 8006d86:	4313      	orrs	r3, r2
 8006d88:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	f003 0301 	and.w	r3, r3, #1
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	d044      	beq.n	8006e20 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	685b      	ldr	r3, [r3, #4]
 8006d9a:	2b01      	cmp	r3, #1
 8006d9c:	d107      	bne.n	8006dae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006d9e:	4b47      	ldr	r3, [pc, #284]	@ (8006ebc <HAL_RCC_ClockConfig+0x1bc>)
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d119      	bne.n	8006dde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006daa:	2301      	movs	r3, #1
 8006dac:	e07f      	b.n	8006eae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	685b      	ldr	r3, [r3, #4]
 8006db2:	2b02      	cmp	r3, #2
 8006db4:	d003      	beq.n	8006dbe <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006db6:	687b      	ldr	r3, [r7, #4]
 8006db8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006dba:	2b03      	cmp	r3, #3
 8006dbc:	d107      	bne.n	8006dce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006dbe:	4b3f      	ldr	r3, [pc, #252]	@ (8006ebc <HAL_RCC_ClockConfig+0x1bc>)
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8006dc6:	2b00      	cmp	r3, #0
 8006dc8:	d109      	bne.n	8006dde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006dca:	2301      	movs	r3, #1
 8006dcc:	e06f      	b.n	8006eae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006dce:	4b3b      	ldr	r3, [pc, #236]	@ (8006ebc <HAL_RCC_ClockConfig+0x1bc>)
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	f003 0302 	and.w	r3, r3, #2
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d101      	bne.n	8006dde <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006dda:	2301      	movs	r3, #1
 8006ddc:	e067      	b.n	8006eae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006dde:	4b37      	ldr	r3, [pc, #220]	@ (8006ebc <HAL_RCC_ClockConfig+0x1bc>)
 8006de0:	689b      	ldr	r3, [r3, #8]
 8006de2:	f023 0203 	bic.w	r2, r3, #3
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	685b      	ldr	r3, [r3, #4]
 8006dea:	4934      	ldr	r1, [pc, #208]	@ (8006ebc <HAL_RCC_ClockConfig+0x1bc>)
 8006dec:	4313      	orrs	r3, r2
 8006dee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006df0:	f7fd ff3e 	bl	8004c70 <HAL_GetTick>
 8006df4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006df6:	e00a      	b.n	8006e0e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006df8:	f7fd ff3a 	bl	8004c70 <HAL_GetTick>
 8006dfc:	4602      	mov	r2, r0
 8006dfe:	68fb      	ldr	r3, [r7, #12]
 8006e00:	1ad3      	subs	r3, r2, r3
 8006e02:	f241 3288 	movw	r2, #5000	@ 0x1388
 8006e06:	4293      	cmp	r3, r2
 8006e08:	d901      	bls.n	8006e0e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006e0a:	2303      	movs	r3, #3
 8006e0c:	e04f      	b.n	8006eae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006e0e:	4b2b      	ldr	r3, [pc, #172]	@ (8006ebc <HAL_RCC_ClockConfig+0x1bc>)
 8006e10:	689b      	ldr	r3, [r3, #8]
 8006e12:	f003 020c 	and.w	r2, r3, #12
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	685b      	ldr	r3, [r3, #4]
 8006e1a:	009b      	lsls	r3, r3, #2
 8006e1c:	429a      	cmp	r2, r3
 8006e1e:	d1eb      	bne.n	8006df8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8006e20:	4b25      	ldr	r3, [pc, #148]	@ (8006eb8 <HAL_RCC_ClockConfig+0x1b8>)
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	f003 0307 	and.w	r3, r3, #7
 8006e28:	683a      	ldr	r2, [r7, #0]
 8006e2a:	429a      	cmp	r2, r3
 8006e2c:	d20c      	bcs.n	8006e48 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006e2e:	4b22      	ldr	r3, [pc, #136]	@ (8006eb8 <HAL_RCC_ClockConfig+0x1b8>)
 8006e30:	683a      	ldr	r2, [r7, #0]
 8006e32:	b2d2      	uxtb	r2, r2
 8006e34:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8006e36:	4b20      	ldr	r3, [pc, #128]	@ (8006eb8 <HAL_RCC_ClockConfig+0x1b8>)
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	f003 0307 	and.w	r3, r3, #7
 8006e3e:	683a      	ldr	r2, [r7, #0]
 8006e40:	429a      	cmp	r2, r3
 8006e42:	d001      	beq.n	8006e48 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006e44:	2301      	movs	r3, #1
 8006e46:	e032      	b.n	8006eae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	f003 0304 	and.w	r3, r3, #4
 8006e50:	2b00      	cmp	r3, #0
 8006e52:	d008      	beq.n	8006e66 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006e54:	4b19      	ldr	r3, [pc, #100]	@ (8006ebc <HAL_RCC_ClockConfig+0x1bc>)
 8006e56:	689b      	ldr	r3, [r3, #8]
 8006e58:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	68db      	ldr	r3, [r3, #12]
 8006e60:	4916      	ldr	r1, [pc, #88]	@ (8006ebc <HAL_RCC_ClockConfig+0x1bc>)
 8006e62:	4313      	orrs	r3, r2
 8006e64:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	681b      	ldr	r3, [r3, #0]
 8006e6a:	f003 0308 	and.w	r3, r3, #8
 8006e6e:	2b00      	cmp	r3, #0
 8006e70:	d009      	beq.n	8006e86 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006e72:	4b12      	ldr	r3, [pc, #72]	@ (8006ebc <HAL_RCC_ClockConfig+0x1bc>)
 8006e74:	689b      	ldr	r3, [r3, #8]
 8006e76:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	691b      	ldr	r3, [r3, #16]
 8006e7e:	00db      	lsls	r3, r3, #3
 8006e80:	490e      	ldr	r1, [pc, #56]	@ (8006ebc <HAL_RCC_ClockConfig+0x1bc>)
 8006e82:	4313      	orrs	r3, r2
 8006e84:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8006e86:	f000 f821 	bl	8006ecc <HAL_RCC_GetSysClockFreq>
 8006e8a:	4602      	mov	r2, r0
 8006e8c:	4b0b      	ldr	r3, [pc, #44]	@ (8006ebc <HAL_RCC_ClockConfig+0x1bc>)
 8006e8e:	689b      	ldr	r3, [r3, #8]
 8006e90:	091b      	lsrs	r3, r3, #4
 8006e92:	f003 030f 	and.w	r3, r3, #15
 8006e96:	490a      	ldr	r1, [pc, #40]	@ (8006ec0 <HAL_RCC_ClockConfig+0x1c0>)
 8006e98:	5ccb      	ldrb	r3, [r1, r3]
 8006e9a:	fa22 f303 	lsr.w	r3, r2, r3
 8006e9e:	4a09      	ldr	r2, [pc, #36]	@ (8006ec4 <HAL_RCC_ClockConfig+0x1c4>)
 8006ea0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8006ea2:	4b09      	ldr	r3, [pc, #36]	@ (8006ec8 <HAL_RCC_ClockConfig+0x1c8>)
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	f7fd fe9e 	bl	8004be8 <HAL_InitTick>

  return HAL_OK;
 8006eac:	2300      	movs	r3, #0
}
 8006eae:	4618      	mov	r0, r3
 8006eb0:	3710      	adds	r7, #16
 8006eb2:	46bd      	mov	sp, r7
 8006eb4:	bd80      	pop	{r7, pc}
 8006eb6:	bf00      	nop
 8006eb8:	40023c00 	.word	0x40023c00
 8006ebc:	40023800 	.word	0x40023800
 8006ec0:	0800fb6c 	.word	0x0800fb6c
 8006ec4:	200000a4 	.word	0x200000a4
 8006ec8:	200000a8 	.word	0x200000a8

08006ecc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006ecc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006ed0:	b094      	sub	sp, #80	@ 0x50
 8006ed2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8006ed4:	2300      	movs	r3, #0
 8006ed6:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8006ed8:	2300      	movs	r3, #0
 8006eda:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8006edc:	2300      	movs	r3, #0
 8006ede:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8006ee0:	2300      	movs	r3, #0
 8006ee2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006ee4:	4b79      	ldr	r3, [pc, #484]	@ (80070cc <HAL_RCC_GetSysClockFreq+0x200>)
 8006ee6:	689b      	ldr	r3, [r3, #8]
 8006ee8:	f003 030c 	and.w	r3, r3, #12
 8006eec:	2b08      	cmp	r3, #8
 8006eee:	d00d      	beq.n	8006f0c <HAL_RCC_GetSysClockFreq+0x40>
 8006ef0:	2b08      	cmp	r3, #8
 8006ef2:	f200 80e1 	bhi.w	80070b8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8006ef6:	2b00      	cmp	r3, #0
 8006ef8:	d002      	beq.n	8006f00 <HAL_RCC_GetSysClockFreq+0x34>
 8006efa:	2b04      	cmp	r3, #4
 8006efc:	d003      	beq.n	8006f06 <HAL_RCC_GetSysClockFreq+0x3a>
 8006efe:	e0db      	b.n	80070b8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006f00:	4b73      	ldr	r3, [pc, #460]	@ (80070d0 <HAL_RCC_GetSysClockFreq+0x204>)
 8006f02:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006f04:	e0db      	b.n	80070be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006f06:	4b73      	ldr	r3, [pc, #460]	@ (80070d4 <HAL_RCC_GetSysClockFreq+0x208>)
 8006f08:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8006f0a:	e0d8      	b.n	80070be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006f0c:	4b6f      	ldr	r3, [pc, #444]	@ (80070cc <HAL_RCC_GetSysClockFreq+0x200>)
 8006f0e:	685b      	ldr	r3, [r3, #4]
 8006f10:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8006f14:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006f16:	4b6d      	ldr	r3, [pc, #436]	@ (80070cc <HAL_RCC_GetSysClockFreq+0x200>)
 8006f18:	685b      	ldr	r3, [r3, #4]
 8006f1a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d063      	beq.n	8006fea <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006f22:	4b6a      	ldr	r3, [pc, #424]	@ (80070cc <HAL_RCC_GetSysClockFreq+0x200>)
 8006f24:	685b      	ldr	r3, [r3, #4]
 8006f26:	099b      	lsrs	r3, r3, #6
 8006f28:	2200      	movs	r2, #0
 8006f2a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8006f2c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8006f2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006f30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006f34:	633b      	str	r3, [r7, #48]	@ 0x30
 8006f36:	2300      	movs	r3, #0
 8006f38:	637b      	str	r3, [r7, #52]	@ 0x34
 8006f3a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8006f3e:	4622      	mov	r2, r4
 8006f40:	462b      	mov	r3, r5
 8006f42:	f04f 0000 	mov.w	r0, #0
 8006f46:	f04f 0100 	mov.w	r1, #0
 8006f4a:	0159      	lsls	r1, r3, #5
 8006f4c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8006f50:	0150      	lsls	r0, r2, #5
 8006f52:	4602      	mov	r2, r0
 8006f54:	460b      	mov	r3, r1
 8006f56:	4621      	mov	r1, r4
 8006f58:	1a51      	subs	r1, r2, r1
 8006f5a:	6139      	str	r1, [r7, #16]
 8006f5c:	4629      	mov	r1, r5
 8006f5e:	eb63 0301 	sbc.w	r3, r3, r1
 8006f62:	617b      	str	r3, [r7, #20]
 8006f64:	f04f 0200 	mov.w	r2, #0
 8006f68:	f04f 0300 	mov.w	r3, #0
 8006f6c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006f70:	4659      	mov	r1, fp
 8006f72:	018b      	lsls	r3, r1, #6
 8006f74:	4651      	mov	r1, sl
 8006f76:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8006f7a:	4651      	mov	r1, sl
 8006f7c:	018a      	lsls	r2, r1, #6
 8006f7e:	4651      	mov	r1, sl
 8006f80:	ebb2 0801 	subs.w	r8, r2, r1
 8006f84:	4659      	mov	r1, fp
 8006f86:	eb63 0901 	sbc.w	r9, r3, r1
 8006f8a:	f04f 0200 	mov.w	r2, #0
 8006f8e:	f04f 0300 	mov.w	r3, #0
 8006f92:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8006f96:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8006f9a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8006f9e:	4690      	mov	r8, r2
 8006fa0:	4699      	mov	r9, r3
 8006fa2:	4623      	mov	r3, r4
 8006fa4:	eb18 0303 	adds.w	r3, r8, r3
 8006fa8:	60bb      	str	r3, [r7, #8]
 8006faa:	462b      	mov	r3, r5
 8006fac:	eb49 0303 	adc.w	r3, r9, r3
 8006fb0:	60fb      	str	r3, [r7, #12]
 8006fb2:	f04f 0200 	mov.w	r2, #0
 8006fb6:	f04f 0300 	mov.w	r3, #0
 8006fba:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8006fbe:	4629      	mov	r1, r5
 8006fc0:	024b      	lsls	r3, r1, #9
 8006fc2:	4621      	mov	r1, r4
 8006fc4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8006fc8:	4621      	mov	r1, r4
 8006fca:	024a      	lsls	r2, r1, #9
 8006fcc:	4610      	mov	r0, r2
 8006fce:	4619      	mov	r1, r3
 8006fd0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006fd6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8006fd8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006fdc:	f7f9 ff42 	bl	8000e64 <__aeabi_uldivmod>
 8006fe0:	4602      	mov	r2, r0
 8006fe2:	460b      	mov	r3, r1
 8006fe4:	4613      	mov	r3, r2
 8006fe6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006fe8:	e058      	b.n	800709c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006fea:	4b38      	ldr	r3, [pc, #224]	@ (80070cc <HAL_RCC_GetSysClockFreq+0x200>)
 8006fec:	685b      	ldr	r3, [r3, #4]
 8006fee:	099b      	lsrs	r3, r3, #6
 8006ff0:	2200      	movs	r2, #0
 8006ff2:	4618      	mov	r0, r3
 8006ff4:	4611      	mov	r1, r2
 8006ff6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8006ffa:	623b      	str	r3, [r7, #32]
 8006ffc:	2300      	movs	r3, #0
 8006ffe:	627b      	str	r3, [r7, #36]	@ 0x24
 8007000:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8007004:	4642      	mov	r2, r8
 8007006:	464b      	mov	r3, r9
 8007008:	f04f 0000 	mov.w	r0, #0
 800700c:	f04f 0100 	mov.w	r1, #0
 8007010:	0159      	lsls	r1, r3, #5
 8007012:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007016:	0150      	lsls	r0, r2, #5
 8007018:	4602      	mov	r2, r0
 800701a:	460b      	mov	r3, r1
 800701c:	4641      	mov	r1, r8
 800701e:	ebb2 0a01 	subs.w	sl, r2, r1
 8007022:	4649      	mov	r1, r9
 8007024:	eb63 0b01 	sbc.w	fp, r3, r1
 8007028:	f04f 0200 	mov.w	r2, #0
 800702c:	f04f 0300 	mov.w	r3, #0
 8007030:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8007034:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8007038:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800703c:	ebb2 040a 	subs.w	r4, r2, sl
 8007040:	eb63 050b 	sbc.w	r5, r3, fp
 8007044:	f04f 0200 	mov.w	r2, #0
 8007048:	f04f 0300 	mov.w	r3, #0
 800704c:	00eb      	lsls	r3, r5, #3
 800704e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007052:	00e2      	lsls	r2, r4, #3
 8007054:	4614      	mov	r4, r2
 8007056:	461d      	mov	r5, r3
 8007058:	4643      	mov	r3, r8
 800705a:	18e3      	adds	r3, r4, r3
 800705c:	603b      	str	r3, [r7, #0]
 800705e:	464b      	mov	r3, r9
 8007060:	eb45 0303 	adc.w	r3, r5, r3
 8007064:	607b      	str	r3, [r7, #4]
 8007066:	f04f 0200 	mov.w	r2, #0
 800706a:	f04f 0300 	mov.w	r3, #0
 800706e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007072:	4629      	mov	r1, r5
 8007074:	028b      	lsls	r3, r1, #10
 8007076:	4621      	mov	r1, r4
 8007078:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800707c:	4621      	mov	r1, r4
 800707e:	028a      	lsls	r2, r1, #10
 8007080:	4610      	mov	r0, r2
 8007082:	4619      	mov	r1, r3
 8007084:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8007086:	2200      	movs	r2, #0
 8007088:	61bb      	str	r3, [r7, #24]
 800708a:	61fa      	str	r2, [r7, #28]
 800708c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007090:	f7f9 fee8 	bl	8000e64 <__aeabi_uldivmod>
 8007094:	4602      	mov	r2, r0
 8007096:	460b      	mov	r3, r1
 8007098:	4613      	mov	r3, r2
 800709a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800709c:	4b0b      	ldr	r3, [pc, #44]	@ (80070cc <HAL_RCC_GetSysClockFreq+0x200>)
 800709e:	685b      	ldr	r3, [r3, #4]
 80070a0:	0c1b      	lsrs	r3, r3, #16
 80070a2:	f003 0303 	and.w	r3, r3, #3
 80070a6:	3301      	adds	r3, #1
 80070a8:	005b      	lsls	r3, r3, #1
 80070aa:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80070ac:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80070ae:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80070b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80070b4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80070b6:	e002      	b.n	80070be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80070b8:	4b05      	ldr	r3, [pc, #20]	@ (80070d0 <HAL_RCC_GetSysClockFreq+0x204>)
 80070ba:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80070bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80070be:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80070c0:	4618      	mov	r0, r3
 80070c2:	3750      	adds	r7, #80	@ 0x50
 80070c4:	46bd      	mov	sp, r7
 80070c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80070ca:	bf00      	nop
 80070cc:	40023800 	.word	0x40023800
 80070d0:	00f42400 	.word	0x00f42400
 80070d4:	007a1200 	.word	0x007a1200

080070d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80070d8:	b480      	push	{r7}
 80070da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80070dc:	4b03      	ldr	r3, [pc, #12]	@ (80070ec <HAL_RCC_GetHCLKFreq+0x14>)
 80070de:	681b      	ldr	r3, [r3, #0]
}
 80070e0:	4618      	mov	r0, r3
 80070e2:	46bd      	mov	sp, r7
 80070e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e8:	4770      	bx	lr
 80070ea:	bf00      	nop
 80070ec:	200000a4 	.word	0x200000a4

080070f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80070f0:	b580      	push	{r7, lr}
 80070f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80070f4:	f7ff fff0 	bl	80070d8 <HAL_RCC_GetHCLKFreq>
 80070f8:	4602      	mov	r2, r0
 80070fa:	4b05      	ldr	r3, [pc, #20]	@ (8007110 <HAL_RCC_GetPCLK1Freq+0x20>)
 80070fc:	689b      	ldr	r3, [r3, #8]
 80070fe:	0a9b      	lsrs	r3, r3, #10
 8007100:	f003 0307 	and.w	r3, r3, #7
 8007104:	4903      	ldr	r1, [pc, #12]	@ (8007114 <HAL_RCC_GetPCLK1Freq+0x24>)
 8007106:	5ccb      	ldrb	r3, [r1, r3]
 8007108:	fa22 f303 	lsr.w	r3, r2, r3
}
 800710c:	4618      	mov	r0, r3
 800710e:	bd80      	pop	{r7, pc}
 8007110:	40023800 	.word	0x40023800
 8007114:	0800fb7c 	.word	0x0800fb7c

08007118 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007118:	b580      	push	{r7, lr}
 800711a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800711c:	f7ff ffdc 	bl	80070d8 <HAL_RCC_GetHCLKFreq>
 8007120:	4602      	mov	r2, r0
 8007122:	4b05      	ldr	r3, [pc, #20]	@ (8007138 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007124:	689b      	ldr	r3, [r3, #8]
 8007126:	0b5b      	lsrs	r3, r3, #13
 8007128:	f003 0307 	and.w	r3, r3, #7
 800712c:	4903      	ldr	r1, [pc, #12]	@ (800713c <HAL_RCC_GetPCLK2Freq+0x24>)
 800712e:	5ccb      	ldrb	r3, [r1, r3]
 8007130:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007134:	4618      	mov	r0, r3
 8007136:	bd80      	pop	{r7, pc}
 8007138:	40023800 	.word	0x40023800
 800713c:	0800fb7c 	.word	0x0800fb7c

08007140 <HAL_RCCEx_PeriphCLKConfig>:
  *        domain (RTC and RCC_BDCR register expect BKPSRAM) will be reset
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8007140:	b580      	push	{r7, lr}
 8007142:	b086      	sub	sp, #24
 8007144:	af00      	add	r7, sp, #0
 8007146:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007148:	2300      	movs	r3, #0
 800714a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg1 = 0U;
 800714c:	2300      	movs	r3, #0
 800714e:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*---------------------------- I2S configuration ---------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	f003 0301 	and.w	r3, r3, #1
 8007158:	2b00      	cmp	r3, #0
 800715a:	d105      	bne.n	8007168 <HAL_RCCEx_PeriphCLKConfig+0x28>
      (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	f003 0304 	and.w	r3, r3, #4
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) ||
 8007164:	2b00      	cmp	r3, #0
 8007166:	d035      	beq.n	80071d4 <HAL_RCCEx_PeriphCLKConfig+0x94>
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));
#if defined(STM32F411xE)
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
#endif /* STM32F411xE */
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8007168:	4b62      	ldr	r3, [pc, #392]	@ (80072f4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 800716a:	2200      	movs	r2, #0
 800716c:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800716e:	f7fd fd7f 	bl	8004c70 <HAL_GetTick>
 8007172:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007174:	e008      	b.n	8007188 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8007176:	f7fd fd7b 	bl	8004c70 <HAL_GetTick>
 800717a:	4602      	mov	r2, r0
 800717c:	697b      	ldr	r3, [r7, #20]
 800717e:	1ad3      	subs	r3, r2, r3
 8007180:	2b02      	cmp	r3, #2
 8007182:	d901      	bls.n	8007188 <HAL_RCCEx_PeriphCLKConfig+0x48>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8007184:	2303      	movs	r3, #3
 8007186:	e0b0      	b.n	80072ea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8007188:	4b5b      	ldr	r3, [pc, #364]	@ (80072f8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8007190:	2b00      	cmp	r3, #0
 8007192:	d1f0      	bne.n	8007176 <HAL_RCCEx_PeriphCLKConfig+0x36>
                                   PeriphClkInit->PLLI2S.PLLI2SR);
#else
    /* Configure the PLLI2S division factors */
    /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLM) */
    /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
    __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SR);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	685b      	ldr	r3, [r3, #4]
 8007198:	019a      	lsls	r2, r3, #6
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	689b      	ldr	r3, [r3, #8]
 800719e:	071b      	lsls	r3, r3, #28
 80071a0:	4955      	ldr	r1, [pc, #340]	@ (80072f8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80071a2:	4313      	orrs	r3, r2
 80071a4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
#endif /* STM32F411xE */

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80071a8:	4b52      	ldr	r3, [pc, #328]	@ (80072f4 <HAL_RCCEx_PeriphCLKConfig+0x1b4>)
 80071aa:	2201      	movs	r2, #1
 80071ac:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 80071ae:	f7fd fd5f 	bl	8004c70 <HAL_GetTick>
 80071b2:	6178      	str	r0, [r7, #20]
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80071b4:	e008      	b.n	80071c8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80071b6:	f7fd fd5b 	bl	8004c70 <HAL_GetTick>
 80071ba:	4602      	mov	r2, r0
 80071bc:	697b      	ldr	r3, [r7, #20]
 80071be:	1ad3      	subs	r3, r2, r3
 80071c0:	2b02      	cmp	r3, #2
 80071c2:	d901      	bls.n	80071c8 <HAL_RCCEx_PeriphCLKConfig+0x88>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80071c4:	2303      	movs	r3, #3
 80071c6:	e090      	b.n	80072ea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80071c8:	4b4b      	ldr	r3, [pc, #300]	@ (80072f8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 80071d0:	2b00      	cmp	r3, #0
 80071d2:	d0f0      	beq.n	80071b6 <HAL_RCCEx_PeriphCLKConfig+0x76>
      }
    }
  }

  /*---------------------------- RTC configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	681b      	ldr	r3, [r3, #0]
 80071d8:	f003 0302 	and.w	r3, r3, #2
 80071dc:	2b00      	cmp	r3, #0
 80071de:	f000 8083 	beq.w	80072e8 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80071e2:	2300      	movs	r3, #0
 80071e4:	60fb      	str	r3, [r7, #12]
 80071e6:	4b44      	ldr	r3, [pc, #272]	@ (80072f8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80071e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071ea:	4a43      	ldr	r2, [pc, #268]	@ (80072f8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80071ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80071f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80071f2:	4b41      	ldr	r3, [pc, #260]	@ (80072f8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80071f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80071f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80071fa:	60fb      	str	r3, [r7, #12]
 80071fc:	68fb      	ldr	r3, [r7, #12]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 80071fe:	4b3f      	ldr	r3, [pc, #252]	@ (80072fc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	4a3e      	ldr	r2, [pc, #248]	@ (80072fc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007204:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007208:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800720a:	f7fd fd31 	bl	8004c70 <HAL_GetTick>
 800720e:	6178      	str	r0, [r7, #20]

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8007210:	e008      	b.n	8007224 <HAL_RCCEx_PeriphCLKConfig+0xe4>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007212:	f7fd fd2d 	bl	8004c70 <HAL_GetTick>
 8007216:	4602      	mov	r2, r0
 8007218:	697b      	ldr	r3, [r7, #20]
 800721a:	1ad3      	subs	r3, r2, r3
 800721c:	2b02      	cmp	r3, #2
 800721e:	d901      	bls.n	8007224 <HAL_RCCEx_PeriphCLKConfig+0xe4>
      {
        return HAL_TIMEOUT;
 8007220:	2303      	movs	r3, #3
 8007222:	e062      	b.n	80072ea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8007224:	4b35      	ldr	r3, [pc, #212]	@ (80072fc <HAL_RCCEx_PeriphCLKConfig+0x1bc>)
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800722c:	2b00      	cmp	r3, #0
 800722e:	d0f0      	beq.n	8007212 <HAL_RCCEx_PeriphCLKConfig+0xd2>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8007230:	4b31      	ldr	r3, [pc, #196]	@ (80072f8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007232:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007234:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007238:	613b      	str	r3, [r7, #16]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800723a:	693b      	ldr	r3, [r7, #16]
 800723c:	2b00      	cmp	r3, #0
 800723e:	d02f      	beq.n	80072a0 <HAL_RCCEx_PeriphCLKConfig+0x160>
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	68db      	ldr	r3, [r3, #12]
 8007244:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8007248:	693a      	ldr	r2, [r7, #16]
 800724a:	429a      	cmp	r2, r3
 800724c:	d028      	beq.n	80072a0 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800724e:	4b2a      	ldr	r3, [pc, #168]	@ (80072f8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007250:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007252:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007256:	613b      	str	r3, [r7, #16]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8007258:	4b29      	ldr	r3, [pc, #164]	@ (8007300 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 800725a:	2201      	movs	r2, #1
 800725c:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 800725e:	4b28      	ldr	r3, [pc, #160]	@ (8007300 <HAL_RCCEx_PeriphCLKConfig+0x1c0>)
 8007260:	2200      	movs	r2, #0
 8007262:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 8007264:	4a24      	ldr	r2, [pc, #144]	@ (80072f8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007266:	693b      	ldr	r3, [r7, #16]
 8007268:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800726a:	4b23      	ldr	r3, [pc, #140]	@ (80072f8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 800726c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800726e:	f003 0301 	and.w	r3, r3, #1
 8007272:	2b01      	cmp	r3, #1
 8007274:	d114      	bne.n	80072a0 <HAL_RCCEx_PeriphCLKConfig+0x160>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 8007276:	f7fd fcfb 	bl	8004c70 <HAL_GetTick>
 800727a:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800727c:	e00a      	b.n	8007294 <HAL_RCCEx_PeriphCLKConfig+0x154>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800727e:	f7fd fcf7 	bl	8004c70 <HAL_GetTick>
 8007282:	4602      	mov	r2, r0
 8007284:	697b      	ldr	r3, [r7, #20]
 8007286:	1ad3      	subs	r3, r2, r3
 8007288:	f241 3288 	movw	r2, #5000	@ 0x1388
 800728c:	4293      	cmp	r3, r2
 800728e:	d901      	bls.n	8007294 <HAL_RCCEx_PeriphCLKConfig+0x154>
          {
            return HAL_TIMEOUT;
 8007290:	2303      	movs	r3, #3
 8007292:	e02a      	b.n	80072ea <HAL_RCCEx_PeriphCLKConfig+0x1aa>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007294:	4b18      	ldr	r3, [pc, #96]	@ (80072f8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 8007296:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8007298:	f003 0302 	and.w	r3, r3, #2
 800729c:	2b00      	cmp	r3, #0
 800729e:	d0ee      	beq.n	800727e <HAL_RCCEx_PeriphCLKConfig+0x13e>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	68db      	ldr	r3, [r3, #12]
 80072a4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80072a8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80072ac:	d10d      	bne.n	80072ca <HAL_RCCEx_PeriphCLKConfig+0x18a>
 80072ae:	4b12      	ldr	r3, [pc, #72]	@ (80072f8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80072b0:	689b      	ldr	r3, [r3, #8]
 80072b2:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	68db      	ldr	r3, [r3, #12]
 80072ba:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 80072be:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80072c2:	490d      	ldr	r1, [pc, #52]	@ (80072f8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80072c4:	4313      	orrs	r3, r2
 80072c6:	608b      	str	r3, [r1, #8]
 80072c8:	e005      	b.n	80072d6 <HAL_RCCEx_PeriphCLKConfig+0x196>
 80072ca:	4b0b      	ldr	r3, [pc, #44]	@ (80072f8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80072cc:	689b      	ldr	r3, [r3, #8]
 80072ce:	4a0a      	ldr	r2, [pc, #40]	@ (80072f8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80072d0:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 80072d4:	6093      	str	r3, [r2, #8]
 80072d6:	4b08      	ldr	r3, [pc, #32]	@ (80072f8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80072d8:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	68db      	ldr	r3, [r3, #12]
 80072de:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80072e2:	4905      	ldr	r1, [pc, #20]	@ (80072f8 <HAL_RCCEx_PeriphCLKConfig+0x1b8>)
 80072e4:	4313      	orrs	r3, r2
 80072e6:	670b      	str	r3, [r1, #112]	@ 0x70
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
  {
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
  }
#endif /* STM32F401xC || STM32F401xE || STM32F411xE */
  return HAL_OK;
 80072e8:	2300      	movs	r3, #0
}
 80072ea:	4618      	mov	r0, r3
 80072ec:	3718      	adds	r7, #24
 80072ee:	46bd      	mov	sp, r7
 80072f0:	bd80      	pop	{r7, pc}
 80072f2:	bf00      	nop
 80072f4:	42470068 	.word	0x42470068
 80072f8:	40023800 	.word	0x40023800
 80072fc:	40007000 	.word	0x40007000
 8007300:	42470e40 	.word	0x42470e40

08007304 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8007304:	b580      	push	{r7, lr}
 8007306:	b084      	sub	sp, #16
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800730c:	2301      	movs	r3, #1
 800730e:	73fb      	strb	r3, [r7, #15]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d101      	bne.n	800731a <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8007316:	2301      	movs	r3, #1
 8007318:	e073      	b.n	8007402 <HAL_RTC_Init+0xfe>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	7f5b      	ldrb	r3, [r3, #29]
 800731e:	b2db      	uxtb	r3, r3
 8007320:	2b00      	cmp	r3, #0
 8007322:	d105      	bne.n	8007330 <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	2200      	movs	r2, #0
 8007328:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 800732a:	6878      	ldr	r0, [r7, #4]
 800732c:	f7fd fa48 	bl	80047c0 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2202      	movs	r2, #2
 8007334:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	68db      	ldr	r3, [r3, #12]
 800733c:	f003 0310 	and.w	r3, r3, #16
 8007340:	2b10      	cmp	r3, #16
 8007342:	d055      	beq.n	80073f0 <HAL_RTC_Init+0xec>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	22ca      	movs	r2, #202	@ 0xca
 800734a:	625a      	str	r2, [r3, #36]	@ 0x24
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	2253      	movs	r2, #83	@ 0x53
 8007352:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8007354:	6878      	ldr	r0, [r7, #4]
 8007356:	f000 fa49 	bl	80077ec <RTC_EnterInitMode>
 800735a:	4603      	mov	r3, r0
 800735c:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800735e:	7bfb      	ldrb	r3, [r7, #15]
 8007360:	2b00      	cmp	r3, #0
 8007362:	d12c      	bne.n	80073be <HAL_RTC_Init+0xba>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	689b      	ldr	r3, [r3, #8]
 800736a:	687a      	ldr	r2, [r7, #4]
 800736c:	6812      	ldr	r2, [r2, #0]
 800736e:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8007372:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007376:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	6899      	ldr	r1, [r3, #8]
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	685a      	ldr	r2, [r3, #4]
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	691b      	ldr	r3, [r3, #16]
 8007386:	431a      	orrs	r2, r3
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	695b      	ldr	r3, [r3, #20]
 800738c:	431a      	orrs	r2, r3
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	430a      	orrs	r2, r1
 8007394:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	687a      	ldr	r2, [r7, #4]
 800739c:	68d2      	ldr	r2, [r2, #12]
 800739e:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80073a0:	687b      	ldr	r3, [r7, #4]
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	6919      	ldr	r1, [r3, #16]
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	689b      	ldr	r3, [r3, #8]
 80073aa:	041a      	lsls	r2, r3, #16
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	430a      	orrs	r2, r1
 80073b2:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80073b4:	6878      	ldr	r0, [r7, #4]
 80073b6:	f000 fa50 	bl	800785a <RTC_ExitInitMode>
 80073ba:	4603      	mov	r3, r0
 80073bc:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80073be:	7bfb      	ldrb	r3, [r7, #15]
 80073c0:	2b00      	cmp	r3, #0
 80073c2:	d110      	bne.n	80073e6 <HAL_RTC_Init+0xe2>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	681b      	ldr	r3, [r3, #0]
 80073c8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80073d2:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	681b      	ldr	r3, [r3, #0]
 80073d8:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	699a      	ldr	r2, [r3, #24]
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	681b      	ldr	r3, [r3, #0]
 80073e2:	430a      	orrs	r2, r1
 80073e4:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	22ff      	movs	r2, #255	@ 0xff
 80073ec:	625a      	str	r2, [r3, #36]	@ 0x24
 80073ee:	e001      	b.n	80073f4 <HAL_RTC_Init+0xf0>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 80073f0:	2300      	movs	r3, #0
 80073f2:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 80073f4:	7bfb      	ldrb	r3, [r7, #15]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d102      	bne.n	8007400 <HAL_RTC_Init+0xfc>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	2201      	movs	r2, #1
 80073fe:	775a      	strb	r2, [r3, #29]
  }

  return status;
 8007400:	7bfb      	ldrb	r3, [r7, #15]
}
 8007402:	4618      	mov	r0, r3
 8007404:	3710      	adds	r7, #16
 8007406:	46bd      	mov	sp, r7
 8007408:	bd80      	pop	{r7, pc}

0800740a <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800740a:	b590      	push	{r4, r7, lr}
 800740c:	b087      	sub	sp, #28
 800740e:	af00      	add	r7, sp, #0
 8007410:	60f8      	str	r0, [r7, #12]
 8007412:	60b9      	str	r1, [r7, #8]
 8007414:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8007416:	2300      	movs	r3, #0
 8007418:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	7f1b      	ldrb	r3, [r3, #28]
 800741e:	2b01      	cmp	r3, #1
 8007420:	d101      	bne.n	8007426 <HAL_RTC_SetTime+0x1c>
 8007422:	2302      	movs	r3, #2
 8007424:	e087      	b.n	8007536 <HAL_RTC_SetTime+0x12c>
 8007426:	68fb      	ldr	r3, [r7, #12]
 8007428:	2201      	movs	r2, #1
 800742a:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	2202      	movs	r2, #2
 8007430:	775a      	strb	r2, [r3, #29]

  if (Format == RTC_FORMAT_BIN)
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	2b00      	cmp	r3, #0
 8007436:	d126      	bne.n	8007486 <HAL_RTC_SetTime+0x7c>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8007438:	68fb      	ldr	r3, [r7, #12]
 800743a:	681b      	ldr	r3, [r3, #0]
 800743c:	689b      	ldr	r3, [r3, #8]
 800743e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007442:	2b00      	cmp	r3, #0
 8007444:	d102      	bne.n	800744c <HAL_RTC_SetTime+0x42>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8007446:	68bb      	ldr	r3, [r7, #8]
 8007448:	2200      	movs	r2, #0
 800744a:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 800744c:	68bb      	ldr	r3, [r7, #8]
 800744e:	781b      	ldrb	r3, [r3, #0]
 8007450:	4618      	mov	r0, r3
 8007452:	f000 fa27 	bl	80078a4 <RTC_ByteToBcd2>
 8007456:	4603      	mov	r3, r0
 8007458:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 800745a:	68bb      	ldr	r3, [r7, #8]
 800745c:	785b      	ldrb	r3, [r3, #1]
 800745e:	4618      	mov	r0, r3
 8007460:	f000 fa20 	bl	80078a4 <RTC_ByteToBcd2>
 8007464:	4603      	mov	r3, r0
 8007466:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8007468:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 800746a:	68bb      	ldr	r3, [r7, #8]
 800746c:	789b      	ldrb	r3, [r3, #2]
 800746e:	4618      	mov	r0, r3
 8007470:	f000 fa18 	bl	80078a4 <RTC_ByteToBcd2>
 8007474:	4603      	mov	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8007476:	ea44 0203 	orr.w	r2, r4, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 800747a:	68bb      	ldr	r3, [r7, #8]
 800747c:	78db      	ldrb	r3, [r3, #3]
 800747e:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8007480:	4313      	orrs	r3, r2
 8007482:	617b      	str	r3, [r7, #20]
 8007484:	e018      	b.n	80074b8 <HAL_RTC_SetTime+0xae>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8007486:	68fb      	ldr	r3, [r7, #12]
 8007488:	681b      	ldr	r3, [r3, #0]
 800748a:	689b      	ldr	r3, [r3, #8]
 800748c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007490:	2b00      	cmp	r3, #0
 8007492:	d102      	bne.n	800749a <HAL_RTC_SetTime+0x90>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8007494:	68bb      	ldr	r3, [r7, #8]
 8007496:	2200      	movs	r2, #0
 8007498:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 800749a:	68bb      	ldr	r3, [r7, #8]
 800749c:	781b      	ldrb	r3, [r3, #0]
 800749e:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80074a0:	68bb      	ldr	r3, [r7, #8]
 80074a2:	785b      	ldrb	r3, [r3, #1]
 80074a4:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80074a6:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 80074a8:	68ba      	ldr	r2, [r7, #8]
 80074aa:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80074ac:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80074ae:	68bb      	ldr	r3, [r7, #8]
 80074b0:	78db      	ldrb	r3, [r3, #3]
 80074b2:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80074b4:	4313      	orrs	r3, r2
 80074b6:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	681b      	ldr	r3, [r3, #0]
 80074bc:	22ca      	movs	r2, #202	@ 0xca
 80074be:	625a      	str	r2, [r3, #36]	@ 0x24
 80074c0:	68fb      	ldr	r3, [r7, #12]
 80074c2:	681b      	ldr	r3, [r3, #0]
 80074c4:	2253      	movs	r2, #83	@ 0x53
 80074c6:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80074c8:	68f8      	ldr	r0, [r7, #12]
 80074ca:	f000 f98f 	bl	80077ec <RTC_EnterInitMode>
 80074ce:	4603      	mov	r3, r0
 80074d0:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80074d2:	7cfb      	ldrb	r3, [r7, #19]
 80074d4:	2b00      	cmp	r3, #0
 80074d6:	d120      	bne.n	800751a <HAL_RTC_SetTime+0x110>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	681a      	ldr	r2, [r3, #0]
 80074dc:	697b      	ldr	r3, [r7, #20]
 80074de:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 80074e2:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 80074e6:	6013      	str	r3, [r2, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 80074e8:	68fb      	ldr	r3, [r7, #12]
 80074ea:	681b      	ldr	r3, [r3, #0]
 80074ec:	689a      	ldr	r2, [r3, #8]
 80074ee:	68fb      	ldr	r3, [r7, #12]
 80074f0:	681b      	ldr	r3, [r3, #0]
 80074f2:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80074f6:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 80074f8:	68fb      	ldr	r3, [r7, #12]
 80074fa:	681b      	ldr	r3, [r3, #0]
 80074fc:	6899      	ldr	r1, [r3, #8]
 80074fe:	68bb      	ldr	r3, [r7, #8]
 8007500:	68da      	ldr	r2, [r3, #12]
 8007502:	68bb      	ldr	r3, [r7, #8]
 8007504:	691b      	ldr	r3, [r3, #16]
 8007506:	431a      	orrs	r2, r3
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	681b      	ldr	r3, [r3, #0]
 800750c:	430a      	orrs	r2, r1
 800750e:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8007510:	68f8      	ldr	r0, [r7, #12]
 8007512:	f000 f9a2 	bl	800785a <RTC_ExitInitMode>
 8007516:	4603      	mov	r3, r0
 8007518:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 800751a:	7cfb      	ldrb	r3, [r7, #19]
 800751c:	2b00      	cmp	r3, #0
 800751e:	d102      	bne.n	8007526 <HAL_RTC_SetTime+0x11c>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	2201      	movs	r2, #1
 8007524:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	22ff      	movs	r2, #255	@ 0xff
 800752c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	2200      	movs	r2, #0
 8007532:	771a      	strb	r2, [r3, #28]

  return status;
 8007534:	7cfb      	ldrb	r3, [r7, #19]
}
 8007536:	4618      	mov	r0, r3
 8007538:	371c      	adds	r7, #28
 800753a:	46bd      	mov	sp, r7
 800753c:	bd90      	pop	{r4, r7, pc}

0800753e <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800753e:	b580      	push	{r7, lr}
 8007540:	b086      	sub	sp, #24
 8007542:	af00      	add	r7, sp, #0
 8007544:	60f8      	str	r0, [r7, #12]
 8007546:	60b9      	str	r1, [r7, #8]
 8007548:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 800754a:	2300      	movs	r3, #0
 800754c:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8007554:	68bb      	ldr	r3, [r7, #8]
 8007556:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8007558:	68fb      	ldr	r3, [r7, #12]
 800755a:	681b      	ldr	r3, [r3, #0]
 800755c:	691b      	ldr	r3, [r3, #16]
 800755e:	f3c3 020e 	ubfx	r2, r3, #0, #15
 8007562:	68bb      	ldr	r3, [r7, #8]
 8007564:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 8007566:	68fb      	ldr	r3, [r7, #12]
 8007568:	681b      	ldr	r3, [r3, #0]
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8007570:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 8007574:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 8007576:	697b      	ldr	r3, [r7, #20]
 8007578:	0c1b      	lsrs	r3, r3, #16
 800757a:	b2db      	uxtb	r3, r3
 800757c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007580:	b2da      	uxtb	r2, r3
 8007582:	68bb      	ldr	r3, [r7, #8]
 8007584:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 8007586:	697b      	ldr	r3, [r7, #20]
 8007588:	0a1b      	lsrs	r3, r3, #8
 800758a:	b2db      	uxtb	r3, r3
 800758c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8007590:	b2da      	uxtb	r2, r3
 8007592:	68bb      	ldr	r3, [r7, #8]
 8007594:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 8007596:	697b      	ldr	r3, [r7, #20]
 8007598:	b2db      	uxtb	r3, r3
 800759a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800759e:	b2da      	uxtb	r2, r3
 80075a0:	68bb      	ldr	r3, [r7, #8]
 80075a2:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 80075a4:	697b      	ldr	r3, [r7, #20]
 80075a6:	0d9b      	lsrs	r3, r3, #22
 80075a8:	b2db      	uxtb	r3, r3
 80075aa:	f003 0301 	and.w	r3, r3, #1
 80075ae:	b2da      	uxtb	r2, r3
 80075b0:	68bb      	ldr	r3, [r7, #8]
 80075b2:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	2b00      	cmp	r3, #0
 80075b8:	d11a      	bne.n	80075f0 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80075ba:	68bb      	ldr	r3, [r7, #8]
 80075bc:	781b      	ldrb	r3, [r3, #0]
 80075be:	4618      	mov	r0, r3
 80075c0:	f000 f98e 	bl	80078e0 <RTC_Bcd2ToByte>
 80075c4:	4603      	mov	r3, r0
 80075c6:	461a      	mov	r2, r3
 80075c8:	68bb      	ldr	r3, [r7, #8]
 80075ca:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80075cc:	68bb      	ldr	r3, [r7, #8]
 80075ce:	785b      	ldrb	r3, [r3, #1]
 80075d0:	4618      	mov	r0, r3
 80075d2:	f000 f985 	bl	80078e0 <RTC_Bcd2ToByte>
 80075d6:	4603      	mov	r3, r0
 80075d8:	461a      	mov	r2, r3
 80075da:	68bb      	ldr	r3, [r7, #8]
 80075dc:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80075de:	68bb      	ldr	r3, [r7, #8]
 80075e0:	789b      	ldrb	r3, [r3, #2]
 80075e2:	4618      	mov	r0, r3
 80075e4:	f000 f97c 	bl	80078e0 <RTC_Bcd2ToByte>
 80075e8:	4603      	mov	r3, r0
 80075ea:	461a      	mov	r2, r3
 80075ec:	68bb      	ldr	r3, [r7, #8]
 80075ee:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80075f0:	2300      	movs	r3, #0
}
 80075f2:	4618      	mov	r0, r3
 80075f4:	3718      	adds	r7, #24
 80075f6:	46bd      	mov	sp, r7
 80075f8:	bd80      	pop	{r7, pc}

080075fa <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80075fa:	b590      	push	{r4, r7, lr}
 80075fc:	b087      	sub	sp, #28
 80075fe:	af00      	add	r7, sp, #0
 8007600:	60f8      	str	r0, [r7, #12]
 8007602:	60b9      	str	r1, [r7, #8]
 8007604:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8007606:	2300      	movs	r3, #0
 8007608:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	7f1b      	ldrb	r3, [r3, #28]
 800760e:	2b01      	cmp	r3, #1
 8007610:	d101      	bne.n	8007616 <HAL_RTC_SetDate+0x1c>
 8007612:	2302      	movs	r3, #2
 8007614:	e071      	b.n	80076fa <HAL_RTC_SetDate+0x100>
 8007616:	68fb      	ldr	r3, [r7, #12]
 8007618:	2201      	movs	r2, #1
 800761a:	771a      	strb	r2, [r3, #28]

  hrtc->State = HAL_RTC_STATE_BUSY;
 800761c:	68fb      	ldr	r3, [r7, #12]
 800761e:	2202      	movs	r2, #2
 8007620:	775a      	strb	r2, [r3, #29]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	2b00      	cmp	r3, #0
 8007626:	d10e      	bne.n	8007646 <HAL_RTC_SetDate+0x4c>
 8007628:	68bb      	ldr	r3, [r7, #8]
 800762a:	785b      	ldrb	r3, [r3, #1]
 800762c:	f003 0310 	and.w	r3, r3, #16
 8007630:	2b00      	cmp	r3, #0
 8007632:	d008      	beq.n	8007646 <HAL_RTC_SetDate+0x4c>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8007634:	68bb      	ldr	r3, [r7, #8]
 8007636:	785b      	ldrb	r3, [r3, #1]
 8007638:	f023 0310 	bic.w	r3, r3, #16
 800763c:	b2db      	uxtb	r3, r3
 800763e:	330a      	adds	r3, #10
 8007640:	b2da      	uxtb	r2, r3
 8007642:	68bb      	ldr	r3, [r7, #8]
 8007644:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	2b00      	cmp	r3, #0
 800764a:	d11c      	bne.n	8007686 <HAL_RTC_SetDate+0x8c>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 800764c:	68bb      	ldr	r3, [r7, #8]
 800764e:	78db      	ldrb	r3, [r3, #3]
 8007650:	4618      	mov	r0, r3
 8007652:	f000 f927 	bl	80078a4 <RTC_ByteToBcd2>
 8007656:	4603      	mov	r3, r0
 8007658:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 800765a:	68bb      	ldr	r3, [r7, #8]
 800765c:	785b      	ldrb	r3, [r3, #1]
 800765e:	4618      	mov	r0, r3
 8007660:	f000 f920 	bl	80078a4 <RTC_ByteToBcd2>
 8007664:	4603      	mov	r3, r0
 8007666:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8007668:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 800766a:	68bb      	ldr	r3, [r7, #8]
 800766c:	789b      	ldrb	r3, [r3, #2]
 800766e:	4618      	mov	r0, r3
 8007670:	f000 f918 	bl	80078a4 <RTC_ByteToBcd2>
 8007674:	4603      	mov	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 8007676:	ea44 0203 	orr.w	r2, r4, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 800767a:	68bb      	ldr	r3, [r7, #8]
 800767c:	781b      	ldrb	r3, [r3, #0]
 800767e:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8007680:	4313      	orrs	r3, r2
 8007682:	617b      	str	r3, [r7, #20]
 8007684:	e00e      	b.n	80076a4 <HAL_RTC_SetDate+0xaa>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8007686:	68bb      	ldr	r3, [r7, #8]
 8007688:	78db      	ldrb	r3, [r3, #3]
 800768a:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 800768c:	68bb      	ldr	r3, [r7, #8]
 800768e:	785b      	ldrb	r3, [r3, #1]
 8007690:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 8007692:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 8007694:	68ba      	ldr	r2, [r7, #8]
 8007696:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 8007698:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 800769a:	68bb      	ldr	r3, [r7, #8]
 800769c:	781b      	ldrb	r3, [r3, #0]
 800769e:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80076a0:	4313      	orrs	r3, r2
 80076a2:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	681b      	ldr	r3, [r3, #0]
 80076a8:	22ca      	movs	r2, #202	@ 0xca
 80076aa:	625a      	str	r2, [r3, #36]	@ 0x24
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	2253      	movs	r2, #83	@ 0x53
 80076b2:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80076b4:	68f8      	ldr	r0, [r7, #12]
 80076b6:	f000 f899 	bl	80077ec <RTC_EnterInitMode>
 80076ba:	4603      	mov	r3, r0
 80076bc:	74fb      	strb	r3, [r7, #19]

  if (status == HAL_OK)
 80076be:	7cfb      	ldrb	r3, [r7, #19]
 80076c0:	2b00      	cmp	r3, #0
 80076c2:	d10c      	bne.n	80076de <HAL_RTC_SetDate+0xe4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	681a      	ldr	r2, [r3, #0]
 80076c8:	697b      	ldr	r3, [r7, #20]
 80076ca:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80076ce:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80076d2:	6053      	str	r3, [r2, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 80076d4:	68f8      	ldr	r0, [r7, #12]
 80076d6:	f000 f8c0 	bl	800785a <RTC_ExitInitMode>
 80076da:	4603      	mov	r3, r0
 80076dc:	74fb      	strb	r3, [r7, #19]
  }

  if (status == HAL_OK)
 80076de:	7cfb      	ldrb	r3, [r7, #19]
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d102      	bne.n	80076ea <HAL_RTC_SetDate+0xf0>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	2201      	movs	r2, #1
 80076e8:	775a      	strb	r2, [r3, #29]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80076ea:	68fb      	ldr	r3, [r7, #12]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	22ff      	movs	r2, #255	@ 0xff
 80076f0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	2200      	movs	r2, #0
 80076f6:	771a      	strb	r2, [r3, #28]

  return status;
 80076f8:	7cfb      	ldrb	r3, [r7, #19]
}
 80076fa:	4618      	mov	r0, r3
 80076fc:	371c      	adds	r7, #28
 80076fe:	46bd      	mov	sp, r7
 8007700:	bd90      	pop	{r4, r7, pc}

08007702 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8007702:	b580      	push	{r7, lr}
 8007704:	b086      	sub	sp, #24
 8007706:	af00      	add	r7, sp, #0
 8007708:	60f8      	str	r0, [r7, #12]
 800770a:	60b9      	str	r1, [r7, #8]
 800770c:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 800770e:	2300      	movs	r3, #0
 8007710:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	681b      	ldr	r3, [r3, #0]
 8007716:	685b      	ldr	r3, [r3, #4]
 8007718:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800771c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8007720:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8007722:	697b      	ldr	r3, [r7, #20]
 8007724:	0c1b      	lsrs	r3, r3, #16
 8007726:	b2da      	uxtb	r2, r3
 8007728:	68bb      	ldr	r3, [r7, #8]
 800772a:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800772c:	697b      	ldr	r3, [r7, #20]
 800772e:	0a1b      	lsrs	r3, r3, #8
 8007730:	b2db      	uxtb	r3, r3
 8007732:	f003 031f 	and.w	r3, r3, #31
 8007736:	b2da      	uxtb	r2, r3
 8007738:	68bb      	ldr	r3, [r7, #8]
 800773a:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800773c:	697b      	ldr	r3, [r7, #20]
 800773e:	b2db      	uxtb	r3, r3
 8007740:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8007744:	b2da      	uxtb	r2, r3
 8007746:	68bb      	ldr	r3, [r7, #8]
 8007748:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800774a:	697b      	ldr	r3, [r7, #20]
 800774c:	0b5b      	lsrs	r3, r3, #13
 800774e:	b2db      	uxtb	r3, r3
 8007750:	f003 0307 	and.w	r3, r3, #7
 8007754:	b2da      	uxtb	r2, r3
 8007756:	68bb      	ldr	r3, [r7, #8]
 8007758:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	2b00      	cmp	r3, #0
 800775e:	d11a      	bne.n	8007796 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8007760:	68bb      	ldr	r3, [r7, #8]
 8007762:	78db      	ldrb	r3, [r3, #3]
 8007764:	4618      	mov	r0, r3
 8007766:	f000 f8bb 	bl	80078e0 <RTC_Bcd2ToByte>
 800776a:	4603      	mov	r3, r0
 800776c:	461a      	mov	r2, r3
 800776e:	68bb      	ldr	r3, [r7, #8]
 8007770:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8007772:	68bb      	ldr	r3, [r7, #8]
 8007774:	785b      	ldrb	r3, [r3, #1]
 8007776:	4618      	mov	r0, r3
 8007778:	f000 f8b2 	bl	80078e0 <RTC_Bcd2ToByte>
 800777c:	4603      	mov	r3, r0
 800777e:	461a      	mov	r2, r3
 8007780:	68bb      	ldr	r3, [r7, #8]
 8007782:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8007784:	68bb      	ldr	r3, [r7, #8]
 8007786:	789b      	ldrb	r3, [r3, #2]
 8007788:	4618      	mov	r0, r3
 800778a:	f000 f8a9 	bl	80078e0 <RTC_Bcd2ToByte>
 800778e:	4603      	mov	r3, r0
 8007790:	461a      	mov	r2, r3
 8007792:	68bb      	ldr	r3, [r7, #8]
 8007794:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8007796:	2300      	movs	r3, #0
}
 8007798:	4618      	mov	r0, r3
 800779a:	3718      	adds	r7, #24
 800779c:	46bd      	mov	sp, r7
 800779e:	bd80      	pop	{r7, pc}

080077a0 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 80077a0:	b580      	push	{r7, lr}
 80077a2:	b084      	sub	sp, #16
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80077a8:	2300      	movs	r3, #0
 80077aa:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	4a0d      	ldr	r2, [pc, #52]	@ (80077e8 <HAL_RTC_WaitForSynchro+0x48>)
 80077b2:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80077b4:	f7fd fa5c 	bl	8004c70 <HAL_GetTick>
 80077b8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80077ba:	e009      	b.n	80077d0 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80077bc:	f7fd fa58 	bl	8004c70 <HAL_GetTick>
 80077c0:	4602      	mov	r2, r0
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	1ad3      	subs	r3, r2, r3
 80077c6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80077ca:	d901      	bls.n	80077d0 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 80077cc:	2303      	movs	r3, #3
 80077ce:	e007      	b.n	80077e0 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	68db      	ldr	r3, [r3, #12]
 80077d6:	f003 0320 	and.w	r3, r3, #32
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d0ee      	beq.n	80077bc <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 80077de:	2300      	movs	r3, #0
}
 80077e0:	4618      	mov	r0, r3
 80077e2:	3710      	adds	r7, #16
 80077e4:	46bd      	mov	sp, r7
 80077e6:	bd80      	pop	{r7, pc}
 80077e8:	00017f5f 	.word	0x00017f5f

080077ec <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80077ec:	b580      	push	{r7, lr}
 80077ee:	b084      	sub	sp, #16
 80077f0:	af00      	add	r7, sp, #0
 80077f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80077f4:	2300      	movs	r3, #0
 80077f6:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80077f8:	2300      	movs	r3, #0
 80077fa:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80077fc:	687b      	ldr	r3, [r7, #4]
 80077fe:	681b      	ldr	r3, [r3, #0]
 8007800:	68db      	ldr	r3, [r3, #12]
 8007802:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007806:	2b00      	cmp	r3, #0
 8007808:	d122      	bne.n	8007850 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	68da      	ldr	r2, [r3, #12]
 8007810:	687b      	ldr	r3, [r7, #4]
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8007818:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800781a:	f7fd fa29 	bl	8004c70 <HAL_GetTick>
 800781e:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8007820:	e00c      	b.n	800783c <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8007822:	f7fd fa25 	bl	8004c70 <HAL_GetTick>
 8007826:	4602      	mov	r2, r0
 8007828:	68bb      	ldr	r3, [r7, #8]
 800782a:	1ad3      	subs	r3, r2, r3
 800782c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8007830:	d904      	bls.n	800783c <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	2204      	movs	r2, #4
 8007836:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8007838:	2301      	movs	r3, #1
 800783a:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	68db      	ldr	r3, [r3, #12]
 8007842:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007846:	2b00      	cmp	r3, #0
 8007848:	d102      	bne.n	8007850 <RTC_EnterInitMode+0x64>
 800784a:	7bfb      	ldrb	r3, [r7, #15]
 800784c:	2b01      	cmp	r3, #1
 800784e:	d1e8      	bne.n	8007822 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8007850:	7bfb      	ldrb	r3, [r7, #15]
}
 8007852:	4618      	mov	r0, r3
 8007854:	3710      	adds	r7, #16
 8007856:	46bd      	mov	sp, r7
 8007858:	bd80      	pop	{r7, pc}

0800785a <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800785a:	b580      	push	{r7, lr}
 800785c:	b084      	sub	sp, #16
 800785e:	af00      	add	r7, sp, #0
 8007860:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007862:	2300      	movs	r3, #0
 8007864:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	68da      	ldr	r2, [r3, #12]
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8007874:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	689b      	ldr	r3, [r3, #8]
 800787c:	f003 0320 	and.w	r3, r3, #32
 8007880:	2b00      	cmp	r3, #0
 8007882:	d10a      	bne.n	800789a <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8007884:	6878      	ldr	r0, [r7, #4]
 8007886:	f7ff ff8b 	bl	80077a0 <HAL_RTC_WaitForSynchro>
 800788a:	4603      	mov	r3, r0
 800788c:	2b00      	cmp	r3, #0
 800788e:	d004      	beq.n	800789a <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8007890:	687b      	ldr	r3, [r7, #4]
 8007892:	2204      	movs	r2, #4
 8007894:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8007896:	2301      	movs	r3, #1
 8007898:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800789a:	7bfb      	ldrb	r3, [r7, #15]
}
 800789c:	4618      	mov	r0, r3
 800789e:	3710      	adds	r7, #16
 80078a0:	46bd      	mov	sp, r7
 80078a2:	bd80      	pop	{r7, pc}

080078a4 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 80078a4:	b480      	push	{r7}
 80078a6:	b085      	sub	sp, #20
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	4603      	mov	r3, r0
 80078ac:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 80078ae:	2300      	movs	r3, #0
 80078b0:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 80078b2:	e005      	b.n	80078c0 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	3301      	adds	r3, #1
 80078b8:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 80078ba:	79fb      	ldrb	r3, [r7, #7]
 80078bc:	3b0a      	subs	r3, #10
 80078be:	71fb      	strb	r3, [r7, #7]
  while (number >= 10U)
 80078c0:	79fb      	ldrb	r3, [r7, #7]
 80078c2:	2b09      	cmp	r3, #9
 80078c4:	d8f6      	bhi.n	80078b4 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	b2db      	uxtb	r3, r3
 80078ca:	011b      	lsls	r3, r3, #4
 80078cc:	b2da      	uxtb	r2, r3
 80078ce:	79fb      	ldrb	r3, [r7, #7]
 80078d0:	4313      	orrs	r3, r2
 80078d2:	b2db      	uxtb	r3, r3
}
 80078d4:	4618      	mov	r0, r3
 80078d6:	3714      	adds	r7, #20
 80078d8:	46bd      	mov	sp, r7
 80078da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078de:	4770      	bx	lr

080078e0 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 80078e0:	b480      	push	{r7}
 80078e2:	b085      	sub	sp, #20
 80078e4:	af00      	add	r7, sp, #0
 80078e6:	4603      	mov	r3, r0
 80078e8:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 80078ea:	2300      	movs	r3, #0
 80078ec:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 80078ee:	79fb      	ldrb	r3, [r7, #7]
 80078f0:	091b      	lsrs	r3, r3, #4
 80078f2:	b2db      	uxtb	r3, r3
 80078f4:	461a      	mov	r2, r3
 80078f6:	4613      	mov	r3, r2
 80078f8:	009b      	lsls	r3, r3, #2
 80078fa:	4413      	add	r3, r2
 80078fc:	005b      	lsls	r3, r3, #1
 80078fe:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	b2da      	uxtb	r2, r3
 8007904:	79fb      	ldrb	r3, [r7, #7]
 8007906:	f003 030f 	and.w	r3, r3, #15
 800790a:	b2db      	uxtb	r3, r3
 800790c:	4413      	add	r3, r2
 800790e:	b2db      	uxtb	r3, r3
}
 8007910:	4618      	mov	r0, r3
 8007912:	3714      	adds	r7, #20
 8007914:	46bd      	mov	sp, r7
 8007916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800791a:	4770      	bx	lr

0800791c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800791c:	b580      	push	{r7, lr}
 800791e:	b082      	sub	sp, #8
 8007920:	af00      	add	r7, sp, #0
 8007922:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	2b00      	cmp	r3, #0
 8007928:	d101      	bne.n	800792e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800792a:	2301      	movs	r3, #1
 800792c:	e042      	b.n	80079b4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8007934:	b2db      	uxtb	r3, r3
 8007936:	2b00      	cmp	r3, #0
 8007938:	d106      	bne.n	8007948 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	2200      	movs	r2, #0
 800793e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007942:	6878      	ldr	r0, [r7, #4]
 8007944:	f7fd f8bc 	bl	8004ac0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	2224      	movs	r2, #36	@ 0x24
 800794c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	68da      	ldr	r2, [r3, #12]
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800795e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007960:	6878      	ldr	r0, [r7, #4]
 8007962:	f000 f973 	bl	8007c4c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	681b      	ldr	r3, [r3, #0]
 800796a:	691a      	ldr	r2, [r3, #16]
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8007974:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	695a      	ldr	r2, [r3, #20]
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8007984:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	68da      	ldr	r2, [r3, #12]
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8007994:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007996:	687b      	ldr	r3, [r7, #4]
 8007998:	2200      	movs	r2, #0
 800799a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	2220      	movs	r2, #32
 80079a0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	2220      	movs	r2, #32
 80079a8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	2200      	movs	r2, #0
 80079b0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80079b2:	2300      	movs	r3, #0
}
 80079b4:	4618      	mov	r0, r3
 80079b6:	3708      	adds	r7, #8
 80079b8:	46bd      	mov	sp, r7
 80079ba:	bd80      	pop	{r7, pc}

080079bc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80079bc:	b580      	push	{r7, lr}
 80079be:	b08a      	sub	sp, #40	@ 0x28
 80079c0:	af02      	add	r7, sp, #8
 80079c2:	60f8      	str	r0, [r7, #12]
 80079c4:	60b9      	str	r1, [r7, #8]
 80079c6:	603b      	str	r3, [r7, #0]
 80079c8:	4613      	mov	r3, r2
 80079ca:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80079cc:	2300      	movs	r3, #0
 80079ce:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80079d0:	68fb      	ldr	r3, [r7, #12]
 80079d2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80079d6:	b2db      	uxtb	r3, r3
 80079d8:	2b20      	cmp	r3, #32
 80079da:	d175      	bne.n	8007ac8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80079dc:	68bb      	ldr	r3, [r7, #8]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d002      	beq.n	80079e8 <HAL_UART_Transmit+0x2c>
 80079e2:	88fb      	ldrh	r3, [r7, #6]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d101      	bne.n	80079ec <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80079e8:	2301      	movs	r3, #1
 80079ea:	e06e      	b.n	8007aca <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80079ec:	68fb      	ldr	r3, [r7, #12]
 80079ee:	2200      	movs	r2, #0
 80079f0:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80079f2:	68fb      	ldr	r3, [r7, #12]
 80079f4:	2221      	movs	r2, #33	@ 0x21
 80079f6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80079fa:	f7fd f939 	bl	8004c70 <HAL_GetTick>
 80079fe:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007a00:	68fb      	ldr	r3, [r7, #12]
 8007a02:	88fa      	ldrh	r2, [r7, #6]
 8007a04:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	88fa      	ldrh	r2, [r7, #6]
 8007a0a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	689b      	ldr	r3, [r3, #8]
 8007a10:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007a14:	d108      	bne.n	8007a28 <HAL_UART_Transmit+0x6c>
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	691b      	ldr	r3, [r3, #16]
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d104      	bne.n	8007a28 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8007a1e:	2300      	movs	r3, #0
 8007a20:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007a22:	68bb      	ldr	r3, [r7, #8]
 8007a24:	61bb      	str	r3, [r7, #24]
 8007a26:	e003      	b.n	8007a30 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8007a28:	68bb      	ldr	r3, [r7, #8]
 8007a2a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007a2c:	2300      	movs	r3, #0
 8007a2e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8007a30:	e02e      	b.n	8007a90 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007a32:	683b      	ldr	r3, [r7, #0]
 8007a34:	9300      	str	r3, [sp, #0]
 8007a36:	697b      	ldr	r3, [r7, #20]
 8007a38:	2200      	movs	r2, #0
 8007a3a:	2180      	movs	r1, #128	@ 0x80
 8007a3c:	68f8      	ldr	r0, [r7, #12]
 8007a3e:	f000 f848 	bl	8007ad2 <UART_WaitOnFlagUntilTimeout>
 8007a42:	4603      	mov	r3, r0
 8007a44:	2b00      	cmp	r3, #0
 8007a46:	d005      	beq.n	8007a54 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8007a48:	68fb      	ldr	r3, [r7, #12]
 8007a4a:	2220      	movs	r2, #32
 8007a4c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8007a50:	2303      	movs	r3, #3
 8007a52:	e03a      	b.n	8007aca <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8007a54:	69fb      	ldr	r3, [r7, #28]
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d10b      	bne.n	8007a72 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007a5a:	69bb      	ldr	r3, [r7, #24]
 8007a5c:	881b      	ldrh	r3, [r3, #0]
 8007a5e:	461a      	mov	r2, r3
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007a68:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007a6a:	69bb      	ldr	r3, [r7, #24]
 8007a6c:	3302      	adds	r3, #2
 8007a6e:	61bb      	str	r3, [r7, #24]
 8007a70:	e007      	b.n	8007a82 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007a72:	69fb      	ldr	r3, [r7, #28]
 8007a74:	781a      	ldrb	r2, [r3, #0]
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007a7c:	69fb      	ldr	r3, [r7, #28]
 8007a7e:	3301      	adds	r3, #1
 8007a80:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007a86:	b29b      	uxth	r3, r3
 8007a88:	3b01      	subs	r3, #1
 8007a8a:	b29a      	uxth	r2, r3
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8007a94:	b29b      	uxth	r3, r3
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d1cb      	bne.n	8007a32 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007a9a:	683b      	ldr	r3, [r7, #0]
 8007a9c:	9300      	str	r3, [sp, #0]
 8007a9e:	697b      	ldr	r3, [r7, #20]
 8007aa0:	2200      	movs	r2, #0
 8007aa2:	2140      	movs	r1, #64	@ 0x40
 8007aa4:	68f8      	ldr	r0, [r7, #12]
 8007aa6:	f000 f814 	bl	8007ad2 <UART_WaitOnFlagUntilTimeout>
 8007aaa:	4603      	mov	r3, r0
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d005      	beq.n	8007abc <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	2220      	movs	r2, #32
 8007ab4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8007ab8:	2303      	movs	r3, #3
 8007aba:	e006      	b.n	8007aca <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	2220      	movs	r2, #32
 8007ac0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8007ac4:	2300      	movs	r3, #0
 8007ac6:	e000      	b.n	8007aca <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8007ac8:	2302      	movs	r3, #2
  }
}
 8007aca:	4618      	mov	r0, r3
 8007acc:	3720      	adds	r7, #32
 8007ace:	46bd      	mov	sp, r7
 8007ad0:	bd80      	pop	{r7, pc}

08007ad2 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8007ad2:	b580      	push	{r7, lr}
 8007ad4:	b086      	sub	sp, #24
 8007ad6:	af00      	add	r7, sp, #0
 8007ad8:	60f8      	str	r0, [r7, #12]
 8007ada:	60b9      	str	r1, [r7, #8]
 8007adc:	603b      	str	r3, [r7, #0]
 8007ade:	4613      	mov	r3, r2
 8007ae0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007ae2:	e03b      	b.n	8007b5c <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007ae4:	6a3b      	ldr	r3, [r7, #32]
 8007ae6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8007aea:	d037      	beq.n	8007b5c <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007aec:	f7fd f8c0 	bl	8004c70 <HAL_GetTick>
 8007af0:	4602      	mov	r2, r0
 8007af2:	683b      	ldr	r3, [r7, #0]
 8007af4:	1ad3      	subs	r3, r2, r3
 8007af6:	6a3a      	ldr	r2, [r7, #32]
 8007af8:	429a      	cmp	r2, r3
 8007afa:	d302      	bcc.n	8007b02 <UART_WaitOnFlagUntilTimeout+0x30>
 8007afc:	6a3b      	ldr	r3, [r7, #32]
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d101      	bne.n	8007b06 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007b02:	2303      	movs	r3, #3
 8007b04:	e03a      	b.n	8007b7c <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	68db      	ldr	r3, [r3, #12]
 8007b0c:	f003 0304 	and.w	r3, r3, #4
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d023      	beq.n	8007b5c <UART_WaitOnFlagUntilTimeout+0x8a>
 8007b14:	68bb      	ldr	r3, [r7, #8]
 8007b16:	2b80      	cmp	r3, #128	@ 0x80
 8007b18:	d020      	beq.n	8007b5c <UART_WaitOnFlagUntilTimeout+0x8a>
 8007b1a:	68bb      	ldr	r3, [r7, #8]
 8007b1c:	2b40      	cmp	r3, #64	@ 0x40
 8007b1e:	d01d      	beq.n	8007b5c <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007b20:	68fb      	ldr	r3, [r7, #12]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	681b      	ldr	r3, [r3, #0]
 8007b26:	f003 0308 	and.w	r3, r3, #8
 8007b2a:	2b08      	cmp	r3, #8
 8007b2c:	d116      	bne.n	8007b5c <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8007b2e:	2300      	movs	r3, #0
 8007b30:	617b      	str	r3, [r7, #20]
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	617b      	str	r3, [r7, #20]
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	681b      	ldr	r3, [r3, #0]
 8007b3e:	685b      	ldr	r3, [r3, #4]
 8007b40:	617b      	str	r3, [r7, #20]
 8007b42:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007b44:	68f8      	ldr	r0, [r7, #12]
 8007b46:	f000 f81d 	bl	8007b84 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007b4a:	68fb      	ldr	r3, [r7, #12]
 8007b4c:	2208      	movs	r2, #8
 8007b4e:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	2200      	movs	r2, #0
 8007b54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8007b58:	2301      	movs	r3, #1
 8007b5a:	e00f      	b.n	8007b7c <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	681a      	ldr	r2, [r3, #0]
 8007b62:	68bb      	ldr	r3, [r7, #8]
 8007b64:	4013      	ands	r3, r2
 8007b66:	68ba      	ldr	r2, [r7, #8]
 8007b68:	429a      	cmp	r2, r3
 8007b6a:	bf0c      	ite	eq
 8007b6c:	2301      	moveq	r3, #1
 8007b6e:	2300      	movne	r3, #0
 8007b70:	b2db      	uxtb	r3, r3
 8007b72:	461a      	mov	r2, r3
 8007b74:	79fb      	ldrb	r3, [r7, #7]
 8007b76:	429a      	cmp	r2, r3
 8007b78:	d0b4      	beq.n	8007ae4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007b7a:	2300      	movs	r3, #0
}
 8007b7c:	4618      	mov	r0, r3
 8007b7e:	3718      	adds	r7, #24
 8007b80:	46bd      	mov	sp, r7
 8007b82:	bd80      	pop	{r7, pc}

08007b84 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007b84:	b480      	push	{r7}
 8007b86:	b095      	sub	sp, #84	@ 0x54
 8007b88:	af00      	add	r7, sp, #0
 8007b8a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	681b      	ldr	r3, [r3, #0]
 8007b90:	330c      	adds	r3, #12
 8007b92:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b94:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007b96:	e853 3f00 	ldrex	r3, [r3]
 8007b9a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007b9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007b9e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007ba2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	681b      	ldr	r3, [r3, #0]
 8007ba8:	330c      	adds	r3, #12
 8007baa:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8007bac:	643a      	str	r2, [r7, #64]	@ 0x40
 8007bae:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bb0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007bb2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007bb4:	e841 2300 	strex	r3, r2, [r1]
 8007bb8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007bba:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007bbc:	2b00      	cmp	r3, #0
 8007bbe:	d1e5      	bne.n	8007b8c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	681b      	ldr	r3, [r3, #0]
 8007bc4:	3314      	adds	r3, #20
 8007bc6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bc8:	6a3b      	ldr	r3, [r7, #32]
 8007bca:	e853 3f00 	ldrex	r3, [r3]
 8007bce:	61fb      	str	r3, [r7, #28]
   return(result);
 8007bd0:	69fb      	ldr	r3, [r7, #28]
 8007bd2:	f023 0301 	bic.w	r3, r3, #1
 8007bd6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	3314      	adds	r3, #20
 8007bde:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007be0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007be2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007be4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8007be6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007be8:	e841 2300 	strex	r3, r2, [r1]
 8007bec:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007bee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bf0:	2b00      	cmp	r3, #0
 8007bf2:	d1e5      	bne.n	8007bc0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007bf8:	2b01      	cmp	r3, #1
 8007bfa:	d119      	bne.n	8007c30 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007bfc:	687b      	ldr	r3, [r7, #4]
 8007bfe:	681b      	ldr	r3, [r3, #0]
 8007c00:	330c      	adds	r3, #12
 8007c02:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	e853 3f00 	ldrex	r3, [r3]
 8007c0a:	60bb      	str	r3, [r7, #8]
   return(result);
 8007c0c:	68bb      	ldr	r3, [r7, #8]
 8007c0e:	f023 0310 	bic.w	r3, r3, #16
 8007c12:	647b      	str	r3, [r7, #68]	@ 0x44
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	681b      	ldr	r3, [r3, #0]
 8007c18:	330c      	adds	r3, #12
 8007c1a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007c1c:	61ba      	str	r2, [r7, #24]
 8007c1e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c20:	6979      	ldr	r1, [r7, #20]
 8007c22:	69ba      	ldr	r2, [r7, #24]
 8007c24:	e841 2300 	strex	r3, r2, [r1]
 8007c28:	613b      	str	r3, [r7, #16]
   return(result);
 8007c2a:	693b      	ldr	r3, [r7, #16]
 8007c2c:	2b00      	cmp	r3, #0
 8007c2e:	d1e5      	bne.n	8007bfc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	2220      	movs	r2, #32
 8007c34:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	2200      	movs	r2, #0
 8007c3c:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8007c3e:	bf00      	nop
 8007c40:	3754      	adds	r7, #84	@ 0x54
 8007c42:	46bd      	mov	sp, r7
 8007c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c48:	4770      	bx	lr
	...

08007c4c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007c4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007c50:	b0c0      	sub	sp, #256	@ 0x100
 8007c52:	af00      	add	r7, sp, #0
 8007c54:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007c58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	691b      	ldr	r3, [r3, #16]
 8007c60:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8007c64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c68:	68d9      	ldr	r1, [r3, #12]
 8007c6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c6e:	681a      	ldr	r2, [r3, #0]
 8007c70:	ea40 0301 	orr.w	r3, r0, r1
 8007c74:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007c76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c7a:	689a      	ldr	r2, [r3, #8]
 8007c7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c80:	691b      	ldr	r3, [r3, #16]
 8007c82:	431a      	orrs	r2, r3
 8007c84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c88:	695b      	ldr	r3, [r3, #20]
 8007c8a:	431a      	orrs	r2, r3
 8007c8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c90:	69db      	ldr	r3, [r3, #28]
 8007c92:	4313      	orrs	r3, r2
 8007c94:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007c98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	68db      	ldr	r3, [r3, #12]
 8007ca0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8007ca4:	f021 010c 	bic.w	r1, r1, #12
 8007ca8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007cac:	681a      	ldr	r2, [r3, #0]
 8007cae:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8007cb2:	430b      	orrs	r3, r1
 8007cb4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007cb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	695b      	ldr	r3, [r3, #20]
 8007cbe:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8007cc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007cc6:	6999      	ldr	r1, [r3, #24]
 8007cc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ccc:	681a      	ldr	r2, [r3, #0]
 8007cce:	ea40 0301 	orr.w	r3, r0, r1
 8007cd2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007cd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007cd8:	681a      	ldr	r2, [r3, #0]
 8007cda:	4b8f      	ldr	r3, [pc, #572]	@ (8007f18 <UART_SetConfig+0x2cc>)
 8007cdc:	429a      	cmp	r2, r3
 8007cde:	d005      	beq.n	8007cec <UART_SetConfig+0xa0>
 8007ce0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ce4:	681a      	ldr	r2, [r3, #0]
 8007ce6:	4b8d      	ldr	r3, [pc, #564]	@ (8007f1c <UART_SetConfig+0x2d0>)
 8007ce8:	429a      	cmp	r2, r3
 8007cea:	d104      	bne.n	8007cf6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8007cec:	f7ff fa14 	bl	8007118 <HAL_RCC_GetPCLK2Freq>
 8007cf0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8007cf4:	e003      	b.n	8007cfe <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007cf6:	f7ff f9fb 	bl	80070f0 <HAL_RCC_GetPCLK1Freq>
 8007cfa:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8007cfe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d02:	69db      	ldr	r3, [r3, #28]
 8007d04:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007d08:	f040 810c 	bne.w	8007f24 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007d0c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007d10:	2200      	movs	r2, #0
 8007d12:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8007d16:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8007d1a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8007d1e:	4622      	mov	r2, r4
 8007d20:	462b      	mov	r3, r5
 8007d22:	1891      	adds	r1, r2, r2
 8007d24:	65b9      	str	r1, [r7, #88]	@ 0x58
 8007d26:	415b      	adcs	r3, r3
 8007d28:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007d2a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8007d2e:	4621      	mov	r1, r4
 8007d30:	eb12 0801 	adds.w	r8, r2, r1
 8007d34:	4629      	mov	r1, r5
 8007d36:	eb43 0901 	adc.w	r9, r3, r1
 8007d3a:	f04f 0200 	mov.w	r2, #0
 8007d3e:	f04f 0300 	mov.w	r3, #0
 8007d42:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007d46:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007d4a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007d4e:	4690      	mov	r8, r2
 8007d50:	4699      	mov	r9, r3
 8007d52:	4623      	mov	r3, r4
 8007d54:	eb18 0303 	adds.w	r3, r8, r3
 8007d58:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8007d5c:	462b      	mov	r3, r5
 8007d5e:	eb49 0303 	adc.w	r3, r9, r3
 8007d62:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8007d66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007d6a:	685b      	ldr	r3, [r3, #4]
 8007d6c:	2200      	movs	r2, #0
 8007d6e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8007d72:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8007d76:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8007d7a:	460b      	mov	r3, r1
 8007d7c:	18db      	adds	r3, r3, r3
 8007d7e:	653b      	str	r3, [r7, #80]	@ 0x50
 8007d80:	4613      	mov	r3, r2
 8007d82:	eb42 0303 	adc.w	r3, r2, r3
 8007d86:	657b      	str	r3, [r7, #84]	@ 0x54
 8007d88:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8007d8c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8007d90:	f7f9 f868 	bl	8000e64 <__aeabi_uldivmod>
 8007d94:	4602      	mov	r2, r0
 8007d96:	460b      	mov	r3, r1
 8007d98:	4b61      	ldr	r3, [pc, #388]	@ (8007f20 <UART_SetConfig+0x2d4>)
 8007d9a:	fba3 2302 	umull	r2, r3, r3, r2
 8007d9e:	095b      	lsrs	r3, r3, #5
 8007da0:	011c      	lsls	r4, r3, #4
 8007da2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007da6:	2200      	movs	r2, #0
 8007da8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8007dac:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8007db0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8007db4:	4642      	mov	r2, r8
 8007db6:	464b      	mov	r3, r9
 8007db8:	1891      	adds	r1, r2, r2
 8007dba:	64b9      	str	r1, [r7, #72]	@ 0x48
 8007dbc:	415b      	adcs	r3, r3
 8007dbe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007dc0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8007dc4:	4641      	mov	r1, r8
 8007dc6:	eb12 0a01 	adds.w	sl, r2, r1
 8007dca:	4649      	mov	r1, r9
 8007dcc:	eb43 0b01 	adc.w	fp, r3, r1
 8007dd0:	f04f 0200 	mov.w	r2, #0
 8007dd4:	f04f 0300 	mov.w	r3, #0
 8007dd8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007ddc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007de0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007de4:	4692      	mov	sl, r2
 8007de6:	469b      	mov	fp, r3
 8007de8:	4643      	mov	r3, r8
 8007dea:	eb1a 0303 	adds.w	r3, sl, r3
 8007dee:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007df2:	464b      	mov	r3, r9
 8007df4:	eb4b 0303 	adc.w	r3, fp, r3
 8007df8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8007dfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007e00:	685b      	ldr	r3, [r3, #4]
 8007e02:	2200      	movs	r2, #0
 8007e04:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007e08:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8007e0c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8007e10:	460b      	mov	r3, r1
 8007e12:	18db      	adds	r3, r3, r3
 8007e14:	643b      	str	r3, [r7, #64]	@ 0x40
 8007e16:	4613      	mov	r3, r2
 8007e18:	eb42 0303 	adc.w	r3, r2, r3
 8007e1c:	647b      	str	r3, [r7, #68]	@ 0x44
 8007e1e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8007e22:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8007e26:	f7f9 f81d 	bl	8000e64 <__aeabi_uldivmod>
 8007e2a:	4602      	mov	r2, r0
 8007e2c:	460b      	mov	r3, r1
 8007e2e:	4611      	mov	r1, r2
 8007e30:	4b3b      	ldr	r3, [pc, #236]	@ (8007f20 <UART_SetConfig+0x2d4>)
 8007e32:	fba3 2301 	umull	r2, r3, r3, r1
 8007e36:	095b      	lsrs	r3, r3, #5
 8007e38:	2264      	movs	r2, #100	@ 0x64
 8007e3a:	fb02 f303 	mul.w	r3, r2, r3
 8007e3e:	1acb      	subs	r3, r1, r3
 8007e40:	00db      	lsls	r3, r3, #3
 8007e42:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8007e46:	4b36      	ldr	r3, [pc, #216]	@ (8007f20 <UART_SetConfig+0x2d4>)
 8007e48:	fba3 2302 	umull	r2, r3, r3, r2
 8007e4c:	095b      	lsrs	r3, r3, #5
 8007e4e:	005b      	lsls	r3, r3, #1
 8007e50:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8007e54:	441c      	add	r4, r3
 8007e56:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007e5a:	2200      	movs	r2, #0
 8007e5c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8007e60:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8007e64:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8007e68:	4642      	mov	r2, r8
 8007e6a:	464b      	mov	r3, r9
 8007e6c:	1891      	adds	r1, r2, r2
 8007e6e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8007e70:	415b      	adcs	r3, r3
 8007e72:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8007e74:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8007e78:	4641      	mov	r1, r8
 8007e7a:	1851      	adds	r1, r2, r1
 8007e7c:	6339      	str	r1, [r7, #48]	@ 0x30
 8007e7e:	4649      	mov	r1, r9
 8007e80:	414b      	adcs	r3, r1
 8007e82:	637b      	str	r3, [r7, #52]	@ 0x34
 8007e84:	f04f 0200 	mov.w	r2, #0
 8007e88:	f04f 0300 	mov.w	r3, #0
 8007e8c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8007e90:	4659      	mov	r1, fp
 8007e92:	00cb      	lsls	r3, r1, #3
 8007e94:	4651      	mov	r1, sl
 8007e96:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007e9a:	4651      	mov	r1, sl
 8007e9c:	00ca      	lsls	r2, r1, #3
 8007e9e:	4610      	mov	r0, r2
 8007ea0:	4619      	mov	r1, r3
 8007ea2:	4603      	mov	r3, r0
 8007ea4:	4642      	mov	r2, r8
 8007ea6:	189b      	adds	r3, r3, r2
 8007ea8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007eac:	464b      	mov	r3, r9
 8007eae:	460a      	mov	r2, r1
 8007eb0:	eb42 0303 	adc.w	r3, r2, r3
 8007eb4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8007eb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007ebc:	685b      	ldr	r3, [r3, #4]
 8007ebe:	2200      	movs	r2, #0
 8007ec0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8007ec4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8007ec8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8007ecc:	460b      	mov	r3, r1
 8007ece:	18db      	adds	r3, r3, r3
 8007ed0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8007ed2:	4613      	mov	r3, r2
 8007ed4:	eb42 0303 	adc.w	r3, r2, r3
 8007ed8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8007eda:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8007ede:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8007ee2:	f7f8 ffbf 	bl	8000e64 <__aeabi_uldivmod>
 8007ee6:	4602      	mov	r2, r0
 8007ee8:	460b      	mov	r3, r1
 8007eea:	4b0d      	ldr	r3, [pc, #52]	@ (8007f20 <UART_SetConfig+0x2d4>)
 8007eec:	fba3 1302 	umull	r1, r3, r3, r2
 8007ef0:	095b      	lsrs	r3, r3, #5
 8007ef2:	2164      	movs	r1, #100	@ 0x64
 8007ef4:	fb01 f303 	mul.w	r3, r1, r3
 8007ef8:	1ad3      	subs	r3, r2, r3
 8007efa:	00db      	lsls	r3, r3, #3
 8007efc:	3332      	adds	r3, #50	@ 0x32
 8007efe:	4a08      	ldr	r2, [pc, #32]	@ (8007f20 <UART_SetConfig+0x2d4>)
 8007f00:	fba2 2303 	umull	r2, r3, r2, r3
 8007f04:	095b      	lsrs	r3, r3, #5
 8007f06:	f003 0207 	and.w	r2, r3, #7
 8007f0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	4422      	add	r2, r4
 8007f12:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007f14:	e106      	b.n	8008124 <UART_SetConfig+0x4d8>
 8007f16:	bf00      	nop
 8007f18:	40011000 	.word	0x40011000
 8007f1c:	40011400 	.word	0x40011400
 8007f20:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007f24:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007f28:	2200      	movs	r2, #0
 8007f2a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8007f2e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8007f32:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8007f36:	4642      	mov	r2, r8
 8007f38:	464b      	mov	r3, r9
 8007f3a:	1891      	adds	r1, r2, r2
 8007f3c:	6239      	str	r1, [r7, #32]
 8007f3e:	415b      	adcs	r3, r3
 8007f40:	627b      	str	r3, [r7, #36]	@ 0x24
 8007f42:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007f46:	4641      	mov	r1, r8
 8007f48:	1854      	adds	r4, r2, r1
 8007f4a:	4649      	mov	r1, r9
 8007f4c:	eb43 0501 	adc.w	r5, r3, r1
 8007f50:	f04f 0200 	mov.w	r2, #0
 8007f54:	f04f 0300 	mov.w	r3, #0
 8007f58:	00eb      	lsls	r3, r5, #3
 8007f5a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007f5e:	00e2      	lsls	r2, r4, #3
 8007f60:	4614      	mov	r4, r2
 8007f62:	461d      	mov	r5, r3
 8007f64:	4643      	mov	r3, r8
 8007f66:	18e3      	adds	r3, r4, r3
 8007f68:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007f6c:	464b      	mov	r3, r9
 8007f6e:	eb45 0303 	adc.w	r3, r5, r3
 8007f72:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007f76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8007f7a:	685b      	ldr	r3, [r3, #4]
 8007f7c:	2200      	movs	r2, #0
 8007f7e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007f82:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8007f86:	f04f 0200 	mov.w	r2, #0
 8007f8a:	f04f 0300 	mov.w	r3, #0
 8007f8e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8007f92:	4629      	mov	r1, r5
 8007f94:	008b      	lsls	r3, r1, #2
 8007f96:	4621      	mov	r1, r4
 8007f98:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007f9c:	4621      	mov	r1, r4
 8007f9e:	008a      	lsls	r2, r1, #2
 8007fa0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8007fa4:	f7f8 ff5e 	bl	8000e64 <__aeabi_uldivmod>
 8007fa8:	4602      	mov	r2, r0
 8007faa:	460b      	mov	r3, r1
 8007fac:	4b60      	ldr	r3, [pc, #384]	@ (8008130 <UART_SetConfig+0x4e4>)
 8007fae:	fba3 2302 	umull	r2, r3, r3, r2
 8007fb2:	095b      	lsrs	r3, r3, #5
 8007fb4:	011c      	lsls	r4, r3, #4
 8007fb6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8007fba:	2200      	movs	r2, #0
 8007fbc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007fc0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8007fc4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8007fc8:	4642      	mov	r2, r8
 8007fca:	464b      	mov	r3, r9
 8007fcc:	1891      	adds	r1, r2, r2
 8007fce:	61b9      	str	r1, [r7, #24]
 8007fd0:	415b      	adcs	r3, r3
 8007fd2:	61fb      	str	r3, [r7, #28]
 8007fd4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007fd8:	4641      	mov	r1, r8
 8007fda:	1851      	adds	r1, r2, r1
 8007fdc:	6139      	str	r1, [r7, #16]
 8007fde:	4649      	mov	r1, r9
 8007fe0:	414b      	adcs	r3, r1
 8007fe2:	617b      	str	r3, [r7, #20]
 8007fe4:	f04f 0200 	mov.w	r2, #0
 8007fe8:	f04f 0300 	mov.w	r3, #0
 8007fec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007ff0:	4659      	mov	r1, fp
 8007ff2:	00cb      	lsls	r3, r1, #3
 8007ff4:	4651      	mov	r1, sl
 8007ff6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007ffa:	4651      	mov	r1, sl
 8007ffc:	00ca      	lsls	r2, r1, #3
 8007ffe:	4610      	mov	r0, r2
 8008000:	4619      	mov	r1, r3
 8008002:	4603      	mov	r3, r0
 8008004:	4642      	mov	r2, r8
 8008006:	189b      	adds	r3, r3, r2
 8008008:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800800c:	464b      	mov	r3, r9
 800800e:	460a      	mov	r2, r1
 8008010:	eb42 0303 	adc.w	r3, r2, r3
 8008014:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8008018:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800801c:	685b      	ldr	r3, [r3, #4]
 800801e:	2200      	movs	r2, #0
 8008020:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008022:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8008024:	f04f 0200 	mov.w	r2, #0
 8008028:	f04f 0300 	mov.w	r3, #0
 800802c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8008030:	4649      	mov	r1, r9
 8008032:	008b      	lsls	r3, r1, #2
 8008034:	4641      	mov	r1, r8
 8008036:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800803a:	4641      	mov	r1, r8
 800803c:	008a      	lsls	r2, r1, #2
 800803e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8008042:	f7f8 ff0f 	bl	8000e64 <__aeabi_uldivmod>
 8008046:	4602      	mov	r2, r0
 8008048:	460b      	mov	r3, r1
 800804a:	4611      	mov	r1, r2
 800804c:	4b38      	ldr	r3, [pc, #224]	@ (8008130 <UART_SetConfig+0x4e4>)
 800804e:	fba3 2301 	umull	r2, r3, r3, r1
 8008052:	095b      	lsrs	r3, r3, #5
 8008054:	2264      	movs	r2, #100	@ 0x64
 8008056:	fb02 f303 	mul.w	r3, r2, r3
 800805a:	1acb      	subs	r3, r1, r3
 800805c:	011b      	lsls	r3, r3, #4
 800805e:	3332      	adds	r3, #50	@ 0x32
 8008060:	4a33      	ldr	r2, [pc, #204]	@ (8008130 <UART_SetConfig+0x4e4>)
 8008062:	fba2 2303 	umull	r2, r3, r2, r3
 8008066:	095b      	lsrs	r3, r3, #5
 8008068:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800806c:	441c      	add	r4, r3
 800806e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8008072:	2200      	movs	r2, #0
 8008074:	673b      	str	r3, [r7, #112]	@ 0x70
 8008076:	677a      	str	r2, [r7, #116]	@ 0x74
 8008078:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800807c:	4642      	mov	r2, r8
 800807e:	464b      	mov	r3, r9
 8008080:	1891      	adds	r1, r2, r2
 8008082:	60b9      	str	r1, [r7, #8]
 8008084:	415b      	adcs	r3, r3
 8008086:	60fb      	str	r3, [r7, #12]
 8008088:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800808c:	4641      	mov	r1, r8
 800808e:	1851      	adds	r1, r2, r1
 8008090:	6039      	str	r1, [r7, #0]
 8008092:	4649      	mov	r1, r9
 8008094:	414b      	adcs	r3, r1
 8008096:	607b      	str	r3, [r7, #4]
 8008098:	f04f 0200 	mov.w	r2, #0
 800809c:	f04f 0300 	mov.w	r3, #0
 80080a0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80080a4:	4659      	mov	r1, fp
 80080a6:	00cb      	lsls	r3, r1, #3
 80080a8:	4651      	mov	r1, sl
 80080aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80080ae:	4651      	mov	r1, sl
 80080b0:	00ca      	lsls	r2, r1, #3
 80080b2:	4610      	mov	r0, r2
 80080b4:	4619      	mov	r1, r3
 80080b6:	4603      	mov	r3, r0
 80080b8:	4642      	mov	r2, r8
 80080ba:	189b      	adds	r3, r3, r2
 80080bc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80080be:	464b      	mov	r3, r9
 80080c0:	460a      	mov	r2, r1
 80080c2:	eb42 0303 	adc.w	r3, r2, r3
 80080c6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80080c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80080cc:	685b      	ldr	r3, [r3, #4]
 80080ce:	2200      	movs	r2, #0
 80080d0:	663b      	str	r3, [r7, #96]	@ 0x60
 80080d2:	667a      	str	r2, [r7, #100]	@ 0x64
 80080d4:	f04f 0200 	mov.w	r2, #0
 80080d8:	f04f 0300 	mov.w	r3, #0
 80080dc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80080e0:	4649      	mov	r1, r9
 80080e2:	008b      	lsls	r3, r1, #2
 80080e4:	4641      	mov	r1, r8
 80080e6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80080ea:	4641      	mov	r1, r8
 80080ec:	008a      	lsls	r2, r1, #2
 80080ee:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80080f2:	f7f8 feb7 	bl	8000e64 <__aeabi_uldivmod>
 80080f6:	4602      	mov	r2, r0
 80080f8:	460b      	mov	r3, r1
 80080fa:	4b0d      	ldr	r3, [pc, #52]	@ (8008130 <UART_SetConfig+0x4e4>)
 80080fc:	fba3 1302 	umull	r1, r3, r3, r2
 8008100:	095b      	lsrs	r3, r3, #5
 8008102:	2164      	movs	r1, #100	@ 0x64
 8008104:	fb01 f303 	mul.w	r3, r1, r3
 8008108:	1ad3      	subs	r3, r2, r3
 800810a:	011b      	lsls	r3, r3, #4
 800810c:	3332      	adds	r3, #50	@ 0x32
 800810e:	4a08      	ldr	r2, [pc, #32]	@ (8008130 <UART_SetConfig+0x4e4>)
 8008110:	fba2 2303 	umull	r2, r3, r2, r3
 8008114:	095b      	lsrs	r3, r3, #5
 8008116:	f003 020f 	and.w	r2, r3, #15
 800811a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	4422      	add	r2, r4
 8008122:	609a      	str	r2, [r3, #8]
}
 8008124:	bf00      	nop
 8008126:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800812a:	46bd      	mov	sp, r7
 800812c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008130:	51eb851f 	.word	0x51eb851f

08008134 <__NVIC_SetPriority>:
{
 8008134:	b480      	push	{r7}
 8008136:	b083      	sub	sp, #12
 8008138:	af00      	add	r7, sp, #0
 800813a:	4603      	mov	r3, r0
 800813c:	6039      	str	r1, [r7, #0]
 800813e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008140:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008144:	2b00      	cmp	r3, #0
 8008146:	db0a      	blt.n	800815e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8008148:	683b      	ldr	r3, [r7, #0]
 800814a:	b2da      	uxtb	r2, r3
 800814c:	490c      	ldr	r1, [pc, #48]	@ (8008180 <__NVIC_SetPriority+0x4c>)
 800814e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8008152:	0112      	lsls	r2, r2, #4
 8008154:	b2d2      	uxtb	r2, r2
 8008156:	440b      	add	r3, r1
 8008158:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800815c:	e00a      	b.n	8008174 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800815e:	683b      	ldr	r3, [r7, #0]
 8008160:	b2da      	uxtb	r2, r3
 8008162:	4908      	ldr	r1, [pc, #32]	@ (8008184 <__NVIC_SetPriority+0x50>)
 8008164:	79fb      	ldrb	r3, [r7, #7]
 8008166:	f003 030f 	and.w	r3, r3, #15
 800816a:	3b04      	subs	r3, #4
 800816c:	0112      	lsls	r2, r2, #4
 800816e:	b2d2      	uxtb	r2, r2
 8008170:	440b      	add	r3, r1
 8008172:	761a      	strb	r2, [r3, #24]
}
 8008174:	bf00      	nop
 8008176:	370c      	adds	r7, #12
 8008178:	46bd      	mov	sp, r7
 800817a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800817e:	4770      	bx	lr
 8008180:	e000e100 	.word	0xe000e100
 8008184:	e000ed00 	.word	0xe000ed00

08008188 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8008188:	b580      	push	{r7, lr}
 800818a:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 800818c:	2100      	movs	r1, #0
 800818e:	f06f 0004 	mvn.w	r0, #4
 8008192:	f7ff ffcf 	bl	8008134 <__NVIC_SetPriority>
#endif
}
 8008196:	bf00      	nop
 8008198:	bd80      	pop	{r7, pc}
	...

0800819c <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800819c:	b480      	push	{r7}
 800819e:	b083      	sub	sp, #12
 80081a0:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80081a2:	f3ef 8305 	mrs	r3, IPSR
 80081a6:	603b      	str	r3, [r7, #0]
  return(result);
 80081a8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80081aa:	2b00      	cmp	r3, #0
 80081ac:	d003      	beq.n	80081b6 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80081ae:	f06f 0305 	mvn.w	r3, #5
 80081b2:	607b      	str	r3, [r7, #4]
 80081b4:	e00c      	b.n	80081d0 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80081b6:	4b0a      	ldr	r3, [pc, #40]	@ (80081e0 <osKernelInitialize+0x44>)
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	2b00      	cmp	r3, #0
 80081bc:	d105      	bne.n	80081ca <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80081be:	4b08      	ldr	r3, [pc, #32]	@ (80081e0 <osKernelInitialize+0x44>)
 80081c0:	2201      	movs	r2, #1
 80081c2:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80081c4:	2300      	movs	r3, #0
 80081c6:	607b      	str	r3, [r7, #4]
 80081c8:	e002      	b.n	80081d0 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80081ca:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80081ce:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80081d0:	687b      	ldr	r3, [r7, #4]
}
 80081d2:	4618      	mov	r0, r3
 80081d4:	370c      	adds	r7, #12
 80081d6:	46bd      	mov	sp, r7
 80081d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081dc:	4770      	bx	lr
 80081de:	bf00      	nop
 80081e0:	2000072c 	.word	0x2000072c

080081e4 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80081e4:	b580      	push	{r7, lr}
 80081e6:	b082      	sub	sp, #8
 80081e8:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80081ea:	f3ef 8305 	mrs	r3, IPSR
 80081ee:	603b      	str	r3, [r7, #0]
  return(result);
 80081f0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80081f2:	2b00      	cmp	r3, #0
 80081f4:	d003      	beq.n	80081fe <osKernelStart+0x1a>
    stat = osErrorISR;
 80081f6:	f06f 0305 	mvn.w	r3, #5
 80081fa:	607b      	str	r3, [r7, #4]
 80081fc:	e010      	b.n	8008220 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80081fe:	4b0b      	ldr	r3, [pc, #44]	@ (800822c <osKernelStart+0x48>)
 8008200:	681b      	ldr	r3, [r3, #0]
 8008202:	2b01      	cmp	r3, #1
 8008204:	d109      	bne.n	800821a <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8008206:	f7ff ffbf 	bl	8008188 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800820a:	4b08      	ldr	r3, [pc, #32]	@ (800822c <osKernelStart+0x48>)
 800820c:	2202      	movs	r2, #2
 800820e:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008210:	f001 f87a 	bl	8009308 <vTaskStartScheduler>
      stat = osOK;
 8008214:	2300      	movs	r3, #0
 8008216:	607b      	str	r3, [r7, #4]
 8008218:	e002      	b.n	8008220 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800821a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800821e:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008220:	687b      	ldr	r3, [r7, #4]
}
 8008222:	4618      	mov	r0, r3
 8008224:	3708      	adds	r7, #8
 8008226:	46bd      	mov	sp, r7
 8008228:	bd80      	pop	{r7, pc}
 800822a:	bf00      	nop
 800822c:	2000072c 	.word	0x2000072c

08008230 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008230:	b580      	push	{r7, lr}
 8008232:	b08e      	sub	sp, #56	@ 0x38
 8008234:	af04      	add	r7, sp, #16
 8008236:	60f8      	str	r0, [r7, #12]
 8008238:	60b9      	str	r1, [r7, #8]
 800823a:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800823c:	2300      	movs	r3, #0
 800823e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008240:	f3ef 8305 	mrs	r3, IPSR
 8008244:	617b      	str	r3, [r7, #20]
  return(result);
 8008246:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8008248:	2b00      	cmp	r3, #0
 800824a:	d17e      	bne.n	800834a <osThreadNew+0x11a>
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	2b00      	cmp	r3, #0
 8008250:	d07b      	beq.n	800834a <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8008252:	2380      	movs	r3, #128	@ 0x80
 8008254:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8008256:	2318      	movs	r3, #24
 8008258:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800825a:	2300      	movs	r3, #0
 800825c:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800825e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8008262:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	2b00      	cmp	r3, #0
 8008268:	d045      	beq.n	80082f6 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	2b00      	cmp	r3, #0
 8008270:	d002      	beq.n	8008278 <osThreadNew+0x48>
        name = attr->name;
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8008278:	687b      	ldr	r3, [r7, #4]
 800827a:	699b      	ldr	r3, [r3, #24]
 800827c:	2b00      	cmp	r3, #0
 800827e:	d002      	beq.n	8008286 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	699b      	ldr	r3, [r3, #24]
 8008284:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008286:	69fb      	ldr	r3, [r7, #28]
 8008288:	2b00      	cmp	r3, #0
 800828a:	d008      	beq.n	800829e <osThreadNew+0x6e>
 800828c:	69fb      	ldr	r3, [r7, #28]
 800828e:	2b38      	cmp	r3, #56	@ 0x38
 8008290:	d805      	bhi.n	800829e <osThreadNew+0x6e>
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	685b      	ldr	r3, [r3, #4]
 8008296:	f003 0301 	and.w	r3, r3, #1
 800829a:	2b00      	cmp	r3, #0
 800829c:	d001      	beq.n	80082a2 <osThreadNew+0x72>
        return (NULL);
 800829e:	2300      	movs	r3, #0
 80082a0:	e054      	b.n	800834c <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	695b      	ldr	r3, [r3, #20]
 80082a6:	2b00      	cmp	r3, #0
 80082a8:	d003      	beq.n	80082b2 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	695b      	ldr	r3, [r3, #20]
 80082ae:	089b      	lsrs	r3, r3, #2
 80082b0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	689b      	ldr	r3, [r3, #8]
 80082b6:	2b00      	cmp	r3, #0
 80082b8:	d00e      	beq.n	80082d8 <osThreadNew+0xa8>
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	68db      	ldr	r3, [r3, #12]
 80082be:	2b5b      	cmp	r3, #91	@ 0x5b
 80082c0:	d90a      	bls.n	80082d8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d006      	beq.n	80082d8 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	695b      	ldr	r3, [r3, #20]
 80082ce:	2b00      	cmp	r3, #0
 80082d0:	d002      	beq.n	80082d8 <osThreadNew+0xa8>
        mem = 1;
 80082d2:	2301      	movs	r3, #1
 80082d4:	61bb      	str	r3, [r7, #24]
 80082d6:	e010      	b.n	80082fa <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80082d8:	687b      	ldr	r3, [r7, #4]
 80082da:	689b      	ldr	r3, [r3, #8]
 80082dc:	2b00      	cmp	r3, #0
 80082de:	d10c      	bne.n	80082fa <osThreadNew+0xca>
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	68db      	ldr	r3, [r3, #12]
 80082e4:	2b00      	cmp	r3, #0
 80082e6:	d108      	bne.n	80082fa <osThreadNew+0xca>
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	691b      	ldr	r3, [r3, #16]
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d104      	bne.n	80082fa <osThreadNew+0xca>
          mem = 0;
 80082f0:	2300      	movs	r3, #0
 80082f2:	61bb      	str	r3, [r7, #24]
 80082f4:	e001      	b.n	80082fa <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80082f6:	2300      	movs	r3, #0
 80082f8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80082fa:	69bb      	ldr	r3, [r7, #24]
 80082fc:	2b01      	cmp	r3, #1
 80082fe:	d110      	bne.n	8008322 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8008304:	687a      	ldr	r2, [r7, #4]
 8008306:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008308:	9202      	str	r2, [sp, #8]
 800830a:	9301      	str	r3, [sp, #4]
 800830c:	69fb      	ldr	r3, [r7, #28]
 800830e:	9300      	str	r3, [sp, #0]
 8008310:	68bb      	ldr	r3, [r7, #8]
 8008312:	6a3a      	ldr	r2, [r7, #32]
 8008314:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008316:	68f8      	ldr	r0, [r7, #12]
 8008318:	f000 fe1a 	bl	8008f50 <xTaskCreateStatic>
 800831c:	4603      	mov	r3, r0
 800831e:	613b      	str	r3, [r7, #16]
 8008320:	e013      	b.n	800834a <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8008322:	69bb      	ldr	r3, [r7, #24]
 8008324:	2b00      	cmp	r3, #0
 8008326:	d110      	bne.n	800834a <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008328:	6a3b      	ldr	r3, [r7, #32]
 800832a:	b29a      	uxth	r2, r3
 800832c:	f107 0310 	add.w	r3, r7, #16
 8008330:	9301      	str	r3, [sp, #4]
 8008332:	69fb      	ldr	r3, [r7, #28]
 8008334:	9300      	str	r3, [sp, #0]
 8008336:	68bb      	ldr	r3, [r7, #8]
 8008338:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800833a:	68f8      	ldr	r0, [r7, #12]
 800833c:	f000 fe68 	bl	8009010 <xTaskCreate>
 8008340:	4603      	mov	r3, r0
 8008342:	2b01      	cmp	r3, #1
 8008344:	d001      	beq.n	800834a <osThreadNew+0x11a>
            hTask = NULL;
 8008346:	2300      	movs	r3, #0
 8008348:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800834a:	693b      	ldr	r3, [r7, #16]
}
 800834c:	4618      	mov	r0, r3
 800834e:	3728      	adds	r7, #40	@ 0x28
 8008350:	46bd      	mov	sp, r7
 8008352:	bd80      	pop	{r7, pc}

08008354 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8008354:	b580      	push	{r7, lr}
 8008356:	b084      	sub	sp, #16
 8008358:	af00      	add	r7, sp, #0
 800835a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800835c:	f3ef 8305 	mrs	r3, IPSR
 8008360:	60bb      	str	r3, [r7, #8]
  return(result);
 8008362:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008364:	2b00      	cmp	r3, #0
 8008366:	d003      	beq.n	8008370 <osDelay+0x1c>
    stat = osErrorISR;
 8008368:	f06f 0305 	mvn.w	r3, #5
 800836c:	60fb      	str	r3, [r7, #12]
 800836e:	e007      	b.n	8008380 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8008370:	2300      	movs	r3, #0
 8008372:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8008374:	687b      	ldr	r3, [r7, #4]
 8008376:	2b00      	cmp	r3, #0
 8008378:	d002      	beq.n	8008380 <osDelay+0x2c>
      vTaskDelay(ticks);
 800837a:	6878      	ldr	r0, [r7, #4]
 800837c:	f000 ff8e 	bl	800929c <vTaskDelay>
    }
  }

  return (stat);
 8008380:	68fb      	ldr	r3, [r7, #12]
}
 8008382:	4618      	mov	r0, r3
 8008384:	3710      	adds	r7, #16
 8008386:	46bd      	mov	sp, r7
 8008388:	bd80      	pop	{r7, pc}
	...

0800838c <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800838c:	b480      	push	{r7}
 800838e:	b085      	sub	sp, #20
 8008390:	af00      	add	r7, sp, #0
 8008392:	60f8      	str	r0, [r7, #12]
 8008394:	60b9      	str	r1, [r7, #8]
 8008396:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	4a07      	ldr	r2, [pc, #28]	@ (80083b8 <vApplicationGetIdleTaskMemory+0x2c>)
 800839c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800839e:	68bb      	ldr	r3, [r7, #8]
 80083a0:	4a06      	ldr	r2, [pc, #24]	@ (80083bc <vApplicationGetIdleTaskMemory+0x30>)
 80083a2:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	2280      	movs	r2, #128	@ 0x80
 80083a8:	601a      	str	r2, [r3, #0]
}
 80083aa:	bf00      	nop
 80083ac:	3714      	adds	r7, #20
 80083ae:	46bd      	mov	sp, r7
 80083b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b4:	4770      	bx	lr
 80083b6:	bf00      	nop
 80083b8:	20000730 	.word	0x20000730
 80083bc:	2000078c 	.word	0x2000078c

080083c0 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80083c0:	b480      	push	{r7}
 80083c2:	b085      	sub	sp, #20
 80083c4:	af00      	add	r7, sp, #0
 80083c6:	60f8      	str	r0, [r7, #12]
 80083c8:	60b9      	str	r1, [r7, #8]
 80083ca:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80083cc:	68fb      	ldr	r3, [r7, #12]
 80083ce:	4a07      	ldr	r2, [pc, #28]	@ (80083ec <vApplicationGetTimerTaskMemory+0x2c>)
 80083d0:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80083d2:	68bb      	ldr	r3, [r7, #8]
 80083d4:	4a06      	ldr	r2, [pc, #24]	@ (80083f0 <vApplicationGetTimerTaskMemory+0x30>)
 80083d6:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80083de:	601a      	str	r2, [r3, #0]
}
 80083e0:	bf00      	nop
 80083e2:	3714      	adds	r7, #20
 80083e4:	46bd      	mov	sp, r7
 80083e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ea:	4770      	bx	lr
 80083ec:	2000098c 	.word	0x2000098c
 80083f0:	200009e8 	.word	0x200009e8

080083f4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80083f4:	b480      	push	{r7}
 80083f6:	b083      	sub	sp, #12
 80083f8:	af00      	add	r7, sp, #0
 80083fa:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	f103 0208 	add.w	r2, r3, #8
 8008402:	687b      	ldr	r3, [r7, #4]
 8008404:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800840c:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	f103 0208 	add.w	r2, r3, #8
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	f103 0208 	add.w	r2, r3, #8
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	2200      	movs	r2, #0
 8008426:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008428:	bf00      	nop
 800842a:	370c      	adds	r7, #12
 800842c:	46bd      	mov	sp, r7
 800842e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008432:	4770      	bx	lr

08008434 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008434:	b480      	push	{r7}
 8008436:	b083      	sub	sp, #12
 8008438:	af00      	add	r7, sp, #0
 800843a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	2200      	movs	r2, #0
 8008440:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008442:	bf00      	nop
 8008444:	370c      	adds	r7, #12
 8008446:	46bd      	mov	sp, r7
 8008448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800844c:	4770      	bx	lr

0800844e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800844e:	b480      	push	{r7}
 8008450:	b085      	sub	sp, #20
 8008452:	af00      	add	r7, sp, #0
 8008454:	6078      	str	r0, [r7, #4]
 8008456:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008458:	687b      	ldr	r3, [r7, #4]
 800845a:	685b      	ldr	r3, [r3, #4]
 800845c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800845e:	683b      	ldr	r3, [r7, #0]
 8008460:	68fa      	ldr	r2, [r7, #12]
 8008462:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008464:	68fb      	ldr	r3, [r7, #12]
 8008466:	689a      	ldr	r2, [r3, #8]
 8008468:	683b      	ldr	r3, [r7, #0]
 800846a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800846c:	68fb      	ldr	r3, [r7, #12]
 800846e:	689b      	ldr	r3, [r3, #8]
 8008470:	683a      	ldr	r2, [r7, #0]
 8008472:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008474:	68fb      	ldr	r3, [r7, #12]
 8008476:	683a      	ldr	r2, [r7, #0]
 8008478:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800847a:	683b      	ldr	r3, [r7, #0]
 800847c:	687a      	ldr	r2, [r7, #4]
 800847e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	1c5a      	adds	r2, r3, #1
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	601a      	str	r2, [r3, #0]
}
 800848a:	bf00      	nop
 800848c:	3714      	adds	r7, #20
 800848e:	46bd      	mov	sp, r7
 8008490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008494:	4770      	bx	lr

08008496 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008496:	b480      	push	{r7}
 8008498:	b085      	sub	sp, #20
 800849a:	af00      	add	r7, sp, #0
 800849c:	6078      	str	r0, [r7, #4]
 800849e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80084a0:	683b      	ldr	r3, [r7, #0]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80084a6:	68bb      	ldr	r3, [r7, #8]
 80084a8:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80084ac:	d103      	bne.n	80084b6 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	691b      	ldr	r3, [r3, #16]
 80084b2:	60fb      	str	r3, [r7, #12]
 80084b4:	e00c      	b.n	80084d0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	3308      	adds	r3, #8
 80084ba:	60fb      	str	r3, [r7, #12]
 80084bc:	e002      	b.n	80084c4 <vListInsert+0x2e>
 80084be:	68fb      	ldr	r3, [r7, #12]
 80084c0:	685b      	ldr	r3, [r3, #4]
 80084c2:	60fb      	str	r3, [r7, #12]
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	685b      	ldr	r3, [r3, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	68ba      	ldr	r2, [r7, #8]
 80084cc:	429a      	cmp	r2, r3
 80084ce:	d2f6      	bcs.n	80084be <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	685a      	ldr	r2, [r3, #4]
 80084d4:	683b      	ldr	r3, [r7, #0]
 80084d6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80084d8:	683b      	ldr	r3, [r7, #0]
 80084da:	685b      	ldr	r3, [r3, #4]
 80084dc:	683a      	ldr	r2, [r7, #0]
 80084de:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80084e0:	683b      	ldr	r3, [r7, #0]
 80084e2:	68fa      	ldr	r2, [r7, #12]
 80084e4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	683a      	ldr	r2, [r7, #0]
 80084ea:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80084ec:	683b      	ldr	r3, [r7, #0]
 80084ee:	687a      	ldr	r2, [r7, #4]
 80084f0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	1c5a      	adds	r2, r3, #1
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	601a      	str	r2, [r3, #0]
}
 80084fc:	bf00      	nop
 80084fe:	3714      	adds	r7, #20
 8008500:	46bd      	mov	sp, r7
 8008502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008506:	4770      	bx	lr

08008508 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008508:	b480      	push	{r7}
 800850a:	b085      	sub	sp, #20
 800850c:	af00      	add	r7, sp, #0
 800850e:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008510:	687b      	ldr	r3, [r7, #4]
 8008512:	691b      	ldr	r3, [r3, #16]
 8008514:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	685b      	ldr	r3, [r3, #4]
 800851a:	687a      	ldr	r2, [r7, #4]
 800851c:	6892      	ldr	r2, [r2, #8]
 800851e:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	689b      	ldr	r3, [r3, #8]
 8008524:	687a      	ldr	r2, [r7, #4]
 8008526:	6852      	ldr	r2, [r2, #4]
 8008528:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	685b      	ldr	r3, [r3, #4]
 800852e:	687a      	ldr	r2, [r7, #4]
 8008530:	429a      	cmp	r2, r3
 8008532:	d103      	bne.n	800853c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008534:	687b      	ldr	r3, [r7, #4]
 8008536:	689a      	ldr	r2, [r3, #8]
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	2200      	movs	r2, #0
 8008540:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	681b      	ldr	r3, [r3, #0]
 8008546:	1e5a      	subs	r2, r3, #1
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	681b      	ldr	r3, [r3, #0]
}
 8008550:	4618      	mov	r0, r3
 8008552:	3714      	adds	r7, #20
 8008554:	46bd      	mov	sp, r7
 8008556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800855a:	4770      	bx	lr

0800855c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800855c:	b580      	push	{r7, lr}
 800855e:	b084      	sub	sp, #16
 8008560:	af00      	add	r7, sp, #0
 8008562:	6078      	str	r0, [r7, #4]
 8008564:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800856a:	68fb      	ldr	r3, [r7, #12]
 800856c:	2b00      	cmp	r3, #0
 800856e:	d10b      	bne.n	8008588 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008570:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008574:	f383 8811 	msr	BASEPRI, r3
 8008578:	f3bf 8f6f 	isb	sy
 800857c:	f3bf 8f4f 	dsb	sy
 8008580:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008582:	bf00      	nop
 8008584:	bf00      	nop
 8008586:	e7fd      	b.n	8008584 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008588:	f002 f876 	bl	800a678 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	681a      	ldr	r2, [r3, #0]
 8008590:	68fb      	ldr	r3, [r7, #12]
 8008592:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008594:	68f9      	ldr	r1, [r7, #12]
 8008596:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8008598:	fb01 f303 	mul.w	r3, r1, r3
 800859c:	441a      	add	r2, r3
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80085a2:	68fb      	ldr	r3, [r7, #12]
 80085a4:	2200      	movs	r2, #0
 80085a6:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80085a8:	68fb      	ldr	r3, [r7, #12]
 80085aa:	681a      	ldr	r2, [r3, #0]
 80085ac:	68fb      	ldr	r3, [r7, #12]
 80085ae:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	681a      	ldr	r2, [r3, #0]
 80085b4:	68fb      	ldr	r3, [r7, #12]
 80085b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80085b8:	3b01      	subs	r3, #1
 80085ba:	68f9      	ldr	r1, [r7, #12]
 80085bc:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80085be:	fb01 f303 	mul.w	r3, r1, r3
 80085c2:	441a      	add	r2, r3
 80085c4:	68fb      	ldr	r3, [r7, #12]
 80085c6:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80085c8:	68fb      	ldr	r3, [r7, #12]
 80085ca:	22ff      	movs	r2, #255	@ 0xff
 80085cc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80085d0:	68fb      	ldr	r3, [r7, #12]
 80085d2:	22ff      	movs	r2, #255	@ 0xff
 80085d4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80085d8:	683b      	ldr	r3, [r7, #0]
 80085da:	2b00      	cmp	r3, #0
 80085dc:	d114      	bne.n	8008608 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	691b      	ldr	r3, [r3, #16]
 80085e2:	2b00      	cmp	r3, #0
 80085e4:	d01a      	beq.n	800861c <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80085e6:	68fb      	ldr	r3, [r7, #12]
 80085e8:	3310      	adds	r3, #16
 80085ea:	4618      	mov	r0, r3
 80085ec:	f001 f91a 	bl	8009824 <xTaskRemoveFromEventList>
 80085f0:	4603      	mov	r3, r0
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d012      	beq.n	800861c <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80085f6:	4b0d      	ldr	r3, [pc, #52]	@ (800862c <xQueueGenericReset+0xd0>)
 80085f8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80085fc:	601a      	str	r2, [r3, #0]
 80085fe:	f3bf 8f4f 	dsb	sy
 8008602:	f3bf 8f6f 	isb	sy
 8008606:	e009      	b.n	800861c <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	3310      	adds	r3, #16
 800860c:	4618      	mov	r0, r3
 800860e:	f7ff fef1 	bl	80083f4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008612:	68fb      	ldr	r3, [r7, #12]
 8008614:	3324      	adds	r3, #36	@ 0x24
 8008616:	4618      	mov	r0, r3
 8008618:	f7ff feec 	bl	80083f4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800861c:	f002 f85e 	bl	800a6dc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008620:	2301      	movs	r3, #1
}
 8008622:	4618      	mov	r0, r3
 8008624:	3710      	adds	r7, #16
 8008626:	46bd      	mov	sp, r7
 8008628:	bd80      	pop	{r7, pc}
 800862a:	bf00      	nop
 800862c:	e000ed04 	.word	0xe000ed04

08008630 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008630:	b580      	push	{r7, lr}
 8008632:	b08e      	sub	sp, #56	@ 0x38
 8008634:	af02      	add	r7, sp, #8
 8008636:	60f8      	str	r0, [r7, #12]
 8008638:	60b9      	str	r1, [r7, #8]
 800863a:	607a      	str	r2, [r7, #4]
 800863c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800863e:	68fb      	ldr	r3, [r7, #12]
 8008640:	2b00      	cmp	r3, #0
 8008642:	d10b      	bne.n	800865c <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8008644:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008648:	f383 8811 	msr	BASEPRI, r3
 800864c:	f3bf 8f6f 	isb	sy
 8008650:	f3bf 8f4f 	dsb	sy
 8008654:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8008656:	bf00      	nop
 8008658:	bf00      	nop
 800865a:	e7fd      	b.n	8008658 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800865c:	683b      	ldr	r3, [r7, #0]
 800865e:	2b00      	cmp	r3, #0
 8008660:	d10b      	bne.n	800867a <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8008662:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008666:	f383 8811 	msr	BASEPRI, r3
 800866a:	f3bf 8f6f 	isb	sy
 800866e:	f3bf 8f4f 	dsb	sy
 8008672:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8008674:	bf00      	nop
 8008676:	bf00      	nop
 8008678:	e7fd      	b.n	8008676 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	2b00      	cmp	r3, #0
 800867e:	d002      	beq.n	8008686 <xQueueGenericCreateStatic+0x56>
 8008680:	68bb      	ldr	r3, [r7, #8]
 8008682:	2b00      	cmp	r3, #0
 8008684:	d001      	beq.n	800868a <xQueueGenericCreateStatic+0x5a>
 8008686:	2301      	movs	r3, #1
 8008688:	e000      	b.n	800868c <xQueueGenericCreateStatic+0x5c>
 800868a:	2300      	movs	r3, #0
 800868c:	2b00      	cmp	r3, #0
 800868e:	d10b      	bne.n	80086a8 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8008690:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008694:	f383 8811 	msr	BASEPRI, r3
 8008698:	f3bf 8f6f 	isb	sy
 800869c:	f3bf 8f4f 	dsb	sy
 80086a0:	623b      	str	r3, [r7, #32]
}
 80086a2:	bf00      	nop
 80086a4:	bf00      	nop
 80086a6:	e7fd      	b.n	80086a4 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	2b00      	cmp	r3, #0
 80086ac:	d102      	bne.n	80086b4 <xQueueGenericCreateStatic+0x84>
 80086ae:	68bb      	ldr	r3, [r7, #8]
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d101      	bne.n	80086b8 <xQueueGenericCreateStatic+0x88>
 80086b4:	2301      	movs	r3, #1
 80086b6:	e000      	b.n	80086ba <xQueueGenericCreateStatic+0x8a>
 80086b8:	2300      	movs	r3, #0
 80086ba:	2b00      	cmp	r3, #0
 80086bc:	d10b      	bne.n	80086d6 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 80086be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086c2:	f383 8811 	msr	BASEPRI, r3
 80086c6:	f3bf 8f6f 	isb	sy
 80086ca:	f3bf 8f4f 	dsb	sy
 80086ce:	61fb      	str	r3, [r7, #28]
}
 80086d0:	bf00      	nop
 80086d2:	bf00      	nop
 80086d4:	e7fd      	b.n	80086d2 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80086d6:	2350      	movs	r3, #80	@ 0x50
 80086d8:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80086da:	697b      	ldr	r3, [r7, #20]
 80086dc:	2b50      	cmp	r3, #80	@ 0x50
 80086de:	d00b      	beq.n	80086f8 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80086e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086e4:	f383 8811 	msr	BASEPRI, r3
 80086e8:	f3bf 8f6f 	isb	sy
 80086ec:	f3bf 8f4f 	dsb	sy
 80086f0:	61bb      	str	r3, [r7, #24]
}
 80086f2:	bf00      	nop
 80086f4:	bf00      	nop
 80086f6:	e7fd      	b.n	80086f4 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80086f8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80086fa:	683b      	ldr	r3, [r7, #0]
 80086fc:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80086fe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008700:	2b00      	cmp	r3, #0
 8008702:	d00d      	beq.n	8008720 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008704:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008706:	2201      	movs	r2, #1
 8008708:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800870c:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8008710:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008712:	9300      	str	r3, [sp, #0]
 8008714:	4613      	mov	r3, r2
 8008716:	687a      	ldr	r2, [r7, #4]
 8008718:	68b9      	ldr	r1, [r7, #8]
 800871a:	68f8      	ldr	r0, [r7, #12]
 800871c:	f000 f805 	bl	800872a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008720:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8008722:	4618      	mov	r0, r3
 8008724:	3730      	adds	r7, #48	@ 0x30
 8008726:	46bd      	mov	sp, r7
 8008728:	bd80      	pop	{r7, pc}

0800872a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800872a:	b580      	push	{r7, lr}
 800872c:	b084      	sub	sp, #16
 800872e:	af00      	add	r7, sp, #0
 8008730:	60f8      	str	r0, [r7, #12]
 8008732:	60b9      	str	r1, [r7, #8]
 8008734:	607a      	str	r2, [r7, #4]
 8008736:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008738:	68bb      	ldr	r3, [r7, #8]
 800873a:	2b00      	cmp	r3, #0
 800873c:	d103      	bne.n	8008746 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800873e:	69bb      	ldr	r3, [r7, #24]
 8008740:	69ba      	ldr	r2, [r7, #24]
 8008742:	601a      	str	r2, [r3, #0]
 8008744:	e002      	b.n	800874c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008746:	69bb      	ldr	r3, [r7, #24]
 8008748:	687a      	ldr	r2, [r7, #4]
 800874a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800874c:	69bb      	ldr	r3, [r7, #24]
 800874e:	68fa      	ldr	r2, [r7, #12]
 8008750:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008752:	69bb      	ldr	r3, [r7, #24]
 8008754:	68ba      	ldr	r2, [r7, #8]
 8008756:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008758:	2101      	movs	r1, #1
 800875a:	69b8      	ldr	r0, [r7, #24]
 800875c:	f7ff fefe 	bl	800855c <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008760:	69bb      	ldr	r3, [r7, #24]
 8008762:	78fa      	ldrb	r2, [r7, #3]
 8008764:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008768:	bf00      	nop
 800876a:	3710      	adds	r7, #16
 800876c:	46bd      	mov	sp, r7
 800876e:	bd80      	pop	{r7, pc}

08008770 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008770:	b580      	push	{r7, lr}
 8008772:	b08e      	sub	sp, #56	@ 0x38
 8008774:	af00      	add	r7, sp, #0
 8008776:	60f8      	str	r0, [r7, #12]
 8008778:	60b9      	str	r1, [r7, #8]
 800877a:	607a      	str	r2, [r7, #4]
 800877c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800877e:	2300      	movs	r3, #0
 8008780:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008782:	68fb      	ldr	r3, [r7, #12]
 8008784:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8008786:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008788:	2b00      	cmp	r3, #0
 800878a:	d10b      	bne.n	80087a4 <xQueueGenericSend+0x34>
	__asm volatile
 800878c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008790:	f383 8811 	msr	BASEPRI, r3
 8008794:	f3bf 8f6f 	isb	sy
 8008798:	f3bf 8f4f 	dsb	sy
 800879c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800879e:	bf00      	nop
 80087a0:	bf00      	nop
 80087a2:	e7fd      	b.n	80087a0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80087a4:	68bb      	ldr	r3, [r7, #8]
 80087a6:	2b00      	cmp	r3, #0
 80087a8:	d103      	bne.n	80087b2 <xQueueGenericSend+0x42>
 80087aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80087ae:	2b00      	cmp	r3, #0
 80087b0:	d101      	bne.n	80087b6 <xQueueGenericSend+0x46>
 80087b2:	2301      	movs	r3, #1
 80087b4:	e000      	b.n	80087b8 <xQueueGenericSend+0x48>
 80087b6:	2300      	movs	r3, #0
 80087b8:	2b00      	cmp	r3, #0
 80087ba:	d10b      	bne.n	80087d4 <xQueueGenericSend+0x64>
	__asm volatile
 80087bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087c0:	f383 8811 	msr	BASEPRI, r3
 80087c4:	f3bf 8f6f 	isb	sy
 80087c8:	f3bf 8f4f 	dsb	sy
 80087cc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80087ce:	bf00      	nop
 80087d0:	bf00      	nop
 80087d2:	e7fd      	b.n	80087d0 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80087d4:	683b      	ldr	r3, [r7, #0]
 80087d6:	2b02      	cmp	r3, #2
 80087d8:	d103      	bne.n	80087e2 <xQueueGenericSend+0x72>
 80087da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80087dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80087de:	2b01      	cmp	r3, #1
 80087e0:	d101      	bne.n	80087e6 <xQueueGenericSend+0x76>
 80087e2:	2301      	movs	r3, #1
 80087e4:	e000      	b.n	80087e8 <xQueueGenericSend+0x78>
 80087e6:	2300      	movs	r3, #0
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d10b      	bne.n	8008804 <xQueueGenericSend+0x94>
	__asm volatile
 80087ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80087f0:	f383 8811 	msr	BASEPRI, r3
 80087f4:	f3bf 8f6f 	isb	sy
 80087f8:	f3bf 8f4f 	dsb	sy
 80087fc:	623b      	str	r3, [r7, #32]
}
 80087fe:	bf00      	nop
 8008800:	bf00      	nop
 8008802:	e7fd      	b.n	8008800 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008804:	f001 f9ce 	bl	8009ba4 <xTaskGetSchedulerState>
 8008808:	4603      	mov	r3, r0
 800880a:	2b00      	cmp	r3, #0
 800880c:	d102      	bne.n	8008814 <xQueueGenericSend+0xa4>
 800880e:	687b      	ldr	r3, [r7, #4]
 8008810:	2b00      	cmp	r3, #0
 8008812:	d101      	bne.n	8008818 <xQueueGenericSend+0xa8>
 8008814:	2301      	movs	r3, #1
 8008816:	e000      	b.n	800881a <xQueueGenericSend+0xaa>
 8008818:	2300      	movs	r3, #0
 800881a:	2b00      	cmp	r3, #0
 800881c:	d10b      	bne.n	8008836 <xQueueGenericSend+0xc6>
	__asm volatile
 800881e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008822:	f383 8811 	msr	BASEPRI, r3
 8008826:	f3bf 8f6f 	isb	sy
 800882a:	f3bf 8f4f 	dsb	sy
 800882e:	61fb      	str	r3, [r7, #28]
}
 8008830:	bf00      	nop
 8008832:	bf00      	nop
 8008834:	e7fd      	b.n	8008832 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008836:	f001 ff1f 	bl	800a678 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800883a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800883c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800883e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008840:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008842:	429a      	cmp	r2, r3
 8008844:	d302      	bcc.n	800884c <xQueueGenericSend+0xdc>
 8008846:	683b      	ldr	r3, [r7, #0]
 8008848:	2b02      	cmp	r3, #2
 800884a:	d129      	bne.n	80088a0 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800884c:	683a      	ldr	r2, [r7, #0]
 800884e:	68b9      	ldr	r1, [r7, #8]
 8008850:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008852:	f000 fa0f 	bl	8008c74 <prvCopyDataToQueue>
 8008856:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008858:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800885a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800885c:	2b00      	cmp	r3, #0
 800885e:	d010      	beq.n	8008882 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008860:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008862:	3324      	adds	r3, #36	@ 0x24
 8008864:	4618      	mov	r0, r3
 8008866:	f000 ffdd 	bl	8009824 <xTaskRemoveFromEventList>
 800886a:	4603      	mov	r3, r0
 800886c:	2b00      	cmp	r3, #0
 800886e:	d013      	beq.n	8008898 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8008870:	4b3f      	ldr	r3, [pc, #252]	@ (8008970 <xQueueGenericSend+0x200>)
 8008872:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008876:	601a      	str	r2, [r3, #0]
 8008878:	f3bf 8f4f 	dsb	sy
 800887c:	f3bf 8f6f 	isb	sy
 8008880:	e00a      	b.n	8008898 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8008882:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008884:	2b00      	cmp	r3, #0
 8008886:	d007      	beq.n	8008898 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8008888:	4b39      	ldr	r3, [pc, #228]	@ (8008970 <xQueueGenericSend+0x200>)
 800888a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800888e:	601a      	str	r2, [r3, #0]
 8008890:	f3bf 8f4f 	dsb	sy
 8008894:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8008898:	f001 ff20 	bl	800a6dc <vPortExitCritical>
				return pdPASS;
 800889c:	2301      	movs	r3, #1
 800889e:	e063      	b.n	8008968 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	2b00      	cmp	r3, #0
 80088a4:	d103      	bne.n	80088ae <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80088a6:	f001 ff19 	bl	800a6dc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80088aa:	2300      	movs	r3, #0
 80088ac:	e05c      	b.n	8008968 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80088ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d106      	bne.n	80088c2 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80088b4:	f107 0314 	add.w	r3, r7, #20
 80088b8:	4618      	mov	r0, r3
 80088ba:	f001 f817 	bl	80098ec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80088be:	2301      	movs	r3, #1
 80088c0:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80088c2:	f001 ff0b 	bl	800a6dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80088c6:	f000 fd87 	bl	80093d8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80088ca:	f001 fed5 	bl	800a678 <vPortEnterCritical>
 80088ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088d0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80088d4:	b25b      	sxtb	r3, r3
 80088d6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80088da:	d103      	bne.n	80088e4 <xQueueGenericSend+0x174>
 80088dc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088de:	2200      	movs	r2, #0
 80088e0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80088e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088e6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80088ea:	b25b      	sxtb	r3, r3
 80088ec:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 80088f0:	d103      	bne.n	80088fa <xQueueGenericSend+0x18a>
 80088f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80088f4:	2200      	movs	r2, #0
 80088f6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80088fa:	f001 feef 	bl	800a6dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80088fe:	1d3a      	adds	r2, r7, #4
 8008900:	f107 0314 	add.w	r3, r7, #20
 8008904:	4611      	mov	r1, r2
 8008906:	4618      	mov	r0, r3
 8008908:	f001 f806 	bl	8009918 <xTaskCheckForTimeOut>
 800890c:	4603      	mov	r3, r0
 800890e:	2b00      	cmp	r3, #0
 8008910:	d124      	bne.n	800895c <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8008912:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008914:	f000 faa6 	bl	8008e64 <prvIsQueueFull>
 8008918:	4603      	mov	r3, r0
 800891a:	2b00      	cmp	r3, #0
 800891c:	d018      	beq.n	8008950 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800891e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008920:	3310      	adds	r3, #16
 8008922:	687a      	ldr	r2, [r7, #4]
 8008924:	4611      	mov	r1, r2
 8008926:	4618      	mov	r0, r3
 8008928:	f000 ff2a 	bl	8009780 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800892c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800892e:	f000 fa31 	bl	8008d94 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8008932:	f000 fd5f 	bl	80093f4 <xTaskResumeAll>
 8008936:	4603      	mov	r3, r0
 8008938:	2b00      	cmp	r3, #0
 800893a:	f47f af7c 	bne.w	8008836 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800893e:	4b0c      	ldr	r3, [pc, #48]	@ (8008970 <xQueueGenericSend+0x200>)
 8008940:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008944:	601a      	str	r2, [r3, #0]
 8008946:	f3bf 8f4f 	dsb	sy
 800894a:	f3bf 8f6f 	isb	sy
 800894e:	e772      	b.n	8008836 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8008950:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8008952:	f000 fa1f 	bl	8008d94 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008956:	f000 fd4d 	bl	80093f4 <xTaskResumeAll>
 800895a:	e76c      	b.n	8008836 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800895c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800895e:	f000 fa19 	bl	8008d94 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008962:	f000 fd47 	bl	80093f4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8008966:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8008968:	4618      	mov	r0, r3
 800896a:	3738      	adds	r7, #56	@ 0x38
 800896c:	46bd      	mov	sp, r7
 800896e:	bd80      	pop	{r7, pc}
 8008970:	e000ed04 	.word	0xe000ed04

08008974 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8008974:	b580      	push	{r7, lr}
 8008976:	b090      	sub	sp, #64	@ 0x40
 8008978:	af00      	add	r7, sp, #0
 800897a:	60f8      	str	r0, [r7, #12]
 800897c:	60b9      	str	r1, [r7, #8]
 800897e:	607a      	str	r2, [r7, #4]
 8008980:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8008986:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008988:	2b00      	cmp	r3, #0
 800898a:	d10b      	bne.n	80089a4 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 800898c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008990:	f383 8811 	msr	BASEPRI, r3
 8008994:	f3bf 8f6f 	isb	sy
 8008998:	f3bf 8f4f 	dsb	sy
 800899c:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800899e:	bf00      	nop
 80089a0:	bf00      	nop
 80089a2:	e7fd      	b.n	80089a0 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80089a4:	68bb      	ldr	r3, [r7, #8]
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d103      	bne.n	80089b2 <xQueueGenericSendFromISR+0x3e>
 80089aa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80089ae:	2b00      	cmp	r3, #0
 80089b0:	d101      	bne.n	80089b6 <xQueueGenericSendFromISR+0x42>
 80089b2:	2301      	movs	r3, #1
 80089b4:	e000      	b.n	80089b8 <xQueueGenericSendFromISR+0x44>
 80089b6:	2300      	movs	r3, #0
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d10b      	bne.n	80089d4 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80089bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089c0:	f383 8811 	msr	BASEPRI, r3
 80089c4:	f3bf 8f6f 	isb	sy
 80089c8:	f3bf 8f4f 	dsb	sy
 80089cc:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80089ce:	bf00      	nop
 80089d0:	bf00      	nop
 80089d2:	e7fd      	b.n	80089d0 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80089d4:	683b      	ldr	r3, [r7, #0]
 80089d6:	2b02      	cmp	r3, #2
 80089d8:	d103      	bne.n	80089e2 <xQueueGenericSendFromISR+0x6e>
 80089da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80089dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80089de:	2b01      	cmp	r3, #1
 80089e0:	d101      	bne.n	80089e6 <xQueueGenericSendFromISR+0x72>
 80089e2:	2301      	movs	r3, #1
 80089e4:	e000      	b.n	80089e8 <xQueueGenericSendFromISR+0x74>
 80089e6:	2300      	movs	r3, #0
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d10b      	bne.n	8008a04 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80089ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80089f0:	f383 8811 	msr	BASEPRI, r3
 80089f4:	f3bf 8f6f 	isb	sy
 80089f8:	f3bf 8f4f 	dsb	sy
 80089fc:	623b      	str	r3, [r7, #32]
}
 80089fe:	bf00      	nop
 8008a00:	bf00      	nop
 8008a02:	e7fd      	b.n	8008a00 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8008a04:	f001 ff18 	bl	800a838 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8008a08:	f3ef 8211 	mrs	r2, BASEPRI
 8008a0c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a10:	f383 8811 	msr	BASEPRI, r3
 8008a14:	f3bf 8f6f 	isb	sy
 8008a18:	f3bf 8f4f 	dsb	sy
 8008a1c:	61fa      	str	r2, [r7, #28]
 8008a1e:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8008a20:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8008a22:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8008a24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a26:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008a28:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a2a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008a2c:	429a      	cmp	r2, r3
 8008a2e:	d302      	bcc.n	8008a36 <xQueueGenericSendFromISR+0xc2>
 8008a30:	683b      	ldr	r3, [r7, #0]
 8008a32:	2b02      	cmp	r3, #2
 8008a34:	d12f      	bne.n	8008a96 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8008a36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a38:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008a3c:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008a40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a42:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008a44:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8008a46:	683a      	ldr	r2, [r7, #0]
 8008a48:	68b9      	ldr	r1, [r7, #8]
 8008a4a:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8008a4c:	f000 f912 	bl	8008c74 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8008a50:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8008a54:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008a58:	d112      	bne.n	8008a80 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008a5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a5c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008a5e:	2b00      	cmp	r3, #0
 8008a60:	d016      	beq.n	8008a90 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008a62:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a64:	3324      	adds	r3, #36	@ 0x24
 8008a66:	4618      	mov	r0, r3
 8008a68:	f000 fedc 	bl	8009824 <xTaskRemoveFromEventList>
 8008a6c:	4603      	mov	r3, r0
 8008a6e:	2b00      	cmp	r3, #0
 8008a70:	d00e      	beq.n	8008a90 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8008a72:	687b      	ldr	r3, [r7, #4]
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d00b      	beq.n	8008a90 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	2201      	movs	r2, #1
 8008a7c:	601a      	str	r2, [r3, #0]
 8008a7e:	e007      	b.n	8008a90 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8008a80:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8008a84:	3301      	adds	r3, #1
 8008a86:	b2db      	uxtb	r3, r3
 8008a88:	b25a      	sxtb	r2, r3
 8008a8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a8c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8008a90:	2301      	movs	r3, #1
 8008a92:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8008a94:	e001      	b.n	8008a9a <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8008a96:	2300      	movs	r3, #0
 8008a98:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8008a9a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008a9c:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008a9e:	697b      	ldr	r3, [r7, #20]
 8008aa0:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008aa4:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8008aa6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8008aa8:	4618      	mov	r0, r3
 8008aaa:	3740      	adds	r7, #64	@ 0x40
 8008aac:	46bd      	mov	sp, r7
 8008aae:	bd80      	pop	{r7, pc}

08008ab0 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8008ab0:	b580      	push	{r7, lr}
 8008ab2:	b08c      	sub	sp, #48	@ 0x30
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	60f8      	str	r0, [r7, #12]
 8008ab8:	60b9      	str	r1, [r7, #8]
 8008aba:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8008abc:	2300      	movs	r3, #0
 8008abe:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8008ac4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d10b      	bne.n	8008ae2 <xQueueReceive+0x32>
	__asm volatile
 8008aca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008ace:	f383 8811 	msr	BASEPRI, r3
 8008ad2:	f3bf 8f6f 	isb	sy
 8008ad6:	f3bf 8f4f 	dsb	sy
 8008ada:	623b      	str	r3, [r7, #32]
}
 8008adc:	bf00      	nop
 8008ade:	bf00      	nop
 8008ae0:	e7fd      	b.n	8008ade <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8008ae2:	68bb      	ldr	r3, [r7, #8]
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d103      	bne.n	8008af0 <xQueueReceive+0x40>
 8008ae8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008aea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d101      	bne.n	8008af4 <xQueueReceive+0x44>
 8008af0:	2301      	movs	r3, #1
 8008af2:	e000      	b.n	8008af6 <xQueueReceive+0x46>
 8008af4:	2300      	movs	r3, #0
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d10b      	bne.n	8008b12 <xQueueReceive+0x62>
	__asm volatile
 8008afa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008afe:	f383 8811 	msr	BASEPRI, r3
 8008b02:	f3bf 8f6f 	isb	sy
 8008b06:	f3bf 8f4f 	dsb	sy
 8008b0a:	61fb      	str	r3, [r7, #28]
}
 8008b0c:	bf00      	nop
 8008b0e:	bf00      	nop
 8008b10:	e7fd      	b.n	8008b0e <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8008b12:	f001 f847 	bl	8009ba4 <xTaskGetSchedulerState>
 8008b16:	4603      	mov	r3, r0
 8008b18:	2b00      	cmp	r3, #0
 8008b1a:	d102      	bne.n	8008b22 <xQueueReceive+0x72>
 8008b1c:	687b      	ldr	r3, [r7, #4]
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d101      	bne.n	8008b26 <xQueueReceive+0x76>
 8008b22:	2301      	movs	r3, #1
 8008b24:	e000      	b.n	8008b28 <xQueueReceive+0x78>
 8008b26:	2300      	movs	r3, #0
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d10b      	bne.n	8008b44 <xQueueReceive+0x94>
	__asm volatile
 8008b2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008b30:	f383 8811 	msr	BASEPRI, r3
 8008b34:	f3bf 8f6f 	isb	sy
 8008b38:	f3bf 8f4f 	dsb	sy
 8008b3c:	61bb      	str	r3, [r7, #24]
}
 8008b3e:	bf00      	nop
 8008b40:	bf00      	nop
 8008b42:	e7fd      	b.n	8008b40 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8008b44:	f001 fd98 	bl	800a678 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008b48:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008b4c:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008b4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b50:	2b00      	cmp	r3, #0
 8008b52:	d01f      	beq.n	8008b94 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8008b54:	68b9      	ldr	r1, [r7, #8]
 8008b56:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008b58:	f000 f8f6 	bl	8008d48 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8008b5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008b5e:	1e5a      	subs	r2, r3, #1
 8008b60:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b62:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008b64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b66:	691b      	ldr	r3, [r3, #16]
 8008b68:	2b00      	cmp	r3, #0
 8008b6a:	d00f      	beq.n	8008b8c <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008b6c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008b6e:	3310      	adds	r3, #16
 8008b70:	4618      	mov	r0, r3
 8008b72:	f000 fe57 	bl	8009824 <xTaskRemoveFromEventList>
 8008b76:	4603      	mov	r3, r0
 8008b78:	2b00      	cmp	r3, #0
 8008b7a:	d007      	beq.n	8008b8c <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8008b7c:	4b3c      	ldr	r3, [pc, #240]	@ (8008c70 <xQueueReceive+0x1c0>)
 8008b7e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008b82:	601a      	str	r2, [r3, #0]
 8008b84:	f3bf 8f4f 	dsb	sy
 8008b88:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8008b8c:	f001 fda6 	bl	800a6dc <vPortExitCritical>
				return pdPASS;
 8008b90:	2301      	movs	r3, #1
 8008b92:	e069      	b.n	8008c68 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	2b00      	cmp	r3, #0
 8008b98:	d103      	bne.n	8008ba2 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8008b9a:	f001 fd9f 	bl	800a6dc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8008b9e:	2300      	movs	r3, #0
 8008ba0:	e062      	b.n	8008c68 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8008ba2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008ba4:	2b00      	cmp	r3, #0
 8008ba6:	d106      	bne.n	8008bb6 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8008ba8:	f107 0310 	add.w	r3, r7, #16
 8008bac:	4618      	mov	r0, r3
 8008bae:	f000 fe9d 	bl	80098ec <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8008bb2:	2301      	movs	r3, #1
 8008bb4:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8008bb6:	f001 fd91 	bl	800a6dc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8008bba:	f000 fc0d 	bl	80093d8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8008bbe:	f001 fd5b 	bl	800a678 <vPortEnterCritical>
 8008bc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bc4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008bc8:	b25b      	sxtb	r3, r3
 8008bca:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008bce:	d103      	bne.n	8008bd8 <xQueueReceive+0x128>
 8008bd0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bd2:	2200      	movs	r2, #0
 8008bd4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008bd8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008bda:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008bde:	b25b      	sxtb	r3, r3
 8008be0:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008be4:	d103      	bne.n	8008bee <xQueueReceive+0x13e>
 8008be6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008be8:	2200      	movs	r2, #0
 8008bea:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008bee:	f001 fd75 	bl	800a6dc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8008bf2:	1d3a      	adds	r2, r7, #4
 8008bf4:	f107 0310 	add.w	r3, r7, #16
 8008bf8:	4611      	mov	r1, r2
 8008bfa:	4618      	mov	r0, r3
 8008bfc:	f000 fe8c 	bl	8009918 <xTaskCheckForTimeOut>
 8008c00:	4603      	mov	r3, r0
 8008c02:	2b00      	cmp	r3, #0
 8008c04:	d123      	bne.n	8008c4e <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008c06:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008c08:	f000 f916 	bl	8008e38 <prvIsQueueEmpty>
 8008c0c:	4603      	mov	r3, r0
 8008c0e:	2b00      	cmp	r3, #0
 8008c10:	d017      	beq.n	8008c42 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8008c12:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008c14:	3324      	adds	r3, #36	@ 0x24
 8008c16:	687a      	ldr	r2, [r7, #4]
 8008c18:	4611      	mov	r1, r2
 8008c1a:	4618      	mov	r0, r3
 8008c1c:	f000 fdb0 	bl	8009780 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8008c20:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008c22:	f000 f8b7 	bl	8008d94 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8008c26:	f000 fbe5 	bl	80093f4 <xTaskResumeAll>
 8008c2a:	4603      	mov	r3, r0
 8008c2c:	2b00      	cmp	r3, #0
 8008c2e:	d189      	bne.n	8008b44 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8008c30:	4b0f      	ldr	r3, [pc, #60]	@ (8008c70 <xQueueReceive+0x1c0>)
 8008c32:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008c36:	601a      	str	r2, [r3, #0]
 8008c38:	f3bf 8f4f 	dsb	sy
 8008c3c:	f3bf 8f6f 	isb	sy
 8008c40:	e780      	b.n	8008b44 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8008c42:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008c44:	f000 f8a6 	bl	8008d94 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8008c48:	f000 fbd4 	bl	80093f4 <xTaskResumeAll>
 8008c4c:	e77a      	b.n	8008b44 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8008c4e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008c50:	f000 f8a0 	bl	8008d94 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8008c54:	f000 fbce 	bl	80093f4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8008c58:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8008c5a:	f000 f8ed 	bl	8008e38 <prvIsQueueEmpty>
 8008c5e:	4603      	mov	r3, r0
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	f43f af6f 	beq.w	8008b44 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8008c66:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8008c68:	4618      	mov	r0, r3
 8008c6a:	3730      	adds	r7, #48	@ 0x30
 8008c6c:	46bd      	mov	sp, r7
 8008c6e:	bd80      	pop	{r7, pc}
 8008c70:	e000ed04 	.word	0xe000ed04

08008c74 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8008c74:	b580      	push	{r7, lr}
 8008c76:	b086      	sub	sp, #24
 8008c78:	af00      	add	r7, sp, #0
 8008c7a:	60f8      	str	r0, [r7, #12]
 8008c7c:	60b9      	str	r1, [r7, #8]
 8008c7e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8008c80:	2300      	movs	r3, #0
 8008c82:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8008c84:	68fb      	ldr	r3, [r7, #12]
 8008c86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008c88:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8008c8a:	68fb      	ldr	r3, [r7, #12]
 8008c8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008c8e:	2b00      	cmp	r3, #0
 8008c90:	d10d      	bne.n	8008cae <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8008c92:	68fb      	ldr	r3, [r7, #12]
 8008c94:	681b      	ldr	r3, [r3, #0]
 8008c96:	2b00      	cmp	r3, #0
 8008c98:	d14d      	bne.n	8008d36 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	689b      	ldr	r3, [r3, #8]
 8008c9e:	4618      	mov	r0, r3
 8008ca0:	f000 ff9e 	bl	8009be0 <xTaskPriorityDisinherit>
 8008ca4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	2200      	movs	r2, #0
 8008caa:	609a      	str	r2, [r3, #8]
 8008cac:	e043      	b.n	8008d36 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d119      	bne.n	8008ce8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008cb4:	68fb      	ldr	r3, [r7, #12]
 8008cb6:	6858      	ldr	r0, [r3, #4]
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008cbc:	461a      	mov	r2, r3
 8008cbe:	68b9      	ldr	r1, [r7, #8]
 8008cc0:	f002 feff 	bl	800bac2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008cc4:	68fb      	ldr	r3, [r7, #12]
 8008cc6:	685a      	ldr	r2, [r3, #4]
 8008cc8:	68fb      	ldr	r3, [r7, #12]
 8008cca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008ccc:	441a      	add	r2, r3
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	685a      	ldr	r2, [r3, #4]
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	689b      	ldr	r3, [r3, #8]
 8008cda:	429a      	cmp	r2, r3
 8008cdc:	d32b      	bcc.n	8008d36 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	681a      	ldr	r2, [r3, #0]
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	605a      	str	r2, [r3, #4]
 8008ce6:	e026      	b.n	8008d36 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8008ce8:	68fb      	ldr	r3, [r7, #12]
 8008cea:	68d8      	ldr	r0, [r3, #12]
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008cf0:	461a      	mov	r2, r3
 8008cf2:	68b9      	ldr	r1, [r7, #8]
 8008cf4:	f002 fee5 	bl	800bac2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8008cf8:	68fb      	ldr	r3, [r7, #12]
 8008cfa:	68da      	ldr	r2, [r3, #12]
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d00:	425b      	negs	r3, r3
 8008d02:	441a      	add	r2, r3
 8008d04:	68fb      	ldr	r3, [r7, #12]
 8008d06:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8008d08:	68fb      	ldr	r3, [r7, #12]
 8008d0a:	68da      	ldr	r2, [r3, #12]
 8008d0c:	68fb      	ldr	r3, [r7, #12]
 8008d0e:	681b      	ldr	r3, [r3, #0]
 8008d10:	429a      	cmp	r2, r3
 8008d12:	d207      	bcs.n	8008d24 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8008d14:	68fb      	ldr	r3, [r7, #12]
 8008d16:	689a      	ldr	r2, [r3, #8]
 8008d18:	68fb      	ldr	r3, [r7, #12]
 8008d1a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d1c:	425b      	negs	r3, r3
 8008d1e:	441a      	add	r2, r3
 8008d20:	68fb      	ldr	r3, [r7, #12]
 8008d22:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8008d24:	687b      	ldr	r3, [r7, #4]
 8008d26:	2b02      	cmp	r3, #2
 8008d28:	d105      	bne.n	8008d36 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8008d2a:	693b      	ldr	r3, [r7, #16]
 8008d2c:	2b00      	cmp	r3, #0
 8008d2e:	d002      	beq.n	8008d36 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8008d30:	693b      	ldr	r3, [r7, #16]
 8008d32:	3b01      	subs	r3, #1
 8008d34:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8008d36:	693b      	ldr	r3, [r7, #16]
 8008d38:	1c5a      	adds	r2, r3, #1
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8008d3e:	697b      	ldr	r3, [r7, #20]
}
 8008d40:	4618      	mov	r0, r3
 8008d42:	3718      	adds	r7, #24
 8008d44:	46bd      	mov	sp, r7
 8008d46:	bd80      	pop	{r7, pc}

08008d48 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8008d48:	b580      	push	{r7, lr}
 8008d4a:	b082      	sub	sp, #8
 8008d4c:	af00      	add	r7, sp, #0
 8008d4e:	6078      	str	r0, [r7, #4]
 8008d50:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d018      	beq.n	8008d8c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	68da      	ldr	r2, [r3, #12]
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d62:	441a      	add	r2, r3
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8008d68:	687b      	ldr	r3, [r7, #4]
 8008d6a:	68da      	ldr	r2, [r3, #12]
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	689b      	ldr	r3, [r3, #8]
 8008d70:	429a      	cmp	r2, r3
 8008d72:	d303      	bcc.n	8008d7c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8008d74:	687b      	ldr	r3, [r7, #4]
 8008d76:	681a      	ldr	r2, [r3, #0]
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8008d7c:	687b      	ldr	r3, [r7, #4]
 8008d7e:	68d9      	ldr	r1, [r3, #12]
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008d84:	461a      	mov	r2, r3
 8008d86:	6838      	ldr	r0, [r7, #0]
 8008d88:	f002 fe9b 	bl	800bac2 <memcpy>
	}
}
 8008d8c:	bf00      	nop
 8008d8e:	3708      	adds	r7, #8
 8008d90:	46bd      	mov	sp, r7
 8008d92:	bd80      	pop	{r7, pc}

08008d94 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8008d94:	b580      	push	{r7, lr}
 8008d96:	b084      	sub	sp, #16
 8008d98:	af00      	add	r7, sp, #0
 8008d9a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8008d9c:	f001 fc6c 	bl	800a678 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008da6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008da8:	e011      	b.n	8008dce <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d012      	beq.n	8008dd8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8008db2:	687b      	ldr	r3, [r7, #4]
 8008db4:	3324      	adds	r3, #36	@ 0x24
 8008db6:	4618      	mov	r0, r3
 8008db8:	f000 fd34 	bl	8009824 <xTaskRemoveFromEventList>
 8008dbc:	4603      	mov	r3, r0
 8008dbe:	2b00      	cmp	r3, #0
 8008dc0:	d001      	beq.n	8008dc6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8008dc2:	f000 fe0d 	bl	80099e0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8008dc6:	7bfb      	ldrb	r3, [r7, #15]
 8008dc8:	3b01      	subs	r3, #1
 8008dca:	b2db      	uxtb	r3, r3
 8008dcc:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8008dce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	dce9      	bgt.n	8008daa <prvUnlockQueue+0x16>
 8008dd6:	e000      	b.n	8008dda <prvUnlockQueue+0x46>
					break;
 8008dd8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	22ff      	movs	r2, #255	@ 0xff
 8008dde:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8008de2:	f001 fc7b 	bl	800a6dc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8008de6:	f001 fc47 	bl	800a678 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8008dea:	687b      	ldr	r3, [r7, #4]
 8008dec:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008df0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008df2:	e011      	b.n	8008e18 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	691b      	ldr	r3, [r3, #16]
 8008df8:	2b00      	cmp	r3, #0
 8008dfa:	d012      	beq.n	8008e22 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	3310      	adds	r3, #16
 8008e00:	4618      	mov	r0, r3
 8008e02:	f000 fd0f 	bl	8009824 <xTaskRemoveFromEventList>
 8008e06:	4603      	mov	r3, r0
 8008e08:	2b00      	cmp	r3, #0
 8008e0a:	d001      	beq.n	8008e10 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8008e0c:	f000 fde8 	bl	80099e0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8008e10:	7bbb      	ldrb	r3, [r7, #14]
 8008e12:	3b01      	subs	r3, #1
 8008e14:	b2db      	uxtb	r3, r3
 8008e16:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8008e18:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8008e1c:	2b00      	cmp	r3, #0
 8008e1e:	dce9      	bgt.n	8008df4 <prvUnlockQueue+0x60>
 8008e20:	e000      	b.n	8008e24 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8008e22:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	22ff      	movs	r2, #255	@ 0xff
 8008e28:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8008e2c:	f001 fc56 	bl	800a6dc <vPortExitCritical>
}
 8008e30:	bf00      	nop
 8008e32:	3710      	adds	r7, #16
 8008e34:	46bd      	mov	sp, r7
 8008e36:	bd80      	pop	{r7, pc}

08008e38 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8008e38:	b580      	push	{r7, lr}
 8008e3a:	b084      	sub	sp, #16
 8008e3c:	af00      	add	r7, sp, #0
 8008e3e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008e40:	f001 fc1a 	bl	800a678 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d102      	bne.n	8008e52 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8008e4c:	2301      	movs	r3, #1
 8008e4e:	60fb      	str	r3, [r7, #12]
 8008e50:	e001      	b.n	8008e56 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8008e52:	2300      	movs	r3, #0
 8008e54:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008e56:	f001 fc41 	bl	800a6dc <vPortExitCritical>

	return xReturn;
 8008e5a:	68fb      	ldr	r3, [r7, #12]
}
 8008e5c:	4618      	mov	r0, r3
 8008e5e:	3710      	adds	r7, #16
 8008e60:	46bd      	mov	sp, r7
 8008e62:	bd80      	pop	{r7, pc}

08008e64 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8008e64:	b580      	push	{r7, lr}
 8008e66:	b084      	sub	sp, #16
 8008e68:	af00      	add	r7, sp, #0
 8008e6a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8008e6c:	f001 fc04 	bl	800a678 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008e78:	429a      	cmp	r2, r3
 8008e7a:	d102      	bne.n	8008e82 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8008e7c:	2301      	movs	r3, #1
 8008e7e:	60fb      	str	r3, [r7, #12]
 8008e80:	e001      	b.n	8008e86 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8008e82:	2300      	movs	r3, #0
 8008e84:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8008e86:	f001 fc29 	bl	800a6dc <vPortExitCritical>

	return xReturn;
 8008e8a:	68fb      	ldr	r3, [r7, #12]
}
 8008e8c:	4618      	mov	r0, r3
 8008e8e:	3710      	adds	r7, #16
 8008e90:	46bd      	mov	sp, r7
 8008e92:	bd80      	pop	{r7, pc}

08008e94 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8008e94:	b480      	push	{r7}
 8008e96:	b085      	sub	sp, #20
 8008e98:	af00      	add	r7, sp, #0
 8008e9a:	6078      	str	r0, [r7, #4]
 8008e9c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008e9e:	2300      	movs	r3, #0
 8008ea0:	60fb      	str	r3, [r7, #12]
 8008ea2:	e014      	b.n	8008ece <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8008ea4:	4a0f      	ldr	r2, [pc, #60]	@ (8008ee4 <vQueueAddToRegistry+0x50>)
 8008ea6:	68fb      	ldr	r3, [r7, #12]
 8008ea8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8008eac:	2b00      	cmp	r3, #0
 8008eae:	d10b      	bne.n	8008ec8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8008eb0:	490c      	ldr	r1, [pc, #48]	@ (8008ee4 <vQueueAddToRegistry+0x50>)
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	683a      	ldr	r2, [r7, #0]
 8008eb6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8008eba:	4a0a      	ldr	r2, [pc, #40]	@ (8008ee4 <vQueueAddToRegistry+0x50>)
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	00db      	lsls	r3, r3, #3
 8008ec0:	4413      	add	r3, r2
 8008ec2:	687a      	ldr	r2, [r7, #4]
 8008ec4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8008ec6:	e006      	b.n	8008ed6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8008ec8:	68fb      	ldr	r3, [r7, #12]
 8008eca:	3301      	adds	r3, #1
 8008ecc:	60fb      	str	r3, [r7, #12]
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	2b07      	cmp	r3, #7
 8008ed2:	d9e7      	bls.n	8008ea4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8008ed4:	bf00      	nop
 8008ed6:	bf00      	nop
 8008ed8:	3714      	adds	r7, #20
 8008eda:	46bd      	mov	sp, r7
 8008edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ee0:	4770      	bx	lr
 8008ee2:	bf00      	nop
 8008ee4:	20000de8 	.word	0x20000de8

08008ee8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8008ee8:	b580      	push	{r7, lr}
 8008eea:	b086      	sub	sp, #24
 8008eec:	af00      	add	r7, sp, #0
 8008eee:	60f8      	str	r0, [r7, #12]
 8008ef0:	60b9      	str	r1, [r7, #8]
 8008ef2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8008ef8:	f001 fbbe 	bl	800a678 <vPortEnterCritical>
 8008efc:	697b      	ldr	r3, [r7, #20]
 8008efe:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8008f02:	b25b      	sxtb	r3, r3
 8008f04:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008f08:	d103      	bne.n	8008f12 <vQueueWaitForMessageRestricted+0x2a>
 8008f0a:	697b      	ldr	r3, [r7, #20]
 8008f0c:	2200      	movs	r2, #0
 8008f0e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8008f12:	697b      	ldr	r3, [r7, #20]
 8008f14:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8008f18:	b25b      	sxtb	r3, r3
 8008f1a:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8008f1e:	d103      	bne.n	8008f28 <vQueueWaitForMessageRestricted+0x40>
 8008f20:	697b      	ldr	r3, [r7, #20]
 8008f22:	2200      	movs	r2, #0
 8008f24:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8008f28:	f001 fbd8 	bl	800a6dc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8008f2c:	697b      	ldr	r3, [r7, #20]
 8008f2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008f30:	2b00      	cmp	r3, #0
 8008f32:	d106      	bne.n	8008f42 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8008f34:	697b      	ldr	r3, [r7, #20]
 8008f36:	3324      	adds	r3, #36	@ 0x24
 8008f38:	687a      	ldr	r2, [r7, #4]
 8008f3a:	68b9      	ldr	r1, [r7, #8]
 8008f3c:	4618      	mov	r0, r3
 8008f3e:	f000 fc45 	bl	80097cc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8008f42:	6978      	ldr	r0, [r7, #20]
 8008f44:	f7ff ff26 	bl	8008d94 <prvUnlockQueue>
	}
 8008f48:	bf00      	nop
 8008f4a:	3718      	adds	r7, #24
 8008f4c:	46bd      	mov	sp, r7
 8008f4e:	bd80      	pop	{r7, pc}

08008f50 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8008f50:	b580      	push	{r7, lr}
 8008f52:	b08e      	sub	sp, #56	@ 0x38
 8008f54:	af04      	add	r7, sp, #16
 8008f56:	60f8      	str	r0, [r7, #12]
 8008f58:	60b9      	str	r1, [r7, #8]
 8008f5a:	607a      	str	r2, [r7, #4]
 8008f5c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8008f5e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d10b      	bne.n	8008f7c <xTaskCreateStatic+0x2c>
	__asm volatile
 8008f64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f68:	f383 8811 	msr	BASEPRI, r3
 8008f6c:	f3bf 8f6f 	isb	sy
 8008f70:	f3bf 8f4f 	dsb	sy
 8008f74:	623b      	str	r3, [r7, #32]
}
 8008f76:	bf00      	nop
 8008f78:	bf00      	nop
 8008f7a:	e7fd      	b.n	8008f78 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8008f7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f7e:	2b00      	cmp	r3, #0
 8008f80:	d10b      	bne.n	8008f9a <xTaskCreateStatic+0x4a>
	__asm volatile
 8008f82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f86:	f383 8811 	msr	BASEPRI, r3
 8008f8a:	f3bf 8f6f 	isb	sy
 8008f8e:	f3bf 8f4f 	dsb	sy
 8008f92:	61fb      	str	r3, [r7, #28]
}
 8008f94:	bf00      	nop
 8008f96:	bf00      	nop
 8008f98:	e7fd      	b.n	8008f96 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8008f9a:	235c      	movs	r3, #92	@ 0x5c
 8008f9c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8008f9e:	693b      	ldr	r3, [r7, #16]
 8008fa0:	2b5c      	cmp	r3, #92	@ 0x5c
 8008fa2:	d00b      	beq.n	8008fbc <xTaskCreateStatic+0x6c>
	__asm volatile
 8008fa4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008fa8:	f383 8811 	msr	BASEPRI, r3
 8008fac:	f3bf 8f6f 	isb	sy
 8008fb0:	f3bf 8f4f 	dsb	sy
 8008fb4:	61bb      	str	r3, [r7, #24]
}
 8008fb6:	bf00      	nop
 8008fb8:	bf00      	nop
 8008fba:	e7fd      	b.n	8008fb8 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8008fbc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8008fbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d01e      	beq.n	8009002 <xTaskCreateStatic+0xb2>
 8008fc4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008fc6:	2b00      	cmp	r3, #0
 8008fc8:	d01b      	beq.n	8009002 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008fca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008fcc:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8008fce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fd0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008fd2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8008fd4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fd6:	2202      	movs	r2, #2
 8008fd8:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8008fdc:	2300      	movs	r3, #0
 8008fde:	9303      	str	r3, [sp, #12]
 8008fe0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008fe2:	9302      	str	r3, [sp, #8]
 8008fe4:	f107 0314 	add.w	r3, r7, #20
 8008fe8:	9301      	str	r3, [sp, #4]
 8008fea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008fec:	9300      	str	r3, [sp, #0]
 8008fee:	683b      	ldr	r3, [r7, #0]
 8008ff0:	687a      	ldr	r2, [r7, #4]
 8008ff2:	68b9      	ldr	r1, [r7, #8]
 8008ff4:	68f8      	ldr	r0, [r7, #12]
 8008ff6:	f000 f850 	bl	800909a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8008ffa:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8008ffc:	f000 f8de 	bl	80091bc <prvAddNewTaskToReadyList>
 8009000:	e001      	b.n	8009006 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8009002:	2300      	movs	r3, #0
 8009004:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8009006:	697b      	ldr	r3, [r7, #20]
	}
 8009008:	4618      	mov	r0, r3
 800900a:	3728      	adds	r7, #40	@ 0x28
 800900c:	46bd      	mov	sp, r7
 800900e:	bd80      	pop	{r7, pc}

08009010 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009010:	b580      	push	{r7, lr}
 8009012:	b08c      	sub	sp, #48	@ 0x30
 8009014:	af04      	add	r7, sp, #16
 8009016:	60f8      	str	r0, [r7, #12]
 8009018:	60b9      	str	r1, [r7, #8]
 800901a:	603b      	str	r3, [r7, #0]
 800901c:	4613      	mov	r3, r2
 800901e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009020:	88fb      	ldrh	r3, [r7, #6]
 8009022:	009b      	lsls	r3, r3, #2
 8009024:	4618      	mov	r0, r3
 8009026:	f001 fc49 	bl	800a8bc <pvPortMalloc>
 800902a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800902c:	697b      	ldr	r3, [r7, #20]
 800902e:	2b00      	cmp	r3, #0
 8009030:	d00e      	beq.n	8009050 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009032:	205c      	movs	r0, #92	@ 0x5c
 8009034:	f001 fc42 	bl	800a8bc <pvPortMalloc>
 8009038:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800903a:	69fb      	ldr	r3, [r7, #28]
 800903c:	2b00      	cmp	r3, #0
 800903e:	d003      	beq.n	8009048 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009040:	69fb      	ldr	r3, [r7, #28]
 8009042:	697a      	ldr	r2, [r7, #20]
 8009044:	631a      	str	r2, [r3, #48]	@ 0x30
 8009046:	e005      	b.n	8009054 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009048:	6978      	ldr	r0, [r7, #20]
 800904a:	f001 fd05 	bl	800aa58 <vPortFree>
 800904e:	e001      	b.n	8009054 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009050:	2300      	movs	r3, #0
 8009052:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009054:	69fb      	ldr	r3, [r7, #28]
 8009056:	2b00      	cmp	r3, #0
 8009058:	d017      	beq.n	800908a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800905a:	69fb      	ldr	r3, [r7, #28]
 800905c:	2200      	movs	r2, #0
 800905e:	f883 2059 	strb.w	r2, [r3, #89]	@ 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009062:	88fa      	ldrh	r2, [r7, #6]
 8009064:	2300      	movs	r3, #0
 8009066:	9303      	str	r3, [sp, #12]
 8009068:	69fb      	ldr	r3, [r7, #28]
 800906a:	9302      	str	r3, [sp, #8]
 800906c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800906e:	9301      	str	r3, [sp, #4]
 8009070:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009072:	9300      	str	r3, [sp, #0]
 8009074:	683b      	ldr	r3, [r7, #0]
 8009076:	68b9      	ldr	r1, [r7, #8]
 8009078:	68f8      	ldr	r0, [r7, #12]
 800907a:	f000 f80e 	bl	800909a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800907e:	69f8      	ldr	r0, [r7, #28]
 8009080:	f000 f89c 	bl	80091bc <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009084:	2301      	movs	r3, #1
 8009086:	61bb      	str	r3, [r7, #24]
 8009088:	e002      	b.n	8009090 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800908a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800908e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009090:	69bb      	ldr	r3, [r7, #24]
	}
 8009092:	4618      	mov	r0, r3
 8009094:	3720      	adds	r7, #32
 8009096:	46bd      	mov	sp, r7
 8009098:	bd80      	pop	{r7, pc}

0800909a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800909a:	b580      	push	{r7, lr}
 800909c:	b088      	sub	sp, #32
 800909e:	af00      	add	r7, sp, #0
 80090a0:	60f8      	str	r0, [r7, #12]
 80090a2:	60b9      	str	r1, [r7, #8]
 80090a4:	607a      	str	r2, [r7, #4]
 80090a6:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80090a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090aa:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80090ac:	687b      	ldr	r3, [r7, #4]
 80090ae:	009b      	lsls	r3, r3, #2
 80090b0:	461a      	mov	r2, r3
 80090b2:	21a5      	movs	r1, #165	@ 0xa5
 80090b4:	f002 fc86 	bl	800b9c4 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80090b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80090ba:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80090bc:	687b      	ldr	r3, [r7, #4]
 80090be:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80090c2:	3b01      	subs	r3, #1
 80090c4:	009b      	lsls	r3, r3, #2
 80090c6:	4413      	add	r3, r2
 80090c8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80090ca:	69bb      	ldr	r3, [r7, #24]
 80090cc:	f023 0307 	bic.w	r3, r3, #7
 80090d0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80090d2:	69bb      	ldr	r3, [r7, #24]
 80090d4:	f003 0307 	and.w	r3, r3, #7
 80090d8:	2b00      	cmp	r3, #0
 80090da:	d00b      	beq.n	80090f4 <prvInitialiseNewTask+0x5a>
	__asm volatile
 80090dc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80090e0:	f383 8811 	msr	BASEPRI, r3
 80090e4:	f3bf 8f6f 	isb	sy
 80090e8:	f3bf 8f4f 	dsb	sy
 80090ec:	617b      	str	r3, [r7, #20]
}
 80090ee:	bf00      	nop
 80090f0:	bf00      	nop
 80090f2:	e7fd      	b.n	80090f0 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80090f4:	68bb      	ldr	r3, [r7, #8]
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d01f      	beq.n	800913a <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80090fa:	2300      	movs	r3, #0
 80090fc:	61fb      	str	r3, [r7, #28]
 80090fe:	e012      	b.n	8009126 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009100:	68ba      	ldr	r2, [r7, #8]
 8009102:	69fb      	ldr	r3, [r7, #28]
 8009104:	4413      	add	r3, r2
 8009106:	7819      	ldrb	r1, [r3, #0]
 8009108:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800910a:	69fb      	ldr	r3, [r7, #28]
 800910c:	4413      	add	r3, r2
 800910e:	3334      	adds	r3, #52	@ 0x34
 8009110:	460a      	mov	r2, r1
 8009112:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009114:	68ba      	ldr	r2, [r7, #8]
 8009116:	69fb      	ldr	r3, [r7, #28]
 8009118:	4413      	add	r3, r2
 800911a:	781b      	ldrb	r3, [r3, #0]
 800911c:	2b00      	cmp	r3, #0
 800911e:	d006      	beq.n	800912e <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009120:	69fb      	ldr	r3, [r7, #28]
 8009122:	3301      	adds	r3, #1
 8009124:	61fb      	str	r3, [r7, #28]
 8009126:	69fb      	ldr	r3, [r7, #28]
 8009128:	2b0f      	cmp	r3, #15
 800912a:	d9e9      	bls.n	8009100 <prvInitialiseNewTask+0x66>
 800912c:	e000      	b.n	8009130 <prvInitialiseNewTask+0x96>
			{
				break;
 800912e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009130:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009132:	2200      	movs	r2, #0
 8009134:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8009138:	e003      	b.n	8009142 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800913a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800913c:	2200      	movs	r2, #0
 800913e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009142:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009144:	2b37      	cmp	r3, #55	@ 0x37
 8009146:	d901      	bls.n	800914c <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009148:	2337      	movs	r3, #55	@ 0x37
 800914a:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800914c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800914e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009150:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009152:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009154:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009156:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8009158:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800915a:	2200      	movs	r2, #0
 800915c:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800915e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009160:	3304      	adds	r3, #4
 8009162:	4618      	mov	r0, r3
 8009164:	f7ff f966 	bl	8008434 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009168:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800916a:	3318      	adds	r3, #24
 800916c:	4618      	mov	r0, r3
 800916e:	f7ff f961 	bl	8008434 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009172:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009174:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009176:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009178:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800917a:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800917e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009180:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009182:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009184:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009186:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009188:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800918a:	2200      	movs	r2, #0
 800918c:	655a      	str	r2, [r3, #84]	@ 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800918e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009190:	2200      	movs	r2, #0
 8009192:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009196:	683a      	ldr	r2, [r7, #0]
 8009198:	68f9      	ldr	r1, [r7, #12]
 800919a:	69b8      	ldr	r0, [r7, #24]
 800919c:	f001 f93e 	bl	800a41c <pxPortInitialiseStack>
 80091a0:	4602      	mov	r2, r0
 80091a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80091a4:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80091a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80091a8:	2b00      	cmp	r3, #0
 80091aa:	d002      	beq.n	80091b2 <prvInitialiseNewTask+0x118>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80091ac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80091ae:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80091b0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80091b2:	bf00      	nop
 80091b4:	3720      	adds	r7, #32
 80091b6:	46bd      	mov	sp, r7
 80091b8:	bd80      	pop	{r7, pc}
	...

080091bc <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80091bc:	b580      	push	{r7, lr}
 80091be:	b082      	sub	sp, #8
 80091c0:	af00      	add	r7, sp, #0
 80091c2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80091c4:	f001 fa58 	bl	800a678 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80091c8:	4b2d      	ldr	r3, [pc, #180]	@ (8009280 <prvAddNewTaskToReadyList+0xc4>)
 80091ca:	681b      	ldr	r3, [r3, #0]
 80091cc:	3301      	adds	r3, #1
 80091ce:	4a2c      	ldr	r2, [pc, #176]	@ (8009280 <prvAddNewTaskToReadyList+0xc4>)
 80091d0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80091d2:	4b2c      	ldr	r3, [pc, #176]	@ (8009284 <prvAddNewTaskToReadyList+0xc8>)
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	2b00      	cmp	r3, #0
 80091d8:	d109      	bne.n	80091ee <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80091da:	4a2a      	ldr	r2, [pc, #168]	@ (8009284 <prvAddNewTaskToReadyList+0xc8>)
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80091e0:	4b27      	ldr	r3, [pc, #156]	@ (8009280 <prvAddNewTaskToReadyList+0xc4>)
 80091e2:	681b      	ldr	r3, [r3, #0]
 80091e4:	2b01      	cmp	r3, #1
 80091e6:	d110      	bne.n	800920a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80091e8:	f000 fc1e 	bl	8009a28 <prvInitialiseTaskLists>
 80091ec:	e00d      	b.n	800920a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80091ee:	4b26      	ldr	r3, [pc, #152]	@ (8009288 <prvAddNewTaskToReadyList+0xcc>)
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d109      	bne.n	800920a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80091f6:	4b23      	ldr	r3, [pc, #140]	@ (8009284 <prvAddNewTaskToReadyList+0xc8>)
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80091fc:	687b      	ldr	r3, [r7, #4]
 80091fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009200:	429a      	cmp	r2, r3
 8009202:	d802      	bhi.n	800920a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009204:	4a1f      	ldr	r2, [pc, #124]	@ (8009284 <prvAddNewTaskToReadyList+0xc8>)
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800920a:	4b20      	ldr	r3, [pc, #128]	@ (800928c <prvAddNewTaskToReadyList+0xd0>)
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	3301      	adds	r3, #1
 8009210:	4a1e      	ldr	r2, [pc, #120]	@ (800928c <prvAddNewTaskToReadyList+0xd0>)
 8009212:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009214:	4b1d      	ldr	r3, [pc, #116]	@ (800928c <prvAddNewTaskToReadyList+0xd0>)
 8009216:	681a      	ldr	r2, [r3, #0]
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009220:	4b1b      	ldr	r3, [pc, #108]	@ (8009290 <prvAddNewTaskToReadyList+0xd4>)
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	429a      	cmp	r2, r3
 8009226:	d903      	bls.n	8009230 <prvAddNewTaskToReadyList+0x74>
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800922c:	4a18      	ldr	r2, [pc, #96]	@ (8009290 <prvAddNewTaskToReadyList+0xd4>)
 800922e:	6013      	str	r3, [r2, #0]
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009234:	4613      	mov	r3, r2
 8009236:	009b      	lsls	r3, r3, #2
 8009238:	4413      	add	r3, r2
 800923a:	009b      	lsls	r3, r3, #2
 800923c:	4a15      	ldr	r2, [pc, #84]	@ (8009294 <prvAddNewTaskToReadyList+0xd8>)
 800923e:	441a      	add	r2, r3
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	3304      	adds	r3, #4
 8009244:	4619      	mov	r1, r3
 8009246:	4610      	mov	r0, r2
 8009248:	f7ff f901 	bl	800844e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800924c:	f001 fa46 	bl	800a6dc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009250:	4b0d      	ldr	r3, [pc, #52]	@ (8009288 <prvAddNewTaskToReadyList+0xcc>)
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	2b00      	cmp	r3, #0
 8009256:	d00e      	beq.n	8009276 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009258:	4b0a      	ldr	r3, [pc, #40]	@ (8009284 <prvAddNewTaskToReadyList+0xc8>)
 800925a:	681b      	ldr	r3, [r3, #0]
 800925c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009262:	429a      	cmp	r2, r3
 8009264:	d207      	bcs.n	8009276 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009266:	4b0c      	ldr	r3, [pc, #48]	@ (8009298 <prvAddNewTaskToReadyList+0xdc>)
 8009268:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800926c:	601a      	str	r2, [r3, #0]
 800926e:	f3bf 8f4f 	dsb	sy
 8009272:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009276:	bf00      	nop
 8009278:	3708      	adds	r7, #8
 800927a:	46bd      	mov	sp, r7
 800927c:	bd80      	pop	{r7, pc}
 800927e:	bf00      	nop
 8009280:	200012fc 	.word	0x200012fc
 8009284:	20000e28 	.word	0x20000e28
 8009288:	20001308 	.word	0x20001308
 800928c:	20001318 	.word	0x20001318
 8009290:	20001304 	.word	0x20001304
 8009294:	20000e2c 	.word	0x20000e2c
 8009298:	e000ed04 	.word	0xe000ed04

0800929c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800929c:	b580      	push	{r7, lr}
 800929e:	b084      	sub	sp, #16
 80092a0:	af00      	add	r7, sp, #0
 80092a2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80092a4:	2300      	movs	r3, #0
 80092a6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d018      	beq.n	80092e0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80092ae:	4b14      	ldr	r3, [pc, #80]	@ (8009300 <vTaskDelay+0x64>)
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d00b      	beq.n	80092ce <vTaskDelay+0x32>
	__asm volatile
 80092b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80092ba:	f383 8811 	msr	BASEPRI, r3
 80092be:	f3bf 8f6f 	isb	sy
 80092c2:	f3bf 8f4f 	dsb	sy
 80092c6:	60bb      	str	r3, [r7, #8]
}
 80092c8:	bf00      	nop
 80092ca:	bf00      	nop
 80092cc:	e7fd      	b.n	80092ca <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80092ce:	f000 f883 	bl	80093d8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80092d2:	2100      	movs	r1, #0
 80092d4:	6878      	ldr	r0, [r7, #4]
 80092d6:	f000 fcf3 	bl	8009cc0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80092da:	f000 f88b 	bl	80093f4 <xTaskResumeAll>
 80092de:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	2b00      	cmp	r3, #0
 80092e4:	d107      	bne.n	80092f6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80092e6:	4b07      	ldr	r3, [pc, #28]	@ (8009304 <vTaskDelay+0x68>)
 80092e8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80092ec:	601a      	str	r2, [r3, #0]
 80092ee:	f3bf 8f4f 	dsb	sy
 80092f2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80092f6:	bf00      	nop
 80092f8:	3710      	adds	r7, #16
 80092fa:	46bd      	mov	sp, r7
 80092fc:	bd80      	pop	{r7, pc}
 80092fe:	bf00      	nop
 8009300:	20001324 	.word	0x20001324
 8009304:	e000ed04 	.word	0xe000ed04

08009308 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009308:	b580      	push	{r7, lr}
 800930a:	b08a      	sub	sp, #40	@ 0x28
 800930c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800930e:	2300      	movs	r3, #0
 8009310:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009312:	2300      	movs	r3, #0
 8009314:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009316:	463a      	mov	r2, r7
 8009318:	1d39      	adds	r1, r7, #4
 800931a:	f107 0308 	add.w	r3, r7, #8
 800931e:	4618      	mov	r0, r3
 8009320:	f7ff f834 	bl	800838c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009324:	6839      	ldr	r1, [r7, #0]
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	68ba      	ldr	r2, [r7, #8]
 800932a:	9202      	str	r2, [sp, #8]
 800932c:	9301      	str	r3, [sp, #4]
 800932e:	2300      	movs	r3, #0
 8009330:	9300      	str	r3, [sp, #0]
 8009332:	2300      	movs	r3, #0
 8009334:	460a      	mov	r2, r1
 8009336:	4922      	ldr	r1, [pc, #136]	@ (80093c0 <vTaskStartScheduler+0xb8>)
 8009338:	4822      	ldr	r0, [pc, #136]	@ (80093c4 <vTaskStartScheduler+0xbc>)
 800933a:	f7ff fe09 	bl	8008f50 <xTaskCreateStatic>
 800933e:	4603      	mov	r3, r0
 8009340:	4a21      	ldr	r2, [pc, #132]	@ (80093c8 <vTaskStartScheduler+0xc0>)
 8009342:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009344:	4b20      	ldr	r3, [pc, #128]	@ (80093c8 <vTaskStartScheduler+0xc0>)
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	2b00      	cmp	r3, #0
 800934a:	d002      	beq.n	8009352 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800934c:	2301      	movs	r3, #1
 800934e:	617b      	str	r3, [r7, #20]
 8009350:	e001      	b.n	8009356 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009352:	2300      	movs	r3, #0
 8009354:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009356:	697b      	ldr	r3, [r7, #20]
 8009358:	2b01      	cmp	r3, #1
 800935a:	d102      	bne.n	8009362 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800935c:	f000 fd04 	bl	8009d68 <xTimerCreateTimerTask>
 8009360:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009362:	697b      	ldr	r3, [r7, #20]
 8009364:	2b01      	cmp	r3, #1
 8009366:	d116      	bne.n	8009396 <vTaskStartScheduler+0x8e>
	__asm volatile
 8009368:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800936c:	f383 8811 	msr	BASEPRI, r3
 8009370:	f3bf 8f6f 	isb	sy
 8009374:	f3bf 8f4f 	dsb	sy
 8009378:	613b      	str	r3, [r7, #16]
}
 800937a:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800937c:	4b13      	ldr	r3, [pc, #76]	@ (80093cc <vTaskStartScheduler+0xc4>)
 800937e:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009382:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009384:	4b12      	ldr	r3, [pc, #72]	@ (80093d0 <vTaskStartScheduler+0xc8>)
 8009386:	2201      	movs	r2, #1
 8009388:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800938a:	4b12      	ldr	r3, [pc, #72]	@ (80093d4 <vTaskStartScheduler+0xcc>)
 800938c:	2200      	movs	r2, #0
 800938e:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009390:	f001 f8ce 	bl	800a530 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009394:	e00f      	b.n	80093b6 <vTaskStartScheduler+0xae>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009396:	697b      	ldr	r3, [r7, #20]
 8009398:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800939c:	d10b      	bne.n	80093b6 <vTaskStartScheduler+0xae>
	__asm volatile
 800939e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80093a2:	f383 8811 	msr	BASEPRI, r3
 80093a6:	f3bf 8f6f 	isb	sy
 80093aa:	f3bf 8f4f 	dsb	sy
 80093ae:	60fb      	str	r3, [r7, #12]
}
 80093b0:	bf00      	nop
 80093b2:	bf00      	nop
 80093b4:	e7fd      	b.n	80093b2 <vTaskStartScheduler+0xaa>
}
 80093b6:	bf00      	nop
 80093b8:	3718      	adds	r7, #24
 80093ba:	46bd      	mov	sp, r7
 80093bc:	bd80      	pop	{r7, pc}
 80093be:	bf00      	nop
 80093c0:	0800f3c4 	.word	0x0800f3c4
 80093c4:	080099f9 	.word	0x080099f9
 80093c8:	20001320 	.word	0x20001320
 80093cc:	2000131c 	.word	0x2000131c
 80093d0:	20001308 	.word	0x20001308
 80093d4:	20001300 	.word	0x20001300

080093d8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80093d8:	b480      	push	{r7}
 80093da:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80093dc:	4b04      	ldr	r3, [pc, #16]	@ (80093f0 <vTaskSuspendAll+0x18>)
 80093de:	681b      	ldr	r3, [r3, #0]
 80093e0:	3301      	adds	r3, #1
 80093e2:	4a03      	ldr	r2, [pc, #12]	@ (80093f0 <vTaskSuspendAll+0x18>)
 80093e4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80093e6:	bf00      	nop
 80093e8:	46bd      	mov	sp, r7
 80093ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80093ee:	4770      	bx	lr
 80093f0:	20001324 	.word	0x20001324

080093f4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80093f4:	b580      	push	{r7, lr}
 80093f6:	b084      	sub	sp, #16
 80093f8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80093fa:	2300      	movs	r3, #0
 80093fc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80093fe:	2300      	movs	r3, #0
 8009400:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009402:	4b42      	ldr	r3, [pc, #264]	@ (800950c <xTaskResumeAll+0x118>)
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	2b00      	cmp	r3, #0
 8009408:	d10b      	bne.n	8009422 <xTaskResumeAll+0x2e>
	__asm volatile
 800940a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800940e:	f383 8811 	msr	BASEPRI, r3
 8009412:	f3bf 8f6f 	isb	sy
 8009416:	f3bf 8f4f 	dsb	sy
 800941a:	603b      	str	r3, [r7, #0]
}
 800941c:	bf00      	nop
 800941e:	bf00      	nop
 8009420:	e7fd      	b.n	800941e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009422:	f001 f929 	bl	800a678 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009426:	4b39      	ldr	r3, [pc, #228]	@ (800950c <xTaskResumeAll+0x118>)
 8009428:	681b      	ldr	r3, [r3, #0]
 800942a:	3b01      	subs	r3, #1
 800942c:	4a37      	ldr	r2, [pc, #220]	@ (800950c <xTaskResumeAll+0x118>)
 800942e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009430:	4b36      	ldr	r3, [pc, #216]	@ (800950c <xTaskResumeAll+0x118>)
 8009432:	681b      	ldr	r3, [r3, #0]
 8009434:	2b00      	cmp	r3, #0
 8009436:	d162      	bne.n	80094fe <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009438:	4b35      	ldr	r3, [pc, #212]	@ (8009510 <xTaskResumeAll+0x11c>)
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	2b00      	cmp	r3, #0
 800943e:	d05e      	beq.n	80094fe <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009440:	e02f      	b.n	80094a2 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009442:	4b34      	ldr	r3, [pc, #208]	@ (8009514 <xTaskResumeAll+0x120>)
 8009444:	68db      	ldr	r3, [r3, #12]
 8009446:	68db      	ldr	r3, [r3, #12]
 8009448:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800944a:	68fb      	ldr	r3, [r7, #12]
 800944c:	3318      	adds	r3, #24
 800944e:	4618      	mov	r0, r3
 8009450:	f7ff f85a 	bl	8008508 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009454:	68fb      	ldr	r3, [r7, #12]
 8009456:	3304      	adds	r3, #4
 8009458:	4618      	mov	r0, r3
 800945a:	f7ff f855 	bl	8008508 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800945e:	68fb      	ldr	r3, [r7, #12]
 8009460:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009462:	4b2d      	ldr	r3, [pc, #180]	@ (8009518 <xTaskResumeAll+0x124>)
 8009464:	681b      	ldr	r3, [r3, #0]
 8009466:	429a      	cmp	r2, r3
 8009468:	d903      	bls.n	8009472 <xTaskResumeAll+0x7e>
 800946a:	68fb      	ldr	r3, [r7, #12]
 800946c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800946e:	4a2a      	ldr	r2, [pc, #168]	@ (8009518 <xTaskResumeAll+0x124>)
 8009470:	6013      	str	r3, [r2, #0]
 8009472:	68fb      	ldr	r3, [r7, #12]
 8009474:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009476:	4613      	mov	r3, r2
 8009478:	009b      	lsls	r3, r3, #2
 800947a:	4413      	add	r3, r2
 800947c:	009b      	lsls	r3, r3, #2
 800947e:	4a27      	ldr	r2, [pc, #156]	@ (800951c <xTaskResumeAll+0x128>)
 8009480:	441a      	add	r2, r3
 8009482:	68fb      	ldr	r3, [r7, #12]
 8009484:	3304      	adds	r3, #4
 8009486:	4619      	mov	r1, r3
 8009488:	4610      	mov	r0, r2
 800948a:	f7fe ffe0 	bl	800844e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800948e:	68fb      	ldr	r3, [r7, #12]
 8009490:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009492:	4b23      	ldr	r3, [pc, #140]	@ (8009520 <xTaskResumeAll+0x12c>)
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009498:	429a      	cmp	r2, r3
 800949a:	d302      	bcc.n	80094a2 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800949c:	4b21      	ldr	r3, [pc, #132]	@ (8009524 <xTaskResumeAll+0x130>)
 800949e:	2201      	movs	r2, #1
 80094a0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80094a2:	4b1c      	ldr	r3, [pc, #112]	@ (8009514 <xTaskResumeAll+0x120>)
 80094a4:	681b      	ldr	r3, [r3, #0]
 80094a6:	2b00      	cmp	r3, #0
 80094a8:	d1cb      	bne.n	8009442 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80094aa:	68fb      	ldr	r3, [r7, #12]
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d001      	beq.n	80094b4 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80094b0:	f000 fb58 	bl	8009b64 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80094b4:	4b1c      	ldr	r3, [pc, #112]	@ (8009528 <xTaskResumeAll+0x134>)
 80094b6:	681b      	ldr	r3, [r3, #0]
 80094b8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	2b00      	cmp	r3, #0
 80094be:	d010      	beq.n	80094e2 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80094c0:	f000 f846 	bl	8009550 <xTaskIncrementTick>
 80094c4:	4603      	mov	r3, r0
 80094c6:	2b00      	cmp	r3, #0
 80094c8:	d002      	beq.n	80094d0 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80094ca:	4b16      	ldr	r3, [pc, #88]	@ (8009524 <xTaskResumeAll+0x130>)
 80094cc:	2201      	movs	r2, #1
 80094ce:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	3b01      	subs	r3, #1
 80094d4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80094d6:	687b      	ldr	r3, [r7, #4]
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d1f1      	bne.n	80094c0 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80094dc:	4b12      	ldr	r3, [pc, #72]	@ (8009528 <xTaskResumeAll+0x134>)
 80094de:	2200      	movs	r2, #0
 80094e0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80094e2:	4b10      	ldr	r3, [pc, #64]	@ (8009524 <xTaskResumeAll+0x130>)
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	2b00      	cmp	r3, #0
 80094e8:	d009      	beq.n	80094fe <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80094ea:	2301      	movs	r3, #1
 80094ec:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80094ee:	4b0f      	ldr	r3, [pc, #60]	@ (800952c <xTaskResumeAll+0x138>)
 80094f0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80094f4:	601a      	str	r2, [r3, #0]
 80094f6:	f3bf 8f4f 	dsb	sy
 80094fa:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80094fe:	f001 f8ed 	bl	800a6dc <vPortExitCritical>

	return xAlreadyYielded;
 8009502:	68bb      	ldr	r3, [r7, #8]
}
 8009504:	4618      	mov	r0, r3
 8009506:	3710      	adds	r7, #16
 8009508:	46bd      	mov	sp, r7
 800950a:	bd80      	pop	{r7, pc}
 800950c:	20001324 	.word	0x20001324
 8009510:	200012fc 	.word	0x200012fc
 8009514:	200012bc 	.word	0x200012bc
 8009518:	20001304 	.word	0x20001304
 800951c:	20000e2c 	.word	0x20000e2c
 8009520:	20000e28 	.word	0x20000e28
 8009524:	20001310 	.word	0x20001310
 8009528:	2000130c 	.word	0x2000130c
 800952c:	e000ed04 	.word	0xe000ed04

08009530 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009530:	b480      	push	{r7}
 8009532:	b083      	sub	sp, #12
 8009534:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009536:	4b05      	ldr	r3, [pc, #20]	@ (800954c <xTaskGetTickCount+0x1c>)
 8009538:	681b      	ldr	r3, [r3, #0]
 800953a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800953c:	687b      	ldr	r3, [r7, #4]
}
 800953e:	4618      	mov	r0, r3
 8009540:	370c      	adds	r7, #12
 8009542:	46bd      	mov	sp, r7
 8009544:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009548:	4770      	bx	lr
 800954a:	bf00      	nop
 800954c:	20001300 	.word	0x20001300

08009550 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009550:	b580      	push	{r7, lr}
 8009552:	b086      	sub	sp, #24
 8009554:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009556:	2300      	movs	r3, #0
 8009558:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800955a:	4b4f      	ldr	r3, [pc, #316]	@ (8009698 <xTaskIncrementTick+0x148>)
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	2b00      	cmp	r3, #0
 8009560:	f040 8090 	bne.w	8009684 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009564:	4b4d      	ldr	r3, [pc, #308]	@ (800969c <xTaskIncrementTick+0x14c>)
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	3301      	adds	r3, #1
 800956a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800956c:	4a4b      	ldr	r2, [pc, #300]	@ (800969c <xTaskIncrementTick+0x14c>)
 800956e:	693b      	ldr	r3, [r7, #16]
 8009570:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009572:	693b      	ldr	r3, [r7, #16]
 8009574:	2b00      	cmp	r3, #0
 8009576:	d121      	bne.n	80095bc <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8009578:	4b49      	ldr	r3, [pc, #292]	@ (80096a0 <xTaskIncrementTick+0x150>)
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	681b      	ldr	r3, [r3, #0]
 800957e:	2b00      	cmp	r3, #0
 8009580:	d00b      	beq.n	800959a <xTaskIncrementTick+0x4a>
	__asm volatile
 8009582:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009586:	f383 8811 	msr	BASEPRI, r3
 800958a:	f3bf 8f6f 	isb	sy
 800958e:	f3bf 8f4f 	dsb	sy
 8009592:	603b      	str	r3, [r7, #0]
}
 8009594:	bf00      	nop
 8009596:	bf00      	nop
 8009598:	e7fd      	b.n	8009596 <xTaskIncrementTick+0x46>
 800959a:	4b41      	ldr	r3, [pc, #260]	@ (80096a0 <xTaskIncrementTick+0x150>)
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	60fb      	str	r3, [r7, #12]
 80095a0:	4b40      	ldr	r3, [pc, #256]	@ (80096a4 <xTaskIncrementTick+0x154>)
 80095a2:	681b      	ldr	r3, [r3, #0]
 80095a4:	4a3e      	ldr	r2, [pc, #248]	@ (80096a0 <xTaskIncrementTick+0x150>)
 80095a6:	6013      	str	r3, [r2, #0]
 80095a8:	4a3e      	ldr	r2, [pc, #248]	@ (80096a4 <xTaskIncrementTick+0x154>)
 80095aa:	68fb      	ldr	r3, [r7, #12]
 80095ac:	6013      	str	r3, [r2, #0]
 80095ae:	4b3e      	ldr	r3, [pc, #248]	@ (80096a8 <xTaskIncrementTick+0x158>)
 80095b0:	681b      	ldr	r3, [r3, #0]
 80095b2:	3301      	adds	r3, #1
 80095b4:	4a3c      	ldr	r2, [pc, #240]	@ (80096a8 <xTaskIncrementTick+0x158>)
 80095b6:	6013      	str	r3, [r2, #0]
 80095b8:	f000 fad4 	bl	8009b64 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80095bc:	4b3b      	ldr	r3, [pc, #236]	@ (80096ac <xTaskIncrementTick+0x15c>)
 80095be:	681b      	ldr	r3, [r3, #0]
 80095c0:	693a      	ldr	r2, [r7, #16]
 80095c2:	429a      	cmp	r2, r3
 80095c4:	d349      	bcc.n	800965a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80095c6:	4b36      	ldr	r3, [pc, #216]	@ (80096a0 <xTaskIncrementTick+0x150>)
 80095c8:	681b      	ldr	r3, [r3, #0]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	2b00      	cmp	r3, #0
 80095ce:	d104      	bne.n	80095da <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80095d0:	4b36      	ldr	r3, [pc, #216]	@ (80096ac <xTaskIncrementTick+0x15c>)
 80095d2:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80095d6:	601a      	str	r2, [r3, #0]
					break;
 80095d8:	e03f      	b.n	800965a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80095da:	4b31      	ldr	r3, [pc, #196]	@ (80096a0 <xTaskIncrementTick+0x150>)
 80095dc:	681b      	ldr	r3, [r3, #0]
 80095de:	68db      	ldr	r3, [r3, #12]
 80095e0:	68db      	ldr	r3, [r3, #12]
 80095e2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80095e4:	68bb      	ldr	r3, [r7, #8]
 80095e6:	685b      	ldr	r3, [r3, #4]
 80095e8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80095ea:	693a      	ldr	r2, [r7, #16]
 80095ec:	687b      	ldr	r3, [r7, #4]
 80095ee:	429a      	cmp	r2, r3
 80095f0:	d203      	bcs.n	80095fa <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80095f2:	4a2e      	ldr	r2, [pc, #184]	@ (80096ac <xTaskIncrementTick+0x15c>)
 80095f4:	687b      	ldr	r3, [r7, #4]
 80095f6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80095f8:	e02f      	b.n	800965a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80095fa:	68bb      	ldr	r3, [r7, #8]
 80095fc:	3304      	adds	r3, #4
 80095fe:	4618      	mov	r0, r3
 8009600:	f7fe ff82 	bl	8008508 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009604:	68bb      	ldr	r3, [r7, #8]
 8009606:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8009608:	2b00      	cmp	r3, #0
 800960a:	d004      	beq.n	8009616 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800960c:	68bb      	ldr	r3, [r7, #8]
 800960e:	3318      	adds	r3, #24
 8009610:	4618      	mov	r0, r3
 8009612:	f7fe ff79 	bl	8008508 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009616:	68bb      	ldr	r3, [r7, #8]
 8009618:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800961a:	4b25      	ldr	r3, [pc, #148]	@ (80096b0 <xTaskIncrementTick+0x160>)
 800961c:	681b      	ldr	r3, [r3, #0]
 800961e:	429a      	cmp	r2, r3
 8009620:	d903      	bls.n	800962a <xTaskIncrementTick+0xda>
 8009622:	68bb      	ldr	r3, [r7, #8]
 8009624:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009626:	4a22      	ldr	r2, [pc, #136]	@ (80096b0 <xTaskIncrementTick+0x160>)
 8009628:	6013      	str	r3, [r2, #0]
 800962a:	68bb      	ldr	r3, [r7, #8]
 800962c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800962e:	4613      	mov	r3, r2
 8009630:	009b      	lsls	r3, r3, #2
 8009632:	4413      	add	r3, r2
 8009634:	009b      	lsls	r3, r3, #2
 8009636:	4a1f      	ldr	r2, [pc, #124]	@ (80096b4 <xTaskIncrementTick+0x164>)
 8009638:	441a      	add	r2, r3
 800963a:	68bb      	ldr	r3, [r7, #8]
 800963c:	3304      	adds	r3, #4
 800963e:	4619      	mov	r1, r3
 8009640:	4610      	mov	r0, r2
 8009642:	f7fe ff04 	bl	800844e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009646:	68bb      	ldr	r3, [r7, #8]
 8009648:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800964a:	4b1b      	ldr	r3, [pc, #108]	@ (80096b8 <xTaskIncrementTick+0x168>)
 800964c:	681b      	ldr	r3, [r3, #0]
 800964e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009650:	429a      	cmp	r2, r3
 8009652:	d3b8      	bcc.n	80095c6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8009654:	2301      	movs	r3, #1
 8009656:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009658:	e7b5      	b.n	80095c6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800965a:	4b17      	ldr	r3, [pc, #92]	@ (80096b8 <xTaskIncrementTick+0x168>)
 800965c:	681b      	ldr	r3, [r3, #0]
 800965e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009660:	4914      	ldr	r1, [pc, #80]	@ (80096b4 <xTaskIncrementTick+0x164>)
 8009662:	4613      	mov	r3, r2
 8009664:	009b      	lsls	r3, r3, #2
 8009666:	4413      	add	r3, r2
 8009668:	009b      	lsls	r3, r3, #2
 800966a:	440b      	add	r3, r1
 800966c:	681b      	ldr	r3, [r3, #0]
 800966e:	2b01      	cmp	r3, #1
 8009670:	d901      	bls.n	8009676 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8009672:	2301      	movs	r3, #1
 8009674:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009676:	4b11      	ldr	r3, [pc, #68]	@ (80096bc <xTaskIncrementTick+0x16c>)
 8009678:	681b      	ldr	r3, [r3, #0]
 800967a:	2b00      	cmp	r3, #0
 800967c:	d007      	beq.n	800968e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 800967e:	2301      	movs	r3, #1
 8009680:	617b      	str	r3, [r7, #20]
 8009682:	e004      	b.n	800968e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009684:	4b0e      	ldr	r3, [pc, #56]	@ (80096c0 <xTaskIncrementTick+0x170>)
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	3301      	adds	r3, #1
 800968a:	4a0d      	ldr	r2, [pc, #52]	@ (80096c0 <xTaskIncrementTick+0x170>)
 800968c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800968e:	697b      	ldr	r3, [r7, #20]
}
 8009690:	4618      	mov	r0, r3
 8009692:	3718      	adds	r7, #24
 8009694:	46bd      	mov	sp, r7
 8009696:	bd80      	pop	{r7, pc}
 8009698:	20001324 	.word	0x20001324
 800969c:	20001300 	.word	0x20001300
 80096a0:	200012b4 	.word	0x200012b4
 80096a4:	200012b8 	.word	0x200012b8
 80096a8:	20001314 	.word	0x20001314
 80096ac:	2000131c 	.word	0x2000131c
 80096b0:	20001304 	.word	0x20001304
 80096b4:	20000e2c 	.word	0x20000e2c
 80096b8:	20000e28 	.word	0x20000e28
 80096bc:	20001310 	.word	0x20001310
 80096c0:	2000130c 	.word	0x2000130c

080096c4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80096c4:	b480      	push	{r7}
 80096c6:	b085      	sub	sp, #20
 80096c8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80096ca:	4b28      	ldr	r3, [pc, #160]	@ (800976c <vTaskSwitchContext+0xa8>)
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	2b00      	cmp	r3, #0
 80096d0:	d003      	beq.n	80096da <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80096d2:	4b27      	ldr	r3, [pc, #156]	@ (8009770 <vTaskSwitchContext+0xac>)
 80096d4:	2201      	movs	r2, #1
 80096d6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80096d8:	e042      	b.n	8009760 <vTaskSwitchContext+0x9c>
		xYieldPending = pdFALSE;
 80096da:	4b25      	ldr	r3, [pc, #148]	@ (8009770 <vTaskSwitchContext+0xac>)
 80096dc:	2200      	movs	r2, #0
 80096de:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80096e0:	4b24      	ldr	r3, [pc, #144]	@ (8009774 <vTaskSwitchContext+0xb0>)
 80096e2:	681b      	ldr	r3, [r3, #0]
 80096e4:	60fb      	str	r3, [r7, #12]
 80096e6:	e011      	b.n	800970c <vTaskSwitchContext+0x48>
 80096e8:	68fb      	ldr	r3, [r7, #12]
 80096ea:	2b00      	cmp	r3, #0
 80096ec:	d10b      	bne.n	8009706 <vTaskSwitchContext+0x42>
	__asm volatile
 80096ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80096f2:	f383 8811 	msr	BASEPRI, r3
 80096f6:	f3bf 8f6f 	isb	sy
 80096fa:	f3bf 8f4f 	dsb	sy
 80096fe:	607b      	str	r3, [r7, #4]
}
 8009700:	bf00      	nop
 8009702:	bf00      	nop
 8009704:	e7fd      	b.n	8009702 <vTaskSwitchContext+0x3e>
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	3b01      	subs	r3, #1
 800970a:	60fb      	str	r3, [r7, #12]
 800970c:	491a      	ldr	r1, [pc, #104]	@ (8009778 <vTaskSwitchContext+0xb4>)
 800970e:	68fa      	ldr	r2, [r7, #12]
 8009710:	4613      	mov	r3, r2
 8009712:	009b      	lsls	r3, r3, #2
 8009714:	4413      	add	r3, r2
 8009716:	009b      	lsls	r3, r3, #2
 8009718:	440b      	add	r3, r1
 800971a:	681b      	ldr	r3, [r3, #0]
 800971c:	2b00      	cmp	r3, #0
 800971e:	d0e3      	beq.n	80096e8 <vTaskSwitchContext+0x24>
 8009720:	68fa      	ldr	r2, [r7, #12]
 8009722:	4613      	mov	r3, r2
 8009724:	009b      	lsls	r3, r3, #2
 8009726:	4413      	add	r3, r2
 8009728:	009b      	lsls	r3, r3, #2
 800972a:	4a13      	ldr	r2, [pc, #76]	@ (8009778 <vTaskSwitchContext+0xb4>)
 800972c:	4413      	add	r3, r2
 800972e:	60bb      	str	r3, [r7, #8]
 8009730:	68bb      	ldr	r3, [r7, #8]
 8009732:	685b      	ldr	r3, [r3, #4]
 8009734:	685a      	ldr	r2, [r3, #4]
 8009736:	68bb      	ldr	r3, [r7, #8]
 8009738:	605a      	str	r2, [r3, #4]
 800973a:	68bb      	ldr	r3, [r7, #8]
 800973c:	685a      	ldr	r2, [r3, #4]
 800973e:	68bb      	ldr	r3, [r7, #8]
 8009740:	3308      	adds	r3, #8
 8009742:	429a      	cmp	r2, r3
 8009744:	d104      	bne.n	8009750 <vTaskSwitchContext+0x8c>
 8009746:	68bb      	ldr	r3, [r7, #8]
 8009748:	685b      	ldr	r3, [r3, #4]
 800974a:	685a      	ldr	r2, [r3, #4]
 800974c:	68bb      	ldr	r3, [r7, #8]
 800974e:	605a      	str	r2, [r3, #4]
 8009750:	68bb      	ldr	r3, [r7, #8]
 8009752:	685b      	ldr	r3, [r3, #4]
 8009754:	68db      	ldr	r3, [r3, #12]
 8009756:	4a09      	ldr	r2, [pc, #36]	@ (800977c <vTaskSwitchContext+0xb8>)
 8009758:	6013      	str	r3, [r2, #0]
 800975a:	4a06      	ldr	r2, [pc, #24]	@ (8009774 <vTaskSwitchContext+0xb0>)
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	6013      	str	r3, [r2, #0]
}
 8009760:	bf00      	nop
 8009762:	3714      	adds	r7, #20
 8009764:	46bd      	mov	sp, r7
 8009766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800976a:	4770      	bx	lr
 800976c:	20001324 	.word	0x20001324
 8009770:	20001310 	.word	0x20001310
 8009774:	20001304 	.word	0x20001304
 8009778:	20000e2c 	.word	0x20000e2c
 800977c:	20000e28 	.word	0x20000e28

08009780 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8009780:	b580      	push	{r7, lr}
 8009782:	b084      	sub	sp, #16
 8009784:	af00      	add	r7, sp, #0
 8009786:	6078      	str	r0, [r7, #4]
 8009788:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	2b00      	cmp	r3, #0
 800978e:	d10b      	bne.n	80097a8 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8009790:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009794:	f383 8811 	msr	BASEPRI, r3
 8009798:	f3bf 8f6f 	isb	sy
 800979c:	f3bf 8f4f 	dsb	sy
 80097a0:	60fb      	str	r3, [r7, #12]
}
 80097a2:	bf00      	nop
 80097a4:	bf00      	nop
 80097a6:	e7fd      	b.n	80097a4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80097a8:	4b07      	ldr	r3, [pc, #28]	@ (80097c8 <vTaskPlaceOnEventList+0x48>)
 80097aa:	681b      	ldr	r3, [r3, #0]
 80097ac:	3318      	adds	r3, #24
 80097ae:	4619      	mov	r1, r3
 80097b0:	6878      	ldr	r0, [r7, #4]
 80097b2:	f7fe fe70 	bl	8008496 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80097b6:	2101      	movs	r1, #1
 80097b8:	6838      	ldr	r0, [r7, #0]
 80097ba:	f000 fa81 	bl	8009cc0 <prvAddCurrentTaskToDelayedList>
}
 80097be:	bf00      	nop
 80097c0:	3710      	adds	r7, #16
 80097c2:	46bd      	mov	sp, r7
 80097c4:	bd80      	pop	{r7, pc}
 80097c6:	bf00      	nop
 80097c8:	20000e28 	.word	0x20000e28

080097cc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80097cc:	b580      	push	{r7, lr}
 80097ce:	b086      	sub	sp, #24
 80097d0:	af00      	add	r7, sp, #0
 80097d2:	60f8      	str	r0, [r7, #12]
 80097d4:	60b9      	str	r1, [r7, #8]
 80097d6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	2b00      	cmp	r3, #0
 80097dc:	d10b      	bne.n	80097f6 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 80097de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80097e2:	f383 8811 	msr	BASEPRI, r3
 80097e6:	f3bf 8f6f 	isb	sy
 80097ea:	f3bf 8f4f 	dsb	sy
 80097ee:	617b      	str	r3, [r7, #20]
}
 80097f0:	bf00      	nop
 80097f2:	bf00      	nop
 80097f4:	e7fd      	b.n	80097f2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80097f6:	4b0a      	ldr	r3, [pc, #40]	@ (8009820 <vTaskPlaceOnEventListRestricted+0x54>)
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	3318      	adds	r3, #24
 80097fc:	4619      	mov	r1, r3
 80097fe:	68f8      	ldr	r0, [r7, #12]
 8009800:	f7fe fe25 	bl	800844e <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8009804:	687b      	ldr	r3, [r7, #4]
 8009806:	2b00      	cmp	r3, #0
 8009808:	d002      	beq.n	8009810 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800980a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800980e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8009810:	6879      	ldr	r1, [r7, #4]
 8009812:	68b8      	ldr	r0, [r7, #8]
 8009814:	f000 fa54 	bl	8009cc0 <prvAddCurrentTaskToDelayedList>
	}
 8009818:	bf00      	nop
 800981a:	3718      	adds	r7, #24
 800981c:	46bd      	mov	sp, r7
 800981e:	bd80      	pop	{r7, pc}
 8009820:	20000e28 	.word	0x20000e28

08009824 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8009824:	b580      	push	{r7, lr}
 8009826:	b086      	sub	sp, #24
 8009828:	af00      	add	r7, sp, #0
 800982a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800982c:	687b      	ldr	r3, [r7, #4]
 800982e:	68db      	ldr	r3, [r3, #12]
 8009830:	68db      	ldr	r3, [r3, #12]
 8009832:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8009834:	693b      	ldr	r3, [r7, #16]
 8009836:	2b00      	cmp	r3, #0
 8009838:	d10b      	bne.n	8009852 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 800983a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800983e:	f383 8811 	msr	BASEPRI, r3
 8009842:	f3bf 8f6f 	isb	sy
 8009846:	f3bf 8f4f 	dsb	sy
 800984a:	60fb      	str	r3, [r7, #12]
}
 800984c:	bf00      	nop
 800984e:	bf00      	nop
 8009850:	e7fd      	b.n	800984e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8009852:	693b      	ldr	r3, [r7, #16]
 8009854:	3318      	adds	r3, #24
 8009856:	4618      	mov	r0, r3
 8009858:	f7fe fe56 	bl	8008508 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800985c:	4b1d      	ldr	r3, [pc, #116]	@ (80098d4 <xTaskRemoveFromEventList+0xb0>)
 800985e:	681b      	ldr	r3, [r3, #0]
 8009860:	2b00      	cmp	r3, #0
 8009862:	d11d      	bne.n	80098a0 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8009864:	693b      	ldr	r3, [r7, #16]
 8009866:	3304      	adds	r3, #4
 8009868:	4618      	mov	r0, r3
 800986a:	f7fe fe4d 	bl	8008508 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800986e:	693b      	ldr	r3, [r7, #16]
 8009870:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009872:	4b19      	ldr	r3, [pc, #100]	@ (80098d8 <xTaskRemoveFromEventList+0xb4>)
 8009874:	681b      	ldr	r3, [r3, #0]
 8009876:	429a      	cmp	r2, r3
 8009878:	d903      	bls.n	8009882 <xTaskRemoveFromEventList+0x5e>
 800987a:	693b      	ldr	r3, [r7, #16]
 800987c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800987e:	4a16      	ldr	r2, [pc, #88]	@ (80098d8 <xTaskRemoveFromEventList+0xb4>)
 8009880:	6013      	str	r3, [r2, #0]
 8009882:	693b      	ldr	r3, [r7, #16]
 8009884:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009886:	4613      	mov	r3, r2
 8009888:	009b      	lsls	r3, r3, #2
 800988a:	4413      	add	r3, r2
 800988c:	009b      	lsls	r3, r3, #2
 800988e:	4a13      	ldr	r2, [pc, #76]	@ (80098dc <xTaskRemoveFromEventList+0xb8>)
 8009890:	441a      	add	r2, r3
 8009892:	693b      	ldr	r3, [r7, #16]
 8009894:	3304      	adds	r3, #4
 8009896:	4619      	mov	r1, r3
 8009898:	4610      	mov	r0, r2
 800989a:	f7fe fdd8 	bl	800844e <vListInsertEnd>
 800989e:	e005      	b.n	80098ac <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80098a0:	693b      	ldr	r3, [r7, #16]
 80098a2:	3318      	adds	r3, #24
 80098a4:	4619      	mov	r1, r3
 80098a6:	480e      	ldr	r0, [pc, #56]	@ (80098e0 <xTaskRemoveFromEventList+0xbc>)
 80098a8:	f7fe fdd1 	bl	800844e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80098ac:	693b      	ldr	r3, [r7, #16]
 80098ae:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80098b0:	4b0c      	ldr	r3, [pc, #48]	@ (80098e4 <xTaskRemoveFromEventList+0xc0>)
 80098b2:	681b      	ldr	r3, [r3, #0]
 80098b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80098b6:	429a      	cmp	r2, r3
 80098b8:	d905      	bls.n	80098c6 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80098ba:	2301      	movs	r3, #1
 80098bc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80098be:	4b0a      	ldr	r3, [pc, #40]	@ (80098e8 <xTaskRemoveFromEventList+0xc4>)
 80098c0:	2201      	movs	r2, #1
 80098c2:	601a      	str	r2, [r3, #0]
 80098c4:	e001      	b.n	80098ca <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80098c6:	2300      	movs	r3, #0
 80098c8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80098ca:	697b      	ldr	r3, [r7, #20]
}
 80098cc:	4618      	mov	r0, r3
 80098ce:	3718      	adds	r7, #24
 80098d0:	46bd      	mov	sp, r7
 80098d2:	bd80      	pop	{r7, pc}
 80098d4:	20001324 	.word	0x20001324
 80098d8:	20001304 	.word	0x20001304
 80098dc:	20000e2c 	.word	0x20000e2c
 80098e0:	200012bc 	.word	0x200012bc
 80098e4:	20000e28 	.word	0x20000e28
 80098e8:	20001310 	.word	0x20001310

080098ec <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80098ec:	b480      	push	{r7}
 80098ee:	b083      	sub	sp, #12
 80098f0:	af00      	add	r7, sp, #0
 80098f2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80098f4:	4b06      	ldr	r3, [pc, #24]	@ (8009910 <vTaskInternalSetTimeOutState+0x24>)
 80098f6:	681a      	ldr	r2, [r3, #0]
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80098fc:	4b05      	ldr	r3, [pc, #20]	@ (8009914 <vTaskInternalSetTimeOutState+0x28>)
 80098fe:	681a      	ldr	r2, [r3, #0]
 8009900:	687b      	ldr	r3, [r7, #4]
 8009902:	605a      	str	r2, [r3, #4]
}
 8009904:	bf00      	nop
 8009906:	370c      	adds	r7, #12
 8009908:	46bd      	mov	sp, r7
 800990a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800990e:	4770      	bx	lr
 8009910:	20001314 	.word	0x20001314
 8009914:	20001300 	.word	0x20001300

08009918 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8009918:	b580      	push	{r7, lr}
 800991a:	b088      	sub	sp, #32
 800991c:	af00      	add	r7, sp, #0
 800991e:	6078      	str	r0, [r7, #4]
 8009920:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	2b00      	cmp	r3, #0
 8009926:	d10b      	bne.n	8009940 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8009928:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800992c:	f383 8811 	msr	BASEPRI, r3
 8009930:	f3bf 8f6f 	isb	sy
 8009934:	f3bf 8f4f 	dsb	sy
 8009938:	613b      	str	r3, [r7, #16]
}
 800993a:	bf00      	nop
 800993c:	bf00      	nop
 800993e:	e7fd      	b.n	800993c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8009940:	683b      	ldr	r3, [r7, #0]
 8009942:	2b00      	cmp	r3, #0
 8009944:	d10b      	bne.n	800995e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8009946:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800994a:	f383 8811 	msr	BASEPRI, r3
 800994e:	f3bf 8f6f 	isb	sy
 8009952:	f3bf 8f4f 	dsb	sy
 8009956:	60fb      	str	r3, [r7, #12]
}
 8009958:	bf00      	nop
 800995a:	bf00      	nop
 800995c:	e7fd      	b.n	800995a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 800995e:	f000 fe8b 	bl	800a678 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8009962:	4b1d      	ldr	r3, [pc, #116]	@ (80099d8 <xTaskCheckForTimeOut+0xc0>)
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	685b      	ldr	r3, [r3, #4]
 800996c:	69ba      	ldr	r2, [r7, #24]
 800996e:	1ad3      	subs	r3, r2, r3
 8009970:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8009972:	683b      	ldr	r3, [r7, #0]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800997a:	d102      	bne.n	8009982 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800997c:	2300      	movs	r3, #0
 800997e:	61fb      	str	r3, [r7, #28]
 8009980:	e023      	b.n	80099ca <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	681a      	ldr	r2, [r3, #0]
 8009986:	4b15      	ldr	r3, [pc, #84]	@ (80099dc <xTaskCheckForTimeOut+0xc4>)
 8009988:	681b      	ldr	r3, [r3, #0]
 800998a:	429a      	cmp	r2, r3
 800998c:	d007      	beq.n	800999e <xTaskCheckForTimeOut+0x86>
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	685b      	ldr	r3, [r3, #4]
 8009992:	69ba      	ldr	r2, [r7, #24]
 8009994:	429a      	cmp	r2, r3
 8009996:	d302      	bcc.n	800999e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8009998:	2301      	movs	r3, #1
 800999a:	61fb      	str	r3, [r7, #28]
 800999c:	e015      	b.n	80099ca <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800999e:	683b      	ldr	r3, [r7, #0]
 80099a0:	681b      	ldr	r3, [r3, #0]
 80099a2:	697a      	ldr	r2, [r7, #20]
 80099a4:	429a      	cmp	r2, r3
 80099a6:	d20b      	bcs.n	80099c0 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80099a8:	683b      	ldr	r3, [r7, #0]
 80099aa:	681a      	ldr	r2, [r3, #0]
 80099ac:	697b      	ldr	r3, [r7, #20]
 80099ae:	1ad2      	subs	r2, r2, r3
 80099b0:	683b      	ldr	r3, [r7, #0]
 80099b2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80099b4:	6878      	ldr	r0, [r7, #4]
 80099b6:	f7ff ff99 	bl	80098ec <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80099ba:	2300      	movs	r3, #0
 80099bc:	61fb      	str	r3, [r7, #28]
 80099be:	e004      	b.n	80099ca <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80099c0:	683b      	ldr	r3, [r7, #0]
 80099c2:	2200      	movs	r2, #0
 80099c4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80099c6:	2301      	movs	r3, #1
 80099c8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80099ca:	f000 fe87 	bl	800a6dc <vPortExitCritical>

	return xReturn;
 80099ce:	69fb      	ldr	r3, [r7, #28]
}
 80099d0:	4618      	mov	r0, r3
 80099d2:	3720      	adds	r7, #32
 80099d4:	46bd      	mov	sp, r7
 80099d6:	bd80      	pop	{r7, pc}
 80099d8:	20001300 	.word	0x20001300
 80099dc:	20001314 	.word	0x20001314

080099e0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80099e0:	b480      	push	{r7}
 80099e2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80099e4:	4b03      	ldr	r3, [pc, #12]	@ (80099f4 <vTaskMissedYield+0x14>)
 80099e6:	2201      	movs	r2, #1
 80099e8:	601a      	str	r2, [r3, #0]
}
 80099ea:	bf00      	nop
 80099ec:	46bd      	mov	sp, r7
 80099ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f2:	4770      	bx	lr
 80099f4:	20001310 	.word	0x20001310

080099f8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80099f8:	b580      	push	{r7, lr}
 80099fa:	b082      	sub	sp, #8
 80099fc:	af00      	add	r7, sp, #0
 80099fe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8009a00:	f000 f852 	bl	8009aa8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8009a04:	4b06      	ldr	r3, [pc, #24]	@ (8009a20 <prvIdleTask+0x28>)
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	2b01      	cmp	r3, #1
 8009a0a:	d9f9      	bls.n	8009a00 <prvIdleTask+0x8>
			{
				taskYIELD();
 8009a0c:	4b05      	ldr	r3, [pc, #20]	@ (8009a24 <prvIdleTask+0x2c>)
 8009a0e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009a12:	601a      	str	r2, [r3, #0]
 8009a14:	f3bf 8f4f 	dsb	sy
 8009a18:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8009a1c:	e7f0      	b.n	8009a00 <prvIdleTask+0x8>
 8009a1e:	bf00      	nop
 8009a20:	20000e2c 	.word	0x20000e2c
 8009a24:	e000ed04 	.word	0xe000ed04

08009a28 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8009a28:	b580      	push	{r7, lr}
 8009a2a:	b082      	sub	sp, #8
 8009a2c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009a2e:	2300      	movs	r3, #0
 8009a30:	607b      	str	r3, [r7, #4]
 8009a32:	e00c      	b.n	8009a4e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8009a34:	687a      	ldr	r2, [r7, #4]
 8009a36:	4613      	mov	r3, r2
 8009a38:	009b      	lsls	r3, r3, #2
 8009a3a:	4413      	add	r3, r2
 8009a3c:	009b      	lsls	r3, r3, #2
 8009a3e:	4a12      	ldr	r2, [pc, #72]	@ (8009a88 <prvInitialiseTaskLists+0x60>)
 8009a40:	4413      	add	r3, r2
 8009a42:	4618      	mov	r0, r3
 8009a44:	f7fe fcd6 	bl	80083f4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8009a48:	687b      	ldr	r3, [r7, #4]
 8009a4a:	3301      	adds	r3, #1
 8009a4c:	607b      	str	r3, [r7, #4]
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	2b37      	cmp	r3, #55	@ 0x37
 8009a52:	d9ef      	bls.n	8009a34 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8009a54:	480d      	ldr	r0, [pc, #52]	@ (8009a8c <prvInitialiseTaskLists+0x64>)
 8009a56:	f7fe fccd 	bl	80083f4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8009a5a:	480d      	ldr	r0, [pc, #52]	@ (8009a90 <prvInitialiseTaskLists+0x68>)
 8009a5c:	f7fe fcca 	bl	80083f4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8009a60:	480c      	ldr	r0, [pc, #48]	@ (8009a94 <prvInitialiseTaskLists+0x6c>)
 8009a62:	f7fe fcc7 	bl	80083f4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8009a66:	480c      	ldr	r0, [pc, #48]	@ (8009a98 <prvInitialiseTaskLists+0x70>)
 8009a68:	f7fe fcc4 	bl	80083f4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8009a6c:	480b      	ldr	r0, [pc, #44]	@ (8009a9c <prvInitialiseTaskLists+0x74>)
 8009a6e:	f7fe fcc1 	bl	80083f4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8009a72:	4b0b      	ldr	r3, [pc, #44]	@ (8009aa0 <prvInitialiseTaskLists+0x78>)
 8009a74:	4a05      	ldr	r2, [pc, #20]	@ (8009a8c <prvInitialiseTaskLists+0x64>)
 8009a76:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8009a78:	4b0a      	ldr	r3, [pc, #40]	@ (8009aa4 <prvInitialiseTaskLists+0x7c>)
 8009a7a:	4a05      	ldr	r2, [pc, #20]	@ (8009a90 <prvInitialiseTaskLists+0x68>)
 8009a7c:	601a      	str	r2, [r3, #0]
}
 8009a7e:	bf00      	nop
 8009a80:	3708      	adds	r7, #8
 8009a82:	46bd      	mov	sp, r7
 8009a84:	bd80      	pop	{r7, pc}
 8009a86:	bf00      	nop
 8009a88:	20000e2c 	.word	0x20000e2c
 8009a8c:	2000128c 	.word	0x2000128c
 8009a90:	200012a0 	.word	0x200012a0
 8009a94:	200012bc 	.word	0x200012bc
 8009a98:	200012d0 	.word	0x200012d0
 8009a9c:	200012e8 	.word	0x200012e8
 8009aa0:	200012b4 	.word	0x200012b4
 8009aa4:	200012b8 	.word	0x200012b8

08009aa8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8009aa8:	b580      	push	{r7, lr}
 8009aaa:	b082      	sub	sp, #8
 8009aac:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009aae:	e019      	b.n	8009ae4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8009ab0:	f000 fde2 	bl	800a678 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009ab4:	4b10      	ldr	r3, [pc, #64]	@ (8009af8 <prvCheckTasksWaitingTermination+0x50>)
 8009ab6:	68db      	ldr	r3, [r3, #12]
 8009ab8:	68db      	ldr	r3, [r3, #12]
 8009aba:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009abc:	687b      	ldr	r3, [r7, #4]
 8009abe:	3304      	adds	r3, #4
 8009ac0:	4618      	mov	r0, r3
 8009ac2:	f7fe fd21 	bl	8008508 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8009ac6:	4b0d      	ldr	r3, [pc, #52]	@ (8009afc <prvCheckTasksWaitingTermination+0x54>)
 8009ac8:	681b      	ldr	r3, [r3, #0]
 8009aca:	3b01      	subs	r3, #1
 8009acc:	4a0b      	ldr	r2, [pc, #44]	@ (8009afc <prvCheckTasksWaitingTermination+0x54>)
 8009ace:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8009ad0:	4b0b      	ldr	r3, [pc, #44]	@ (8009b00 <prvCheckTasksWaitingTermination+0x58>)
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	3b01      	subs	r3, #1
 8009ad6:	4a0a      	ldr	r2, [pc, #40]	@ (8009b00 <prvCheckTasksWaitingTermination+0x58>)
 8009ad8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8009ada:	f000 fdff 	bl	800a6dc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8009ade:	6878      	ldr	r0, [r7, #4]
 8009ae0:	f000 f810 	bl	8009b04 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8009ae4:	4b06      	ldr	r3, [pc, #24]	@ (8009b00 <prvCheckTasksWaitingTermination+0x58>)
 8009ae6:	681b      	ldr	r3, [r3, #0]
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d1e1      	bne.n	8009ab0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8009aec:	bf00      	nop
 8009aee:	bf00      	nop
 8009af0:	3708      	adds	r7, #8
 8009af2:	46bd      	mov	sp, r7
 8009af4:	bd80      	pop	{r7, pc}
 8009af6:	bf00      	nop
 8009af8:	200012d0 	.word	0x200012d0
 8009afc:	200012fc 	.word	0x200012fc
 8009b00:	200012e4 	.word	0x200012e4

08009b04 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8009b04:	b580      	push	{r7, lr}
 8009b06:	b084      	sub	sp, #16
 8009b08:	af00      	add	r7, sp, #0
 8009b0a:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d108      	bne.n	8009b28 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8009b16:	687b      	ldr	r3, [r7, #4]
 8009b18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8009b1a:	4618      	mov	r0, r3
 8009b1c:	f000 ff9c 	bl	800aa58 <vPortFree>
				vPortFree( pxTCB );
 8009b20:	6878      	ldr	r0, [r7, #4]
 8009b22:	f000 ff99 	bl	800aa58 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8009b26:	e019      	b.n	8009b5c <prvDeleteTCB+0x58>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8009b2e:	2b01      	cmp	r3, #1
 8009b30:	d103      	bne.n	8009b3a <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8009b32:	6878      	ldr	r0, [r7, #4]
 8009b34:	f000 ff90 	bl	800aa58 <vPortFree>
	}
 8009b38:	e010      	b.n	8009b5c <prvDeleteTCB+0x58>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	f893 3059 	ldrb.w	r3, [r3, #89]	@ 0x59
 8009b40:	2b02      	cmp	r3, #2
 8009b42:	d00b      	beq.n	8009b5c <prvDeleteTCB+0x58>
	__asm volatile
 8009b44:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009b48:	f383 8811 	msr	BASEPRI, r3
 8009b4c:	f3bf 8f6f 	isb	sy
 8009b50:	f3bf 8f4f 	dsb	sy
 8009b54:	60fb      	str	r3, [r7, #12]
}
 8009b56:	bf00      	nop
 8009b58:	bf00      	nop
 8009b5a:	e7fd      	b.n	8009b58 <prvDeleteTCB+0x54>
	}
 8009b5c:	bf00      	nop
 8009b5e:	3710      	adds	r7, #16
 8009b60:	46bd      	mov	sp, r7
 8009b62:	bd80      	pop	{r7, pc}

08009b64 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8009b64:	b480      	push	{r7}
 8009b66:	b083      	sub	sp, #12
 8009b68:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009b6a:	4b0c      	ldr	r3, [pc, #48]	@ (8009b9c <prvResetNextTaskUnblockTime+0x38>)
 8009b6c:	681b      	ldr	r3, [r3, #0]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	d104      	bne.n	8009b7e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8009b74:	4b0a      	ldr	r3, [pc, #40]	@ (8009ba0 <prvResetNextTaskUnblockTime+0x3c>)
 8009b76:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8009b7a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8009b7c:	e008      	b.n	8009b90 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009b7e:	4b07      	ldr	r3, [pc, #28]	@ (8009b9c <prvResetNextTaskUnblockTime+0x38>)
 8009b80:	681b      	ldr	r3, [r3, #0]
 8009b82:	68db      	ldr	r3, [r3, #12]
 8009b84:	68db      	ldr	r3, [r3, #12]
 8009b86:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	685b      	ldr	r3, [r3, #4]
 8009b8c:	4a04      	ldr	r2, [pc, #16]	@ (8009ba0 <prvResetNextTaskUnblockTime+0x3c>)
 8009b8e:	6013      	str	r3, [r2, #0]
}
 8009b90:	bf00      	nop
 8009b92:	370c      	adds	r7, #12
 8009b94:	46bd      	mov	sp, r7
 8009b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b9a:	4770      	bx	lr
 8009b9c:	200012b4 	.word	0x200012b4
 8009ba0:	2000131c 	.word	0x2000131c

08009ba4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8009ba4:	b480      	push	{r7}
 8009ba6:	b083      	sub	sp, #12
 8009ba8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8009baa:	4b0b      	ldr	r3, [pc, #44]	@ (8009bd8 <xTaskGetSchedulerState+0x34>)
 8009bac:	681b      	ldr	r3, [r3, #0]
 8009bae:	2b00      	cmp	r3, #0
 8009bb0:	d102      	bne.n	8009bb8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8009bb2:	2301      	movs	r3, #1
 8009bb4:	607b      	str	r3, [r7, #4]
 8009bb6:	e008      	b.n	8009bca <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009bb8:	4b08      	ldr	r3, [pc, #32]	@ (8009bdc <xTaskGetSchedulerState+0x38>)
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d102      	bne.n	8009bc6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8009bc0:	2302      	movs	r3, #2
 8009bc2:	607b      	str	r3, [r7, #4]
 8009bc4:	e001      	b.n	8009bca <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8009bc6:	2300      	movs	r3, #0
 8009bc8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8009bca:	687b      	ldr	r3, [r7, #4]
	}
 8009bcc:	4618      	mov	r0, r3
 8009bce:	370c      	adds	r7, #12
 8009bd0:	46bd      	mov	sp, r7
 8009bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bd6:	4770      	bx	lr
 8009bd8:	20001308 	.word	0x20001308
 8009bdc:	20001324 	.word	0x20001324

08009be0 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8009be0:	b580      	push	{r7, lr}
 8009be2:	b086      	sub	sp, #24
 8009be4:	af00      	add	r7, sp, #0
 8009be6:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8009bec:	2300      	movs	r3, #0
 8009bee:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	2b00      	cmp	r3, #0
 8009bf4:	d058      	beq.n	8009ca8 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8009bf6:	4b2f      	ldr	r3, [pc, #188]	@ (8009cb4 <xTaskPriorityDisinherit+0xd4>)
 8009bf8:	681b      	ldr	r3, [r3, #0]
 8009bfa:	693a      	ldr	r2, [r7, #16]
 8009bfc:	429a      	cmp	r2, r3
 8009bfe:	d00b      	beq.n	8009c18 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8009c00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c04:	f383 8811 	msr	BASEPRI, r3
 8009c08:	f3bf 8f6f 	isb	sy
 8009c0c:	f3bf 8f4f 	dsb	sy
 8009c10:	60fb      	str	r3, [r7, #12]
}
 8009c12:	bf00      	nop
 8009c14:	bf00      	nop
 8009c16:	e7fd      	b.n	8009c14 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8009c18:	693b      	ldr	r3, [r7, #16]
 8009c1a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009c1c:	2b00      	cmp	r3, #0
 8009c1e:	d10b      	bne.n	8009c38 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8009c20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009c24:	f383 8811 	msr	BASEPRI, r3
 8009c28:	f3bf 8f6f 	isb	sy
 8009c2c:	f3bf 8f4f 	dsb	sy
 8009c30:	60bb      	str	r3, [r7, #8]
}
 8009c32:	bf00      	nop
 8009c34:	bf00      	nop
 8009c36:	e7fd      	b.n	8009c34 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8009c38:	693b      	ldr	r3, [r7, #16]
 8009c3a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009c3c:	1e5a      	subs	r2, r3, #1
 8009c3e:	693b      	ldr	r3, [r7, #16]
 8009c40:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8009c42:	693b      	ldr	r3, [r7, #16]
 8009c44:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009c46:	693b      	ldr	r3, [r7, #16]
 8009c48:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8009c4a:	429a      	cmp	r2, r3
 8009c4c:	d02c      	beq.n	8009ca8 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8009c4e:	693b      	ldr	r3, [r7, #16]
 8009c50:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d128      	bne.n	8009ca8 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009c56:	693b      	ldr	r3, [r7, #16]
 8009c58:	3304      	adds	r3, #4
 8009c5a:	4618      	mov	r0, r3
 8009c5c:	f7fe fc54 	bl	8008508 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8009c60:	693b      	ldr	r3, [r7, #16]
 8009c62:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8009c64:	693b      	ldr	r3, [r7, #16]
 8009c66:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009c68:	693b      	ldr	r3, [r7, #16]
 8009c6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c6c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8009c70:	693b      	ldr	r3, [r7, #16]
 8009c72:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8009c74:	693b      	ldr	r3, [r7, #16]
 8009c76:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009c78:	4b0f      	ldr	r3, [pc, #60]	@ (8009cb8 <xTaskPriorityDisinherit+0xd8>)
 8009c7a:	681b      	ldr	r3, [r3, #0]
 8009c7c:	429a      	cmp	r2, r3
 8009c7e:	d903      	bls.n	8009c88 <xTaskPriorityDisinherit+0xa8>
 8009c80:	693b      	ldr	r3, [r7, #16]
 8009c82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009c84:	4a0c      	ldr	r2, [pc, #48]	@ (8009cb8 <xTaskPriorityDisinherit+0xd8>)
 8009c86:	6013      	str	r3, [r2, #0]
 8009c88:	693b      	ldr	r3, [r7, #16]
 8009c8a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009c8c:	4613      	mov	r3, r2
 8009c8e:	009b      	lsls	r3, r3, #2
 8009c90:	4413      	add	r3, r2
 8009c92:	009b      	lsls	r3, r3, #2
 8009c94:	4a09      	ldr	r2, [pc, #36]	@ (8009cbc <xTaskPriorityDisinherit+0xdc>)
 8009c96:	441a      	add	r2, r3
 8009c98:	693b      	ldr	r3, [r7, #16]
 8009c9a:	3304      	adds	r3, #4
 8009c9c:	4619      	mov	r1, r3
 8009c9e:	4610      	mov	r0, r2
 8009ca0:	f7fe fbd5 	bl	800844e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8009ca4:	2301      	movs	r3, #1
 8009ca6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8009ca8:	697b      	ldr	r3, [r7, #20]
	}
 8009caa:	4618      	mov	r0, r3
 8009cac:	3718      	adds	r7, #24
 8009cae:	46bd      	mov	sp, r7
 8009cb0:	bd80      	pop	{r7, pc}
 8009cb2:	bf00      	nop
 8009cb4:	20000e28 	.word	0x20000e28
 8009cb8:	20001304 	.word	0x20001304
 8009cbc:	20000e2c 	.word	0x20000e2c

08009cc0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8009cc0:	b580      	push	{r7, lr}
 8009cc2:	b084      	sub	sp, #16
 8009cc4:	af00      	add	r7, sp, #0
 8009cc6:	6078      	str	r0, [r7, #4]
 8009cc8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8009cca:	4b21      	ldr	r3, [pc, #132]	@ (8009d50 <prvAddCurrentTaskToDelayedList+0x90>)
 8009ccc:	681b      	ldr	r3, [r3, #0]
 8009cce:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8009cd0:	4b20      	ldr	r3, [pc, #128]	@ (8009d54 <prvAddCurrentTaskToDelayedList+0x94>)
 8009cd2:	681b      	ldr	r3, [r3, #0]
 8009cd4:	3304      	adds	r3, #4
 8009cd6:	4618      	mov	r0, r3
 8009cd8:	f7fe fc16 	bl	8008508 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8009cdc:	687b      	ldr	r3, [r7, #4]
 8009cde:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8009ce2:	d10a      	bne.n	8009cfa <prvAddCurrentTaskToDelayedList+0x3a>
 8009ce4:	683b      	ldr	r3, [r7, #0]
 8009ce6:	2b00      	cmp	r3, #0
 8009ce8:	d007      	beq.n	8009cfa <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009cea:	4b1a      	ldr	r3, [pc, #104]	@ (8009d54 <prvAddCurrentTaskToDelayedList+0x94>)
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	3304      	adds	r3, #4
 8009cf0:	4619      	mov	r1, r3
 8009cf2:	4819      	ldr	r0, [pc, #100]	@ (8009d58 <prvAddCurrentTaskToDelayedList+0x98>)
 8009cf4:	f7fe fbab 	bl	800844e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8009cf8:	e026      	b.n	8009d48 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8009cfa:	68fa      	ldr	r2, [r7, #12]
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	4413      	add	r3, r2
 8009d00:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8009d02:	4b14      	ldr	r3, [pc, #80]	@ (8009d54 <prvAddCurrentTaskToDelayedList+0x94>)
 8009d04:	681b      	ldr	r3, [r3, #0]
 8009d06:	68ba      	ldr	r2, [r7, #8]
 8009d08:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8009d0a:	68ba      	ldr	r2, [r7, #8]
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	429a      	cmp	r2, r3
 8009d10:	d209      	bcs.n	8009d26 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009d12:	4b12      	ldr	r3, [pc, #72]	@ (8009d5c <prvAddCurrentTaskToDelayedList+0x9c>)
 8009d14:	681a      	ldr	r2, [r3, #0]
 8009d16:	4b0f      	ldr	r3, [pc, #60]	@ (8009d54 <prvAddCurrentTaskToDelayedList+0x94>)
 8009d18:	681b      	ldr	r3, [r3, #0]
 8009d1a:	3304      	adds	r3, #4
 8009d1c:	4619      	mov	r1, r3
 8009d1e:	4610      	mov	r0, r2
 8009d20:	f7fe fbb9 	bl	8008496 <vListInsert>
}
 8009d24:	e010      	b.n	8009d48 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8009d26:	4b0e      	ldr	r3, [pc, #56]	@ (8009d60 <prvAddCurrentTaskToDelayedList+0xa0>)
 8009d28:	681a      	ldr	r2, [r3, #0]
 8009d2a:	4b0a      	ldr	r3, [pc, #40]	@ (8009d54 <prvAddCurrentTaskToDelayedList+0x94>)
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	3304      	adds	r3, #4
 8009d30:	4619      	mov	r1, r3
 8009d32:	4610      	mov	r0, r2
 8009d34:	f7fe fbaf 	bl	8008496 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8009d38:	4b0a      	ldr	r3, [pc, #40]	@ (8009d64 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	68ba      	ldr	r2, [r7, #8]
 8009d3e:	429a      	cmp	r2, r3
 8009d40:	d202      	bcs.n	8009d48 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8009d42:	4a08      	ldr	r2, [pc, #32]	@ (8009d64 <prvAddCurrentTaskToDelayedList+0xa4>)
 8009d44:	68bb      	ldr	r3, [r7, #8]
 8009d46:	6013      	str	r3, [r2, #0]
}
 8009d48:	bf00      	nop
 8009d4a:	3710      	adds	r7, #16
 8009d4c:	46bd      	mov	sp, r7
 8009d4e:	bd80      	pop	{r7, pc}
 8009d50:	20001300 	.word	0x20001300
 8009d54:	20000e28 	.word	0x20000e28
 8009d58:	200012e8 	.word	0x200012e8
 8009d5c:	200012b8 	.word	0x200012b8
 8009d60:	200012b4 	.word	0x200012b4
 8009d64:	2000131c 	.word	0x2000131c

08009d68 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8009d68:	b580      	push	{r7, lr}
 8009d6a:	b08a      	sub	sp, #40	@ 0x28
 8009d6c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8009d6e:	2300      	movs	r3, #0
 8009d70:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8009d72:	f000 fb13 	bl	800a39c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8009d76:	4b1d      	ldr	r3, [pc, #116]	@ (8009dec <xTimerCreateTimerTask+0x84>)
 8009d78:	681b      	ldr	r3, [r3, #0]
 8009d7a:	2b00      	cmp	r3, #0
 8009d7c:	d021      	beq.n	8009dc2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8009d7e:	2300      	movs	r3, #0
 8009d80:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8009d82:	2300      	movs	r3, #0
 8009d84:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8009d86:	1d3a      	adds	r2, r7, #4
 8009d88:	f107 0108 	add.w	r1, r7, #8
 8009d8c:	f107 030c 	add.w	r3, r7, #12
 8009d90:	4618      	mov	r0, r3
 8009d92:	f7fe fb15 	bl	80083c0 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8009d96:	6879      	ldr	r1, [r7, #4]
 8009d98:	68bb      	ldr	r3, [r7, #8]
 8009d9a:	68fa      	ldr	r2, [r7, #12]
 8009d9c:	9202      	str	r2, [sp, #8]
 8009d9e:	9301      	str	r3, [sp, #4]
 8009da0:	2302      	movs	r3, #2
 8009da2:	9300      	str	r3, [sp, #0]
 8009da4:	2300      	movs	r3, #0
 8009da6:	460a      	mov	r2, r1
 8009da8:	4911      	ldr	r1, [pc, #68]	@ (8009df0 <xTimerCreateTimerTask+0x88>)
 8009daa:	4812      	ldr	r0, [pc, #72]	@ (8009df4 <xTimerCreateTimerTask+0x8c>)
 8009dac:	f7ff f8d0 	bl	8008f50 <xTaskCreateStatic>
 8009db0:	4603      	mov	r3, r0
 8009db2:	4a11      	ldr	r2, [pc, #68]	@ (8009df8 <xTimerCreateTimerTask+0x90>)
 8009db4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8009db6:	4b10      	ldr	r3, [pc, #64]	@ (8009df8 <xTimerCreateTimerTask+0x90>)
 8009db8:	681b      	ldr	r3, [r3, #0]
 8009dba:	2b00      	cmp	r3, #0
 8009dbc:	d001      	beq.n	8009dc2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8009dbe:	2301      	movs	r3, #1
 8009dc0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8009dc2:	697b      	ldr	r3, [r7, #20]
 8009dc4:	2b00      	cmp	r3, #0
 8009dc6:	d10b      	bne.n	8009de0 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8009dc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009dcc:	f383 8811 	msr	BASEPRI, r3
 8009dd0:	f3bf 8f6f 	isb	sy
 8009dd4:	f3bf 8f4f 	dsb	sy
 8009dd8:	613b      	str	r3, [r7, #16]
}
 8009dda:	bf00      	nop
 8009ddc:	bf00      	nop
 8009dde:	e7fd      	b.n	8009ddc <xTimerCreateTimerTask+0x74>
	return xReturn;
 8009de0:	697b      	ldr	r3, [r7, #20]
}
 8009de2:	4618      	mov	r0, r3
 8009de4:	3718      	adds	r7, #24
 8009de6:	46bd      	mov	sp, r7
 8009de8:	bd80      	pop	{r7, pc}
 8009dea:	bf00      	nop
 8009dec:	20001358 	.word	0x20001358
 8009df0:	0800f3cc 	.word	0x0800f3cc
 8009df4:	08009f35 	.word	0x08009f35
 8009df8:	2000135c 	.word	0x2000135c

08009dfc <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8009dfc:	b580      	push	{r7, lr}
 8009dfe:	b08a      	sub	sp, #40	@ 0x28
 8009e00:	af00      	add	r7, sp, #0
 8009e02:	60f8      	str	r0, [r7, #12]
 8009e04:	60b9      	str	r1, [r7, #8]
 8009e06:	607a      	str	r2, [r7, #4]
 8009e08:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8009e0a:	2300      	movs	r3, #0
 8009e0c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d10b      	bne.n	8009e2c <xTimerGenericCommand+0x30>
	__asm volatile
 8009e14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009e18:	f383 8811 	msr	BASEPRI, r3
 8009e1c:	f3bf 8f6f 	isb	sy
 8009e20:	f3bf 8f4f 	dsb	sy
 8009e24:	623b      	str	r3, [r7, #32]
}
 8009e26:	bf00      	nop
 8009e28:	bf00      	nop
 8009e2a:	e7fd      	b.n	8009e28 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8009e2c:	4b19      	ldr	r3, [pc, #100]	@ (8009e94 <xTimerGenericCommand+0x98>)
 8009e2e:	681b      	ldr	r3, [r3, #0]
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d02a      	beq.n	8009e8a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8009e34:	68bb      	ldr	r3, [r7, #8]
 8009e36:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8009e3c:	68fb      	ldr	r3, [r7, #12]
 8009e3e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8009e40:	68bb      	ldr	r3, [r7, #8]
 8009e42:	2b05      	cmp	r3, #5
 8009e44:	dc18      	bgt.n	8009e78 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8009e46:	f7ff fead 	bl	8009ba4 <xTaskGetSchedulerState>
 8009e4a:	4603      	mov	r3, r0
 8009e4c:	2b02      	cmp	r3, #2
 8009e4e:	d109      	bne.n	8009e64 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8009e50:	4b10      	ldr	r3, [pc, #64]	@ (8009e94 <xTimerGenericCommand+0x98>)
 8009e52:	6818      	ldr	r0, [r3, #0]
 8009e54:	f107 0110 	add.w	r1, r7, #16
 8009e58:	2300      	movs	r3, #0
 8009e5a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009e5c:	f7fe fc88 	bl	8008770 <xQueueGenericSend>
 8009e60:	6278      	str	r0, [r7, #36]	@ 0x24
 8009e62:	e012      	b.n	8009e8a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8009e64:	4b0b      	ldr	r3, [pc, #44]	@ (8009e94 <xTimerGenericCommand+0x98>)
 8009e66:	6818      	ldr	r0, [r3, #0]
 8009e68:	f107 0110 	add.w	r1, r7, #16
 8009e6c:	2300      	movs	r3, #0
 8009e6e:	2200      	movs	r2, #0
 8009e70:	f7fe fc7e 	bl	8008770 <xQueueGenericSend>
 8009e74:	6278      	str	r0, [r7, #36]	@ 0x24
 8009e76:	e008      	b.n	8009e8a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8009e78:	4b06      	ldr	r3, [pc, #24]	@ (8009e94 <xTimerGenericCommand+0x98>)
 8009e7a:	6818      	ldr	r0, [r3, #0]
 8009e7c:	f107 0110 	add.w	r1, r7, #16
 8009e80:	2300      	movs	r3, #0
 8009e82:	683a      	ldr	r2, [r7, #0]
 8009e84:	f7fe fd76 	bl	8008974 <xQueueGenericSendFromISR>
 8009e88:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8009e8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8009e8c:	4618      	mov	r0, r3
 8009e8e:	3728      	adds	r7, #40	@ 0x28
 8009e90:	46bd      	mov	sp, r7
 8009e92:	bd80      	pop	{r7, pc}
 8009e94:	20001358 	.word	0x20001358

08009e98 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8009e98:	b580      	push	{r7, lr}
 8009e9a:	b088      	sub	sp, #32
 8009e9c:	af02      	add	r7, sp, #8
 8009e9e:	6078      	str	r0, [r7, #4]
 8009ea0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009ea2:	4b23      	ldr	r3, [pc, #140]	@ (8009f30 <prvProcessExpiredTimer+0x98>)
 8009ea4:	681b      	ldr	r3, [r3, #0]
 8009ea6:	68db      	ldr	r3, [r3, #12]
 8009ea8:	68db      	ldr	r3, [r3, #12]
 8009eaa:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8009eac:	697b      	ldr	r3, [r7, #20]
 8009eae:	3304      	adds	r3, #4
 8009eb0:	4618      	mov	r0, r3
 8009eb2:	f7fe fb29 	bl	8008508 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8009eb6:	697b      	ldr	r3, [r7, #20]
 8009eb8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009ebc:	f003 0304 	and.w	r3, r3, #4
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d023      	beq.n	8009f0c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8009ec4:	697b      	ldr	r3, [r7, #20]
 8009ec6:	699a      	ldr	r2, [r3, #24]
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	18d1      	adds	r1, r2, r3
 8009ecc:	687b      	ldr	r3, [r7, #4]
 8009ece:	683a      	ldr	r2, [r7, #0]
 8009ed0:	6978      	ldr	r0, [r7, #20]
 8009ed2:	f000 f8d5 	bl	800a080 <prvInsertTimerInActiveList>
 8009ed6:	4603      	mov	r3, r0
 8009ed8:	2b00      	cmp	r3, #0
 8009eda:	d020      	beq.n	8009f1e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8009edc:	2300      	movs	r3, #0
 8009ede:	9300      	str	r3, [sp, #0]
 8009ee0:	2300      	movs	r3, #0
 8009ee2:	687a      	ldr	r2, [r7, #4]
 8009ee4:	2100      	movs	r1, #0
 8009ee6:	6978      	ldr	r0, [r7, #20]
 8009ee8:	f7ff ff88 	bl	8009dfc <xTimerGenericCommand>
 8009eec:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8009eee:	693b      	ldr	r3, [r7, #16]
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d114      	bne.n	8009f1e <prvProcessExpiredTimer+0x86>
	__asm volatile
 8009ef4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009ef8:	f383 8811 	msr	BASEPRI, r3
 8009efc:	f3bf 8f6f 	isb	sy
 8009f00:	f3bf 8f4f 	dsb	sy
 8009f04:	60fb      	str	r3, [r7, #12]
}
 8009f06:	bf00      	nop
 8009f08:	bf00      	nop
 8009f0a:	e7fd      	b.n	8009f08 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8009f0c:	697b      	ldr	r3, [r7, #20]
 8009f0e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8009f12:	f023 0301 	bic.w	r3, r3, #1
 8009f16:	b2da      	uxtb	r2, r3
 8009f18:	697b      	ldr	r3, [r7, #20]
 8009f1a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8009f1e:	697b      	ldr	r3, [r7, #20]
 8009f20:	6a1b      	ldr	r3, [r3, #32]
 8009f22:	6978      	ldr	r0, [r7, #20]
 8009f24:	4798      	blx	r3
}
 8009f26:	bf00      	nop
 8009f28:	3718      	adds	r7, #24
 8009f2a:	46bd      	mov	sp, r7
 8009f2c:	bd80      	pop	{r7, pc}
 8009f2e:	bf00      	nop
 8009f30:	20001350 	.word	0x20001350

08009f34 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8009f34:	b580      	push	{r7, lr}
 8009f36:	b084      	sub	sp, #16
 8009f38:	af00      	add	r7, sp, #0
 8009f3a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009f3c:	f107 0308 	add.w	r3, r7, #8
 8009f40:	4618      	mov	r0, r3
 8009f42:	f000 f859 	bl	8009ff8 <prvGetNextExpireTime>
 8009f46:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8009f48:	68bb      	ldr	r3, [r7, #8]
 8009f4a:	4619      	mov	r1, r3
 8009f4c:	68f8      	ldr	r0, [r7, #12]
 8009f4e:	f000 f805 	bl	8009f5c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8009f52:	f000 f8d7 	bl	800a104 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8009f56:	bf00      	nop
 8009f58:	e7f0      	b.n	8009f3c <prvTimerTask+0x8>
	...

08009f5c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8009f5c:	b580      	push	{r7, lr}
 8009f5e:	b084      	sub	sp, #16
 8009f60:	af00      	add	r7, sp, #0
 8009f62:	6078      	str	r0, [r7, #4]
 8009f64:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8009f66:	f7ff fa37 	bl	80093d8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8009f6a:	f107 0308 	add.w	r3, r7, #8
 8009f6e:	4618      	mov	r0, r3
 8009f70:	f000 f866 	bl	800a040 <prvSampleTimeNow>
 8009f74:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8009f76:	68bb      	ldr	r3, [r7, #8]
 8009f78:	2b00      	cmp	r3, #0
 8009f7a:	d130      	bne.n	8009fde <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8009f7c:	683b      	ldr	r3, [r7, #0]
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d10a      	bne.n	8009f98 <prvProcessTimerOrBlockTask+0x3c>
 8009f82:	687a      	ldr	r2, [r7, #4]
 8009f84:	68fb      	ldr	r3, [r7, #12]
 8009f86:	429a      	cmp	r2, r3
 8009f88:	d806      	bhi.n	8009f98 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8009f8a:	f7ff fa33 	bl	80093f4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8009f8e:	68f9      	ldr	r1, [r7, #12]
 8009f90:	6878      	ldr	r0, [r7, #4]
 8009f92:	f7ff ff81 	bl	8009e98 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8009f96:	e024      	b.n	8009fe2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8009f98:	683b      	ldr	r3, [r7, #0]
 8009f9a:	2b00      	cmp	r3, #0
 8009f9c:	d008      	beq.n	8009fb0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8009f9e:	4b13      	ldr	r3, [pc, #76]	@ (8009fec <prvProcessTimerOrBlockTask+0x90>)
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	681b      	ldr	r3, [r3, #0]
 8009fa4:	2b00      	cmp	r3, #0
 8009fa6:	d101      	bne.n	8009fac <prvProcessTimerOrBlockTask+0x50>
 8009fa8:	2301      	movs	r3, #1
 8009faa:	e000      	b.n	8009fae <prvProcessTimerOrBlockTask+0x52>
 8009fac:	2300      	movs	r3, #0
 8009fae:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8009fb0:	4b0f      	ldr	r3, [pc, #60]	@ (8009ff0 <prvProcessTimerOrBlockTask+0x94>)
 8009fb2:	6818      	ldr	r0, [r3, #0]
 8009fb4:	687a      	ldr	r2, [r7, #4]
 8009fb6:	68fb      	ldr	r3, [r7, #12]
 8009fb8:	1ad3      	subs	r3, r2, r3
 8009fba:	683a      	ldr	r2, [r7, #0]
 8009fbc:	4619      	mov	r1, r3
 8009fbe:	f7fe ff93 	bl	8008ee8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8009fc2:	f7ff fa17 	bl	80093f4 <xTaskResumeAll>
 8009fc6:	4603      	mov	r3, r0
 8009fc8:	2b00      	cmp	r3, #0
 8009fca:	d10a      	bne.n	8009fe2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8009fcc:	4b09      	ldr	r3, [pc, #36]	@ (8009ff4 <prvProcessTimerOrBlockTask+0x98>)
 8009fce:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009fd2:	601a      	str	r2, [r3, #0]
 8009fd4:	f3bf 8f4f 	dsb	sy
 8009fd8:	f3bf 8f6f 	isb	sy
}
 8009fdc:	e001      	b.n	8009fe2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8009fde:	f7ff fa09 	bl	80093f4 <xTaskResumeAll>
}
 8009fe2:	bf00      	nop
 8009fe4:	3710      	adds	r7, #16
 8009fe6:	46bd      	mov	sp, r7
 8009fe8:	bd80      	pop	{r7, pc}
 8009fea:	bf00      	nop
 8009fec:	20001354 	.word	0x20001354
 8009ff0:	20001358 	.word	0x20001358
 8009ff4:	e000ed04 	.word	0xe000ed04

08009ff8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8009ff8:	b480      	push	{r7}
 8009ffa:	b085      	sub	sp, #20
 8009ffc:	af00      	add	r7, sp, #0
 8009ffe:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a000:	4b0e      	ldr	r3, [pc, #56]	@ (800a03c <prvGetNextExpireTime+0x44>)
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	2b00      	cmp	r3, #0
 800a008:	d101      	bne.n	800a00e <prvGetNextExpireTime+0x16>
 800a00a:	2201      	movs	r2, #1
 800a00c:	e000      	b.n	800a010 <prvGetNextExpireTime+0x18>
 800a00e:	2200      	movs	r2, #0
 800a010:	687b      	ldr	r3, [r7, #4]
 800a012:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	681b      	ldr	r3, [r3, #0]
 800a018:	2b00      	cmp	r3, #0
 800a01a:	d105      	bne.n	800a028 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a01c:	4b07      	ldr	r3, [pc, #28]	@ (800a03c <prvGetNextExpireTime+0x44>)
 800a01e:	681b      	ldr	r3, [r3, #0]
 800a020:	68db      	ldr	r3, [r3, #12]
 800a022:	681b      	ldr	r3, [r3, #0]
 800a024:	60fb      	str	r3, [r7, #12]
 800a026:	e001      	b.n	800a02c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a028:	2300      	movs	r3, #0
 800a02a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a02c:	68fb      	ldr	r3, [r7, #12]
}
 800a02e:	4618      	mov	r0, r3
 800a030:	3714      	adds	r7, #20
 800a032:	46bd      	mov	sp, r7
 800a034:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a038:	4770      	bx	lr
 800a03a:	bf00      	nop
 800a03c:	20001350 	.word	0x20001350

0800a040 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a040:	b580      	push	{r7, lr}
 800a042:	b084      	sub	sp, #16
 800a044:	af00      	add	r7, sp, #0
 800a046:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a048:	f7ff fa72 	bl	8009530 <xTaskGetTickCount>
 800a04c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a04e:	4b0b      	ldr	r3, [pc, #44]	@ (800a07c <prvSampleTimeNow+0x3c>)
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	68fa      	ldr	r2, [r7, #12]
 800a054:	429a      	cmp	r2, r3
 800a056:	d205      	bcs.n	800a064 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a058:	f000 f93a 	bl	800a2d0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	2201      	movs	r2, #1
 800a060:	601a      	str	r2, [r3, #0]
 800a062:	e002      	b.n	800a06a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a064:	687b      	ldr	r3, [r7, #4]
 800a066:	2200      	movs	r2, #0
 800a068:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a06a:	4a04      	ldr	r2, [pc, #16]	@ (800a07c <prvSampleTimeNow+0x3c>)
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a070:	68fb      	ldr	r3, [r7, #12]
}
 800a072:	4618      	mov	r0, r3
 800a074:	3710      	adds	r7, #16
 800a076:	46bd      	mov	sp, r7
 800a078:	bd80      	pop	{r7, pc}
 800a07a:	bf00      	nop
 800a07c:	20001360 	.word	0x20001360

0800a080 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a080:	b580      	push	{r7, lr}
 800a082:	b086      	sub	sp, #24
 800a084:	af00      	add	r7, sp, #0
 800a086:	60f8      	str	r0, [r7, #12]
 800a088:	60b9      	str	r1, [r7, #8]
 800a08a:	607a      	str	r2, [r7, #4]
 800a08c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a08e:	2300      	movs	r3, #0
 800a090:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a092:	68fb      	ldr	r3, [r7, #12]
 800a094:	68ba      	ldr	r2, [r7, #8]
 800a096:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a098:	68fb      	ldr	r3, [r7, #12]
 800a09a:	68fa      	ldr	r2, [r7, #12]
 800a09c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a09e:	68ba      	ldr	r2, [r7, #8]
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	429a      	cmp	r2, r3
 800a0a4:	d812      	bhi.n	800a0cc <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a0a6:	687a      	ldr	r2, [r7, #4]
 800a0a8:	683b      	ldr	r3, [r7, #0]
 800a0aa:	1ad2      	subs	r2, r2, r3
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	699b      	ldr	r3, [r3, #24]
 800a0b0:	429a      	cmp	r2, r3
 800a0b2:	d302      	bcc.n	800a0ba <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a0b4:	2301      	movs	r3, #1
 800a0b6:	617b      	str	r3, [r7, #20]
 800a0b8:	e01b      	b.n	800a0f2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a0ba:	4b10      	ldr	r3, [pc, #64]	@ (800a0fc <prvInsertTimerInActiveList+0x7c>)
 800a0bc:	681a      	ldr	r2, [r3, #0]
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	3304      	adds	r3, #4
 800a0c2:	4619      	mov	r1, r3
 800a0c4:	4610      	mov	r0, r2
 800a0c6:	f7fe f9e6 	bl	8008496 <vListInsert>
 800a0ca:	e012      	b.n	800a0f2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a0cc:	687a      	ldr	r2, [r7, #4]
 800a0ce:	683b      	ldr	r3, [r7, #0]
 800a0d0:	429a      	cmp	r2, r3
 800a0d2:	d206      	bcs.n	800a0e2 <prvInsertTimerInActiveList+0x62>
 800a0d4:	68ba      	ldr	r2, [r7, #8]
 800a0d6:	683b      	ldr	r3, [r7, #0]
 800a0d8:	429a      	cmp	r2, r3
 800a0da:	d302      	bcc.n	800a0e2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a0dc:	2301      	movs	r3, #1
 800a0de:	617b      	str	r3, [r7, #20]
 800a0e0:	e007      	b.n	800a0f2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a0e2:	4b07      	ldr	r3, [pc, #28]	@ (800a100 <prvInsertTimerInActiveList+0x80>)
 800a0e4:	681a      	ldr	r2, [r3, #0]
 800a0e6:	68fb      	ldr	r3, [r7, #12]
 800a0e8:	3304      	adds	r3, #4
 800a0ea:	4619      	mov	r1, r3
 800a0ec:	4610      	mov	r0, r2
 800a0ee:	f7fe f9d2 	bl	8008496 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a0f2:	697b      	ldr	r3, [r7, #20]
}
 800a0f4:	4618      	mov	r0, r3
 800a0f6:	3718      	adds	r7, #24
 800a0f8:	46bd      	mov	sp, r7
 800a0fa:	bd80      	pop	{r7, pc}
 800a0fc:	20001354 	.word	0x20001354
 800a100:	20001350 	.word	0x20001350

0800a104 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a104:	b580      	push	{r7, lr}
 800a106:	b08e      	sub	sp, #56	@ 0x38
 800a108:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a10a:	e0ce      	b.n	800a2aa <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a10c:	687b      	ldr	r3, [r7, #4]
 800a10e:	2b00      	cmp	r3, #0
 800a110:	da19      	bge.n	800a146 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a112:	1d3b      	adds	r3, r7, #4
 800a114:	3304      	adds	r3, #4
 800a116:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a118:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a11a:	2b00      	cmp	r3, #0
 800a11c:	d10b      	bne.n	800a136 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800a11e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a122:	f383 8811 	msr	BASEPRI, r3
 800a126:	f3bf 8f6f 	isb	sy
 800a12a:	f3bf 8f4f 	dsb	sy
 800a12e:	61fb      	str	r3, [r7, #28]
}
 800a130:	bf00      	nop
 800a132:	bf00      	nop
 800a134:	e7fd      	b.n	800a132 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a136:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a13c:	6850      	ldr	r0, [r2, #4]
 800a13e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a140:	6892      	ldr	r2, [r2, #8]
 800a142:	4611      	mov	r1, r2
 800a144:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a146:	687b      	ldr	r3, [r7, #4]
 800a148:	2b00      	cmp	r3, #0
 800a14a:	f2c0 80ae 	blt.w	800a2aa <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a152:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a154:	695b      	ldr	r3, [r3, #20]
 800a156:	2b00      	cmp	r3, #0
 800a158:	d004      	beq.n	800a164 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a15a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a15c:	3304      	adds	r3, #4
 800a15e:	4618      	mov	r0, r3
 800a160:	f7fe f9d2 	bl	8008508 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a164:	463b      	mov	r3, r7
 800a166:	4618      	mov	r0, r3
 800a168:	f7ff ff6a 	bl	800a040 <prvSampleTimeNow>
 800a16c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800a16e:	687b      	ldr	r3, [r7, #4]
 800a170:	2b09      	cmp	r3, #9
 800a172:	f200 8097 	bhi.w	800a2a4 <prvProcessReceivedCommands+0x1a0>
 800a176:	a201      	add	r2, pc, #4	@ (adr r2, 800a17c <prvProcessReceivedCommands+0x78>)
 800a178:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a17c:	0800a1a5 	.word	0x0800a1a5
 800a180:	0800a1a5 	.word	0x0800a1a5
 800a184:	0800a1a5 	.word	0x0800a1a5
 800a188:	0800a21b 	.word	0x0800a21b
 800a18c:	0800a22f 	.word	0x0800a22f
 800a190:	0800a27b 	.word	0x0800a27b
 800a194:	0800a1a5 	.word	0x0800a1a5
 800a198:	0800a1a5 	.word	0x0800a1a5
 800a19c:	0800a21b 	.word	0x0800a21b
 800a1a0:	0800a22f 	.word	0x0800a22f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a1a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1a6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a1aa:	f043 0301 	orr.w	r3, r3, #1
 800a1ae:	b2da      	uxtb	r2, r3
 800a1b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1b2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800a1b6:	68ba      	ldr	r2, [r7, #8]
 800a1b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1ba:	699b      	ldr	r3, [r3, #24]
 800a1bc:	18d1      	adds	r1, r2, r3
 800a1be:	68bb      	ldr	r3, [r7, #8]
 800a1c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a1c2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a1c4:	f7ff ff5c 	bl	800a080 <prvInsertTimerInActiveList>
 800a1c8:	4603      	mov	r3, r0
 800a1ca:	2b00      	cmp	r3, #0
 800a1cc:	d06c      	beq.n	800a2a8 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a1ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1d0:	6a1b      	ldr	r3, [r3, #32]
 800a1d2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a1d4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a1d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1d8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a1dc:	f003 0304 	and.w	r3, r3, #4
 800a1e0:	2b00      	cmp	r3, #0
 800a1e2:	d061      	beq.n	800a2a8 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800a1e4:	68ba      	ldr	r2, [r7, #8]
 800a1e6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a1e8:	699b      	ldr	r3, [r3, #24]
 800a1ea:	441a      	add	r2, r3
 800a1ec:	2300      	movs	r3, #0
 800a1ee:	9300      	str	r3, [sp, #0]
 800a1f0:	2300      	movs	r3, #0
 800a1f2:	2100      	movs	r1, #0
 800a1f4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a1f6:	f7ff fe01 	bl	8009dfc <xTimerGenericCommand>
 800a1fa:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800a1fc:	6a3b      	ldr	r3, [r7, #32]
 800a1fe:	2b00      	cmp	r3, #0
 800a200:	d152      	bne.n	800a2a8 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800a202:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a206:	f383 8811 	msr	BASEPRI, r3
 800a20a:	f3bf 8f6f 	isb	sy
 800a20e:	f3bf 8f4f 	dsb	sy
 800a212:	61bb      	str	r3, [r7, #24]
}
 800a214:	bf00      	nop
 800a216:	bf00      	nop
 800a218:	e7fd      	b.n	800a216 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a21a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a21c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a220:	f023 0301 	bic.w	r3, r3, #1
 800a224:	b2da      	uxtb	r2, r3
 800a226:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a228:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800a22c:	e03d      	b.n	800a2aa <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800a22e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a230:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a234:	f043 0301 	orr.w	r3, r3, #1
 800a238:	b2da      	uxtb	r2, r3
 800a23a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a23c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800a240:	68ba      	ldr	r2, [r7, #8]
 800a242:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a244:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800a246:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a248:	699b      	ldr	r3, [r3, #24]
 800a24a:	2b00      	cmp	r3, #0
 800a24c:	d10b      	bne.n	800a266 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800a24e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a252:	f383 8811 	msr	BASEPRI, r3
 800a256:	f3bf 8f6f 	isb	sy
 800a25a:	f3bf 8f4f 	dsb	sy
 800a25e:	617b      	str	r3, [r7, #20]
}
 800a260:	bf00      	nop
 800a262:	bf00      	nop
 800a264:	e7fd      	b.n	800a262 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800a266:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a268:	699a      	ldr	r2, [r3, #24]
 800a26a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a26c:	18d1      	adds	r1, r2, r3
 800a26e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a270:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a272:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a274:	f7ff ff04 	bl	800a080 <prvInsertTimerInActiveList>
					break;
 800a278:	e017      	b.n	800a2aa <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800a27a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a27c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a280:	f003 0302 	and.w	r3, r3, #2
 800a284:	2b00      	cmp	r3, #0
 800a286:	d103      	bne.n	800a290 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 800a288:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a28a:	f000 fbe5 	bl	800aa58 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800a28e:	e00c      	b.n	800a2aa <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a290:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a292:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a296:	f023 0301 	bic.w	r3, r3, #1
 800a29a:	b2da      	uxtb	r2, r3
 800a29c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a29e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800a2a2:	e002      	b.n	800a2aa <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 800a2a4:	bf00      	nop
 800a2a6:	e000      	b.n	800a2aa <prvProcessReceivedCommands+0x1a6>
					break;
 800a2a8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a2aa:	4b08      	ldr	r3, [pc, #32]	@ (800a2cc <prvProcessReceivedCommands+0x1c8>)
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	1d39      	adds	r1, r7, #4
 800a2b0:	2200      	movs	r2, #0
 800a2b2:	4618      	mov	r0, r3
 800a2b4:	f7fe fbfc 	bl	8008ab0 <xQueueReceive>
 800a2b8:	4603      	mov	r3, r0
 800a2ba:	2b00      	cmp	r3, #0
 800a2bc:	f47f af26 	bne.w	800a10c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800a2c0:	bf00      	nop
 800a2c2:	bf00      	nop
 800a2c4:	3730      	adds	r7, #48	@ 0x30
 800a2c6:	46bd      	mov	sp, r7
 800a2c8:	bd80      	pop	{r7, pc}
 800a2ca:	bf00      	nop
 800a2cc:	20001358 	.word	0x20001358

0800a2d0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800a2d0:	b580      	push	{r7, lr}
 800a2d2:	b088      	sub	sp, #32
 800a2d4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a2d6:	e049      	b.n	800a36c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a2d8:	4b2e      	ldr	r3, [pc, #184]	@ (800a394 <prvSwitchTimerLists+0xc4>)
 800a2da:	681b      	ldr	r3, [r3, #0]
 800a2dc:	68db      	ldr	r3, [r3, #12]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a2e2:	4b2c      	ldr	r3, [pc, #176]	@ (800a394 <prvSwitchTimerLists+0xc4>)
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	68db      	ldr	r3, [r3, #12]
 800a2e8:	68db      	ldr	r3, [r3, #12]
 800a2ea:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	3304      	adds	r3, #4
 800a2f0:	4618      	mov	r0, r3
 800a2f2:	f7fe f909 	bl	8008508 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	6a1b      	ldr	r3, [r3, #32]
 800a2fa:	68f8      	ldr	r0, [r7, #12]
 800a2fc:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a2fe:	68fb      	ldr	r3, [r7, #12]
 800a300:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800a304:	f003 0304 	and.w	r3, r3, #4
 800a308:	2b00      	cmp	r3, #0
 800a30a:	d02f      	beq.n	800a36c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	699b      	ldr	r3, [r3, #24]
 800a310:	693a      	ldr	r2, [r7, #16]
 800a312:	4413      	add	r3, r2
 800a314:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800a316:	68ba      	ldr	r2, [r7, #8]
 800a318:	693b      	ldr	r3, [r7, #16]
 800a31a:	429a      	cmp	r2, r3
 800a31c:	d90e      	bls.n	800a33c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800a31e:	68fb      	ldr	r3, [r7, #12]
 800a320:	68ba      	ldr	r2, [r7, #8]
 800a322:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a324:	68fb      	ldr	r3, [r7, #12]
 800a326:	68fa      	ldr	r2, [r7, #12]
 800a328:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a32a:	4b1a      	ldr	r3, [pc, #104]	@ (800a394 <prvSwitchTimerLists+0xc4>)
 800a32c:	681a      	ldr	r2, [r3, #0]
 800a32e:	68fb      	ldr	r3, [r7, #12]
 800a330:	3304      	adds	r3, #4
 800a332:	4619      	mov	r1, r3
 800a334:	4610      	mov	r0, r2
 800a336:	f7fe f8ae 	bl	8008496 <vListInsert>
 800a33a:	e017      	b.n	800a36c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a33c:	2300      	movs	r3, #0
 800a33e:	9300      	str	r3, [sp, #0]
 800a340:	2300      	movs	r3, #0
 800a342:	693a      	ldr	r2, [r7, #16]
 800a344:	2100      	movs	r1, #0
 800a346:	68f8      	ldr	r0, [r7, #12]
 800a348:	f7ff fd58 	bl	8009dfc <xTimerGenericCommand>
 800a34c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800a34e:	687b      	ldr	r3, [r7, #4]
 800a350:	2b00      	cmp	r3, #0
 800a352:	d10b      	bne.n	800a36c <prvSwitchTimerLists+0x9c>
	__asm volatile
 800a354:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a358:	f383 8811 	msr	BASEPRI, r3
 800a35c:	f3bf 8f6f 	isb	sy
 800a360:	f3bf 8f4f 	dsb	sy
 800a364:	603b      	str	r3, [r7, #0]
}
 800a366:	bf00      	nop
 800a368:	bf00      	nop
 800a36a:	e7fd      	b.n	800a368 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800a36c:	4b09      	ldr	r3, [pc, #36]	@ (800a394 <prvSwitchTimerLists+0xc4>)
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	681b      	ldr	r3, [r3, #0]
 800a372:	2b00      	cmp	r3, #0
 800a374:	d1b0      	bne.n	800a2d8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800a376:	4b07      	ldr	r3, [pc, #28]	@ (800a394 <prvSwitchTimerLists+0xc4>)
 800a378:	681b      	ldr	r3, [r3, #0]
 800a37a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800a37c:	4b06      	ldr	r3, [pc, #24]	@ (800a398 <prvSwitchTimerLists+0xc8>)
 800a37e:	681b      	ldr	r3, [r3, #0]
 800a380:	4a04      	ldr	r2, [pc, #16]	@ (800a394 <prvSwitchTimerLists+0xc4>)
 800a382:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800a384:	4a04      	ldr	r2, [pc, #16]	@ (800a398 <prvSwitchTimerLists+0xc8>)
 800a386:	697b      	ldr	r3, [r7, #20]
 800a388:	6013      	str	r3, [r2, #0]
}
 800a38a:	bf00      	nop
 800a38c:	3718      	adds	r7, #24
 800a38e:	46bd      	mov	sp, r7
 800a390:	bd80      	pop	{r7, pc}
 800a392:	bf00      	nop
 800a394:	20001350 	.word	0x20001350
 800a398:	20001354 	.word	0x20001354

0800a39c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800a39c:	b580      	push	{r7, lr}
 800a39e:	b082      	sub	sp, #8
 800a3a0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800a3a2:	f000 f969 	bl	800a678 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800a3a6:	4b15      	ldr	r3, [pc, #84]	@ (800a3fc <prvCheckForValidListAndQueue+0x60>)
 800a3a8:	681b      	ldr	r3, [r3, #0]
 800a3aa:	2b00      	cmp	r3, #0
 800a3ac:	d120      	bne.n	800a3f0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800a3ae:	4814      	ldr	r0, [pc, #80]	@ (800a400 <prvCheckForValidListAndQueue+0x64>)
 800a3b0:	f7fe f820 	bl	80083f4 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800a3b4:	4813      	ldr	r0, [pc, #76]	@ (800a404 <prvCheckForValidListAndQueue+0x68>)
 800a3b6:	f7fe f81d 	bl	80083f4 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800a3ba:	4b13      	ldr	r3, [pc, #76]	@ (800a408 <prvCheckForValidListAndQueue+0x6c>)
 800a3bc:	4a10      	ldr	r2, [pc, #64]	@ (800a400 <prvCheckForValidListAndQueue+0x64>)
 800a3be:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800a3c0:	4b12      	ldr	r3, [pc, #72]	@ (800a40c <prvCheckForValidListAndQueue+0x70>)
 800a3c2:	4a10      	ldr	r2, [pc, #64]	@ (800a404 <prvCheckForValidListAndQueue+0x68>)
 800a3c4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800a3c6:	2300      	movs	r3, #0
 800a3c8:	9300      	str	r3, [sp, #0]
 800a3ca:	4b11      	ldr	r3, [pc, #68]	@ (800a410 <prvCheckForValidListAndQueue+0x74>)
 800a3cc:	4a11      	ldr	r2, [pc, #68]	@ (800a414 <prvCheckForValidListAndQueue+0x78>)
 800a3ce:	2110      	movs	r1, #16
 800a3d0:	200a      	movs	r0, #10
 800a3d2:	f7fe f92d 	bl	8008630 <xQueueGenericCreateStatic>
 800a3d6:	4603      	mov	r3, r0
 800a3d8:	4a08      	ldr	r2, [pc, #32]	@ (800a3fc <prvCheckForValidListAndQueue+0x60>)
 800a3da:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800a3dc:	4b07      	ldr	r3, [pc, #28]	@ (800a3fc <prvCheckForValidListAndQueue+0x60>)
 800a3de:	681b      	ldr	r3, [r3, #0]
 800a3e0:	2b00      	cmp	r3, #0
 800a3e2:	d005      	beq.n	800a3f0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800a3e4:	4b05      	ldr	r3, [pc, #20]	@ (800a3fc <prvCheckForValidListAndQueue+0x60>)
 800a3e6:	681b      	ldr	r3, [r3, #0]
 800a3e8:	490b      	ldr	r1, [pc, #44]	@ (800a418 <prvCheckForValidListAndQueue+0x7c>)
 800a3ea:	4618      	mov	r0, r3
 800a3ec:	f7fe fd52 	bl	8008e94 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a3f0:	f000 f974 	bl	800a6dc <vPortExitCritical>
}
 800a3f4:	bf00      	nop
 800a3f6:	46bd      	mov	sp, r7
 800a3f8:	bd80      	pop	{r7, pc}
 800a3fa:	bf00      	nop
 800a3fc:	20001358 	.word	0x20001358
 800a400:	20001328 	.word	0x20001328
 800a404:	2000133c 	.word	0x2000133c
 800a408:	20001350 	.word	0x20001350
 800a40c:	20001354 	.word	0x20001354
 800a410:	20001404 	.word	0x20001404
 800a414:	20001364 	.word	0x20001364
 800a418:	0800f3d4 	.word	0x0800f3d4

0800a41c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a41c:	b480      	push	{r7}
 800a41e:	b085      	sub	sp, #20
 800a420:	af00      	add	r7, sp, #0
 800a422:	60f8      	str	r0, [r7, #12]
 800a424:	60b9      	str	r1, [r7, #8]
 800a426:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a428:	68fb      	ldr	r3, [r7, #12]
 800a42a:	3b04      	subs	r3, #4
 800a42c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a42e:	68fb      	ldr	r3, [r7, #12]
 800a430:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800a434:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	3b04      	subs	r3, #4
 800a43a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a43c:	68bb      	ldr	r3, [r7, #8]
 800a43e:	f023 0201 	bic.w	r2, r3, #1
 800a442:	68fb      	ldr	r3, [r7, #12]
 800a444:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	3b04      	subs	r3, #4
 800a44a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a44c:	4a0c      	ldr	r2, [pc, #48]	@ (800a480 <pxPortInitialiseStack+0x64>)
 800a44e:	68fb      	ldr	r3, [r7, #12]
 800a450:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a452:	68fb      	ldr	r3, [r7, #12]
 800a454:	3b14      	subs	r3, #20
 800a456:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a458:	687a      	ldr	r2, [r7, #4]
 800a45a:	68fb      	ldr	r3, [r7, #12]
 800a45c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a45e:	68fb      	ldr	r3, [r7, #12]
 800a460:	3b04      	subs	r3, #4
 800a462:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a464:	68fb      	ldr	r3, [r7, #12]
 800a466:	f06f 0202 	mvn.w	r2, #2
 800a46a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a46c:	68fb      	ldr	r3, [r7, #12]
 800a46e:	3b20      	subs	r3, #32
 800a470:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a472:	68fb      	ldr	r3, [r7, #12]
}
 800a474:	4618      	mov	r0, r3
 800a476:	3714      	adds	r7, #20
 800a478:	46bd      	mov	sp, r7
 800a47a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a47e:	4770      	bx	lr
 800a480:	0800a485 	.word	0x0800a485

0800a484 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a484:	b480      	push	{r7}
 800a486:	b085      	sub	sp, #20
 800a488:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a48a:	2300      	movs	r3, #0
 800a48c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a48e:	4b13      	ldr	r3, [pc, #76]	@ (800a4dc <prvTaskExitError+0x58>)
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 800a496:	d00b      	beq.n	800a4b0 <prvTaskExitError+0x2c>
	__asm volatile
 800a498:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a49c:	f383 8811 	msr	BASEPRI, r3
 800a4a0:	f3bf 8f6f 	isb	sy
 800a4a4:	f3bf 8f4f 	dsb	sy
 800a4a8:	60fb      	str	r3, [r7, #12]
}
 800a4aa:	bf00      	nop
 800a4ac:	bf00      	nop
 800a4ae:	e7fd      	b.n	800a4ac <prvTaskExitError+0x28>
	__asm volatile
 800a4b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a4b4:	f383 8811 	msr	BASEPRI, r3
 800a4b8:	f3bf 8f6f 	isb	sy
 800a4bc:	f3bf 8f4f 	dsb	sy
 800a4c0:	60bb      	str	r3, [r7, #8]
}
 800a4c2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a4c4:	bf00      	nop
 800a4c6:	687b      	ldr	r3, [r7, #4]
 800a4c8:	2b00      	cmp	r3, #0
 800a4ca:	d0fc      	beq.n	800a4c6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a4cc:	bf00      	nop
 800a4ce:	bf00      	nop
 800a4d0:	3714      	adds	r7, #20
 800a4d2:	46bd      	mov	sp, r7
 800a4d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4d8:	4770      	bx	lr
 800a4da:	bf00      	nop
 800a4dc:	200000b0 	.word	0x200000b0

0800a4e0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a4e0:	4b07      	ldr	r3, [pc, #28]	@ (800a500 <pxCurrentTCBConst2>)
 800a4e2:	6819      	ldr	r1, [r3, #0]
 800a4e4:	6808      	ldr	r0, [r1, #0]
 800a4e6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4ea:	f380 8809 	msr	PSP, r0
 800a4ee:	f3bf 8f6f 	isb	sy
 800a4f2:	f04f 0000 	mov.w	r0, #0
 800a4f6:	f380 8811 	msr	BASEPRI, r0
 800a4fa:	4770      	bx	lr
 800a4fc:	f3af 8000 	nop.w

0800a500 <pxCurrentTCBConst2>:
 800a500:	20000e28 	.word	0x20000e28
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a504:	bf00      	nop
 800a506:	bf00      	nop

0800a508 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a508:	4808      	ldr	r0, [pc, #32]	@ (800a52c <prvPortStartFirstTask+0x24>)
 800a50a:	6800      	ldr	r0, [r0, #0]
 800a50c:	6800      	ldr	r0, [r0, #0]
 800a50e:	f380 8808 	msr	MSP, r0
 800a512:	f04f 0000 	mov.w	r0, #0
 800a516:	f380 8814 	msr	CONTROL, r0
 800a51a:	b662      	cpsie	i
 800a51c:	b661      	cpsie	f
 800a51e:	f3bf 8f4f 	dsb	sy
 800a522:	f3bf 8f6f 	isb	sy
 800a526:	df00      	svc	0
 800a528:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a52a:	bf00      	nop
 800a52c:	e000ed08 	.word	0xe000ed08

0800a530 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a530:	b580      	push	{r7, lr}
 800a532:	b086      	sub	sp, #24
 800a534:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a536:	4b47      	ldr	r3, [pc, #284]	@ (800a654 <xPortStartScheduler+0x124>)
 800a538:	681b      	ldr	r3, [r3, #0]
 800a53a:	4a47      	ldr	r2, [pc, #284]	@ (800a658 <xPortStartScheduler+0x128>)
 800a53c:	4293      	cmp	r3, r2
 800a53e:	d10b      	bne.n	800a558 <xPortStartScheduler+0x28>
	__asm volatile
 800a540:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a544:	f383 8811 	msr	BASEPRI, r3
 800a548:	f3bf 8f6f 	isb	sy
 800a54c:	f3bf 8f4f 	dsb	sy
 800a550:	613b      	str	r3, [r7, #16]
}
 800a552:	bf00      	nop
 800a554:	bf00      	nop
 800a556:	e7fd      	b.n	800a554 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a558:	4b3e      	ldr	r3, [pc, #248]	@ (800a654 <xPortStartScheduler+0x124>)
 800a55a:	681b      	ldr	r3, [r3, #0]
 800a55c:	4a3f      	ldr	r2, [pc, #252]	@ (800a65c <xPortStartScheduler+0x12c>)
 800a55e:	4293      	cmp	r3, r2
 800a560:	d10b      	bne.n	800a57a <xPortStartScheduler+0x4a>
	__asm volatile
 800a562:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a566:	f383 8811 	msr	BASEPRI, r3
 800a56a:	f3bf 8f6f 	isb	sy
 800a56e:	f3bf 8f4f 	dsb	sy
 800a572:	60fb      	str	r3, [r7, #12]
}
 800a574:	bf00      	nop
 800a576:	bf00      	nop
 800a578:	e7fd      	b.n	800a576 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a57a:	4b39      	ldr	r3, [pc, #228]	@ (800a660 <xPortStartScheduler+0x130>)
 800a57c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a57e:	697b      	ldr	r3, [r7, #20]
 800a580:	781b      	ldrb	r3, [r3, #0]
 800a582:	b2db      	uxtb	r3, r3
 800a584:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a586:	697b      	ldr	r3, [r7, #20]
 800a588:	22ff      	movs	r2, #255	@ 0xff
 800a58a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a58c:	697b      	ldr	r3, [r7, #20]
 800a58e:	781b      	ldrb	r3, [r3, #0]
 800a590:	b2db      	uxtb	r3, r3
 800a592:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a594:	78fb      	ldrb	r3, [r7, #3]
 800a596:	b2db      	uxtb	r3, r3
 800a598:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800a59c:	b2da      	uxtb	r2, r3
 800a59e:	4b31      	ldr	r3, [pc, #196]	@ (800a664 <xPortStartScheduler+0x134>)
 800a5a0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a5a2:	4b31      	ldr	r3, [pc, #196]	@ (800a668 <xPortStartScheduler+0x138>)
 800a5a4:	2207      	movs	r2, #7
 800a5a6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a5a8:	e009      	b.n	800a5be <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800a5aa:	4b2f      	ldr	r3, [pc, #188]	@ (800a668 <xPortStartScheduler+0x138>)
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	3b01      	subs	r3, #1
 800a5b0:	4a2d      	ldr	r2, [pc, #180]	@ (800a668 <xPortStartScheduler+0x138>)
 800a5b2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a5b4:	78fb      	ldrb	r3, [r7, #3]
 800a5b6:	b2db      	uxtb	r3, r3
 800a5b8:	005b      	lsls	r3, r3, #1
 800a5ba:	b2db      	uxtb	r3, r3
 800a5bc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a5be:	78fb      	ldrb	r3, [r7, #3]
 800a5c0:	b2db      	uxtb	r3, r3
 800a5c2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a5c6:	2b80      	cmp	r3, #128	@ 0x80
 800a5c8:	d0ef      	beq.n	800a5aa <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a5ca:	4b27      	ldr	r3, [pc, #156]	@ (800a668 <xPortStartScheduler+0x138>)
 800a5cc:	681b      	ldr	r3, [r3, #0]
 800a5ce:	f1c3 0307 	rsb	r3, r3, #7
 800a5d2:	2b04      	cmp	r3, #4
 800a5d4:	d00b      	beq.n	800a5ee <xPortStartScheduler+0xbe>
	__asm volatile
 800a5d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a5da:	f383 8811 	msr	BASEPRI, r3
 800a5de:	f3bf 8f6f 	isb	sy
 800a5e2:	f3bf 8f4f 	dsb	sy
 800a5e6:	60bb      	str	r3, [r7, #8]
}
 800a5e8:	bf00      	nop
 800a5ea:	bf00      	nop
 800a5ec:	e7fd      	b.n	800a5ea <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a5ee:	4b1e      	ldr	r3, [pc, #120]	@ (800a668 <xPortStartScheduler+0x138>)
 800a5f0:	681b      	ldr	r3, [r3, #0]
 800a5f2:	021b      	lsls	r3, r3, #8
 800a5f4:	4a1c      	ldr	r2, [pc, #112]	@ (800a668 <xPortStartScheduler+0x138>)
 800a5f6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a5f8:	4b1b      	ldr	r3, [pc, #108]	@ (800a668 <xPortStartScheduler+0x138>)
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800a600:	4a19      	ldr	r2, [pc, #100]	@ (800a668 <xPortStartScheduler+0x138>)
 800a602:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	b2da      	uxtb	r2, r3
 800a608:	697b      	ldr	r3, [r7, #20]
 800a60a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a60c:	4b17      	ldr	r3, [pc, #92]	@ (800a66c <xPortStartScheduler+0x13c>)
 800a60e:	681b      	ldr	r3, [r3, #0]
 800a610:	4a16      	ldr	r2, [pc, #88]	@ (800a66c <xPortStartScheduler+0x13c>)
 800a612:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800a616:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a618:	4b14      	ldr	r3, [pc, #80]	@ (800a66c <xPortStartScheduler+0x13c>)
 800a61a:	681b      	ldr	r3, [r3, #0]
 800a61c:	4a13      	ldr	r2, [pc, #76]	@ (800a66c <xPortStartScheduler+0x13c>)
 800a61e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800a622:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a624:	f000 f8da 	bl	800a7dc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a628:	4b11      	ldr	r3, [pc, #68]	@ (800a670 <xPortStartScheduler+0x140>)
 800a62a:	2200      	movs	r2, #0
 800a62c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a62e:	f000 f8f9 	bl	800a824 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a632:	4b10      	ldr	r3, [pc, #64]	@ (800a674 <xPortStartScheduler+0x144>)
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	4a0f      	ldr	r2, [pc, #60]	@ (800a674 <xPortStartScheduler+0x144>)
 800a638:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800a63c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a63e:	f7ff ff63 	bl	800a508 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a642:	f7ff f83f 	bl	80096c4 <vTaskSwitchContext>
	prvTaskExitError();
 800a646:	f7ff ff1d 	bl	800a484 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a64a:	2300      	movs	r3, #0
}
 800a64c:	4618      	mov	r0, r3
 800a64e:	3718      	adds	r7, #24
 800a650:	46bd      	mov	sp, r7
 800a652:	bd80      	pop	{r7, pc}
 800a654:	e000ed00 	.word	0xe000ed00
 800a658:	410fc271 	.word	0x410fc271
 800a65c:	410fc270 	.word	0x410fc270
 800a660:	e000e400 	.word	0xe000e400
 800a664:	20001454 	.word	0x20001454
 800a668:	20001458 	.word	0x20001458
 800a66c:	e000ed20 	.word	0xe000ed20
 800a670:	200000b0 	.word	0x200000b0
 800a674:	e000ef34 	.word	0xe000ef34

0800a678 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a678:	b480      	push	{r7}
 800a67a:	b083      	sub	sp, #12
 800a67c:	af00      	add	r7, sp, #0
	__asm volatile
 800a67e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a682:	f383 8811 	msr	BASEPRI, r3
 800a686:	f3bf 8f6f 	isb	sy
 800a68a:	f3bf 8f4f 	dsb	sy
 800a68e:	607b      	str	r3, [r7, #4]
}
 800a690:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a692:	4b10      	ldr	r3, [pc, #64]	@ (800a6d4 <vPortEnterCritical+0x5c>)
 800a694:	681b      	ldr	r3, [r3, #0]
 800a696:	3301      	adds	r3, #1
 800a698:	4a0e      	ldr	r2, [pc, #56]	@ (800a6d4 <vPortEnterCritical+0x5c>)
 800a69a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a69c:	4b0d      	ldr	r3, [pc, #52]	@ (800a6d4 <vPortEnterCritical+0x5c>)
 800a69e:	681b      	ldr	r3, [r3, #0]
 800a6a0:	2b01      	cmp	r3, #1
 800a6a2:	d110      	bne.n	800a6c6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a6a4:	4b0c      	ldr	r3, [pc, #48]	@ (800a6d8 <vPortEnterCritical+0x60>)
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	b2db      	uxtb	r3, r3
 800a6aa:	2b00      	cmp	r3, #0
 800a6ac:	d00b      	beq.n	800a6c6 <vPortEnterCritical+0x4e>
	__asm volatile
 800a6ae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6b2:	f383 8811 	msr	BASEPRI, r3
 800a6b6:	f3bf 8f6f 	isb	sy
 800a6ba:	f3bf 8f4f 	dsb	sy
 800a6be:	603b      	str	r3, [r7, #0]
}
 800a6c0:	bf00      	nop
 800a6c2:	bf00      	nop
 800a6c4:	e7fd      	b.n	800a6c2 <vPortEnterCritical+0x4a>
	}
}
 800a6c6:	bf00      	nop
 800a6c8:	370c      	adds	r7, #12
 800a6ca:	46bd      	mov	sp, r7
 800a6cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a6d0:	4770      	bx	lr
 800a6d2:	bf00      	nop
 800a6d4:	200000b0 	.word	0x200000b0
 800a6d8:	e000ed04 	.word	0xe000ed04

0800a6dc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a6dc:	b480      	push	{r7}
 800a6de:	b083      	sub	sp, #12
 800a6e0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a6e2:	4b12      	ldr	r3, [pc, #72]	@ (800a72c <vPortExitCritical+0x50>)
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	2b00      	cmp	r3, #0
 800a6e8:	d10b      	bne.n	800a702 <vPortExitCritical+0x26>
	__asm volatile
 800a6ea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6ee:	f383 8811 	msr	BASEPRI, r3
 800a6f2:	f3bf 8f6f 	isb	sy
 800a6f6:	f3bf 8f4f 	dsb	sy
 800a6fa:	607b      	str	r3, [r7, #4]
}
 800a6fc:	bf00      	nop
 800a6fe:	bf00      	nop
 800a700:	e7fd      	b.n	800a6fe <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a702:	4b0a      	ldr	r3, [pc, #40]	@ (800a72c <vPortExitCritical+0x50>)
 800a704:	681b      	ldr	r3, [r3, #0]
 800a706:	3b01      	subs	r3, #1
 800a708:	4a08      	ldr	r2, [pc, #32]	@ (800a72c <vPortExitCritical+0x50>)
 800a70a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a70c:	4b07      	ldr	r3, [pc, #28]	@ (800a72c <vPortExitCritical+0x50>)
 800a70e:	681b      	ldr	r3, [r3, #0]
 800a710:	2b00      	cmp	r3, #0
 800a712:	d105      	bne.n	800a720 <vPortExitCritical+0x44>
 800a714:	2300      	movs	r3, #0
 800a716:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a718:	683b      	ldr	r3, [r7, #0]
 800a71a:	f383 8811 	msr	BASEPRI, r3
}
 800a71e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a720:	bf00      	nop
 800a722:	370c      	adds	r7, #12
 800a724:	46bd      	mov	sp, r7
 800a726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a72a:	4770      	bx	lr
 800a72c:	200000b0 	.word	0x200000b0

0800a730 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a730:	f3ef 8009 	mrs	r0, PSP
 800a734:	f3bf 8f6f 	isb	sy
 800a738:	4b15      	ldr	r3, [pc, #84]	@ (800a790 <pxCurrentTCBConst>)
 800a73a:	681a      	ldr	r2, [r3, #0]
 800a73c:	f01e 0f10 	tst.w	lr, #16
 800a740:	bf08      	it	eq
 800a742:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a746:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a74a:	6010      	str	r0, [r2, #0]
 800a74c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a750:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800a754:	f380 8811 	msr	BASEPRI, r0
 800a758:	f3bf 8f4f 	dsb	sy
 800a75c:	f3bf 8f6f 	isb	sy
 800a760:	f7fe ffb0 	bl	80096c4 <vTaskSwitchContext>
 800a764:	f04f 0000 	mov.w	r0, #0
 800a768:	f380 8811 	msr	BASEPRI, r0
 800a76c:	bc09      	pop	{r0, r3}
 800a76e:	6819      	ldr	r1, [r3, #0]
 800a770:	6808      	ldr	r0, [r1, #0]
 800a772:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a776:	f01e 0f10 	tst.w	lr, #16
 800a77a:	bf08      	it	eq
 800a77c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a780:	f380 8809 	msr	PSP, r0
 800a784:	f3bf 8f6f 	isb	sy
 800a788:	4770      	bx	lr
 800a78a:	bf00      	nop
 800a78c:	f3af 8000 	nop.w

0800a790 <pxCurrentTCBConst>:
 800a790:	20000e28 	.word	0x20000e28
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a794:	bf00      	nop
 800a796:	bf00      	nop

0800a798 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a798:	b580      	push	{r7, lr}
 800a79a:	b082      	sub	sp, #8
 800a79c:	af00      	add	r7, sp, #0
	__asm volatile
 800a79e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a7a2:	f383 8811 	msr	BASEPRI, r3
 800a7a6:	f3bf 8f6f 	isb	sy
 800a7aa:	f3bf 8f4f 	dsb	sy
 800a7ae:	607b      	str	r3, [r7, #4]
}
 800a7b0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a7b2:	f7fe fecd 	bl	8009550 <xTaskIncrementTick>
 800a7b6:	4603      	mov	r3, r0
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d003      	beq.n	800a7c4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a7bc:	4b06      	ldr	r3, [pc, #24]	@ (800a7d8 <xPortSysTickHandler+0x40>)
 800a7be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a7c2:	601a      	str	r2, [r3, #0]
 800a7c4:	2300      	movs	r3, #0
 800a7c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a7c8:	683b      	ldr	r3, [r7, #0]
 800a7ca:	f383 8811 	msr	BASEPRI, r3
}
 800a7ce:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a7d0:	bf00      	nop
 800a7d2:	3708      	adds	r7, #8
 800a7d4:	46bd      	mov	sp, r7
 800a7d6:	bd80      	pop	{r7, pc}
 800a7d8:	e000ed04 	.word	0xe000ed04

0800a7dc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a7dc:	b480      	push	{r7}
 800a7de:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a7e0:	4b0b      	ldr	r3, [pc, #44]	@ (800a810 <vPortSetupTimerInterrupt+0x34>)
 800a7e2:	2200      	movs	r2, #0
 800a7e4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a7e6:	4b0b      	ldr	r3, [pc, #44]	@ (800a814 <vPortSetupTimerInterrupt+0x38>)
 800a7e8:	2200      	movs	r2, #0
 800a7ea:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a7ec:	4b0a      	ldr	r3, [pc, #40]	@ (800a818 <vPortSetupTimerInterrupt+0x3c>)
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	4a0a      	ldr	r2, [pc, #40]	@ (800a81c <vPortSetupTimerInterrupt+0x40>)
 800a7f2:	fba2 2303 	umull	r2, r3, r2, r3
 800a7f6:	099b      	lsrs	r3, r3, #6
 800a7f8:	4a09      	ldr	r2, [pc, #36]	@ (800a820 <vPortSetupTimerInterrupt+0x44>)
 800a7fa:	3b01      	subs	r3, #1
 800a7fc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a7fe:	4b04      	ldr	r3, [pc, #16]	@ (800a810 <vPortSetupTimerInterrupt+0x34>)
 800a800:	2207      	movs	r2, #7
 800a802:	601a      	str	r2, [r3, #0]
}
 800a804:	bf00      	nop
 800a806:	46bd      	mov	sp, r7
 800a808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a80c:	4770      	bx	lr
 800a80e:	bf00      	nop
 800a810:	e000e010 	.word	0xe000e010
 800a814:	e000e018 	.word	0xe000e018
 800a818:	200000a4 	.word	0x200000a4
 800a81c:	10624dd3 	.word	0x10624dd3
 800a820:	e000e014 	.word	0xe000e014

0800a824 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a824:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800a834 <vPortEnableVFP+0x10>
 800a828:	6801      	ldr	r1, [r0, #0]
 800a82a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800a82e:	6001      	str	r1, [r0, #0]
 800a830:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a832:	bf00      	nop
 800a834:	e000ed88 	.word	0xe000ed88

0800a838 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800a838:	b480      	push	{r7}
 800a83a:	b085      	sub	sp, #20
 800a83c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800a83e:	f3ef 8305 	mrs	r3, IPSR
 800a842:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	2b0f      	cmp	r3, #15
 800a848:	d915      	bls.n	800a876 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800a84a:	4a18      	ldr	r2, [pc, #96]	@ (800a8ac <vPortValidateInterruptPriority+0x74>)
 800a84c:	68fb      	ldr	r3, [r7, #12]
 800a84e:	4413      	add	r3, r2
 800a850:	781b      	ldrb	r3, [r3, #0]
 800a852:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800a854:	4b16      	ldr	r3, [pc, #88]	@ (800a8b0 <vPortValidateInterruptPriority+0x78>)
 800a856:	781b      	ldrb	r3, [r3, #0]
 800a858:	7afa      	ldrb	r2, [r7, #11]
 800a85a:	429a      	cmp	r2, r3
 800a85c:	d20b      	bcs.n	800a876 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 800a85e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a862:	f383 8811 	msr	BASEPRI, r3
 800a866:	f3bf 8f6f 	isb	sy
 800a86a:	f3bf 8f4f 	dsb	sy
 800a86e:	607b      	str	r3, [r7, #4]
}
 800a870:	bf00      	nop
 800a872:	bf00      	nop
 800a874:	e7fd      	b.n	800a872 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800a876:	4b0f      	ldr	r3, [pc, #60]	@ (800a8b4 <vPortValidateInterruptPriority+0x7c>)
 800a878:	681b      	ldr	r3, [r3, #0]
 800a87a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800a87e:	4b0e      	ldr	r3, [pc, #56]	@ (800a8b8 <vPortValidateInterruptPriority+0x80>)
 800a880:	681b      	ldr	r3, [r3, #0]
 800a882:	429a      	cmp	r2, r3
 800a884:	d90b      	bls.n	800a89e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 800a886:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a88a:	f383 8811 	msr	BASEPRI, r3
 800a88e:	f3bf 8f6f 	isb	sy
 800a892:	f3bf 8f4f 	dsb	sy
 800a896:	603b      	str	r3, [r7, #0]
}
 800a898:	bf00      	nop
 800a89a:	bf00      	nop
 800a89c:	e7fd      	b.n	800a89a <vPortValidateInterruptPriority+0x62>
	}
 800a89e:	bf00      	nop
 800a8a0:	3714      	adds	r7, #20
 800a8a2:	46bd      	mov	sp, r7
 800a8a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8a8:	4770      	bx	lr
 800a8aa:	bf00      	nop
 800a8ac:	e000e3f0 	.word	0xe000e3f0
 800a8b0:	20001454 	.word	0x20001454
 800a8b4:	e000ed0c 	.word	0xe000ed0c
 800a8b8:	20001458 	.word	0x20001458

0800a8bc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a8bc:	b580      	push	{r7, lr}
 800a8be:	b08a      	sub	sp, #40	@ 0x28
 800a8c0:	af00      	add	r7, sp, #0
 800a8c2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800a8c4:	2300      	movs	r3, #0
 800a8c6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800a8c8:	f7fe fd86 	bl	80093d8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800a8cc:	4b5c      	ldr	r3, [pc, #368]	@ (800aa40 <pvPortMalloc+0x184>)
 800a8ce:	681b      	ldr	r3, [r3, #0]
 800a8d0:	2b00      	cmp	r3, #0
 800a8d2:	d101      	bne.n	800a8d8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800a8d4:	f000 f924 	bl	800ab20 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800a8d8:	4b5a      	ldr	r3, [pc, #360]	@ (800aa44 <pvPortMalloc+0x188>)
 800a8da:	681a      	ldr	r2, [r3, #0]
 800a8dc:	687b      	ldr	r3, [r7, #4]
 800a8de:	4013      	ands	r3, r2
 800a8e0:	2b00      	cmp	r3, #0
 800a8e2:	f040 8095 	bne.w	800aa10 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800a8e6:	687b      	ldr	r3, [r7, #4]
 800a8e8:	2b00      	cmp	r3, #0
 800a8ea:	d01e      	beq.n	800a92a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800a8ec:	2208      	movs	r2, #8
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	4413      	add	r3, r2
 800a8f2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	f003 0307 	and.w	r3, r3, #7
 800a8fa:	2b00      	cmp	r3, #0
 800a8fc:	d015      	beq.n	800a92a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	f023 0307 	bic.w	r3, r3, #7
 800a904:	3308      	adds	r3, #8
 800a906:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a908:	687b      	ldr	r3, [r7, #4]
 800a90a:	f003 0307 	and.w	r3, r3, #7
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d00b      	beq.n	800a92a <pvPortMalloc+0x6e>
	__asm volatile
 800a912:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a916:	f383 8811 	msr	BASEPRI, r3
 800a91a:	f3bf 8f6f 	isb	sy
 800a91e:	f3bf 8f4f 	dsb	sy
 800a922:	617b      	str	r3, [r7, #20]
}
 800a924:	bf00      	nop
 800a926:	bf00      	nop
 800a928:	e7fd      	b.n	800a926 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800a92a:	687b      	ldr	r3, [r7, #4]
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d06f      	beq.n	800aa10 <pvPortMalloc+0x154>
 800a930:	4b45      	ldr	r3, [pc, #276]	@ (800aa48 <pvPortMalloc+0x18c>)
 800a932:	681b      	ldr	r3, [r3, #0]
 800a934:	687a      	ldr	r2, [r7, #4]
 800a936:	429a      	cmp	r2, r3
 800a938:	d86a      	bhi.n	800aa10 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800a93a:	4b44      	ldr	r3, [pc, #272]	@ (800aa4c <pvPortMalloc+0x190>)
 800a93c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800a93e:	4b43      	ldr	r3, [pc, #268]	@ (800aa4c <pvPortMalloc+0x190>)
 800a940:	681b      	ldr	r3, [r3, #0]
 800a942:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a944:	e004      	b.n	800a950 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 800a946:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a948:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800a94a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a94c:	681b      	ldr	r3, [r3, #0]
 800a94e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800a950:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a952:	685b      	ldr	r3, [r3, #4]
 800a954:	687a      	ldr	r2, [r7, #4]
 800a956:	429a      	cmp	r2, r3
 800a958:	d903      	bls.n	800a962 <pvPortMalloc+0xa6>
 800a95a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	2b00      	cmp	r3, #0
 800a960:	d1f1      	bne.n	800a946 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800a962:	4b37      	ldr	r3, [pc, #220]	@ (800aa40 <pvPortMalloc+0x184>)
 800a964:	681b      	ldr	r3, [r3, #0]
 800a966:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a968:	429a      	cmp	r2, r3
 800a96a:	d051      	beq.n	800aa10 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800a96c:	6a3b      	ldr	r3, [r7, #32]
 800a96e:	681b      	ldr	r3, [r3, #0]
 800a970:	2208      	movs	r2, #8
 800a972:	4413      	add	r3, r2
 800a974:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800a976:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a978:	681a      	ldr	r2, [r3, #0]
 800a97a:	6a3b      	ldr	r3, [r7, #32]
 800a97c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800a97e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a980:	685a      	ldr	r2, [r3, #4]
 800a982:	687b      	ldr	r3, [r7, #4]
 800a984:	1ad2      	subs	r2, r2, r3
 800a986:	2308      	movs	r3, #8
 800a988:	005b      	lsls	r3, r3, #1
 800a98a:	429a      	cmp	r2, r3
 800a98c:	d920      	bls.n	800a9d0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800a98e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a990:	687b      	ldr	r3, [r7, #4]
 800a992:	4413      	add	r3, r2
 800a994:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800a996:	69bb      	ldr	r3, [r7, #24]
 800a998:	f003 0307 	and.w	r3, r3, #7
 800a99c:	2b00      	cmp	r3, #0
 800a99e:	d00b      	beq.n	800a9b8 <pvPortMalloc+0xfc>
	__asm volatile
 800a9a0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a9a4:	f383 8811 	msr	BASEPRI, r3
 800a9a8:	f3bf 8f6f 	isb	sy
 800a9ac:	f3bf 8f4f 	dsb	sy
 800a9b0:	613b      	str	r3, [r7, #16]
}
 800a9b2:	bf00      	nop
 800a9b4:	bf00      	nop
 800a9b6:	e7fd      	b.n	800a9b4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800a9b8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9ba:	685a      	ldr	r2, [r3, #4]
 800a9bc:	687b      	ldr	r3, [r7, #4]
 800a9be:	1ad2      	subs	r2, r2, r3
 800a9c0:	69bb      	ldr	r3, [r7, #24]
 800a9c2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800a9c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9c6:	687a      	ldr	r2, [r7, #4]
 800a9c8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800a9ca:	69b8      	ldr	r0, [r7, #24]
 800a9cc:	f000 f90a 	bl	800abe4 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800a9d0:	4b1d      	ldr	r3, [pc, #116]	@ (800aa48 <pvPortMalloc+0x18c>)
 800a9d2:	681a      	ldr	r2, [r3, #0]
 800a9d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9d6:	685b      	ldr	r3, [r3, #4]
 800a9d8:	1ad3      	subs	r3, r2, r3
 800a9da:	4a1b      	ldr	r2, [pc, #108]	@ (800aa48 <pvPortMalloc+0x18c>)
 800a9dc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800a9de:	4b1a      	ldr	r3, [pc, #104]	@ (800aa48 <pvPortMalloc+0x18c>)
 800a9e0:	681a      	ldr	r2, [r3, #0]
 800a9e2:	4b1b      	ldr	r3, [pc, #108]	@ (800aa50 <pvPortMalloc+0x194>)
 800a9e4:	681b      	ldr	r3, [r3, #0]
 800a9e6:	429a      	cmp	r2, r3
 800a9e8:	d203      	bcs.n	800a9f2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800a9ea:	4b17      	ldr	r3, [pc, #92]	@ (800aa48 <pvPortMalloc+0x18c>)
 800a9ec:	681b      	ldr	r3, [r3, #0]
 800a9ee:	4a18      	ldr	r2, [pc, #96]	@ (800aa50 <pvPortMalloc+0x194>)
 800a9f0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800a9f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9f4:	685a      	ldr	r2, [r3, #4]
 800a9f6:	4b13      	ldr	r3, [pc, #76]	@ (800aa44 <pvPortMalloc+0x188>)
 800a9f8:	681b      	ldr	r3, [r3, #0]
 800a9fa:	431a      	orrs	r2, r3
 800a9fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a9fe:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800aa00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800aa02:	2200      	movs	r2, #0
 800aa04:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800aa06:	4b13      	ldr	r3, [pc, #76]	@ (800aa54 <pvPortMalloc+0x198>)
 800aa08:	681b      	ldr	r3, [r3, #0]
 800aa0a:	3301      	adds	r3, #1
 800aa0c:	4a11      	ldr	r2, [pc, #68]	@ (800aa54 <pvPortMalloc+0x198>)
 800aa0e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800aa10:	f7fe fcf0 	bl	80093f4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800aa14:	69fb      	ldr	r3, [r7, #28]
 800aa16:	f003 0307 	and.w	r3, r3, #7
 800aa1a:	2b00      	cmp	r3, #0
 800aa1c:	d00b      	beq.n	800aa36 <pvPortMalloc+0x17a>
	__asm volatile
 800aa1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa22:	f383 8811 	msr	BASEPRI, r3
 800aa26:	f3bf 8f6f 	isb	sy
 800aa2a:	f3bf 8f4f 	dsb	sy
 800aa2e:	60fb      	str	r3, [r7, #12]
}
 800aa30:	bf00      	nop
 800aa32:	bf00      	nop
 800aa34:	e7fd      	b.n	800aa32 <pvPortMalloc+0x176>
	return pvReturn;
 800aa36:	69fb      	ldr	r3, [r7, #28]
}
 800aa38:	4618      	mov	r0, r3
 800aa3a:	3728      	adds	r7, #40	@ 0x28
 800aa3c:	46bd      	mov	sp, r7
 800aa3e:	bd80      	pop	{r7, pc}
 800aa40:	20005064 	.word	0x20005064
 800aa44:	20005078 	.word	0x20005078
 800aa48:	20005068 	.word	0x20005068
 800aa4c:	2000505c 	.word	0x2000505c
 800aa50:	2000506c 	.word	0x2000506c
 800aa54:	20005070 	.word	0x20005070

0800aa58 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800aa58:	b580      	push	{r7, lr}
 800aa5a:	b086      	sub	sp, #24
 800aa5c:	af00      	add	r7, sp, #0
 800aa5e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800aa60:	687b      	ldr	r3, [r7, #4]
 800aa62:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800aa64:	687b      	ldr	r3, [r7, #4]
 800aa66:	2b00      	cmp	r3, #0
 800aa68:	d04f      	beq.n	800ab0a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800aa6a:	2308      	movs	r3, #8
 800aa6c:	425b      	negs	r3, r3
 800aa6e:	697a      	ldr	r2, [r7, #20]
 800aa70:	4413      	add	r3, r2
 800aa72:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800aa74:	697b      	ldr	r3, [r7, #20]
 800aa76:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800aa78:	693b      	ldr	r3, [r7, #16]
 800aa7a:	685a      	ldr	r2, [r3, #4]
 800aa7c:	4b25      	ldr	r3, [pc, #148]	@ (800ab14 <vPortFree+0xbc>)
 800aa7e:	681b      	ldr	r3, [r3, #0]
 800aa80:	4013      	ands	r3, r2
 800aa82:	2b00      	cmp	r3, #0
 800aa84:	d10b      	bne.n	800aa9e <vPortFree+0x46>
	__asm volatile
 800aa86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aa8a:	f383 8811 	msr	BASEPRI, r3
 800aa8e:	f3bf 8f6f 	isb	sy
 800aa92:	f3bf 8f4f 	dsb	sy
 800aa96:	60fb      	str	r3, [r7, #12]
}
 800aa98:	bf00      	nop
 800aa9a:	bf00      	nop
 800aa9c:	e7fd      	b.n	800aa9a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800aa9e:	693b      	ldr	r3, [r7, #16]
 800aaa0:	681b      	ldr	r3, [r3, #0]
 800aaa2:	2b00      	cmp	r3, #0
 800aaa4:	d00b      	beq.n	800aabe <vPortFree+0x66>
	__asm volatile
 800aaa6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800aaaa:	f383 8811 	msr	BASEPRI, r3
 800aaae:	f3bf 8f6f 	isb	sy
 800aab2:	f3bf 8f4f 	dsb	sy
 800aab6:	60bb      	str	r3, [r7, #8]
}
 800aab8:	bf00      	nop
 800aaba:	bf00      	nop
 800aabc:	e7fd      	b.n	800aaba <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800aabe:	693b      	ldr	r3, [r7, #16]
 800aac0:	685a      	ldr	r2, [r3, #4]
 800aac2:	4b14      	ldr	r3, [pc, #80]	@ (800ab14 <vPortFree+0xbc>)
 800aac4:	681b      	ldr	r3, [r3, #0]
 800aac6:	4013      	ands	r3, r2
 800aac8:	2b00      	cmp	r3, #0
 800aaca:	d01e      	beq.n	800ab0a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800aacc:	693b      	ldr	r3, [r7, #16]
 800aace:	681b      	ldr	r3, [r3, #0]
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d11a      	bne.n	800ab0a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800aad4:	693b      	ldr	r3, [r7, #16]
 800aad6:	685a      	ldr	r2, [r3, #4]
 800aad8:	4b0e      	ldr	r3, [pc, #56]	@ (800ab14 <vPortFree+0xbc>)
 800aada:	681b      	ldr	r3, [r3, #0]
 800aadc:	43db      	mvns	r3, r3
 800aade:	401a      	ands	r2, r3
 800aae0:	693b      	ldr	r3, [r7, #16]
 800aae2:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800aae4:	f7fe fc78 	bl	80093d8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800aae8:	693b      	ldr	r3, [r7, #16]
 800aaea:	685a      	ldr	r2, [r3, #4]
 800aaec:	4b0a      	ldr	r3, [pc, #40]	@ (800ab18 <vPortFree+0xc0>)
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	4413      	add	r3, r2
 800aaf2:	4a09      	ldr	r2, [pc, #36]	@ (800ab18 <vPortFree+0xc0>)
 800aaf4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800aaf6:	6938      	ldr	r0, [r7, #16]
 800aaf8:	f000 f874 	bl	800abe4 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800aafc:	4b07      	ldr	r3, [pc, #28]	@ (800ab1c <vPortFree+0xc4>)
 800aafe:	681b      	ldr	r3, [r3, #0]
 800ab00:	3301      	adds	r3, #1
 800ab02:	4a06      	ldr	r2, [pc, #24]	@ (800ab1c <vPortFree+0xc4>)
 800ab04:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800ab06:	f7fe fc75 	bl	80093f4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800ab0a:	bf00      	nop
 800ab0c:	3718      	adds	r7, #24
 800ab0e:	46bd      	mov	sp, r7
 800ab10:	bd80      	pop	{r7, pc}
 800ab12:	bf00      	nop
 800ab14:	20005078 	.word	0x20005078
 800ab18:	20005068 	.word	0x20005068
 800ab1c:	20005074 	.word	0x20005074

0800ab20 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800ab20:	b480      	push	{r7}
 800ab22:	b085      	sub	sp, #20
 800ab24:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800ab26:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800ab2a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800ab2c:	4b27      	ldr	r3, [pc, #156]	@ (800abcc <prvHeapInit+0xac>)
 800ab2e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800ab30:	68fb      	ldr	r3, [r7, #12]
 800ab32:	f003 0307 	and.w	r3, r3, #7
 800ab36:	2b00      	cmp	r3, #0
 800ab38:	d00c      	beq.n	800ab54 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800ab3a:	68fb      	ldr	r3, [r7, #12]
 800ab3c:	3307      	adds	r3, #7
 800ab3e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ab40:	68fb      	ldr	r3, [r7, #12]
 800ab42:	f023 0307 	bic.w	r3, r3, #7
 800ab46:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800ab48:	68ba      	ldr	r2, [r7, #8]
 800ab4a:	68fb      	ldr	r3, [r7, #12]
 800ab4c:	1ad3      	subs	r3, r2, r3
 800ab4e:	4a1f      	ldr	r2, [pc, #124]	@ (800abcc <prvHeapInit+0xac>)
 800ab50:	4413      	add	r3, r2
 800ab52:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800ab54:	68fb      	ldr	r3, [r7, #12]
 800ab56:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800ab58:	4a1d      	ldr	r2, [pc, #116]	@ (800abd0 <prvHeapInit+0xb0>)
 800ab5a:	687b      	ldr	r3, [r7, #4]
 800ab5c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800ab5e:	4b1c      	ldr	r3, [pc, #112]	@ (800abd0 <prvHeapInit+0xb0>)
 800ab60:	2200      	movs	r2, #0
 800ab62:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800ab64:	687b      	ldr	r3, [r7, #4]
 800ab66:	68ba      	ldr	r2, [r7, #8]
 800ab68:	4413      	add	r3, r2
 800ab6a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800ab6c:	2208      	movs	r2, #8
 800ab6e:	68fb      	ldr	r3, [r7, #12]
 800ab70:	1a9b      	subs	r3, r3, r2
 800ab72:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800ab74:	68fb      	ldr	r3, [r7, #12]
 800ab76:	f023 0307 	bic.w	r3, r3, #7
 800ab7a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	4a15      	ldr	r2, [pc, #84]	@ (800abd4 <prvHeapInit+0xb4>)
 800ab80:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800ab82:	4b14      	ldr	r3, [pc, #80]	@ (800abd4 <prvHeapInit+0xb4>)
 800ab84:	681b      	ldr	r3, [r3, #0]
 800ab86:	2200      	movs	r2, #0
 800ab88:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800ab8a:	4b12      	ldr	r3, [pc, #72]	@ (800abd4 <prvHeapInit+0xb4>)
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	2200      	movs	r2, #0
 800ab90:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800ab96:	683b      	ldr	r3, [r7, #0]
 800ab98:	68fa      	ldr	r2, [r7, #12]
 800ab9a:	1ad2      	subs	r2, r2, r3
 800ab9c:	683b      	ldr	r3, [r7, #0]
 800ab9e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800aba0:	4b0c      	ldr	r3, [pc, #48]	@ (800abd4 <prvHeapInit+0xb4>)
 800aba2:	681a      	ldr	r2, [r3, #0]
 800aba4:	683b      	ldr	r3, [r7, #0]
 800aba6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800aba8:	683b      	ldr	r3, [r7, #0]
 800abaa:	685b      	ldr	r3, [r3, #4]
 800abac:	4a0a      	ldr	r2, [pc, #40]	@ (800abd8 <prvHeapInit+0xb8>)
 800abae:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800abb0:	683b      	ldr	r3, [r7, #0]
 800abb2:	685b      	ldr	r3, [r3, #4]
 800abb4:	4a09      	ldr	r2, [pc, #36]	@ (800abdc <prvHeapInit+0xbc>)
 800abb6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800abb8:	4b09      	ldr	r3, [pc, #36]	@ (800abe0 <prvHeapInit+0xc0>)
 800abba:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800abbe:	601a      	str	r2, [r3, #0]
}
 800abc0:	bf00      	nop
 800abc2:	3714      	adds	r7, #20
 800abc4:	46bd      	mov	sp, r7
 800abc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800abca:	4770      	bx	lr
 800abcc:	2000145c 	.word	0x2000145c
 800abd0:	2000505c 	.word	0x2000505c
 800abd4:	20005064 	.word	0x20005064
 800abd8:	2000506c 	.word	0x2000506c
 800abdc:	20005068 	.word	0x20005068
 800abe0:	20005078 	.word	0x20005078

0800abe4 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800abe4:	b480      	push	{r7}
 800abe6:	b085      	sub	sp, #20
 800abe8:	af00      	add	r7, sp, #0
 800abea:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800abec:	4b28      	ldr	r3, [pc, #160]	@ (800ac90 <prvInsertBlockIntoFreeList+0xac>)
 800abee:	60fb      	str	r3, [r7, #12]
 800abf0:	e002      	b.n	800abf8 <prvInsertBlockIntoFreeList+0x14>
 800abf2:	68fb      	ldr	r3, [r7, #12]
 800abf4:	681b      	ldr	r3, [r3, #0]
 800abf6:	60fb      	str	r3, [r7, #12]
 800abf8:	68fb      	ldr	r3, [r7, #12]
 800abfa:	681b      	ldr	r3, [r3, #0]
 800abfc:	687a      	ldr	r2, [r7, #4]
 800abfe:	429a      	cmp	r2, r3
 800ac00:	d8f7      	bhi.n	800abf2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800ac02:	68fb      	ldr	r3, [r7, #12]
 800ac04:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	685b      	ldr	r3, [r3, #4]
 800ac0a:	68ba      	ldr	r2, [r7, #8]
 800ac0c:	4413      	add	r3, r2
 800ac0e:	687a      	ldr	r2, [r7, #4]
 800ac10:	429a      	cmp	r2, r3
 800ac12:	d108      	bne.n	800ac26 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800ac14:	68fb      	ldr	r3, [r7, #12]
 800ac16:	685a      	ldr	r2, [r3, #4]
 800ac18:	687b      	ldr	r3, [r7, #4]
 800ac1a:	685b      	ldr	r3, [r3, #4]
 800ac1c:	441a      	add	r2, r3
 800ac1e:	68fb      	ldr	r3, [r7, #12]
 800ac20:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800ac2a:	687b      	ldr	r3, [r7, #4]
 800ac2c:	685b      	ldr	r3, [r3, #4]
 800ac2e:	68ba      	ldr	r2, [r7, #8]
 800ac30:	441a      	add	r2, r3
 800ac32:	68fb      	ldr	r3, [r7, #12]
 800ac34:	681b      	ldr	r3, [r3, #0]
 800ac36:	429a      	cmp	r2, r3
 800ac38:	d118      	bne.n	800ac6c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	681a      	ldr	r2, [r3, #0]
 800ac3e:	4b15      	ldr	r3, [pc, #84]	@ (800ac94 <prvInsertBlockIntoFreeList+0xb0>)
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	429a      	cmp	r2, r3
 800ac44:	d00d      	beq.n	800ac62 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	685a      	ldr	r2, [r3, #4]
 800ac4a:	68fb      	ldr	r3, [r7, #12]
 800ac4c:	681b      	ldr	r3, [r3, #0]
 800ac4e:	685b      	ldr	r3, [r3, #4]
 800ac50:	441a      	add	r2, r3
 800ac52:	687b      	ldr	r3, [r7, #4]
 800ac54:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800ac56:	68fb      	ldr	r3, [r7, #12]
 800ac58:	681b      	ldr	r3, [r3, #0]
 800ac5a:	681a      	ldr	r2, [r3, #0]
 800ac5c:	687b      	ldr	r3, [r7, #4]
 800ac5e:	601a      	str	r2, [r3, #0]
 800ac60:	e008      	b.n	800ac74 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800ac62:	4b0c      	ldr	r3, [pc, #48]	@ (800ac94 <prvInsertBlockIntoFreeList+0xb0>)
 800ac64:	681a      	ldr	r2, [r3, #0]
 800ac66:	687b      	ldr	r3, [r7, #4]
 800ac68:	601a      	str	r2, [r3, #0]
 800ac6a:	e003      	b.n	800ac74 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800ac6c:	68fb      	ldr	r3, [r7, #12]
 800ac6e:	681a      	ldr	r2, [r3, #0]
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800ac74:	68fa      	ldr	r2, [r7, #12]
 800ac76:	687b      	ldr	r3, [r7, #4]
 800ac78:	429a      	cmp	r2, r3
 800ac7a:	d002      	beq.n	800ac82 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800ac7c:	68fb      	ldr	r3, [r7, #12]
 800ac7e:	687a      	ldr	r2, [r7, #4]
 800ac80:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800ac82:	bf00      	nop
 800ac84:	3714      	adds	r7, #20
 800ac86:	46bd      	mov	sp, r7
 800ac88:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac8c:	4770      	bx	lr
 800ac8e:	bf00      	nop
 800ac90:	2000505c 	.word	0x2000505c
 800ac94:	20005064 	.word	0x20005064

0800ac98 <__cvt>:
 800ac98:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800ac9c:	ec57 6b10 	vmov	r6, r7, d0
 800aca0:	2f00      	cmp	r7, #0
 800aca2:	460c      	mov	r4, r1
 800aca4:	4619      	mov	r1, r3
 800aca6:	463b      	mov	r3, r7
 800aca8:	bfbb      	ittet	lt
 800acaa:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800acae:	461f      	movlt	r7, r3
 800acb0:	2300      	movge	r3, #0
 800acb2:	232d      	movlt	r3, #45	@ 0x2d
 800acb4:	700b      	strb	r3, [r1, #0]
 800acb6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800acb8:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800acbc:	4691      	mov	r9, r2
 800acbe:	f023 0820 	bic.w	r8, r3, #32
 800acc2:	bfbc      	itt	lt
 800acc4:	4632      	movlt	r2, r6
 800acc6:	4616      	movlt	r6, r2
 800acc8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800accc:	d005      	beq.n	800acda <__cvt+0x42>
 800acce:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800acd2:	d100      	bne.n	800acd6 <__cvt+0x3e>
 800acd4:	3401      	adds	r4, #1
 800acd6:	2102      	movs	r1, #2
 800acd8:	e000      	b.n	800acdc <__cvt+0x44>
 800acda:	2103      	movs	r1, #3
 800acdc:	ab03      	add	r3, sp, #12
 800acde:	9301      	str	r3, [sp, #4]
 800ace0:	ab02      	add	r3, sp, #8
 800ace2:	9300      	str	r3, [sp, #0]
 800ace4:	ec47 6b10 	vmov	d0, r6, r7
 800ace8:	4653      	mov	r3, sl
 800acea:	4622      	mov	r2, r4
 800acec:	f000 ff80 	bl	800bbf0 <_dtoa_r>
 800acf0:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800acf4:	4605      	mov	r5, r0
 800acf6:	d119      	bne.n	800ad2c <__cvt+0x94>
 800acf8:	f019 0f01 	tst.w	r9, #1
 800acfc:	d00e      	beq.n	800ad1c <__cvt+0x84>
 800acfe:	eb00 0904 	add.w	r9, r0, r4
 800ad02:	2200      	movs	r2, #0
 800ad04:	2300      	movs	r3, #0
 800ad06:	4630      	mov	r0, r6
 800ad08:	4639      	mov	r1, r7
 800ad0a:	f7f5 fedd 	bl	8000ac8 <__aeabi_dcmpeq>
 800ad0e:	b108      	cbz	r0, 800ad14 <__cvt+0x7c>
 800ad10:	f8cd 900c 	str.w	r9, [sp, #12]
 800ad14:	2230      	movs	r2, #48	@ 0x30
 800ad16:	9b03      	ldr	r3, [sp, #12]
 800ad18:	454b      	cmp	r3, r9
 800ad1a:	d31e      	bcc.n	800ad5a <__cvt+0xc2>
 800ad1c:	9b03      	ldr	r3, [sp, #12]
 800ad1e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800ad20:	1b5b      	subs	r3, r3, r5
 800ad22:	4628      	mov	r0, r5
 800ad24:	6013      	str	r3, [r2, #0]
 800ad26:	b004      	add	sp, #16
 800ad28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad2c:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800ad30:	eb00 0904 	add.w	r9, r0, r4
 800ad34:	d1e5      	bne.n	800ad02 <__cvt+0x6a>
 800ad36:	7803      	ldrb	r3, [r0, #0]
 800ad38:	2b30      	cmp	r3, #48	@ 0x30
 800ad3a:	d10a      	bne.n	800ad52 <__cvt+0xba>
 800ad3c:	2200      	movs	r2, #0
 800ad3e:	2300      	movs	r3, #0
 800ad40:	4630      	mov	r0, r6
 800ad42:	4639      	mov	r1, r7
 800ad44:	f7f5 fec0 	bl	8000ac8 <__aeabi_dcmpeq>
 800ad48:	b918      	cbnz	r0, 800ad52 <__cvt+0xba>
 800ad4a:	f1c4 0401 	rsb	r4, r4, #1
 800ad4e:	f8ca 4000 	str.w	r4, [sl]
 800ad52:	f8da 3000 	ldr.w	r3, [sl]
 800ad56:	4499      	add	r9, r3
 800ad58:	e7d3      	b.n	800ad02 <__cvt+0x6a>
 800ad5a:	1c59      	adds	r1, r3, #1
 800ad5c:	9103      	str	r1, [sp, #12]
 800ad5e:	701a      	strb	r2, [r3, #0]
 800ad60:	e7d9      	b.n	800ad16 <__cvt+0x7e>

0800ad62 <__exponent>:
 800ad62:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ad64:	2900      	cmp	r1, #0
 800ad66:	bfba      	itte	lt
 800ad68:	4249      	neglt	r1, r1
 800ad6a:	232d      	movlt	r3, #45	@ 0x2d
 800ad6c:	232b      	movge	r3, #43	@ 0x2b
 800ad6e:	2909      	cmp	r1, #9
 800ad70:	7002      	strb	r2, [r0, #0]
 800ad72:	7043      	strb	r3, [r0, #1]
 800ad74:	dd29      	ble.n	800adca <__exponent+0x68>
 800ad76:	f10d 0307 	add.w	r3, sp, #7
 800ad7a:	461d      	mov	r5, r3
 800ad7c:	270a      	movs	r7, #10
 800ad7e:	461a      	mov	r2, r3
 800ad80:	fbb1 f6f7 	udiv	r6, r1, r7
 800ad84:	fb07 1416 	mls	r4, r7, r6, r1
 800ad88:	3430      	adds	r4, #48	@ 0x30
 800ad8a:	f802 4c01 	strb.w	r4, [r2, #-1]
 800ad8e:	460c      	mov	r4, r1
 800ad90:	2c63      	cmp	r4, #99	@ 0x63
 800ad92:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800ad96:	4631      	mov	r1, r6
 800ad98:	dcf1      	bgt.n	800ad7e <__exponent+0x1c>
 800ad9a:	3130      	adds	r1, #48	@ 0x30
 800ad9c:	1e94      	subs	r4, r2, #2
 800ad9e:	f803 1c01 	strb.w	r1, [r3, #-1]
 800ada2:	1c41      	adds	r1, r0, #1
 800ada4:	4623      	mov	r3, r4
 800ada6:	42ab      	cmp	r3, r5
 800ada8:	d30a      	bcc.n	800adc0 <__exponent+0x5e>
 800adaa:	f10d 0309 	add.w	r3, sp, #9
 800adae:	1a9b      	subs	r3, r3, r2
 800adb0:	42ac      	cmp	r4, r5
 800adb2:	bf88      	it	hi
 800adb4:	2300      	movhi	r3, #0
 800adb6:	3302      	adds	r3, #2
 800adb8:	4403      	add	r3, r0
 800adba:	1a18      	subs	r0, r3, r0
 800adbc:	b003      	add	sp, #12
 800adbe:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800adc0:	f813 6b01 	ldrb.w	r6, [r3], #1
 800adc4:	f801 6f01 	strb.w	r6, [r1, #1]!
 800adc8:	e7ed      	b.n	800ada6 <__exponent+0x44>
 800adca:	2330      	movs	r3, #48	@ 0x30
 800adcc:	3130      	adds	r1, #48	@ 0x30
 800adce:	7083      	strb	r3, [r0, #2]
 800add0:	70c1      	strb	r1, [r0, #3]
 800add2:	1d03      	adds	r3, r0, #4
 800add4:	e7f1      	b.n	800adba <__exponent+0x58>
	...

0800add8 <_printf_float>:
 800add8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800addc:	b08d      	sub	sp, #52	@ 0x34
 800adde:	460c      	mov	r4, r1
 800ade0:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800ade4:	4616      	mov	r6, r2
 800ade6:	461f      	mov	r7, r3
 800ade8:	4605      	mov	r5, r0
 800adea:	f000 fdf3 	bl	800b9d4 <_localeconv_r>
 800adee:	6803      	ldr	r3, [r0, #0]
 800adf0:	9304      	str	r3, [sp, #16]
 800adf2:	4618      	mov	r0, r3
 800adf4:	f7f5 fa3c 	bl	8000270 <strlen>
 800adf8:	2300      	movs	r3, #0
 800adfa:	930a      	str	r3, [sp, #40]	@ 0x28
 800adfc:	f8d8 3000 	ldr.w	r3, [r8]
 800ae00:	9005      	str	r0, [sp, #20]
 800ae02:	3307      	adds	r3, #7
 800ae04:	f023 0307 	bic.w	r3, r3, #7
 800ae08:	f103 0208 	add.w	r2, r3, #8
 800ae0c:	f894 a018 	ldrb.w	sl, [r4, #24]
 800ae10:	f8d4 b000 	ldr.w	fp, [r4]
 800ae14:	f8c8 2000 	str.w	r2, [r8]
 800ae18:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ae1c:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 800ae20:	9307      	str	r3, [sp, #28]
 800ae22:	f8cd 8018 	str.w	r8, [sp, #24]
 800ae26:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 800ae2a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ae2e:	4b9c      	ldr	r3, [pc, #624]	@ (800b0a0 <_printf_float+0x2c8>)
 800ae30:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ae34:	f7f5 fe7a 	bl	8000b2c <__aeabi_dcmpun>
 800ae38:	bb70      	cbnz	r0, 800ae98 <_printf_float+0xc0>
 800ae3a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ae3e:	4b98      	ldr	r3, [pc, #608]	@ (800b0a0 <_printf_float+0x2c8>)
 800ae40:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800ae44:	f7f5 fe54 	bl	8000af0 <__aeabi_dcmple>
 800ae48:	bb30      	cbnz	r0, 800ae98 <_printf_float+0xc0>
 800ae4a:	2200      	movs	r2, #0
 800ae4c:	2300      	movs	r3, #0
 800ae4e:	4640      	mov	r0, r8
 800ae50:	4649      	mov	r1, r9
 800ae52:	f7f5 fe43 	bl	8000adc <__aeabi_dcmplt>
 800ae56:	b110      	cbz	r0, 800ae5e <_printf_float+0x86>
 800ae58:	232d      	movs	r3, #45	@ 0x2d
 800ae5a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ae5e:	4a91      	ldr	r2, [pc, #580]	@ (800b0a4 <_printf_float+0x2cc>)
 800ae60:	4b91      	ldr	r3, [pc, #580]	@ (800b0a8 <_printf_float+0x2d0>)
 800ae62:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800ae66:	bf94      	ite	ls
 800ae68:	4690      	movls	r8, r2
 800ae6a:	4698      	movhi	r8, r3
 800ae6c:	2303      	movs	r3, #3
 800ae6e:	6123      	str	r3, [r4, #16]
 800ae70:	f02b 0304 	bic.w	r3, fp, #4
 800ae74:	6023      	str	r3, [r4, #0]
 800ae76:	f04f 0900 	mov.w	r9, #0
 800ae7a:	9700      	str	r7, [sp, #0]
 800ae7c:	4633      	mov	r3, r6
 800ae7e:	aa0b      	add	r2, sp, #44	@ 0x2c
 800ae80:	4621      	mov	r1, r4
 800ae82:	4628      	mov	r0, r5
 800ae84:	f000 f9d2 	bl	800b22c <_printf_common>
 800ae88:	3001      	adds	r0, #1
 800ae8a:	f040 808d 	bne.w	800afa8 <_printf_float+0x1d0>
 800ae8e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ae92:	b00d      	add	sp, #52	@ 0x34
 800ae94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae98:	4642      	mov	r2, r8
 800ae9a:	464b      	mov	r3, r9
 800ae9c:	4640      	mov	r0, r8
 800ae9e:	4649      	mov	r1, r9
 800aea0:	f7f5 fe44 	bl	8000b2c <__aeabi_dcmpun>
 800aea4:	b140      	cbz	r0, 800aeb8 <_printf_float+0xe0>
 800aea6:	464b      	mov	r3, r9
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	bfbc      	itt	lt
 800aeac:	232d      	movlt	r3, #45	@ 0x2d
 800aeae:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800aeb2:	4a7e      	ldr	r2, [pc, #504]	@ (800b0ac <_printf_float+0x2d4>)
 800aeb4:	4b7e      	ldr	r3, [pc, #504]	@ (800b0b0 <_printf_float+0x2d8>)
 800aeb6:	e7d4      	b.n	800ae62 <_printf_float+0x8a>
 800aeb8:	6863      	ldr	r3, [r4, #4]
 800aeba:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800aebe:	9206      	str	r2, [sp, #24]
 800aec0:	1c5a      	adds	r2, r3, #1
 800aec2:	d13b      	bne.n	800af3c <_printf_float+0x164>
 800aec4:	2306      	movs	r3, #6
 800aec6:	6063      	str	r3, [r4, #4]
 800aec8:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800aecc:	2300      	movs	r3, #0
 800aece:	6022      	str	r2, [r4, #0]
 800aed0:	9303      	str	r3, [sp, #12]
 800aed2:	ab0a      	add	r3, sp, #40	@ 0x28
 800aed4:	e9cd a301 	strd	sl, r3, [sp, #4]
 800aed8:	ab09      	add	r3, sp, #36	@ 0x24
 800aeda:	9300      	str	r3, [sp, #0]
 800aedc:	6861      	ldr	r1, [r4, #4]
 800aede:	ec49 8b10 	vmov	d0, r8, r9
 800aee2:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800aee6:	4628      	mov	r0, r5
 800aee8:	f7ff fed6 	bl	800ac98 <__cvt>
 800aeec:	9b06      	ldr	r3, [sp, #24]
 800aeee:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800aef0:	2b47      	cmp	r3, #71	@ 0x47
 800aef2:	4680      	mov	r8, r0
 800aef4:	d129      	bne.n	800af4a <_printf_float+0x172>
 800aef6:	1cc8      	adds	r0, r1, #3
 800aef8:	db02      	blt.n	800af00 <_printf_float+0x128>
 800aefa:	6863      	ldr	r3, [r4, #4]
 800aefc:	4299      	cmp	r1, r3
 800aefe:	dd41      	ble.n	800af84 <_printf_float+0x1ac>
 800af00:	f1aa 0a02 	sub.w	sl, sl, #2
 800af04:	fa5f fa8a 	uxtb.w	sl, sl
 800af08:	3901      	subs	r1, #1
 800af0a:	4652      	mov	r2, sl
 800af0c:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800af10:	9109      	str	r1, [sp, #36]	@ 0x24
 800af12:	f7ff ff26 	bl	800ad62 <__exponent>
 800af16:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800af18:	1813      	adds	r3, r2, r0
 800af1a:	2a01      	cmp	r2, #1
 800af1c:	4681      	mov	r9, r0
 800af1e:	6123      	str	r3, [r4, #16]
 800af20:	dc02      	bgt.n	800af28 <_printf_float+0x150>
 800af22:	6822      	ldr	r2, [r4, #0]
 800af24:	07d2      	lsls	r2, r2, #31
 800af26:	d501      	bpl.n	800af2c <_printf_float+0x154>
 800af28:	3301      	adds	r3, #1
 800af2a:	6123      	str	r3, [r4, #16]
 800af2c:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 800af30:	2b00      	cmp	r3, #0
 800af32:	d0a2      	beq.n	800ae7a <_printf_float+0xa2>
 800af34:	232d      	movs	r3, #45	@ 0x2d
 800af36:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800af3a:	e79e      	b.n	800ae7a <_printf_float+0xa2>
 800af3c:	9a06      	ldr	r2, [sp, #24]
 800af3e:	2a47      	cmp	r2, #71	@ 0x47
 800af40:	d1c2      	bne.n	800aec8 <_printf_float+0xf0>
 800af42:	2b00      	cmp	r3, #0
 800af44:	d1c0      	bne.n	800aec8 <_printf_float+0xf0>
 800af46:	2301      	movs	r3, #1
 800af48:	e7bd      	b.n	800aec6 <_printf_float+0xee>
 800af4a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800af4e:	d9db      	bls.n	800af08 <_printf_float+0x130>
 800af50:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 800af54:	d118      	bne.n	800af88 <_printf_float+0x1b0>
 800af56:	2900      	cmp	r1, #0
 800af58:	6863      	ldr	r3, [r4, #4]
 800af5a:	dd0b      	ble.n	800af74 <_printf_float+0x19c>
 800af5c:	6121      	str	r1, [r4, #16]
 800af5e:	b913      	cbnz	r3, 800af66 <_printf_float+0x18e>
 800af60:	6822      	ldr	r2, [r4, #0]
 800af62:	07d0      	lsls	r0, r2, #31
 800af64:	d502      	bpl.n	800af6c <_printf_float+0x194>
 800af66:	3301      	adds	r3, #1
 800af68:	440b      	add	r3, r1
 800af6a:	6123      	str	r3, [r4, #16]
 800af6c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800af6e:	f04f 0900 	mov.w	r9, #0
 800af72:	e7db      	b.n	800af2c <_printf_float+0x154>
 800af74:	b913      	cbnz	r3, 800af7c <_printf_float+0x1a4>
 800af76:	6822      	ldr	r2, [r4, #0]
 800af78:	07d2      	lsls	r2, r2, #31
 800af7a:	d501      	bpl.n	800af80 <_printf_float+0x1a8>
 800af7c:	3302      	adds	r3, #2
 800af7e:	e7f4      	b.n	800af6a <_printf_float+0x192>
 800af80:	2301      	movs	r3, #1
 800af82:	e7f2      	b.n	800af6a <_printf_float+0x192>
 800af84:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 800af88:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800af8a:	4299      	cmp	r1, r3
 800af8c:	db05      	blt.n	800af9a <_printf_float+0x1c2>
 800af8e:	6823      	ldr	r3, [r4, #0]
 800af90:	6121      	str	r1, [r4, #16]
 800af92:	07d8      	lsls	r0, r3, #31
 800af94:	d5ea      	bpl.n	800af6c <_printf_float+0x194>
 800af96:	1c4b      	adds	r3, r1, #1
 800af98:	e7e7      	b.n	800af6a <_printf_float+0x192>
 800af9a:	2900      	cmp	r1, #0
 800af9c:	bfd4      	ite	le
 800af9e:	f1c1 0202 	rsble	r2, r1, #2
 800afa2:	2201      	movgt	r2, #1
 800afa4:	4413      	add	r3, r2
 800afa6:	e7e0      	b.n	800af6a <_printf_float+0x192>
 800afa8:	6823      	ldr	r3, [r4, #0]
 800afaa:	055a      	lsls	r2, r3, #21
 800afac:	d407      	bmi.n	800afbe <_printf_float+0x1e6>
 800afae:	6923      	ldr	r3, [r4, #16]
 800afb0:	4642      	mov	r2, r8
 800afb2:	4631      	mov	r1, r6
 800afb4:	4628      	mov	r0, r5
 800afb6:	47b8      	blx	r7
 800afb8:	3001      	adds	r0, #1
 800afba:	d12b      	bne.n	800b014 <_printf_float+0x23c>
 800afbc:	e767      	b.n	800ae8e <_printf_float+0xb6>
 800afbe:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800afc2:	f240 80dd 	bls.w	800b180 <_printf_float+0x3a8>
 800afc6:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800afca:	2200      	movs	r2, #0
 800afcc:	2300      	movs	r3, #0
 800afce:	f7f5 fd7b 	bl	8000ac8 <__aeabi_dcmpeq>
 800afd2:	2800      	cmp	r0, #0
 800afd4:	d033      	beq.n	800b03e <_printf_float+0x266>
 800afd6:	4a37      	ldr	r2, [pc, #220]	@ (800b0b4 <_printf_float+0x2dc>)
 800afd8:	2301      	movs	r3, #1
 800afda:	4631      	mov	r1, r6
 800afdc:	4628      	mov	r0, r5
 800afde:	47b8      	blx	r7
 800afe0:	3001      	adds	r0, #1
 800afe2:	f43f af54 	beq.w	800ae8e <_printf_float+0xb6>
 800afe6:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800afea:	4543      	cmp	r3, r8
 800afec:	db02      	blt.n	800aff4 <_printf_float+0x21c>
 800afee:	6823      	ldr	r3, [r4, #0]
 800aff0:	07d8      	lsls	r0, r3, #31
 800aff2:	d50f      	bpl.n	800b014 <_printf_float+0x23c>
 800aff4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800aff8:	4631      	mov	r1, r6
 800affa:	4628      	mov	r0, r5
 800affc:	47b8      	blx	r7
 800affe:	3001      	adds	r0, #1
 800b000:	f43f af45 	beq.w	800ae8e <_printf_float+0xb6>
 800b004:	f04f 0900 	mov.w	r9, #0
 800b008:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800b00c:	f104 0a1a 	add.w	sl, r4, #26
 800b010:	45c8      	cmp	r8, r9
 800b012:	dc09      	bgt.n	800b028 <_printf_float+0x250>
 800b014:	6823      	ldr	r3, [r4, #0]
 800b016:	079b      	lsls	r3, r3, #30
 800b018:	f100 8103 	bmi.w	800b222 <_printf_float+0x44a>
 800b01c:	68e0      	ldr	r0, [r4, #12]
 800b01e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800b020:	4298      	cmp	r0, r3
 800b022:	bfb8      	it	lt
 800b024:	4618      	movlt	r0, r3
 800b026:	e734      	b.n	800ae92 <_printf_float+0xba>
 800b028:	2301      	movs	r3, #1
 800b02a:	4652      	mov	r2, sl
 800b02c:	4631      	mov	r1, r6
 800b02e:	4628      	mov	r0, r5
 800b030:	47b8      	blx	r7
 800b032:	3001      	adds	r0, #1
 800b034:	f43f af2b 	beq.w	800ae8e <_printf_float+0xb6>
 800b038:	f109 0901 	add.w	r9, r9, #1
 800b03c:	e7e8      	b.n	800b010 <_printf_float+0x238>
 800b03e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b040:	2b00      	cmp	r3, #0
 800b042:	dc39      	bgt.n	800b0b8 <_printf_float+0x2e0>
 800b044:	4a1b      	ldr	r2, [pc, #108]	@ (800b0b4 <_printf_float+0x2dc>)
 800b046:	2301      	movs	r3, #1
 800b048:	4631      	mov	r1, r6
 800b04a:	4628      	mov	r0, r5
 800b04c:	47b8      	blx	r7
 800b04e:	3001      	adds	r0, #1
 800b050:	f43f af1d 	beq.w	800ae8e <_printf_float+0xb6>
 800b054:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 800b058:	ea59 0303 	orrs.w	r3, r9, r3
 800b05c:	d102      	bne.n	800b064 <_printf_float+0x28c>
 800b05e:	6823      	ldr	r3, [r4, #0]
 800b060:	07d9      	lsls	r1, r3, #31
 800b062:	d5d7      	bpl.n	800b014 <_printf_float+0x23c>
 800b064:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b068:	4631      	mov	r1, r6
 800b06a:	4628      	mov	r0, r5
 800b06c:	47b8      	blx	r7
 800b06e:	3001      	adds	r0, #1
 800b070:	f43f af0d 	beq.w	800ae8e <_printf_float+0xb6>
 800b074:	f04f 0a00 	mov.w	sl, #0
 800b078:	f104 0b1a 	add.w	fp, r4, #26
 800b07c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b07e:	425b      	negs	r3, r3
 800b080:	4553      	cmp	r3, sl
 800b082:	dc01      	bgt.n	800b088 <_printf_float+0x2b0>
 800b084:	464b      	mov	r3, r9
 800b086:	e793      	b.n	800afb0 <_printf_float+0x1d8>
 800b088:	2301      	movs	r3, #1
 800b08a:	465a      	mov	r2, fp
 800b08c:	4631      	mov	r1, r6
 800b08e:	4628      	mov	r0, r5
 800b090:	47b8      	blx	r7
 800b092:	3001      	adds	r0, #1
 800b094:	f43f aefb 	beq.w	800ae8e <_printf_float+0xb6>
 800b098:	f10a 0a01 	add.w	sl, sl, #1
 800b09c:	e7ee      	b.n	800b07c <_printf_float+0x2a4>
 800b09e:	bf00      	nop
 800b0a0:	7fefffff 	.word	0x7fefffff
 800b0a4:	0800fb84 	.word	0x0800fb84
 800b0a8:	0800fb88 	.word	0x0800fb88
 800b0ac:	0800fb8c 	.word	0x0800fb8c
 800b0b0:	0800fb90 	.word	0x0800fb90
 800b0b4:	0800fb94 	.word	0x0800fb94
 800b0b8:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b0ba:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800b0be:	4553      	cmp	r3, sl
 800b0c0:	bfa8      	it	ge
 800b0c2:	4653      	movge	r3, sl
 800b0c4:	2b00      	cmp	r3, #0
 800b0c6:	4699      	mov	r9, r3
 800b0c8:	dc36      	bgt.n	800b138 <_printf_float+0x360>
 800b0ca:	f04f 0b00 	mov.w	fp, #0
 800b0ce:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b0d2:	f104 021a 	add.w	r2, r4, #26
 800b0d6:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800b0d8:	9306      	str	r3, [sp, #24]
 800b0da:	eba3 0309 	sub.w	r3, r3, r9
 800b0de:	455b      	cmp	r3, fp
 800b0e0:	dc31      	bgt.n	800b146 <_printf_float+0x36e>
 800b0e2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b0e4:	459a      	cmp	sl, r3
 800b0e6:	dc3a      	bgt.n	800b15e <_printf_float+0x386>
 800b0e8:	6823      	ldr	r3, [r4, #0]
 800b0ea:	07da      	lsls	r2, r3, #31
 800b0ec:	d437      	bmi.n	800b15e <_printf_float+0x386>
 800b0ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b0f0:	ebaa 0903 	sub.w	r9, sl, r3
 800b0f4:	9b06      	ldr	r3, [sp, #24]
 800b0f6:	ebaa 0303 	sub.w	r3, sl, r3
 800b0fa:	4599      	cmp	r9, r3
 800b0fc:	bfa8      	it	ge
 800b0fe:	4699      	movge	r9, r3
 800b100:	f1b9 0f00 	cmp.w	r9, #0
 800b104:	dc33      	bgt.n	800b16e <_printf_float+0x396>
 800b106:	f04f 0800 	mov.w	r8, #0
 800b10a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b10e:	f104 0b1a 	add.w	fp, r4, #26
 800b112:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b114:	ebaa 0303 	sub.w	r3, sl, r3
 800b118:	eba3 0309 	sub.w	r3, r3, r9
 800b11c:	4543      	cmp	r3, r8
 800b11e:	f77f af79 	ble.w	800b014 <_printf_float+0x23c>
 800b122:	2301      	movs	r3, #1
 800b124:	465a      	mov	r2, fp
 800b126:	4631      	mov	r1, r6
 800b128:	4628      	mov	r0, r5
 800b12a:	47b8      	blx	r7
 800b12c:	3001      	adds	r0, #1
 800b12e:	f43f aeae 	beq.w	800ae8e <_printf_float+0xb6>
 800b132:	f108 0801 	add.w	r8, r8, #1
 800b136:	e7ec      	b.n	800b112 <_printf_float+0x33a>
 800b138:	4642      	mov	r2, r8
 800b13a:	4631      	mov	r1, r6
 800b13c:	4628      	mov	r0, r5
 800b13e:	47b8      	blx	r7
 800b140:	3001      	adds	r0, #1
 800b142:	d1c2      	bne.n	800b0ca <_printf_float+0x2f2>
 800b144:	e6a3      	b.n	800ae8e <_printf_float+0xb6>
 800b146:	2301      	movs	r3, #1
 800b148:	4631      	mov	r1, r6
 800b14a:	4628      	mov	r0, r5
 800b14c:	9206      	str	r2, [sp, #24]
 800b14e:	47b8      	blx	r7
 800b150:	3001      	adds	r0, #1
 800b152:	f43f ae9c 	beq.w	800ae8e <_printf_float+0xb6>
 800b156:	9a06      	ldr	r2, [sp, #24]
 800b158:	f10b 0b01 	add.w	fp, fp, #1
 800b15c:	e7bb      	b.n	800b0d6 <_printf_float+0x2fe>
 800b15e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b162:	4631      	mov	r1, r6
 800b164:	4628      	mov	r0, r5
 800b166:	47b8      	blx	r7
 800b168:	3001      	adds	r0, #1
 800b16a:	d1c0      	bne.n	800b0ee <_printf_float+0x316>
 800b16c:	e68f      	b.n	800ae8e <_printf_float+0xb6>
 800b16e:	9a06      	ldr	r2, [sp, #24]
 800b170:	464b      	mov	r3, r9
 800b172:	4442      	add	r2, r8
 800b174:	4631      	mov	r1, r6
 800b176:	4628      	mov	r0, r5
 800b178:	47b8      	blx	r7
 800b17a:	3001      	adds	r0, #1
 800b17c:	d1c3      	bne.n	800b106 <_printf_float+0x32e>
 800b17e:	e686      	b.n	800ae8e <_printf_float+0xb6>
 800b180:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800b184:	f1ba 0f01 	cmp.w	sl, #1
 800b188:	dc01      	bgt.n	800b18e <_printf_float+0x3b6>
 800b18a:	07db      	lsls	r3, r3, #31
 800b18c:	d536      	bpl.n	800b1fc <_printf_float+0x424>
 800b18e:	2301      	movs	r3, #1
 800b190:	4642      	mov	r2, r8
 800b192:	4631      	mov	r1, r6
 800b194:	4628      	mov	r0, r5
 800b196:	47b8      	blx	r7
 800b198:	3001      	adds	r0, #1
 800b19a:	f43f ae78 	beq.w	800ae8e <_printf_float+0xb6>
 800b19e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800b1a2:	4631      	mov	r1, r6
 800b1a4:	4628      	mov	r0, r5
 800b1a6:	47b8      	blx	r7
 800b1a8:	3001      	adds	r0, #1
 800b1aa:	f43f ae70 	beq.w	800ae8e <_printf_float+0xb6>
 800b1ae:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800b1b2:	2200      	movs	r2, #0
 800b1b4:	2300      	movs	r3, #0
 800b1b6:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800b1ba:	f7f5 fc85 	bl	8000ac8 <__aeabi_dcmpeq>
 800b1be:	b9c0      	cbnz	r0, 800b1f2 <_printf_float+0x41a>
 800b1c0:	4653      	mov	r3, sl
 800b1c2:	f108 0201 	add.w	r2, r8, #1
 800b1c6:	4631      	mov	r1, r6
 800b1c8:	4628      	mov	r0, r5
 800b1ca:	47b8      	blx	r7
 800b1cc:	3001      	adds	r0, #1
 800b1ce:	d10c      	bne.n	800b1ea <_printf_float+0x412>
 800b1d0:	e65d      	b.n	800ae8e <_printf_float+0xb6>
 800b1d2:	2301      	movs	r3, #1
 800b1d4:	465a      	mov	r2, fp
 800b1d6:	4631      	mov	r1, r6
 800b1d8:	4628      	mov	r0, r5
 800b1da:	47b8      	blx	r7
 800b1dc:	3001      	adds	r0, #1
 800b1de:	f43f ae56 	beq.w	800ae8e <_printf_float+0xb6>
 800b1e2:	f108 0801 	add.w	r8, r8, #1
 800b1e6:	45d0      	cmp	r8, sl
 800b1e8:	dbf3      	blt.n	800b1d2 <_printf_float+0x3fa>
 800b1ea:	464b      	mov	r3, r9
 800b1ec:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800b1f0:	e6df      	b.n	800afb2 <_printf_float+0x1da>
 800b1f2:	f04f 0800 	mov.w	r8, #0
 800b1f6:	f104 0b1a 	add.w	fp, r4, #26
 800b1fa:	e7f4      	b.n	800b1e6 <_printf_float+0x40e>
 800b1fc:	2301      	movs	r3, #1
 800b1fe:	4642      	mov	r2, r8
 800b200:	e7e1      	b.n	800b1c6 <_printf_float+0x3ee>
 800b202:	2301      	movs	r3, #1
 800b204:	464a      	mov	r2, r9
 800b206:	4631      	mov	r1, r6
 800b208:	4628      	mov	r0, r5
 800b20a:	47b8      	blx	r7
 800b20c:	3001      	adds	r0, #1
 800b20e:	f43f ae3e 	beq.w	800ae8e <_printf_float+0xb6>
 800b212:	f108 0801 	add.w	r8, r8, #1
 800b216:	68e3      	ldr	r3, [r4, #12]
 800b218:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800b21a:	1a5b      	subs	r3, r3, r1
 800b21c:	4543      	cmp	r3, r8
 800b21e:	dcf0      	bgt.n	800b202 <_printf_float+0x42a>
 800b220:	e6fc      	b.n	800b01c <_printf_float+0x244>
 800b222:	f04f 0800 	mov.w	r8, #0
 800b226:	f104 0919 	add.w	r9, r4, #25
 800b22a:	e7f4      	b.n	800b216 <_printf_float+0x43e>

0800b22c <_printf_common>:
 800b22c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b230:	4616      	mov	r6, r2
 800b232:	4698      	mov	r8, r3
 800b234:	688a      	ldr	r2, [r1, #8]
 800b236:	690b      	ldr	r3, [r1, #16]
 800b238:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b23c:	4293      	cmp	r3, r2
 800b23e:	bfb8      	it	lt
 800b240:	4613      	movlt	r3, r2
 800b242:	6033      	str	r3, [r6, #0]
 800b244:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b248:	4607      	mov	r7, r0
 800b24a:	460c      	mov	r4, r1
 800b24c:	b10a      	cbz	r2, 800b252 <_printf_common+0x26>
 800b24e:	3301      	adds	r3, #1
 800b250:	6033      	str	r3, [r6, #0]
 800b252:	6823      	ldr	r3, [r4, #0]
 800b254:	0699      	lsls	r1, r3, #26
 800b256:	bf42      	ittt	mi
 800b258:	6833      	ldrmi	r3, [r6, #0]
 800b25a:	3302      	addmi	r3, #2
 800b25c:	6033      	strmi	r3, [r6, #0]
 800b25e:	6825      	ldr	r5, [r4, #0]
 800b260:	f015 0506 	ands.w	r5, r5, #6
 800b264:	d106      	bne.n	800b274 <_printf_common+0x48>
 800b266:	f104 0a19 	add.w	sl, r4, #25
 800b26a:	68e3      	ldr	r3, [r4, #12]
 800b26c:	6832      	ldr	r2, [r6, #0]
 800b26e:	1a9b      	subs	r3, r3, r2
 800b270:	42ab      	cmp	r3, r5
 800b272:	dc26      	bgt.n	800b2c2 <_printf_common+0x96>
 800b274:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b278:	6822      	ldr	r2, [r4, #0]
 800b27a:	3b00      	subs	r3, #0
 800b27c:	bf18      	it	ne
 800b27e:	2301      	movne	r3, #1
 800b280:	0692      	lsls	r2, r2, #26
 800b282:	d42b      	bmi.n	800b2dc <_printf_common+0xb0>
 800b284:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b288:	4641      	mov	r1, r8
 800b28a:	4638      	mov	r0, r7
 800b28c:	47c8      	blx	r9
 800b28e:	3001      	adds	r0, #1
 800b290:	d01e      	beq.n	800b2d0 <_printf_common+0xa4>
 800b292:	6823      	ldr	r3, [r4, #0]
 800b294:	6922      	ldr	r2, [r4, #16]
 800b296:	f003 0306 	and.w	r3, r3, #6
 800b29a:	2b04      	cmp	r3, #4
 800b29c:	bf02      	ittt	eq
 800b29e:	68e5      	ldreq	r5, [r4, #12]
 800b2a0:	6833      	ldreq	r3, [r6, #0]
 800b2a2:	1aed      	subeq	r5, r5, r3
 800b2a4:	68a3      	ldr	r3, [r4, #8]
 800b2a6:	bf0c      	ite	eq
 800b2a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b2ac:	2500      	movne	r5, #0
 800b2ae:	4293      	cmp	r3, r2
 800b2b0:	bfc4      	itt	gt
 800b2b2:	1a9b      	subgt	r3, r3, r2
 800b2b4:	18ed      	addgt	r5, r5, r3
 800b2b6:	2600      	movs	r6, #0
 800b2b8:	341a      	adds	r4, #26
 800b2ba:	42b5      	cmp	r5, r6
 800b2bc:	d11a      	bne.n	800b2f4 <_printf_common+0xc8>
 800b2be:	2000      	movs	r0, #0
 800b2c0:	e008      	b.n	800b2d4 <_printf_common+0xa8>
 800b2c2:	2301      	movs	r3, #1
 800b2c4:	4652      	mov	r2, sl
 800b2c6:	4641      	mov	r1, r8
 800b2c8:	4638      	mov	r0, r7
 800b2ca:	47c8      	blx	r9
 800b2cc:	3001      	adds	r0, #1
 800b2ce:	d103      	bne.n	800b2d8 <_printf_common+0xac>
 800b2d0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b2d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b2d8:	3501      	adds	r5, #1
 800b2da:	e7c6      	b.n	800b26a <_printf_common+0x3e>
 800b2dc:	18e1      	adds	r1, r4, r3
 800b2de:	1c5a      	adds	r2, r3, #1
 800b2e0:	2030      	movs	r0, #48	@ 0x30
 800b2e2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b2e6:	4422      	add	r2, r4
 800b2e8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b2ec:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b2f0:	3302      	adds	r3, #2
 800b2f2:	e7c7      	b.n	800b284 <_printf_common+0x58>
 800b2f4:	2301      	movs	r3, #1
 800b2f6:	4622      	mov	r2, r4
 800b2f8:	4641      	mov	r1, r8
 800b2fa:	4638      	mov	r0, r7
 800b2fc:	47c8      	blx	r9
 800b2fe:	3001      	adds	r0, #1
 800b300:	d0e6      	beq.n	800b2d0 <_printf_common+0xa4>
 800b302:	3601      	adds	r6, #1
 800b304:	e7d9      	b.n	800b2ba <_printf_common+0x8e>
	...

0800b308 <_printf_i>:
 800b308:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b30c:	7e0f      	ldrb	r7, [r1, #24]
 800b30e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b310:	2f78      	cmp	r7, #120	@ 0x78
 800b312:	4691      	mov	r9, r2
 800b314:	4680      	mov	r8, r0
 800b316:	460c      	mov	r4, r1
 800b318:	469a      	mov	sl, r3
 800b31a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b31e:	d807      	bhi.n	800b330 <_printf_i+0x28>
 800b320:	2f62      	cmp	r7, #98	@ 0x62
 800b322:	d80a      	bhi.n	800b33a <_printf_i+0x32>
 800b324:	2f00      	cmp	r7, #0
 800b326:	f000 80d2 	beq.w	800b4ce <_printf_i+0x1c6>
 800b32a:	2f58      	cmp	r7, #88	@ 0x58
 800b32c:	f000 80b9 	beq.w	800b4a2 <_printf_i+0x19a>
 800b330:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b334:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b338:	e03a      	b.n	800b3b0 <_printf_i+0xa8>
 800b33a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b33e:	2b15      	cmp	r3, #21
 800b340:	d8f6      	bhi.n	800b330 <_printf_i+0x28>
 800b342:	a101      	add	r1, pc, #4	@ (adr r1, 800b348 <_printf_i+0x40>)
 800b344:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b348:	0800b3a1 	.word	0x0800b3a1
 800b34c:	0800b3b5 	.word	0x0800b3b5
 800b350:	0800b331 	.word	0x0800b331
 800b354:	0800b331 	.word	0x0800b331
 800b358:	0800b331 	.word	0x0800b331
 800b35c:	0800b331 	.word	0x0800b331
 800b360:	0800b3b5 	.word	0x0800b3b5
 800b364:	0800b331 	.word	0x0800b331
 800b368:	0800b331 	.word	0x0800b331
 800b36c:	0800b331 	.word	0x0800b331
 800b370:	0800b331 	.word	0x0800b331
 800b374:	0800b4b5 	.word	0x0800b4b5
 800b378:	0800b3df 	.word	0x0800b3df
 800b37c:	0800b46f 	.word	0x0800b46f
 800b380:	0800b331 	.word	0x0800b331
 800b384:	0800b331 	.word	0x0800b331
 800b388:	0800b4d7 	.word	0x0800b4d7
 800b38c:	0800b331 	.word	0x0800b331
 800b390:	0800b3df 	.word	0x0800b3df
 800b394:	0800b331 	.word	0x0800b331
 800b398:	0800b331 	.word	0x0800b331
 800b39c:	0800b477 	.word	0x0800b477
 800b3a0:	6833      	ldr	r3, [r6, #0]
 800b3a2:	1d1a      	adds	r2, r3, #4
 800b3a4:	681b      	ldr	r3, [r3, #0]
 800b3a6:	6032      	str	r2, [r6, #0]
 800b3a8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b3ac:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b3b0:	2301      	movs	r3, #1
 800b3b2:	e09d      	b.n	800b4f0 <_printf_i+0x1e8>
 800b3b4:	6833      	ldr	r3, [r6, #0]
 800b3b6:	6820      	ldr	r0, [r4, #0]
 800b3b8:	1d19      	adds	r1, r3, #4
 800b3ba:	6031      	str	r1, [r6, #0]
 800b3bc:	0606      	lsls	r6, r0, #24
 800b3be:	d501      	bpl.n	800b3c4 <_printf_i+0xbc>
 800b3c0:	681d      	ldr	r5, [r3, #0]
 800b3c2:	e003      	b.n	800b3cc <_printf_i+0xc4>
 800b3c4:	0645      	lsls	r5, r0, #25
 800b3c6:	d5fb      	bpl.n	800b3c0 <_printf_i+0xb8>
 800b3c8:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b3cc:	2d00      	cmp	r5, #0
 800b3ce:	da03      	bge.n	800b3d8 <_printf_i+0xd0>
 800b3d0:	232d      	movs	r3, #45	@ 0x2d
 800b3d2:	426d      	negs	r5, r5
 800b3d4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b3d8:	4859      	ldr	r0, [pc, #356]	@ (800b540 <_printf_i+0x238>)
 800b3da:	230a      	movs	r3, #10
 800b3dc:	e011      	b.n	800b402 <_printf_i+0xfa>
 800b3de:	6821      	ldr	r1, [r4, #0]
 800b3e0:	6833      	ldr	r3, [r6, #0]
 800b3e2:	0608      	lsls	r0, r1, #24
 800b3e4:	f853 5b04 	ldr.w	r5, [r3], #4
 800b3e8:	d402      	bmi.n	800b3f0 <_printf_i+0xe8>
 800b3ea:	0649      	lsls	r1, r1, #25
 800b3ec:	bf48      	it	mi
 800b3ee:	b2ad      	uxthmi	r5, r5
 800b3f0:	2f6f      	cmp	r7, #111	@ 0x6f
 800b3f2:	4853      	ldr	r0, [pc, #332]	@ (800b540 <_printf_i+0x238>)
 800b3f4:	6033      	str	r3, [r6, #0]
 800b3f6:	bf14      	ite	ne
 800b3f8:	230a      	movne	r3, #10
 800b3fa:	2308      	moveq	r3, #8
 800b3fc:	2100      	movs	r1, #0
 800b3fe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b402:	6866      	ldr	r6, [r4, #4]
 800b404:	60a6      	str	r6, [r4, #8]
 800b406:	2e00      	cmp	r6, #0
 800b408:	bfa2      	ittt	ge
 800b40a:	6821      	ldrge	r1, [r4, #0]
 800b40c:	f021 0104 	bicge.w	r1, r1, #4
 800b410:	6021      	strge	r1, [r4, #0]
 800b412:	b90d      	cbnz	r5, 800b418 <_printf_i+0x110>
 800b414:	2e00      	cmp	r6, #0
 800b416:	d04b      	beq.n	800b4b0 <_printf_i+0x1a8>
 800b418:	4616      	mov	r6, r2
 800b41a:	fbb5 f1f3 	udiv	r1, r5, r3
 800b41e:	fb03 5711 	mls	r7, r3, r1, r5
 800b422:	5dc7      	ldrb	r7, [r0, r7]
 800b424:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b428:	462f      	mov	r7, r5
 800b42a:	42bb      	cmp	r3, r7
 800b42c:	460d      	mov	r5, r1
 800b42e:	d9f4      	bls.n	800b41a <_printf_i+0x112>
 800b430:	2b08      	cmp	r3, #8
 800b432:	d10b      	bne.n	800b44c <_printf_i+0x144>
 800b434:	6823      	ldr	r3, [r4, #0]
 800b436:	07df      	lsls	r7, r3, #31
 800b438:	d508      	bpl.n	800b44c <_printf_i+0x144>
 800b43a:	6923      	ldr	r3, [r4, #16]
 800b43c:	6861      	ldr	r1, [r4, #4]
 800b43e:	4299      	cmp	r1, r3
 800b440:	bfde      	ittt	le
 800b442:	2330      	movle	r3, #48	@ 0x30
 800b444:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b448:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800b44c:	1b92      	subs	r2, r2, r6
 800b44e:	6122      	str	r2, [r4, #16]
 800b450:	f8cd a000 	str.w	sl, [sp]
 800b454:	464b      	mov	r3, r9
 800b456:	aa03      	add	r2, sp, #12
 800b458:	4621      	mov	r1, r4
 800b45a:	4640      	mov	r0, r8
 800b45c:	f7ff fee6 	bl	800b22c <_printf_common>
 800b460:	3001      	adds	r0, #1
 800b462:	d14a      	bne.n	800b4fa <_printf_i+0x1f2>
 800b464:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b468:	b004      	add	sp, #16
 800b46a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b46e:	6823      	ldr	r3, [r4, #0]
 800b470:	f043 0320 	orr.w	r3, r3, #32
 800b474:	6023      	str	r3, [r4, #0]
 800b476:	4833      	ldr	r0, [pc, #204]	@ (800b544 <_printf_i+0x23c>)
 800b478:	2778      	movs	r7, #120	@ 0x78
 800b47a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b47e:	6823      	ldr	r3, [r4, #0]
 800b480:	6831      	ldr	r1, [r6, #0]
 800b482:	061f      	lsls	r7, r3, #24
 800b484:	f851 5b04 	ldr.w	r5, [r1], #4
 800b488:	d402      	bmi.n	800b490 <_printf_i+0x188>
 800b48a:	065f      	lsls	r7, r3, #25
 800b48c:	bf48      	it	mi
 800b48e:	b2ad      	uxthmi	r5, r5
 800b490:	6031      	str	r1, [r6, #0]
 800b492:	07d9      	lsls	r1, r3, #31
 800b494:	bf44      	itt	mi
 800b496:	f043 0320 	orrmi.w	r3, r3, #32
 800b49a:	6023      	strmi	r3, [r4, #0]
 800b49c:	b11d      	cbz	r5, 800b4a6 <_printf_i+0x19e>
 800b49e:	2310      	movs	r3, #16
 800b4a0:	e7ac      	b.n	800b3fc <_printf_i+0xf4>
 800b4a2:	4827      	ldr	r0, [pc, #156]	@ (800b540 <_printf_i+0x238>)
 800b4a4:	e7e9      	b.n	800b47a <_printf_i+0x172>
 800b4a6:	6823      	ldr	r3, [r4, #0]
 800b4a8:	f023 0320 	bic.w	r3, r3, #32
 800b4ac:	6023      	str	r3, [r4, #0]
 800b4ae:	e7f6      	b.n	800b49e <_printf_i+0x196>
 800b4b0:	4616      	mov	r6, r2
 800b4b2:	e7bd      	b.n	800b430 <_printf_i+0x128>
 800b4b4:	6833      	ldr	r3, [r6, #0]
 800b4b6:	6825      	ldr	r5, [r4, #0]
 800b4b8:	6961      	ldr	r1, [r4, #20]
 800b4ba:	1d18      	adds	r0, r3, #4
 800b4bc:	6030      	str	r0, [r6, #0]
 800b4be:	062e      	lsls	r6, r5, #24
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	d501      	bpl.n	800b4c8 <_printf_i+0x1c0>
 800b4c4:	6019      	str	r1, [r3, #0]
 800b4c6:	e002      	b.n	800b4ce <_printf_i+0x1c6>
 800b4c8:	0668      	lsls	r0, r5, #25
 800b4ca:	d5fb      	bpl.n	800b4c4 <_printf_i+0x1bc>
 800b4cc:	8019      	strh	r1, [r3, #0]
 800b4ce:	2300      	movs	r3, #0
 800b4d0:	6123      	str	r3, [r4, #16]
 800b4d2:	4616      	mov	r6, r2
 800b4d4:	e7bc      	b.n	800b450 <_printf_i+0x148>
 800b4d6:	6833      	ldr	r3, [r6, #0]
 800b4d8:	1d1a      	adds	r2, r3, #4
 800b4da:	6032      	str	r2, [r6, #0]
 800b4dc:	681e      	ldr	r6, [r3, #0]
 800b4de:	6862      	ldr	r2, [r4, #4]
 800b4e0:	2100      	movs	r1, #0
 800b4e2:	4630      	mov	r0, r6
 800b4e4:	f7f4 fe74 	bl	80001d0 <memchr>
 800b4e8:	b108      	cbz	r0, 800b4ee <_printf_i+0x1e6>
 800b4ea:	1b80      	subs	r0, r0, r6
 800b4ec:	6060      	str	r0, [r4, #4]
 800b4ee:	6863      	ldr	r3, [r4, #4]
 800b4f0:	6123      	str	r3, [r4, #16]
 800b4f2:	2300      	movs	r3, #0
 800b4f4:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b4f8:	e7aa      	b.n	800b450 <_printf_i+0x148>
 800b4fa:	6923      	ldr	r3, [r4, #16]
 800b4fc:	4632      	mov	r2, r6
 800b4fe:	4649      	mov	r1, r9
 800b500:	4640      	mov	r0, r8
 800b502:	47d0      	blx	sl
 800b504:	3001      	adds	r0, #1
 800b506:	d0ad      	beq.n	800b464 <_printf_i+0x15c>
 800b508:	6823      	ldr	r3, [r4, #0]
 800b50a:	079b      	lsls	r3, r3, #30
 800b50c:	d413      	bmi.n	800b536 <_printf_i+0x22e>
 800b50e:	68e0      	ldr	r0, [r4, #12]
 800b510:	9b03      	ldr	r3, [sp, #12]
 800b512:	4298      	cmp	r0, r3
 800b514:	bfb8      	it	lt
 800b516:	4618      	movlt	r0, r3
 800b518:	e7a6      	b.n	800b468 <_printf_i+0x160>
 800b51a:	2301      	movs	r3, #1
 800b51c:	4632      	mov	r2, r6
 800b51e:	4649      	mov	r1, r9
 800b520:	4640      	mov	r0, r8
 800b522:	47d0      	blx	sl
 800b524:	3001      	adds	r0, #1
 800b526:	d09d      	beq.n	800b464 <_printf_i+0x15c>
 800b528:	3501      	adds	r5, #1
 800b52a:	68e3      	ldr	r3, [r4, #12]
 800b52c:	9903      	ldr	r1, [sp, #12]
 800b52e:	1a5b      	subs	r3, r3, r1
 800b530:	42ab      	cmp	r3, r5
 800b532:	dcf2      	bgt.n	800b51a <_printf_i+0x212>
 800b534:	e7eb      	b.n	800b50e <_printf_i+0x206>
 800b536:	2500      	movs	r5, #0
 800b538:	f104 0619 	add.w	r6, r4, #25
 800b53c:	e7f5      	b.n	800b52a <_printf_i+0x222>
 800b53e:	bf00      	nop
 800b540:	0800fb96 	.word	0x0800fb96
 800b544:	0800fba7 	.word	0x0800fba7

0800b548 <std>:
 800b548:	2300      	movs	r3, #0
 800b54a:	b510      	push	{r4, lr}
 800b54c:	4604      	mov	r4, r0
 800b54e:	e9c0 3300 	strd	r3, r3, [r0]
 800b552:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800b556:	6083      	str	r3, [r0, #8]
 800b558:	8181      	strh	r1, [r0, #12]
 800b55a:	6643      	str	r3, [r0, #100]	@ 0x64
 800b55c:	81c2      	strh	r2, [r0, #14]
 800b55e:	6183      	str	r3, [r0, #24]
 800b560:	4619      	mov	r1, r3
 800b562:	2208      	movs	r2, #8
 800b564:	305c      	adds	r0, #92	@ 0x5c
 800b566:	f000 fa2d 	bl	800b9c4 <memset>
 800b56a:	4b0d      	ldr	r3, [pc, #52]	@ (800b5a0 <std+0x58>)
 800b56c:	6263      	str	r3, [r4, #36]	@ 0x24
 800b56e:	4b0d      	ldr	r3, [pc, #52]	@ (800b5a4 <std+0x5c>)
 800b570:	62a3      	str	r3, [r4, #40]	@ 0x28
 800b572:	4b0d      	ldr	r3, [pc, #52]	@ (800b5a8 <std+0x60>)
 800b574:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800b576:	4b0d      	ldr	r3, [pc, #52]	@ (800b5ac <std+0x64>)
 800b578:	6323      	str	r3, [r4, #48]	@ 0x30
 800b57a:	4b0d      	ldr	r3, [pc, #52]	@ (800b5b0 <std+0x68>)
 800b57c:	6224      	str	r4, [r4, #32]
 800b57e:	429c      	cmp	r4, r3
 800b580:	d006      	beq.n	800b590 <std+0x48>
 800b582:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800b586:	4294      	cmp	r4, r2
 800b588:	d002      	beq.n	800b590 <std+0x48>
 800b58a:	33d0      	adds	r3, #208	@ 0xd0
 800b58c:	429c      	cmp	r4, r3
 800b58e:	d105      	bne.n	800b59c <std+0x54>
 800b590:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800b594:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b598:	f000 ba90 	b.w	800babc <__retarget_lock_init_recursive>
 800b59c:	bd10      	pop	{r4, pc}
 800b59e:	bf00      	nop
 800b5a0:	0800b815 	.word	0x0800b815
 800b5a4:	0800b837 	.word	0x0800b837
 800b5a8:	0800b86f 	.word	0x0800b86f
 800b5ac:	0800b893 	.word	0x0800b893
 800b5b0:	2000507c 	.word	0x2000507c

0800b5b4 <stdio_exit_handler>:
 800b5b4:	4a02      	ldr	r2, [pc, #8]	@ (800b5c0 <stdio_exit_handler+0xc>)
 800b5b6:	4903      	ldr	r1, [pc, #12]	@ (800b5c4 <stdio_exit_handler+0x10>)
 800b5b8:	4803      	ldr	r0, [pc, #12]	@ (800b5c8 <stdio_exit_handler+0x14>)
 800b5ba:	f000 b869 	b.w	800b690 <_fwalk_sglue>
 800b5be:	bf00      	nop
 800b5c0:	200000b4 	.word	0x200000b4
 800b5c4:	0800d6b9 	.word	0x0800d6b9
 800b5c8:	200000c4 	.word	0x200000c4

0800b5cc <cleanup_stdio>:
 800b5cc:	6841      	ldr	r1, [r0, #4]
 800b5ce:	4b0c      	ldr	r3, [pc, #48]	@ (800b600 <cleanup_stdio+0x34>)
 800b5d0:	4299      	cmp	r1, r3
 800b5d2:	b510      	push	{r4, lr}
 800b5d4:	4604      	mov	r4, r0
 800b5d6:	d001      	beq.n	800b5dc <cleanup_stdio+0x10>
 800b5d8:	f002 f86e 	bl	800d6b8 <_fflush_r>
 800b5dc:	68a1      	ldr	r1, [r4, #8]
 800b5de:	4b09      	ldr	r3, [pc, #36]	@ (800b604 <cleanup_stdio+0x38>)
 800b5e0:	4299      	cmp	r1, r3
 800b5e2:	d002      	beq.n	800b5ea <cleanup_stdio+0x1e>
 800b5e4:	4620      	mov	r0, r4
 800b5e6:	f002 f867 	bl	800d6b8 <_fflush_r>
 800b5ea:	68e1      	ldr	r1, [r4, #12]
 800b5ec:	4b06      	ldr	r3, [pc, #24]	@ (800b608 <cleanup_stdio+0x3c>)
 800b5ee:	4299      	cmp	r1, r3
 800b5f0:	d004      	beq.n	800b5fc <cleanup_stdio+0x30>
 800b5f2:	4620      	mov	r0, r4
 800b5f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b5f8:	f002 b85e 	b.w	800d6b8 <_fflush_r>
 800b5fc:	bd10      	pop	{r4, pc}
 800b5fe:	bf00      	nop
 800b600:	2000507c 	.word	0x2000507c
 800b604:	200050e4 	.word	0x200050e4
 800b608:	2000514c 	.word	0x2000514c

0800b60c <global_stdio_init.part.0>:
 800b60c:	b510      	push	{r4, lr}
 800b60e:	4b0b      	ldr	r3, [pc, #44]	@ (800b63c <global_stdio_init.part.0+0x30>)
 800b610:	4c0b      	ldr	r4, [pc, #44]	@ (800b640 <global_stdio_init.part.0+0x34>)
 800b612:	4a0c      	ldr	r2, [pc, #48]	@ (800b644 <global_stdio_init.part.0+0x38>)
 800b614:	601a      	str	r2, [r3, #0]
 800b616:	4620      	mov	r0, r4
 800b618:	2200      	movs	r2, #0
 800b61a:	2104      	movs	r1, #4
 800b61c:	f7ff ff94 	bl	800b548 <std>
 800b620:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800b624:	2201      	movs	r2, #1
 800b626:	2109      	movs	r1, #9
 800b628:	f7ff ff8e 	bl	800b548 <std>
 800b62c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800b630:	2202      	movs	r2, #2
 800b632:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b636:	2112      	movs	r1, #18
 800b638:	f7ff bf86 	b.w	800b548 <std>
 800b63c:	200051b4 	.word	0x200051b4
 800b640:	2000507c 	.word	0x2000507c
 800b644:	0800b5b5 	.word	0x0800b5b5

0800b648 <__sfp_lock_acquire>:
 800b648:	4801      	ldr	r0, [pc, #4]	@ (800b650 <__sfp_lock_acquire+0x8>)
 800b64a:	f000 ba38 	b.w	800babe <__retarget_lock_acquire_recursive>
 800b64e:	bf00      	nop
 800b650:	200051bd 	.word	0x200051bd

0800b654 <__sfp_lock_release>:
 800b654:	4801      	ldr	r0, [pc, #4]	@ (800b65c <__sfp_lock_release+0x8>)
 800b656:	f000 ba33 	b.w	800bac0 <__retarget_lock_release_recursive>
 800b65a:	bf00      	nop
 800b65c:	200051bd 	.word	0x200051bd

0800b660 <__sinit>:
 800b660:	b510      	push	{r4, lr}
 800b662:	4604      	mov	r4, r0
 800b664:	f7ff fff0 	bl	800b648 <__sfp_lock_acquire>
 800b668:	6a23      	ldr	r3, [r4, #32]
 800b66a:	b11b      	cbz	r3, 800b674 <__sinit+0x14>
 800b66c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800b670:	f7ff bff0 	b.w	800b654 <__sfp_lock_release>
 800b674:	4b04      	ldr	r3, [pc, #16]	@ (800b688 <__sinit+0x28>)
 800b676:	6223      	str	r3, [r4, #32]
 800b678:	4b04      	ldr	r3, [pc, #16]	@ (800b68c <__sinit+0x2c>)
 800b67a:	681b      	ldr	r3, [r3, #0]
 800b67c:	2b00      	cmp	r3, #0
 800b67e:	d1f5      	bne.n	800b66c <__sinit+0xc>
 800b680:	f7ff ffc4 	bl	800b60c <global_stdio_init.part.0>
 800b684:	e7f2      	b.n	800b66c <__sinit+0xc>
 800b686:	bf00      	nop
 800b688:	0800b5cd 	.word	0x0800b5cd
 800b68c:	200051b4 	.word	0x200051b4

0800b690 <_fwalk_sglue>:
 800b690:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b694:	4607      	mov	r7, r0
 800b696:	4688      	mov	r8, r1
 800b698:	4614      	mov	r4, r2
 800b69a:	2600      	movs	r6, #0
 800b69c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800b6a0:	f1b9 0901 	subs.w	r9, r9, #1
 800b6a4:	d505      	bpl.n	800b6b2 <_fwalk_sglue+0x22>
 800b6a6:	6824      	ldr	r4, [r4, #0]
 800b6a8:	2c00      	cmp	r4, #0
 800b6aa:	d1f7      	bne.n	800b69c <_fwalk_sglue+0xc>
 800b6ac:	4630      	mov	r0, r6
 800b6ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b6b2:	89ab      	ldrh	r3, [r5, #12]
 800b6b4:	2b01      	cmp	r3, #1
 800b6b6:	d907      	bls.n	800b6c8 <_fwalk_sglue+0x38>
 800b6b8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800b6bc:	3301      	adds	r3, #1
 800b6be:	d003      	beq.n	800b6c8 <_fwalk_sglue+0x38>
 800b6c0:	4629      	mov	r1, r5
 800b6c2:	4638      	mov	r0, r7
 800b6c4:	47c0      	blx	r8
 800b6c6:	4306      	orrs	r6, r0
 800b6c8:	3568      	adds	r5, #104	@ 0x68
 800b6ca:	e7e9      	b.n	800b6a0 <_fwalk_sglue+0x10>

0800b6cc <iprintf>:
 800b6cc:	b40f      	push	{r0, r1, r2, r3}
 800b6ce:	b507      	push	{r0, r1, r2, lr}
 800b6d0:	4906      	ldr	r1, [pc, #24]	@ (800b6ec <iprintf+0x20>)
 800b6d2:	ab04      	add	r3, sp, #16
 800b6d4:	6808      	ldr	r0, [r1, #0]
 800b6d6:	f853 2b04 	ldr.w	r2, [r3], #4
 800b6da:	6881      	ldr	r1, [r0, #8]
 800b6dc:	9301      	str	r3, [sp, #4]
 800b6de:	f001 fe4f 	bl	800d380 <_vfiprintf_r>
 800b6e2:	b003      	add	sp, #12
 800b6e4:	f85d eb04 	ldr.w	lr, [sp], #4
 800b6e8:	b004      	add	sp, #16
 800b6ea:	4770      	bx	lr
 800b6ec:	200000c0 	.word	0x200000c0

0800b6f0 <_puts_r>:
 800b6f0:	6a03      	ldr	r3, [r0, #32]
 800b6f2:	b570      	push	{r4, r5, r6, lr}
 800b6f4:	6884      	ldr	r4, [r0, #8]
 800b6f6:	4605      	mov	r5, r0
 800b6f8:	460e      	mov	r6, r1
 800b6fa:	b90b      	cbnz	r3, 800b700 <_puts_r+0x10>
 800b6fc:	f7ff ffb0 	bl	800b660 <__sinit>
 800b700:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b702:	07db      	lsls	r3, r3, #31
 800b704:	d405      	bmi.n	800b712 <_puts_r+0x22>
 800b706:	89a3      	ldrh	r3, [r4, #12]
 800b708:	0598      	lsls	r0, r3, #22
 800b70a:	d402      	bmi.n	800b712 <_puts_r+0x22>
 800b70c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b70e:	f000 f9d6 	bl	800babe <__retarget_lock_acquire_recursive>
 800b712:	89a3      	ldrh	r3, [r4, #12]
 800b714:	0719      	lsls	r1, r3, #28
 800b716:	d502      	bpl.n	800b71e <_puts_r+0x2e>
 800b718:	6923      	ldr	r3, [r4, #16]
 800b71a:	2b00      	cmp	r3, #0
 800b71c:	d135      	bne.n	800b78a <_puts_r+0x9a>
 800b71e:	4621      	mov	r1, r4
 800b720:	4628      	mov	r0, r5
 800b722:	f000 f8f9 	bl	800b918 <__swsetup_r>
 800b726:	b380      	cbz	r0, 800b78a <_puts_r+0x9a>
 800b728:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800b72c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800b72e:	07da      	lsls	r2, r3, #31
 800b730:	d405      	bmi.n	800b73e <_puts_r+0x4e>
 800b732:	89a3      	ldrh	r3, [r4, #12]
 800b734:	059b      	lsls	r3, r3, #22
 800b736:	d402      	bmi.n	800b73e <_puts_r+0x4e>
 800b738:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b73a:	f000 f9c1 	bl	800bac0 <__retarget_lock_release_recursive>
 800b73e:	4628      	mov	r0, r5
 800b740:	bd70      	pop	{r4, r5, r6, pc}
 800b742:	2b00      	cmp	r3, #0
 800b744:	da04      	bge.n	800b750 <_puts_r+0x60>
 800b746:	69a2      	ldr	r2, [r4, #24]
 800b748:	429a      	cmp	r2, r3
 800b74a:	dc17      	bgt.n	800b77c <_puts_r+0x8c>
 800b74c:	290a      	cmp	r1, #10
 800b74e:	d015      	beq.n	800b77c <_puts_r+0x8c>
 800b750:	6823      	ldr	r3, [r4, #0]
 800b752:	1c5a      	adds	r2, r3, #1
 800b754:	6022      	str	r2, [r4, #0]
 800b756:	7019      	strb	r1, [r3, #0]
 800b758:	68a3      	ldr	r3, [r4, #8]
 800b75a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800b75e:	3b01      	subs	r3, #1
 800b760:	60a3      	str	r3, [r4, #8]
 800b762:	2900      	cmp	r1, #0
 800b764:	d1ed      	bne.n	800b742 <_puts_r+0x52>
 800b766:	2b00      	cmp	r3, #0
 800b768:	da11      	bge.n	800b78e <_puts_r+0x9e>
 800b76a:	4622      	mov	r2, r4
 800b76c:	210a      	movs	r1, #10
 800b76e:	4628      	mov	r0, r5
 800b770:	f000 f893 	bl	800b89a <__swbuf_r>
 800b774:	3001      	adds	r0, #1
 800b776:	d0d7      	beq.n	800b728 <_puts_r+0x38>
 800b778:	250a      	movs	r5, #10
 800b77a:	e7d7      	b.n	800b72c <_puts_r+0x3c>
 800b77c:	4622      	mov	r2, r4
 800b77e:	4628      	mov	r0, r5
 800b780:	f000 f88b 	bl	800b89a <__swbuf_r>
 800b784:	3001      	adds	r0, #1
 800b786:	d1e7      	bne.n	800b758 <_puts_r+0x68>
 800b788:	e7ce      	b.n	800b728 <_puts_r+0x38>
 800b78a:	3e01      	subs	r6, #1
 800b78c:	e7e4      	b.n	800b758 <_puts_r+0x68>
 800b78e:	6823      	ldr	r3, [r4, #0]
 800b790:	1c5a      	adds	r2, r3, #1
 800b792:	6022      	str	r2, [r4, #0]
 800b794:	220a      	movs	r2, #10
 800b796:	701a      	strb	r2, [r3, #0]
 800b798:	e7ee      	b.n	800b778 <_puts_r+0x88>
	...

0800b79c <puts>:
 800b79c:	4b02      	ldr	r3, [pc, #8]	@ (800b7a8 <puts+0xc>)
 800b79e:	4601      	mov	r1, r0
 800b7a0:	6818      	ldr	r0, [r3, #0]
 800b7a2:	f7ff bfa5 	b.w	800b6f0 <_puts_r>
 800b7a6:	bf00      	nop
 800b7a8:	200000c0 	.word	0x200000c0

0800b7ac <sniprintf>:
 800b7ac:	b40c      	push	{r2, r3}
 800b7ae:	b530      	push	{r4, r5, lr}
 800b7b0:	4b17      	ldr	r3, [pc, #92]	@ (800b810 <sniprintf+0x64>)
 800b7b2:	1e0c      	subs	r4, r1, #0
 800b7b4:	681d      	ldr	r5, [r3, #0]
 800b7b6:	b09d      	sub	sp, #116	@ 0x74
 800b7b8:	da08      	bge.n	800b7cc <sniprintf+0x20>
 800b7ba:	238b      	movs	r3, #139	@ 0x8b
 800b7bc:	602b      	str	r3, [r5, #0]
 800b7be:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b7c2:	b01d      	add	sp, #116	@ 0x74
 800b7c4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b7c8:	b002      	add	sp, #8
 800b7ca:	4770      	bx	lr
 800b7cc:	f44f 7302 	mov.w	r3, #520	@ 0x208
 800b7d0:	f8ad 3014 	strh.w	r3, [sp, #20]
 800b7d4:	bf14      	ite	ne
 800b7d6:	f104 33ff 	addne.w	r3, r4, #4294967295	@ 0xffffffff
 800b7da:	4623      	moveq	r3, r4
 800b7dc:	9304      	str	r3, [sp, #16]
 800b7de:	9307      	str	r3, [sp, #28]
 800b7e0:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 800b7e4:	9002      	str	r0, [sp, #8]
 800b7e6:	9006      	str	r0, [sp, #24]
 800b7e8:	f8ad 3016 	strh.w	r3, [sp, #22]
 800b7ec:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 800b7ee:	ab21      	add	r3, sp, #132	@ 0x84
 800b7f0:	a902      	add	r1, sp, #8
 800b7f2:	4628      	mov	r0, r5
 800b7f4:	9301      	str	r3, [sp, #4]
 800b7f6:	f001 fc9d 	bl	800d134 <_svfiprintf_r>
 800b7fa:	1c43      	adds	r3, r0, #1
 800b7fc:	bfbc      	itt	lt
 800b7fe:	238b      	movlt	r3, #139	@ 0x8b
 800b800:	602b      	strlt	r3, [r5, #0]
 800b802:	2c00      	cmp	r4, #0
 800b804:	d0dd      	beq.n	800b7c2 <sniprintf+0x16>
 800b806:	9b02      	ldr	r3, [sp, #8]
 800b808:	2200      	movs	r2, #0
 800b80a:	701a      	strb	r2, [r3, #0]
 800b80c:	e7d9      	b.n	800b7c2 <sniprintf+0x16>
 800b80e:	bf00      	nop
 800b810:	200000c0 	.word	0x200000c0

0800b814 <__sread>:
 800b814:	b510      	push	{r4, lr}
 800b816:	460c      	mov	r4, r1
 800b818:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b81c:	f000 f900 	bl	800ba20 <_read_r>
 800b820:	2800      	cmp	r0, #0
 800b822:	bfab      	itete	ge
 800b824:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b826:	89a3      	ldrhlt	r3, [r4, #12]
 800b828:	181b      	addge	r3, r3, r0
 800b82a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b82e:	bfac      	ite	ge
 800b830:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b832:	81a3      	strhlt	r3, [r4, #12]
 800b834:	bd10      	pop	{r4, pc}

0800b836 <__swrite>:
 800b836:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b83a:	461f      	mov	r7, r3
 800b83c:	898b      	ldrh	r3, [r1, #12]
 800b83e:	05db      	lsls	r3, r3, #23
 800b840:	4605      	mov	r5, r0
 800b842:	460c      	mov	r4, r1
 800b844:	4616      	mov	r6, r2
 800b846:	d505      	bpl.n	800b854 <__swrite+0x1e>
 800b848:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b84c:	2302      	movs	r3, #2
 800b84e:	2200      	movs	r2, #0
 800b850:	f000 f8d4 	bl	800b9fc <_lseek_r>
 800b854:	89a3      	ldrh	r3, [r4, #12]
 800b856:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b85a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b85e:	81a3      	strh	r3, [r4, #12]
 800b860:	4632      	mov	r2, r6
 800b862:	463b      	mov	r3, r7
 800b864:	4628      	mov	r0, r5
 800b866:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b86a:	f000 b8eb 	b.w	800ba44 <_write_r>

0800b86e <__sseek>:
 800b86e:	b510      	push	{r4, lr}
 800b870:	460c      	mov	r4, r1
 800b872:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b876:	f000 f8c1 	bl	800b9fc <_lseek_r>
 800b87a:	1c43      	adds	r3, r0, #1
 800b87c:	89a3      	ldrh	r3, [r4, #12]
 800b87e:	bf15      	itete	ne
 800b880:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b882:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b886:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b88a:	81a3      	strheq	r3, [r4, #12]
 800b88c:	bf18      	it	ne
 800b88e:	81a3      	strhne	r3, [r4, #12]
 800b890:	bd10      	pop	{r4, pc}

0800b892 <__sclose>:
 800b892:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b896:	f000 b8a1 	b.w	800b9dc <_close_r>

0800b89a <__swbuf_r>:
 800b89a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b89c:	460e      	mov	r6, r1
 800b89e:	4614      	mov	r4, r2
 800b8a0:	4605      	mov	r5, r0
 800b8a2:	b118      	cbz	r0, 800b8ac <__swbuf_r+0x12>
 800b8a4:	6a03      	ldr	r3, [r0, #32]
 800b8a6:	b90b      	cbnz	r3, 800b8ac <__swbuf_r+0x12>
 800b8a8:	f7ff feda 	bl	800b660 <__sinit>
 800b8ac:	69a3      	ldr	r3, [r4, #24]
 800b8ae:	60a3      	str	r3, [r4, #8]
 800b8b0:	89a3      	ldrh	r3, [r4, #12]
 800b8b2:	071a      	lsls	r2, r3, #28
 800b8b4:	d501      	bpl.n	800b8ba <__swbuf_r+0x20>
 800b8b6:	6923      	ldr	r3, [r4, #16]
 800b8b8:	b943      	cbnz	r3, 800b8cc <__swbuf_r+0x32>
 800b8ba:	4621      	mov	r1, r4
 800b8bc:	4628      	mov	r0, r5
 800b8be:	f000 f82b 	bl	800b918 <__swsetup_r>
 800b8c2:	b118      	cbz	r0, 800b8cc <__swbuf_r+0x32>
 800b8c4:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800b8c8:	4638      	mov	r0, r7
 800b8ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b8cc:	6823      	ldr	r3, [r4, #0]
 800b8ce:	6922      	ldr	r2, [r4, #16]
 800b8d0:	1a98      	subs	r0, r3, r2
 800b8d2:	6963      	ldr	r3, [r4, #20]
 800b8d4:	b2f6      	uxtb	r6, r6
 800b8d6:	4283      	cmp	r3, r0
 800b8d8:	4637      	mov	r7, r6
 800b8da:	dc05      	bgt.n	800b8e8 <__swbuf_r+0x4e>
 800b8dc:	4621      	mov	r1, r4
 800b8de:	4628      	mov	r0, r5
 800b8e0:	f001 feea 	bl	800d6b8 <_fflush_r>
 800b8e4:	2800      	cmp	r0, #0
 800b8e6:	d1ed      	bne.n	800b8c4 <__swbuf_r+0x2a>
 800b8e8:	68a3      	ldr	r3, [r4, #8]
 800b8ea:	3b01      	subs	r3, #1
 800b8ec:	60a3      	str	r3, [r4, #8]
 800b8ee:	6823      	ldr	r3, [r4, #0]
 800b8f0:	1c5a      	adds	r2, r3, #1
 800b8f2:	6022      	str	r2, [r4, #0]
 800b8f4:	701e      	strb	r6, [r3, #0]
 800b8f6:	6962      	ldr	r2, [r4, #20]
 800b8f8:	1c43      	adds	r3, r0, #1
 800b8fa:	429a      	cmp	r2, r3
 800b8fc:	d004      	beq.n	800b908 <__swbuf_r+0x6e>
 800b8fe:	89a3      	ldrh	r3, [r4, #12]
 800b900:	07db      	lsls	r3, r3, #31
 800b902:	d5e1      	bpl.n	800b8c8 <__swbuf_r+0x2e>
 800b904:	2e0a      	cmp	r6, #10
 800b906:	d1df      	bne.n	800b8c8 <__swbuf_r+0x2e>
 800b908:	4621      	mov	r1, r4
 800b90a:	4628      	mov	r0, r5
 800b90c:	f001 fed4 	bl	800d6b8 <_fflush_r>
 800b910:	2800      	cmp	r0, #0
 800b912:	d0d9      	beq.n	800b8c8 <__swbuf_r+0x2e>
 800b914:	e7d6      	b.n	800b8c4 <__swbuf_r+0x2a>
	...

0800b918 <__swsetup_r>:
 800b918:	b538      	push	{r3, r4, r5, lr}
 800b91a:	4b29      	ldr	r3, [pc, #164]	@ (800b9c0 <__swsetup_r+0xa8>)
 800b91c:	4605      	mov	r5, r0
 800b91e:	6818      	ldr	r0, [r3, #0]
 800b920:	460c      	mov	r4, r1
 800b922:	b118      	cbz	r0, 800b92c <__swsetup_r+0x14>
 800b924:	6a03      	ldr	r3, [r0, #32]
 800b926:	b90b      	cbnz	r3, 800b92c <__swsetup_r+0x14>
 800b928:	f7ff fe9a 	bl	800b660 <__sinit>
 800b92c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b930:	0719      	lsls	r1, r3, #28
 800b932:	d422      	bmi.n	800b97a <__swsetup_r+0x62>
 800b934:	06da      	lsls	r2, r3, #27
 800b936:	d407      	bmi.n	800b948 <__swsetup_r+0x30>
 800b938:	2209      	movs	r2, #9
 800b93a:	602a      	str	r2, [r5, #0]
 800b93c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b940:	81a3      	strh	r3, [r4, #12]
 800b942:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800b946:	e033      	b.n	800b9b0 <__swsetup_r+0x98>
 800b948:	0758      	lsls	r0, r3, #29
 800b94a:	d512      	bpl.n	800b972 <__swsetup_r+0x5a>
 800b94c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b94e:	b141      	cbz	r1, 800b962 <__swsetup_r+0x4a>
 800b950:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b954:	4299      	cmp	r1, r3
 800b956:	d002      	beq.n	800b95e <__swsetup_r+0x46>
 800b958:	4628      	mov	r0, r5
 800b95a:	f000 ff0d 	bl	800c778 <_free_r>
 800b95e:	2300      	movs	r3, #0
 800b960:	6363      	str	r3, [r4, #52]	@ 0x34
 800b962:	89a3      	ldrh	r3, [r4, #12]
 800b964:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b968:	81a3      	strh	r3, [r4, #12]
 800b96a:	2300      	movs	r3, #0
 800b96c:	6063      	str	r3, [r4, #4]
 800b96e:	6923      	ldr	r3, [r4, #16]
 800b970:	6023      	str	r3, [r4, #0]
 800b972:	89a3      	ldrh	r3, [r4, #12]
 800b974:	f043 0308 	orr.w	r3, r3, #8
 800b978:	81a3      	strh	r3, [r4, #12]
 800b97a:	6923      	ldr	r3, [r4, #16]
 800b97c:	b94b      	cbnz	r3, 800b992 <__swsetup_r+0x7a>
 800b97e:	89a3      	ldrh	r3, [r4, #12]
 800b980:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b984:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b988:	d003      	beq.n	800b992 <__swsetup_r+0x7a>
 800b98a:	4621      	mov	r1, r4
 800b98c:	4628      	mov	r0, r5
 800b98e:	f001 fee1 	bl	800d754 <__smakebuf_r>
 800b992:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b996:	f013 0201 	ands.w	r2, r3, #1
 800b99a:	d00a      	beq.n	800b9b2 <__swsetup_r+0x9a>
 800b99c:	2200      	movs	r2, #0
 800b99e:	60a2      	str	r2, [r4, #8]
 800b9a0:	6962      	ldr	r2, [r4, #20]
 800b9a2:	4252      	negs	r2, r2
 800b9a4:	61a2      	str	r2, [r4, #24]
 800b9a6:	6922      	ldr	r2, [r4, #16]
 800b9a8:	b942      	cbnz	r2, 800b9bc <__swsetup_r+0xa4>
 800b9aa:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b9ae:	d1c5      	bne.n	800b93c <__swsetup_r+0x24>
 800b9b0:	bd38      	pop	{r3, r4, r5, pc}
 800b9b2:	0799      	lsls	r1, r3, #30
 800b9b4:	bf58      	it	pl
 800b9b6:	6962      	ldrpl	r2, [r4, #20]
 800b9b8:	60a2      	str	r2, [r4, #8]
 800b9ba:	e7f4      	b.n	800b9a6 <__swsetup_r+0x8e>
 800b9bc:	2000      	movs	r0, #0
 800b9be:	e7f7      	b.n	800b9b0 <__swsetup_r+0x98>
 800b9c0:	200000c0 	.word	0x200000c0

0800b9c4 <memset>:
 800b9c4:	4402      	add	r2, r0
 800b9c6:	4603      	mov	r3, r0
 800b9c8:	4293      	cmp	r3, r2
 800b9ca:	d100      	bne.n	800b9ce <memset+0xa>
 800b9cc:	4770      	bx	lr
 800b9ce:	f803 1b01 	strb.w	r1, [r3], #1
 800b9d2:	e7f9      	b.n	800b9c8 <memset+0x4>

0800b9d4 <_localeconv_r>:
 800b9d4:	4800      	ldr	r0, [pc, #0]	@ (800b9d8 <_localeconv_r+0x4>)
 800b9d6:	4770      	bx	lr
 800b9d8:	20000200 	.word	0x20000200

0800b9dc <_close_r>:
 800b9dc:	b538      	push	{r3, r4, r5, lr}
 800b9de:	4d06      	ldr	r5, [pc, #24]	@ (800b9f8 <_close_r+0x1c>)
 800b9e0:	2300      	movs	r3, #0
 800b9e2:	4604      	mov	r4, r0
 800b9e4:	4608      	mov	r0, r1
 800b9e6:	602b      	str	r3, [r5, #0]
 800b9e8:	f7f8 ffc4 	bl	8004974 <_close>
 800b9ec:	1c43      	adds	r3, r0, #1
 800b9ee:	d102      	bne.n	800b9f6 <_close_r+0x1a>
 800b9f0:	682b      	ldr	r3, [r5, #0]
 800b9f2:	b103      	cbz	r3, 800b9f6 <_close_r+0x1a>
 800b9f4:	6023      	str	r3, [r4, #0]
 800b9f6:	bd38      	pop	{r3, r4, r5, pc}
 800b9f8:	200051b8 	.word	0x200051b8

0800b9fc <_lseek_r>:
 800b9fc:	b538      	push	{r3, r4, r5, lr}
 800b9fe:	4d07      	ldr	r5, [pc, #28]	@ (800ba1c <_lseek_r+0x20>)
 800ba00:	4604      	mov	r4, r0
 800ba02:	4608      	mov	r0, r1
 800ba04:	4611      	mov	r1, r2
 800ba06:	2200      	movs	r2, #0
 800ba08:	602a      	str	r2, [r5, #0]
 800ba0a:	461a      	mov	r2, r3
 800ba0c:	f7f8 ffd9 	bl	80049c2 <_lseek>
 800ba10:	1c43      	adds	r3, r0, #1
 800ba12:	d102      	bne.n	800ba1a <_lseek_r+0x1e>
 800ba14:	682b      	ldr	r3, [r5, #0]
 800ba16:	b103      	cbz	r3, 800ba1a <_lseek_r+0x1e>
 800ba18:	6023      	str	r3, [r4, #0]
 800ba1a:	bd38      	pop	{r3, r4, r5, pc}
 800ba1c:	200051b8 	.word	0x200051b8

0800ba20 <_read_r>:
 800ba20:	b538      	push	{r3, r4, r5, lr}
 800ba22:	4d07      	ldr	r5, [pc, #28]	@ (800ba40 <_read_r+0x20>)
 800ba24:	4604      	mov	r4, r0
 800ba26:	4608      	mov	r0, r1
 800ba28:	4611      	mov	r1, r2
 800ba2a:	2200      	movs	r2, #0
 800ba2c:	602a      	str	r2, [r5, #0]
 800ba2e:	461a      	mov	r2, r3
 800ba30:	f7f8 ff67 	bl	8004902 <_read>
 800ba34:	1c43      	adds	r3, r0, #1
 800ba36:	d102      	bne.n	800ba3e <_read_r+0x1e>
 800ba38:	682b      	ldr	r3, [r5, #0]
 800ba3a:	b103      	cbz	r3, 800ba3e <_read_r+0x1e>
 800ba3c:	6023      	str	r3, [r4, #0]
 800ba3e:	bd38      	pop	{r3, r4, r5, pc}
 800ba40:	200051b8 	.word	0x200051b8

0800ba44 <_write_r>:
 800ba44:	b538      	push	{r3, r4, r5, lr}
 800ba46:	4d07      	ldr	r5, [pc, #28]	@ (800ba64 <_write_r+0x20>)
 800ba48:	4604      	mov	r4, r0
 800ba4a:	4608      	mov	r0, r1
 800ba4c:	4611      	mov	r1, r2
 800ba4e:	2200      	movs	r2, #0
 800ba50:	602a      	str	r2, [r5, #0]
 800ba52:	461a      	mov	r2, r3
 800ba54:	f7f8 ff72 	bl	800493c <_write>
 800ba58:	1c43      	adds	r3, r0, #1
 800ba5a:	d102      	bne.n	800ba62 <_write_r+0x1e>
 800ba5c:	682b      	ldr	r3, [r5, #0]
 800ba5e:	b103      	cbz	r3, 800ba62 <_write_r+0x1e>
 800ba60:	6023      	str	r3, [r4, #0]
 800ba62:	bd38      	pop	{r3, r4, r5, pc}
 800ba64:	200051b8 	.word	0x200051b8

0800ba68 <__errno>:
 800ba68:	4b01      	ldr	r3, [pc, #4]	@ (800ba70 <__errno+0x8>)
 800ba6a:	6818      	ldr	r0, [r3, #0]
 800ba6c:	4770      	bx	lr
 800ba6e:	bf00      	nop
 800ba70:	200000c0 	.word	0x200000c0

0800ba74 <__libc_init_array>:
 800ba74:	b570      	push	{r4, r5, r6, lr}
 800ba76:	4d0d      	ldr	r5, [pc, #52]	@ (800baac <__libc_init_array+0x38>)
 800ba78:	4c0d      	ldr	r4, [pc, #52]	@ (800bab0 <__libc_init_array+0x3c>)
 800ba7a:	1b64      	subs	r4, r4, r5
 800ba7c:	10a4      	asrs	r4, r4, #2
 800ba7e:	2600      	movs	r6, #0
 800ba80:	42a6      	cmp	r6, r4
 800ba82:	d109      	bne.n	800ba98 <__libc_init_array+0x24>
 800ba84:	4d0b      	ldr	r5, [pc, #44]	@ (800bab4 <__libc_init_array+0x40>)
 800ba86:	4c0c      	ldr	r4, [pc, #48]	@ (800bab8 <__libc_init_array+0x44>)
 800ba88:	f003 fc02 	bl	800f290 <_init>
 800ba8c:	1b64      	subs	r4, r4, r5
 800ba8e:	10a4      	asrs	r4, r4, #2
 800ba90:	2600      	movs	r6, #0
 800ba92:	42a6      	cmp	r6, r4
 800ba94:	d105      	bne.n	800baa2 <__libc_init_array+0x2e>
 800ba96:	bd70      	pop	{r4, r5, r6, pc}
 800ba98:	f855 3b04 	ldr.w	r3, [r5], #4
 800ba9c:	4798      	blx	r3
 800ba9e:	3601      	adds	r6, #1
 800baa0:	e7ee      	b.n	800ba80 <__libc_init_array+0xc>
 800baa2:	f855 3b04 	ldr.w	r3, [r5], #4
 800baa6:	4798      	blx	r3
 800baa8:	3601      	adds	r6, #1
 800baaa:	e7f2      	b.n	800ba92 <__libc_init_array+0x1e>
 800baac:	0800ffa0 	.word	0x0800ffa0
 800bab0:	0800ffa0 	.word	0x0800ffa0
 800bab4:	0800ffa0 	.word	0x0800ffa0
 800bab8:	0800ffa4 	.word	0x0800ffa4

0800babc <__retarget_lock_init_recursive>:
 800babc:	4770      	bx	lr

0800babe <__retarget_lock_acquire_recursive>:
 800babe:	4770      	bx	lr

0800bac0 <__retarget_lock_release_recursive>:
 800bac0:	4770      	bx	lr

0800bac2 <memcpy>:
 800bac2:	440a      	add	r2, r1
 800bac4:	4291      	cmp	r1, r2
 800bac6:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 800baca:	d100      	bne.n	800bace <memcpy+0xc>
 800bacc:	4770      	bx	lr
 800bace:	b510      	push	{r4, lr}
 800bad0:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bad4:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bad8:	4291      	cmp	r1, r2
 800bada:	d1f9      	bne.n	800bad0 <memcpy+0xe>
 800badc:	bd10      	pop	{r4, pc}

0800bade <quorem>:
 800bade:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bae2:	6903      	ldr	r3, [r0, #16]
 800bae4:	690c      	ldr	r4, [r1, #16]
 800bae6:	42a3      	cmp	r3, r4
 800bae8:	4607      	mov	r7, r0
 800baea:	db7e      	blt.n	800bbea <quorem+0x10c>
 800baec:	3c01      	subs	r4, #1
 800baee:	f101 0814 	add.w	r8, r1, #20
 800baf2:	00a3      	lsls	r3, r4, #2
 800baf4:	f100 0514 	add.w	r5, r0, #20
 800baf8:	9300      	str	r3, [sp, #0]
 800bafa:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bafe:	9301      	str	r3, [sp, #4]
 800bb00:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800bb04:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bb08:	3301      	adds	r3, #1
 800bb0a:	429a      	cmp	r2, r3
 800bb0c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800bb10:	fbb2 f6f3 	udiv	r6, r2, r3
 800bb14:	d32e      	bcc.n	800bb74 <quorem+0x96>
 800bb16:	f04f 0a00 	mov.w	sl, #0
 800bb1a:	46c4      	mov	ip, r8
 800bb1c:	46ae      	mov	lr, r5
 800bb1e:	46d3      	mov	fp, sl
 800bb20:	f85c 3b04 	ldr.w	r3, [ip], #4
 800bb24:	b298      	uxth	r0, r3
 800bb26:	fb06 a000 	mla	r0, r6, r0, sl
 800bb2a:	0c02      	lsrs	r2, r0, #16
 800bb2c:	0c1b      	lsrs	r3, r3, #16
 800bb2e:	fb06 2303 	mla	r3, r6, r3, r2
 800bb32:	f8de 2000 	ldr.w	r2, [lr]
 800bb36:	b280      	uxth	r0, r0
 800bb38:	b292      	uxth	r2, r2
 800bb3a:	1a12      	subs	r2, r2, r0
 800bb3c:	445a      	add	r2, fp
 800bb3e:	f8de 0000 	ldr.w	r0, [lr]
 800bb42:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800bb46:	b29b      	uxth	r3, r3
 800bb48:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800bb4c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800bb50:	b292      	uxth	r2, r2
 800bb52:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800bb56:	45e1      	cmp	r9, ip
 800bb58:	f84e 2b04 	str.w	r2, [lr], #4
 800bb5c:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800bb60:	d2de      	bcs.n	800bb20 <quorem+0x42>
 800bb62:	9b00      	ldr	r3, [sp, #0]
 800bb64:	58eb      	ldr	r3, [r5, r3]
 800bb66:	b92b      	cbnz	r3, 800bb74 <quorem+0x96>
 800bb68:	9b01      	ldr	r3, [sp, #4]
 800bb6a:	3b04      	subs	r3, #4
 800bb6c:	429d      	cmp	r5, r3
 800bb6e:	461a      	mov	r2, r3
 800bb70:	d32f      	bcc.n	800bbd2 <quorem+0xf4>
 800bb72:	613c      	str	r4, [r7, #16]
 800bb74:	4638      	mov	r0, r7
 800bb76:	f001 f979 	bl	800ce6c <__mcmp>
 800bb7a:	2800      	cmp	r0, #0
 800bb7c:	db25      	blt.n	800bbca <quorem+0xec>
 800bb7e:	4629      	mov	r1, r5
 800bb80:	2000      	movs	r0, #0
 800bb82:	f858 2b04 	ldr.w	r2, [r8], #4
 800bb86:	f8d1 c000 	ldr.w	ip, [r1]
 800bb8a:	fa1f fe82 	uxth.w	lr, r2
 800bb8e:	fa1f f38c 	uxth.w	r3, ip
 800bb92:	eba3 030e 	sub.w	r3, r3, lr
 800bb96:	4403      	add	r3, r0
 800bb98:	0c12      	lsrs	r2, r2, #16
 800bb9a:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800bb9e:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800bba2:	b29b      	uxth	r3, r3
 800bba4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bba8:	45c1      	cmp	r9, r8
 800bbaa:	f841 3b04 	str.w	r3, [r1], #4
 800bbae:	ea4f 4022 	mov.w	r0, r2, asr #16
 800bbb2:	d2e6      	bcs.n	800bb82 <quorem+0xa4>
 800bbb4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bbb8:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bbbc:	b922      	cbnz	r2, 800bbc8 <quorem+0xea>
 800bbbe:	3b04      	subs	r3, #4
 800bbc0:	429d      	cmp	r5, r3
 800bbc2:	461a      	mov	r2, r3
 800bbc4:	d30b      	bcc.n	800bbde <quorem+0x100>
 800bbc6:	613c      	str	r4, [r7, #16]
 800bbc8:	3601      	adds	r6, #1
 800bbca:	4630      	mov	r0, r6
 800bbcc:	b003      	add	sp, #12
 800bbce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bbd2:	6812      	ldr	r2, [r2, #0]
 800bbd4:	3b04      	subs	r3, #4
 800bbd6:	2a00      	cmp	r2, #0
 800bbd8:	d1cb      	bne.n	800bb72 <quorem+0x94>
 800bbda:	3c01      	subs	r4, #1
 800bbdc:	e7c6      	b.n	800bb6c <quorem+0x8e>
 800bbde:	6812      	ldr	r2, [r2, #0]
 800bbe0:	3b04      	subs	r3, #4
 800bbe2:	2a00      	cmp	r2, #0
 800bbe4:	d1ef      	bne.n	800bbc6 <quorem+0xe8>
 800bbe6:	3c01      	subs	r4, #1
 800bbe8:	e7ea      	b.n	800bbc0 <quorem+0xe2>
 800bbea:	2000      	movs	r0, #0
 800bbec:	e7ee      	b.n	800bbcc <quorem+0xee>
	...

0800bbf0 <_dtoa_r>:
 800bbf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbf4:	69c7      	ldr	r7, [r0, #28]
 800bbf6:	b099      	sub	sp, #100	@ 0x64
 800bbf8:	ed8d 0b02 	vstr	d0, [sp, #8]
 800bbfc:	ec55 4b10 	vmov	r4, r5, d0
 800bc00:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 800bc02:	9109      	str	r1, [sp, #36]	@ 0x24
 800bc04:	4683      	mov	fp, r0
 800bc06:	920e      	str	r2, [sp, #56]	@ 0x38
 800bc08:	9313      	str	r3, [sp, #76]	@ 0x4c
 800bc0a:	b97f      	cbnz	r7, 800bc2c <_dtoa_r+0x3c>
 800bc0c:	2010      	movs	r0, #16
 800bc0e:	f000 fdfd 	bl	800c80c <malloc>
 800bc12:	4602      	mov	r2, r0
 800bc14:	f8cb 001c 	str.w	r0, [fp, #28]
 800bc18:	b920      	cbnz	r0, 800bc24 <_dtoa_r+0x34>
 800bc1a:	4ba7      	ldr	r3, [pc, #668]	@ (800beb8 <_dtoa_r+0x2c8>)
 800bc1c:	21ef      	movs	r1, #239	@ 0xef
 800bc1e:	48a7      	ldr	r0, [pc, #668]	@ (800bebc <_dtoa_r+0x2cc>)
 800bc20:	f001 fe20 	bl	800d864 <__assert_func>
 800bc24:	e9c0 7701 	strd	r7, r7, [r0, #4]
 800bc28:	6007      	str	r7, [r0, #0]
 800bc2a:	60c7      	str	r7, [r0, #12]
 800bc2c:	f8db 301c 	ldr.w	r3, [fp, #28]
 800bc30:	6819      	ldr	r1, [r3, #0]
 800bc32:	b159      	cbz	r1, 800bc4c <_dtoa_r+0x5c>
 800bc34:	685a      	ldr	r2, [r3, #4]
 800bc36:	604a      	str	r2, [r1, #4]
 800bc38:	2301      	movs	r3, #1
 800bc3a:	4093      	lsls	r3, r2
 800bc3c:	608b      	str	r3, [r1, #8]
 800bc3e:	4658      	mov	r0, fp
 800bc40:	f000 feda 	bl	800c9f8 <_Bfree>
 800bc44:	f8db 301c 	ldr.w	r3, [fp, #28]
 800bc48:	2200      	movs	r2, #0
 800bc4a:	601a      	str	r2, [r3, #0]
 800bc4c:	1e2b      	subs	r3, r5, #0
 800bc4e:	bfb9      	ittee	lt
 800bc50:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800bc54:	9303      	strlt	r3, [sp, #12]
 800bc56:	2300      	movge	r3, #0
 800bc58:	6033      	strge	r3, [r6, #0]
 800bc5a:	9f03      	ldr	r7, [sp, #12]
 800bc5c:	4b98      	ldr	r3, [pc, #608]	@ (800bec0 <_dtoa_r+0x2d0>)
 800bc5e:	bfbc      	itt	lt
 800bc60:	2201      	movlt	r2, #1
 800bc62:	6032      	strlt	r2, [r6, #0]
 800bc64:	43bb      	bics	r3, r7
 800bc66:	d112      	bne.n	800bc8e <_dtoa_r+0x9e>
 800bc68:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800bc6a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800bc6e:	6013      	str	r3, [r2, #0]
 800bc70:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800bc74:	4323      	orrs	r3, r4
 800bc76:	f000 854d 	beq.w	800c714 <_dtoa_r+0xb24>
 800bc7a:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800bc7c:	f8df a254 	ldr.w	sl, [pc, #596]	@ 800bed4 <_dtoa_r+0x2e4>
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	f000 854f 	beq.w	800c724 <_dtoa_r+0xb34>
 800bc86:	f10a 0303 	add.w	r3, sl, #3
 800bc8a:	f000 bd49 	b.w	800c720 <_dtoa_r+0xb30>
 800bc8e:	ed9d 7b02 	vldr	d7, [sp, #8]
 800bc92:	2200      	movs	r2, #0
 800bc94:	ec51 0b17 	vmov	r0, r1, d7
 800bc98:	2300      	movs	r3, #0
 800bc9a:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 800bc9e:	f7f4 ff13 	bl	8000ac8 <__aeabi_dcmpeq>
 800bca2:	4680      	mov	r8, r0
 800bca4:	b158      	cbz	r0, 800bcbe <_dtoa_r+0xce>
 800bca6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 800bca8:	2301      	movs	r3, #1
 800bcaa:	6013      	str	r3, [r2, #0]
 800bcac:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800bcae:	b113      	cbz	r3, 800bcb6 <_dtoa_r+0xc6>
 800bcb0:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800bcb2:	4b84      	ldr	r3, [pc, #528]	@ (800bec4 <_dtoa_r+0x2d4>)
 800bcb4:	6013      	str	r3, [r2, #0]
 800bcb6:	f8df a220 	ldr.w	sl, [pc, #544]	@ 800bed8 <_dtoa_r+0x2e8>
 800bcba:	f000 bd33 	b.w	800c724 <_dtoa_r+0xb34>
 800bcbe:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800bcc2:	aa16      	add	r2, sp, #88	@ 0x58
 800bcc4:	a917      	add	r1, sp, #92	@ 0x5c
 800bcc6:	4658      	mov	r0, fp
 800bcc8:	f001 f980 	bl	800cfcc <__d2b>
 800bccc:	f3c7 560a 	ubfx	r6, r7, #20, #11
 800bcd0:	4681      	mov	r9, r0
 800bcd2:	2e00      	cmp	r6, #0
 800bcd4:	d077      	beq.n	800bdc6 <_dtoa_r+0x1d6>
 800bcd6:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800bcd8:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800bcdc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bce0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bce4:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 800bce8:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800bcec:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 800bcf0:	4619      	mov	r1, r3
 800bcf2:	2200      	movs	r2, #0
 800bcf4:	4b74      	ldr	r3, [pc, #464]	@ (800bec8 <_dtoa_r+0x2d8>)
 800bcf6:	f7f4 fac7 	bl	8000288 <__aeabi_dsub>
 800bcfa:	a369      	add	r3, pc, #420	@ (adr r3, 800bea0 <_dtoa_r+0x2b0>)
 800bcfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd00:	f7f4 fc7a 	bl	80005f8 <__aeabi_dmul>
 800bd04:	a368      	add	r3, pc, #416	@ (adr r3, 800bea8 <_dtoa_r+0x2b8>)
 800bd06:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd0a:	f7f4 fabf 	bl	800028c <__adddf3>
 800bd0e:	4604      	mov	r4, r0
 800bd10:	4630      	mov	r0, r6
 800bd12:	460d      	mov	r5, r1
 800bd14:	f7f4 fc06 	bl	8000524 <__aeabi_i2d>
 800bd18:	a365      	add	r3, pc, #404	@ (adr r3, 800beb0 <_dtoa_r+0x2c0>)
 800bd1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd1e:	f7f4 fc6b 	bl	80005f8 <__aeabi_dmul>
 800bd22:	4602      	mov	r2, r0
 800bd24:	460b      	mov	r3, r1
 800bd26:	4620      	mov	r0, r4
 800bd28:	4629      	mov	r1, r5
 800bd2a:	f7f4 faaf 	bl	800028c <__adddf3>
 800bd2e:	4604      	mov	r4, r0
 800bd30:	460d      	mov	r5, r1
 800bd32:	f7f4 ff11 	bl	8000b58 <__aeabi_d2iz>
 800bd36:	2200      	movs	r2, #0
 800bd38:	4607      	mov	r7, r0
 800bd3a:	2300      	movs	r3, #0
 800bd3c:	4620      	mov	r0, r4
 800bd3e:	4629      	mov	r1, r5
 800bd40:	f7f4 fecc 	bl	8000adc <__aeabi_dcmplt>
 800bd44:	b140      	cbz	r0, 800bd58 <_dtoa_r+0x168>
 800bd46:	4638      	mov	r0, r7
 800bd48:	f7f4 fbec 	bl	8000524 <__aeabi_i2d>
 800bd4c:	4622      	mov	r2, r4
 800bd4e:	462b      	mov	r3, r5
 800bd50:	f7f4 feba 	bl	8000ac8 <__aeabi_dcmpeq>
 800bd54:	b900      	cbnz	r0, 800bd58 <_dtoa_r+0x168>
 800bd56:	3f01      	subs	r7, #1
 800bd58:	2f16      	cmp	r7, #22
 800bd5a:	d851      	bhi.n	800be00 <_dtoa_r+0x210>
 800bd5c:	4b5b      	ldr	r3, [pc, #364]	@ (800becc <_dtoa_r+0x2dc>)
 800bd5e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800bd62:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd66:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bd6a:	f7f4 feb7 	bl	8000adc <__aeabi_dcmplt>
 800bd6e:	2800      	cmp	r0, #0
 800bd70:	d048      	beq.n	800be04 <_dtoa_r+0x214>
 800bd72:	3f01      	subs	r7, #1
 800bd74:	2300      	movs	r3, #0
 800bd76:	9312      	str	r3, [sp, #72]	@ 0x48
 800bd78:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800bd7a:	1b9b      	subs	r3, r3, r6
 800bd7c:	1e5a      	subs	r2, r3, #1
 800bd7e:	bf44      	itt	mi
 800bd80:	f1c3 0801 	rsbmi	r8, r3, #1
 800bd84:	2300      	movmi	r3, #0
 800bd86:	9208      	str	r2, [sp, #32]
 800bd88:	bf54      	ite	pl
 800bd8a:	f04f 0800 	movpl.w	r8, #0
 800bd8e:	9308      	strmi	r3, [sp, #32]
 800bd90:	2f00      	cmp	r7, #0
 800bd92:	db39      	blt.n	800be08 <_dtoa_r+0x218>
 800bd94:	9b08      	ldr	r3, [sp, #32]
 800bd96:	970f      	str	r7, [sp, #60]	@ 0x3c
 800bd98:	443b      	add	r3, r7
 800bd9a:	9308      	str	r3, [sp, #32]
 800bd9c:	2300      	movs	r3, #0
 800bd9e:	930a      	str	r3, [sp, #40]	@ 0x28
 800bda0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bda2:	2b09      	cmp	r3, #9
 800bda4:	d864      	bhi.n	800be70 <_dtoa_r+0x280>
 800bda6:	2b05      	cmp	r3, #5
 800bda8:	bfc4      	itt	gt
 800bdaa:	3b04      	subgt	r3, #4
 800bdac:	9309      	strgt	r3, [sp, #36]	@ 0x24
 800bdae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800bdb0:	f1a3 0302 	sub.w	r3, r3, #2
 800bdb4:	bfcc      	ite	gt
 800bdb6:	2400      	movgt	r4, #0
 800bdb8:	2401      	movle	r4, #1
 800bdba:	2b03      	cmp	r3, #3
 800bdbc:	d863      	bhi.n	800be86 <_dtoa_r+0x296>
 800bdbe:	e8df f003 	tbb	[pc, r3]
 800bdc2:	372a      	.short	0x372a
 800bdc4:	5535      	.short	0x5535
 800bdc6:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800bdca:	441e      	add	r6, r3
 800bdcc:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800bdd0:	2b20      	cmp	r3, #32
 800bdd2:	bfc1      	itttt	gt
 800bdd4:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800bdd8:	409f      	lslgt	r7, r3
 800bdda:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800bdde:	fa24 f303 	lsrgt.w	r3, r4, r3
 800bde2:	bfd6      	itet	le
 800bde4:	f1c3 0320 	rsble	r3, r3, #32
 800bde8:	ea47 0003 	orrgt.w	r0, r7, r3
 800bdec:	fa04 f003 	lslle.w	r0, r4, r3
 800bdf0:	f7f4 fb88 	bl	8000504 <__aeabi_ui2d>
 800bdf4:	2201      	movs	r2, #1
 800bdf6:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800bdfa:	3e01      	subs	r6, #1
 800bdfc:	9214      	str	r2, [sp, #80]	@ 0x50
 800bdfe:	e777      	b.n	800bcf0 <_dtoa_r+0x100>
 800be00:	2301      	movs	r3, #1
 800be02:	e7b8      	b.n	800bd76 <_dtoa_r+0x186>
 800be04:	9012      	str	r0, [sp, #72]	@ 0x48
 800be06:	e7b7      	b.n	800bd78 <_dtoa_r+0x188>
 800be08:	427b      	negs	r3, r7
 800be0a:	930a      	str	r3, [sp, #40]	@ 0x28
 800be0c:	2300      	movs	r3, #0
 800be0e:	eba8 0807 	sub.w	r8, r8, r7
 800be12:	930f      	str	r3, [sp, #60]	@ 0x3c
 800be14:	e7c4      	b.n	800bda0 <_dtoa_r+0x1b0>
 800be16:	2300      	movs	r3, #0
 800be18:	930b      	str	r3, [sp, #44]	@ 0x2c
 800be1a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800be1c:	2b00      	cmp	r3, #0
 800be1e:	dc35      	bgt.n	800be8c <_dtoa_r+0x29c>
 800be20:	2301      	movs	r3, #1
 800be22:	9300      	str	r3, [sp, #0]
 800be24:	9307      	str	r3, [sp, #28]
 800be26:	461a      	mov	r2, r3
 800be28:	920e      	str	r2, [sp, #56]	@ 0x38
 800be2a:	e00b      	b.n	800be44 <_dtoa_r+0x254>
 800be2c:	2301      	movs	r3, #1
 800be2e:	e7f3      	b.n	800be18 <_dtoa_r+0x228>
 800be30:	2300      	movs	r3, #0
 800be32:	930b      	str	r3, [sp, #44]	@ 0x2c
 800be34:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800be36:	18fb      	adds	r3, r7, r3
 800be38:	9300      	str	r3, [sp, #0]
 800be3a:	3301      	adds	r3, #1
 800be3c:	2b01      	cmp	r3, #1
 800be3e:	9307      	str	r3, [sp, #28]
 800be40:	bfb8      	it	lt
 800be42:	2301      	movlt	r3, #1
 800be44:	f8db 001c 	ldr.w	r0, [fp, #28]
 800be48:	2100      	movs	r1, #0
 800be4a:	2204      	movs	r2, #4
 800be4c:	f102 0514 	add.w	r5, r2, #20
 800be50:	429d      	cmp	r5, r3
 800be52:	d91f      	bls.n	800be94 <_dtoa_r+0x2a4>
 800be54:	6041      	str	r1, [r0, #4]
 800be56:	4658      	mov	r0, fp
 800be58:	f000 fd8e 	bl	800c978 <_Balloc>
 800be5c:	4682      	mov	sl, r0
 800be5e:	2800      	cmp	r0, #0
 800be60:	d13c      	bne.n	800bedc <_dtoa_r+0x2ec>
 800be62:	4b1b      	ldr	r3, [pc, #108]	@ (800bed0 <_dtoa_r+0x2e0>)
 800be64:	4602      	mov	r2, r0
 800be66:	f240 11af 	movw	r1, #431	@ 0x1af
 800be6a:	e6d8      	b.n	800bc1e <_dtoa_r+0x2e>
 800be6c:	2301      	movs	r3, #1
 800be6e:	e7e0      	b.n	800be32 <_dtoa_r+0x242>
 800be70:	2401      	movs	r4, #1
 800be72:	2300      	movs	r3, #0
 800be74:	9309      	str	r3, [sp, #36]	@ 0x24
 800be76:	940b      	str	r4, [sp, #44]	@ 0x2c
 800be78:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800be7c:	9300      	str	r3, [sp, #0]
 800be7e:	9307      	str	r3, [sp, #28]
 800be80:	2200      	movs	r2, #0
 800be82:	2312      	movs	r3, #18
 800be84:	e7d0      	b.n	800be28 <_dtoa_r+0x238>
 800be86:	2301      	movs	r3, #1
 800be88:	930b      	str	r3, [sp, #44]	@ 0x2c
 800be8a:	e7f5      	b.n	800be78 <_dtoa_r+0x288>
 800be8c:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800be8e:	9300      	str	r3, [sp, #0]
 800be90:	9307      	str	r3, [sp, #28]
 800be92:	e7d7      	b.n	800be44 <_dtoa_r+0x254>
 800be94:	3101      	adds	r1, #1
 800be96:	0052      	lsls	r2, r2, #1
 800be98:	e7d8      	b.n	800be4c <_dtoa_r+0x25c>
 800be9a:	bf00      	nop
 800be9c:	f3af 8000 	nop.w
 800bea0:	636f4361 	.word	0x636f4361
 800bea4:	3fd287a7 	.word	0x3fd287a7
 800bea8:	8b60c8b3 	.word	0x8b60c8b3
 800beac:	3fc68a28 	.word	0x3fc68a28
 800beb0:	509f79fb 	.word	0x509f79fb
 800beb4:	3fd34413 	.word	0x3fd34413
 800beb8:	0800fbc5 	.word	0x0800fbc5
 800bebc:	0800fbdc 	.word	0x0800fbdc
 800bec0:	7ff00000 	.word	0x7ff00000
 800bec4:	0800fb95 	.word	0x0800fb95
 800bec8:	3ff80000 	.word	0x3ff80000
 800becc:	0800fcd8 	.word	0x0800fcd8
 800bed0:	0800fc34 	.word	0x0800fc34
 800bed4:	0800fbc1 	.word	0x0800fbc1
 800bed8:	0800fb94 	.word	0x0800fb94
 800bedc:	f8db 301c 	ldr.w	r3, [fp, #28]
 800bee0:	6018      	str	r0, [r3, #0]
 800bee2:	9b07      	ldr	r3, [sp, #28]
 800bee4:	2b0e      	cmp	r3, #14
 800bee6:	f200 80a4 	bhi.w	800c032 <_dtoa_r+0x442>
 800beea:	2c00      	cmp	r4, #0
 800beec:	f000 80a1 	beq.w	800c032 <_dtoa_r+0x442>
 800bef0:	2f00      	cmp	r7, #0
 800bef2:	dd33      	ble.n	800bf5c <_dtoa_r+0x36c>
 800bef4:	4bad      	ldr	r3, [pc, #692]	@ (800c1ac <_dtoa_r+0x5bc>)
 800bef6:	f007 020f 	and.w	r2, r7, #15
 800befa:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800befe:	ed93 7b00 	vldr	d7, [r3]
 800bf02:	05f8      	lsls	r0, r7, #23
 800bf04:	ed8d 7b04 	vstr	d7, [sp, #16]
 800bf08:	ea4f 1427 	mov.w	r4, r7, asr #4
 800bf0c:	d516      	bpl.n	800bf3c <_dtoa_r+0x34c>
 800bf0e:	4ba8      	ldr	r3, [pc, #672]	@ (800c1b0 <_dtoa_r+0x5c0>)
 800bf10:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bf14:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800bf18:	f7f4 fc98 	bl	800084c <__aeabi_ddiv>
 800bf1c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bf20:	f004 040f 	and.w	r4, r4, #15
 800bf24:	2603      	movs	r6, #3
 800bf26:	4da2      	ldr	r5, [pc, #648]	@ (800c1b0 <_dtoa_r+0x5c0>)
 800bf28:	b954      	cbnz	r4, 800bf40 <_dtoa_r+0x350>
 800bf2a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800bf2e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bf32:	f7f4 fc8b 	bl	800084c <__aeabi_ddiv>
 800bf36:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bf3a:	e028      	b.n	800bf8e <_dtoa_r+0x39e>
 800bf3c:	2602      	movs	r6, #2
 800bf3e:	e7f2      	b.n	800bf26 <_dtoa_r+0x336>
 800bf40:	07e1      	lsls	r1, r4, #31
 800bf42:	d508      	bpl.n	800bf56 <_dtoa_r+0x366>
 800bf44:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800bf48:	e9d5 2300 	ldrd	r2, r3, [r5]
 800bf4c:	f7f4 fb54 	bl	80005f8 <__aeabi_dmul>
 800bf50:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800bf54:	3601      	adds	r6, #1
 800bf56:	1064      	asrs	r4, r4, #1
 800bf58:	3508      	adds	r5, #8
 800bf5a:	e7e5      	b.n	800bf28 <_dtoa_r+0x338>
 800bf5c:	f000 80d2 	beq.w	800c104 <_dtoa_r+0x514>
 800bf60:	427c      	negs	r4, r7
 800bf62:	4b92      	ldr	r3, [pc, #584]	@ (800c1ac <_dtoa_r+0x5bc>)
 800bf64:	4d92      	ldr	r5, [pc, #584]	@ (800c1b0 <_dtoa_r+0x5c0>)
 800bf66:	f004 020f 	and.w	r2, r4, #15
 800bf6a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bf6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf72:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800bf76:	f7f4 fb3f 	bl	80005f8 <__aeabi_dmul>
 800bf7a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bf7e:	1124      	asrs	r4, r4, #4
 800bf80:	2300      	movs	r3, #0
 800bf82:	2602      	movs	r6, #2
 800bf84:	2c00      	cmp	r4, #0
 800bf86:	f040 80b2 	bne.w	800c0ee <_dtoa_r+0x4fe>
 800bf8a:	2b00      	cmp	r3, #0
 800bf8c:	d1d3      	bne.n	800bf36 <_dtoa_r+0x346>
 800bf8e:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800bf90:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800bf94:	2b00      	cmp	r3, #0
 800bf96:	f000 80b7 	beq.w	800c108 <_dtoa_r+0x518>
 800bf9a:	4b86      	ldr	r3, [pc, #536]	@ (800c1b4 <_dtoa_r+0x5c4>)
 800bf9c:	2200      	movs	r2, #0
 800bf9e:	4620      	mov	r0, r4
 800bfa0:	4629      	mov	r1, r5
 800bfa2:	f7f4 fd9b 	bl	8000adc <__aeabi_dcmplt>
 800bfa6:	2800      	cmp	r0, #0
 800bfa8:	f000 80ae 	beq.w	800c108 <_dtoa_r+0x518>
 800bfac:	9b07      	ldr	r3, [sp, #28]
 800bfae:	2b00      	cmp	r3, #0
 800bfb0:	f000 80aa 	beq.w	800c108 <_dtoa_r+0x518>
 800bfb4:	9b00      	ldr	r3, [sp, #0]
 800bfb6:	2b00      	cmp	r3, #0
 800bfb8:	dd37      	ble.n	800c02a <_dtoa_r+0x43a>
 800bfba:	1e7b      	subs	r3, r7, #1
 800bfbc:	9304      	str	r3, [sp, #16]
 800bfbe:	4620      	mov	r0, r4
 800bfc0:	4b7d      	ldr	r3, [pc, #500]	@ (800c1b8 <_dtoa_r+0x5c8>)
 800bfc2:	2200      	movs	r2, #0
 800bfc4:	4629      	mov	r1, r5
 800bfc6:	f7f4 fb17 	bl	80005f8 <__aeabi_dmul>
 800bfca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800bfce:	9c00      	ldr	r4, [sp, #0]
 800bfd0:	3601      	adds	r6, #1
 800bfd2:	4630      	mov	r0, r6
 800bfd4:	f7f4 faa6 	bl	8000524 <__aeabi_i2d>
 800bfd8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800bfdc:	f7f4 fb0c 	bl	80005f8 <__aeabi_dmul>
 800bfe0:	4b76      	ldr	r3, [pc, #472]	@ (800c1bc <_dtoa_r+0x5cc>)
 800bfe2:	2200      	movs	r2, #0
 800bfe4:	f7f4 f952 	bl	800028c <__adddf3>
 800bfe8:	4605      	mov	r5, r0
 800bfea:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 800bfee:	2c00      	cmp	r4, #0
 800bff0:	f040 808d 	bne.w	800c10e <_dtoa_r+0x51e>
 800bff4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800bff8:	4b71      	ldr	r3, [pc, #452]	@ (800c1c0 <_dtoa_r+0x5d0>)
 800bffa:	2200      	movs	r2, #0
 800bffc:	f7f4 f944 	bl	8000288 <__aeabi_dsub>
 800c000:	4602      	mov	r2, r0
 800c002:	460b      	mov	r3, r1
 800c004:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c008:	462a      	mov	r2, r5
 800c00a:	4633      	mov	r3, r6
 800c00c:	f7f4 fd84 	bl	8000b18 <__aeabi_dcmpgt>
 800c010:	2800      	cmp	r0, #0
 800c012:	f040 828b 	bne.w	800c52c <_dtoa_r+0x93c>
 800c016:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c01a:	462a      	mov	r2, r5
 800c01c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 800c020:	f7f4 fd5c 	bl	8000adc <__aeabi_dcmplt>
 800c024:	2800      	cmp	r0, #0
 800c026:	f040 8128 	bne.w	800c27a <_dtoa_r+0x68a>
 800c02a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 800c02e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 800c032:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800c034:	2b00      	cmp	r3, #0
 800c036:	f2c0 815a 	blt.w	800c2ee <_dtoa_r+0x6fe>
 800c03a:	2f0e      	cmp	r7, #14
 800c03c:	f300 8157 	bgt.w	800c2ee <_dtoa_r+0x6fe>
 800c040:	4b5a      	ldr	r3, [pc, #360]	@ (800c1ac <_dtoa_r+0x5bc>)
 800c042:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800c046:	ed93 7b00 	vldr	d7, [r3]
 800c04a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c04c:	2b00      	cmp	r3, #0
 800c04e:	ed8d 7b00 	vstr	d7, [sp]
 800c052:	da03      	bge.n	800c05c <_dtoa_r+0x46c>
 800c054:	9b07      	ldr	r3, [sp, #28]
 800c056:	2b00      	cmp	r3, #0
 800c058:	f340 8101 	ble.w	800c25e <_dtoa_r+0x66e>
 800c05c:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 800c060:	4656      	mov	r6, sl
 800c062:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c066:	4620      	mov	r0, r4
 800c068:	4629      	mov	r1, r5
 800c06a:	f7f4 fbef 	bl	800084c <__aeabi_ddiv>
 800c06e:	f7f4 fd73 	bl	8000b58 <__aeabi_d2iz>
 800c072:	4680      	mov	r8, r0
 800c074:	f7f4 fa56 	bl	8000524 <__aeabi_i2d>
 800c078:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c07c:	f7f4 fabc 	bl	80005f8 <__aeabi_dmul>
 800c080:	4602      	mov	r2, r0
 800c082:	460b      	mov	r3, r1
 800c084:	4620      	mov	r0, r4
 800c086:	4629      	mov	r1, r5
 800c088:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800c08c:	f7f4 f8fc 	bl	8000288 <__aeabi_dsub>
 800c090:	f806 4b01 	strb.w	r4, [r6], #1
 800c094:	9d07      	ldr	r5, [sp, #28]
 800c096:	eba6 040a 	sub.w	r4, r6, sl
 800c09a:	42a5      	cmp	r5, r4
 800c09c:	4602      	mov	r2, r0
 800c09e:	460b      	mov	r3, r1
 800c0a0:	f040 8117 	bne.w	800c2d2 <_dtoa_r+0x6e2>
 800c0a4:	f7f4 f8f2 	bl	800028c <__adddf3>
 800c0a8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c0ac:	4604      	mov	r4, r0
 800c0ae:	460d      	mov	r5, r1
 800c0b0:	f7f4 fd32 	bl	8000b18 <__aeabi_dcmpgt>
 800c0b4:	2800      	cmp	r0, #0
 800c0b6:	f040 80f9 	bne.w	800c2ac <_dtoa_r+0x6bc>
 800c0ba:	e9dd 2300 	ldrd	r2, r3, [sp]
 800c0be:	4620      	mov	r0, r4
 800c0c0:	4629      	mov	r1, r5
 800c0c2:	f7f4 fd01 	bl	8000ac8 <__aeabi_dcmpeq>
 800c0c6:	b118      	cbz	r0, 800c0d0 <_dtoa_r+0x4e0>
 800c0c8:	f018 0f01 	tst.w	r8, #1
 800c0cc:	f040 80ee 	bne.w	800c2ac <_dtoa_r+0x6bc>
 800c0d0:	4649      	mov	r1, r9
 800c0d2:	4658      	mov	r0, fp
 800c0d4:	f000 fc90 	bl	800c9f8 <_Bfree>
 800c0d8:	2300      	movs	r3, #0
 800c0da:	7033      	strb	r3, [r6, #0]
 800c0dc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800c0de:	3701      	adds	r7, #1
 800c0e0:	601f      	str	r7, [r3, #0]
 800c0e2:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c0e4:	2b00      	cmp	r3, #0
 800c0e6:	f000 831d 	beq.w	800c724 <_dtoa_r+0xb34>
 800c0ea:	601e      	str	r6, [r3, #0]
 800c0ec:	e31a      	b.n	800c724 <_dtoa_r+0xb34>
 800c0ee:	07e2      	lsls	r2, r4, #31
 800c0f0:	d505      	bpl.n	800c0fe <_dtoa_r+0x50e>
 800c0f2:	e9d5 2300 	ldrd	r2, r3, [r5]
 800c0f6:	f7f4 fa7f 	bl	80005f8 <__aeabi_dmul>
 800c0fa:	3601      	adds	r6, #1
 800c0fc:	2301      	movs	r3, #1
 800c0fe:	1064      	asrs	r4, r4, #1
 800c100:	3508      	adds	r5, #8
 800c102:	e73f      	b.n	800bf84 <_dtoa_r+0x394>
 800c104:	2602      	movs	r6, #2
 800c106:	e742      	b.n	800bf8e <_dtoa_r+0x39e>
 800c108:	9c07      	ldr	r4, [sp, #28]
 800c10a:	9704      	str	r7, [sp, #16]
 800c10c:	e761      	b.n	800bfd2 <_dtoa_r+0x3e2>
 800c10e:	4b27      	ldr	r3, [pc, #156]	@ (800c1ac <_dtoa_r+0x5bc>)
 800c110:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 800c112:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800c116:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c11a:	4454      	add	r4, sl
 800c11c:	2900      	cmp	r1, #0
 800c11e:	d053      	beq.n	800c1c8 <_dtoa_r+0x5d8>
 800c120:	4928      	ldr	r1, [pc, #160]	@ (800c1c4 <_dtoa_r+0x5d4>)
 800c122:	2000      	movs	r0, #0
 800c124:	f7f4 fb92 	bl	800084c <__aeabi_ddiv>
 800c128:	4633      	mov	r3, r6
 800c12a:	462a      	mov	r2, r5
 800c12c:	f7f4 f8ac 	bl	8000288 <__aeabi_dsub>
 800c130:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c134:	4656      	mov	r6, sl
 800c136:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c13a:	f7f4 fd0d 	bl	8000b58 <__aeabi_d2iz>
 800c13e:	4605      	mov	r5, r0
 800c140:	f7f4 f9f0 	bl	8000524 <__aeabi_i2d>
 800c144:	4602      	mov	r2, r0
 800c146:	460b      	mov	r3, r1
 800c148:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c14c:	f7f4 f89c 	bl	8000288 <__aeabi_dsub>
 800c150:	3530      	adds	r5, #48	@ 0x30
 800c152:	4602      	mov	r2, r0
 800c154:	460b      	mov	r3, r1
 800c156:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c15a:	f806 5b01 	strb.w	r5, [r6], #1
 800c15e:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c162:	f7f4 fcbb 	bl	8000adc <__aeabi_dcmplt>
 800c166:	2800      	cmp	r0, #0
 800c168:	d171      	bne.n	800c24e <_dtoa_r+0x65e>
 800c16a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c16e:	4911      	ldr	r1, [pc, #68]	@ (800c1b4 <_dtoa_r+0x5c4>)
 800c170:	2000      	movs	r0, #0
 800c172:	f7f4 f889 	bl	8000288 <__aeabi_dsub>
 800c176:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c17a:	f7f4 fcaf 	bl	8000adc <__aeabi_dcmplt>
 800c17e:	2800      	cmp	r0, #0
 800c180:	f040 8095 	bne.w	800c2ae <_dtoa_r+0x6be>
 800c184:	42a6      	cmp	r6, r4
 800c186:	f43f af50 	beq.w	800c02a <_dtoa_r+0x43a>
 800c18a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800c18e:	4b0a      	ldr	r3, [pc, #40]	@ (800c1b8 <_dtoa_r+0x5c8>)
 800c190:	2200      	movs	r2, #0
 800c192:	f7f4 fa31 	bl	80005f8 <__aeabi_dmul>
 800c196:	4b08      	ldr	r3, [pc, #32]	@ (800c1b8 <_dtoa_r+0x5c8>)
 800c198:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c19c:	2200      	movs	r2, #0
 800c19e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c1a2:	f7f4 fa29 	bl	80005f8 <__aeabi_dmul>
 800c1a6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c1aa:	e7c4      	b.n	800c136 <_dtoa_r+0x546>
 800c1ac:	0800fcd8 	.word	0x0800fcd8
 800c1b0:	0800fcb0 	.word	0x0800fcb0
 800c1b4:	3ff00000 	.word	0x3ff00000
 800c1b8:	40240000 	.word	0x40240000
 800c1bc:	401c0000 	.word	0x401c0000
 800c1c0:	40140000 	.word	0x40140000
 800c1c4:	3fe00000 	.word	0x3fe00000
 800c1c8:	4631      	mov	r1, r6
 800c1ca:	4628      	mov	r0, r5
 800c1cc:	f7f4 fa14 	bl	80005f8 <__aeabi_dmul>
 800c1d0:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 800c1d4:	9415      	str	r4, [sp, #84]	@ 0x54
 800c1d6:	4656      	mov	r6, sl
 800c1d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c1dc:	f7f4 fcbc 	bl	8000b58 <__aeabi_d2iz>
 800c1e0:	4605      	mov	r5, r0
 800c1e2:	f7f4 f99f 	bl	8000524 <__aeabi_i2d>
 800c1e6:	4602      	mov	r2, r0
 800c1e8:	460b      	mov	r3, r1
 800c1ea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c1ee:	f7f4 f84b 	bl	8000288 <__aeabi_dsub>
 800c1f2:	3530      	adds	r5, #48	@ 0x30
 800c1f4:	f806 5b01 	strb.w	r5, [r6], #1
 800c1f8:	4602      	mov	r2, r0
 800c1fa:	460b      	mov	r3, r1
 800c1fc:	42a6      	cmp	r6, r4
 800c1fe:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800c202:	f04f 0200 	mov.w	r2, #0
 800c206:	d124      	bne.n	800c252 <_dtoa_r+0x662>
 800c208:	4bac      	ldr	r3, [pc, #688]	@ (800c4bc <_dtoa_r+0x8cc>)
 800c20a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 800c20e:	f7f4 f83d 	bl	800028c <__adddf3>
 800c212:	4602      	mov	r2, r0
 800c214:	460b      	mov	r3, r1
 800c216:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c21a:	f7f4 fc7d 	bl	8000b18 <__aeabi_dcmpgt>
 800c21e:	2800      	cmp	r0, #0
 800c220:	d145      	bne.n	800c2ae <_dtoa_r+0x6be>
 800c222:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 800c226:	49a5      	ldr	r1, [pc, #660]	@ (800c4bc <_dtoa_r+0x8cc>)
 800c228:	2000      	movs	r0, #0
 800c22a:	f7f4 f82d 	bl	8000288 <__aeabi_dsub>
 800c22e:	4602      	mov	r2, r0
 800c230:	460b      	mov	r3, r1
 800c232:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800c236:	f7f4 fc51 	bl	8000adc <__aeabi_dcmplt>
 800c23a:	2800      	cmp	r0, #0
 800c23c:	f43f aef5 	beq.w	800c02a <_dtoa_r+0x43a>
 800c240:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 800c242:	1e73      	subs	r3, r6, #1
 800c244:	9315      	str	r3, [sp, #84]	@ 0x54
 800c246:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800c24a:	2b30      	cmp	r3, #48	@ 0x30
 800c24c:	d0f8      	beq.n	800c240 <_dtoa_r+0x650>
 800c24e:	9f04      	ldr	r7, [sp, #16]
 800c250:	e73e      	b.n	800c0d0 <_dtoa_r+0x4e0>
 800c252:	4b9b      	ldr	r3, [pc, #620]	@ (800c4c0 <_dtoa_r+0x8d0>)
 800c254:	f7f4 f9d0 	bl	80005f8 <__aeabi_dmul>
 800c258:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800c25c:	e7bc      	b.n	800c1d8 <_dtoa_r+0x5e8>
 800c25e:	d10c      	bne.n	800c27a <_dtoa_r+0x68a>
 800c260:	4b98      	ldr	r3, [pc, #608]	@ (800c4c4 <_dtoa_r+0x8d4>)
 800c262:	2200      	movs	r2, #0
 800c264:	e9dd 0100 	ldrd	r0, r1, [sp]
 800c268:	f7f4 f9c6 	bl	80005f8 <__aeabi_dmul>
 800c26c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800c270:	f7f4 fc48 	bl	8000b04 <__aeabi_dcmpge>
 800c274:	2800      	cmp	r0, #0
 800c276:	f000 8157 	beq.w	800c528 <_dtoa_r+0x938>
 800c27a:	2400      	movs	r4, #0
 800c27c:	4625      	mov	r5, r4
 800c27e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800c280:	43db      	mvns	r3, r3
 800c282:	9304      	str	r3, [sp, #16]
 800c284:	4656      	mov	r6, sl
 800c286:	2700      	movs	r7, #0
 800c288:	4621      	mov	r1, r4
 800c28a:	4658      	mov	r0, fp
 800c28c:	f000 fbb4 	bl	800c9f8 <_Bfree>
 800c290:	2d00      	cmp	r5, #0
 800c292:	d0dc      	beq.n	800c24e <_dtoa_r+0x65e>
 800c294:	b12f      	cbz	r7, 800c2a2 <_dtoa_r+0x6b2>
 800c296:	42af      	cmp	r7, r5
 800c298:	d003      	beq.n	800c2a2 <_dtoa_r+0x6b2>
 800c29a:	4639      	mov	r1, r7
 800c29c:	4658      	mov	r0, fp
 800c29e:	f000 fbab 	bl	800c9f8 <_Bfree>
 800c2a2:	4629      	mov	r1, r5
 800c2a4:	4658      	mov	r0, fp
 800c2a6:	f000 fba7 	bl	800c9f8 <_Bfree>
 800c2aa:	e7d0      	b.n	800c24e <_dtoa_r+0x65e>
 800c2ac:	9704      	str	r7, [sp, #16]
 800c2ae:	4633      	mov	r3, r6
 800c2b0:	461e      	mov	r6, r3
 800c2b2:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c2b6:	2a39      	cmp	r2, #57	@ 0x39
 800c2b8:	d107      	bne.n	800c2ca <_dtoa_r+0x6da>
 800c2ba:	459a      	cmp	sl, r3
 800c2bc:	d1f8      	bne.n	800c2b0 <_dtoa_r+0x6c0>
 800c2be:	9a04      	ldr	r2, [sp, #16]
 800c2c0:	3201      	adds	r2, #1
 800c2c2:	9204      	str	r2, [sp, #16]
 800c2c4:	2230      	movs	r2, #48	@ 0x30
 800c2c6:	f88a 2000 	strb.w	r2, [sl]
 800c2ca:	781a      	ldrb	r2, [r3, #0]
 800c2cc:	3201      	adds	r2, #1
 800c2ce:	701a      	strb	r2, [r3, #0]
 800c2d0:	e7bd      	b.n	800c24e <_dtoa_r+0x65e>
 800c2d2:	4b7b      	ldr	r3, [pc, #492]	@ (800c4c0 <_dtoa_r+0x8d0>)
 800c2d4:	2200      	movs	r2, #0
 800c2d6:	f7f4 f98f 	bl	80005f8 <__aeabi_dmul>
 800c2da:	2200      	movs	r2, #0
 800c2dc:	2300      	movs	r3, #0
 800c2de:	4604      	mov	r4, r0
 800c2e0:	460d      	mov	r5, r1
 800c2e2:	f7f4 fbf1 	bl	8000ac8 <__aeabi_dcmpeq>
 800c2e6:	2800      	cmp	r0, #0
 800c2e8:	f43f aebb 	beq.w	800c062 <_dtoa_r+0x472>
 800c2ec:	e6f0      	b.n	800c0d0 <_dtoa_r+0x4e0>
 800c2ee:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800c2f0:	2a00      	cmp	r2, #0
 800c2f2:	f000 80db 	beq.w	800c4ac <_dtoa_r+0x8bc>
 800c2f6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800c2f8:	2a01      	cmp	r2, #1
 800c2fa:	f300 80bf 	bgt.w	800c47c <_dtoa_r+0x88c>
 800c2fe:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 800c300:	2a00      	cmp	r2, #0
 800c302:	f000 80b7 	beq.w	800c474 <_dtoa_r+0x884>
 800c306:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 800c30a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800c30c:	4646      	mov	r6, r8
 800c30e:	9a08      	ldr	r2, [sp, #32]
 800c310:	2101      	movs	r1, #1
 800c312:	441a      	add	r2, r3
 800c314:	4658      	mov	r0, fp
 800c316:	4498      	add	r8, r3
 800c318:	9208      	str	r2, [sp, #32]
 800c31a:	f000 fc21 	bl	800cb60 <__i2b>
 800c31e:	4605      	mov	r5, r0
 800c320:	b15e      	cbz	r6, 800c33a <_dtoa_r+0x74a>
 800c322:	9b08      	ldr	r3, [sp, #32]
 800c324:	2b00      	cmp	r3, #0
 800c326:	dd08      	ble.n	800c33a <_dtoa_r+0x74a>
 800c328:	42b3      	cmp	r3, r6
 800c32a:	9a08      	ldr	r2, [sp, #32]
 800c32c:	bfa8      	it	ge
 800c32e:	4633      	movge	r3, r6
 800c330:	eba8 0803 	sub.w	r8, r8, r3
 800c334:	1af6      	subs	r6, r6, r3
 800c336:	1ad3      	subs	r3, r2, r3
 800c338:	9308      	str	r3, [sp, #32]
 800c33a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c33c:	b1f3      	cbz	r3, 800c37c <_dtoa_r+0x78c>
 800c33e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c340:	2b00      	cmp	r3, #0
 800c342:	f000 80b7 	beq.w	800c4b4 <_dtoa_r+0x8c4>
 800c346:	b18c      	cbz	r4, 800c36c <_dtoa_r+0x77c>
 800c348:	4629      	mov	r1, r5
 800c34a:	4622      	mov	r2, r4
 800c34c:	4658      	mov	r0, fp
 800c34e:	f000 fcc7 	bl	800cce0 <__pow5mult>
 800c352:	464a      	mov	r2, r9
 800c354:	4601      	mov	r1, r0
 800c356:	4605      	mov	r5, r0
 800c358:	4658      	mov	r0, fp
 800c35a:	f000 fc17 	bl	800cb8c <__multiply>
 800c35e:	4649      	mov	r1, r9
 800c360:	9004      	str	r0, [sp, #16]
 800c362:	4658      	mov	r0, fp
 800c364:	f000 fb48 	bl	800c9f8 <_Bfree>
 800c368:	9b04      	ldr	r3, [sp, #16]
 800c36a:	4699      	mov	r9, r3
 800c36c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c36e:	1b1a      	subs	r2, r3, r4
 800c370:	d004      	beq.n	800c37c <_dtoa_r+0x78c>
 800c372:	4649      	mov	r1, r9
 800c374:	4658      	mov	r0, fp
 800c376:	f000 fcb3 	bl	800cce0 <__pow5mult>
 800c37a:	4681      	mov	r9, r0
 800c37c:	2101      	movs	r1, #1
 800c37e:	4658      	mov	r0, fp
 800c380:	f000 fbee 	bl	800cb60 <__i2b>
 800c384:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c386:	4604      	mov	r4, r0
 800c388:	2b00      	cmp	r3, #0
 800c38a:	f000 81cf 	beq.w	800c72c <_dtoa_r+0xb3c>
 800c38e:	461a      	mov	r2, r3
 800c390:	4601      	mov	r1, r0
 800c392:	4658      	mov	r0, fp
 800c394:	f000 fca4 	bl	800cce0 <__pow5mult>
 800c398:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c39a:	2b01      	cmp	r3, #1
 800c39c:	4604      	mov	r4, r0
 800c39e:	f300 8095 	bgt.w	800c4cc <_dtoa_r+0x8dc>
 800c3a2:	9b02      	ldr	r3, [sp, #8]
 800c3a4:	2b00      	cmp	r3, #0
 800c3a6:	f040 8087 	bne.w	800c4b8 <_dtoa_r+0x8c8>
 800c3aa:	9b03      	ldr	r3, [sp, #12]
 800c3ac:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	f040 8089 	bne.w	800c4c8 <_dtoa_r+0x8d8>
 800c3b6:	9b03      	ldr	r3, [sp, #12]
 800c3b8:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 800c3bc:	0d1b      	lsrs	r3, r3, #20
 800c3be:	051b      	lsls	r3, r3, #20
 800c3c0:	b12b      	cbz	r3, 800c3ce <_dtoa_r+0x7de>
 800c3c2:	9b08      	ldr	r3, [sp, #32]
 800c3c4:	3301      	adds	r3, #1
 800c3c6:	9308      	str	r3, [sp, #32]
 800c3c8:	f108 0801 	add.w	r8, r8, #1
 800c3cc:	2301      	movs	r3, #1
 800c3ce:	930a      	str	r3, [sp, #40]	@ 0x28
 800c3d0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c3d2:	2b00      	cmp	r3, #0
 800c3d4:	f000 81b0 	beq.w	800c738 <_dtoa_r+0xb48>
 800c3d8:	6923      	ldr	r3, [r4, #16]
 800c3da:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c3de:	6918      	ldr	r0, [r3, #16]
 800c3e0:	f000 fb72 	bl	800cac8 <__hi0bits>
 800c3e4:	f1c0 0020 	rsb	r0, r0, #32
 800c3e8:	9b08      	ldr	r3, [sp, #32]
 800c3ea:	4418      	add	r0, r3
 800c3ec:	f010 001f 	ands.w	r0, r0, #31
 800c3f0:	d077      	beq.n	800c4e2 <_dtoa_r+0x8f2>
 800c3f2:	f1c0 0320 	rsb	r3, r0, #32
 800c3f6:	2b04      	cmp	r3, #4
 800c3f8:	dd6b      	ble.n	800c4d2 <_dtoa_r+0x8e2>
 800c3fa:	9b08      	ldr	r3, [sp, #32]
 800c3fc:	f1c0 001c 	rsb	r0, r0, #28
 800c400:	4403      	add	r3, r0
 800c402:	4480      	add	r8, r0
 800c404:	4406      	add	r6, r0
 800c406:	9308      	str	r3, [sp, #32]
 800c408:	f1b8 0f00 	cmp.w	r8, #0
 800c40c:	dd05      	ble.n	800c41a <_dtoa_r+0x82a>
 800c40e:	4649      	mov	r1, r9
 800c410:	4642      	mov	r2, r8
 800c412:	4658      	mov	r0, fp
 800c414:	f000 fcbe 	bl	800cd94 <__lshift>
 800c418:	4681      	mov	r9, r0
 800c41a:	9b08      	ldr	r3, [sp, #32]
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	dd05      	ble.n	800c42c <_dtoa_r+0x83c>
 800c420:	4621      	mov	r1, r4
 800c422:	461a      	mov	r2, r3
 800c424:	4658      	mov	r0, fp
 800c426:	f000 fcb5 	bl	800cd94 <__lshift>
 800c42a:	4604      	mov	r4, r0
 800c42c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800c42e:	2b00      	cmp	r3, #0
 800c430:	d059      	beq.n	800c4e6 <_dtoa_r+0x8f6>
 800c432:	4621      	mov	r1, r4
 800c434:	4648      	mov	r0, r9
 800c436:	f000 fd19 	bl	800ce6c <__mcmp>
 800c43a:	2800      	cmp	r0, #0
 800c43c:	da53      	bge.n	800c4e6 <_dtoa_r+0x8f6>
 800c43e:	1e7b      	subs	r3, r7, #1
 800c440:	9304      	str	r3, [sp, #16]
 800c442:	4649      	mov	r1, r9
 800c444:	2300      	movs	r3, #0
 800c446:	220a      	movs	r2, #10
 800c448:	4658      	mov	r0, fp
 800c44a:	f000 faf7 	bl	800ca3c <__multadd>
 800c44e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c450:	4681      	mov	r9, r0
 800c452:	2b00      	cmp	r3, #0
 800c454:	f000 8172 	beq.w	800c73c <_dtoa_r+0xb4c>
 800c458:	2300      	movs	r3, #0
 800c45a:	4629      	mov	r1, r5
 800c45c:	220a      	movs	r2, #10
 800c45e:	4658      	mov	r0, fp
 800c460:	f000 faec 	bl	800ca3c <__multadd>
 800c464:	9b00      	ldr	r3, [sp, #0]
 800c466:	2b00      	cmp	r3, #0
 800c468:	4605      	mov	r5, r0
 800c46a:	dc67      	bgt.n	800c53c <_dtoa_r+0x94c>
 800c46c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c46e:	2b02      	cmp	r3, #2
 800c470:	dc41      	bgt.n	800c4f6 <_dtoa_r+0x906>
 800c472:	e063      	b.n	800c53c <_dtoa_r+0x94c>
 800c474:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 800c476:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800c47a:	e746      	b.n	800c30a <_dtoa_r+0x71a>
 800c47c:	9b07      	ldr	r3, [sp, #28]
 800c47e:	1e5c      	subs	r4, r3, #1
 800c480:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c482:	42a3      	cmp	r3, r4
 800c484:	bfbf      	itttt	lt
 800c486:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 800c488:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 800c48a:	940a      	strlt	r4, [sp, #40]	@ 0x28
 800c48c:	1ae3      	sublt	r3, r4, r3
 800c48e:	bfb4      	ite	lt
 800c490:	18d2      	addlt	r2, r2, r3
 800c492:	1b1c      	subge	r4, r3, r4
 800c494:	9b07      	ldr	r3, [sp, #28]
 800c496:	bfbc      	itt	lt
 800c498:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 800c49a:	2400      	movlt	r4, #0
 800c49c:	2b00      	cmp	r3, #0
 800c49e:	bfb5      	itete	lt
 800c4a0:	eba8 0603 	sublt.w	r6, r8, r3
 800c4a4:	9b07      	ldrge	r3, [sp, #28]
 800c4a6:	2300      	movlt	r3, #0
 800c4a8:	4646      	movge	r6, r8
 800c4aa:	e730      	b.n	800c30e <_dtoa_r+0x71e>
 800c4ac:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 800c4ae:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 800c4b0:	4646      	mov	r6, r8
 800c4b2:	e735      	b.n	800c320 <_dtoa_r+0x730>
 800c4b4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800c4b6:	e75c      	b.n	800c372 <_dtoa_r+0x782>
 800c4b8:	2300      	movs	r3, #0
 800c4ba:	e788      	b.n	800c3ce <_dtoa_r+0x7de>
 800c4bc:	3fe00000 	.word	0x3fe00000
 800c4c0:	40240000 	.word	0x40240000
 800c4c4:	40140000 	.word	0x40140000
 800c4c8:	9b02      	ldr	r3, [sp, #8]
 800c4ca:	e780      	b.n	800c3ce <_dtoa_r+0x7de>
 800c4cc:	2300      	movs	r3, #0
 800c4ce:	930a      	str	r3, [sp, #40]	@ 0x28
 800c4d0:	e782      	b.n	800c3d8 <_dtoa_r+0x7e8>
 800c4d2:	d099      	beq.n	800c408 <_dtoa_r+0x818>
 800c4d4:	9a08      	ldr	r2, [sp, #32]
 800c4d6:	331c      	adds	r3, #28
 800c4d8:	441a      	add	r2, r3
 800c4da:	4498      	add	r8, r3
 800c4dc:	441e      	add	r6, r3
 800c4de:	9208      	str	r2, [sp, #32]
 800c4e0:	e792      	b.n	800c408 <_dtoa_r+0x818>
 800c4e2:	4603      	mov	r3, r0
 800c4e4:	e7f6      	b.n	800c4d4 <_dtoa_r+0x8e4>
 800c4e6:	9b07      	ldr	r3, [sp, #28]
 800c4e8:	9704      	str	r7, [sp, #16]
 800c4ea:	2b00      	cmp	r3, #0
 800c4ec:	dc20      	bgt.n	800c530 <_dtoa_r+0x940>
 800c4ee:	9300      	str	r3, [sp, #0]
 800c4f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c4f2:	2b02      	cmp	r3, #2
 800c4f4:	dd1e      	ble.n	800c534 <_dtoa_r+0x944>
 800c4f6:	9b00      	ldr	r3, [sp, #0]
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	f47f aec0 	bne.w	800c27e <_dtoa_r+0x68e>
 800c4fe:	4621      	mov	r1, r4
 800c500:	2205      	movs	r2, #5
 800c502:	4658      	mov	r0, fp
 800c504:	f000 fa9a 	bl	800ca3c <__multadd>
 800c508:	4601      	mov	r1, r0
 800c50a:	4604      	mov	r4, r0
 800c50c:	4648      	mov	r0, r9
 800c50e:	f000 fcad 	bl	800ce6c <__mcmp>
 800c512:	2800      	cmp	r0, #0
 800c514:	f77f aeb3 	ble.w	800c27e <_dtoa_r+0x68e>
 800c518:	4656      	mov	r6, sl
 800c51a:	2331      	movs	r3, #49	@ 0x31
 800c51c:	f806 3b01 	strb.w	r3, [r6], #1
 800c520:	9b04      	ldr	r3, [sp, #16]
 800c522:	3301      	adds	r3, #1
 800c524:	9304      	str	r3, [sp, #16]
 800c526:	e6ae      	b.n	800c286 <_dtoa_r+0x696>
 800c528:	9c07      	ldr	r4, [sp, #28]
 800c52a:	9704      	str	r7, [sp, #16]
 800c52c:	4625      	mov	r5, r4
 800c52e:	e7f3      	b.n	800c518 <_dtoa_r+0x928>
 800c530:	9b07      	ldr	r3, [sp, #28]
 800c532:	9300      	str	r3, [sp, #0]
 800c534:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c536:	2b00      	cmp	r3, #0
 800c538:	f000 8104 	beq.w	800c744 <_dtoa_r+0xb54>
 800c53c:	2e00      	cmp	r6, #0
 800c53e:	dd05      	ble.n	800c54c <_dtoa_r+0x95c>
 800c540:	4629      	mov	r1, r5
 800c542:	4632      	mov	r2, r6
 800c544:	4658      	mov	r0, fp
 800c546:	f000 fc25 	bl	800cd94 <__lshift>
 800c54a:	4605      	mov	r5, r0
 800c54c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c54e:	2b00      	cmp	r3, #0
 800c550:	d05a      	beq.n	800c608 <_dtoa_r+0xa18>
 800c552:	6869      	ldr	r1, [r5, #4]
 800c554:	4658      	mov	r0, fp
 800c556:	f000 fa0f 	bl	800c978 <_Balloc>
 800c55a:	4606      	mov	r6, r0
 800c55c:	b928      	cbnz	r0, 800c56a <_dtoa_r+0x97a>
 800c55e:	4b84      	ldr	r3, [pc, #528]	@ (800c770 <_dtoa_r+0xb80>)
 800c560:	4602      	mov	r2, r0
 800c562:	f240 21ef 	movw	r1, #751	@ 0x2ef
 800c566:	f7ff bb5a 	b.w	800bc1e <_dtoa_r+0x2e>
 800c56a:	692a      	ldr	r2, [r5, #16]
 800c56c:	3202      	adds	r2, #2
 800c56e:	0092      	lsls	r2, r2, #2
 800c570:	f105 010c 	add.w	r1, r5, #12
 800c574:	300c      	adds	r0, #12
 800c576:	f7ff faa4 	bl	800bac2 <memcpy>
 800c57a:	2201      	movs	r2, #1
 800c57c:	4631      	mov	r1, r6
 800c57e:	4658      	mov	r0, fp
 800c580:	f000 fc08 	bl	800cd94 <__lshift>
 800c584:	f10a 0301 	add.w	r3, sl, #1
 800c588:	9307      	str	r3, [sp, #28]
 800c58a:	9b00      	ldr	r3, [sp, #0]
 800c58c:	4453      	add	r3, sl
 800c58e:	930b      	str	r3, [sp, #44]	@ 0x2c
 800c590:	9b02      	ldr	r3, [sp, #8]
 800c592:	f003 0301 	and.w	r3, r3, #1
 800c596:	462f      	mov	r7, r5
 800c598:	930a      	str	r3, [sp, #40]	@ 0x28
 800c59a:	4605      	mov	r5, r0
 800c59c:	9b07      	ldr	r3, [sp, #28]
 800c59e:	4621      	mov	r1, r4
 800c5a0:	3b01      	subs	r3, #1
 800c5a2:	4648      	mov	r0, r9
 800c5a4:	9300      	str	r3, [sp, #0]
 800c5a6:	f7ff fa9a 	bl	800bade <quorem>
 800c5aa:	4639      	mov	r1, r7
 800c5ac:	9002      	str	r0, [sp, #8]
 800c5ae:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800c5b2:	4648      	mov	r0, r9
 800c5b4:	f000 fc5a 	bl	800ce6c <__mcmp>
 800c5b8:	462a      	mov	r2, r5
 800c5ba:	9008      	str	r0, [sp, #32]
 800c5bc:	4621      	mov	r1, r4
 800c5be:	4658      	mov	r0, fp
 800c5c0:	f000 fc70 	bl	800cea4 <__mdiff>
 800c5c4:	68c2      	ldr	r2, [r0, #12]
 800c5c6:	4606      	mov	r6, r0
 800c5c8:	bb02      	cbnz	r2, 800c60c <_dtoa_r+0xa1c>
 800c5ca:	4601      	mov	r1, r0
 800c5cc:	4648      	mov	r0, r9
 800c5ce:	f000 fc4d 	bl	800ce6c <__mcmp>
 800c5d2:	4602      	mov	r2, r0
 800c5d4:	4631      	mov	r1, r6
 800c5d6:	4658      	mov	r0, fp
 800c5d8:	920e      	str	r2, [sp, #56]	@ 0x38
 800c5da:	f000 fa0d 	bl	800c9f8 <_Bfree>
 800c5de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c5e0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800c5e2:	9e07      	ldr	r6, [sp, #28]
 800c5e4:	ea43 0102 	orr.w	r1, r3, r2
 800c5e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800c5ea:	4319      	orrs	r1, r3
 800c5ec:	d110      	bne.n	800c610 <_dtoa_r+0xa20>
 800c5ee:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c5f2:	d029      	beq.n	800c648 <_dtoa_r+0xa58>
 800c5f4:	9b08      	ldr	r3, [sp, #32]
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	dd02      	ble.n	800c600 <_dtoa_r+0xa10>
 800c5fa:	9b02      	ldr	r3, [sp, #8]
 800c5fc:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 800c600:	9b00      	ldr	r3, [sp, #0]
 800c602:	f883 8000 	strb.w	r8, [r3]
 800c606:	e63f      	b.n	800c288 <_dtoa_r+0x698>
 800c608:	4628      	mov	r0, r5
 800c60a:	e7bb      	b.n	800c584 <_dtoa_r+0x994>
 800c60c:	2201      	movs	r2, #1
 800c60e:	e7e1      	b.n	800c5d4 <_dtoa_r+0x9e4>
 800c610:	9b08      	ldr	r3, [sp, #32]
 800c612:	2b00      	cmp	r3, #0
 800c614:	db04      	blt.n	800c620 <_dtoa_r+0xa30>
 800c616:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800c618:	430b      	orrs	r3, r1
 800c61a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800c61c:	430b      	orrs	r3, r1
 800c61e:	d120      	bne.n	800c662 <_dtoa_r+0xa72>
 800c620:	2a00      	cmp	r2, #0
 800c622:	dded      	ble.n	800c600 <_dtoa_r+0xa10>
 800c624:	4649      	mov	r1, r9
 800c626:	2201      	movs	r2, #1
 800c628:	4658      	mov	r0, fp
 800c62a:	f000 fbb3 	bl	800cd94 <__lshift>
 800c62e:	4621      	mov	r1, r4
 800c630:	4681      	mov	r9, r0
 800c632:	f000 fc1b 	bl	800ce6c <__mcmp>
 800c636:	2800      	cmp	r0, #0
 800c638:	dc03      	bgt.n	800c642 <_dtoa_r+0xa52>
 800c63a:	d1e1      	bne.n	800c600 <_dtoa_r+0xa10>
 800c63c:	f018 0f01 	tst.w	r8, #1
 800c640:	d0de      	beq.n	800c600 <_dtoa_r+0xa10>
 800c642:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c646:	d1d8      	bne.n	800c5fa <_dtoa_r+0xa0a>
 800c648:	9a00      	ldr	r2, [sp, #0]
 800c64a:	2339      	movs	r3, #57	@ 0x39
 800c64c:	7013      	strb	r3, [r2, #0]
 800c64e:	4633      	mov	r3, r6
 800c650:	461e      	mov	r6, r3
 800c652:	3b01      	subs	r3, #1
 800c654:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800c658:	2a39      	cmp	r2, #57	@ 0x39
 800c65a:	d052      	beq.n	800c702 <_dtoa_r+0xb12>
 800c65c:	3201      	adds	r2, #1
 800c65e:	701a      	strb	r2, [r3, #0]
 800c660:	e612      	b.n	800c288 <_dtoa_r+0x698>
 800c662:	2a00      	cmp	r2, #0
 800c664:	dd07      	ble.n	800c676 <_dtoa_r+0xa86>
 800c666:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 800c66a:	d0ed      	beq.n	800c648 <_dtoa_r+0xa58>
 800c66c:	9a00      	ldr	r2, [sp, #0]
 800c66e:	f108 0301 	add.w	r3, r8, #1
 800c672:	7013      	strb	r3, [r2, #0]
 800c674:	e608      	b.n	800c288 <_dtoa_r+0x698>
 800c676:	9b07      	ldr	r3, [sp, #28]
 800c678:	9a07      	ldr	r2, [sp, #28]
 800c67a:	f803 8c01 	strb.w	r8, [r3, #-1]
 800c67e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800c680:	4293      	cmp	r3, r2
 800c682:	d028      	beq.n	800c6d6 <_dtoa_r+0xae6>
 800c684:	4649      	mov	r1, r9
 800c686:	2300      	movs	r3, #0
 800c688:	220a      	movs	r2, #10
 800c68a:	4658      	mov	r0, fp
 800c68c:	f000 f9d6 	bl	800ca3c <__multadd>
 800c690:	42af      	cmp	r7, r5
 800c692:	4681      	mov	r9, r0
 800c694:	f04f 0300 	mov.w	r3, #0
 800c698:	f04f 020a 	mov.w	r2, #10
 800c69c:	4639      	mov	r1, r7
 800c69e:	4658      	mov	r0, fp
 800c6a0:	d107      	bne.n	800c6b2 <_dtoa_r+0xac2>
 800c6a2:	f000 f9cb 	bl	800ca3c <__multadd>
 800c6a6:	4607      	mov	r7, r0
 800c6a8:	4605      	mov	r5, r0
 800c6aa:	9b07      	ldr	r3, [sp, #28]
 800c6ac:	3301      	adds	r3, #1
 800c6ae:	9307      	str	r3, [sp, #28]
 800c6b0:	e774      	b.n	800c59c <_dtoa_r+0x9ac>
 800c6b2:	f000 f9c3 	bl	800ca3c <__multadd>
 800c6b6:	4629      	mov	r1, r5
 800c6b8:	4607      	mov	r7, r0
 800c6ba:	2300      	movs	r3, #0
 800c6bc:	220a      	movs	r2, #10
 800c6be:	4658      	mov	r0, fp
 800c6c0:	f000 f9bc 	bl	800ca3c <__multadd>
 800c6c4:	4605      	mov	r5, r0
 800c6c6:	e7f0      	b.n	800c6aa <_dtoa_r+0xaba>
 800c6c8:	9b00      	ldr	r3, [sp, #0]
 800c6ca:	2b00      	cmp	r3, #0
 800c6cc:	bfcc      	ite	gt
 800c6ce:	461e      	movgt	r6, r3
 800c6d0:	2601      	movle	r6, #1
 800c6d2:	4456      	add	r6, sl
 800c6d4:	2700      	movs	r7, #0
 800c6d6:	4649      	mov	r1, r9
 800c6d8:	2201      	movs	r2, #1
 800c6da:	4658      	mov	r0, fp
 800c6dc:	f000 fb5a 	bl	800cd94 <__lshift>
 800c6e0:	4621      	mov	r1, r4
 800c6e2:	4681      	mov	r9, r0
 800c6e4:	f000 fbc2 	bl	800ce6c <__mcmp>
 800c6e8:	2800      	cmp	r0, #0
 800c6ea:	dcb0      	bgt.n	800c64e <_dtoa_r+0xa5e>
 800c6ec:	d102      	bne.n	800c6f4 <_dtoa_r+0xb04>
 800c6ee:	f018 0f01 	tst.w	r8, #1
 800c6f2:	d1ac      	bne.n	800c64e <_dtoa_r+0xa5e>
 800c6f4:	4633      	mov	r3, r6
 800c6f6:	461e      	mov	r6, r3
 800c6f8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c6fc:	2a30      	cmp	r2, #48	@ 0x30
 800c6fe:	d0fa      	beq.n	800c6f6 <_dtoa_r+0xb06>
 800c700:	e5c2      	b.n	800c288 <_dtoa_r+0x698>
 800c702:	459a      	cmp	sl, r3
 800c704:	d1a4      	bne.n	800c650 <_dtoa_r+0xa60>
 800c706:	9b04      	ldr	r3, [sp, #16]
 800c708:	3301      	adds	r3, #1
 800c70a:	9304      	str	r3, [sp, #16]
 800c70c:	2331      	movs	r3, #49	@ 0x31
 800c70e:	f88a 3000 	strb.w	r3, [sl]
 800c712:	e5b9      	b.n	800c288 <_dtoa_r+0x698>
 800c714:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 800c716:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 800c774 <_dtoa_r+0xb84>
 800c71a:	b11b      	cbz	r3, 800c724 <_dtoa_r+0xb34>
 800c71c:	f10a 0308 	add.w	r3, sl, #8
 800c720:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 800c722:	6013      	str	r3, [r2, #0]
 800c724:	4650      	mov	r0, sl
 800c726:	b019      	add	sp, #100	@ 0x64
 800c728:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c72c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800c72e:	2b01      	cmp	r3, #1
 800c730:	f77f ae37 	ble.w	800c3a2 <_dtoa_r+0x7b2>
 800c734:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800c736:	930a      	str	r3, [sp, #40]	@ 0x28
 800c738:	2001      	movs	r0, #1
 800c73a:	e655      	b.n	800c3e8 <_dtoa_r+0x7f8>
 800c73c:	9b00      	ldr	r3, [sp, #0]
 800c73e:	2b00      	cmp	r3, #0
 800c740:	f77f aed6 	ble.w	800c4f0 <_dtoa_r+0x900>
 800c744:	4656      	mov	r6, sl
 800c746:	4621      	mov	r1, r4
 800c748:	4648      	mov	r0, r9
 800c74a:	f7ff f9c8 	bl	800bade <quorem>
 800c74e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 800c752:	f806 8b01 	strb.w	r8, [r6], #1
 800c756:	9b00      	ldr	r3, [sp, #0]
 800c758:	eba6 020a 	sub.w	r2, r6, sl
 800c75c:	4293      	cmp	r3, r2
 800c75e:	ddb3      	ble.n	800c6c8 <_dtoa_r+0xad8>
 800c760:	4649      	mov	r1, r9
 800c762:	2300      	movs	r3, #0
 800c764:	220a      	movs	r2, #10
 800c766:	4658      	mov	r0, fp
 800c768:	f000 f968 	bl	800ca3c <__multadd>
 800c76c:	4681      	mov	r9, r0
 800c76e:	e7ea      	b.n	800c746 <_dtoa_r+0xb56>
 800c770:	0800fc34 	.word	0x0800fc34
 800c774:	0800fbb8 	.word	0x0800fbb8

0800c778 <_free_r>:
 800c778:	b538      	push	{r3, r4, r5, lr}
 800c77a:	4605      	mov	r5, r0
 800c77c:	2900      	cmp	r1, #0
 800c77e:	d041      	beq.n	800c804 <_free_r+0x8c>
 800c780:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c784:	1f0c      	subs	r4, r1, #4
 800c786:	2b00      	cmp	r3, #0
 800c788:	bfb8      	it	lt
 800c78a:	18e4      	addlt	r4, r4, r3
 800c78c:	f000 f8e8 	bl	800c960 <__malloc_lock>
 800c790:	4a1d      	ldr	r2, [pc, #116]	@ (800c808 <_free_r+0x90>)
 800c792:	6813      	ldr	r3, [r2, #0]
 800c794:	b933      	cbnz	r3, 800c7a4 <_free_r+0x2c>
 800c796:	6063      	str	r3, [r4, #4]
 800c798:	6014      	str	r4, [r2, #0]
 800c79a:	4628      	mov	r0, r5
 800c79c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c7a0:	f000 b8e4 	b.w	800c96c <__malloc_unlock>
 800c7a4:	42a3      	cmp	r3, r4
 800c7a6:	d908      	bls.n	800c7ba <_free_r+0x42>
 800c7a8:	6820      	ldr	r0, [r4, #0]
 800c7aa:	1821      	adds	r1, r4, r0
 800c7ac:	428b      	cmp	r3, r1
 800c7ae:	bf01      	itttt	eq
 800c7b0:	6819      	ldreq	r1, [r3, #0]
 800c7b2:	685b      	ldreq	r3, [r3, #4]
 800c7b4:	1809      	addeq	r1, r1, r0
 800c7b6:	6021      	streq	r1, [r4, #0]
 800c7b8:	e7ed      	b.n	800c796 <_free_r+0x1e>
 800c7ba:	461a      	mov	r2, r3
 800c7bc:	685b      	ldr	r3, [r3, #4]
 800c7be:	b10b      	cbz	r3, 800c7c4 <_free_r+0x4c>
 800c7c0:	42a3      	cmp	r3, r4
 800c7c2:	d9fa      	bls.n	800c7ba <_free_r+0x42>
 800c7c4:	6811      	ldr	r1, [r2, #0]
 800c7c6:	1850      	adds	r0, r2, r1
 800c7c8:	42a0      	cmp	r0, r4
 800c7ca:	d10b      	bne.n	800c7e4 <_free_r+0x6c>
 800c7cc:	6820      	ldr	r0, [r4, #0]
 800c7ce:	4401      	add	r1, r0
 800c7d0:	1850      	adds	r0, r2, r1
 800c7d2:	4283      	cmp	r3, r0
 800c7d4:	6011      	str	r1, [r2, #0]
 800c7d6:	d1e0      	bne.n	800c79a <_free_r+0x22>
 800c7d8:	6818      	ldr	r0, [r3, #0]
 800c7da:	685b      	ldr	r3, [r3, #4]
 800c7dc:	6053      	str	r3, [r2, #4]
 800c7de:	4408      	add	r0, r1
 800c7e0:	6010      	str	r0, [r2, #0]
 800c7e2:	e7da      	b.n	800c79a <_free_r+0x22>
 800c7e4:	d902      	bls.n	800c7ec <_free_r+0x74>
 800c7e6:	230c      	movs	r3, #12
 800c7e8:	602b      	str	r3, [r5, #0]
 800c7ea:	e7d6      	b.n	800c79a <_free_r+0x22>
 800c7ec:	6820      	ldr	r0, [r4, #0]
 800c7ee:	1821      	adds	r1, r4, r0
 800c7f0:	428b      	cmp	r3, r1
 800c7f2:	bf04      	itt	eq
 800c7f4:	6819      	ldreq	r1, [r3, #0]
 800c7f6:	685b      	ldreq	r3, [r3, #4]
 800c7f8:	6063      	str	r3, [r4, #4]
 800c7fa:	bf04      	itt	eq
 800c7fc:	1809      	addeq	r1, r1, r0
 800c7fe:	6021      	streq	r1, [r4, #0]
 800c800:	6054      	str	r4, [r2, #4]
 800c802:	e7ca      	b.n	800c79a <_free_r+0x22>
 800c804:	bd38      	pop	{r3, r4, r5, pc}
 800c806:	bf00      	nop
 800c808:	200051c4 	.word	0x200051c4

0800c80c <malloc>:
 800c80c:	4b02      	ldr	r3, [pc, #8]	@ (800c818 <malloc+0xc>)
 800c80e:	4601      	mov	r1, r0
 800c810:	6818      	ldr	r0, [r3, #0]
 800c812:	f000 b825 	b.w	800c860 <_malloc_r>
 800c816:	bf00      	nop
 800c818:	200000c0 	.word	0x200000c0

0800c81c <sbrk_aligned>:
 800c81c:	b570      	push	{r4, r5, r6, lr}
 800c81e:	4e0f      	ldr	r6, [pc, #60]	@ (800c85c <sbrk_aligned+0x40>)
 800c820:	460c      	mov	r4, r1
 800c822:	6831      	ldr	r1, [r6, #0]
 800c824:	4605      	mov	r5, r0
 800c826:	b911      	cbnz	r1, 800c82e <sbrk_aligned+0x12>
 800c828:	f001 f80c 	bl	800d844 <_sbrk_r>
 800c82c:	6030      	str	r0, [r6, #0]
 800c82e:	4621      	mov	r1, r4
 800c830:	4628      	mov	r0, r5
 800c832:	f001 f807 	bl	800d844 <_sbrk_r>
 800c836:	1c43      	adds	r3, r0, #1
 800c838:	d103      	bne.n	800c842 <sbrk_aligned+0x26>
 800c83a:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 800c83e:	4620      	mov	r0, r4
 800c840:	bd70      	pop	{r4, r5, r6, pc}
 800c842:	1cc4      	adds	r4, r0, #3
 800c844:	f024 0403 	bic.w	r4, r4, #3
 800c848:	42a0      	cmp	r0, r4
 800c84a:	d0f8      	beq.n	800c83e <sbrk_aligned+0x22>
 800c84c:	1a21      	subs	r1, r4, r0
 800c84e:	4628      	mov	r0, r5
 800c850:	f000 fff8 	bl	800d844 <_sbrk_r>
 800c854:	3001      	adds	r0, #1
 800c856:	d1f2      	bne.n	800c83e <sbrk_aligned+0x22>
 800c858:	e7ef      	b.n	800c83a <sbrk_aligned+0x1e>
 800c85a:	bf00      	nop
 800c85c:	200051c0 	.word	0x200051c0

0800c860 <_malloc_r>:
 800c860:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c864:	1ccd      	adds	r5, r1, #3
 800c866:	f025 0503 	bic.w	r5, r5, #3
 800c86a:	3508      	adds	r5, #8
 800c86c:	2d0c      	cmp	r5, #12
 800c86e:	bf38      	it	cc
 800c870:	250c      	movcc	r5, #12
 800c872:	2d00      	cmp	r5, #0
 800c874:	4606      	mov	r6, r0
 800c876:	db01      	blt.n	800c87c <_malloc_r+0x1c>
 800c878:	42a9      	cmp	r1, r5
 800c87a:	d904      	bls.n	800c886 <_malloc_r+0x26>
 800c87c:	230c      	movs	r3, #12
 800c87e:	6033      	str	r3, [r6, #0]
 800c880:	2000      	movs	r0, #0
 800c882:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c886:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800c95c <_malloc_r+0xfc>
 800c88a:	f000 f869 	bl	800c960 <__malloc_lock>
 800c88e:	f8d8 3000 	ldr.w	r3, [r8]
 800c892:	461c      	mov	r4, r3
 800c894:	bb44      	cbnz	r4, 800c8e8 <_malloc_r+0x88>
 800c896:	4629      	mov	r1, r5
 800c898:	4630      	mov	r0, r6
 800c89a:	f7ff ffbf 	bl	800c81c <sbrk_aligned>
 800c89e:	1c43      	adds	r3, r0, #1
 800c8a0:	4604      	mov	r4, r0
 800c8a2:	d158      	bne.n	800c956 <_malloc_r+0xf6>
 800c8a4:	f8d8 4000 	ldr.w	r4, [r8]
 800c8a8:	4627      	mov	r7, r4
 800c8aa:	2f00      	cmp	r7, #0
 800c8ac:	d143      	bne.n	800c936 <_malloc_r+0xd6>
 800c8ae:	2c00      	cmp	r4, #0
 800c8b0:	d04b      	beq.n	800c94a <_malloc_r+0xea>
 800c8b2:	6823      	ldr	r3, [r4, #0]
 800c8b4:	4639      	mov	r1, r7
 800c8b6:	4630      	mov	r0, r6
 800c8b8:	eb04 0903 	add.w	r9, r4, r3
 800c8bc:	f000 ffc2 	bl	800d844 <_sbrk_r>
 800c8c0:	4581      	cmp	r9, r0
 800c8c2:	d142      	bne.n	800c94a <_malloc_r+0xea>
 800c8c4:	6821      	ldr	r1, [r4, #0]
 800c8c6:	1a6d      	subs	r5, r5, r1
 800c8c8:	4629      	mov	r1, r5
 800c8ca:	4630      	mov	r0, r6
 800c8cc:	f7ff ffa6 	bl	800c81c <sbrk_aligned>
 800c8d0:	3001      	adds	r0, #1
 800c8d2:	d03a      	beq.n	800c94a <_malloc_r+0xea>
 800c8d4:	6823      	ldr	r3, [r4, #0]
 800c8d6:	442b      	add	r3, r5
 800c8d8:	6023      	str	r3, [r4, #0]
 800c8da:	f8d8 3000 	ldr.w	r3, [r8]
 800c8de:	685a      	ldr	r2, [r3, #4]
 800c8e0:	bb62      	cbnz	r2, 800c93c <_malloc_r+0xdc>
 800c8e2:	f8c8 7000 	str.w	r7, [r8]
 800c8e6:	e00f      	b.n	800c908 <_malloc_r+0xa8>
 800c8e8:	6822      	ldr	r2, [r4, #0]
 800c8ea:	1b52      	subs	r2, r2, r5
 800c8ec:	d420      	bmi.n	800c930 <_malloc_r+0xd0>
 800c8ee:	2a0b      	cmp	r2, #11
 800c8f0:	d917      	bls.n	800c922 <_malloc_r+0xc2>
 800c8f2:	1961      	adds	r1, r4, r5
 800c8f4:	42a3      	cmp	r3, r4
 800c8f6:	6025      	str	r5, [r4, #0]
 800c8f8:	bf18      	it	ne
 800c8fa:	6059      	strne	r1, [r3, #4]
 800c8fc:	6863      	ldr	r3, [r4, #4]
 800c8fe:	bf08      	it	eq
 800c900:	f8c8 1000 	streq.w	r1, [r8]
 800c904:	5162      	str	r2, [r4, r5]
 800c906:	604b      	str	r3, [r1, #4]
 800c908:	4630      	mov	r0, r6
 800c90a:	f000 f82f 	bl	800c96c <__malloc_unlock>
 800c90e:	f104 000b 	add.w	r0, r4, #11
 800c912:	1d23      	adds	r3, r4, #4
 800c914:	f020 0007 	bic.w	r0, r0, #7
 800c918:	1ac2      	subs	r2, r0, r3
 800c91a:	bf1c      	itt	ne
 800c91c:	1a1b      	subne	r3, r3, r0
 800c91e:	50a3      	strne	r3, [r4, r2]
 800c920:	e7af      	b.n	800c882 <_malloc_r+0x22>
 800c922:	6862      	ldr	r2, [r4, #4]
 800c924:	42a3      	cmp	r3, r4
 800c926:	bf0c      	ite	eq
 800c928:	f8c8 2000 	streq.w	r2, [r8]
 800c92c:	605a      	strne	r2, [r3, #4]
 800c92e:	e7eb      	b.n	800c908 <_malloc_r+0xa8>
 800c930:	4623      	mov	r3, r4
 800c932:	6864      	ldr	r4, [r4, #4]
 800c934:	e7ae      	b.n	800c894 <_malloc_r+0x34>
 800c936:	463c      	mov	r4, r7
 800c938:	687f      	ldr	r7, [r7, #4]
 800c93a:	e7b6      	b.n	800c8aa <_malloc_r+0x4a>
 800c93c:	461a      	mov	r2, r3
 800c93e:	685b      	ldr	r3, [r3, #4]
 800c940:	42a3      	cmp	r3, r4
 800c942:	d1fb      	bne.n	800c93c <_malloc_r+0xdc>
 800c944:	2300      	movs	r3, #0
 800c946:	6053      	str	r3, [r2, #4]
 800c948:	e7de      	b.n	800c908 <_malloc_r+0xa8>
 800c94a:	230c      	movs	r3, #12
 800c94c:	6033      	str	r3, [r6, #0]
 800c94e:	4630      	mov	r0, r6
 800c950:	f000 f80c 	bl	800c96c <__malloc_unlock>
 800c954:	e794      	b.n	800c880 <_malloc_r+0x20>
 800c956:	6005      	str	r5, [r0, #0]
 800c958:	e7d6      	b.n	800c908 <_malloc_r+0xa8>
 800c95a:	bf00      	nop
 800c95c:	200051c4 	.word	0x200051c4

0800c960 <__malloc_lock>:
 800c960:	4801      	ldr	r0, [pc, #4]	@ (800c968 <__malloc_lock+0x8>)
 800c962:	f7ff b8ac 	b.w	800babe <__retarget_lock_acquire_recursive>
 800c966:	bf00      	nop
 800c968:	200051bc 	.word	0x200051bc

0800c96c <__malloc_unlock>:
 800c96c:	4801      	ldr	r0, [pc, #4]	@ (800c974 <__malloc_unlock+0x8>)
 800c96e:	f7ff b8a7 	b.w	800bac0 <__retarget_lock_release_recursive>
 800c972:	bf00      	nop
 800c974:	200051bc 	.word	0x200051bc

0800c978 <_Balloc>:
 800c978:	b570      	push	{r4, r5, r6, lr}
 800c97a:	69c6      	ldr	r6, [r0, #28]
 800c97c:	4604      	mov	r4, r0
 800c97e:	460d      	mov	r5, r1
 800c980:	b976      	cbnz	r6, 800c9a0 <_Balloc+0x28>
 800c982:	2010      	movs	r0, #16
 800c984:	f7ff ff42 	bl	800c80c <malloc>
 800c988:	4602      	mov	r2, r0
 800c98a:	61e0      	str	r0, [r4, #28]
 800c98c:	b920      	cbnz	r0, 800c998 <_Balloc+0x20>
 800c98e:	4b18      	ldr	r3, [pc, #96]	@ (800c9f0 <_Balloc+0x78>)
 800c990:	4818      	ldr	r0, [pc, #96]	@ (800c9f4 <_Balloc+0x7c>)
 800c992:	216b      	movs	r1, #107	@ 0x6b
 800c994:	f000 ff66 	bl	800d864 <__assert_func>
 800c998:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c99c:	6006      	str	r6, [r0, #0]
 800c99e:	60c6      	str	r6, [r0, #12]
 800c9a0:	69e6      	ldr	r6, [r4, #28]
 800c9a2:	68f3      	ldr	r3, [r6, #12]
 800c9a4:	b183      	cbz	r3, 800c9c8 <_Balloc+0x50>
 800c9a6:	69e3      	ldr	r3, [r4, #28]
 800c9a8:	68db      	ldr	r3, [r3, #12]
 800c9aa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c9ae:	b9b8      	cbnz	r0, 800c9e0 <_Balloc+0x68>
 800c9b0:	2101      	movs	r1, #1
 800c9b2:	fa01 f605 	lsl.w	r6, r1, r5
 800c9b6:	1d72      	adds	r2, r6, #5
 800c9b8:	0092      	lsls	r2, r2, #2
 800c9ba:	4620      	mov	r0, r4
 800c9bc:	f000 ff70 	bl	800d8a0 <_calloc_r>
 800c9c0:	b160      	cbz	r0, 800c9dc <_Balloc+0x64>
 800c9c2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c9c6:	e00e      	b.n	800c9e6 <_Balloc+0x6e>
 800c9c8:	2221      	movs	r2, #33	@ 0x21
 800c9ca:	2104      	movs	r1, #4
 800c9cc:	4620      	mov	r0, r4
 800c9ce:	f000 ff67 	bl	800d8a0 <_calloc_r>
 800c9d2:	69e3      	ldr	r3, [r4, #28]
 800c9d4:	60f0      	str	r0, [r6, #12]
 800c9d6:	68db      	ldr	r3, [r3, #12]
 800c9d8:	2b00      	cmp	r3, #0
 800c9da:	d1e4      	bne.n	800c9a6 <_Balloc+0x2e>
 800c9dc:	2000      	movs	r0, #0
 800c9de:	bd70      	pop	{r4, r5, r6, pc}
 800c9e0:	6802      	ldr	r2, [r0, #0]
 800c9e2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c9e6:	2300      	movs	r3, #0
 800c9e8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c9ec:	e7f7      	b.n	800c9de <_Balloc+0x66>
 800c9ee:	bf00      	nop
 800c9f0:	0800fbc5 	.word	0x0800fbc5
 800c9f4:	0800fc45 	.word	0x0800fc45

0800c9f8 <_Bfree>:
 800c9f8:	b570      	push	{r4, r5, r6, lr}
 800c9fa:	69c6      	ldr	r6, [r0, #28]
 800c9fc:	4605      	mov	r5, r0
 800c9fe:	460c      	mov	r4, r1
 800ca00:	b976      	cbnz	r6, 800ca20 <_Bfree+0x28>
 800ca02:	2010      	movs	r0, #16
 800ca04:	f7ff ff02 	bl	800c80c <malloc>
 800ca08:	4602      	mov	r2, r0
 800ca0a:	61e8      	str	r0, [r5, #28]
 800ca0c:	b920      	cbnz	r0, 800ca18 <_Bfree+0x20>
 800ca0e:	4b09      	ldr	r3, [pc, #36]	@ (800ca34 <_Bfree+0x3c>)
 800ca10:	4809      	ldr	r0, [pc, #36]	@ (800ca38 <_Bfree+0x40>)
 800ca12:	218f      	movs	r1, #143	@ 0x8f
 800ca14:	f000 ff26 	bl	800d864 <__assert_func>
 800ca18:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800ca1c:	6006      	str	r6, [r0, #0]
 800ca1e:	60c6      	str	r6, [r0, #12]
 800ca20:	b13c      	cbz	r4, 800ca32 <_Bfree+0x3a>
 800ca22:	69eb      	ldr	r3, [r5, #28]
 800ca24:	6862      	ldr	r2, [r4, #4]
 800ca26:	68db      	ldr	r3, [r3, #12]
 800ca28:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800ca2c:	6021      	str	r1, [r4, #0]
 800ca2e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800ca32:	bd70      	pop	{r4, r5, r6, pc}
 800ca34:	0800fbc5 	.word	0x0800fbc5
 800ca38:	0800fc45 	.word	0x0800fc45

0800ca3c <__multadd>:
 800ca3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ca40:	690d      	ldr	r5, [r1, #16]
 800ca42:	4607      	mov	r7, r0
 800ca44:	460c      	mov	r4, r1
 800ca46:	461e      	mov	r6, r3
 800ca48:	f101 0c14 	add.w	ip, r1, #20
 800ca4c:	2000      	movs	r0, #0
 800ca4e:	f8dc 3000 	ldr.w	r3, [ip]
 800ca52:	b299      	uxth	r1, r3
 800ca54:	fb02 6101 	mla	r1, r2, r1, r6
 800ca58:	0c1e      	lsrs	r6, r3, #16
 800ca5a:	0c0b      	lsrs	r3, r1, #16
 800ca5c:	fb02 3306 	mla	r3, r2, r6, r3
 800ca60:	b289      	uxth	r1, r1
 800ca62:	3001      	adds	r0, #1
 800ca64:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ca68:	4285      	cmp	r5, r0
 800ca6a:	f84c 1b04 	str.w	r1, [ip], #4
 800ca6e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ca72:	dcec      	bgt.n	800ca4e <__multadd+0x12>
 800ca74:	b30e      	cbz	r6, 800caba <__multadd+0x7e>
 800ca76:	68a3      	ldr	r3, [r4, #8]
 800ca78:	42ab      	cmp	r3, r5
 800ca7a:	dc19      	bgt.n	800cab0 <__multadd+0x74>
 800ca7c:	6861      	ldr	r1, [r4, #4]
 800ca7e:	4638      	mov	r0, r7
 800ca80:	3101      	adds	r1, #1
 800ca82:	f7ff ff79 	bl	800c978 <_Balloc>
 800ca86:	4680      	mov	r8, r0
 800ca88:	b928      	cbnz	r0, 800ca96 <__multadd+0x5a>
 800ca8a:	4602      	mov	r2, r0
 800ca8c:	4b0c      	ldr	r3, [pc, #48]	@ (800cac0 <__multadd+0x84>)
 800ca8e:	480d      	ldr	r0, [pc, #52]	@ (800cac4 <__multadd+0x88>)
 800ca90:	21ba      	movs	r1, #186	@ 0xba
 800ca92:	f000 fee7 	bl	800d864 <__assert_func>
 800ca96:	6922      	ldr	r2, [r4, #16]
 800ca98:	3202      	adds	r2, #2
 800ca9a:	f104 010c 	add.w	r1, r4, #12
 800ca9e:	0092      	lsls	r2, r2, #2
 800caa0:	300c      	adds	r0, #12
 800caa2:	f7ff f80e 	bl	800bac2 <memcpy>
 800caa6:	4621      	mov	r1, r4
 800caa8:	4638      	mov	r0, r7
 800caaa:	f7ff ffa5 	bl	800c9f8 <_Bfree>
 800caae:	4644      	mov	r4, r8
 800cab0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800cab4:	3501      	adds	r5, #1
 800cab6:	615e      	str	r6, [r3, #20]
 800cab8:	6125      	str	r5, [r4, #16]
 800caba:	4620      	mov	r0, r4
 800cabc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cac0:	0800fc34 	.word	0x0800fc34
 800cac4:	0800fc45 	.word	0x0800fc45

0800cac8 <__hi0bits>:
 800cac8:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800cacc:	4603      	mov	r3, r0
 800cace:	bf36      	itet	cc
 800cad0:	0403      	lslcc	r3, r0, #16
 800cad2:	2000      	movcs	r0, #0
 800cad4:	2010      	movcc	r0, #16
 800cad6:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800cada:	bf3c      	itt	cc
 800cadc:	021b      	lslcc	r3, r3, #8
 800cade:	3008      	addcc	r0, #8
 800cae0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800cae4:	bf3c      	itt	cc
 800cae6:	011b      	lslcc	r3, r3, #4
 800cae8:	3004      	addcc	r0, #4
 800caea:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800caee:	bf3c      	itt	cc
 800caf0:	009b      	lslcc	r3, r3, #2
 800caf2:	3002      	addcc	r0, #2
 800caf4:	2b00      	cmp	r3, #0
 800caf6:	db05      	blt.n	800cb04 <__hi0bits+0x3c>
 800caf8:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800cafc:	f100 0001 	add.w	r0, r0, #1
 800cb00:	bf08      	it	eq
 800cb02:	2020      	moveq	r0, #32
 800cb04:	4770      	bx	lr

0800cb06 <__lo0bits>:
 800cb06:	6803      	ldr	r3, [r0, #0]
 800cb08:	4602      	mov	r2, r0
 800cb0a:	f013 0007 	ands.w	r0, r3, #7
 800cb0e:	d00b      	beq.n	800cb28 <__lo0bits+0x22>
 800cb10:	07d9      	lsls	r1, r3, #31
 800cb12:	d421      	bmi.n	800cb58 <__lo0bits+0x52>
 800cb14:	0798      	lsls	r0, r3, #30
 800cb16:	bf49      	itett	mi
 800cb18:	085b      	lsrmi	r3, r3, #1
 800cb1a:	089b      	lsrpl	r3, r3, #2
 800cb1c:	2001      	movmi	r0, #1
 800cb1e:	6013      	strmi	r3, [r2, #0]
 800cb20:	bf5c      	itt	pl
 800cb22:	6013      	strpl	r3, [r2, #0]
 800cb24:	2002      	movpl	r0, #2
 800cb26:	4770      	bx	lr
 800cb28:	b299      	uxth	r1, r3
 800cb2a:	b909      	cbnz	r1, 800cb30 <__lo0bits+0x2a>
 800cb2c:	0c1b      	lsrs	r3, r3, #16
 800cb2e:	2010      	movs	r0, #16
 800cb30:	b2d9      	uxtb	r1, r3
 800cb32:	b909      	cbnz	r1, 800cb38 <__lo0bits+0x32>
 800cb34:	3008      	adds	r0, #8
 800cb36:	0a1b      	lsrs	r3, r3, #8
 800cb38:	0719      	lsls	r1, r3, #28
 800cb3a:	bf04      	itt	eq
 800cb3c:	091b      	lsreq	r3, r3, #4
 800cb3e:	3004      	addeq	r0, #4
 800cb40:	0799      	lsls	r1, r3, #30
 800cb42:	bf04      	itt	eq
 800cb44:	089b      	lsreq	r3, r3, #2
 800cb46:	3002      	addeq	r0, #2
 800cb48:	07d9      	lsls	r1, r3, #31
 800cb4a:	d403      	bmi.n	800cb54 <__lo0bits+0x4e>
 800cb4c:	085b      	lsrs	r3, r3, #1
 800cb4e:	f100 0001 	add.w	r0, r0, #1
 800cb52:	d003      	beq.n	800cb5c <__lo0bits+0x56>
 800cb54:	6013      	str	r3, [r2, #0]
 800cb56:	4770      	bx	lr
 800cb58:	2000      	movs	r0, #0
 800cb5a:	4770      	bx	lr
 800cb5c:	2020      	movs	r0, #32
 800cb5e:	4770      	bx	lr

0800cb60 <__i2b>:
 800cb60:	b510      	push	{r4, lr}
 800cb62:	460c      	mov	r4, r1
 800cb64:	2101      	movs	r1, #1
 800cb66:	f7ff ff07 	bl	800c978 <_Balloc>
 800cb6a:	4602      	mov	r2, r0
 800cb6c:	b928      	cbnz	r0, 800cb7a <__i2b+0x1a>
 800cb6e:	4b05      	ldr	r3, [pc, #20]	@ (800cb84 <__i2b+0x24>)
 800cb70:	4805      	ldr	r0, [pc, #20]	@ (800cb88 <__i2b+0x28>)
 800cb72:	f240 1145 	movw	r1, #325	@ 0x145
 800cb76:	f000 fe75 	bl	800d864 <__assert_func>
 800cb7a:	2301      	movs	r3, #1
 800cb7c:	6144      	str	r4, [r0, #20]
 800cb7e:	6103      	str	r3, [r0, #16]
 800cb80:	bd10      	pop	{r4, pc}
 800cb82:	bf00      	nop
 800cb84:	0800fc34 	.word	0x0800fc34
 800cb88:	0800fc45 	.word	0x0800fc45

0800cb8c <__multiply>:
 800cb8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb90:	4614      	mov	r4, r2
 800cb92:	690a      	ldr	r2, [r1, #16]
 800cb94:	6923      	ldr	r3, [r4, #16]
 800cb96:	429a      	cmp	r2, r3
 800cb98:	bfa8      	it	ge
 800cb9a:	4623      	movge	r3, r4
 800cb9c:	460f      	mov	r7, r1
 800cb9e:	bfa4      	itt	ge
 800cba0:	460c      	movge	r4, r1
 800cba2:	461f      	movge	r7, r3
 800cba4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 800cba8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 800cbac:	68a3      	ldr	r3, [r4, #8]
 800cbae:	6861      	ldr	r1, [r4, #4]
 800cbb0:	eb0a 0609 	add.w	r6, sl, r9
 800cbb4:	42b3      	cmp	r3, r6
 800cbb6:	b085      	sub	sp, #20
 800cbb8:	bfb8      	it	lt
 800cbba:	3101      	addlt	r1, #1
 800cbbc:	f7ff fedc 	bl	800c978 <_Balloc>
 800cbc0:	b930      	cbnz	r0, 800cbd0 <__multiply+0x44>
 800cbc2:	4602      	mov	r2, r0
 800cbc4:	4b44      	ldr	r3, [pc, #272]	@ (800ccd8 <__multiply+0x14c>)
 800cbc6:	4845      	ldr	r0, [pc, #276]	@ (800ccdc <__multiply+0x150>)
 800cbc8:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800cbcc:	f000 fe4a 	bl	800d864 <__assert_func>
 800cbd0:	f100 0514 	add.w	r5, r0, #20
 800cbd4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800cbd8:	462b      	mov	r3, r5
 800cbda:	2200      	movs	r2, #0
 800cbdc:	4543      	cmp	r3, r8
 800cbde:	d321      	bcc.n	800cc24 <__multiply+0x98>
 800cbe0:	f107 0114 	add.w	r1, r7, #20
 800cbe4:	f104 0214 	add.w	r2, r4, #20
 800cbe8:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800cbec:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 800cbf0:	9302      	str	r3, [sp, #8]
 800cbf2:	1b13      	subs	r3, r2, r4
 800cbf4:	3b15      	subs	r3, #21
 800cbf6:	f023 0303 	bic.w	r3, r3, #3
 800cbfa:	3304      	adds	r3, #4
 800cbfc:	f104 0715 	add.w	r7, r4, #21
 800cc00:	42ba      	cmp	r2, r7
 800cc02:	bf38      	it	cc
 800cc04:	2304      	movcc	r3, #4
 800cc06:	9301      	str	r3, [sp, #4]
 800cc08:	9b02      	ldr	r3, [sp, #8]
 800cc0a:	9103      	str	r1, [sp, #12]
 800cc0c:	428b      	cmp	r3, r1
 800cc0e:	d80c      	bhi.n	800cc2a <__multiply+0x9e>
 800cc10:	2e00      	cmp	r6, #0
 800cc12:	dd03      	ble.n	800cc1c <__multiply+0x90>
 800cc14:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800cc18:	2b00      	cmp	r3, #0
 800cc1a:	d05b      	beq.n	800ccd4 <__multiply+0x148>
 800cc1c:	6106      	str	r6, [r0, #16]
 800cc1e:	b005      	add	sp, #20
 800cc20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cc24:	f843 2b04 	str.w	r2, [r3], #4
 800cc28:	e7d8      	b.n	800cbdc <__multiply+0x50>
 800cc2a:	f8b1 a000 	ldrh.w	sl, [r1]
 800cc2e:	f1ba 0f00 	cmp.w	sl, #0
 800cc32:	d024      	beq.n	800cc7e <__multiply+0xf2>
 800cc34:	f104 0e14 	add.w	lr, r4, #20
 800cc38:	46a9      	mov	r9, r5
 800cc3a:	f04f 0c00 	mov.w	ip, #0
 800cc3e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800cc42:	f8d9 3000 	ldr.w	r3, [r9]
 800cc46:	fa1f fb87 	uxth.w	fp, r7
 800cc4a:	b29b      	uxth	r3, r3
 800cc4c:	fb0a 330b 	mla	r3, sl, fp, r3
 800cc50:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 800cc54:	f8d9 7000 	ldr.w	r7, [r9]
 800cc58:	4463      	add	r3, ip
 800cc5a:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800cc5e:	fb0a c70b 	mla	r7, sl, fp, ip
 800cc62:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 800cc66:	b29b      	uxth	r3, r3
 800cc68:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800cc6c:	4572      	cmp	r2, lr
 800cc6e:	f849 3b04 	str.w	r3, [r9], #4
 800cc72:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 800cc76:	d8e2      	bhi.n	800cc3e <__multiply+0xb2>
 800cc78:	9b01      	ldr	r3, [sp, #4]
 800cc7a:	f845 c003 	str.w	ip, [r5, r3]
 800cc7e:	9b03      	ldr	r3, [sp, #12]
 800cc80:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800cc84:	3104      	adds	r1, #4
 800cc86:	f1b9 0f00 	cmp.w	r9, #0
 800cc8a:	d021      	beq.n	800ccd0 <__multiply+0x144>
 800cc8c:	682b      	ldr	r3, [r5, #0]
 800cc8e:	f104 0c14 	add.w	ip, r4, #20
 800cc92:	46ae      	mov	lr, r5
 800cc94:	f04f 0a00 	mov.w	sl, #0
 800cc98:	f8bc b000 	ldrh.w	fp, [ip]
 800cc9c:	f8be 7002 	ldrh.w	r7, [lr, #2]
 800cca0:	fb09 770b 	mla	r7, r9, fp, r7
 800cca4:	4457      	add	r7, sl
 800cca6:	b29b      	uxth	r3, r3
 800cca8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 800ccac:	f84e 3b04 	str.w	r3, [lr], #4
 800ccb0:	f85c 3b04 	ldr.w	r3, [ip], #4
 800ccb4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ccb8:	f8be 3000 	ldrh.w	r3, [lr]
 800ccbc:	fb09 330a 	mla	r3, r9, sl, r3
 800ccc0:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 800ccc4:	4562      	cmp	r2, ip
 800ccc6:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800ccca:	d8e5      	bhi.n	800cc98 <__multiply+0x10c>
 800cccc:	9f01      	ldr	r7, [sp, #4]
 800ccce:	51eb      	str	r3, [r5, r7]
 800ccd0:	3504      	adds	r5, #4
 800ccd2:	e799      	b.n	800cc08 <__multiply+0x7c>
 800ccd4:	3e01      	subs	r6, #1
 800ccd6:	e79b      	b.n	800cc10 <__multiply+0x84>
 800ccd8:	0800fc34 	.word	0x0800fc34
 800ccdc:	0800fc45 	.word	0x0800fc45

0800cce0 <__pow5mult>:
 800cce0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800cce4:	4615      	mov	r5, r2
 800cce6:	f012 0203 	ands.w	r2, r2, #3
 800ccea:	4607      	mov	r7, r0
 800ccec:	460e      	mov	r6, r1
 800ccee:	d007      	beq.n	800cd00 <__pow5mult+0x20>
 800ccf0:	4c25      	ldr	r4, [pc, #148]	@ (800cd88 <__pow5mult+0xa8>)
 800ccf2:	3a01      	subs	r2, #1
 800ccf4:	2300      	movs	r3, #0
 800ccf6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800ccfa:	f7ff fe9f 	bl	800ca3c <__multadd>
 800ccfe:	4606      	mov	r6, r0
 800cd00:	10ad      	asrs	r5, r5, #2
 800cd02:	d03d      	beq.n	800cd80 <__pow5mult+0xa0>
 800cd04:	69fc      	ldr	r4, [r7, #28]
 800cd06:	b97c      	cbnz	r4, 800cd28 <__pow5mult+0x48>
 800cd08:	2010      	movs	r0, #16
 800cd0a:	f7ff fd7f 	bl	800c80c <malloc>
 800cd0e:	4602      	mov	r2, r0
 800cd10:	61f8      	str	r0, [r7, #28]
 800cd12:	b928      	cbnz	r0, 800cd20 <__pow5mult+0x40>
 800cd14:	4b1d      	ldr	r3, [pc, #116]	@ (800cd8c <__pow5mult+0xac>)
 800cd16:	481e      	ldr	r0, [pc, #120]	@ (800cd90 <__pow5mult+0xb0>)
 800cd18:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800cd1c:	f000 fda2 	bl	800d864 <__assert_func>
 800cd20:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800cd24:	6004      	str	r4, [r0, #0]
 800cd26:	60c4      	str	r4, [r0, #12]
 800cd28:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800cd2c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800cd30:	b94c      	cbnz	r4, 800cd46 <__pow5mult+0x66>
 800cd32:	f240 2171 	movw	r1, #625	@ 0x271
 800cd36:	4638      	mov	r0, r7
 800cd38:	f7ff ff12 	bl	800cb60 <__i2b>
 800cd3c:	2300      	movs	r3, #0
 800cd3e:	f8c8 0008 	str.w	r0, [r8, #8]
 800cd42:	4604      	mov	r4, r0
 800cd44:	6003      	str	r3, [r0, #0]
 800cd46:	f04f 0900 	mov.w	r9, #0
 800cd4a:	07eb      	lsls	r3, r5, #31
 800cd4c:	d50a      	bpl.n	800cd64 <__pow5mult+0x84>
 800cd4e:	4631      	mov	r1, r6
 800cd50:	4622      	mov	r2, r4
 800cd52:	4638      	mov	r0, r7
 800cd54:	f7ff ff1a 	bl	800cb8c <__multiply>
 800cd58:	4631      	mov	r1, r6
 800cd5a:	4680      	mov	r8, r0
 800cd5c:	4638      	mov	r0, r7
 800cd5e:	f7ff fe4b 	bl	800c9f8 <_Bfree>
 800cd62:	4646      	mov	r6, r8
 800cd64:	106d      	asrs	r5, r5, #1
 800cd66:	d00b      	beq.n	800cd80 <__pow5mult+0xa0>
 800cd68:	6820      	ldr	r0, [r4, #0]
 800cd6a:	b938      	cbnz	r0, 800cd7c <__pow5mult+0x9c>
 800cd6c:	4622      	mov	r2, r4
 800cd6e:	4621      	mov	r1, r4
 800cd70:	4638      	mov	r0, r7
 800cd72:	f7ff ff0b 	bl	800cb8c <__multiply>
 800cd76:	6020      	str	r0, [r4, #0]
 800cd78:	f8c0 9000 	str.w	r9, [r0]
 800cd7c:	4604      	mov	r4, r0
 800cd7e:	e7e4      	b.n	800cd4a <__pow5mult+0x6a>
 800cd80:	4630      	mov	r0, r6
 800cd82:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800cd86:	bf00      	nop
 800cd88:	0800fca0 	.word	0x0800fca0
 800cd8c:	0800fbc5 	.word	0x0800fbc5
 800cd90:	0800fc45 	.word	0x0800fc45

0800cd94 <__lshift>:
 800cd94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cd98:	460c      	mov	r4, r1
 800cd9a:	6849      	ldr	r1, [r1, #4]
 800cd9c:	6923      	ldr	r3, [r4, #16]
 800cd9e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800cda2:	68a3      	ldr	r3, [r4, #8]
 800cda4:	4607      	mov	r7, r0
 800cda6:	4691      	mov	r9, r2
 800cda8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800cdac:	f108 0601 	add.w	r6, r8, #1
 800cdb0:	42b3      	cmp	r3, r6
 800cdb2:	db0b      	blt.n	800cdcc <__lshift+0x38>
 800cdb4:	4638      	mov	r0, r7
 800cdb6:	f7ff fddf 	bl	800c978 <_Balloc>
 800cdba:	4605      	mov	r5, r0
 800cdbc:	b948      	cbnz	r0, 800cdd2 <__lshift+0x3e>
 800cdbe:	4602      	mov	r2, r0
 800cdc0:	4b28      	ldr	r3, [pc, #160]	@ (800ce64 <__lshift+0xd0>)
 800cdc2:	4829      	ldr	r0, [pc, #164]	@ (800ce68 <__lshift+0xd4>)
 800cdc4:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800cdc8:	f000 fd4c 	bl	800d864 <__assert_func>
 800cdcc:	3101      	adds	r1, #1
 800cdce:	005b      	lsls	r3, r3, #1
 800cdd0:	e7ee      	b.n	800cdb0 <__lshift+0x1c>
 800cdd2:	2300      	movs	r3, #0
 800cdd4:	f100 0114 	add.w	r1, r0, #20
 800cdd8:	f100 0210 	add.w	r2, r0, #16
 800cddc:	4618      	mov	r0, r3
 800cdde:	4553      	cmp	r3, sl
 800cde0:	db33      	blt.n	800ce4a <__lshift+0xb6>
 800cde2:	6920      	ldr	r0, [r4, #16]
 800cde4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800cde8:	f104 0314 	add.w	r3, r4, #20
 800cdec:	f019 091f 	ands.w	r9, r9, #31
 800cdf0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800cdf4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800cdf8:	d02b      	beq.n	800ce52 <__lshift+0xbe>
 800cdfa:	f1c9 0e20 	rsb	lr, r9, #32
 800cdfe:	468a      	mov	sl, r1
 800ce00:	2200      	movs	r2, #0
 800ce02:	6818      	ldr	r0, [r3, #0]
 800ce04:	fa00 f009 	lsl.w	r0, r0, r9
 800ce08:	4310      	orrs	r0, r2
 800ce0a:	f84a 0b04 	str.w	r0, [sl], #4
 800ce0e:	f853 2b04 	ldr.w	r2, [r3], #4
 800ce12:	459c      	cmp	ip, r3
 800ce14:	fa22 f20e 	lsr.w	r2, r2, lr
 800ce18:	d8f3      	bhi.n	800ce02 <__lshift+0x6e>
 800ce1a:	ebac 0304 	sub.w	r3, ip, r4
 800ce1e:	3b15      	subs	r3, #21
 800ce20:	f023 0303 	bic.w	r3, r3, #3
 800ce24:	3304      	adds	r3, #4
 800ce26:	f104 0015 	add.w	r0, r4, #21
 800ce2a:	4584      	cmp	ip, r0
 800ce2c:	bf38      	it	cc
 800ce2e:	2304      	movcc	r3, #4
 800ce30:	50ca      	str	r2, [r1, r3]
 800ce32:	b10a      	cbz	r2, 800ce38 <__lshift+0xa4>
 800ce34:	f108 0602 	add.w	r6, r8, #2
 800ce38:	3e01      	subs	r6, #1
 800ce3a:	4638      	mov	r0, r7
 800ce3c:	612e      	str	r6, [r5, #16]
 800ce3e:	4621      	mov	r1, r4
 800ce40:	f7ff fdda 	bl	800c9f8 <_Bfree>
 800ce44:	4628      	mov	r0, r5
 800ce46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ce4a:	f842 0f04 	str.w	r0, [r2, #4]!
 800ce4e:	3301      	adds	r3, #1
 800ce50:	e7c5      	b.n	800cdde <__lshift+0x4a>
 800ce52:	3904      	subs	r1, #4
 800ce54:	f853 2b04 	ldr.w	r2, [r3], #4
 800ce58:	f841 2f04 	str.w	r2, [r1, #4]!
 800ce5c:	459c      	cmp	ip, r3
 800ce5e:	d8f9      	bhi.n	800ce54 <__lshift+0xc0>
 800ce60:	e7ea      	b.n	800ce38 <__lshift+0xa4>
 800ce62:	bf00      	nop
 800ce64:	0800fc34 	.word	0x0800fc34
 800ce68:	0800fc45 	.word	0x0800fc45

0800ce6c <__mcmp>:
 800ce6c:	690a      	ldr	r2, [r1, #16]
 800ce6e:	4603      	mov	r3, r0
 800ce70:	6900      	ldr	r0, [r0, #16]
 800ce72:	1a80      	subs	r0, r0, r2
 800ce74:	b530      	push	{r4, r5, lr}
 800ce76:	d10e      	bne.n	800ce96 <__mcmp+0x2a>
 800ce78:	3314      	adds	r3, #20
 800ce7a:	3114      	adds	r1, #20
 800ce7c:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 800ce80:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800ce84:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800ce88:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800ce8c:	4295      	cmp	r5, r2
 800ce8e:	d003      	beq.n	800ce98 <__mcmp+0x2c>
 800ce90:	d205      	bcs.n	800ce9e <__mcmp+0x32>
 800ce92:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800ce96:	bd30      	pop	{r4, r5, pc}
 800ce98:	42a3      	cmp	r3, r4
 800ce9a:	d3f3      	bcc.n	800ce84 <__mcmp+0x18>
 800ce9c:	e7fb      	b.n	800ce96 <__mcmp+0x2a>
 800ce9e:	2001      	movs	r0, #1
 800cea0:	e7f9      	b.n	800ce96 <__mcmp+0x2a>
	...

0800cea4 <__mdiff>:
 800cea4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cea8:	4689      	mov	r9, r1
 800ceaa:	4606      	mov	r6, r0
 800ceac:	4611      	mov	r1, r2
 800ceae:	4648      	mov	r0, r9
 800ceb0:	4614      	mov	r4, r2
 800ceb2:	f7ff ffdb 	bl	800ce6c <__mcmp>
 800ceb6:	1e05      	subs	r5, r0, #0
 800ceb8:	d112      	bne.n	800cee0 <__mdiff+0x3c>
 800ceba:	4629      	mov	r1, r5
 800cebc:	4630      	mov	r0, r6
 800cebe:	f7ff fd5b 	bl	800c978 <_Balloc>
 800cec2:	4602      	mov	r2, r0
 800cec4:	b928      	cbnz	r0, 800ced2 <__mdiff+0x2e>
 800cec6:	4b3f      	ldr	r3, [pc, #252]	@ (800cfc4 <__mdiff+0x120>)
 800cec8:	f240 2137 	movw	r1, #567	@ 0x237
 800cecc:	483e      	ldr	r0, [pc, #248]	@ (800cfc8 <__mdiff+0x124>)
 800cece:	f000 fcc9 	bl	800d864 <__assert_func>
 800ced2:	2301      	movs	r3, #1
 800ced4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ced8:	4610      	mov	r0, r2
 800ceda:	b003      	add	sp, #12
 800cedc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cee0:	bfbc      	itt	lt
 800cee2:	464b      	movlt	r3, r9
 800cee4:	46a1      	movlt	r9, r4
 800cee6:	4630      	mov	r0, r6
 800cee8:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800ceec:	bfba      	itte	lt
 800ceee:	461c      	movlt	r4, r3
 800cef0:	2501      	movlt	r5, #1
 800cef2:	2500      	movge	r5, #0
 800cef4:	f7ff fd40 	bl	800c978 <_Balloc>
 800cef8:	4602      	mov	r2, r0
 800cefa:	b918      	cbnz	r0, 800cf04 <__mdiff+0x60>
 800cefc:	4b31      	ldr	r3, [pc, #196]	@ (800cfc4 <__mdiff+0x120>)
 800cefe:	f240 2145 	movw	r1, #581	@ 0x245
 800cf02:	e7e3      	b.n	800cecc <__mdiff+0x28>
 800cf04:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800cf08:	6926      	ldr	r6, [r4, #16]
 800cf0a:	60c5      	str	r5, [r0, #12]
 800cf0c:	f109 0310 	add.w	r3, r9, #16
 800cf10:	f109 0514 	add.w	r5, r9, #20
 800cf14:	f104 0e14 	add.w	lr, r4, #20
 800cf18:	f100 0b14 	add.w	fp, r0, #20
 800cf1c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 800cf20:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 800cf24:	9301      	str	r3, [sp, #4]
 800cf26:	46d9      	mov	r9, fp
 800cf28:	f04f 0c00 	mov.w	ip, #0
 800cf2c:	9b01      	ldr	r3, [sp, #4]
 800cf2e:	f85e 0b04 	ldr.w	r0, [lr], #4
 800cf32:	f853 af04 	ldr.w	sl, [r3, #4]!
 800cf36:	9301      	str	r3, [sp, #4]
 800cf38:	fa1f f38a 	uxth.w	r3, sl
 800cf3c:	4619      	mov	r1, r3
 800cf3e:	b283      	uxth	r3, r0
 800cf40:	1acb      	subs	r3, r1, r3
 800cf42:	0c00      	lsrs	r0, r0, #16
 800cf44:	4463      	add	r3, ip
 800cf46:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800cf4a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800cf4e:	b29b      	uxth	r3, r3
 800cf50:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800cf54:	4576      	cmp	r6, lr
 800cf56:	f849 3b04 	str.w	r3, [r9], #4
 800cf5a:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800cf5e:	d8e5      	bhi.n	800cf2c <__mdiff+0x88>
 800cf60:	1b33      	subs	r3, r6, r4
 800cf62:	3b15      	subs	r3, #21
 800cf64:	f023 0303 	bic.w	r3, r3, #3
 800cf68:	3415      	adds	r4, #21
 800cf6a:	3304      	adds	r3, #4
 800cf6c:	42a6      	cmp	r6, r4
 800cf6e:	bf38      	it	cc
 800cf70:	2304      	movcc	r3, #4
 800cf72:	441d      	add	r5, r3
 800cf74:	445b      	add	r3, fp
 800cf76:	461e      	mov	r6, r3
 800cf78:	462c      	mov	r4, r5
 800cf7a:	4544      	cmp	r4, r8
 800cf7c:	d30e      	bcc.n	800cf9c <__mdiff+0xf8>
 800cf7e:	f108 0103 	add.w	r1, r8, #3
 800cf82:	1b49      	subs	r1, r1, r5
 800cf84:	f021 0103 	bic.w	r1, r1, #3
 800cf88:	3d03      	subs	r5, #3
 800cf8a:	45a8      	cmp	r8, r5
 800cf8c:	bf38      	it	cc
 800cf8e:	2100      	movcc	r1, #0
 800cf90:	440b      	add	r3, r1
 800cf92:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800cf96:	b191      	cbz	r1, 800cfbe <__mdiff+0x11a>
 800cf98:	6117      	str	r7, [r2, #16]
 800cf9a:	e79d      	b.n	800ced8 <__mdiff+0x34>
 800cf9c:	f854 1b04 	ldr.w	r1, [r4], #4
 800cfa0:	46e6      	mov	lr, ip
 800cfa2:	0c08      	lsrs	r0, r1, #16
 800cfa4:	fa1c fc81 	uxtah	ip, ip, r1
 800cfa8:	4471      	add	r1, lr
 800cfaa:	eb00 402c 	add.w	r0, r0, ip, asr #16
 800cfae:	b289      	uxth	r1, r1
 800cfb0:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800cfb4:	f846 1b04 	str.w	r1, [r6], #4
 800cfb8:	ea4f 4c20 	mov.w	ip, r0, asr #16
 800cfbc:	e7dd      	b.n	800cf7a <__mdiff+0xd6>
 800cfbe:	3f01      	subs	r7, #1
 800cfc0:	e7e7      	b.n	800cf92 <__mdiff+0xee>
 800cfc2:	bf00      	nop
 800cfc4:	0800fc34 	.word	0x0800fc34
 800cfc8:	0800fc45 	.word	0x0800fc45

0800cfcc <__d2b>:
 800cfcc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800cfd0:	460f      	mov	r7, r1
 800cfd2:	2101      	movs	r1, #1
 800cfd4:	ec59 8b10 	vmov	r8, r9, d0
 800cfd8:	4616      	mov	r6, r2
 800cfda:	f7ff fccd 	bl	800c978 <_Balloc>
 800cfde:	4604      	mov	r4, r0
 800cfe0:	b930      	cbnz	r0, 800cff0 <__d2b+0x24>
 800cfe2:	4602      	mov	r2, r0
 800cfe4:	4b23      	ldr	r3, [pc, #140]	@ (800d074 <__d2b+0xa8>)
 800cfe6:	4824      	ldr	r0, [pc, #144]	@ (800d078 <__d2b+0xac>)
 800cfe8:	f240 310f 	movw	r1, #783	@ 0x30f
 800cfec:	f000 fc3a 	bl	800d864 <__assert_func>
 800cff0:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800cff4:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800cff8:	b10d      	cbz	r5, 800cffe <__d2b+0x32>
 800cffa:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800cffe:	9301      	str	r3, [sp, #4]
 800d000:	f1b8 0300 	subs.w	r3, r8, #0
 800d004:	d023      	beq.n	800d04e <__d2b+0x82>
 800d006:	4668      	mov	r0, sp
 800d008:	9300      	str	r3, [sp, #0]
 800d00a:	f7ff fd7c 	bl	800cb06 <__lo0bits>
 800d00e:	e9dd 1200 	ldrd	r1, r2, [sp]
 800d012:	b1d0      	cbz	r0, 800d04a <__d2b+0x7e>
 800d014:	f1c0 0320 	rsb	r3, r0, #32
 800d018:	fa02 f303 	lsl.w	r3, r2, r3
 800d01c:	430b      	orrs	r3, r1
 800d01e:	40c2      	lsrs	r2, r0
 800d020:	6163      	str	r3, [r4, #20]
 800d022:	9201      	str	r2, [sp, #4]
 800d024:	9b01      	ldr	r3, [sp, #4]
 800d026:	61a3      	str	r3, [r4, #24]
 800d028:	2b00      	cmp	r3, #0
 800d02a:	bf0c      	ite	eq
 800d02c:	2201      	moveq	r2, #1
 800d02e:	2202      	movne	r2, #2
 800d030:	6122      	str	r2, [r4, #16]
 800d032:	b1a5      	cbz	r5, 800d05e <__d2b+0x92>
 800d034:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800d038:	4405      	add	r5, r0
 800d03a:	603d      	str	r5, [r7, #0]
 800d03c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 800d040:	6030      	str	r0, [r6, #0]
 800d042:	4620      	mov	r0, r4
 800d044:	b003      	add	sp, #12
 800d046:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d04a:	6161      	str	r1, [r4, #20]
 800d04c:	e7ea      	b.n	800d024 <__d2b+0x58>
 800d04e:	a801      	add	r0, sp, #4
 800d050:	f7ff fd59 	bl	800cb06 <__lo0bits>
 800d054:	9b01      	ldr	r3, [sp, #4]
 800d056:	6163      	str	r3, [r4, #20]
 800d058:	3020      	adds	r0, #32
 800d05a:	2201      	movs	r2, #1
 800d05c:	e7e8      	b.n	800d030 <__d2b+0x64>
 800d05e:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d062:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800d066:	6038      	str	r0, [r7, #0]
 800d068:	6918      	ldr	r0, [r3, #16]
 800d06a:	f7ff fd2d 	bl	800cac8 <__hi0bits>
 800d06e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d072:	e7e5      	b.n	800d040 <__d2b+0x74>
 800d074:	0800fc34 	.word	0x0800fc34
 800d078:	0800fc45 	.word	0x0800fc45

0800d07c <__ssputs_r>:
 800d07c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d080:	688e      	ldr	r6, [r1, #8]
 800d082:	461f      	mov	r7, r3
 800d084:	42be      	cmp	r6, r7
 800d086:	680b      	ldr	r3, [r1, #0]
 800d088:	4682      	mov	sl, r0
 800d08a:	460c      	mov	r4, r1
 800d08c:	4690      	mov	r8, r2
 800d08e:	d82d      	bhi.n	800d0ec <__ssputs_r+0x70>
 800d090:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d094:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800d098:	d026      	beq.n	800d0e8 <__ssputs_r+0x6c>
 800d09a:	6965      	ldr	r5, [r4, #20]
 800d09c:	6909      	ldr	r1, [r1, #16]
 800d09e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800d0a2:	eba3 0901 	sub.w	r9, r3, r1
 800d0a6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800d0aa:	1c7b      	adds	r3, r7, #1
 800d0ac:	444b      	add	r3, r9
 800d0ae:	106d      	asrs	r5, r5, #1
 800d0b0:	429d      	cmp	r5, r3
 800d0b2:	bf38      	it	cc
 800d0b4:	461d      	movcc	r5, r3
 800d0b6:	0553      	lsls	r3, r2, #21
 800d0b8:	d527      	bpl.n	800d10a <__ssputs_r+0x8e>
 800d0ba:	4629      	mov	r1, r5
 800d0bc:	f7ff fbd0 	bl	800c860 <_malloc_r>
 800d0c0:	4606      	mov	r6, r0
 800d0c2:	b360      	cbz	r0, 800d11e <__ssputs_r+0xa2>
 800d0c4:	6921      	ldr	r1, [r4, #16]
 800d0c6:	464a      	mov	r2, r9
 800d0c8:	f7fe fcfb 	bl	800bac2 <memcpy>
 800d0cc:	89a3      	ldrh	r3, [r4, #12]
 800d0ce:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800d0d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d0d6:	81a3      	strh	r3, [r4, #12]
 800d0d8:	6126      	str	r6, [r4, #16]
 800d0da:	6165      	str	r5, [r4, #20]
 800d0dc:	444e      	add	r6, r9
 800d0de:	eba5 0509 	sub.w	r5, r5, r9
 800d0e2:	6026      	str	r6, [r4, #0]
 800d0e4:	60a5      	str	r5, [r4, #8]
 800d0e6:	463e      	mov	r6, r7
 800d0e8:	42be      	cmp	r6, r7
 800d0ea:	d900      	bls.n	800d0ee <__ssputs_r+0x72>
 800d0ec:	463e      	mov	r6, r7
 800d0ee:	6820      	ldr	r0, [r4, #0]
 800d0f0:	4632      	mov	r2, r6
 800d0f2:	4641      	mov	r1, r8
 800d0f4:	f000 fb6a 	bl	800d7cc <memmove>
 800d0f8:	68a3      	ldr	r3, [r4, #8]
 800d0fa:	1b9b      	subs	r3, r3, r6
 800d0fc:	60a3      	str	r3, [r4, #8]
 800d0fe:	6823      	ldr	r3, [r4, #0]
 800d100:	4433      	add	r3, r6
 800d102:	6023      	str	r3, [r4, #0]
 800d104:	2000      	movs	r0, #0
 800d106:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d10a:	462a      	mov	r2, r5
 800d10c:	f000 fbee 	bl	800d8ec <_realloc_r>
 800d110:	4606      	mov	r6, r0
 800d112:	2800      	cmp	r0, #0
 800d114:	d1e0      	bne.n	800d0d8 <__ssputs_r+0x5c>
 800d116:	6921      	ldr	r1, [r4, #16]
 800d118:	4650      	mov	r0, sl
 800d11a:	f7ff fb2d 	bl	800c778 <_free_r>
 800d11e:	230c      	movs	r3, #12
 800d120:	f8ca 3000 	str.w	r3, [sl]
 800d124:	89a3      	ldrh	r3, [r4, #12]
 800d126:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d12a:	81a3      	strh	r3, [r4, #12]
 800d12c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d130:	e7e9      	b.n	800d106 <__ssputs_r+0x8a>
	...

0800d134 <_svfiprintf_r>:
 800d134:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d138:	4698      	mov	r8, r3
 800d13a:	898b      	ldrh	r3, [r1, #12]
 800d13c:	061b      	lsls	r3, r3, #24
 800d13e:	b09d      	sub	sp, #116	@ 0x74
 800d140:	4607      	mov	r7, r0
 800d142:	460d      	mov	r5, r1
 800d144:	4614      	mov	r4, r2
 800d146:	d510      	bpl.n	800d16a <_svfiprintf_r+0x36>
 800d148:	690b      	ldr	r3, [r1, #16]
 800d14a:	b973      	cbnz	r3, 800d16a <_svfiprintf_r+0x36>
 800d14c:	2140      	movs	r1, #64	@ 0x40
 800d14e:	f7ff fb87 	bl	800c860 <_malloc_r>
 800d152:	6028      	str	r0, [r5, #0]
 800d154:	6128      	str	r0, [r5, #16]
 800d156:	b930      	cbnz	r0, 800d166 <_svfiprintf_r+0x32>
 800d158:	230c      	movs	r3, #12
 800d15a:	603b      	str	r3, [r7, #0]
 800d15c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d160:	b01d      	add	sp, #116	@ 0x74
 800d162:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d166:	2340      	movs	r3, #64	@ 0x40
 800d168:	616b      	str	r3, [r5, #20]
 800d16a:	2300      	movs	r3, #0
 800d16c:	9309      	str	r3, [sp, #36]	@ 0x24
 800d16e:	2320      	movs	r3, #32
 800d170:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d174:	f8cd 800c 	str.w	r8, [sp, #12]
 800d178:	2330      	movs	r3, #48	@ 0x30
 800d17a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800d318 <_svfiprintf_r+0x1e4>
 800d17e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d182:	f04f 0901 	mov.w	r9, #1
 800d186:	4623      	mov	r3, r4
 800d188:	469a      	mov	sl, r3
 800d18a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d18e:	b10a      	cbz	r2, 800d194 <_svfiprintf_r+0x60>
 800d190:	2a25      	cmp	r2, #37	@ 0x25
 800d192:	d1f9      	bne.n	800d188 <_svfiprintf_r+0x54>
 800d194:	ebba 0b04 	subs.w	fp, sl, r4
 800d198:	d00b      	beq.n	800d1b2 <_svfiprintf_r+0x7e>
 800d19a:	465b      	mov	r3, fp
 800d19c:	4622      	mov	r2, r4
 800d19e:	4629      	mov	r1, r5
 800d1a0:	4638      	mov	r0, r7
 800d1a2:	f7ff ff6b 	bl	800d07c <__ssputs_r>
 800d1a6:	3001      	adds	r0, #1
 800d1a8:	f000 80a7 	beq.w	800d2fa <_svfiprintf_r+0x1c6>
 800d1ac:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d1ae:	445a      	add	r2, fp
 800d1b0:	9209      	str	r2, [sp, #36]	@ 0x24
 800d1b2:	f89a 3000 	ldrb.w	r3, [sl]
 800d1b6:	2b00      	cmp	r3, #0
 800d1b8:	f000 809f 	beq.w	800d2fa <_svfiprintf_r+0x1c6>
 800d1bc:	2300      	movs	r3, #0
 800d1be:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d1c2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d1c6:	f10a 0a01 	add.w	sl, sl, #1
 800d1ca:	9304      	str	r3, [sp, #16]
 800d1cc:	9307      	str	r3, [sp, #28]
 800d1ce:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d1d2:	931a      	str	r3, [sp, #104]	@ 0x68
 800d1d4:	4654      	mov	r4, sl
 800d1d6:	2205      	movs	r2, #5
 800d1d8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d1dc:	484e      	ldr	r0, [pc, #312]	@ (800d318 <_svfiprintf_r+0x1e4>)
 800d1de:	f7f2 fff7 	bl	80001d0 <memchr>
 800d1e2:	9a04      	ldr	r2, [sp, #16]
 800d1e4:	b9d8      	cbnz	r0, 800d21e <_svfiprintf_r+0xea>
 800d1e6:	06d0      	lsls	r0, r2, #27
 800d1e8:	bf44      	itt	mi
 800d1ea:	2320      	movmi	r3, #32
 800d1ec:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d1f0:	0711      	lsls	r1, r2, #28
 800d1f2:	bf44      	itt	mi
 800d1f4:	232b      	movmi	r3, #43	@ 0x2b
 800d1f6:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d1fa:	f89a 3000 	ldrb.w	r3, [sl]
 800d1fe:	2b2a      	cmp	r3, #42	@ 0x2a
 800d200:	d015      	beq.n	800d22e <_svfiprintf_r+0xfa>
 800d202:	9a07      	ldr	r2, [sp, #28]
 800d204:	4654      	mov	r4, sl
 800d206:	2000      	movs	r0, #0
 800d208:	f04f 0c0a 	mov.w	ip, #10
 800d20c:	4621      	mov	r1, r4
 800d20e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d212:	3b30      	subs	r3, #48	@ 0x30
 800d214:	2b09      	cmp	r3, #9
 800d216:	d94b      	bls.n	800d2b0 <_svfiprintf_r+0x17c>
 800d218:	b1b0      	cbz	r0, 800d248 <_svfiprintf_r+0x114>
 800d21a:	9207      	str	r2, [sp, #28]
 800d21c:	e014      	b.n	800d248 <_svfiprintf_r+0x114>
 800d21e:	eba0 0308 	sub.w	r3, r0, r8
 800d222:	fa09 f303 	lsl.w	r3, r9, r3
 800d226:	4313      	orrs	r3, r2
 800d228:	9304      	str	r3, [sp, #16]
 800d22a:	46a2      	mov	sl, r4
 800d22c:	e7d2      	b.n	800d1d4 <_svfiprintf_r+0xa0>
 800d22e:	9b03      	ldr	r3, [sp, #12]
 800d230:	1d19      	adds	r1, r3, #4
 800d232:	681b      	ldr	r3, [r3, #0]
 800d234:	9103      	str	r1, [sp, #12]
 800d236:	2b00      	cmp	r3, #0
 800d238:	bfbb      	ittet	lt
 800d23a:	425b      	neglt	r3, r3
 800d23c:	f042 0202 	orrlt.w	r2, r2, #2
 800d240:	9307      	strge	r3, [sp, #28]
 800d242:	9307      	strlt	r3, [sp, #28]
 800d244:	bfb8      	it	lt
 800d246:	9204      	strlt	r2, [sp, #16]
 800d248:	7823      	ldrb	r3, [r4, #0]
 800d24a:	2b2e      	cmp	r3, #46	@ 0x2e
 800d24c:	d10a      	bne.n	800d264 <_svfiprintf_r+0x130>
 800d24e:	7863      	ldrb	r3, [r4, #1]
 800d250:	2b2a      	cmp	r3, #42	@ 0x2a
 800d252:	d132      	bne.n	800d2ba <_svfiprintf_r+0x186>
 800d254:	9b03      	ldr	r3, [sp, #12]
 800d256:	1d1a      	adds	r2, r3, #4
 800d258:	681b      	ldr	r3, [r3, #0]
 800d25a:	9203      	str	r2, [sp, #12]
 800d25c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d260:	3402      	adds	r4, #2
 800d262:	9305      	str	r3, [sp, #20]
 800d264:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800d328 <_svfiprintf_r+0x1f4>
 800d268:	7821      	ldrb	r1, [r4, #0]
 800d26a:	2203      	movs	r2, #3
 800d26c:	4650      	mov	r0, sl
 800d26e:	f7f2 ffaf 	bl	80001d0 <memchr>
 800d272:	b138      	cbz	r0, 800d284 <_svfiprintf_r+0x150>
 800d274:	9b04      	ldr	r3, [sp, #16]
 800d276:	eba0 000a 	sub.w	r0, r0, sl
 800d27a:	2240      	movs	r2, #64	@ 0x40
 800d27c:	4082      	lsls	r2, r0
 800d27e:	4313      	orrs	r3, r2
 800d280:	3401      	adds	r4, #1
 800d282:	9304      	str	r3, [sp, #16]
 800d284:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d288:	4824      	ldr	r0, [pc, #144]	@ (800d31c <_svfiprintf_r+0x1e8>)
 800d28a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d28e:	2206      	movs	r2, #6
 800d290:	f7f2 ff9e 	bl	80001d0 <memchr>
 800d294:	2800      	cmp	r0, #0
 800d296:	d036      	beq.n	800d306 <_svfiprintf_r+0x1d2>
 800d298:	4b21      	ldr	r3, [pc, #132]	@ (800d320 <_svfiprintf_r+0x1ec>)
 800d29a:	bb1b      	cbnz	r3, 800d2e4 <_svfiprintf_r+0x1b0>
 800d29c:	9b03      	ldr	r3, [sp, #12]
 800d29e:	3307      	adds	r3, #7
 800d2a0:	f023 0307 	bic.w	r3, r3, #7
 800d2a4:	3308      	adds	r3, #8
 800d2a6:	9303      	str	r3, [sp, #12]
 800d2a8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d2aa:	4433      	add	r3, r6
 800d2ac:	9309      	str	r3, [sp, #36]	@ 0x24
 800d2ae:	e76a      	b.n	800d186 <_svfiprintf_r+0x52>
 800d2b0:	fb0c 3202 	mla	r2, ip, r2, r3
 800d2b4:	460c      	mov	r4, r1
 800d2b6:	2001      	movs	r0, #1
 800d2b8:	e7a8      	b.n	800d20c <_svfiprintf_r+0xd8>
 800d2ba:	2300      	movs	r3, #0
 800d2bc:	3401      	adds	r4, #1
 800d2be:	9305      	str	r3, [sp, #20]
 800d2c0:	4619      	mov	r1, r3
 800d2c2:	f04f 0c0a 	mov.w	ip, #10
 800d2c6:	4620      	mov	r0, r4
 800d2c8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d2cc:	3a30      	subs	r2, #48	@ 0x30
 800d2ce:	2a09      	cmp	r2, #9
 800d2d0:	d903      	bls.n	800d2da <_svfiprintf_r+0x1a6>
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	d0c6      	beq.n	800d264 <_svfiprintf_r+0x130>
 800d2d6:	9105      	str	r1, [sp, #20]
 800d2d8:	e7c4      	b.n	800d264 <_svfiprintf_r+0x130>
 800d2da:	fb0c 2101 	mla	r1, ip, r1, r2
 800d2de:	4604      	mov	r4, r0
 800d2e0:	2301      	movs	r3, #1
 800d2e2:	e7f0      	b.n	800d2c6 <_svfiprintf_r+0x192>
 800d2e4:	ab03      	add	r3, sp, #12
 800d2e6:	9300      	str	r3, [sp, #0]
 800d2e8:	462a      	mov	r2, r5
 800d2ea:	4b0e      	ldr	r3, [pc, #56]	@ (800d324 <_svfiprintf_r+0x1f0>)
 800d2ec:	a904      	add	r1, sp, #16
 800d2ee:	4638      	mov	r0, r7
 800d2f0:	f7fd fd72 	bl	800add8 <_printf_float>
 800d2f4:	1c42      	adds	r2, r0, #1
 800d2f6:	4606      	mov	r6, r0
 800d2f8:	d1d6      	bne.n	800d2a8 <_svfiprintf_r+0x174>
 800d2fa:	89ab      	ldrh	r3, [r5, #12]
 800d2fc:	065b      	lsls	r3, r3, #25
 800d2fe:	f53f af2d 	bmi.w	800d15c <_svfiprintf_r+0x28>
 800d302:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d304:	e72c      	b.n	800d160 <_svfiprintf_r+0x2c>
 800d306:	ab03      	add	r3, sp, #12
 800d308:	9300      	str	r3, [sp, #0]
 800d30a:	462a      	mov	r2, r5
 800d30c:	4b05      	ldr	r3, [pc, #20]	@ (800d324 <_svfiprintf_r+0x1f0>)
 800d30e:	a904      	add	r1, sp, #16
 800d310:	4638      	mov	r0, r7
 800d312:	f7fd fff9 	bl	800b308 <_printf_i>
 800d316:	e7ed      	b.n	800d2f4 <_svfiprintf_r+0x1c0>
 800d318:	0800fda0 	.word	0x0800fda0
 800d31c:	0800fdaa 	.word	0x0800fdaa
 800d320:	0800add9 	.word	0x0800add9
 800d324:	0800d07d 	.word	0x0800d07d
 800d328:	0800fda6 	.word	0x0800fda6

0800d32c <__sfputc_r>:
 800d32c:	6893      	ldr	r3, [r2, #8]
 800d32e:	3b01      	subs	r3, #1
 800d330:	2b00      	cmp	r3, #0
 800d332:	b410      	push	{r4}
 800d334:	6093      	str	r3, [r2, #8]
 800d336:	da08      	bge.n	800d34a <__sfputc_r+0x1e>
 800d338:	6994      	ldr	r4, [r2, #24]
 800d33a:	42a3      	cmp	r3, r4
 800d33c:	db01      	blt.n	800d342 <__sfputc_r+0x16>
 800d33e:	290a      	cmp	r1, #10
 800d340:	d103      	bne.n	800d34a <__sfputc_r+0x1e>
 800d342:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d346:	f7fe baa8 	b.w	800b89a <__swbuf_r>
 800d34a:	6813      	ldr	r3, [r2, #0]
 800d34c:	1c58      	adds	r0, r3, #1
 800d34e:	6010      	str	r0, [r2, #0]
 800d350:	7019      	strb	r1, [r3, #0]
 800d352:	4608      	mov	r0, r1
 800d354:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d358:	4770      	bx	lr

0800d35a <__sfputs_r>:
 800d35a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d35c:	4606      	mov	r6, r0
 800d35e:	460f      	mov	r7, r1
 800d360:	4614      	mov	r4, r2
 800d362:	18d5      	adds	r5, r2, r3
 800d364:	42ac      	cmp	r4, r5
 800d366:	d101      	bne.n	800d36c <__sfputs_r+0x12>
 800d368:	2000      	movs	r0, #0
 800d36a:	e007      	b.n	800d37c <__sfputs_r+0x22>
 800d36c:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d370:	463a      	mov	r2, r7
 800d372:	4630      	mov	r0, r6
 800d374:	f7ff ffda 	bl	800d32c <__sfputc_r>
 800d378:	1c43      	adds	r3, r0, #1
 800d37a:	d1f3      	bne.n	800d364 <__sfputs_r+0xa>
 800d37c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d380 <_vfiprintf_r>:
 800d380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d384:	460d      	mov	r5, r1
 800d386:	b09d      	sub	sp, #116	@ 0x74
 800d388:	4614      	mov	r4, r2
 800d38a:	4698      	mov	r8, r3
 800d38c:	4606      	mov	r6, r0
 800d38e:	b118      	cbz	r0, 800d398 <_vfiprintf_r+0x18>
 800d390:	6a03      	ldr	r3, [r0, #32]
 800d392:	b90b      	cbnz	r3, 800d398 <_vfiprintf_r+0x18>
 800d394:	f7fe f964 	bl	800b660 <__sinit>
 800d398:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d39a:	07d9      	lsls	r1, r3, #31
 800d39c:	d405      	bmi.n	800d3aa <_vfiprintf_r+0x2a>
 800d39e:	89ab      	ldrh	r3, [r5, #12]
 800d3a0:	059a      	lsls	r2, r3, #22
 800d3a2:	d402      	bmi.n	800d3aa <_vfiprintf_r+0x2a>
 800d3a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d3a6:	f7fe fb8a 	bl	800babe <__retarget_lock_acquire_recursive>
 800d3aa:	89ab      	ldrh	r3, [r5, #12]
 800d3ac:	071b      	lsls	r3, r3, #28
 800d3ae:	d501      	bpl.n	800d3b4 <_vfiprintf_r+0x34>
 800d3b0:	692b      	ldr	r3, [r5, #16]
 800d3b2:	b99b      	cbnz	r3, 800d3dc <_vfiprintf_r+0x5c>
 800d3b4:	4629      	mov	r1, r5
 800d3b6:	4630      	mov	r0, r6
 800d3b8:	f7fe faae 	bl	800b918 <__swsetup_r>
 800d3bc:	b170      	cbz	r0, 800d3dc <_vfiprintf_r+0x5c>
 800d3be:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d3c0:	07dc      	lsls	r4, r3, #31
 800d3c2:	d504      	bpl.n	800d3ce <_vfiprintf_r+0x4e>
 800d3c4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d3c8:	b01d      	add	sp, #116	@ 0x74
 800d3ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d3ce:	89ab      	ldrh	r3, [r5, #12]
 800d3d0:	0598      	lsls	r0, r3, #22
 800d3d2:	d4f7      	bmi.n	800d3c4 <_vfiprintf_r+0x44>
 800d3d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d3d6:	f7fe fb73 	bl	800bac0 <__retarget_lock_release_recursive>
 800d3da:	e7f3      	b.n	800d3c4 <_vfiprintf_r+0x44>
 800d3dc:	2300      	movs	r3, #0
 800d3de:	9309      	str	r3, [sp, #36]	@ 0x24
 800d3e0:	2320      	movs	r3, #32
 800d3e2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800d3e6:	f8cd 800c 	str.w	r8, [sp, #12]
 800d3ea:	2330      	movs	r3, #48	@ 0x30
 800d3ec:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800d59c <_vfiprintf_r+0x21c>
 800d3f0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800d3f4:	f04f 0901 	mov.w	r9, #1
 800d3f8:	4623      	mov	r3, r4
 800d3fa:	469a      	mov	sl, r3
 800d3fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d400:	b10a      	cbz	r2, 800d406 <_vfiprintf_r+0x86>
 800d402:	2a25      	cmp	r2, #37	@ 0x25
 800d404:	d1f9      	bne.n	800d3fa <_vfiprintf_r+0x7a>
 800d406:	ebba 0b04 	subs.w	fp, sl, r4
 800d40a:	d00b      	beq.n	800d424 <_vfiprintf_r+0xa4>
 800d40c:	465b      	mov	r3, fp
 800d40e:	4622      	mov	r2, r4
 800d410:	4629      	mov	r1, r5
 800d412:	4630      	mov	r0, r6
 800d414:	f7ff ffa1 	bl	800d35a <__sfputs_r>
 800d418:	3001      	adds	r0, #1
 800d41a:	f000 80a7 	beq.w	800d56c <_vfiprintf_r+0x1ec>
 800d41e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800d420:	445a      	add	r2, fp
 800d422:	9209      	str	r2, [sp, #36]	@ 0x24
 800d424:	f89a 3000 	ldrb.w	r3, [sl]
 800d428:	2b00      	cmp	r3, #0
 800d42a:	f000 809f 	beq.w	800d56c <_vfiprintf_r+0x1ec>
 800d42e:	2300      	movs	r3, #0
 800d430:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 800d434:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d438:	f10a 0a01 	add.w	sl, sl, #1
 800d43c:	9304      	str	r3, [sp, #16]
 800d43e:	9307      	str	r3, [sp, #28]
 800d440:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800d444:	931a      	str	r3, [sp, #104]	@ 0x68
 800d446:	4654      	mov	r4, sl
 800d448:	2205      	movs	r2, #5
 800d44a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d44e:	4853      	ldr	r0, [pc, #332]	@ (800d59c <_vfiprintf_r+0x21c>)
 800d450:	f7f2 febe 	bl	80001d0 <memchr>
 800d454:	9a04      	ldr	r2, [sp, #16]
 800d456:	b9d8      	cbnz	r0, 800d490 <_vfiprintf_r+0x110>
 800d458:	06d1      	lsls	r1, r2, #27
 800d45a:	bf44      	itt	mi
 800d45c:	2320      	movmi	r3, #32
 800d45e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d462:	0713      	lsls	r3, r2, #28
 800d464:	bf44      	itt	mi
 800d466:	232b      	movmi	r3, #43	@ 0x2b
 800d468:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800d46c:	f89a 3000 	ldrb.w	r3, [sl]
 800d470:	2b2a      	cmp	r3, #42	@ 0x2a
 800d472:	d015      	beq.n	800d4a0 <_vfiprintf_r+0x120>
 800d474:	9a07      	ldr	r2, [sp, #28]
 800d476:	4654      	mov	r4, sl
 800d478:	2000      	movs	r0, #0
 800d47a:	f04f 0c0a 	mov.w	ip, #10
 800d47e:	4621      	mov	r1, r4
 800d480:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d484:	3b30      	subs	r3, #48	@ 0x30
 800d486:	2b09      	cmp	r3, #9
 800d488:	d94b      	bls.n	800d522 <_vfiprintf_r+0x1a2>
 800d48a:	b1b0      	cbz	r0, 800d4ba <_vfiprintf_r+0x13a>
 800d48c:	9207      	str	r2, [sp, #28]
 800d48e:	e014      	b.n	800d4ba <_vfiprintf_r+0x13a>
 800d490:	eba0 0308 	sub.w	r3, r0, r8
 800d494:	fa09 f303 	lsl.w	r3, r9, r3
 800d498:	4313      	orrs	r3, r2
 800d49a:	9304      	str	r3, [sp, #16]
 800d49c:	46a2      	mov	sl, r4
 800d49e:	e7d2      	b.n	800d446 <_vfiprintf_r+0xc6>
 800d4a0:	9b03      	ldr	r3, [sp, #12]
 800d4a2:	1d19      	adds	r1, r3, #4
 800d4a4:	681b      	ldr	r3, [r3, #0]
 800d4a6:	9103      	str	r1, [sp, #12]
 800d4a8:	2b00      	cmp	r3, #0
 800d4aa:	bfbb      	ittet	lt
 800d4ac:	425b      	neglt	r3, r3
 800d4ae:	f042 0202 	orrlt.w	r2, r2, #2
 800d4b2:	9307      	strge	r3, [sp, #28]
 800d4b4:	9307      	strlt	r3, [sp, #28]
 800d4b6:	bfb8      	it	lt
 800d4b8:	9204      	strlt	r2, [sp, #16]
 800d4ba:	7823      	ldrb	r3, [r4, #0]
 800d4bc:	2b2e      	cmp	r3, #46	@ 0x2e
 800d4be:	d10a      	bne.n	800d4d6 <_vfiprintf_r+0x156>
 800d4c0:	7863      	ldrb	r3, [r4, #1]
 800d4c2:	2b2a      	cmp	r3, #42	@ 0x2a
 800d4c4:	d132      	bne.n	800d52c <_vfiprintf_r+0x1ac>
 800d4c6:	9b03      	ldr	r3, [sp, #12]
 800d4c8:	1d1a      	adds	r2, r3, #4
 800d4ca:	681b      	ldr	r3, [r3, #0]
 800d4cc:	9203      	str	r2, [sp, #12]
 800d4ce:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800d4d2:	3402      	adds	r4, #2
 800d4d4:	9305      	str	r3, [sp, #20]
 800d4d6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800d5ac <_vfiprintf_r+0x22c>
 800d4da:	7821      	ldrb	r1, [r4, #0]
 800d4dc:	2203      	movs	r2, #3
 800d4de:	4650      	mov	r0, sl
 800d4e0:	f7f2 fe76 	bl	80001d0 <memchr>
 800d4e4:	b138      	cbz	r0, 800d4f6 <_vfiprintf_r+0x176>
 800d4e6:	9b04      	ldr	r3, [sp, #16]
 800d4e8:	eba0 000a 	sub.w	r0, r0, sl
 800d4ec:	2240      	movs	r2, #64	@ 0x40
 800d4ee:	4082      	lsls	r2, r0
 800d4f0:	4313      	orrs	r3, r2
 800d4f2:	3401      	adds	r4, #1
 800d4f4:	9304      	str	r3, [sp, #16]
 800d4f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d4fa:	4829      	ldr	r0, [pc, #164]	@ (800d5a0 <_vfiprintf_r+0x220>)
 800d4fc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800d500:	2206      	movs	r2, #6
 800d502:	f7f2 fe65 	bl	80001d0 <memchr>
 800d506:	2800      	cmp	r0, #0
 800d508:	d03f      	beq.n	800d58a <_vfiprintf_r+0x20a>
 800d50a:	4b26      	ldr	r3, [pc, #152]	@ (800d5a4 <_vfiprintf_r+0x224>)
 800d50c:	bb1b      	cbnz	r3, 800d556 <_vfiprintf_r+0x1d6>
 800d50e:	9b03      	ldr	r3, [sp, #12]
 800d510:	3307      	adds	r3, #7
 800d512:	f023 0307 	bic.w	r3, r3, #7
 800d516:	3308      	adds	r3, #8
 800d518:	9303      	str	r3, [sp, #12]
 800d51a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800d51c:	443b      	add	r3, r7
 800d51e:	9309      	str	r3, [sp, #36]	@ 0x24
 800d520:	e76a      	b.n	800d3f8 <_vfiprintf_r+0x78>
 800d522:	fb0c 3202 	mla	r2, ip, r2, r3
 800d526:	460c      	mov	r4, r1
 800d528:	2001      	movs	r0, #1
 800d52a:	e7a8      	b.n	800d47e <_vfiprintf_r+0xfe>
 800d52c:	2300      	movs	r3, #0
 800d52e:	3401      	adds	r4, #1
 800d530:	9305      	str	r3, [sp, #20]
 800d532:	4619      	mov	r1, r3
 800d534:	f04f 0c0a 	mov.w	ip, #10
 800d538:	4620      	mov	r0, r4
 800d53a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d53e:	3a30      	subs	r2, #48	@ 0x30
 800d540:	2a09      	cmp	r2, #9
 800d542:	d903      	bls.n	800d54c <_vfiprintf_r+0x1cc>
 800d544:	2b00      	cmp	r3, #0
 800d546:	d0c6      	beq.n	800d4d6 <_vfiprintf_r+0x156>
 800d548:	9105      	str	r1, [sp, #20]
 800d54a:	e7c4      	b.n	800d4d6 <_vfiprintf_r+0x156>
 800d54c:	fb0c 2101 	mla	r1, ip, r1, r2
 800d550:	4604      	mov	r4, r0
 800d552:	2301      	movs	r3, #1
 800d554:	e7f0      	b.n	800d538 <_vfiprintf_r+0x1b8>
 800d556:	ab03      	add	r3, sp, #12
 800d558:	9300      	str	r3, [sp, #0]
 800d55a:	462a      	mov	r2, r5
 800d55c:	4b12      	ldr	r3, [pc, #72]	@ (800d5a8 <_vfiprintf_r+0x228>)
 800d55e:	a904      	add	r1, sp, #16
 800d560:	4630      	mov	r0, r6
 800d562:	f7fd fc39 	bl	800add8 <_printf_float>
 800d566:	4607      	mov	r7, r0
 800d568:	1c78      	adds	r0, r7, #1
 800d56a:	d1d6      	bne.n	800d51a <_vfiprintf_r+0x19a>
 800d56c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800d56e:	07d9      	lsls	r1, r3, #31
 800d570:	d405      	bmi.n	800d57e <_vfiprintf_r+0x1fe>
 800d572:	89ab      	ldrh	r3, [r5, #12]
 800d574:	059a      	lsls	r2, r3, #22
 800d576:	d402      	bmi.n	800d57e <_vfiprintf_r+0x1fe>
 800d578:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800d57a:	f7fe faa1 	bl	800bac0 <__retarget_lock_release_recursive>
 800d57e:	89ab      	ldrh	r3, [r5, #12]
 800d580:	065b      	lsls	r3, r3, #25
 800d582:	f53f af1f 	bmi.w	800d3c4 <_vfiprintf_r+0x44>
 800d586:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800d588:	e71e      	b.n	800d3c8 <_vfiprintf_r+0x48>
 800d58a:	ab03      	add	r3, sp, #12
 800d58c:	9300      	str	r3, [sp, #0]
 800d58e:	462a      	mov	r2, r5
 800d590:	4b05      	ldr	r3, [pc, #20]	@ (800d5a8 <_vfiprintf_r+0x228>)
 800d592:	a904      	add	r1, sp, #16
 800d594:	4630      	mov	r0, r6
 800d596:	f7fd feb7 	bl	800b308 <_printf_i>
 800d59a:	e7e4      	b.n	800d566 <_vfiprintf_r+0x1e6>
 800d59c:	0800fda0 	.word	0x0800fda0
 800d5a0:	0800fdaa 	.word	0x0800fdaa
 800d5a4:	0800add9 	.word	0x0800add9
 800d5a8:	0800d35b 	.word	0x0800d35b
 800d5ac:	0800fda6 	.word	0x0800fda6

0800d5b0 <__sflush_r>:
 800d5b0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800d5b4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d5b8:	0716      	lsls	r6, r2, #28
 800d5ba:	4605      	mov	r5, r0
 800d5bc:	460c      	mov	r4, r1
 800d5be:	d454      	bmi.n	800d66a <__sflush_r+0xba>
 800d5c0:	684b      	ldr	r3, [r1, #4]
 800d5c2:	2b00      	cmp	r3, #0
 800d5c4:	dc02      	bgt.n	800d5cc <__sflush_r+0x1c>
 800d5c6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800d5c8:	2b00      	cmp	r3, #0
 800d5ca:	dd48      	ble.n	800d65e <__sflush_r+0xae>
 800d5cc:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d5ce:	2e00      	cmp	r6, #0
 800d5d0:	d045      	beq.n	800d65e <__sflush_r+0xae>
 800d5d2:	2300      	movs	r3, #0
 800d5d4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800d5d8:	682f      	ldr	r7, [r5, #0]
 800d5da:	6a21      	ldr	r1, [r4, #32]
 800d5dc:	602b      	str	r3, [r5, #0]
 800d5de:	d030      	beq.n	800d642 <__sflush_r+0x92>
 800d5e0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800d5e2:	89a3      	ldrh	r3, [r4, #12]
 800d5e4:	0759      	lsls	r1, r3, #29
 800d5e6:	d505      	bpl.n	800d5f4 <__sflush_r+0x44>
 800d5e8:	6863      	ldr	r3, [r4, #4]
 800d5ea:	1ad2      	subs	r2, r2, r3
 800d5ec:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800d5ee:	b10b      	cbz	r3, 800d5f4 <__sflush_r+0x44>
 800d5f0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800d5f2:	1ad2      	subs	r2, r2, r3
 800d5f4:	2300      	movs	r3, #0
 800d5f6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800d5f8:	6a21      	ldr	r1, [r4, #32]
 800d5fa:	4628      	mov	r0, r5
 800d5fc:	47b0      	blx	r6
 800d5fe:	1c43      	adds	r3, r0, #1
 800d600:	89a3      	ldrh	r3, [r4, #12]
 800d602:	d106      	bne.n	800d612 <__sflush_r+0x62>
 800d604:	6829      	ldr	r1, [r5, #0]
 800d606:	291d      	cmp	r1, #29
 800d608:	d82b      	bhi.n	800d662 <__sflush_r+0xb2>
 800d60a:	4a2a      	ldr	r2, [pc, #168]	@ (800d6b4 <__sflush_r+0x104>)
 800d60c:	410a      	asrs	r2, r1
 800d60e:	07d6      	lsls	r6, r2, #31
 800d610:	d427      	bmi.n	800d662 <__sflush_r+0xb2>
 800d612:	2200      	movs	r2, #0
 800d614:	6062      	str	r2, [r4, #4]
 800d616:	04d9      	lsls	r1, r3, #19
 800d618:	6922      	ldr	r2, [r4, #16]
 800d61a:	6022      	str	r2, [r4, #0]
 800d61c:	d504      	bpl.n	800d628 <__sflush_r+0x78>
 800d61e:	1c42      	adds	r2, r0, #1
 800d620:	d101      	bne.n	800d626 <__sflush_r+0x76>
 800d622:	682b      	ldr	r3, [r5, #0]
 800d624:	b903      	cbnz	r3, 800d628 <__sflush_r+0x78>
 800d626:	6560      	str	r0, [r4, #84]	@ 0x54
 800d628:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800d62a:	602f      	str	r7, [r5, #0]
 800d62c:	b1b9      	cbz	r1, 800d65e <__sflush_r+0xae>
 800d62e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800d632:	4299      	cmp	r1, r3
 800d634:	d002      	beq.n	800d63c <__sflush_r+0x8c>
 800d636:	4628      	mov	r0, r5
 800d638:	f7ff f89e 	bl	800c778 <_free_r>
 800d63c:	2300      	movs	r3, #0
 800d63e:	6363      	str	r3, [r4, #52]	@ 0x34
 800d640:	e00d      	b.n	800d65e <__sflush_r+0xae>
 800d642:	2301      	movs	r3, #1
 800d644:	4628      	mov	r0, r5
 800d646:	47b0      	blx	r6
 800d648:	4602      	mov	r2, r0
 800d64a:	1c50      	adds	r0, r2, #1
 800d64c:	d1c9      	bne.n	800d5e2 <__sflush_r+0x32>
 800d64e:	682b      	ldr	r3, [r5, #0]
 800d650:	2b00      	cmp	r3, #0
 800d652:	d0c6      	beq.n	800d5e2 <__sflush_r+0x32>
 800d654:	2b1d      	cmp	r3, #29
 800d656:	d001      	beq.n	800d65c <__sflush_r+0xac>
 800d658:	2b16      	cmp	r3, #22
 800d65a:	d11e      	bne.n	800d69a <__sflush_r+0xea>
 800d65c:	602f      	str	r7, [r5, #0]
 800d65e:	2000      	movs	r0, #0
 800d660:	e022      	b.n	800d6a8 <__sflush_r+0xf8>
 800d662:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d666:	b21b      	sxth	r3, r3
 800d668:	e01b      	b.n	800d6a2 <__sflush_r+0xf2>
 800d66a:	690f      	ldr	r7, [r1, #16]
 800d66c:	2f00      	cmp	r7, #0
 800d66e:	d0f6      	beq.n	800d65e <__sflush_r+0xae>
 800d670:	0793      	lsls	r3, r2, #30
 800d672:	680e      	ldr	r6, [r1, #0]
 800d674:	bf08      	it	eq
 800d676:	694b      	ldreq	r3, [r1, #20]
 800d678:	600f      	str	r7, [r1, #0]
 800d67a:	bf18      	it	ne
 800d67c:	2300      	movne	r3, #0
 800d67e:	eba6 0807 	sub.w	r8, r6, r7
 800d682:	608b      	str	r3, [r1, #8]
 800d684:	f1b8 0f00 	cmp.w	r8, #0
 800d688:	dde9      	ble.n	800d65e <__sflush_r+0xae>
 800d68a:	6a21      	ldr	r1, [r4, #32]
 800d68c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800d68e:	4643      	mov	r3, r8
 800d690:	463a      	mov	r2, r7
 800d692:	4628      	mov	r0, r5
 800d694:	47b0      	blx	r6
 800d696:	2800      	cmp	r0, #0
 800d698:	dc08      	bgt.n	800d6ac <__sflush_r+0xfc>
 800d69a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d69e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800d6a2:	81a3      	strh	r3, [r4, #12]
 800d6a4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d6a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d6ac:	4407      	add	r7, r0
 800d6ae:	eba8 0800 	sub.w	r8, r8, r0
 800d6b2:	e7e7      	b.n	800d684 <__sflush_r+0xd4>
 800d6b4:	dfbffffe 	.word	0xdfbffffe

0800d6b8 <_fflush_r>:
 800d6b8:	b538      	push	{r3, r4, r5, lr}
 800d6ba:	690b      	ldr	r3, [r1, #16]
 800d6bc:	4605      	mov	r5, r0
 800d6be:	460c      	mov	r4, r1
 800d6c0:	b913      	cbnz	r3, 800d6c8 <_fflush_r+0x10>
 800d6c2:	2500      	movs	r5, #0
 800d6c4:	4628      	mov	r0, r5
 800d6c6:	bd38      	pop	{r3, r4, r5, pc}
 800d6c8:	b118      	cbz	r0, 800d6d2 <_fflush_r+0x1a>
 800d6ca:	6a03      	ldr	r3, [r0, #32]
 800d6cc:	b90b      	cbnz	r3, 800d6d2 <_fflush_r+0x1a>
 800d6ce:	f7fd ffc7 	bl	800b660 <__sinit>
 800d6d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d6d6:	2b00      	cmp	r3, #0
 800d6d8:	d0f3      	beq.n	800d6c2 <_fflush_r+0xa>
 800d6da:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800d6dc:	07d0      	lsls	r0, r2, #31
 800d6de:	d404      	bmi.n	800d6ea <_fflush_r+0x32>
 800d6e0:	0599      	lsls	r1, r3, #22
 800d6e2:	d402      	bmi.n	800d6ea <_fflush_r+0x32>
 800d6e4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d6e6:	f7fe f9ea 	bl	800babe <__retarget_lock_acquire_recursive>
 800d6ea:	4628      	mov	r0, r5
 800d6ec:	4621      	mov	r1, r4
 800d6ee:	f7ff ff5f 	bl	800d5b0 <__sflush_r>
 800d6f2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800d6f4:	07da      	lsls	r2, r3, #31
 800d6f6:	4605      	mov	r5, r0
 800d6f8:	d4e4      	bmi.n	800d6c4 <_fflush_r+0xc>
 800d6fa:	89a3      	ldrh	r3, [r4, #12]
 800d6fc:	059b      	lsls	r3, r3, #22
 800d6fe:	d4e1      	bmi.n	800d6c4 <_fflush_r+0xc>
 800d700:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800d702:	f7fe f9dd 	bl	800bac0 <__retarget_lock_release_recursive>
 800d706:	e7dd      	b.n	800d6c4 <_fflush_r+0xc>

0800d708 <__swhatbuf_r>:
 800d708:	b570      	push	{r4, r5, r6, lr}
 800d70a:	460c      	mov	r4, r1
 800d70c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d710:	2900      	cmp	r1, #0
 800d712:	b096      	sub	sp, #88	@ 0x58
 800d714:	4615      	mov	r5, r2
 800d716:	461e      	mov	r6, r3
 800d718:	da0d      	bge.n	800d736 <__swhatbuf_r+0x2e>
 800d71a:	89a3      	ldrh	r3, [r4, #12]
 800d71c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800d720:	f04f 0100 	mov.w	r1, #0
 800d724:	bf14      	ite	ne
 800d726:	2340      	movne	r3, #64	@ 0x40
 800d728:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800d72c:	2000      	movs	r0, #0
 800d72e:	6031      	str	r1, [r6, #0]
 800d730:	602b      	str	r3, [r5, #0]
 800d732:	b016      	add	sp, #88	@ 0x58
 800d734:	bd70      	pop	{r4, r5, r6, pc}
 800d736:	466a      	mov	r2, sp
 800d738:	f000 f862 	bl	800d800 <_fstat_r>
 800d73c:	2800      	cmp	r0, #0
 800d73e:	dbec      	blt.n	800d71a <__swhatbuf_r+0x12>
 800d740:	9901      	ldr	r1, [sp, #4]
 800d742:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800d746:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800d74a:	4259      	negs	r1, r3
 800d74c:	4159      	adcs	r1, r3
 800d74e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800d752:	e7eb      	b.n	800d72c <__swhatbuf_r+0x24>

0800d754 <__smakebuf_r>:
 800d754:	898b      	ldrh	r3, [r1, #12]
 800d756:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800d758:	079d      	lsls	r5, r3, #30
 800d75a:	4606      	mov	r6, r0
 800d75c:	460c      	mov	r4, r1
 800d75e:	d507      	bpl.n	800d770 <__smakebuf_r+0x1c>
 800d760:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800d764:	6023      	str	r3, [r4, #0]
 800d766:	6123      	str	r3, [r4, #16]
 800d768:	2301      	movs	r3, #1
 800d76a:	6163      	str	r3, [r4, #20]
 800d76c:	b003      	add	sp, #12
 800d76e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800d770:	ab01      	add	r3, sp, #4
 800d772:	466a      	mov	r2, sp
 800d774:	f7ff ffc8 	bl	800d708 <__swhatbuf_r>
 800d778:	9f00      	ldr	r7, [sp, #0]
 800d77a:	4605      	mov	r5, r0
 800d77c:	4639      	mov	r1, r7
 800d77e:	4630      	mov	r0, r6
 800d780:	f7ff f86e 	bl	800c860 <_malloc_r>
 800d784:	b948      	cbnz	r0, 800d79a <__smakebuf_r+0x46>
 800d786:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d78a:	059a      	lsls	r2, r3, #22
 800d78c:	d4ee      	bmi.n	800d76c <__smakebuf_r+0x18>
 800d78e:	f023 0303 	bic.w	r3, r3, #3
 800d792:	f043 0302 	orr.w	r3, r3, #2
 800d796:	81a3      	strh	r3, [r4, #12]
 800d798:	e7e2      	b.n	800d760 <__smakebuf_r+0xc>
 800d79a:	89a3      	ldrh	r3, [r4, #12]
 800d79c:	6020      	str	r0, [r4, #0]
 800d79e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800d7a2:	81a3      	strh	r3, [r4, #12]
 800d7a4:	9b01      	ldr	r3, [sp, #4]
 800d7a6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800d7aa:	b15b      	cbz	r3, 800d7c4 <__smakebuf_r+0x70>
 800d7ac:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d7b0:	4630      	mov	r0, r6
 800d7b2:	f000 f837 	bl	800d824 <_isatty_r>
 800d7b6:	b128      	cbz	r0, 800d7c4 <__smakebuf_r+0x70>
 800d7b8:	89a3      	ldrh	r3, [r4, #12]
 800d7ba:	f023 0303 	bic.w	r3, r3, #3
 800d7be:	f043 0301 	orr.w	r3, r3, #1
 800d7c2:	81a3      	strh	r3, [r4, #12]
 800d7c4:	89a3      	ldrh	r3, [r4, #12]
 800d7c6:	431d      	orrs	r5, r3
 800d7c8:	81a5      	strh	r5, [r4, #12]
 800d7ca:	e7cf      	b.n	800d76c <__smakebuf_r+0x18>

0800d7cc <memmove>:
 800d7cc:	4288      	cmp	r0, r1
 800d7ce:	b510      	push	{r4, lr}
 800d7d0:	eb01 0402 	add.w	r4, r1, r2
 800d7d4:	d902      	bls.n	800d7dc <memmove+0x10>
 800d7d6:	4284      	cmp	r4, r0
 800d7d8:	4623      	mov	r3, r4
 800d7da:	d807      	bhi.n	800d7ec <memmove+0x20>
 800d7dc:	1e43      	subs	r3, r0, #1
 800d7de:	42a1      	cmp	r1, r4
 800d7e0:	d008      	beq.n	800d7f4 <memmove+0x28>
 800d7e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d7e6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d7ea:	e7f8      	b.n	800d7de <memmove+0x12>
 800d7ec:	4402      	add	r2, r0
 800d7ee:	4601      	mov	r1, r0
 800d7f0:	428a      	cmp	r2, r1
 800d7f2:	d100      	bne.n	800d7f6 <memmove+0x2a>
 800d7f4:	bd10      	pop	{r4, pc}
 800d7f6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d7fa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d7fe:	e7f7      	b.n	800d7f0 <memmove+0x24>

0800d800 <_fstat_r>:
 800d800:	b538      	push	{r3, r4, r5, lr}
 800d802:	4d07      	ldr	r5, [pc, #28]	@ (800d820 <_fstat_r+0x20>)
 800d804:	2300      	movs	r3, #0
 800d806:	4604      	mov	r4, r0
 800d808:	4608      	mov	r0, r1
 800d80a:	4611      	mov	r1, r2
 800d80c:	602b      	str	r3, [r5, #0]
 800d80e:	f7f7 f8bd 	bl	800498c <_fstat>
 800d812:	1c43      	adds	r3, r0, #1
 800d814:	d102      	bne.n	800d81c <_fstat_r+0x1c>
 800d816:	682b      	ldr	r3, [r5, #0]
 800d818:	b103      	cbz	r3, 800d81c <_fstat_r+0x1c>
 800d81a:	6023      	str	r3, [r4, #0]
 800d81c:	bd38      	pop	{r3, r4, r5, pc}
 800d81e:	bf00      	nop
 800d820:	200051b8 	.word	0x200051b8

0800d824 <_isatty_r>:
 800d824:	b538      	push	{r3, r4, r5, lr}
 800d826:	4d06      	ldr	r5, [pc, #24]	@ (800d840 <_isatty_r+0x1c>)
 800d828:	2300      	movs	r3, #0
 800d82a:	4604      	mov	r4, r0
 800d82c:	4608      	mov	r0, r1
 800d82e:	602b      	str	r3, [r5, #0]
 800d830:	f7f7 f8bc 	bl	80049ac <_isatty>
 800d834:	1c43      	adds	r3, r0, #1
 800d836:	d102      	bne.n	800d83e <_isatty_r+0x1a>
 800d838:	682b      	ldr	r3, [r5, #0]
 800d83a:	b103      	cbz	r3, 800d83e <_isatty_r+0x1a>
 800d83c:	6023      	str	r3, [r4, #0]
 800d83e:	bd38      	pop	{r3, r4, r5, pc}
 800d840:	200051b8 	.word	0x200051b8

0800d844 <_sbrk_r>:
 800d844:	b538      	push	{r3, r4, r5, lr}
 800d846:	4d06      	ldr	r5, [pc, #24]	@ (800d860 <_sbrk_r+0x1c>)
 800d848:	2300      	movs	r3, #0
 800d84a:	4604      	mov	r4, r0
 800d84c:	4608      	mov	r0, r1
 800d84e:	602b      	str	r3, [r5, #0]
 800d850:	f7f7 f8c4 	bl	80049dc <_sbrk>
 800d854:	1c43      	adds	r3, r0, #1
 800d856:	d102      	bne.n	800d85e <_sbrk_r+0x1a>
 800d858:	682b      	ldr	r3, [r5, #0]
 800d85a:	b103      	cbz	r3, 800d85e <_sbrk_r+0x1a>
 800d85c:	6023      	str	r3, [r4, #0]
 800d85e:	bd38      	pop	{r3, r4, r5, pc}
 800d860:	200051b8 	.word	0x200051b8

0800d864 <__assert_func>:
 800d864:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800d866:	4614      	mov	r4, r2
 800d868:	461a      	mov	r2, r3
 800d86a:	4b09      	ldr	r3, [pc, #36]	@ (800d890 <__assert_func+0x2c>)
 800d86c:	681b      	ldr	r3, [r3, #0]
 800d86e:	4605      	mov	r5, r0
 800d870:	68d8      	ldr	r0, [r3, #12]
 800d872:	b954      	cbnz	r4, 800d88a <__assert_func+0x26>
 800d874:	4b07      	ldr	r3, [pc, #28]	@ (800d894 <__assert_func+0x30>)
 800d876:	461c      	mov	r4, r3
 800d878:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800d87c:	9100      	str	r1, [sp, #0]
 800d87e:	462b      	mov	r3, r5
 800d880:	4905      	ldr	r1, [pc, #20]	@ (800d898 <__assert_func+0x34>)
 800d882:	f000 f86f 	bl	800d964 <fiprintf>
 800d886:	f000 f87f 	bl	800d988 <abort>
 800d88a:	4b04      	ldr	r3, [pc, #16]	@ (800d89c <__assert_func+0x38>)
 800d88c:	e7f4      	b.n	800d878 <__assert_func+0x14>
 800d88e:	bf00      	nop
 800d890:	200000c0 	.word	0x200000c0
 800d894:	0800fdf6 	.word	0x0800fdf6
 800d898:	0800fdc8 	.word	0x0800fdc8
 800d89c:	0800fdbb 	.word	0x0800fdbb

0800d8a0 <_calloc_r>:
 800d8a0:	b570      	push	{r4, r5, r6, lr}
 800d8a2:	fba1 5402 	umull	r5, r4, r1, r2
 800d8a6:	b93c      	cbnz	r4, 800d8b8 <_calloc_r+0x18>
 800d8a8:	4629      	mov	r1, r5
 800d8aa:	f7fe ffd9 	bl	800c860 <_malloc_r>
 800d8ae:	4606      	mov	r6, r0
 800d8b0:	b928      	cbnz	r0, 800d8be <_calloc_r+0x1e>
 800d8b2:	2600      	movs	r6, #0
 800d8b4:	4630      	mov	r0, r6
 800d8b6:	bd70      	pop	{r4, r5, r6, pc}
 800d8b8:	220c      	movs	r2, #12
 800d8ba:	6002      	str	r2, [r0, #0]
 800d8bc:	e7f9      	b.n	800d8b2 <_calloc_r+0x12>
 800d8be:	462a      	mov	r2, r5
 800d8c0:	4621      	mov	r1, r4
 800d8c2:	f7fe f87f 	bl	800b9c4 <memset>
 800d8c6:	e7f5      	b.n	800d8b4 <_calloc_r+0x14>

0800d8c8 <__ascii_mbtowc>:
 800d8c8:	b082      	sub	sp, #8
 800d8ca:	b901      	cbnz	r1, 800d8ce <__ascii_mbtowc+0x6>
 800d8cc:	a901      	add	r1, sp, #4
 800d8ce:	b142      	cbz	r2, 800d8e2 <__ascii_mbtowc+0x1a>
 800d8d0:	b14b      	cbz	r3, 800d8e6 <__ascii_mbtowc+0x1e>
 800d8d2:	7813      	ldrb	r3, [r2, #0]
 800d8d4:	600b      	str	r3, [r1, #0]
 800d8d6:	7812      	ldrb	r2, [r2, #0]
 800d8d8:	1e10      	subs	r0, r2, #0
 800d8da:	bf18      	it	ne
 800d8dc:	2001      	movne	r0, #1
 800d8de:	b002      	add	sp, #8
 800d8e0:	4770      	bx	lr
 800d8e2:	4610      	mov	r0, r2
 800d8e4:	e7fb      	b.n	800d8de <__ascii_mbtowc+0x16>
 800d8e6:	f06f 0001 	mvn.w	r0, #1
 800d8ea:	e7f8      	b.n	800d8de <__ascii_mbtowc+0x16>

0800d8ec <_realloc_r>:
 800d8ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d8f0:	4680      	mov	r8, r0
 800d8f2:	4615      	mov	r5, r2
 800d8f4:	460c      	mov	r4, r1
 800d8f6:	b921      	cbnz	r1, 800d902 <_realloc_r+0x16>
 800d8f8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d8fc:	4611      	mov	r1, r2
 800d8fe:	f7fe bfaf 	b.w	800c860 <_malloc_r>
 800d902:	b92a      	cbnz	r2, 800d910 <_realloc_r+0x24>
 800d904:	f7fe ff38 	bl	800c778 <_free_r>
 800d908:	2400      	movs	r4, #0
 800d90a:	4620      	mov	r0, r4
 800d90c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d910:	f000 f841 	bl	800d996 <_malloc_usable_size_r>
 800d914:	4285      	cmp	r5, r0
 800d916:	4606      	mov	r6, r0
 800d918:	d802      	bhi.n	800d920 <_realloc_r+0x34>
 800d91a:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 800d91e:	d8f4      	bhi.n	800d90a <_realloc_r+0x1e>
 800d920:	4629      	mov	r1, r5
 800d922:	4640      	mov	r0, r8
 800d924:	f7fe ff9c 	bl	800c860 <_malloc_r>
 800d928:	4607      	mov	r7, r0
 800d92a:	2800      	cmp	r0, #0
 800d92c:	d0ec      	beq.n	800d908 <_realloc_r+0x1c>
 800d92e:	42b5      	cmp	r5, r6
 800d930:	462a      	mov	r2, r5
 800d932:	4621      	mov	r1, r4
 800d934:	bf28      	it	cs
 800d936:	4632      	movcs	r2, r6
 800d938:	f7fe f8c3 	bl	800bac2 <memcpy>
 800d93c:	4621      	mov	r1, r4
 800d93e:	4640      	mov	r0, r8
 800d940:	f7fe ff1a 	bl	800c778 <_free_r>
 800d944:	463c      	mov	r4, r7
 800d946:	e7e0      	b.n	800d90a <_realloc_r+0x1e>

0800d948 <__ascii_wctomb>:
 800d948:	4603      	mov	r3, r0
 800d94a:	4608      	mov	r0, r1
 800d94c:	b141      	cbz	r1, 800d960 <__ascii_wctomb+0x18>
 800d94e:	2aff      	cmp	r2, #255	@ 0xff
 800d950:	d904      	bls.n	800d95c <__ascii_wctomb+0x14>
 800d952:	228a      	movs	r2, #138	@ 0x8a
 800d954:	601a      	str	r2, [r3, #0]
 800d956:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d95a:	4770      	bx	lr
 800d95c:	700a      	strb	r2, [r1, #0]
 800d95e:	2001      	movs	r0, #1
 800d960:	4770      	bx	lr
	...

0800d964 <fiprintf>:
 800d964:	b40e      	push	{r1, r2, r3}
 800d966:	b503      	push	{r0, r1, lr}
 800d968:	4601      	mov	r1, r0
 800d96a:	ab03      	add	r3, sp, #12
 800d96c:	4805      	ldr	r0, [pc, #20]	@ (800d984 <fiprintf+0x20>)
 800d96e:	f853 2b04 	ldr.w	r2, [r3], #4
 800d972:	6800      	ldr	r0, [r0, #0]
 800d974:	9301      	str	r3, [sp, #4]
 800d976:	f7ff fd03 	bl	800d380 <_vfiprintf_r>
 800d97a:	b002      	add	sp, #8
 800d97c:	f85d eb04 	ldr.w	lr, [sp], #4
 800d980:	b003      	add	sp, #12
 800d982:	4770      	bx	lr
 800d984:	200000c0 	.word	0x200000c0

0800d988 <abort>:
 800d988:	b508      	push	{r3, lr}
 800d98a:	2006      	movs	r0, #6
 800d98c:	f000 f834 	bl	800d9f8 <raise>
 800d990:	2001      	movs	r0, #1
 800d992:	f7f6 ffab 	bl	80048ec <_exit>

0800d996 <_malloc_usable_size_r>:
 800d996:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d99a:	1f18      	subs	r0, r3, #4
 800d99c:	2b00      	cmp	r3, #0
 800d99e:	bfbc      	itt	lt
 800d9a0:	580b      	ldrlt	r3, [r1, r0]
 800d9a2:	18c0      	addlt	r0, r0, r3
 800d9a4:	4770      	bx	lr

0800d9a6 <_raise_r>:
 800d9a6:	291f      	cmp	r1, #31
 800d9a8:	b538      	push	{r3, r4, r5, lr}
 800d9aa:	4605      	mov	r5, r0
 800d9ac:	460c      	mov	r4, r1
 800d9ae:	d904      	bls.n	800d9ba <_raise_r+0x14>
 800d9b0:	2316      	movs	r3, #22
 800d9b2:	6003      	str	r3, [r0, #0]
 800d9b4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800d9b8:	bd38      	pop	{r3, r4, r5, pc}
 800d9ba:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800d9bc:	b112      	cbz	r2, 800d9c4 <_raise_r+0x1e>
 800d9be:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800d9c2:	b94b      	cbnz	r3, 800d9d8 <_raise_r+0x32>
 800d9c4:	4628      	mov	r0, r5
 800d9c6:	f000 f831 	bl	800da2c <_getpid_r>
 800d9ca:	4622      	mov	r2, r4
 800d9cc:	4601      	mov	r1, r0
 800d9ce:	4628      	mov	r0, r5
 800d9d0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800d9d4:	f000 b818 	b.w	800da08 <_kill_r>
 800d9d8:	2b01      	cmp	r3, #1
 800d9da:	d00a      	beq.n	800d9f2 <_raise_r+0x4c>
 800d9dc:	1c59      	adds	r1, r3, #1
 800d9de:	d103      	bne.n	800d9e8 <_raise_r+0x42>
 800d9e0:	2316      	movs	r3, #22
 800d9e2:	6003      	str	r3, [r0, #0]
 800d9e4:	2001      	movs	r0, #1
 800d9e6:	e7e7      	b.n	800d9b8 <_raise_r+0x12>
 800d9e8:	2100      	movs	r1, #0
 800d9ea:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800d9ee:	4620      	mov	r0, r4
 800d9f0:	4798      	blx	r3
 800d9f2:	2000      	movs	r0, #0
 800d9f4:	e7e0      	b.n	800d9b8 <_raise_r+0x12>
	...

0800d9f8 <raise>:
 800d9f8:	4b02      	ldr	r3, [pc, #8]	@ (800da04 <raise+0xc>)
 800d9fa:	4601      	mov	r1, r0
 800d9fc:	6818      	ldr	r0, [r3, #0]
 800d9fe:	f7ff bfd2 	b.w	800d9a6 <_raise_r>
 800da02:	bf00      	nop
 800da04:	200000c0 	.word	0x200000c0

0800da08 <_kill_r>:
 800da08:	b538      	push	{r3, r4, r5, lr}
 800da0a:	4d07      	ldr	r5, [pc, #28]	@ (800da28 <_kill_r+0x20>)
 800da0c:	2300      	movs	r3, #0
 800da0e:	4604      	mov	r4, r0
 800da10:	4608      	mov	r0, r1
 800da12:	4611      	mov	r1, r2
 800da14:	602b      	str	r3, [r5, #0]
 800da16:	f7f6 ff59 	bl	80048cc <_kill>
 800da1a:	1c43      	adds	r3, r0, #1
 800da1c:	d102      	bne.n	800da24 <_kill_r+0x1c>
 800da1e:	682b      	ldr	r3, [r5, #0]
 800da20:	b103      	cbz	r3, 800da24 <_kill_r+0x1c>
 800da22:	6023      	str	r3, [r4, #0]
 800da24:	bd38      	pop	{r3, r4, r5, pc}
 800da26:	bf00      	nop
 800da28:	200051b8 	.word	0x200051b8

0800da2c <_getpid_r>:
 800da2c:	f7f6 bf46 	b.w	80048bc <_getpid>

0800da30 <asin>:
 800da30:	b538      	push	{r3, r4, r5, lr}
 800da32:	ed2d 8b02 	vpush	{d8}
 800da36:	ec55 4b10 	vmov	r4, r5, d0
 800da3a:	f000 fb5d 	bl	800e0f8 <__ieee754_asin>
 800da3e:	4622      	mov	r2, r4
 800da40:	462b      	mov	r3, r5
 800da42:	4620      	mov	r0, r4
 800da44:	4629      	mov	r1, r5
 800da46:	eeb0 8a40 	vmov.f32	s16, s0
 800da4a:	eef0 8a60 	vmov.f32	s17, s1
 800da4e:	f7f3 f86d 	bl	8000b2c <__aeabi_dcmpun>
 800da52:	b9a8      	cbnz	r0, 800da80 <asin+0x50>
 800da54:	ec45 4b10 	vmov	d0, r4, r5
 800da58:	f000 fa56 	bl	800df08 <fabs>
 800da5c:	4b0c      	ldr	r3, [pc, #48]	@ (800da90 <asin+0x60>)
 800da5e:	ec51 0b10 	vmov	r0, r1, d0
 800da62:	2200      	movs	r2, #0
 800da64:	f7f3 f858 	bl	8000b18 <__aeabi_dcmpgt>
 800da68:	b150      	cbz	r0, 800da80 <asin+0x50>
 800da6a:	f7fd fffd 	bl	800ba68 <__errno>
 800da6e:	ecbd 8b02 	vpop	{d8}
 800da72:	2321      	movs	r3, #33	@ 0x21
 800da74:	6003      	str	r3, [r0, #0]
 800da76:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800da7a:	4806      	ldr	r0, [pc, #24]	@ (800da94 <asin+0x64>)
 800da7c:	f000 ba58 	b.w	800df30 <nan>
 800da80:	eeb0 0a48 	vmov.f32	s0, s16
 800da84:	eef0 0a68 	vmov.f32	s1, s17
 800da88:	ecbd 8b02 	vpop	{d8}
 800da8c:	bd38      	pop	{r3, r4, r5, pc}
 800da8e:	bf00      	nop
 800da90:	3ff00000 	.word	0x3ff00000
 800da94:	0800fdf6 	.word	0x0800fdf6

0800da98 <atan2>:
 800da98:	f000 bd32 	b.w	800e500 <__ieee754_atan2>

0800da9c <pow>:
 800da9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800da9e:	ed2d 8b02 	vpush	{d8}
 800daa2:	eeb0 8a40 	vmov.f32	s16, s0
 800daa6:	eef0 8a60 	vmov.f32	s17, s1
 800daaa:	ec55 4b11 	vmov	r4, r5, d1
 800daae:	f000 fdef 	bl	800e690 <__ieee754_pow>
 800dab2:	4622      	mov	r2, r4
 800dab4:	462b      	mov	r3, r5
 800dab6:	4620      	mov	r0, r4
 800dab8:	4629      	mov	r1, r5
 800daba:	ec57 6b10 	vmov	r6, r7, d0
 800dabe:	f7f3 f835 	bl	8000b2c <__aeabi_dcmpun>
 800dac2:	2800      	cmp	r0, #0
 800dac4:	d13b      	bne.n	800db3e <pow+0xa2>
 800dac6:	ec51 0b18 	vmov	r0, r1, d8
 800daca:	2200      	movs	r2, #0
 800dacc:	2300      	movs	r3, #0
 800dace:	f7f2 fffb 	bl	8000ac8 <__aeabi_dcmpeq>
 800dad2:	b1b8      	cbz	r0, 800db04 <pow+0x68>
 800dad4:	2200      	movs	r2, #0
 800dad6:	2300      	movs	r3, #0
 800dad8:	4620      	mov	r0, r4
 800dada:	4629      	mov	r1, r5
 800dadc:	f7f2 fff4 	bl	8000ac8 <__aeabi_dcmpeq>
 800dae0:	2800      	cmp	r0, #0
 800dae2:	d146      	bne.n	800db72 <pow+0xd6>
 800dae4:	ec45 4b10 	vmov	d0, r4, r5
 800dae8:	f000 fa16 	bl	800df18 <finite>
 800daec:	b338      	cbz	r0, 800db3e <pow+0xa2>
 800daee:	2200      	movs	r2, #0
 800daf0:	2300      	movs	r3, #0
 800daf2:	4620      	mov	r0, r4
 800daf4:	4629      	mov	r1, r5
 800daf6:	f7f2 fff1 	bl	8000adc <__aeabi_dcmplt>
 800dafa:	b300      	cbz	r0, 800db3e <pow+0xa2>
 800dafc:	f7fd ffb4 	bl	800ba68 <__errno>
 800db00:	2322      	movs	r3, #34	@ 0x22
 800db02:	e01b      	b.n	800db3c <pow+0xa0>
 800db04:	ec47 6b10 	vmov	d0, r6, r7
 800db08:	f000 fa06 	bl	800df18 <finite>
 800db0c:	b9e0      	cbnz	r0, 800db48 <pow+0xac>
 800db0e:	eeb0 0a48 	vmov.f32	s0, s16
 800db12:	eef0 0a68 	vmov.f32	s1, s17
 800db16:	f000 f9ff 	bl	800df18 <finite>
 800db1a:	b1a8      	cbz	r0, 800db48 <pow+0xac>
 800db1c:	ec45 4b10 	vmov	d0, r4, r5
 800db20:	f000 f9fa 	bl	800df18 <finite>
 800db24:	b180      	cbz	r0, 800db48 <pow+0xac>
 800db26:	4632      	mov	r2, r6
 800db28:	463b      	mov	r3, r7
 800db2a:	4630      	mov	r0, r6
 800db2c:	4639      	mov	r1, r7
 800db2e:	f7f2 fffd 	bl	8000b2c <__aeabi_dcmpun>
 800db32:	2800      	cmp	r0, #0
 800db34:	d0e2      	beq.n	800dafc <pow+0x60>
 800db36:	f7fd ff97 	bl	800ba68 <__errno>
 800db3a:	2321      	movs	r3, #33	@ 0x21
 800db3c:	6003      	str	r3, [r0, #0]
 800db3e:	ecbd 8b02 	vpop	{d8}
 800db42:	ec47 6b10 	vmov	d0, r6, r7
 800db46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800db48:	2200      	movs	r2, #0
 800db4a:	2300      	movs	r3, #0
 800db4c:	4630      	mov	r0, r6
 800db4e:	4639      	mov	r1, r7
 800db50:	f7f2 ffba 	bl	8000ac8 <__aeabi_dcmpeq>
 800db54:	2800      	cmp	r0, #0
 800db56:	d0f2      	beq.n	800db3e <pow+0xa2>
 800db58:	eeb0 0a48 	vmov.f32	s0, s16
 800db5c:	eef0 0a68 	vmov.f32	s1, s17
 800db60:	f000 f9da 	bl	800df18 <finite>
 800db64:	2800      	cmp	r0, #0
 800db66:	d0ea      	beq.n	800db3e <pow+0xa2>
 800db68:	ec45 4b10 	vmov	d0, r4, r5
 800db6c:	f000 f9d4 	bl	800df18 <finite>
 800db70:	e7c3      	b.n	800dafa <pow+0x5e>
 800db72:	4f01      	ldr	r7, [pc, #4]	@ (800db78 <pow+0xdc>)
 800db74:	2600      	movs	r6, #0
 800db76:	e7e2      	b.n	800db3e <pow+0xa2>
 800db78:	3ff00000 	.word	0x3ff00000

0800db7c <sqrt>:
 800db7c:	b538      	push	{r3, r4, r5, lr}
 800db7e:	ed2d 8b02 	vpush	{d8}
 800db82:	ec55 4b10 	vmov	r4, r5, d0
 800db86:	f000 f9db 	bl	800df40 <__ieee754_sqrt>
 800db8a:	4622      	mov	r2, r4
 800db8c:	462b      	mov	r3, r5
 800db8e:	4620      	mov	r0, r4
 800db90:	4629      	mov	r1, r5
 800db92:	eeb0 8a40 	vmov.f32	s16, s0
 800db96:	eef0 8a60 	vmov.f32	s17, s1
 800db9a:	f7f2 ffc7 	bl	8000b2c <__aeabi_dcmpun>
 800db9e:	b990      	cbnz	r0, 800dbc6 <sqrt+0x4a>
 800dba0:	2200      	movs	r2, #0
 800dba2:	2300      	movs	r3, #0
 800dba4:	4620      	mov	r0, r4
 800dba6:	4629      	mov	r1, r5
 800dba8:	f7f2 ff98 	bl	8000adc <__aeabi_dcmplt>
 800dbac:	b158      	cbz	r0, 800dbc6 <sqrt+0x4a>
 800dbae:	f7fd ff5b 	bl	800ba68 <__errno>
 800dbb2:	2321      	movs	r3, #33	@ 0x21
 800dbb4:	6003      	str	r3, [r0, #0]
 800dbb6:	2200      	movs	r2, #0
 800dbb8:	2300      	movs	r3, #0
 800dbba:	4610      	mov	r0, r2
 800dbbc:	4619      	mov	r1, r3
 800dbbe:	f7f2 fe45 	bl	800084c <__aeabi_ddiv>
 800dbc2:	ec41 0b18 	vmov	d8, r0, r1
 800dbc6:	eeb0 0a48 	vmov.f32	s0, s16
 800dbca:	eef0 0a68 	vmov.f32	s1, s17
 800dbce:	ecbd 8b02 	vpop	{d8}
 800dbd2:	bd38      	pop	{r3, r4, r5, pc}
 800dbd4:	0000      	movs	r0, r0
	...

0800dbd8 <atan>:
 800dbd8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dbdc:	ec55 4b10 	vmov	r4, r5, d0
 800dbe0:	4bbf      	ldr	r3, [pc, #764]	@ (800dee0 <atan+0x308>)
 800dbe2:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 800dbe6:	429e      	cmp	r6, r3
 800dbe8:	46ab      	mov	fp, r5
 800dbea:	d918      	bls.n	800dc1e <atan+0x46>
 800dbec:	4bbd      	ldr	r3, [pc, #756]	@ (800dee4 <atan+0x30c>)
 800dbee:	429e      	cmp	r6, r3
 800dbf0:	d801      	bhi.n	800dbf6 <atan+0x1e>
 800dbf2:	d109      	bne.n	800dc08 <atan+0x30>
 800dbf4:	b144      	cbz	r4, 800dc08 <atan+0x30>
 800dbf6:	4622      	mov	r2, r4
 800dbf8:	462b      	mov	r3, r5
 800dbfa:	4620      	mov	r0, r4
 800dbfc:	4629      	mov	r1, r5
 800dbfe:	f7f2 fb45 	bl	800028c <__adddf3>
 800dc02:	4604      	mov	r4, r0
 800dc04:	460d      	mov	r5, r1
 800dc06:	e006      	b.n	800dc16 <atan+0x3e>
 800dc08:	f1bb 0f00 	cmp.w	fp, #0
 800dc0c:	f340 812b 	ble.w	800de66 <atan+0x28e>
 800dc10:	a597      	add	r5, pc, #604	@ (adr r5, 800de70 <atan+0x298>)
 800dc12:	e9d5 4500 	ldrd	r4, r5, [r5]
 800dc16:	ec45 4b10 	vmov	d0, r4, r5
 800dc1a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dc1e:	4bb2      	ldr	r3, [pc, #712]	@ (800dee8 <atan+0x310>)
 800dc20:	429e      	cmp	r6, r3
 800dc22:	d813      	bhi.n	800dc4c <atan+0x74>
 800dc24:	f1a3 73de 	sub.w	r3, r3, #29097984	@ 0x1bc0000
 800dc28:	429e      	cmp	r6, r3
 800dc2a:	d80c      	bhi.n	800dc46 <atan+0x6e>
 800dc2c:	a392      	add	r3, pc, #584	@ (adr r3, 800de78 <atan+0x2a0>)
 800dc2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dc32:	4620      	mov	r0, r4
 800dc34:	4629      	mov	r1, r5
 800dc36:	f7f2 fb29 	bl	800028c <__adddf3>
 800dc3a:	4bac      	ldr	r3, [pc, #688]	@ (800deec <atan+0x314>)
 800dc3c:	2200      	movs	r2, #0
 800dc3e:	f7f2 ff6b 	bl	8000b18 <__aeabi_dcmpgt>
 800dc42:	2800      	cmp	r0, #0
 800dc44:	d1e7      	bne.n	800dc16 <atan+0x3e>
 800dc46:	f04f 3aff 	mov.w	sl, #4294967295	@ 0xffffffff
 800dc4a:	e029      	b.n	800dca0 <atan+0xc8>
 800dc4c:	f000 f95c 	bl	800df08 <fabs>
 800dc50:	4ba7      	ldr	r3, [pc, #668]	@ (800def0 <atan+0x318>)
 800dc52:	429e      	cmp	r6, r3
 800dc54:	ec55 4b10 	vmov	r4, r5, d0
 800dc58:	f200 80bc 	bhi.w	800ddd4 <atan+0x1fc>
 800dc5c:	f5a3 2350 	sub.w	r3, r3, #851968	@ 0xd0000
 800dc60:	429e      	cmp	r6, r3
 800dc62:	f200 809e 	bhi.w	800dda2 <atan+0x1ca>
 800dc66:	4622      	mov	r2, r4
 800dc68:	462b      	mov	r3, r5
 800dc6a:	4620      	mov	r0, r4
 800dc6c:	4629      	mov	r1, r5
 800dc6e:	f7f2 fb0d 	bl	800028c <__adddf3>
 800dc72:	4b9e      	ldr	r3, [pc, #632]	@ (800deec <atan+0x314>)
 800dc74:	2200      	movs	r2, #0
 800dc76:	f7f2 fb07 	bl	8000288 <__aeabi_dsub>
 800dc7a:	2200      	movs	r2, #0
 800dc7c:	4606      	mov	r6, r0
 800dc7e:	460f      	mov	r7, r1
 800dc80:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800dc84:	4620      	mov	r0, r4
 800dc86:	4629      	mov	r1, r5
 800dc88:	f7f2 fb00 	bl	800028c <__adddf3>
 800dc8c:	4602      	mov	r2, r0
 800dc8e:	460b      	mov	r3, r1
 800dc90:	4630      	mov	r0, r6
 800dc92:	4639      	mov	r1, r7
 800dc94:	f7f2 fdda 	bl	800084c <__aeabi_ddiv>
 800dc98:	f04f 0a00 	mov.w	sl, #0
 800dc9c:	4604      	mov	r4, r0
 800dc9e:	460d      	mov	r5, r1
 800dca0:	4622      	mov	r2, r4
 800dca2:	462b      	mov	r3, r5
 800dca4:	4620      	mov	r0, r4
 800dca6:	4629      	mov	r1, r5
 800dca8:	f7f2 fca6 	bl	80005f8 <__aeabi_dmul>
 800dcac:	4602      	mov	r2, r0
 800dcae:	460b      	mov	r3, r1
 800dcb0:	4680      	mov	r8, r0
 800dcb2:	4689      	mov	r9, r1
 800dcb4:	f7f2 fca0 	bl	80005f8 <__aeabi_dmul>
 800dcb8:	a371      	add	r3, pc, #452	@ (adr r3, 800de80 <atan+0x2a8>)
 800dcba:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcbe:	4606      	mov	r6, r0
 800dcc0:	460f      	mov	r7, r1
 800dcc2:	f7f2 fc99 	bl	80005f8 <__aeabi_dmul>
 800dcc6:	a370      	add	r3, pc, #448	@ (adr r3, 800de88 <atan+0x2b0>)
 800dcc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dccc:	f7f2 fade 	bl	800028c <__adddf3>
 800dcd0:	4632      	mov	r2, r6
 800dcd2:	463b      	mov	r3, r7
 800dcd4:	f7f2 fc90 	bl	80005f8 <__aeabi_dmul>
 800dcd8:	a36d      	add	r3, pc, #436	@ (adr r3, 800de90 <atan+0x2b8>)
 800dcda:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcde:	f7f2 fad5 	bl	800028c <__adddf3>
 800dce2:	4632      	mov	r2, r6
 800dce4:	463b      	mov	r3, r7
 800dce6:	f7f2 fc87 	bl	80005f8 <__aeabi_dmul>
 800dcea:	a36b      	add	r3, pc, #428	@ (adr r3, 800de98 <atan+0x2c0>)
 800dcec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dcf0:	f7f2 facc 	bl	800028c <__adddf3>
 800dcf4:	4632      	mov	r2, r6
 800dcf6:	463b      	mov	r3, r7
 800dcf8:	f7f2 fc7e 	bl	80005f8 <__aeabi_dmul>
 800dcfc:	a368      	add	r3, pc, #416	@ (adr r3, 800dea0 <atan+0x2c8>)
 800dcfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd02:	f7f2 fac3 	bl	800028c <__adddf3>
 800dd06:	4632      	mov	r2, r6
 800dd08:	463b      	mov	r3, r7
 800dd0a:	f7f2 fc75 	bl	80005f8 <__aeabi_dmul>
 800dd0e:	a366      	add	r3, pc, #408	@ (adr r3, 800dea8 <atan+0x2d0>)
 800dd10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd14:	f7f2 faba 	bl	800028c <__adddf3>
 800dd18:	4642      	mov	r2, r8
 800dd1a:	464b      	mov	r3, r9
 800dd1c:	f7f2 fc6c 	bl	80005f8 <__aeabi_dmul>
 800dd20:	a363      	add	r3, pc, #396	@ (adr r3, 800deb0 <atan+0x2d8>)
 800dd22:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd26:	4680      	mov	r8, r0
 800dd28:	4689      	mov	r9, r1
 800dd2a:	4630      	mov	r0, r6
 800dd2c:	4639      	mov	r1, r7
 800dd2e:	f7f2 fc63 	bl	80005f8 <__aeabi_dmul>
 800dd32:	a361      	add	r3, pc, #388	@ (adr r3, 800deb8 <atan+0x2e0>)
 800dd34:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd38:	f7f2 faa6 	bl	8000288 <__aeabi_dsub>
 800dd3c:	4632      	mov	r2, r6
 800dd3e:	463b      	mov	r3, r7
 800dd40:	f7f2 fc5a 	bl	80005f8 <__aeabi_dmul>
 800dd44:	a35e      	add	r3, pc, #376	@ (adr r3, 800dec0 <atan+0x2e8>)
 800dd46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd4a:	f7f2 fa9d 	bl	8000288 <__aeabi_dsub>
 800dd4e:	4632      	mov	r2, r6
 800dd50:	463b      	mov	r3, r7
 800dd52:	f7f2 fc51 	bl	80005f8 <__aeabi_dmul>
 800dd56:	a35c      	add	r3, pc, #368	@ (adr r3, 800dec8 <atan+0x2f0>)
 800dd58:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd5c:	f7f2 fa94 	bl	8000288 <__aeabi_dsub>
 800dd60:	4632      	mov	r2, r6
 800dd62:	463b      	mov	r3, r7
 800dd64:	f7f2 fc48 	bl	80005f8 <__aeabi_dmul>
 800dd68:	a359      	add	r3, pc, #356	@ (adr r3, 800ded0 <atan+0x2f8>)
 800dd6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800dd6e:	f7f2 fa8b 	bl	8000288 <__aeabi_dsub>
 800dd72:	4632      	mov	r2, r6
 800dd74:	463b      	mov	r3, r7
 800dd76:	f7f2 fc3f 	bl	80005f8 <__aeabi_dmul>
 800dd7a:	4602      	mov	r2, r0
 800dd7c:	460b      	mov	r3, r1
 800dd7e:	4640      	mov	r0, r8
 800dd80:	4649      	mov	r1, r9
 800dd82:	f7f2 fa83 	bl	800028c <__adddf3>
 800dd86:	4622      	mov	r2, r4
 800dd88:	462b      	mov	r3, r5
 800dd8a:	f7f2 fc35 	bl	80005f8 <__aeabi_dmul>
 800dd8e:	f1ba 3fff 	cmp.w	sl, #4294967295	@ 0xffffffff
 800dd92:	4602      	mov	r2, r0
 800dd94:	460b      	mov	r3, r1
 800dd96:	d148      	bne.n	800de2a <atan+0x252>
 800dd98:	4620      	mov	r0, r4
 800dd9a:	4629      	mov	r1, r5
 800dd9c:	f7f2 fa74 	bl	8000288 <__aeabi_dsub>
 800dda0:	e72f      	b.n	800dc02 <atan+0x2a>
 800dda2:	4b52      	ldr	r3, [pc, #328]	@ (800deec <atan+0x314>)
 800dda4:	2200      	movs	r2, #0
 800dda6:	4620      	mov	r0, r4
 800dda8:	4629      	mov	r1, r5
 800ddaa:	f7f2 fa6d 	bl	8000288 <__aeabi_dsub>
 800ddae:	4b4f      	ldr	r3, [pc, #316]	@ (800deec <atan+0x314>)
 800ddb0:	4606      	mov	r6, r0
 800ddb2:	460f      	mov	r7, r1
 800ddb4:	2200      	movs	r2, #0
 800ddb6:	4620      	mov	r0, r4
 800ddb8:	4629      	mov	r1, r5
 800ddba:	f7f2 fa67 	bl	800028c <__adddf3>
 800ddbe:	4602      	mov	r2, r0
 800ddc0:	460b      	mov	r3, r1
 800ddc2:	4630      	mov	r0, r6
 800ddc4:	4639      	mov	r1, r7
 800ddc6:	f7f2 fd41 	bl	800084c <__aeabi_ddiv>
 800ddca:	f04f 0a01 	mov.w	sl, #1
 800ddce:	4604      	mov	r4, r0
 800ddd0:	460d      	mov	r5, r1
 800ddd2:	e765      	b.n	800dca0 <atan+0xc8>
 800ddd4:	4b47      	ldr	r3, [pc, #284]	@ (800def4 <atan+0x31c>)
 800ddd6:	429e      	cmp	r6, r3
 800ddd8:	d21c      	bcs.n	800de14 <atan+0x23c>
 800ddda:	4b47      	ldr	r3, [pc, #284]	@ (800def8 <atan+0x320>)
 800dddc:	2200      	movs	r2, #0
 800ddde:	4620      	mov	r0, r4
 800dde0:	4629      	mov	r1, r5
 800dde2:	f7f2 fa51 	bl	8000288 <__aeabi_dsub>
 800dde6:	4b44      	ldr	r3, [pc, #272]	@ (800def8 <atan+0x320>)
 800dde8:	4606      	mov	r6, r0
 800ddea:	460f      	mov	r7, r1
 800ddec:	2200      	movs	r2, #0
 800ddee:	4620      	mov	r0, r4
 800ddf0:	4629      	mov	r1, r5
 800ddf2:	f7f2 fc01 	bl	80005f8 <__aeabi_dmul>
 800ddf6:	4b3d      	ldr	r3, [pc, #244]	@ (800deec <atan+0x314>)
 800ddf8:	2200      	movs	r2, #0
 800ddfa:	f7f2 fa47 	bl	800028c <__adddf3>
 800ddfe:	4602      	mov	r2, r0
 800de00:	460b      	mov	r3, r1
 800de02:	4630      	mov	r0, r6
 800de04:	4639      	mov	r1, r7
 800de06:	f7f2 fd21 	bl	800084c <__aeabi_ddiv>
 800de0a:	f04f 0a02 	mov.w	sl, #2
 800de0e:	4604      	mov	r4, r0
 800de10:	460d      	mov	r5, r1
 800de12:	e745      	b.n	800dca0 <atan+0xc8>
 800de14:	4622      	mov	r2, r4
 800de16:	462b      	mov	r3, r5
 800de18:	4938      	ldr	r1, [pc, #224]	@ (800defc <atan+0x324>)
 800de1a:	2000      	movs	r0, #0
 800de1c:	f7f2 fd16 	bl	800084c <__aeabi_ddiv>
 800de20:	f04f 0a03 	mov.w	sl, #3
 800de24:	4604      	mov	r4, r0
 800de26:	460d      	mov	r5, r1
 800de28:	e73a      	b.n	800dca0 <atan+0xc8>
 800de2a:	4b35      	ldr	r3, [pc, #212]	@ (800df00 <atan+0x328>)
 800de2c:	4e35      	ldr	r6, [pc, #212]	@ (800df04 <atan+0x32c>)
 800de2e:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800de32:	e9d3 2300 	ldrd	r2, r3, [r3]
 800de36:	f7f2 fa27 	bl	8000288 <__aeabi_dsub>
 800de3a:	4622      	mov	r2, r4
 800de3c:	462b      	mov	r3, r5
 800de3e:	f7f2 fa23 	bl	8000288 <__aeabi_dsub>
 800de42:	eb06 06ca 	add.w	r6, r6, sl, lsl #3
 800de46:	4602      	mov	r2, r0
 800de48:	460b      	mov	r3, r1
 800de4a:	e9d6 0100 	ldrd	r0, r1, [r6]
 800de4e:	f7f2 fa1b 	bl	8000288 <__aeabi_dsub>
 800de52:	f1bb 0f00 	cmp.w	fp, #0
 800de56:	4604      	mov	r4, r0
 800de58:	460d      	mov	r5, r1
 800de5a:	f6bf aedc 	bge.w	800dc16 <atan+0x3e>
 800de5e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800de62:	461d      	mov	r5, r3
 800de64:	e6d7      	b.n	800dc16 <atan+0x3e>
 800de66:	a51c      	add	r5, pc, #112	@ (adr r5, 800ded8 <atan+0x300>)
 800de68:	e9d5 4500 	ldrd	r4, r5, [r5]
 800de6c:	e6d3      	b.n	800dc16 <atan+0x3e>
 800de6e:	bf00      	nop
 800de70:	54442d18 	.word	0x54442d18
 800de74:	3ff921fb 	.word	0x3ff921fb
 800de78:	8800759c 	.word	0x8800759c
 800de7c:	7e37e43c 	.word	0x7e37e43c
 800de80:	e322da11 	.word	0xe322da11
 800de84:	3f90ad3a 	.word	0x3f90ad3a
 800de88:	24760deb 	.word	0x24760deb
 800de8c:	3fa97b4b 	.word	0x3fa97b4b
 800de90:	a0d03d51 	.word	0xa0d03d51
 800de94:	3fb10d66 	.word	0x3fb10d66
 800de98:	c54c206e 	.word	0xc54c206e
 800de9c:	3fb745cd 	.word	0x3fb745cd
 800dea0:	920083ff 	.word	0x920083ff
 800dea4:	3fc24924 	.word	0x3fc24924
 800dea8:	5555550d 	.word	0x5555550d
 800deac:	3fd55555 	.word	0x3fd55555
 800deb0:	2c6a6c2f 	.word	0x2c6a6c2f
 800deb4:	bfa2b444 	.word	0xbfa2b444
 800deb8:	52defd9a 	.word	0x52defd9a
 800debc:	3fadde2d 	.word	0x3fadde2d
 800dec0:	af749a6d 	.word	0xaf749a6d
 800dec4:	3fb3b0f2 	.word	0x3fb3b0f2
 800dec8:	fe231671 	.word	0xfe231671
 800decc:	3fbc71c6 	.word	0x3fbc71c6
 800ded0:	9998ebc4 	.word	0x9998ebc4
 800ded4:	3fc99999 	.word	0x3fc99999
 800ded8:	54442d18 	.word	0x54442d18
 800dedc:	bff921fb 	.word	0xbff921fb
 800dee0:	440fffff 	.word	0x440fffff
 800dee4:	7ff00000 	.word	0x7ff00000
 800dee8:	3fdbffff 	.word	0x3fdbffff
 800deec:	3ff00000 	.word	0x3ff00000
 800def0:	3ff2ffff 	.word	0x3ff2ffff
 800def4:	40038000 	.word	0x40038000
 800def8:	3ff80000 	.word	0x3ff80000
 800defc:	bff00000 	.word	0xbff00000
 800df00:	0800fef8 	.word	0x0800fef8
 800df04:	0800ff18 	.word	0x0800ff18

0800df08 <fabs>:
 800df08:	ec51 0b10 	vmov	r0, r1, d0
 800df0c:	4602      	mov	r2, r0
 800df0e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800df12:	ec43 2b10 	vmov	d0, r2, r3
 800df16:	4770      	bx	lr

0800df18 <finite>:
 800df18:	b082      	sub	sp, #8
 800df1a:	ed8d 0b00 	vstr	d0, [sp]
 800df1e:	9801      	ldr	r0, [sp, #4]
 800df20:	f040 4000 	orr.w	r0, r0, #2147483648	@ 0x80000000
 800df24:	f500 1080 	add.w	r0, r0, #1048576	@ 0x100000
 800df28:	0fc0      	lsrs	r0, r0, #31
 800df2a:	b002      	add	sp, #8
 800df2c:	4770      	bx	lr
	...

0800df30 <nan>:
 800df30:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800df38 <nan+0x8>
 800df34:	4770      	bx	lr
 800df36:	bf00      	nop
 800df38:	00000000 	.word	0x00000000
 800df3c:	7ff80000 	.word	0x7ff80000

0800df40 <__ieee754_sqrt>:
 800df40:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df44:	4a68      	ldr	r2, [pc, #416]	@ (800e0e8 <__ieee754_sqrt+0x1a8>)
 800df46:	ec55 4b10 	vmov	r4, r5, d0
 800df4a:	43aa      	bics	r2, r5
 800df4c:	462b      	mov	r3, r5
 800df4e:	4621      	mov	r1, r4
 800df50:	d110      	bne.n	800df74 <__ieee754_sqrt+0x34>
 800df52:	4622      	mov	r2, r4
 800df54:	4620      	mov	r0, r4
 800df56:	4629      	mov	r1, r5
 800df58:	f7f2 fb4e 	bl	80005f8 <__aeabi_dmul>
 800df5c:	4602      	mov	r2, r0
 800df5e:	460b      	mov	r3, r1
 800df60:	4620      	mov	r0, r4
 800df62:	4629      	mov	r1, r5
 800df64:	f7f2 f992 	bl	800028c <__adddf3>
 800df68:	4604      	mov	r4, r0
 800df6a:	460d      	mov	r5, r1
 800df6c:	ec45 4b10 	vmov	d0, r4, r5
 800df70:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800df74:	2d00      	cmp	r5, #0
 800df76:	dc0e      	bgt.n	800df96 <__ieee754_sqrt+0x56>
 800df78:	f025 4200 	bic.w	r2, r5, #2147483648	@ 0x80000000
 800df7c:	4322      	orrs	r2, r4
 800df7e:	d0f5      	beq.n	800df6c <__ieee754_sqrt+0x2c>
 800df80:	b19d      	cbz	r5, 800dfaa <__ieee754_sqrt+0x6a>
 800df82:	4622      	mov	r2, r4
 800df84:	4620      	mov	r0, r4
 800df86:	4629      	mov	r1, r5
 800df88:	f7f2 f97e 	bl	8000288 <__aeabi_dsub>
 800df8c:	4602      	mov	r2, r0
 800df8e:	460b      	mov	r3, r1
 800df90:	f7f2 fc5c 	bl	800084c <__aeabi_ddiv>
 800df94:	e7e8      	b.n	800df68 <__ieee754_sqrt+0x28>
 800df96:	152a      	asrs	r2, r5, #20
 800df98:	d115      	bne.n	800dfc6 <__ieee754_sqrt+0x86>
 800df9a:	2000      	movs	r0, #0
 800df9c:	e009      	b.n	800dfb2 <__ieee754_sqrt+0x72>
 800df9e:	0acb      	lsrs	r3, r1, #11
 800dfa0:	3a15      	subs	r2, #21
 800dfa2:	0549      	lsls	r1, r1, #21
 800dfa4:	2b00      	cmp	r3, #0
 800dfa6:	d0fa      	beq.n	800df9e <__ieee754_sqrt+0x5e>
 800dfa8:	e7f7      	b.n	800df9a <__ieee754_sqrt+0x5a>
 800dfaa:	462a      	mov	r2, r5
 800dfac:	e7fa      	b.n	800dfa4 <__ieee754_sqrt+0x64>
 800dfae:	005b      	lsls	r3, r3, #1
 800dfb0:	3001      	adds	r0, #1
 800dfb2:	02dc      	lsls	r4, r3, #11
 800dfb4:	d5fb      	bpl.n	800dfae <__ieee754_sqrt+0x6e>
 800dfb6:	1e44      	subs	r4, r0, #1
 800dfb8:	1b12      	subs	r2, r2, r4
 800dfba:	f1c0 0420 	rsb	r4, r0, #32
 800dfbe:	fa21 f404 	lsr.w	r4, r1, r4
 800dfc2:	4323      	orrs	r3, r4
 800dfc4:	4081      	lsls	r1, r0
 800dfc6:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800dfca:	f2a2 35ff 	subw	r5, r2, #1023	@ 0x3ff
 800dfce:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800dfd2:	07d2      	lsls	r2, r2, #31
 800dfd4:	bf5c      	itt	pl
 800dfd6:	005b      	lslpl	r3, r3, #1
 800dfd8:	eb03 73d1 	addpl.w	r3, r3, r1, lsr #31
 800dfdc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800dfe0:	bf58      	it	pl
 800dfe2:	0049      	lslpl	r1, r1, #1
 800dfe4:	2600      	movs	r6, #0
 800dfe6:	eb03 73d1 	add.w	r3, r3, r1, lsr #31
 800dfea:	106d      	asrs	r5, r5, #1
 800dfec:	0049      	lsls	r1, r1, #1
 800dfee:	2016      	movs	r0, #22
 800dff0:	4632      	mov	r2, r6
 800dff2:	f44f 1400 	mov.w	r4, #2097152	@ 0x200000
 800dff6:	1917      	adds	r7, r2, r4
 800dff8:	429f      	cmp	r7, r3
 800dffa:	bfde      	ittt	le
 800dffc:	193a      	addle	r2, r7, r4
 800dffe:	1bdb      	suble	r3, r3, r7
 800e000:	1936      	addle	r6, r6, r4
 800e002:	0fcf      	lsrs	r7, r1, #31
 800e004:	3801      	subs	r0, #1
 800e006:	eb07 0343 	add.w	r3, r7, r3, lsl #1
 800e00a:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800e00e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800e012:	d1f0      	bne.n	800dff6 <__ieee754_sqrt+0xb6>
 800e014:	4604      	mov	r4, r0
 800e016:	2720      	movs	r7, #32
 800e018:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800e01c:	429a      	cmp	r2, r3
 800e01e:	eb00 0e0c 	add.w	lr, r0, ip
 800e022:	db02      	blt.n	800e02a <__ieee754_sqrt+0xea>
 800e024:	d113      	bne.n	800e04e <__ieee754_sqrt+0x10e>
 800e026:	458e      	cmp	lr, r1
 800e028:	d811      	bhi.n	800e04e <__ieee754_sqrt+0x10e>
 800e02a:	f1be 0f00 	cmp.w	lr, #0
 800e02e:	eb0e 000c 	add.w	r0, lr, ip
 800e032:	da42      	bge.n	800e0ba <__ieee754_sqrt+0x17a>
 800e034:	2800      	cmp	r0, #0
 800e036:	db40      	blt.n	800e0ba <__ieee754_sqrt+0x17a>
 800e038:	f102 0801 	add.w	r8, r2, #1
 800e03c:	1a9b      	subs	r3, r3, r2
 800e03e:	458e      	cmp	lr, r1
 800e040:	bf88      	it	hi
 800e042:	f103 33ff 	addhi.w	r3, r3, #4294967295	@ 0xffffffff
 800e046:	eba1 010e 	sub.w	r1, r1, lr
 800e04a:	4464      	add	r4, ip
 800e04c:	4642      	mov	r2, r8
 800e04e:	ea4f 7ed1 	mov.w	lr, r1, lsr #31
 800e052:	3f01      	subs	r7, #1
 800e054:	eb0e 0343 	add.w	r3, lr, r3, lsl #1
 800e058:	ea4f 0141 	mov.w	r1, r1, lsl #1
 800e05c:	ea4f 0c5c 	mov.w	ip, ip, lsr #1
 800e060:	d1dc      	bne.n	800e01c <__ieee754_sqrt+0xdc>
 800e062:	4319      	orrs	r1, r3
 800e064:	d01b      	beq.n	800e09e <__ieee754_sqrt+0x15e>
 800e066:	f8df a084 	ldr.w	sl, [pc, #132]	@ 800e0ec <__ieee754_sqrt+0x1ac>
 800e06a:	f8df b084 	ldr.w	fp, [pc, #132]	@ 800e0f0 <__ieee754_sqrt+0x1b0>
 800e06e:	e9da 0100 	ldrd	r0, r1, [sl]
 800e072:	e9db 2300 	ldrd	r2, r3, [fp]
 800e076:	f7f2 f907 	bl	8000288 <__aeabi_dsub>
 800e07a:	e9da 8900 	ldrd	r8, r9, [sl]
 800e07e:	4602      	mov	r2, r0
 800e080:	460b      	mov	r3, r1
 800e082:	4640      	mov	r0, r8
 800e084:	4649      	mov	r1, r9
 800e086:	f7f2 fd33 	bl	8000af0 <__aeabi_dcmple>
 800e08a:	b140      	cbz	r0, 800e09e <__ieee754_sqrt+0x15e>
 800e08c:	f1b4 3fff 	cmp.w	r4, #4294967295	@ 0xffffffff
 800e090:	e9da 0100 	ldrd	r0, r1, [sl]
 800e094:	e9db 2300 	ldrd	r2, r3, [fp]
 800e098:	d111      	bne.n	800e0be <__ieee754_sqrt+0x17e>
 800e09a:	3601      	adds	r6, #1
 800e09c:	463c      	mov	r4, r7
 800e09e:	1072      	asrs	r2, r6, #1
 800e0a0:	0863      	lsrs	r3, r4, #1
 800e0a2:	07f1      	lsls	r1, r6, #31
 800e0a4:	f102 527f 	add.w	r2, r2, #1069547520	@ 0x3fc00000
 800e0a8:	f502 1200 	add.w	r2, r2, #2097152	@ 0x200000
 800e0ac:	bf48      	it	mi
 800e0ae:	f043 4300 	orrmi.w	r3, r3, #2147483648	@ 0x80000000
 800e0b2:	eb02 5105 	add.w	r1, r2, r5, lsl #20
 800e0b6:	4618      	mov	r0, r3
 800e0b8:	e756      	b.n	800df68 <__ieee754_sqrt+0x28>
 800e0ba:	4690      	mov	r8, r2
 800e0bc:	e7be      	b.n	800e03c <__ieee754_sqrt+0xfc>
 800e0be:	f7f2 f8e5 	bl	800028c <__adddf3>
 800e0c2:	e9da 8900 	ldrd	r8, r9, [sl]
 800e0c6:	4602      	mov	r2, r0
 800e0c8:	460b      	mov	r3, r1
 800e0ca:	4640      	mov	r0, r8
 800e0cc:	4649      	mov	r1, r9
 800e0ce:	f7f2 fd05 	bl	8000adc <__aeabi_dcmplt>
 800e0d2:	b120      	cbz	r0, 800e0de <__ieee754_sqrt+0x19e>
 800e0d4:	1ca0      	adds	r0, r4, #2
 800e0d6:	bf08      	it	eq
 800e0d8:	3601      	addeq	r6, #1
 800e0da:	3402      	adds	r4, #2
 800e0dc:	e7df      	b.n	800e09e <__ieee754_sqrt+0x15e>
 800e0de:	1c63      	adds	r3, r4, #1
 800e0e0:	f023 0401 	bic.w	r4, r3, #1
 800e0e4:	e7db      	b.n	800e09e <__ieee754_sqrt+0x15e>
 800e0e6:	bf00      	nop
 800e0e8:	7ff00000 	.word	0x7ff00000
 800e0ec:	20000288 	.word	0x20000288
 800e0f0:	20000280 	.word	0x20000280
 800e0f4:	00000000 	.word	0x00000000

0800e0f8 <__ieee754_asin>:
 800e0f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e0fc:	ec55 4b10 	vmov	r4, r5, d0
 800e100:	4bc7      	ldr	r3, [pc, #796]	@ (800e420 <__ieee754_asin+0x328>)
 800e102:	b087      	sub	sp, #28
 800e104:	f025 4600 	bic.w	r6, r5, #2147483648	@ 0x80000000
 800e108:	429e      	cmp	r6, r3
 800e10a:	9501      	str	r5, [sp, #4]
 800e10c:	d92d      	bls.n	800e16a <__ieee754_asin+0x72>
 800e10e:	f106 4640 	add.w	r6, r6, #3221225472	@ 0xc0000000
 800e112:	f506 1680 	add.w	r6, r6, #1048576	@ 0x100000
 800e116:	4326      	orrs	r6, r4
 800e118:	d116      	bne.n	800e148 <__ieee754_asin+0x50>
 800e11a:	a3a7      	add	r3, pc, #668	@ (adr r3, 800e3b8 <__ieee754_asin+0x2c0>)
 800e11c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e120:	4620      	mov	r0, r4
 800e122:	4629      	mov	r1, r5
 800e124:	f7f2 fa68 	bl	80005f8 <__aeabi_dmul>
 800e128:	a3a5      	add	r3, pc, #660	@ (adr r3, 800e3c0 <__ieee754_asin+0x2c8>)
 800e12a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e12e:	4606      	mov	r6, r0
 800e130:	460f      	mov	r7, r1
 800e132:	4620      	mov	r0, r4
 800e134:	4629      	mov	r1, r5
 800e136:	f7f2 fa5f 	bl	80005f8 <__aeabi_dmul>
 800e13a:	4602      	mov	r2, r0
 800e13c:	460b      	mov	r3, r1
 800e13e:	4630      	mov	r0, r6
 800e140:	4639      	mov	r1, r7
 800e142:	f7f2 f8a3 	bl	800028c <__adddf3>
 800e146:	e009      	b.n	800e15c <__ieee754_asin+0x64>
 800e148:	4622      	mov	r2, r4
 800e14a:	462b      	mov	r3, r5
 800e14c:	4620      	mov	r0, r4
 800e14e:	4629      	mov	r1, r5
 800e150:	f7f2 f89a 	bl	8000288 <__aeabi_dsub>
 800e154:	4602      	mov	r2, r0
 800e156:	460b      	mov	r3, r1
 800e158:	f7f2 fb78 	bl	800084c <__aeabi_ddiv>
 800e15c:	4604      	mov	r4, r0
 800e15e:	460d      	mov	r5, r1
 800e160:	ec45 4b10 	vmov	d0, r4, r5
 800e164:	b007      	add	sp, #28
 800e166:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e16a:	4bae      	ldr	r3, [pc, #696]	@ (800e424 <__ieee754_asin+0x32c>)
 800e16c:	429e      	cmp	r6, r3
 800e16e:	d810      	bhi.n	800e192 <__ieee754_asin+0x9a>
 800e170:	f1b6 5f79 	cmp.w	r6, #1044381696	@ 0x3e400000
 800e174:	f080 80ad 	bcs.w	800e2d2 <__ieee754_asin+0x1da>
 800e178:	a393      	add	r3, pc, #588	@ (adr r3, 800e3c8 <__ieee754_asin+0x2d0>)
 800e17a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e17e:	4620      	mov	r0, r4
 800e180:	4629      	mov	r1, r5
 800e182:	f7f2 f883 	bl	800028c <__adddf3>
 800e186:	4ba8      	ldr	r3, [pc, #672]	@ (800e428 <__ieee754_asin+0x330>)
 800e188:	2200      	movs	r2, #0
 800e18a:	f7f2 fcc5 	bl	8000b18 <__aeabi_dcmpgt>
 800e18e:	2800      	cmp	r0, #0
 800e190:	d1e6      	bne.n	800e160 <__ieee754_asin+0x68>
 800e192:	ec45 4b10 	vmov	d0, r4, r5
 800e196:	f7ff feb7 	bl	800df08 <fabs>
 800e19a:	49a3      	ldr	r1, [pc, #652]	@ (800e428 <__ieee754_asin+0x330>)
 800e19c:	ec53 2b10 	vmov	r2, r3, d0
 800e1a0:	2000      	movs	r0, #0
 800e1a2:	f7f2 f871 	bl	8000288 <__aeabi_dsub>
 800e1a6:	4ba1      	ldr	r3, [pc, #644]	@ (800e42c <__ieee754_asin+0x334>)
 800e1a8:	2200      	movs	r2, #0
 800e1aa:	f7f2 fa25 	bl	80005f8 <__aeabi_dmul>
 800e1ae:	a388      	add	r3, pc, #544	@ (adr r3, 800e3d0 <__ieee754_asin+0x2d8>)
 800e1b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1b4:	4604      	mov	r4, r0
 800e1b6:	460d      	mov	r5, r1
 800e1b8:	f7f2 fa1e 	bl	80005f8 <__aeabi_dmul>
 800e1bc:	a386      	add	r3, pc, #536	@ (adr r3, 800e3d8 <__ieee754_asin+0x2e0>)
 800e1be:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1c2:	f7f2 f863 	bl	800028c <__adddf3>
 800e1c6:	4622      	mov	r2, r4
 800e1c8:	462b      	mov	r3, r5
 800e1ca:	f7f2 fa15 	bl	80005f8 <__aeabi_dmul>
 800e1ce:	a384      	add	r3, pc, #528	@ (adr r3, 800e3e0 <__ieee754_asin+0x2e8>)
 800e1d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1d4:	f7f2 f858 	bl	8000288 <__aeabi_dsub>
 800e1d8:	4622      	mov	r2, r4
 800e1da:	462b      	mov	r3, r5
 800e1dc:	f7f2 fa0c 	bl	80005f8 <__aeabi_dmul>
 800e1e0:	a381      	add	r3, pc, #516	@ (adr r3, 800e3e8 <__ieee754_asin+0x2f0>)
 800e1e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1e6:	f7f2 f851 	bl	800028c <__adddf3>
 800e1ea:	4622      	mov	r2, r4
 800e1ec:	462b      	mov	r3, r5
 800e1ee:	f7f2 fa03 	bl	80005f8 <__aeabi_dmul>
 800e1f2:	a37f      	add	r3, pc, #508	@ (adr r3, 800e3f0 <__ieee754_asin+0x2f8>)
 800e1f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e1f8:	f7f2 f846 	bl	8000288 <__aeabi_dsub>
 800e1fc:	4622      	mov	r2, r4
 800e1fe:	462b      	mov	r3, r5
 800e200:	f7f2 f9fa 	bl	80005f8 <__aeabi_dmul>
 800e204:	a37c      	add	r3, pc, #496	@ (adr r3, 800e3f8 <__ieee754_asin+0x300>)
 800e206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e20a:	f7f2 f83f 	bl	800028c <__adddf3>
 800e20e:	4622      	mov	r2, r4
 800e210:	462b      	mov	r3, r5
 800e212:	f7f2 f9f1 	bl	80005f8 <__aeabi_dmul>
 800e216:	a37a      	add	r3, pc, #488	@ (adr r3, 800e400 <__ieee754_asin+0x308>)
 800e218:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e21c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800e220:	4620      	mov	r0, r4
 800e222:	4629      	mov	r1, r5
 800e224:	f7f2 f9e8 	bl	80005f8 <__aeabi_dmul>
 800e228:	a377      	add	r3, pc, #476	@ (adr r3, 800e408 <__ieee754_asin+0x310>)
 800e22a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e22e:	f7f2 f82b 	bl	8000288 <__aeabi_dsub>
 800e232:	4622      	mov	r2, r4
 800e234:	462b      	mov	r3, r5
 800e236:	f7f2 f9df 	bl	80005f8 <__aeabi_dmul>
 800e23a:	a375      	add	r3, pc, #468	@ (adr r3, 800e410 <__ieee754_asin+0x318>)
 800e23c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e240:	f7f2 f824 	bl	800028c <__adddf3>
 800e244:	4622      	mov	r2, r4
 800e246:	462b      	mov	r3, r5
 800e248:	f7f2 f9d6 	bl	80005f8 <__aeabi_dmul>
 800e24c:	a372      	add	r3, pc, #456	@ (adr r3, 800e418 <__ieee754_asin+0x320>)
 800e24e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e252:	f7f2 f819 	bl	8000288 <__aeabi_dsub>
 800e256:	4622      	mov	r2, r4
 800e258:	462b      	mov	r3, r5
 800e25a:	f7f2 f9cd 	bl	80005f8 <__aeabi_dmul>
 800e25e:	4b72      	ldr	r3, [pc, #456]	@ (800e428 <__ieee754_asin+0x330>)
 800e260:	2200      	movs	r2, #0
 800e262:	f7f2 f813 	bl	800028c <__adddf3>
 800e266:	ec45 4b10 	vmov	d0, r4, r5
 800e26a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800e26e:	f7ff fe67 	bl	800df40 <__ieee754_sqrt>
 800e272:	4b6f      	ldr	r3, [pc, #444]	@ (800e430 <__ieee754_asin+0x338>)
 800e274:	429e      	cmp	r6, r3
 800e276:	ec5b ab10 	vmov	sl, fp, d0
 800e27a:	f240 80db 	bls.w	800e434 <__ieee754_asin+0x33c>
 800e27e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e282:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e286:	f7f2 fae1 	bl	800084c <__aeabi_ddiv>
 800e28a:	4652      	mov	r2, sl
 800e28c:	465b      	mov	r3, fp
 800e28e:	f7f2 f9b3 	bl	80005f8 <__aeabi_dmul>
 800e292:	4652      	mov	r2, sl
 800e294:	465b      	mov	r3, fp
 800e296:	f7f1 fff9 	bl	800028c <__adddf3>
 800e29a:	4602      	mov	r2, r0
 800e29c:	460b      	mov	r3, r1
 800e29e:	f7f1 fff5 	bl	800028c <__adddf3>
 800e2a2:	a347      	add	r3, pc, #284	@ (adr r3, 800e3c0 <__ieee754_asin+0x2c8>)
 800e2a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2a8:	f7f1 ffee 	bl	8000288 <__aeabi_dsub>
 800e2ac:	4602      	mov	r2, r0
 800e2ae:	460b      	mov	r3, r1
 800e2b0:	a141      	add	r1, pc, #260	@ (adr r1, 800e3b8 <__ieee754_asin+0x2c0>)
 800e2b2:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e2b6:	f7f1 ffe7 	bl	8000288 <__aeabi_dsub>
 800e2ba:	9b01      	ldr	r3, [sp, #4]
 800e2bc:	2b00      	cmp	r3, #0
 800e2be:	bfdc      	itt	le
 800e2c0:	4602      	movle	r2, r0
 800e2c2:	f101 4300 	addle.w	r3, r1, #2147483648	@ 0x80000000
 800e2c6:	4604      	mov	r4, r0
 800e2c8:	460d      	mov	r5, r1
 800e2ca:	bfdc      	itt	le
 800e2cc:	4614      	movle	r4, r2
 800e2ce:	461d      	movle	r5, r3
 800e2d0:	e746      	b.n	800e160 <__ieee754_asin+0x68>
 800e2d2:	4622      	mov	r2, r4
 800e2d4:	462b      	mov	r3, r5
 800e2d6:	4620      	mov	r0, r4
 800e2d8:	4629      	mov	r1, r5
 800e2da:	f7f2 f98d 	bl	80005f8 <__aeabi_dmul>
 800e2de:	a33c      	add	r3, pc, #240	@ (adr r3, 800e3d0 <__ieee754_asin+0x2d8>)
 800e2e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2e4:	4606      	mov	r6, r0
 800e2e6:	460f      	mov	r7, r1
 800e2e8:	f7f2 f986 	bl	80005f8 <__aeabi_dmul>
 800e2ec:	a33a      	add	r3, pc, #232	@ (adr r3, 800e3d8 <__ieee754_asin+0x2e0>)
 800e2ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e2f2:	f7f1 ffcb 	bl	800028c <__adddf3>
 800e2f6:	4632      	mov	r2, r6
 800e2f8:	463b      	mov	r3, r7
 800e2fa:	f7f2 f97d 	bl	80005f8 <__aeabi_dmul>
 800e2fe:	a338      	add	r3, pc, #224	@ (adr r3, 800e3e0 <__ieee754_asin+0x2e8>)
 800e300:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e304:	f7f1 ffc0 	bl	8000288 <__aeabi_dsub>
 800e308:	4632      	mov	r2, r6
 800e30a:	463b      	mov	r3, r7
 800e30c:	f7f2 f974 	bl	80005f8 <__aeabi_dmul>
 800e310:	a335      	add	r3, pc, #212	@ (adr r3, 800e3e8 <__ieee754_asin+0x2f0>)
 800e312:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e316:	f7f1 ffb9 	bl	800028c <__adddf3>
 800e31a:	4632      	mov	r2, r6
 800e31c:	463b      	mov	r3, r7
 800e31e:	f7f2 f96b 	bl	80005f8 <__aeabi_dmul>
 800e322:	a333      	add	r3, pc, #204	@ (adr r3, 800e3f0 <__ieee754_asin+0x2f8>)
 800e324:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e328:	f7f1 ffae 	bl	8000288 <__aeabi_dsub>
 800e32c:	4632      	mov	r2, r6
 800e32e:	463b      	mov	r3, r7
 800e330:	f7f2 f962 	bl	80005f8 <__aeabi_dmul>
 800e334:	a330      	add	r3, pc, #192	@ (adr r3, 800e3f8 <__ieee754_asin+0x300>)
 800e336:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e33a:	f7f1 ffa7 	bl	800028c <__adddf3>
 800e33e:	4632      	mov	r2, r6
 800e340:	463b      	mov	r3, r7
 800e342:	f7f2 f959 	bl	80005f8 <__aeabi_dmul>
 800e346:	a32e      	add	r3, pc, #184	@ (adr r3, 800e400 <__ieee754_asin+0x308>)
 800e348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e34c:	4680      	mov	r8, r0
 800e34e:	4689      	mov	r9, r1
 800e350:	4630      	mov	r0, r6
 800e352:	4639      	mov	r1, r7
 800e354:	f7f2 f950 	bl	80005f8 <__aeabi_dmul>
 800e358:	a32b      	add	r3, pc, #172	@ (adr r3, 800e408 <__ieee754_asin+0x310>)
 800e35a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e35e:	f7f1 ff93 	bl	8000288 <__aeabi_dsub>
 800e362:	4632      	mov	r2, r6
 800e364:	463b      	mov	r3, r7
 800e366:	f7f2 f947 	bl	80005f8 <__aeabi_dmul>
 800e36a:	a329      	add	r3, pc, #164	@ (adr r3, 800e410 <__ieee754_asin+0x318>)
 800e36c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e370:	f7f1 ff8c 	bl	800028c <__adddf3>
 800e374:	4632      	mov	r2, r6
 800e376:	463b      	mov	r3, r7
 800e378:	f7f2 f93e 	bl	80005f8 <__aeabi_dmul>
 800e37c:	a326      	add	r3, pc, #152	@ (adr r3, 800e418 <__ieee754_asin+0x320>)
 800e37e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e382:	f7f1 ff81 	bl	8000288 <__aeabi_dsub>
 800e386:	4632      	mov	r2, r6
 800e388:	463b      	mov	r3, r7
 800e38a:	f7f2 f935 	bl	80005f8 <__aeabi_dmul>
 800e38e:	4b26      	ldr	r3, [pc, #152]	@ (800e428 <__ieee754_asin+0x330>)
 800e390:	2200      	movs	r2, #0
 800e392:	f7f1 ff7b 	bl	800028c <__adddf3>
 800e396:	4602      	mov	r2, r0
 800e398:	460b      	mov	r3, r1
 800e39a:	4640      	mov	r0, r8
 800e39c:	4649      	mov	r1, r9
 800e39e:	f7f2 fa55 	bl	800084c <__aeabi_ddiv>
 800e3a2:	4622      	mov	r2, r4
 800e3a4:	462b      	mov	r3, r5
 800e3a6:	f7f2 f927 	bl	80005f8 <__aeabi_dmul>
 800e3aa:	4602      	mov	r2, r0
 800e3ac:	460b      	mov	r3, r1
 800e3ae:	4620      	mov	r0, r4
 800e3b0:	4629      	mov	r1, r5
 800e3b2:	e6c6      	b.n	800e142 <__ieee754_asin+0x4a>
 800e3b4:	f3af 8000 	nop.w
 800e3b8:	54442d18 	.word	0x54442d18
 800e3bc:	3ff921fb 	.word	0x3ff921fb
 800e3c0:	33145c07 	.word	0x33145c07
 800e3c4:	3c91a626 	.word	0x3c91a626
 800e3c8:	8800759c 	.word	0x8800759c
 800e3cc:	7e37e43c 	.word	0x7e37e43c
 800e3d0:	0dfdf709 	.word	0x0dfdf709
 800e3d4:	3f023de1 	.word	0x3f023de1
 800e3d8:	7501b288 	.word	0x7501b288
 800e3dc:	3f49efe0 	.word	0x3f49efe0
 800e3e0:	b5688f3b 	.word	0xb5688f3b
 800e3e4:	3fa48228 	.word	0x3fa48228
 800e3e8:	0e884455 	.word	0x0e884455
 800e3ec:	3fc9c155 	.word	0x3fc9c155
 800e3f0:	03eb6f7d 	.word	0x03eb6f7d
 800e3f4:	3fd4d612 	.word	0x3fd4d612
 800e3f8:	55555555 	.word	0x55555555
 800e3fc:	3fc55555 	.word	0x3fc55555
 800e400:	b12e9282 	.word	0xb12e9282
 800e404:	3fb3b8c5 	.word	0x3fb3b8c5
 800e408:	1b8d0159 	.word	0x1b8d0159
 800e40c:	3fe6066c 	.word	0x3fe6066c
 800e410:	9c598ac8 	.word	0x9c598ac8
 800e414:	40002ae5 	.word	0x40002ae5
 800e418:	1c8a2d4b 	.word	0x1c8a2d4b
 800e41c:	40033a27 	.word	0x40033a27
 800e420:	3fefffff 	.word	0x3fefffff
 800e424:	3fdfffff 	.word	0x3fdfffff
 800e428:	3ff00000 	.word	0x3ff00000
 800e42c:	3fe00000 	.word	0x3fe00000
 800e430:	3fef3332 	.word	0x3fef3332
 800e434:	4652      	mov	r2, sl
 800e436:	465b      	mov	r3, fp
 800e438:	4650      	mov	r0, sl
 800e43a:	4659      	mov	r1, fp
 800e43c:	f7f1 ff26 	bl	800028c <__adddf3>
 800e440:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800e444:	4606      	mov	r6, r0
 800e446:	460f      	mov	r7, r1
 800e448:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e44c:	f7f2 f9fe 	bl	800084c <__aeabi_ddiv>
 800e450:	4602      	mov	r2, r0
 800e452:	460b      	mov	r3, r1
 800e454:	4630      	mov	r0, r6
 800e456:	4639      	mov	r1, r7
 800e458:	f7f2 f8ce 	bl	80005f8 <__aeabi_dmul>
 800e45c:	f04f 0800 	mov.w	r8, #0
 800e460:	4606      	mov	r6, r0
 800e462:	460f      	mov	r7, r1
 800e464:	4642      	mov	r2, r8
 800e466:	465b      	mov	r3, fp
 800e468:	4640      	mov	r0, r8
 800e46a:	4659      	mov	r1, fp
 800e46c:	f7f2 f8c4 	bl	80005f8 <__aeabi_dmul>
 800e470:	4602      	mov	r2, r0
 800e472:	460b      	mov	r3, r1
 800e474:	4620      	mov	r0, r4
 800e476:	4629      	mov	r1, r5
 800e478:	f7f1 ff06 	bl	8000288 <__aeabi_dsub>
 800e47c:	4642      	mov	r2, r8
 800e47e:	4604      	mov	r4, r0
 800e480:	460d      	mov	r5, r1
 800e482:	465b      	mov	r3, fp
 800e484:	4650      	mov	r0, sl
 800e486:	4659      	mov	r1, fp
 800e488:	f7f1 ff00 	bl	800028c <__adddf3>
 800e48c:	4602      	mov	r2, r0
 800e48e:	460b      	mov	r3, r1
 800e490:	4620      	mov	r0, r4
 800e492:	4629      	mov	r1, r5
 800e494:	f7f2 f9da 	bl	800084c <__aeabi_ddiv>
 800e498:	4602      	mov	r2, r0
 800e49a:	460b      	mov	r3, r1
 800e49c:	f7f1 fef6 	bl	800028c <__adddf3>
 800e4a0:	4602      	mov	r2, r0
 800e4a2:	460b      	mov	r3, r1
 800e4a4:	a112      	add	r1, pc, #72	@ (adr r1, 800e4f0 <__ieee754_asin+0x3f8>)
 800e4a6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e4aa:	f7f1 feed 	bl	8000288 <__aeabi_dsub>
 800e4ae:	4602      	mov	r2, r0
 800e4b0:	460b      	mov	r3, r1
 800e4b2:	4630      	mov	r0, r6
 800e4b4:	4639      	mov	r1, r7
 800e4b6:	f7f1 fee7 	bl	8000288 <__aeabi_dsub>
 800e4ba:	4642      	mov	r2, r8
 800e4bc:	4604      	mov	r4, r0
 800e4be:	460d      	mov	r5, r1
 800e4c0:	465b      	mov	r3, fp
 800e4c2:	4640      	mov	r0, r8
 800e4c4:	4659      	mov	r1, fp
 800e4c6:	f7f1 fee1 	bl	800028c <__adddf3>
 800e4ca:	4602      	mov	r2, r0
 800e4cc:	460b      	mov	r3, r1
 800e4ce:	a10a      	add	r1, pc, #40	@ (adr r1, 800e4f8 <__ieee754_asin+0x400>)
 800e4d0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e4d4:	f7f1 fed8 	bl	8000288 <__aeabi_dsub>
 800e4d8:	4602      	mov	r2, r0
 800e4da:	460b      	mov	r3, r1
 800e4dc:	4620      	mov	r0, r4
 800e4de:	4629      	mov	r1, r5
 800e4e0:	f7f1 fed2 	bl	8000288 <__aeabi_dsub>
 800e4e4:	4602      	mov	r2, r0
 800e4e6:	460b      	mov	r3, r1
 800e4e8:	a103      	add	r1, pc, #12	@ (adr r1, 800e4f8 <__ieee754_asin+0x400>)
 800e4ea:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e4ee:	e6e2      	b.n	800e2b6 <__ieee754_asin+0x1be>
 800e4f0:	33145c07 	.word	0x33145c07
 800e4f4:	3c91a626 	.word	0x3c91a626
 800e4f8:	54442d18 	.word	0x54442d18
 800e4fc:	3fe921fb 	.word	0x3fe921fb

0800e500 <__ieee754_atan2>:
 800e500:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e504:	ec57 6b11 	vmov	r6, r7, d1
 800e508:	4273      	negs	r3, r6
 800e50a:	f8df 817c 	ldr.w	r8, [pc, #380]	@ 800e688 <__ieee754_atan2+0x188>
 800e50e:	f027 4200 	bic.w	r2, r7, #2147483648	@ 0x80000000
 800e512:	4333      	orrs	r3, r6
 800e514:	ea42 73d3 	orr.w	r3, r2, r3, lsr #31
 800e518:	4543      	cmp	r3, r8
 800e51a:	ec51 0b10 	vmov	r0, r1, d0
 800e51e:	4635      	mov	r5, r6
 800e520:	d809      	bhi.n	800e536 <__ieee754_atan2+0x36>
 800e522:	4244      	negs	r4, r0
 800e524:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800e528:	4304      	orrs	r4, r0
 800e52a:	ea43 74d4 	orr.w	r4, r3, r4, lsr #31
 800e52e:	4544      	cmp	r4, r8
 800e530:	468e      	mov	lr, r1
 800e532:	4681      	mov	r9, r0
 800e534:	d907      	bls.n	800e546 <__ieee754_atan2+0x46>
 800e536:	4632      	mov	r2, r6
 800e538:	463b      	mov	r3, r7
 800e53a:	f7f1 fea7 	bl	800028c <__adddf3>
 800e53e:	ec41 0b10 	vmov	d0, r0, r1
 800e542:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e546:	f107 4440 	add.w	r4, r7, #3221225472	@ 0xc0000000
 800e54a:	f504 1480 	add.w	r4, r4, #1048576	@ 0x100000
 800e54e:	4334      	orrs	r4, r6
 800e550:	d103      	bne.n	800e55a <__ieee754_atan2+0x5a>
 800e552:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e556:	f7ff bb3f 	b.w	800dbd8 <atan>
 800e55a:	17bc      	asrs	r4, r7, #30
 800e55c:	f004 0402 	and.w	r4, r4, #2
 800e560:	ea53 0909 	orrs.w	r9, r3, r9
 800e564:	ea44 74d1 	orr.w	r4, r4, r1, lsr #31
 800e568:	d107      	bne.n	800e57a <__ieee754_atan2+0x7a>
 800e56a:	2c02      	cmp	r4, #2
 800e56c:	d05f      	beq.n	800e62e <__ieee754_atan2+0x12e>
 800e56e:	2c03      	cmp	r4, #3
 800e570:	d1e5      	bne.n	800e53e <__ieee754_atan2+0x3e>
 800e572:	a141      	add	r1, pc, #260	@ (adr r1, 800e678 <__ieee754_atan2+0x178>)
 800e574:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e578:	e7e1      	b.n	800e53e <__ieee754_atan2+0x3e>
 800e57a:	4315      	orrs	r5, r2
 800e57c:	d106      	bne.n	800e58c <__ieee754_atan2+0x8c>
 800e57e:	f1be 0f00 	cmp.w	lr, #0
 800e582:	da5f      	bge.n	800e644 <__ieee754_atan2+0x144>
 800e584:	a13e      	add	r1, pc, #248	@ (adr r1, 800e680 <__ieee754_atan2+0x180>)
 800e586:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e58a:	e7d8      	b.n	800e53e <__ieee754_atan2+0x3e>
 800e58c:	4542      	cmp	r2, r8
 800e58e:	d10f      	bne.n	800e5b0 <__ieee754_atan2+0xb0>
 800e590:	4293      	cmp	r3, r2
 800e592:	f104 34ff 	add.w	r4, r4, #4294967295	@ 0xffffffff
 800e596:	d107      	bne.n	800e5a8 <__ieee754_atan2+0xa8>
 800e598:	2c02      	cmp	r4, #2
 800e59a:	d84c      	bhi.n	800e636 <__ieee754_atan2+0x136>
 800e59c:	4b34      	ldr	r3, [pc, #208]	@ (800e670 <__ieee754_atan2+0x170>)
 800e59e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800e5a2:	e9d3 0100 	ldrd	r0, r1, [r3]
 800e5a6:	e7ca      	b.n	800e53e <__ieee754_atan2+0x3e>
 800e5a8:	2c02      	cmp	r4, #2
 800e5aa:	d848      	bhi.n	800e63e <__ieee754_atan2+0x13e>
 800e5ac:	4b31      	ldr	r3, [pc, #196]	@ (800e674 <__ieee754_atan2+0x174>)
 800e5ae:	e7f6      	b.n	800e59e <__ieee754_atan2+0x9e>
 800e5b0:	4543      	cmp	r3, r8
 800e5b2:	d0e4      	beq.n	800e57e <__ieee754_atan2+0x7e>
 800e5b4:	1a9b      	subs	r3, r3, r2
 800e5b6:	f1b3 7f74 	cmp.w	r3, #63963136	@ 0x3d00000
 800e5ba:	ea4f 5223 	mov.w	r2, r3, asr #20
 800e5be:	da1e      	bge.n	800e5fe <__ieee754_atan2+0xfe>
 800e5c0:	2f00      	cmp	r7, #0
 800e5c2:	da01      	bge.n	800e5c8 <__ieee754_atan2+0xc8>
 800e5c4:	323c      	adds	r2, #60	@ 0x3c
 800e5c6:	db1e      	blt.n	800e606 <__ieee754_atan2+0x106>
 800e5c8:	4632      	mov	r2, r6
 800e5ca:	463b      	mov	r3, r7
 800e5cc:	f7f2 f93e 	bl	800084c <__aeabi_ddiv>
 800e5d0:	ec41 0b10 	vmov	d0, r0, r1
 800e5d4:	f7ff fc98 	bl	800df08 <fabs>
 800e5d8:	f7ff fafe 	bl	800dbd8 <atan>
 800e5dc:	ec51 0b10 	vmov	r0, r1, d0
 800e5e0:	2c01      	cmp	r4, #1
 800e5e2:	d013      	beq.n	800e60c <__ieee754_atan2+0x10c>
 800e5e4:	2c02      	cmp	r4, #2
 800e5e6:	d015      	beq.n	800e614 <__ieee754_atan2+0x114>
 800e5e8:	2c00      	cmp	r4, #0
 800e5ea:	d0a8      	beq.n	800e53e <__ieee754_atan2+0x3e>
 800e5ec:	a318      	add	r3, pc, #96	@ (adr r3, 800e650 <__ieee754_atan2+0x150>)
 800e5ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5f2:	f7f1 fe49 	bl	8000288 <__aeabi_dsub>
 800e5f6:	a318      	add	r3, pc, #96	@ (adr r3, 800e658 <__ieee754_atan2+0x158>)
 800e5f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e5fc:	e014      	b.n	800e628 <__ieee754_atan2+0x128>
 800e5fe:	a118      	add	r1, pc, #96	@ (adr r1, 800e660 <__ieee754_atan2+0x160>)
 800e600:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e604:	e7ec      	b.n	800e5e0 <__ieee754_atan2+0xe0>
 800e606:	2000      	movs	r0, #0
 800e608:	2100      	movs	r1, #0
 800e60a:	e7e9      	b.n	800e5e0 <__ieee754_atan2+0xe0>
 800e60c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800e610:	4619      	mov	r1, r3
 800e612:	e794      	b.n	800e53e <__ieee754_atan2+0x3e>
 800e614:	a30e      	add	r3, pc, #56	@ (adr r3, 800e650 <__ieee754_atan2+0x150>)
 800e616:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e61a:	f7f1 fe35 	bl	8000288 <__aeabi_dsub>
 800e61e:	4602      	mov	r2, r0
 800e620:	460b      	mov	r3, r1
 800e622:	a10d      	add	r1, pc, #52	@ (adr r1, 800e658 <__ieee754_atan2+0x158>)
 800e624:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e628:	f7f1 fe2e 	bl	8000288 <__aeabi_dsub>
 800e62c:	e787      	b.n	800e53e <__ieee754_atan2+0x3e>
 800e62e:	a10a      	add	r1, pc, #40	@ (adr r1, 800e658 <__ieee754_atan2+0x158>)
 800e630:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e634:	e783      	b.n	800e53e <__ieee754_atan2+0x3e>
 800e636:	a10c      	add	r1, pc, #48	@ (adr r1, 800e668 <__ieee754_atan2+0x168>)
 800e638:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e63c:	e77f      	b.n	800e53e <__ieee754_atan2+0x3e>
 800e63e:	2000      	movs	r0, #0
 800e640:	2100      	movs	r1, #0
 800e642:	e77c      	b.n	800e53e <__ieee754_atan2+0x3e>
 800e644:	a106      	add	r1, pc, #24	@ (adr r1, 800e660 <__ieee754_atan2+0x160>)
 800e646:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e64a:	e778      	b.n	800e53e <__ieee754_atan2+0x3e>
 800e64c:	f3af 8000 	nop.w
 800e650:	33145c07 	.word	0x33145c07
 800e654:	3ca1a626 	.word	0x3ca1a626
 800e658:	54442d18 	.word	0x54442d18
 800e65c:	400921fb 	.word	0x400921fb
 800e660:	54442d18 	.word	0x54442d18
 800e664:	3ff921fb 	.word	0x3ff921fb
 800e668:	54442d18 	.word	0x54442d18
 800e66c:	3fe921fb 	.word	0x3fe921fb
 800e670:	0800ff50 	.word	0x0800ff50
 800e674:	0800ff38 	.word	0x0800ff38
 800e678:	54442d18 	.word	0x54442d18
 800e67c:	c00921fb 	.word	0xc00921fb
 800e680:	54442d18 	.word	0x54442d18
 800e684:	bff921fb 	.word	0xbff921fb
 800e688:	7ff00000 	.word	0x7ff00000
 800e68c:	00000000 	.word	0x00000000

0800e690 <__ieee754_pow>:
 800e690:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e694:	b091      	sub	sp, #68	@ 0x44
 800e696:	ed8d 1b00 	vstr	d1, [sp]
 800e69a:	e9dd 1900 	ldrd	r1, r9, [sp]
 800e69e:	f029 4a00 	bic.w	sl, r9, #2147483648	@ 0x80000000
 800e6a2:	ea5a 0001 	orrs.w	r0, sl, r1
 800e6a6:	ec57 6b10 	vmov	r6, r7, d0
 800e6aa:	d113      	bne.n	800e6d4 <__ieee754_pow+0x44>
 800e6ac:	19b3      	adds	r3, r6, r6
 800e6ae:	f487 2200 	eor.w	r2, r7, #524288	@ 0x80000
 800e6b2:	4152      	adcs	r2, r2
 800e6b4:	4298      	cmp	r0, r3
 800e6b6:	4b98      	ldr	r3, [pc, #608]	@ (800e918 <__ieee754_pow+0x288>)
 800e6b8:	4193      	sbcs	r3, r2
 800e6ba:	f080 84ea 	bcs.w	800f092 <__ieee754_pow+0xa02>
 800e6be:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e6c2:	4630      	mov	r0, r6
 800e6c4:	4639      	mov	r1, r7
 800e6c6:	f7f1 fde1 	bl	800028c <__adddf3>
 800e6ca:	ec41 0b10 	vmov	d0, r0, r1
 800e6ce:	b011      	add	sp, #68	@ 0x44
 800e6d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e6d4:	4a91      	ldr	r2, [pc, #580]	@ (800e91c <__ieee754_pow+0x28c>)
 800e6d6:	f027 4800 	bic.w	r8, r7, #2147483648	@ 0x80000000
 800e6da:	4590      	cmp	r8, r2
 800e6dc:	463d      	mov	r5, r7
 800e6de:	4633      	mov	r3, r6
 800e6e0:	d806      	bhi.n	800e6f0 <__ieee754_pow+0x60>
 800e6e2:	d101      	bne.n	800e6e8 <__ieee754_pow+0x58>
 800e6e4:	2e00      	cmp	r6, #0
 800e6e6:	d1ea      	bne.n	800e6be <__ieee754_pow+0x2e>
 800e6e8:	4592      	cmp	sl, r2
 800e6ea:	d801      	bhi.n	800e6f0 <__ieee754_pow+0x60>
 800e6ec:	d10e      	bne.n	800e70c <__ieee754_pow+0x7c>
 800e6ee:	b169      	cbz	r1, 800e70c <__ieee754_pow+0x7c>
 800e6f0:	f105 4540 	add.w	r5, r5, #3221225472	@ 0xc0000000
 800e6f4:	f505 1580 	add.w	r5, r5, #1048576	@ 0x100000
 800e6f8:	431d      	orrs	r5, r3
 800e6fa:	d1e0      	bne.n	800e6be <__ieee754_pow+0x2e>
 800e6fc:	e9dd 3200 	ldrd	r3, r2, [sp]
 800e700:	18db      	adds	r3, r3, r3
 800e702:	f482 2200 	eor.w	r2, r2, #524288	@ 0x80000
 800e706:	4152      	adcs	r2, r2
 800e708:	429d      	cmp	r5, r3
 800e70a:	e7d4      	b.n	800e6b6 <__ieee754_pow+0x26>
 800e70c:	2d00      	cmp	r5, #0
 800e70e:	46c3      	mov	fp, r8
 800e710:	da3a      	bge.n	800e788 <__ieee754_pow+0xf8>
 800e712:	4a83      	ldr	r2, [pc, #524]	@ (800e920 <__ieee754_pow+0x290>)
 800e714:	4592      	cmp	sl, r2
 800e716:	d84d      	bhi.n	800e7b4 <__ieee754_pow+0x124>
 800e718:	f1a2 7254 	sub.w	r2, r2, #55574528	@ 0x3500000
 800e71c:	4592      	cmp	sl, r2
 800e71e:	f240 84c7 	bls.w	800f0b0 <__ieee754_pow+0xa20>
 800e722:	ea4f 522a 	mov.w	r2, sl, asr #20
 800e726:	f2a2 32ff 	subw	r2, r2, #1023	@ 0x3ff
 800e72a:	2a14      	cmp	r2, #20
 800e72c:	dd0f      	ble.n	800e74e <__ieee754_pow+0xbe>
 800e72e:	f1c2 0234 	rsb	r2, r2, #52	@ 0x34
 800e732:	fa21 f402 	lsr.w	r4, r1, r2
 800e736:	fa04 f202 	lsl.w	r2, r4, r2
 800e73a:	428a      	cmp	r2, r1
 800e73c:	f040 84b8 	bne.w	800f0b0 <__ieee754_pow+0xa20>
 800e740:	f004 0401 	and.w	r4, r4, #1
 800e744:	f1c4 0402 	rsb	r4, r4, #2
 800e748:	2900      	cmp	r1, #0
 800e74a:	d158      	bne.n	800e7fe <__ieee754_pow+0x16e>
 800e74c:	e00e      	b.n	800e76c <__ieee754_pow+0xdc>
 800e74e:	2900      	cmp	r1, #0
 800e750:	d154      	bne.n	800e7fc <__ieee754_pow+0x16c>
 800e752:	f1c2 0214 	rsb	r2, r2, #20
 800e756:	fa4a f402 	asr.w	r4, sl, r2
 800e75a:	fa04 f202 	lsl.w	r2, r4, r2
 800e75e:	4552      	cmp	r2, sl
 800e760:	f040 84a3 	bne.w	800f0aa <__ieee754_pow+0xa1a>
 800e764:	f004 0401 	and.w	r4, r4, #1
 800e768:	f1c4 0402 	rsb	r4, r4, #2
 800e76c:	4a6d      	ldr	r2, [pc, #436]	@ (800e924 <__ieee754_pow+0x294>)
 800e76e:	4592      	cmp	sl, r2
 800e770:	d12e      	bne.n	800e7d0 <__ieee754_pow+0x140>
 800e772:	f1b9 0f00 	cmp.w	r9, #0
 800e776:	f280 8494 	bge.w	800f0a2 <__ieee754_pow+0xa12>
 800e77a:	496a      	ldr	r1, [pc, #424]	@ (800e924 <__ieee754_pow+0x294>)
 800e77c:	4632      	mov	r2, r6
 800e77e:	463b      	mov	r3, r7
 800e780:	2000      	movs	r0, #0
 800e782:	f7f2 f863 	bl	800084c <__aeabi_ddiv>
 800e786:	e7a0      	b.n	800e6ca <__ieee754_pow+0x3a>
 800e788:	2400      	movs	r4, #0
 800e78a:	bbc1      	cbnz	r1, 800e7fe <__ieee754_pow+0x16e>
 800e78c:	4a63      	ldr	r2, [pc, #396]	@ (800e91c <__ieee754_pow+0x28c>)
 800e78e:	4592      	cmp	sl, r2
 800e790:	d1ec      	bne.n	800e76c <__ieee754_pow+0xdc>
 800e792:	f108 4240 	add.w	r2, r8, #3221225472	@ 0xc0000000
 800e796:	f502 1280 	add.w	r2, r2, #1048576	@ 0x100000
 800e79a:	431a      	orrs	r2, r3
 800e79c:	f000 8479 	beq.w	800f092 <__ieee754_pow+0xa02>
 800e7a0:	4b61      	ldr	r3, [pc, #388]	@ (800e928 <__ieee754_pow+0x298>)
 800e7a2:	4598      	cmp	r8, r3
 800e7a4:	d908      	bls.n	800e7b8 <__ieee754_pow+0x128>
 800e7a6:	f1b9 0f00 	cmp.w	r9, #0
 800e7aa:	f2c0 8476 	blt.w	800f09a <__ieee754_pow+0xa0a>
 800e7ae:	e9dd 0100 	ldrd	r0, r1, [sp]
 800e7b2:	e78a      	b.n	800e6ca <__ieee754_pow+0x3a>
 800e7b4:	2402      	movs	r4, #2
 800e7b6:	e7e8      	b.n	800e78a <__ieee754_pow+0xfa>
 800e7b8:	f1b9 0f00 	cmp.w	r9, #0
 800e7bc:	f04f 0000 	mov.w	r0, #0
 800e7c0:	f04f 0100 	mov.w	r1, #0
 800e7c4:	da81      	bge.n	800e6ca <__ieee754_pow+0x3a>
 800e7c6:	e9dd 0300 	ldrd	r0, r3, [sp]
 800e7ca:	f103 4100 	add.w	r1, r3, #2147483648	@ 0x80000000
 800e7ce:	e77c      	b.n	800e6ca <__ieee754_pow+0x3a>
 800e7d0:	f1b9 4f80 	cmp.w	r9, #1073741824	@ 0x40000000
 800e7d4:	d106      	bne.n	800e7e4 <__ieee754_pow+0x154>
 800e7d6:	4632      	mov	r2, r6
 800e7d8:	463b      	mov	r3, r7
 800e7da:	4630      	mov	r0, r6
 800e7dc:	4639      	mov	r1, r7
 800e7de:	f7f1 ff0b 	bl	80005f8 <__aeabi_dmul>
 800e7e2:	e772      	b.n	800e6ca <__ieee754_pow+0x3a>
 800e7e4:	4a51      	ldr	r2, [pc, #324]	@ (800e92c <__ieee754_pow+0x29c>)
 800e7e6:	4591      	cmp	r9, r2
 800e7e8:	d109      	bne.n	800e7fe <__ieee754_pow+0x16e>
 800e7ea:	2d00      	cmp	r5, #0
 800e7ec:	db07      	blt.n	800e7fe <__ieee754_pow+0x16e>
 800e7ee:	ec47 6b10 	vmov	d0, r6, r7
 800e7f2:	b011      	add	sp, #68	@ 0x44
 800e7f4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e7f8:	f7ff bba2 	b.w	800df40 <__ieee754_sqrt>
 800e7fc:	2400      	movs	r4, #0
 800e7fe:	ec47 6b10 	vmov	d0, r6, r7
 800e802:	9302      	str	r3, [sp, #8]
 800e804:	f7ff fb80 	bl	800df08 <fabs>
 800e808:	9b02      	ldr	r3, [sp, #8]
 800e80a:	ec51 0b10 	vmov	r0, r1, d0
 800e80e:	bb53      	cbnz	r3, 800e866 <__ieee754_pow+0x1d6>
 800e810:	4b44      	ldr	r3, [pc, #272]	@ (800e924 <__ieee754_pow+0x294>)
 800e812:	f025 4240 	bic.w	r2, r5, #3221225472	@ 0xc0000000
 800e816:	429a      	cmp	r2, r3
 800e818:	d002      	beq.n	800e820 <__ieee754_pow+0x190>
 800e81a:	f1b8 0f00 	cmp.w	r8, #0
 800e81e:	d122      	bne.n	800e866 <__ieee754_pow+0x1d6>
 800e820:	f1b9 0f00 	cmp.w	r9, #0
 800e824:	da05      	bge.n	800e832 <__ieee754_pow+0x1a2>
 800e826:	4602      	mov	r2, r0
 800e828:	460b      	mov	r3, r1
 800e82a:	2000      	movs	r0, #0
 800e82c:	493d      	ldr	r1, [pc, #244]	@ (800e924 <__ieee754_pow+0x294>)
 800e82e:	f7f2 f80d 	bl	800084c <__aeabi_ddiv>
 800e832:	2d00      	cmp	r5, #0
 800e834:	f6bf af49 	bge.w	800e6ca <__ieee754_pow+0x3a>
 800e838:	f108 4840 	add.w	r8, r8, #3221225472	@ 0xc0000000
 800e83c:	f508 1880 	add.w	r8, r8, #1048576	@ 0x100000
 800e840:	ea58 0804 	orrs.w	r8, r8, r4
 800e844:	d108      	bne.n	800e858 <__ieee754_pow+0x1c8>
 800e846:	4602      	mov	r2, r0
 800e848:	460b      	mov	r3, r1
 800e84a:	4610      	mov	r0, r2
 800e84c:	4619      	mov	r1, r3
 800e84e:	f7f1 fd1b 	bl	8000288 <__aeabi_dsub>
 800e852:	4602      	mov	r2, r0
 800e854:	460b      	mov	r3, r1
 800e856:	e794      	b.n	800e782 <__ieee754_pow+0xf2>
 800e858:	2c01      	cmp	r4, #1
 800e85a:	f47f af36 	bne.w	800e6ca <__ieee754_pow+0x3a>
 800e85e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800e862:	4619      	mov	r1, r3
 800e864:	e731      	b.n	800e6ca <__ieee754_pow+0x3a>
 800e866:	0feb      	lsrs	r3, r5, #31
 800e868:	3b01      	subs	r3, #1
 800e86a:	ea53 0204 	orrs.w	r2, r3, r4
 800e86e:	d102      	bne.n	800e876 <__ieee754_pow+0x1e6>
 800e870:	4632      	mov	r2, r6
 800e872:	463b      	mov	r3, r7
 800e874:	e7e9      	b.n	800e84a <__ieee754_pow+0x1ba>
 800e876:	3c01      	subs	r4, #1
 800e878:	431c      	orrs	r4, r3
 800e87a:	d016      	beq.n	800e8aa <__ieee754_pow+0x21a>
 800e87c:	ed9f 7b22 	vldr	d7, [pc, #136]	@ 800e908 <__ieee754_pow+0x278>
 800e880:	f1ba 4f84 	cmp.w	sl, #1107296256	@ 0x42000000
 800e884:	ed8d 7b02 	vstr	d7, [sp, #8]
 800e888:	f240 8112 	bls.w	800eab0 <__ieee754_pow+0x420>
 800e88c:	4b28      	ldr	r3, [pc, #160]	@ (800e930 <__ieee754_pow+0x2a0>)
 800e88e:	459a      	cmp	sl, r3
 800e890:	4b25      	ldr	r3, [pc, #148]	@ (800e928 <__ieee754_pow+0x298>)
 800e892:	d916      	bls.n	800e8c2 <__ieee754_pow+0x232>
 800e894:	4598      	cmp	r8, r3
 800e896:	d80b      	bhi.n	800e8b0 <__ieee754_pow+0x220>
 800e898:	f1b9 0f00 	cmp.w	r9, #0
 800e89c:	da0b      	bge.n	800e8b6 <__ieee754_pow+0x226>
 800e89e:	2000      	movs	r0, #0
 800e8a0:	b011      	add	sp, #68	@ 0x44
 800e8a2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e8a6:	f000 bceb 	b.w	800f280 <__math_oflow>
 800e8aa:	ed9f 7b19 	vldr	d7, [pc, #100]	@ 800e910 <__ieee754_pow+0x280>
 800e8ae:	e7e7      	b.n	800e880 <__ieee754_pow+0x1f0>
 800e8b0:	f1b9 0f00 	cmp.w	r9, #0
 800e8b4:	dcf3      	bgt.n	800e89e <__ieee754_pow+0x20e>
 800e8b6:	2000      	movs	r0, #0
 800e8b8:	b011      	add	sp, #68	@ 0x44
 800e8ba:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e8be:	f000 bcd7 	b.w	800f270 <__math_uflow>
 800e8c2:	4598      	cmp	r8, r3
 800e8c4:	d20c      	bcs.n	800e8e0 <__ieee754_pow+0x250>
 800e8c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e8ca:	2200      	movs	r2, #0
 800e8cc:	2300      	movs	r3, #0
 800e8ce:	f7f2 f905 	bl	8000adc <__aeabi_dcmplt>
 800e8d2:	3800      	subs	r0, #0
 800e8d4:	bf18      	it	ne
 800e8d6:	2001      	movne	r0, #1
 800e8d8:	f1b9 0f00 	cmp.w	r9, #0
 800e8dc:	daec      	bge.n	800e8b8 <__ieee754_pow+0x228>
 800e8de:	e7df      	b.n	800e8a0 <__ieee754_pow+0x210>
 800e8e0:	4b10      	ldr	r3, [pc, #64]	@ (800e924 <__ieee754_pow+0x294>)
 800e8e2:	4598      	cmp	r8, r3
 800e8e4:	f04f 0200 	mov.w	r2, #0
 800e8e8:	d924      	bls.n	800e934 <__ieee754_pow+0x2a4>
 800e8ea:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800e8ee:	2300      	movs	r3, #0
 800e8f0:	f7f2 f8f4 	bl	8000adc <__aeabi_dcmplt>
 800e8f4:	3800      	subs	r0, #0
 800e8f6:	bf18      	it	ne
 800e8f8:	2001      	movne	r0, #1
 800e8fa:	f1b9 0f00 	cmp.w	r9, #0
 800e8fe:	dccf      	bgt.n	800e8a0 <__ieee754_pow+0x210>
 800e900:	e7da      	b.n	800e8b8 <__ieee754_pow+0x228>
 800e902:	bf00      	nop
 800e904:	f3af 8000 	nop.w
 800e908:	00000000 	.word	0x00000000
 800e90c:	3ff00000 	.word	0x3ff00000
 800e910:	00000000 	.word	0x00000000
 800e914:	bff00000 	.word	0xbff00000
 800e918:	fff00000 	.word	0xfff00000
 800e91c:	7ff00000 	.word	0x7ff00000
 800e920:	433fffff 	.word	0x433fffff
 800e924:	3ff00000 	.word	0x3ff00000
 800e928:	3fefffff 	.word	0x3fefffff
 800e92c:	3fe00000 	.word	0x3fe00000
 800e930:	43f00000 	.word	0x43f00000
 800e934:	4b5a      	ldr	r3, [pc, #360]	@ (800eaa0 <__ieee754_pow+0x410>)
 800e936:	f7f1 fca7 	bl	8000288 <__aeabi_dsub>
 800e93a:	a351      	add	r3, pc, #324	@ (adr r3, 800ea80 <__ieee754_pow+0x3f0>)
 800e93c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e940:	4604      	mov	r4, r0
 800e942:	460d      	mov	r5, r1
 800e944:	f7f1 fe58 	bl	80005f8 <__aeabi_dmul>
 800e948:	a34f      	add	r3, pc, #316	@ (adr r3, 800ea88 <__ieee754_pow+0x3f8>)
 800e94a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e94e:	4606      	mov	r6, r0
 800e950:	460f      	mov	r7, r1
 800e952:	4620      	mov	r0, r4
 800e954:	4629      	mov	r1, r5
 800e956:	f7f1 fe4f 	bl	80005f8 <__aeabi_dmul>
 800e95a:	4b52      	ldr	r3, [pc, #328]	@ (800eaa4 <__ieee754_pow+0x414>)
 800e95c:	4682      	mov	sl, r0
 800e95e:	468b      	mov	fp, r1
 800e960:	2200      	movs	r2, #0
 800e962:	4620      	mov	r0, r4
 800e964:	4629      	mov	r1, r5
 800e966:	f7f1 fe47 	bl	80005f8 <__aeabi_dmul>
 800e96a:	4602      	mov	r2, r0
 800e96c:	460b      	mov	r3, r1
 800e96e:	a148      	add	r1, pc, #288	@ (adr r1, 800ea90 <__ieee754_pow+0x400>)
 800e970:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e974:	f7f1 fc88 	bl	8000288 <__aeabi_dsub>
 800e978:	4622      	mov	r2, r4
 800e97a:	462b      	mov	r3, r5
 800e97c:	f7f1 fe3c 	bl	80005f8 <__aeabi_dmul>
 800e980:	4602      	mov	r2, r0
 800e982:	460b      	mov	r3, r1
 800e984:	2000      	movs	r0, #0
 800e986:	4948      	ldr	r1, [pc, #288]	@ (800eaa8 <__ieee754_pow+0x418>)
 800e988:	f7f1 fc7e 	bl	8000288 <__aeabi_dsub>
 800e98c:	4622      	mov	r2, r4
 800e98e:	4680      	mov	r8, r0
 800e990:	4689      	mov	r9, r1
 800e992:	462b      	mov	r3, r5
 800e994:	4620      	mov	r0, r4
 800e996:	4629      	mov	r1, r5
 800e998:	f7f1 fe2e 	bl	80005f8 <__aeabi_dmul>
 800e99c:	4602      	mov	r2, r0
 800e99e:	460b      	mov	r3, r1
 800e9a0:	4640      	mov	r0, r8
 800e9a2:	4649      	mov	r1, r9
 800e9a4:	f7f1 fe28 	bl	80005f8 <__aeabi_dmul>
 800e9a8:	a33b      	add	r3, pc, #236	@ (adr r3, 800ea98 <__ieee754_pow+0x408>)
 800e9aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e9ae:	f7f1 fe23 	bl	80005f8 <__aeabi_dmul>
 800e9b2:	4602      	mov	r2, r0
 800e9b4:	460b      	mov	r3, r1
 800e9b6:	4650      	mov	r0, sl
 800e9b8:	4659      	mov	r1, fp
 800e9ba:	f7f1 fc65 	bl	8000288 <__aeabi_dsub>
 800e9be:	4602      	mov	r2, r0
 800e9c0:	460b      	mov	r3, r1
 800e9c2:	4680      	mov	r8, r0
 800e9c4:	4689      	mov	r9, r1
 800e9c6:	4630      	mov	r0, r6
 800e9c8:	4639      	mov	r1, r7
 800e9ca:	f7f1 fc5f 	bl	800028c <__adddf3>
 800e9ce:	2400      	movs	r4, #0
 800e9d0:	4632      	mov	r2, r6
 800e9d2:	463b      	mov	r3, r7
 800e9d4:	4620      	mov	r0, r4
 800e9d6:	460d      	mov	r5, r1
 800e9d8:	f7f1 fc56 	bl	8000288 <__aeabi_dsub>
 800e9dc:	4602      	mov	r2, r0
 800e9de:	460b      	mov	r3, r1
 800e9e0:	4640      	mov	r0, r8
 800e9e2:	4649      	mov	r1, r9
 800e9e4:	f7f1 fc50 	bl	8000288 <__aeabi_dsub>
 800e9e8:	e9dd 2300 	ldrd	r2, r3, [sp]
 800e9ec:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800e9f0:	2300      	movs	r3, #0
 800e9f2:	9304      	str	r3, [sp, #16]
 800e9f4:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 800e9f8:	4606      	mov	r6, r0
 800e9fa:	460f      	mov	r7, r1
 800e9fc:	4652      	mov	r2, sl
 800e9fe:	465b      	mov	r3, fp
 800ea00:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ea04:	f7f1 fc40 	bl	8000288 <__aeabi_dsub>
 800ea08:	4622      	mov	r2, r4
 800ea0a:	462b      	mov	r3, r5
 800ea0c:	f7f1 fdf4 	bl	80005f8 <__aeabi_dmul>
 800ea10:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ea14:	4680      	mov	r8, r0
 800ea16:	4689      	mov	r9, r1
 800ea18:	4630      	mov	r0, r6
 800ea1a:	4639      	mov	r1, r7
 800ea1c:	f7f1 fdec 	bl	80005f8 <__aeabi_dmul>
 800ea20:	4602      	mov	r2, r0
 800ea22:	460b      	mov	r3, r1
 800ea24:	4640      	mov	r0, r8
 800ea26:	4649      	mov	r1, r9
 800ea28:	f7f1 fc30 	bl	800028c <__adddf3>
 800ea2c:	4652      	mov	r2, sl
 800ea2e:	465b      	mov	r3, fp
 800ea30:	4606      	mov	r6, r0
 800ea32:	460f      	mov	r7, r1
 800ea34:	4620      	mov	r0, r4
 800ea36:	4629      	mov	r1, r5
 800ea38:	f7f1 fdde 	bl	80005f8 <__aeabi_dmul>
 800ea3c:	460b      	mov	r3, r1
 800ea3e:	4602      	mov	r2, r0
 800ea40:	4680      	mov	r8, r0
 800ea42:	4689      	mov	r9, r1
 800ea44:	4630      	mov	r0, r6
 800ea46:	4639      	mov	r1, r7
 800ea48:	f7f1 fc20 	bl	800028c <__adddf3>
 800ea4c:	4b17      	ldr	r3, [pc, #92]	@ (800eaac <__ieee754_pow+0x41c>)
 800ea4e:	4299      	cmp	r1, r3
 800ea50:	4604      	mov	r4, r0
 800ea52:	460d      	mov	r5, r1
 800ea54:	468a      	mov	sl, r1
 800ea56:	468b      	mov	fp, r1
 800ea58:	f340 82ef 	ble.w	800f03a <__ieee754_pow+0x9aa>
 800ea5c:	f101 433f 	add.w	r3, r1, #3204448256	@ 0xbf000000
 800ea60:	f503 03e0 	add.w	r3, r3, #7340032	@ 0x700000
 800ea64:	4303      	orrs	r3, r0
 800ea66:	f000 81e8 	beq.w	800ee3a <__ieee754_pow+0x7aa>
 800ea6a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800ea6e:	2200      	movs	r2, #0
 800ea70:	2300      	movs	r3, #0
 800ea72:	f7f2 f833 	bl	8000adc <__aeabi_dcmplt>
 800ea76:	3800      	subs	r0, #0
 800ea78:	bf18      	it	ne
 800ea7a:	2001      	movne	r0, #1
 800ea7c:	e710      	b.n	800e8a0 <__ieee754_pow+0x210>
 800ea7e:	bf00      	nop
 800ea80:	60000000 	.word	0x60000000
 800ea84:	3ff71547 	.word	0x3ff71547
 800ea88:	f85ddf44 	.word	0xf85ddf44
 800ea8c:	3e54ae0b 	.word	0x3e54ae0b
 800ea90:	55555555 	.word	0x55555555
 800ea94:	3fd55555 	.word	0x3fd55555
 800ea98:	652b82fe 	.word	0x652b82fe
 800ea9c:	3ff71547 	.word	0x3ff71547
 800eaa0:	3ff00000 	.word	0x3ff00000
 800eaa4:	3fd00000 	.word	0x3fd00000
 800eaa8:	3fe00000 	.word	0x3fe00000
 800eaac:	408fffff 	.word	0x408fffff
 800eab0:	4bd5      	ldr	r3, [pc, #852]	@ (800ee08 <__ieee754_pow+0x778>)
 800eab2:	402b      	ands	r3, r5
 800eab4:	2200      	movs	r2, #0
 800eab6:	b92b      	cbnz	r3, 800eac4 <__ieee754_pow+0x434>
 800eab8:	4bd4      	ldr	r3, [pc, #848]	@ (800ee0c <__ieee754_pow+0x77c>)
 800eaba:	f7f1 fd9d 	bl	80005f8 <__aeabi_dmul>
 800eabe:	f06f 0234 	mvn.w	r2, #52	@ 0x34
 800eac2:	468b      	mov	fp, r1
 800eac4:	ea4f 532b 	mov.w	r3, fp, asr #20
 800eac8:	f2a3 33ff 	subw	r3, r3, #1023	@ 0x3ff
 800eacc:	4413      	add	r3, r2
 800eace:	930a      	str	r3, [sp, #40]	@ 0x28
 800ead0:	4bcf      	ldr	r3, [pc, #828]	@ (800ee10 <__ieee754_pow+0x780>)
 800ead2:	f3cb 0b13 	ubfx	fp, fp, #0, #20
 800ead6:	f04b 557f 	orr.w	r5, fp, #1069547520	@ 0x3fc00000
 800eada:	459b      	cmp	fp, r3
 800eadc:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 800eae0:	dd08      	ble.n	800eaf4 <__ieee754_pow+0x464>
 800eae2:	4bcc      	ldr	r3, [pc, #816]	@ (800ee14 <__ieee754_pow+0x784>)
 800eae4:	459b      	cmp	fp, r3
 800eae6:	f340 81a5 	ble.w	800ee34 <__ieee754_pow+0x7a4>
 800eaea:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800eaec:	3301      	adds	r3, #1
 800eaee:	930a      	str	r3, [sp, #40]	@ 0x28
 800eaf0:	f5a5 1580 	sub.w	r5, r5, #1048576	@ 0x100000
 800eaf4:	f04f 0a00 	mov.w	sl, #0
 800eaf8:	ea4f 03ca 	mov.w	r3, sl, lsl #3
 800eafc:	930b      	str	r3, [sp, #44]	@ 0x2c
 800eafe:	4bc6      	ldr	r3, [pc, #792]	@ (800ee18 <__ieee754_pow+0x788>)
 800eb00:	eb03 03ca 	add.w	r3, r3, sl, lsl #3
 800eb04:	ed93 7b00 	vldr	d7, [r3]
 800eb08:	4629      	mov	r1, r5
 800eb0a:	ec53 2b17 	vmov	r2, r3, d7
 800eb0e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800eb12:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800eb16:	f7f1 fbb7 	bl	8000288 <__aeabi_dsub>
 800eb1a:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800eb1e:	4606      	mov	r6, r0
 800eb20:	460f      	mov	r7, r1
 800eb22:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800eb26:	f7f1 fbb1 	bl	800028c <__adddf3>
 800eb2a:	4602      	mov	r2, r0
 800eb2c:	460b      	mov	r3, r1
 800eb2e:	2000      	movs	r0, #0
 800eb30:	49ba      	ldr	r1, [pc, #744]	@ (800ee1c <__ieee754_pow+0x78c>)
 800eb32:	f7f1 fe8b 	bl	800084c <__aeabi_ddiv>
 800eb36:	e9cd 010c 	strd	r0, r1, [sp, #48]	@ 0x30
 800eb3a:	4602      	mov	r2, r0
 800eb3c:	460b      	mov	r3, r1
 800eb3e:	4630      	mov	r0, r6
 800eb40:	4639      	mov	r1, r7
 800eb42:	f7f1 fd59 	bl	80005f8 <__aeabi_dmul>
 800eb46:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800eb4a:	e9dd bc04 	ldrd	fp, ip, [sp, #16]
 800eb4e:	106d      	asrs	r5, r5, #1
 800eb50:	f045 5500 	orr.w	r5, r5, #536870912	@ 0x20000000
 800eb54:	f04f 0b00 	mov.w	fp, #0
 800eb58:	f505 2500 	add.w	r5, r5, #524288	@ 0x80000
 800eb5c:	4661      	mov	r1, ip
 800eb5e:	2200      	movs	r2, #0
 800eb60:	eb05 438a 	add.w	r3, r5, sl, lsl #18
 800eb64:	4658      	mov	r0, fp
 800eb66:	46e1      	mov	r9, ip
 800eb68:	e9cd bc0e 	strd	fp, ip, [sp, #56]	@ 0x38
 800eb6c:	4614      	mov	r4, r2
 800eb6e:	461d      	mov	r5, r3
 800eb70:	f7f1 fd42 	bl	80005f8 <__aeabi_dmul>
 800eb74:	4602      	mov	r2, r0
 800eb76:	460b      	mov	r3, r1
 800eb78:	4630      	mov	r0, r6
 800eb7a:	4639      	mov	r1, r7
 800eb7c:	f7f1 fb84 	bl	8000288 <__aeabi_dsub>
 800eb80:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800eb84:	4606      	mov	r6, r0
 800eb86:	460f      	mov	r7, r1
 800eb88:	4620      	mov	r0, r4
 800eb8a:	4629      	mov	r1, r5
 800eb8c:	f7f1 fb7c 	bl	8000288 <__aeabi_dsub>
 800eb90:	4602      	mov	r2, r0
 800eb92:	460b      	mov	r3, r1
 800eb94:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800eb98:	f7f1 fb76 	bl	8000288 <__aeabi_dsub>
 800eb9c:	465a      	mov	r2, fp
 800eb9e:	464b      	mov	r3, r9
 800eba0:	f7f1 fd2a 	bl	80005f8 <__aeabi_dmul>
 800eba4:	4602      	mov	r2, r0
 800eba6:	460b      	mov	r3, r1
 800eba8:	4630      	mov	r0, r6
 800ebaa:	4639      	mov	r1, r7
 800ebac:	f7f1 fb6c 	bl	8000288 <__aeabi_dsub>
 800ebb0:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800ebb4:	f7f1 fd20 	bl	80005f8 <__aeabi_dmul>
 800ebb8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ebbc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800ebc0:	4610      	mov	r0, r2
 800ebc2:	4619      	mov	r1, r3
 800ebc4:	f7f1 fd18 	bl	80005f8 <__aeabi_dmul>
 800ebc8:	a37d      	add	r3, pc, #500	@ (adr r3, 800edc0 <__ieee754_pow+0x730>)
 800ebca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebce:	4604      	mov	r4, r0
 800ebd0:	460d      	mov	r5, r1
 800ebd2:	f7f1 fd11 	bl	80005f8 <__aeabi_dmul>
 800ebd6:	a37c      	add	r3, pc, #496	@ (adr r3, 800edc8 <__ieee754_pow+0x738>)
 800ebd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebdc:	f7f1 fb56 	bl	800028c <__adddf3>
 800ebe0:	4622      	mov	r2, r4
 800ebe2:	462b      	mov	r3, r5
 800ebe4:	f7f1 fd08 	bl	80005f8 <__aeabi_dmul>
 800ebe8:	a379      	add	r3, pc, #484	@ (adr r3, 800edd0 <__ieee754_pow+0x740>)
 800ebea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ebee:	f7f1 fb4d 	bl	800028c <__adddf3>
 800ebf2:	4622      	mov	r2, r4
 800ebf4:	462b      	mov	r3, r5
 800ebf6:	f7f1 fcff 	bl	80005f8 <__aeabi_dmul>
 800ebfa:	a377      	add	r3, pc, #476	@ (adr r3, 800edd8 <__ieee754_pow+0x748>)
 800ebfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec00:	f7f1 fb44 	bl	800028c <__adddf3>
 800ec04:	4622      	mov	r2, r4
 800ec06:	462b      	mov	r3, r5
 800ec08:	f7f1 fcf6 	bl	80005f8 <__aeabi_dmul>
 800ec0c:	a374      	add	r3, pc, #464	@ (adr r3, 800ede0 <__ieee754_pow+0x750>)
 800ec0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec12:	f7f1 fb3b 	bl	800028c <__adddf3>
 800ec16:	4622      	mov	r2, r4
 800ec18:	462b      	mov	r3, r5
 800ec1a:	f7f1 fced 	bl	80005f8 <__aeabi_dmul>
 800ec1e:	a372      	add	r3, pc, #456	@ (adr r3, 800ede8 <__ieee754_pow+0x758>)
 800ec20:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec24:	f7f1 fb32 	bl	800028c <__adddf3>
 800ec28:	4622      	mov	r2, r4
 800ec2a:	4606      	mov	r6, r0
 800ec2c:	460f      	mov	r7, r1
 800ec2e:	462b      	mov	r3, r5
 800ec30:	4620      	mov	r0, r4
 800ec32:	4629      	mov	r1, r5
 800ec34:	f7f1 fce0 	bl	80005f8 <__aeabi_dmul>
 800ec38:	4602      	mov	r2, r0
 800ec3a:	460b      	mov	r3, r1
 800ec3c:	4630      	mov	r0, r6
 800ec3e:	4639      	mov	r1, r7
 800ec40:	f7f1 fcda 	bl	80005f8 <__aeabi_dmul>
 800ec44:	465a      	mov	r2, fp
 800ec46:	4604      	mov	r4, r0
 800ec48:	460d      	mov	r5, r1
 800ec4a:	464b      	mov	r3, r9
 800ec4c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ec50:	f7f1 fb1c 	bl	800028c <__adddf3>
 800ec54:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ec58:	f7f1 fcce 	bl	80005f8 <__aeabi_dmul>
 800ec5c:	4622      	mov	r2, r4
 800ec5e:	462b      	mov	r3, r5
 800ec60:	f7f1 fb14 	bl	800028c <__adddf3>
 800ec64:	465a      	mov	r2, fp
 800ec66:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800ec6a:	464b      	mov	r3, r9
 800ec6c:	4658      	mov	r0, fp
 800ec6e:	4649      	mov	r1, r9
 800ec70:	f7f1 fcc2 	bl	80005f8 <__aeabi_dmul>
 800ec74:	4b6a      	ldr	r3, [pc, #424]	@ (800ee20 <__ieee754_pow+0x790>)
 800ec76:	2200      	movs	r2, #0
 800ec78:	4606      	mov	r6, r0
 800ec7a:	460f      	mov	r7, r1
 800ec7c:	f7f1 fb06 	bl	800028c <__adddf3>
 800ec80:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800ec84:	f7f1 fb02 	bl	800028c <__adddf3>
 800ec88:	46d8      	mov	r8, fp
 800ec8a:	e9dd bc0e 	ldrd	fp, ip, [sp, #56]	@ 0x38
 800ec8e:	460d      	mov	r5, r1
 800ec90:	465a      	mov	r2, fp
 800ec92:	460b      	mov	r3, r1
 800ec94:	4640      	mov	r0, r8
 800ec96:	4649      	mov	r1, r9
 800ec98:	e9cd bc0c 	strd	fp, ip, [sp, #48]	@ 0x30
 800ec9c:	f7f1 fcac 	bl	80005f8 <__aeabi_dmul>
 800eca0:	465c      	mov	r4, fp
 800eca2:	4680      	mov	r8, r0
 800eca4:	4689      	mov	r9, r1
 800eca6:	4b5e      	ldr	r3, [pc, #376]	@ (800ee20 <__ieee754_pow+0x790>)
 800eca8:	2200      	movs	r2, #0
 800ecaa:	4620      	mov	r0, r4
 800ecac:	4629      	mov	r1, r5
 800ecae:	f7f1 faeb 	bl	8000288 <__aeabi_dsub>
 800ecb2:	4632      	mov	r2, r6
 800ecb4:	463b      	mov	r3, r7
 800ecb6:	f7f1 fae7 	bl	8000288 <__aeabi_dsub>
 800ecba:	4602      	mov	r2, r0
 800ecbc:	460b      	mov	r3, r1
 800ecbe:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ecc2:	f7f1 fae1 	bl	8000288 <__aeabi_dsub>
 800ecc6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800ecca:	f7f1 fc95 	bl	80005f8 <__aeabi_dmul>
 800ecce:	4622      	mov	r2, r4
 800ecd0:	4606      	mov	r6, r0
 800ecd2:	460f      	mov	r7, r1
 800ecd4:	462b      	mov	r3, r5
 800ecd6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ecda:	f7f1 fc8d 	bl	80005f8 <__aeabi_dmul>
 800ecde:	4602      	mov	r2, r0
 800ece0:	460b      	mov	r3, r1
 800ece2:	4630      	mov	r0, r6
 800ece4:	4639      	mov	r1, r7
 800ece6:	f7f1 fad1 	bl	800028c <__adddf3>
 800ecea:	4606      	mov	r6, r0
 800ecec:	460f      	mov	r7, r1
 800ecee:	4602      	mov	r2, r0
 800ecf0:	460b      	mov	r3, r1
 800ecf2:	4640      	mov	r0, r8
 800ecf4:	4649      	mov	r1, r9
 800ecf6:	f7f1 fac9 	bl	800028c <__adddf3>
 800ecfa:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	@ 0x30
 800ecfe:	a33c      	add	r3, pc, #240	@ (adr r3, 800edf0 <__ieee754_pow+0x760>)
 800ed00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed04:	4658      	mov	r0, fp
 800ed06:	e9cd bc08 	strd	fp, ip, [sp, #32]
 800ed0a:	460d      	mov	r5, r1
 800ed0c:	f7f1 fc74 	bl	80005f8 <__aeabi_dmul>
 800ed10:	465c      	mov	r4, fp
 800ed12:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800ed16:	4642      	mov	r2, r8
 800ed18:	464b      	mov	r3, r9
 800ed1a:	4620      	mov	r0, r4
 800ed1c:	4629      	mov	r1, r5
 800ed1e:	f7f1 fab3 	bl	8000288 <__aeabi_dsub>
 800ed22:	4602      	mov	r2, r0
 800ed24:	460b      	mov	r3, r1
 800ed26:	4630      	mov	r0, r6
 800ed28:	4639      	mov	r1, r7
 800ed2a:	f7f1 faad 	bl	8000288 <__aeabi_dsub>
 800ed2e:	a332      	add	r3, pc, #200	@ (adr r3, 800edf8 <__ieee754_pow+0x768>)
 800ed30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed34:	f7f1 fc60 	bl	80005f8 <__aeabi_dmul>
 800ed38:	a331      	add	r3, pc, #196	@ (adr r3, 800ee00 <__ieee754_pow+0x770>)
 800ed3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed3e:	4606      	mov	r6, r0
 800ed40:	460f      	mov	r7, r1
 800ed42:	4620      	mov	r0, r4
 800ed44:	4629      	mov	r1, r5
 800ed46:	f7f1 fc57 	bl	80005f8 <__aeabi_dmul>
 800ed4a:	4602      	mov	r2, r0
 800ed4c:	460b      	mov	r3, r1
 800ed4e:	4630      	mov	r0, r6
 800ed50:	4639      	mov	r1, r7
 800ed52:	f7f1 fa9b 	bl	800028c <__adddf3>
 800ed56:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800ed58:	4b32      	ldr	r3, [pc, #200]	@ (800ee24 <__ieee754_pow+0x794>)
 800ed5a:	4413      	add	r3, r2
 800ed5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed60:	f7f1 fa94 	bl	800028c <__adddf3>
 800ed64:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800ed68:	980a      	ldr	r0, [sp, #40]	@ 0x28
 800ed6a:	f7f1 fbdb 	bl	8000524 <__aeabi_i2d>
 800ed6e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 800ed70:	4b2d      	ldr	r3, [pc, #180]	@ (800ee28 <__ieee754_pow+0x798>)
 800ed72:	4413      	add	r3, r2
 800ed74:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ed78:	4606      	mov	r6, r0
 800ed7a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800ed7e:	460f      	mov	r7, r1
 800ed80:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800ed84:	f7f1 fa82 	bl	800028c <__adddf3>
 800ed88:	4642      	mov	r2, r8
 800ed8a:	464b      	mov	r3, r9
 800ed8c:	f7f1 fa7e 	bl	800028c <__adddf3>
 800ed90:	4632      	mov	r2, r6
 800ed92:	463b      	mov	r3, r7
 800ed94:	f7f1 fa7a 	bl	800028c <__adddf3>
 800ed98:	e9dd bc08 	ldrd	fp, ip, [sp, #32]
 800ed9c:	4632      	mov	r2, r6
 800ed9e:	463b      	mov	r3, r7
 800eda0:	4658      	mov	r0, fp
 800eda2:	460d      	mov	r5, r1
 800eda4:	f7f1 fa70 	bl	8000288 <__aeabi_dsub>
 800eda8:	4642      	mov	r2, r8
 800edaa:	464b      	mov	r3, r9
 800edac:	f7f1 fa6c 	bl	8000288 <__aeabi_dsub>
 800edb0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800edb4:	f7f1 fa68 	bl	8000288 <__aeabi_dsub>
 800edb8:	465c      	mov	r4, fp
 800edba:	4602      	mov	r2, r0
 800edbc:	e036      	b.n	800ee2c <__ieee754_pow+0x79c>
 800edbe:	bf00      	nop
 800edc0:	4a454eef 	.word	0x4a454eef
 800edc4:	3fca7e28 	.word	0x3fca7e28
 800edc8:	93c9db65 	.word	0x93c9db65
 800edcc:	3fcd864a 	.word	0x3fcd864a
 800edd0:	a91d4101 	.word	0xa91d4101
 800edd4:	3fd17460 	.word	0x3fd17460
 800edd8:	518f264d 	.word	0x518f264d
 800eddc:	3fd55555 	.word	0x3fd55555
 800ede0:	db6fabff 	.word	0xdb6fabff
 800ede4:	3fdb6db6 	.word	0x3fdb6db6
 800ede8:	33333303 	.word	0x33333303
 800edec:	3fe33333 	.word	0x3fe33333
 800edf0:	e0000000 	.word	0xe0000000
 800edf4:	3feec709 	.word	0x3feec709
 800edf8:	dc3a03fd 	.word	0xdc3a03fd
 800edfc:	3feec709 	.word	0x3feec709
 800ee00:	145b01f5 	.word	0x145b01f5
 800ee04:	be3e2fe0 	.word	0xbe3e2fe0
 800ee08:	7ff00000 	.word	0x7ff00000
 800ee0c:	43400000 	.word	0x43400000
 800ee10:	0003988e 	.word	0x0003988e
 800ee14:	000bb679 	.word	0x000bb679
 800ee18:	0800ff88 	.word	0x0800ff88
 800ee1c:	3ff00000 	.word	0x3ff00000
 800ee20:	40080000 	.word	0x40080000
 800ee24:	0800ff68 	.word	0x0800ff68
 800ee28:	0800ff78 	.word	0x0800ff78
 800ee2c:	460b      	mov	r3, r1
 800ee2e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ee32:	e5d7      	b.n	800e9e4 <__ieee754_pow+0x354>
 800ee34:	f04f 0a01 	mov.w	sl, #1
 800ee38:	e65e      	b.n	800eaf8 <__ieee754_pow+0x468>
 800ee3a:	a3b4      	add	r3, pc, #720	@ (adr r3, 800f10c <__ieee754_pow+0xa7c>)
 800ee3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee40:	4630      	mov	r0, r6
 800ee42:	4639      	mov	r1, r7
 800ee44:	f7f1 fa22 	bl	800028c <__adddf3>
 800ee48:	4642      	mov	r2, r8
 800ee4a:	e9cd 0100 	strd	r0, r1, [sp]
 800ee4e:	464b      	mov	r3, r9
 800ee50:	4620      	mov	r0, r4
 800ee52:	4629      	mov	r1, r5
 800ee54:	f7f1 fa18 	bl	8000288 <__aeabi_dsub>
 800ee58:	4602      	mov	r2, r0
 800ee5a:	460b      	mov	r3, r1
 800ee5c:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ee60:	f7f1 fe5a 	bl	8000b18 <__aeabi_dcmpgt>
 800ee64:	2800      	cmp	r0, #0
 800ee66:	f47f ae00 	bne.w	800ea6a <__ieee754_pow+0x3da>
 800ee6a:	ea4f 5a2a 	mov.w	sl, sl, asr #20
 800ee6e:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 800ee72:	f2aa 3afe 	subw	sl, sl, #1022	@ 0x3fe
 800ee76:	fa43 fa0a 	asr.w	sl, r3, sl
 800ee7a:	44da      	add	sl, fp
 800ee7c:	f3ca 510a 	ubfx	r1, sl, #20, #11
 800ee80:	489d      	ldr	r0, [pc, #628]	@ (800f0f8 <__ieee754_pow+0xa68>)
 800ee82:	f2a1 31ff 	subw	r1, r1, #1023	@ 0x3ff
 800ee86:	4108      	asrs	r0, r1
 800ee88:	ea00 030a 	and.w	r3, r0, sl
 800ee8c:	f3ca 0a13 	ubfx	sl, sl, #0, #20
 800ee90:	f1c1 0114 	rsb	r1, r1, #20
 800ee94:	f44a 1a80 	orr.w	sl, sl, #1048576	@ 0x100000
 800ee98:	fa4a fa01 	asr.w	sl, sl, r1
 800ee9c:	f1bb 0f00 	cmp.w	fp, #0
 800eea0:	4640      	mov	r0, r8
 800eea2:	4649      	mov	r1, r9
 800eea4:	f04f 0200 	mov.w	r2, #0
 800eea8:	bfb8      	it	lt
 800eeaa:	f1ca 0a00 	rsblt	sl, sl, #0
 800eeae:	f7f1 f9eb 	bl	8000288 <__aeabi_dsub>
 800eeb2:	4680      	mov	r8, r0
 800eeb4:	4689      	mov	r9, r1
 800eeb6:	4632      	mov	r2, r6
 800eeb8:	463b      	mov	r3, r7
 800eeba:	4640      	mov	r0, r8
 800eebc:	4649      	mov	r1, r9
 800eebe:	f7f1 f9e5 	bl	800028c <__adddf3>
 800eec2:	2400      	movs	r4, #0
 800eec4:	a37c      	add	r3, pc, #496	@ (adr r3, 800f0b8 <__ieee754_pow+0xa28>)
 800eec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eeca:	4620      	mov	r0, r4
 800eecc:	460d      	mov	r5, r1
 800eece:	f7f1 fb93 	bl	80005f8 <__aeabi_dmul>
 800eed2:	4642      	mov	r2, r8
 800eed4:	e9cd 0100 	strd	r0, r1, [sp]
 800eed8:	464b      	mov	r3, r9
 800eeda:	4620      	mov	r0, r4
 800eedc:	4629      	mov	r1, r5
 800eede:	f7f1 f9d3 	bl	8000288 <__aeabi_dsub>
 800eee2:	4602      	mov	r2, r0
 800eee4:	460b      	mov	r3, r1
 800eee6:	4630      	mov	r0, r6
 800eee8:	4639      	mov	r1, r7
 800eeea:	f7f1 f9cd 	bl	8000288 <__aeabi_dsub>
 800eeee:	a374      	add	r3, pc, #464	@ (adr r3, 800f0c0 <__ieee754_pow+0xa30>)
 800eef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eef4:	f7f1 fb80 	bl	80005f8 <__aeabi_dmul>
 800eef8:	a373      	add	r3, pc, #460	@ (adr r3, 800f0c8 <__ieee754_pow+0xa38>)
 800eefa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eefe:	4680      	mov	r8, r0
 800ef00:	4689      	mov	r9, r1
 800ef02:	4620      	mov	r0, r4
 800ef04:	4629      	mov	r1, r5
 800ef06:	f7f1 fb77 	bl	80005f8 <__aeabi_dmul>
 800ef0a:	4602      	mov	r2, r0
 800ef0c:	460b      	mov	r3, r1
 800ef0e:	4640      	mov	r0, r8
 800ef10:	4649      	mov	r1, r9
 800ef12:	f7f1 f9bb 	bl	800028c <__adddf3>
 800ef16:	4604      	mov	r4, r0
 800ef18:	460d      	mov	r5, r1
 800ef1a:	4602      	mov	r2, r0
 800ef1c:	460b      	mov	r3, r1
 800ef1e:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ef22:	f7f1 f9b3 	bl	800028c <__adddf3>
 800ef26:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ef2a:	4680      	mov	r8, r0
 800ef2c:	4689      	mov	r9, r1
 800ef2e:	f7f1 f9ab 	bl	8000288 <__aeabi_dsub>
 800ef32:	4602      	mov	r2, r0
 800ef34:	460b      	mov	r3, r1
 800ef36:	4620      	mov	r0, r4
 800ef38:	4629      	mov	r1, r5
 800ef3a:	f7f1 f9a5 	bl	8000288 <__aeabi_dsub>
 800ef3e:	4642      	mov	r2, r8
 800ef40:	4606      	mov	r6, r0
 800ef42:	460f      	mov	r7, r1
 800ef44:	464b      	mov	r3, r9
 800ef46:	4640      	mov	r0, r8
 800ef48:	4649      	mov	r1, r9
 800ef4a:	f7f1 fb55 	bl	80005f8 <__aeabi_dmul>
 800ef4e:	a360      	add	r3, pc, #384	@ (adr r3, 800f0d0 <__ieee754_pow+0xa40>)
 800ef50:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef54:	4604      	mov	r4, r0
 800ef56:	460d      	mov	r5, r1
 800ef58:	f7f1 fb4e 	bl	80005f8 <__aeabi_dmul>
 800ef5c:	a35e      	add	r3, pc, #376	@ (adr r3, 800f0d8 <__ieee754_pow+0xa48>)
 800ef5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef62:	f7f1 f991 	bl	8000288 <__aeabi_dsub>
 800ef66:	4622      	mov	r2, r4
 800ef68:	462b      	mov	r3, r5
 800ef6a:	f7f1 fb45 	bl	80005f8 <__aeabi_dmul>
 800ef6e:	a35c      	add	r3, pc, #368	@ (adr r3, 800f0e0 <__ieee754_pow+0xa50>)
 800ef70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef74:	f7f1 f98a 	bl	800028c <__adddf3>
 800ef78:	4622      	mov	r2, r4
 800ef7a:	462b      	mov	r3, r5
 800ef7c:	f7f1 fb3c 	bl	80005f8 <__aeabi_dmul>
 800ef80:	a359      	add	r3, pc, #356	@ (adr r3, 800f0e8 <__ieee754_pow+0xa58>)
 800ef82:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef86:	f7f1 f97f 	bl	8000288 <__aeabi_dsub>
 800ef8a:	4622      	mov	r2, r4
 800ef8c:	462b      	mov	r3, r5
 800ef8e:	f7f1 fb33 	bl	80005f8 <__aeabi_dmul>
 800ef92:	a357      	add	r3, pc, #348	@ (adr r3, 800f0f0 <__ieee754_pow+0xa60>)
 800ef94:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef98:	f7f1 f978 	bl	800028c <__adddf3>
 800ef9c:	4622      	mov	r2, r4
 800ef9e:	462b      	mov	r3, r5
 800efa0:	f7f1 fb2a 	bl	80005f8 <__aeabi_dmul>
 800efa4:	4602      	mov	r2, r0
 800efa6:	460b      	mov	r3, r1
 800efa8:	4640      	mov	r0, r8
 800efaa:	4649      	mov	r1, r9
 800efac:	f7f1 f96c 	bl	8000288 <__aeabi_dsub>
 800efb0:	4604      	mov	r4, r0
 800efb2:	460d      	mov	r5, r1
 800efb4:	4602      	mov	r2, r0
 800efb6:	460b      	mov	r3, r1
 800efb8:	4640      	mov	r0, r8
 800efba:	4649      	mov	r1, r9
 800efbc:	f7f1 fb1c 	bl	80005f8 <__aeabi_dmul>
 800efc0:	2200      	movs	r2, #0
 800efc2:	e9cd 0100 	strd	r0, r1, [sp]
 800efc6:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800efca:	4620      	mov	r0, r4
 800efcc:	4629      	mov	r1, r5
 800efce:	f7f1 f95b 	bl	8000288 <__aeabi_dsub>
 800efd2:	4602      	mov	r2, r0
 800efd4:	460b      	mov	r3, r1
 800efd6:	e9dd 0100 	ldrd	r0, r1, [sp]
 800efda:	f7f1 fc37 	bl	800084c <__aeabi_ddiv>
 800efde:	4632      	mov	r2, r6
 800efe0:	4604      	mov	r4, r0
 800efe2:	460d      	mov	r5, r1
 800efe4:	463b      	mov	r3, r7
 800efe6:	4640      	mov	r0, r8
 800efe8:	4649      	mov	r1, r9
 800efea:	f7f1 fb05 	bl	80005f8 <__aeabi_dmul>
 800efee:	4632      	mov	r2, r6
 800eff0:	463b      	mov	r3, r7
 800eff2:	f7f1 f94b 	bl	800028c <__adddf3>
 800eff6:	4602      	mov	r2, r0
 800eff8:	460b      	mov	r3, r1
 800effa:	4620      	mov	r0, r4
 800effc:	4629      	mov	r1, r5
 800effe:	f7f1 f943 	bl	8000288 <__aeabi_dsub>
 800f002:	4642      	mov	r2, r8
 800f004:	464b      	mov	r3, r9
 800f006:	f7f1 f93f 	bl	8000288 <__aeabi_dsub>
 800f00a:	460b      	mov	r3, r1
 800f00c:	4602      	mov	r2, r0
 800f00e:	493b      	ldr	r1, [pc, #236]	@ (800f0fc <__ieee754_pow+0xa6c>)
 800f010:	2000      	movs	r0, #0
 800f012:	f7f1 f939 	bl	8000288 <__aeabi_dsub>
 800f016:	ec41 0b10 	vmov	d0, r0, r1
 800f01a:	ee10 3a90 	vmov	r3, s1
 800f01e:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800f022:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800f026:	da30      	bge.n	800f08a <__ieee754_pow+0x9fa>
 800f028:	4650      	mov	r0, sl
 800f02a:	f000 f875 	bl	800f118 <scalbn>
 800f02e:	ec51 0b10 	vmov	r0, r1, d0
 800f032:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800f036:	f7ff bbd2 	b.w	800e7de <__ieee754_pow+0x14e>
 800f03a:	4c31      	ldr	r4, [pc, #196]	@ (800f100 <__ieee754_pow+0xa70>)
 800f03c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800f040:	42a3      	cmp	r3, r4
 800f042:	d91a      	bls.n	800f07a <__ieee754_pow+0x9ea>
 800f044:	4b2f      	ldr	r3, [pc, #188]	@ (800f104 <__ieee754_pow+0xa74>)
 800f046:	440b      	add	r3, r1
 800f048:	4303      	orrs	r3, r0
 800f04a:	d009      	beq.n	800f060 <__ieee754_pow+0x9d0>
 800f04c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800f050:	2200      	movs	r2, #0
 800f052:	2300      	movs	r3, #0
 800f054:	f7f1 fd42 	bl	8000adc <__aeabi_dcmplt>
 800f058:	3800      	subs	r0, #0
 800f05a:	bf18      	it	ne
 800f05c:	2001      	movne	r0, #1
 800f05e:	e42b      	b.n	800e8b8 <__ieee754_pow+0x228>
 800f060:	4642      	mov	r2, r8
 800f062:	464b      	mov	r3, r9
 800f064:	f7f1 f910 	bl	8000288 <__aeabi_dsub>
 800f068:	4632      	mov	r2, r6
 800f06a:	463b      	mov	r3, r7
 800f06c:	f7f1 fd4a 	bl	8000b04 <__aeabi_dcmpge>
 800f070:	2800      	cmp	r0, #0
 800f072:	d1eb      	bne.n	800f04c <__ieee754_pow+0x9bc>
 800f074:	f8df a09c 	ldr.w	sl, [pc, #156]	@ 800f114 <__ieee754_pow+0xa84>
 800f078:	e6f7      	b.n	800ee6a <__ieee754_pow+0x7da>
 800f07a:	469a      	mov	sl, r3
 800f07c:	4b22      	ldr	r3, [pc, #136]	@ (800f108 <__ieee754_pow+0xa78>)
 800f07e:	459a      	cmp	sl, r3
 800f080:	f63f aef3 	bhi.w	800ee6a <__ieee754_pow+0x7da>
 800f084:	f8dd a010 	ldr.w	sl, [sp, #16]
 800f088:	e715      	b.n	800eeb6 <__ieee754_pow+0x826>
 800f08a:	ec51 0b10 	vmov	r0, r1, d0
 800f08e:	4619      	mov	r1, r3
 800f090:	e7cf      	b.n	800f032 <__ieee754_pow+0x9a2>
 800f092:	491a      	ldr	r1, [pc, #104]	@ (800f0fc <__ieee754_pow+0xa6c>)
 800f094:	2000      	movs	r0, #0
 800f096:	f7ff bb18 	b.w	800e6ca <__ieee754_pow+0x3a>
 800f09a:	2000      	movs	r0, #0
 800f09c:	2100      	movs	r1, #0
 800f09e:	f7ff bb14 	b.w	800e6ca <__ieee754_pow+0x3a>
 800f0a2:	4630      	mov	r0, r6
 800f0a4:	4639      	mov	r1, r7
 800f0a6:	f7ff bb10 	b.w	800e6ca <__ieee754_pow+0x3a>
 800f0aa:	460c      	mov	r4, r1
 800f0ac:	f7ff bb5e 	b.w	800e76c <__ieee754_pow+0xdc>
 800f0b0:	2400      	movs	r4, #0
 800f0b2:	f7ff bb49 	b.w	800e748 <__ieee754_pow+0xb8>
 800f0b6:	bf00      	nop
 800f0b8:	00000000 	.word	0x00000000
 800f0bc:	3fe62e43 	.word	0x3fe62e43
 800f0c0:	fefa39ef 	.word	0xfefa39ef
 800f0c4:	3fe62e42 	.word	0x3fe62e42
 800f0c8:	0ca86c39 	.word	0x0ca86c39
 800f0cc:	be205c61 	.word	0xbe205c61
 800f0d0:	72bea4d0 	.word	0x72bea4d0
 800f0d4:	3e663769 	.word	0x3e663769
 800f0d8:	c5d26bf1 	.word	0xc5d26bf1
 800f0dc:	3ebbbd41 	.word	0x3ebbbd41
 800f0e0:	af25de2c 	.word	0xaf25de2c
 800f0e4:	3f11566a 	.word	0x3f11566a
 800f0e8:	16bebd93 	.word	0x16bebd93
 800f0ec:	3f66c16c 	.word	0x3f66c16c
 800f0f0:	5555553e 	.word	0x5555553e
 800f0f4:	3fc55555 	.word	0x3fc55555
 800f0f8:	fff00000 	.word	0xfff00000
 800f0fc:	3ff00000 	.word	0x3ff00000
 800f100:	4090cbff 	.word	0x4090cbff
 800f104:	3f6f3400 	.word	0x3f6f3400
 800f108:	3fe00000 	.word	0x3fe00000
 800f10c:	652b82fe 	.word	0x652b82fe
 800f110:	3c971547 	.word	0x3c971547
 800f114:	4090cc00 	.word	0x4090cc00

0800f118 <scalbn>:
 800f118:	b570      	push	{r4, r5, r6, lr}
 800f11a:	ec55 4b10 	vmov	r4, r5, d0
 800f11e:	f3c5 510a 	ubfx	r1, r5, #20, #11
 800f122:	4606      	mov	r6, r0
 800f124:	462b      	mov	r3, r5
 800f126:	b991      	cbnz	r1, 800f14e <scalbn+0x36>
 800f128:	f025 4300 	bic.w	r3, r5, #2147483648	@ 0x80000000
 800f12c:	4323      	orrs	r3, r4
 800f12e:	d03d      	beq.n	800f1ac <scalbn+0x94>
 800f130:	4b35      	ldr	r3, [pc, #212]	@ (800f208 <scalbn+0xf0>)
 800f132:	4620      	mov	r0, r4
 800f134:	4629      	mov	r1, r5
 800f136:	2200      	movs	r2, #0
 800f138:	f7f1 fa5e 	bl	80005f8 <__aeabi_dmul>
 800f13c:	4b33      	ldr	r3, [pc, #204]	@ (800f20c <scalbn+0xf4>)
 800f13e:	429e      	cmp	r6, r3
 800f140:	4604      	mov	r4, r0
 800f142:	460d      	mov	r5, r1
 800f144:	da0f      	bge.n	800f166 <scalbn+0x4e>
 800f146:	a328      	add	r3, pc, #160	@ (adr r3, 800f1e8 <scalbn+0xd0>)
 800f148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f14c:	e01e      	b.n	800f18c <scalbn+0x74>
 800f14e:	f240 72ff 	movw	r2, #2047	@ 0x7ff
 800f152:	4291      	cmp	r1, r2
 800f154:	d10b      	bne.n	800f16e <scalbn+0x56>
 800f156:	4622      	mov	r2, r4
 800f158:	4620      	mov	r0, r4
 800f15a:	4629      	mov	r1, r5
 800f15c:	f7f1 f896 	bl	800028c <__adddf3>
 800f160:	4604      	mov	r4, r0
 800f162:	460d      	mov	r5, r1
 800f164:	e022      	b.n	800f1ac <scalbn+0x94>
 800f166:	460b      	mov	r3, r1
 800f168:	f3c1 510a 	ubfx	r1, r1, #20, #11
 800f16c:	3936      	subs	r1, #54	@ 0x36
 800f16e:	f24c 3250 	movw	r2, #50000	@ 0xc350
 800f172:	4296      	cmp	r6, r2
 800f174:	dd0d      	ble.n	800f192 <scalbn+0x7a>
 800f176:	2d00      	cmp	r5, #0
 800f178:	a11d      	add	r1, pc, #116	@ (adr r1, 800f1f0 <scalbn+0xd8>)
 800f17a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f17e:	da02      	bge.n	800f186 <scalbn+0x6e>
 800f180:	a11d      	add	r1, pc, #116	@ (adr r1, 800f1f8 <scalbn+0xe0>)
 800f182:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f186:	a31a      	add	r3, pc, #104	@ (adr r3, 800f1f0 <scalbn+0xd8>)
 800f188:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f18c:	f7f1 fa34 	bl	80005f8 <__aeabi_dmul>
 800f190:	e7e6      	b.n	800f160 <scalbn+0x48>
 800f192:	1872      	adds	r2, r6, r1
 800f194:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800f198:	428a      	cmp	r2, r1
 800f19a:	dcec      	bgt.n	800f176 <scalbn+0x5e>
 800f19c:	2a00      	cmp	r2, #0
 800f19e:	dd08      	ble.n	800f1b2 <scalbn+0x9a>
 800f1a0:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800f1a4:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800f1a8:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800f1ac:	ec45 4b10 	vmov	d0, r4, r5
 800f1b0:	bd70      	pop	{r4, r5, r6, pc}
 800f1b2:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 800f1b6:	da08      	bge.n	800f1ca <scalbn+0xb2>
 800f1b8:	2d00      	cmp	r5, #0
 800f1ba:	a10b      	add	r1, pc, #44	@ (adr r1, 800f1e8 <scalbn+0xd0>)
 800f1bc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f1c0:	dac1      	bge.n	800f146 <scalbn+0x2e>
 800f1c2:	a10f      	add	r1, pc, #60	@ (adr r1, 800f200 <scalbn+0xe8>)
 800f1c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f1c8:	e7bd      	b.n	800f146 <scalbn+0x2e>
 800f1ca:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800f1ce:	3236      	adds	r2, #54	@ 0x36
 800f1d0:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800f1d4:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800f1d8:	4620      	mov	r0, r4
 800f1da:	4b0d      	ldr	r3, [pc, #52]	@ (800f210 <scalbn+0xf8>)
 800f1dc:	4629      	mov	r1, r5
 800f1de:	2200      	movs	r2, #0
 800f1e0:	e7d4      	b.n	800f18c <scalbn+0x74>
 800f1e2:	bf00      	nop
 800f1e4:	f3af 8000 	nop.w
 800f1e8:	c2f8f359 	.word	0xc2f8f359
 800f1ec:	01a56e1f 	.word	0x01a56e1f
 800f1f0:	8800759c 	.word	0x8800759c
 800f1f4:	7e37e43c 	.word	0x7e37e43c
 800f1f8:	8800759c 	.word	0x8800759c
 800f1fc:	fe37e43c 	.word	0xfe37e43c
 800f200:	c2f8f359 	.word	0xc2f8f359
 800f204:	81a56e1f 	.word	0x81a56e1f
 800f208:	43500000 	.word	0x43500000
 800f20c:	ffff3cb0 	.word	0xffff3cb0
 800f210:	3c900000 	.word	0x3c900000

0800f214 <with_errno>:
 800f214:	b510      	push	{r4, lr}
 800f216:	ed2d 8b02 	vpush	{d8}
 800f21a:	eeb0 8a40 	vmov.f32	s16, s0
 800f21e:	eef0 8a60 	vmov.f32	s17, s1
 800f222:	4604      	mov	r4, r0
 800f224:	f7fc fc20 	bl	800ba68 <__errno>
 800f228:	eeb0 0a48 	vmov.f32	s0, s16
 800f22c:	eef0 0a68 	vmov.f32	s1, s17
 800f230:	ecbd 8b02 	vpop	{d8}
 800f234:	6004      	str	r4, [r0, #0]
 800f236:	bd10      	pop	{r4, pc}

0800f238 <xflow>:
 800f238:	4603      	mov	r3, r0
 800f23a:	b507      	push	{r0, r1, r2, lr}
 800f23c:	ec51 0b10 	vmov	r0, r1, d0
 800f240:	b183      	cbz	r3, 800f264 <xflow+0x2c>
 800f242:	4602      	mov	r2, r0
 800f244:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800f248:	e9cd 2300 	strd	r2, r3, [sp]
 800f24c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f250:	f7f1 f9d2 	bl	80005f8 <__aeabi_dmul>
 800f254:	ec41 0b10 	vmov	d0, r0, r1
 800f258:	2022      	movs	r0, #34	@ 0x22
 800f25a:	b003      	add	sp, #12
 800f25c:	f85d eb04 	ldr.w	lr, [sp], #4
 800f260:	f7ff bfd8 	b.w	800f214 <with_errno>
 800f264:	4602      	mov	r2, r0
 800f266:	460b      	mov	r3, r1
 800f268:	e7ee      	b.n	800f248 <xflow+0x10>
 800f26a:	0000      	movs	r0, r0
 800f26c:	0000      	movs	r0, r0
	...

0800f270 <__math_uflow>:
 800f270:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800f278 <__math_uflow+0x8>
 800f274:	f7ff bfe0 	b.w	800f238 <xflow>
 800f278:	00000000 	.word	0x00000000
 800f27c:	10000000 	.word	0x10000000

0800f280 <__math_oflow>:
 800f280:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800f288 <__math_oflow+0x8>
 800f284:	f7ff bfd8 	b.w	800f238 <xflow>
 800f288:	00000000 	.word	0x00000000
 800f28c:	70000000 	.word	0x70000000

0800f290 <_init>:
 800f290:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f292:	bf00      	nop
 800f294:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f296:	bc08      	pop	{r3}
 800f298:	469e      	mov	lr, r3
 800f29a:	4770      	bx	lr

0800f29c <_fini>:
 800f29c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f29e:	bf00      	nop
 800f2a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f2a2:	bc08      	pop	{r3}
 800f2a4:	469e      	mov	lr, r3
 800f2a6:	4770      	bx	lr
