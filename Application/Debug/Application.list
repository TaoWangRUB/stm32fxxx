
Application.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08004400  08004400  00000400  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002660  0800450c  0800450c  0000050c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08006b6c  08006b6c  00002b6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006bf0  08006bf0  0000306c  2**0
                  CONTENTS
  4 .ARM          00000000  08006bf0  08006bf0  0000306c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006bf0  08006bf0  0000306c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006bf0  08006bf0  00002bf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006bf4  08006bf4  00002bf4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08006bf8  00003000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001b8  2000006c  08006c64  0000306c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000224  08006c64  00003224  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000306c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006d5f  00000000  00000000  00003095  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001504  00000000  00000000  00009df4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000006c0  00000000  00000000  0000b2f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000051a  00000000  00000000  0000b9b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017854  00000000  00000000  0000bed2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007ad4  00000000  00000000  00023726  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083b7b  00000000  00000000  0002b1fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000aed75  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002188  00000000  00000000  000aedb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005f  00000000  00000000  000b0f40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800450c <__do_global_dtors_aux>:
 800450c:	b510      	push	{r4, lr}
 800450e:	4c05      	ldr	r4, [pc, #20]	@ (8004524 <__do_global_dtors_aux+0x18>)
 8004510:	7823      	ldrb	r3, [r4, #0]
 8004512:	b933      	cbnz	r3, 8004522 <__do_global_dtors_aux+0x16>
 8004514:	4b04      	ldr	r3, [pc, #16]	@ (8004528 <__do_global_dtors_aux+0x1c>)
 8004516:	b113      	cbz	r3, 800451e <__do_global_dtors_aux+0x12>
 8004518:	4804      	ldr	r0, [pc, #16]	@ (800452c <__do_global_dtors_aux+0x20>)
 800451a:	f3af 8000 	nop.w
 800451e:	2301      	movs	r3, #1
 8004520:	7023      	strb	r3, [r4, #0]
 8004522:	bd10      	pop	{r4, pc}
 8004524:	2000006c 	.word	0x2000006c
 8004528:	00000000 	.word	0x00000000
 800452c:	08006b54 	.word	0x08006b54

08004530 <frame_dummy>:
 8004530:	b508      	push	{r3, lr}
 8004532:	4b03      	ldr	r3, [pc, #12]	@ (8004540 <frame_dummy+0x10>)
 8004534:	b11b      	cbz	r3, 800453e <frame_dummy+0xe>
 8004536:	4903      	ldr	r1, [pc, #12]	@ (8004544 <frame_dummy+0x14>)
 8004538:	4803      	ldr	r0, [pc, #12]	@ (8004548 <frame_dummy+0x18>)
 800453a:	f3af 8000 	nop.w
 800453e:	bd08      	pop	{r3, pc}
 8004540:	00000000 	.word	0x00000000
 8004544:	20000070 	.word	0x20000070
 8004548:	08006b54 	.word	0x08006b54

0800454c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8004550:	f000 fa72 	bl	8004a38 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004554:	f000 f81e 	bl	8004594 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004558:	f000 f88c 	bl	8004674 <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800455c:	f000 f860 	bl	8004620 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  printf("Application ver: %d:%d Started!!!\n", APP_Version[0], APP_Version[1]);
 8004560:	4b09      	ldr	r3, [pc, #36]	@ (8004588 <main+0x3c>)
 8004562:	781b      	ldrb	r3, [r3, #0]
 8004564:	4619      	mov	r1, r3
 8004566:	4b08      	ldr	r3, [pc, #32]	@ (8004588 <main+0x3c>)
 8004568:	785b      	ldrb	r3, [r3, #1]
 800456a:	461a      	mov	r2, r3
 800456c:	4807      	ldr	r0, [pc, #28]	@ (800458c <main+0x40>)
 800456e:	f001 fc79 	bl	8005e64 <iprintf>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
	  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8004572:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8004576:	4806      	ldr	r0, [pc, #24]	@ (8004590 <main+0x44>)
 8004578:	f000 fd64 	bl	8005044 <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 800457c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8004580:	f000 fabc 	bl	8004afc <HAL_Delay>
	  HAL_GPIO_TogglePin(LED_GPIO_Port, LED_Pin);
 8004584:	bf00      	nop
 8004586:	e7f4      	b.n	8004572 <main+0x26>
 8004588:	20000000 	.word	0x20000000
 800458c:	08006b6c 	.word	0x08006b6c
 8004590:	40011000 	.word	0x40011000

08004594 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8004594:	b580      	push	{r7, lr}
 8004596:	b090      	sub	sp, #64	@ 0x40
 8004598:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800459a:	f107 0318 	add.w	r3, r7, #24
 800459e:	2228      	movs	r2, #40	@ 0x28
 80045a0:	2100      	movs	r1, #0
 80045a2:	4618      	mov	r0, r3
 80045a4:	f001 fcb3 	bl	8005f0e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80045a8:	1d3b      	adds	r3, r7, #4
 80045aa:	2200      	movs	r2, #0
 80045ac:	601a      	str	r2, [r3, #0]
 80045ae:	605a      	str	r2, [r3, #4]
 80045b0:	609a      	str	r2, [r3, #8]
 80045b2:	60da      	str	r2, [r3, #12]
 80045b4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80045b6:	2301      	movs	r3, #1
 80045b8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80045ba:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80045be:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80045c0:	2300      	movs	r3, #0
 80045c2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80045c4:	2301      	movs	r3, #1
 80045c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80045c8:	2302      	movs	r3, #2
 80045ca:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80045cc:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80045d0:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 80045d2:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 80045d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80045d8:	f107 0318 	add.w	r3, r7, #24
 80045dc:	4618      	mov	r0, r3
 80045de:	f000 fd4b 	bl	8005078 <HAL_RCC_OscConfig>
 80045e2:	4603      	mov	r3, r0
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d001      	beq.n	80045ec <SystemClock_Config+0x58>
  {
    Error_Handler();
 80045e8:	f000 f8a2 	bl	8004730 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80045ec:	230f      	movs	r3, #15
 80045ee:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80045f0:	2302      	movs	r3, #2
 80045f2:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80045f4:	2300      	movs	r3, #0
 80045f6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80045f8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80045fc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80045fe:	2300      	movs	r3, #0
 8004600:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8004602:	1d3b      	adds	r3, r7, #4
 8004604:	2102      	movs	r1, #2
 8004606:	4618      	mov	r0, r3
 8004608:	f000 ffb8 	bl	800557c <HAL_RCC_ClockConfig>
 800460c:	4603      	mov	r3, r0
 800460e:	2b00      	cmp	r3, #0
 8004610:	d001      	beq.n	8004616 <SystemClock_Config+0x82>
  {
    Error_Handler();
 8004612:	f000 f88d 	bl	8004730 <Error_Handler>
  }
}
 8004616:	bf00      	nop
 8004618:	3740      	adds	r7, #64	@ 0x40
 800461a:	46bd      	mov	sp, r7
 800461c:	bd80      	pop	{r7, pc}
	...

08004620 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8004620:	b580      	push	{r7, lr}
 8004622:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8004624:	4b11      	ldr	r3, [pc, #68]	@ (800466c <MX_USART1_UART_Init+0x4c>)
 8004626:	4a12      	ldr	r2, [pc, #72]	@ (8004670 <MX_USART1_UART_Init+0x50>)
 8004628:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800462a:	4b10      	ldr	r3, [pc, #64]	@ (800466c <MX_USART1_UART_Init+0x4c>)
 800462c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8004630:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8004632:	4b0e      	ldr	r3, [pc, #56]	@ (800466c <MX_USART1_UART_Init+0x4c>)
 8004634:	2200      	movs	r2, #0
 8004636:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8004638:	4b0c      	ldr	r3, [pc, #48]	@ (800466c <MX_USART1_UART_Init+0x4c>)
 800463a:	2200      	movs	r2, #0
 800463c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800463e:	4b0b      	ldr	r3, [pc, #44]	@ (800466c <MX_USART1_UART_Init+0x4c>)
 8004640:	2200      	movs	r2, #0
 8004642:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8004644:	4b09      	ldr	r3, [pc, #36]	@ (800466c <MX_USART1_UART_Init+0x4c>)
 8004646:	220c      	movs	r2, #12
 8004648:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800464a:	4b08      	ldr	r3, [pc, #32]	@ (800466c <MX_USART1_UART_Init+0x4c>)
 800464c:	2200      	movs	r2, #0
 800464e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8004650:	4b06      	ldr	r3, [pc, #24]	@ (800466c <MX_USART1_UART_Init+0x4c>)
 8004652:	2200      	movs	r2, #0
 8004654:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8004656:	4805      	ldr	r0, [pc, #20]	@ (800466c <MX_USART1_UART_Init+0x4c>)
 8004658:	f001 f91e 	bl	8005898 <HAL_UART_Init>
 800465c:	4603      	mov	r3, r0
 800465e:	2b00      	cmp	r3, #0
 8004660:	d001      	beq.n	8004666 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8004662:	f000 f865 	bl	8004730 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8004666:	bf00      	nop
 8004668:	bd80      	pop	{r7, pc}
 800466a:	bf00      	nop
 800466c:	20000088 	.word	0x20000088
 8004670:	40013800 	.word	0x40013800

08004674 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b088      	sub	sp, #32
 8004678:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800467a:	f107 0310 	add.w	r3, r7, #16
 800467e:	2200      	movs	r2, #0
 8004680:	601a      	str	r2, [r3, #0]
 8004682:	605a      	str	r2, [r3, #4]
 8004684:	609a      	str	r2, [r3, #8]
 8004686:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8004688:	4b1e      	ldr	r3, [pc, #120]	@ (8004704 <MX_GPIO_Init+0x90>)
 800468a:	699b      	ldr	r3, [r3, #24]
 800468c:	4a1d      	ldr	r2, [pc, #116]	@ (8004704 <MX_GPIO_Init+0x90>)
 800468e:	f043 0310 	orr.w	r3, r3, #16
 8004692:	6193      	str	r3, [r2, #24]
 8004694:	4b1b      	ldr	r3, [pc, #108]	@ (8004704 <MX_GPIO_Init+0x90>)
 8004696:	699b      	ldr	r3, [r3, #24]
 8004698:	f003 0310 	and.w	r3, r3, #16
 800469c:	60fb      	str	r3, [r7, #12]
 800469e:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80046a0:	4b18      	ldr	r3, [pc, #96]	@ (8004704 <MX_GPIO_Init+0x90>)
 80046a2:	699b      	ldr	r3, [r3, #24]
 80046a4:	4a17      	ldr	r2, [pc, #92]	@ (8004704 <MX_GPIO_Init+0x90>)
 80046a6:	f043 0320 	orr.w	r3, r3, #32
 80046aa:	6193      	str	r3, [r2, #24]
 80046ac:	4b15      	ldr	r3, [pc, #84]	@ (8004704 <MX_GPIO_Init+0x90>)
 80046ae:	699b      	ldr	r3, [r3, #24]
 80046b0:	f003 0320 	and.w	r3, r3, #32
 80046b4:	60bb      	str	r3, [r7, #8]
 80046b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80046b8:	4b12      	ldr	r3, [pc, #72]	@ (8004704 <MX_GPIO_Init+0x90>)
 80046ba:	699b      	ldr	r3, [r3, #24]
 80046bc:	4a11      	ldr	r2, [pc, #68]	@ (8004704 <MX_GPIO_Init+0x90>)
 80046be:	f043 0304 	orr.w	r3, r3, #4
 80046c2:	6193      	str	r3, [r2, #24]
 80046c4:	4b0f      	ldr	r3, [pc, #60]	@ (8004704 <MX_GPIO_Init+0x90>)
 80046c6:	699b      	ldr	r3, [r3, #24]
 80046c8:	f003 0304 	and.w	r3, r3, #4
 80046cc:	607b      	str	r3, [r7, #4]
 80046ce:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 80046d0:	2200      	movs	r2, #0
 80046d2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80046d6:	480c      	ldr	r0, [pc, #48]	@ (8004708 <MX_GPIO_Init+0x94>)
 80046d8:	f000 fc9c 	bl	8005014 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : LED_Pin */
  GPIO_InitStruct.Pin = LED_Pin;
 80046dc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80046e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80046e2:	2301      	movs	r3, #1
 80046e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80046e6:	2301      	movs	r3, #1
 80046e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80046ea:	2302      	movs	r3, #2
 80046ec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LED_GPIO_Port, &GPIO_InitStruct);
 80046ee:	f107 0310 	add.w	r3, r7, #16
 80046f2:	4619      	mov	r1, r3
 80046f4:	4804      	ldr	r0, [pc, #16]	@ (8004708 <MX_GPIO_Init+0x94>)
 80046f6:	f000 fb09 	bl	8004d0c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80046fa:	bf00      	nop
 80046fc:	3720      	adds	r7, #32
 80046fe:	46bd      	mov	sp, r7
 8004700:	bd80      	pop	{r7, pc}
 8004702:	bf00      	nop
 8004704:	40021000 	.word	0x40021000
 8004708:	40011000 	.word	0x40011000

0800470c <__io_putchar>:
     set to 'Yes') calls __io_putchar() */
int __io_putchar(int ch)
#else
int fputc(int ch, FILE *f)
#endif /* __GNUC__ */
{
 800470c:	b580      	push	{r7, lr}
 800470e:	b082      	sub	sp, #8
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
  /* Place your implementation of fputc here */
  /* e.g. write a character to the UART1 and Loop until the end of transmission */
  HAL_UART_Transmit(&huart1, (uint8_t *)&ch, 1, HAL_MAX_DELAY);
 8004714:	1d39      	adds	r1, r7, #4
 8004716:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800471a:	2201      	movs	r2, #1
 800471c:	4803      	ldr	r0, [pc, #12]	@ (800472c <__io_putchar+0x20>)
 800471e:	f001 f90b 	bl	8005938 <HAL_UART_Transmit>

  return ch;
 8004722:	687b      	ldr	r3, [r7, #4]
}
 8004724:	4618      	mov	r0, r3
 8004726:	3708      	adds	r7, #8
 8004728:	46bd      	mov	sp, r7
 800472a:	bd80      	pop	{r7, pc}
 800472c:	20000088 	.word	0x20000088

08004730 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8004730:	b480      	push	{r7}
 8004732:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8004734:	b672      	cpsid	i
}
 8004736:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8004738:	bf00      	nop
 800473a:	e7fd      	b.n	8004738 <Error_Handler+0x8>

0800473c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800473c:	b480      	push	{r7}
 800473e:	b085      	sub	sp, #20
 8004740:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8004742:	4b15      	ldr	r3, [pc, #84]	@ (8004798 <HAL_MspInit+0x5c>)
 8004744:	699b      	ldr	r3, [r3, #24]
 8004746:	4a14      	ldr	r2, [pc, #80]	@ (8004798 <HAL_MspInit+0x5c>)
 8004748:	f043 0301 	orr.w	r3, r3, #1
 800474c:	6193      	str	r3, [r2, #24]
 800474e:	4b12      	ldr	r3, [pc, #72]	@ (8004798 <HAL_MspInit+0x5c>)
 8004750:	699b      	ldr	r3, [r3, #24]
 8004752:	f003 0301 	and.w	r3, r3, #1
 8004756:	60bb      	str	r3, [r7, #8]
 8004758:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800475a:	4b0f      	ldr	r3, [pc, #60]	@ (8004798 <HAL_MspInit+0x5c>)
 800475c:	69db      	ldr	r3, [r3, #28]
 800475e:	4a0e      	ldr	r2, [pc, #56]	@ (8004798 <HAL_MspInit+0x5c>)
 8004760:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004764:	61d3      	str	r3, [r2, #28]
 8004766:	4b0c      	ldr	r3, [pc, #48]	@ (8004798 <HAL_MspInit+0x5c>)
 8004768:	69db      	ldr	r3, [r3, #28]
 800476a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800476e:	607b      	str	r3, [r7, #4]
 8004770:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8004772:	4b0a      	ldr	r3, [pc, #40]	@ (800479c <HAL_MspInit+0x60>)
 8004774:	685b      	ldr	r3, [r3, #4]
 8004776:	60fb      	str	r3, [r7, #12]
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800477e:	60fb      	str	r3, [r7, #12]
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004786:	60fb      	str	r3, [r7, #12]
 8004788:	4a04      	ldr	r2, [pc, #16]	@ (800479c <HAL_MspInit+0x60>)
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800478e:	bf00      	nop
 8004790:	3714      	adds	r7, #20
 8004792:	46bd      	mov	sp, r7
 8004794:	bc80      	pop	{r7}
 8004796:	4770      	bx	lr
 8004798:	40021000 	.word	0x40021000
 800479c:	40010000 	.word	0x40010000

080047a0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80047a0:	b580      	push	{r7, lr}
 80047a2:	b088      	sub	sp, #32
 80047a4:	af00      	add	r7, sp, #0
 80047a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80047a8:	f107 0310 	add.w	r3, r7, #16
 80047ac:	2200      	movs	r2, #0
 80047ae:	601a      	str	r2, [r3, #0]
 80047b0:	605a      	str	r2, [r3, #4]
 80047b2:	609a      	str	r2, [r3, #8]
 80047b4:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART1)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	4a1c      	ldr	r2, [pc, #112]	@ (800482c <HAL_UART_MspInit+0x8c>)
 80047bc:	4293      	cmp	r3, r2
 80047be:	d131      	bne.n	8004824 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80047c0:	4b1b      	ldr	r3, [pc, #108]	@ (8004830 <HAL_UART_MspInit+0x90>)
 80047c2:	699b      	ldr	r3, [r3, #24]
 80047c4:	4a1a      	ldr	r2, [pc, #104]	@ (8004830 <HAL_UART_MspInit+0x90>)
 80047c6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80047ca:	6193      	str	r3, [r2, #24]
 80047cc:	4b18      	ldr	r3, [pc, #96]	@ (8004830 <HAL_UART_MspInit+0x90>)
 80047ce:	699b      	ldr	r3, [r3, #24]
 80047d0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80047d4:	60fb      	str	r3, [r7, #12]
 80047d6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80047d8:	4b15      	ldr	r3, [pc, #84]	@ (8004830 <HAL_UART_MspInit+0x90>)
 80047da:	699b      	ldr	r3, [r3, #24]
 80047dc:	4a14      	ldr	r2, [pc, #80]	@ (8004830 <HAL_UART_MspInit+0x90>)
 80047de:	f043 0304 	orr.w	r3, r3, #4
 80047e2:	6193      	str	r3, [r2, #24]
 80047e4:	4b12      	ldr	r3, [pc, #72]	@ (8004830 <HAL_UART_MspInit+0x90>)
 80047e6:	699b      	ldr	r3, [r3, #24]
 80047e8:	f003 0304 	and.w	r3, r3, #4
 80047ec:	60bb      	str	r3, [r7, #8]
 80047ee:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 80047f0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80047f4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80047f6:	2302      	movs	r3, #2
 80047f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80047fa:	2303      	movs	r3, #3
 80047fc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80047fe:	f107 0310 	add.w	r3, r7, #16
 8004802:	4619      	mov	r1, r3
 8004804:	480b      	ldr	r0, [pc, #44]	@ (8004834 <HAL_UART_MspInit+0x94>)
 8004806:	f000 fa81 	bl	8004d0c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800480a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800480e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8004810:	2300      	movs	r3, #0
 8004812:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004814:	2300      	movs	r3, #0
 8004816:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8004818:	f107 0310 	add.w	r3, r7, #16
 800481c:	4619      	mov	r1, r3
 800481e:	4805      	ldr	r0, [pc, #20]	@ (8004834 <HAL_UART_MspInit+0x94>)
 8004820:	f000 fa74 	bl	8004d0c <HAL_GPIO_Init>

  /* USER CODE END USART1_MspInit 1 */

  }

}
 8004824:	bf00      	nop
 8004826:	3720      	adds	r7, #32
 8004828:	46bd      	mov	sp, r7
 800482a:	bd80      	pop	{r7, pc}
 800482c:	40013800 	.word	0x40013800
 8004830:	40021000 	.word	0x40021000
 8004834:	40010800 	.word	0x40010800

08004838 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004838:	b480      	push	{r7}
 800483a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800483c:	bf00      	nop
 800483e:	e7fd      	b.n	800483c <NMI_Handler+0x4>

08004840 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8004840:	b480      	push	{r7}
 8004842:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004844:	bf00      	nop
 8004846:	e7fd      	b.n	8004844 <HardFault_Handler+0x4>

08004848 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004848:	b480      	push	{r7}
 800484a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800484c:	bf00      	nop
 800484e:	e7fd      	b.n	800484c <MemManage_Handler+0x4>

08004850 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8004850:	b480      	push	{r7}
 8004852:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8004854:	bf00      	nop
 8004856:	e7fd      	b.n	8004854 <BusFault_Handler+0x4>

08004858 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004858:	b480      	push	{r7}
 800485a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800485c:	bf00      	nop
 800485e:	e7fd      	b.n	800485c <UsageFault_Handler+0x4>

08004860 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004860:	b480      	push	{r7}
 8004862:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8004864:	bf00      	nop
 8004866:	46bd      	mov	sp, r7
 8004868:	bc80      	pop	{r7}
 800486a:	4770      	bx	lr

0800486c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800486c:	b480      	push	{r7}
 800486e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004870:	bf00      	nop
 8004872:	46bd      	mov	sp, r7
 8004874:	bc80      	pop	{r7}
 8004876:	4770      	bx	lr

08004878 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004878:	b480      	push	{r7}
 800487a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800487c:	bf00      	nop
 800487e:	46bd      	mov	sp, r7
 8004880:	bc80      	pop	{r7}
 8004882:	4770      	bx	lr

08004884 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004884:	b580      	push	{r7, lr}
 8004886:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004888:	f000 f91c 	bl	8004ac4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800488c:	bf00      	nop
 800488e:	bd80      	pop	{r7, pc}

08004890 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b086      	sub	sp, #24
 8004894:	af00      	add	r7, sp, #0
 8004896:	60f8      	str	r0, [r7, #12]
 8004898:	60b9      	str	r1, [r7, #8]
 800489a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800489c:	2300      	movs	r3, #0
 800489e:	617b      	str	r3, [r7, #20]
 80048a0:	e00a      	b.n	80048b8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80048a2:	f3af 8000 	nop.w
 80048a6:	4601      	mov	r1, r0
 80048a8:	68bb      	ldr	r3, [r7, #8]
 80048aa:	1c5a      	adds	r2, r3, #1
 80048ac:	60ba      	str	r2, [r7, #8]
 80048ae:	b2ca      	uxtb	r2, r1
 80048b0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80048b2:	697b      	ldr	r3, [r7, #20]
 80048b4:	3301      	adds	r3, #1
 80048b6:	617b      	str	r3, [r7, #20]
 80048b8:	697a      	ldr	r2, [r7, #20]
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	429a      	cmp	r2, r3
 80048be:	dbf0      	blt.n	80048a2 <_read+0x12>
  }

  return len;
 80048c0:	687b      	ldr	r3, [r7, #4]
}
 80048c2:	4618      	mov	r0, r3
 80048c4:	3718      	adds	r7, #24
 80048c6:	46bd      	mov	sp, r7
 80048c8:	bd80      	pop	{r7, pc}

080048ca <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80048ca:	b580      	push	{r7, lr}
 80048cc:	b086      	sub	sp, #24
 80048ce:	af00      	add	r7, sp, #0
 80048d0:	60f8      	str	r0, [r7, #12]
 80048d2:	60b9      	str	r1, [r7, #8]
 80048d4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80048d6:	2300      	movs	r3, #0
 80048d8:	617b      	str	r3, [r7, #20]
 80048da:	e009      	b.n	80048f0 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80048dc:	68bb      	ldr	r3, [r7, #8]
 80048de:	1c5a      	adds	r2, r3, #1
 80048e0:	60ba      	str	r2, [r7, #8]
 80048e2:	781b      	ldrb	r3, [r3, #0]
 80048e4:	4618      	mov	r0, r3
 80048e6:	f7ff ff11 	bl	800470c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80048ea:	697b      	ldr	r3, [r7, #20]
 80048ec:	3301      	adds	r3, #1
 80048ee:	617b      	str	r3, [r7, #20]
 80048f0:	697a      	ldr	r2, [r7, #20]
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	429a      	cmp	r2, r3
 80048f6:	dbf1      	blt.n	80048dc <_write+0x12>
  }
  return len;
 80048f8:	687b      	ldr	r3, [r7, #4]
}
 80048fa:	4618      	mov	r0, r3
 80048fc:	3718      	adds	r7, #24
 80048fe:	46bd      	mov	sp, r7
 8004900:	bd80      	pop	{r7, pc}

08004902 <_close>:

int _close(int file)
{
 8004902:	b480      	push	{r7}
 8004904:	b083      	sub	sp, #12
 8004906:	af00      	add	r7, sp, #0
 8004908:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800490a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800490e:	4618      	mov	r0, r3
 8004910:	370c      	adds	r7, #12
 8004912:	46bd      	mov	sp, r7
 8004914:	bc80      	pop	{r7}
 8004916:	4770      	bx	lr

08004918 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8004918:	b480      	push	{r7}
 800491a:	b083      	sub	sp, #12
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
 8004920:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8004922:	683b      	ldr	r3, [r7, #0]
 8004924:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8004928:	605a      	str	r2, [r3, #4]
  return 0;
 800492a:	2300      	movs	r3, #0
}
 800492c:	4618      	mov	r0, r3
 800492e:	370c      	adds	r7, #12
 8004930:	46bd      	mov	sp, r7
 8004932:	bc80      	pop	{r7}
 8004934:	4770      	bx	lr

08004936 <_isatty>:

int _isatty(int file)
{
 8004936:	b480      	push	{r7}
 8004938:	b083      	sub	sp, #12
 800493a:	af00      	add	r7, sp, #0
 800493c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800493e:	2301      	movs	r3, #1
}
 8004940:	4618      	mov	r0, r3
 8004942:	370c      	adds	r7, #12
 8004944:	46bd      	mov	sp, r7
 8004946:	bc80      	pop	{r7}
 8004948:	4770      	bx	lr

0800494a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800494a:	b480      	push	{r7}
 800494c:	b085      	sub	sp, #20
 800494e:	af00      	add	r7, sp, #0
 8004950:	60f8      	str	r0, [r7, #12]
 8004952:	60b9      	str	r1, [r7, #8]
 8004954:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8004956:	2300      	movs	r3, #0
}
 8004958:	4618      	mov	r0, r3
 800495a:	3714      	adds	r7, #20
 800495c:	46bd      	mov	sp, r7
 800495e:	bc80      	pop	{r7}
 8004960:	4770      	bx	lr
	...

08004964 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8004964:	b580      	push	{r7, lr}
 8004966:	b086      	sub	sp, #24
 8004968:	af00      	add	r7, sp, #0
 800496a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800496c:	4a14      	ldr	r2, [pc, #80]	@ (80049c0 <_sbrk+0x5c>)
 800496e:	4b15      	ldr	r3, [pc, #84]	@ (80049c4 <_sbrk+0x60>)
 8004970:	1ad3      	subs	r3, r2, r3
 8004972:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8004974:	697b      	ldr	r3, [r7, #20]
 8004976:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8004978:	4b13      	ldr	r3, [pc, #76]	@ (80049c8 <_sbrk+0x64>)
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	2b00      	cmp	r3, #0
 800497e:	d102      	bne.n	8004986 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8004980:	4b11      	ldr	r3, [pc, #68]	@ (80049c8 <_sbrk+0x64>)
 8004982:	4a12      	ldr	r2, [pc, #72]	@ (80049cc <_sbrk+0x68>)
 8004984:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8004986:	4b10      	ldr	r3, [pc, #64]	@ (80049c8 <_sbrk+0x64>)
 8004988:	681a      	ldr	r2, [r3, #0]
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	4413      	add	r3, r2
 800498e:	693a      	ldr	r2, [r7, #16]
 8004990:	429a      	cmp	r2, r3
 8004992:	d207      	bcs.n	80049a4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8004994:	f001 fb0a 	bl	8005fac <__errno>
 8004998:	4603      	mov	r3, r0
 800499a:	220c      	movs	r2, #12
 800499c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800499e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80049a2:	e009      	b.n	80049b8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80049a4:	4b08      	ldr	r3, [pc, #32]	@ (80049c8 <_sbrk+0x64>)
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80049aa:	4b07      	ldr	r3, [pc, #28]	@ (80049c8 <_sbrk+0x64>)
 80049ac:	681a      	ldr	r2, [r3, #0]
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	4413      	add	r3, r2
 80049b2:	4a05      	ldr	r2, [pc, #20]	@ (80049c8 <_sbrk+0x64>)
 80049b4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80049b6:	68fb      	ldr	r3, [r7, #12]
}
 80049b8:	4618      	mov	r0, r3
 80049ba:	3718      	adds	r7, #24
 80049bc:	46bd      	mov	sp, r7
 80049be:	bd80      	pop	{r7, pc}
 80049c0:	20005000 	.word	0x20005000
 80049c4:	00000400 	.word	0x00000400
 80049c8:	200000d0 	.word	0x200000d0
 80049cc:	20000228 	.word	0x20000228

080049d0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80049d0:	b480      	push	{r7}
 80049d2:	af00      	add	r7, sp, #0
  #endif /* DATA_IN_ExtSRAM */
#endif 

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
 80049d4:	4b03      	ldr	r3, [pc, #12]	@ (80049e4 <SystemInit+0x14>)
 80049d6:	4a04      	ldr	r2, [pc, #16]	@ (80049e8 <SystemInit+0x18>)
 80049d8:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 80049da:	bf00      	nop
 80049dc:	46bd      	mov	sp, r7
 80049de:	bc80      	pop	{r7}
 80049e0:	4770      	bx	lr
 80049e2:	bf00      	nop
 80049e4:	e000ed00 	.word	0xe000ed00
 80049e8:	08004400 	.word	0x08004400

080049ec <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 80049ec:	f7ff fff0 	bl	80049d0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80049f0:	480b      	ldr	r0, [pc, #44]	@ (8004a20 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 80049f2:	490c      	ldr	r1, [pc, #48]	@ (8004a24 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 80049f4:	4a0c      	ldr	r2, [pc, #48]	@ (8004a28 <LoopFillZerobss+0x16>)
  movs r3, #0
 80049f6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80049f8:	e002      	b.n	8004a00 <LoopCopyDataInit>

080049fa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80049fa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80049fc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80049fe:	3304      	adds	r3, #4

08004a00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004a00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004a02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004a04:	d3f9      	bcc.n	80049fa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004a06:	4a09      	ldr	r2, [pc, #36]	@ (8004a2c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8004a08:	4c09      	ldr	r4, [pc, #36]	@ (8004a30 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004a0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004a0c:	e001      	b.n	8004a12 <LoopFillZerobss>

08004a0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004a0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004a10:	3204      	adds	r2, #4

08004a12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004a12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004a14:	d3fb      	bcc.n	8004a0e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8004a16:	f001 facf 	bl	8005fb8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8004a1a:	f7ff fd97 	bl	800454c <main>
  bx lr
 8004a1e:	4770      	bx	lr
  ldr r0, =_sdata
 8004a20:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004a24:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8004a28:	08006bf8 	.word	0x08006bf8
  ldr r2, =_sbss
 8004a2c:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8004a30:	20000224 	.word	0x20000224

08004a34 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8004a34:	e7fe      	b.n	8004a34 <ADC1_2_IRQHandler>
	...

08004a38 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004a38:	b580      	push	{r7, lr}
 8004a3a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004a3c:	4b08      	ldr	r3, [pc, #32]	@ (8004a60 <HAL_Init+0x28>)
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	4a07      	ldr	r2, [pc, #28]	@ (8004a60 <HAL_Init+0x28>)
 8004a42:	f043 0310 	orr.w	r3, r3, #16
 8004a46:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004a48:	2003      	movs	r0, #3
 8004a4a:	f000 f92b 	bl	8004ca4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004a4e:	200f      	movs	r0, #15
 8004a50:	f000 f808 	bl	8004a64 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8004a54:	f7ff fe72 	bl	800473c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8004a58:	2300      	movs	r3, #0
}
 8004a5a:	4618      	mov	r0, r3
 8004a5c:	bd80      	pop	{r7, pc}
 8004a5e:	bf00      	nop
 8004a60:	40022000 	.word	0x40022000

08004a64 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b082      	sub	sp, #8
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8004a6c:	4b12      	ldr	r3, [pc, #72]	@ (8004ab8 <HAL_InitTick+0x54>)
 8004a6e:	681a      	ldr	r2, [r3, #0]
 8004a70:	4b12      	ldr	r3, [pc, #72]	@ (8004abc <HAL_InitTick+0x58>)
 8004a72:	781b      	ldrb	r3, [r3, #0]
 8004a74:	4619      	mov	r1, r3
 8004a76:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8004a7a:	fbb3 f3f1 	udiv	r3, r3, r1
 8004a7e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a82:	4618      	mov	r0, r3
 8004a84:	f000 f935 	bl	8004cf2 <HAL_SYSTICK_Config>
 8004a88:	4603      	mov	r3, r0
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d001      	beq.n	8004a92 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8004a8e:	2301      	movs	r3, #1
 8004a90:	e00e      	b.n	8004ab0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	2b0f      	cmp	r3, #15
 8004a96:	d80a      	bhi.n	8004aae <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004a98:	2200      	movs	r2, #0
 8004a9a:	6879      	ldr	r1, [r7, #4]
 8004a9c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004aa0:	f000 f90b 	bl	8004cba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004aa4:	4a06      	ldr	r2, [pc, #24]	@ (8004ac0 <HAL_InitTick+0x5c>)
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8004aaa:	2300      	movs	r3, #0
 8004aac:	e000      	b.n	8004ab0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8004aae:	2301      	movs	r3, #1
}
 8004ab0:	4618      	mov	r0, r3
 8004ab2:	3708      	adds	r7, #8
 8004ab4:	46bd      	mov	sp, r7
 8004ab6:	bd80      	pop	{r7, pc}
 8004ab8:	20000004 	.word	0x20000004
 8004abc:	2000000c 	.word	0x2000000c
 8004ac0:	20000008 	.word	0x20000008

08004ac4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004ac8:	4b05      	ldr	r3, [pc, #20]	@ (8004ae0 <HAL_IncTick+0x1c>)
 8004aca:	781b      	ldrb	r3, [r3, #0]
 8004acc:	461a      	mov	r2, r3
 8004ace:	4b05      	ldr	r3, [pc, #20]	@ (8004ae4 <HAL_IncTick+0x20>)
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	4413      	add	r3, r2
 8004ad4:	4a03      	ldr	r2, [pc, #12]	@ (8004ae4 <HAL_IncTick+0x20>)
 8004ad6:	6013      	str	r3, [r2, #0]
}
 8004ad8:	bf00      	nop
 8004ada:	46bd      	mov	sp, r7
 8004adc:	bc80      	pop	{r7}
 8004ade:	4770      	bx	lr
 8004ae0:	2000000c 	.word	0x2000000c
 8004ae4:	200000d4 	.word	0x200000d4

08004ae8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004ae8:	b480      	push	{r7}
 8004aea:	af00      	add	r7, sp, #0
  return uwTick;
 8004aec:	4b02      	ldr	r3, [pc, #8]	@ (8004af8 <HAL_GetTick+0x10>)
 8004aee:	681b      	ldr	r3, [r3, #0]
}
 8004af0:	4618      	mov	r0, r3
 8004af2:	46bd      	mov	sp, r7
 8004af4:	bc80      	pop	{r7}
 8004af6:	4770      	bx	lr
 8004af8:	200000d4 	.word	0x200000d4

08004afc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b084      	sub	sp, #16
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004b04:	f7ff fff0 	bl	8004ae8 <HAL_GetTick>
 8004b08:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8004b14:	d005      	beq.n	8004b22 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004b16:	4b0a      	ldr	r3, [pc, #40]	@ (8004b40 <HAL_Delay+0x44>)
 8004b18:	781b      	ldrb	r3, [r3, #0]
 8004b1a:	461a      	mov	r2, r3
 8004b1c:	68fb      	ldr	r3, [r7, #12]
 8004b1e:	4413      	add	r3, r2
 8004b20:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8004b22:	bf00      	nop
 8004b24:	f7ff ffe0 	bl	8004ae8 <HAL_GetTick>
 8004b28:	4602      	mov	r2, r0
 8004b2a:	68bb      	ldr	r3, [r7, #8]
 8004b2c:	1ad3      	subs	r3, r2, r3
 8004b2e:	68fa      	ldr	r2, [r7, #12]
 8004b30:	429a      	cmp	r2, r3
 8004b32:	d8f7      	bhi.n	8004b24 <HAL_Delay+0x28>
  {
  }
}
 8004b34:	bf00      	nop
 8004b36:	bf00      	nop
 8004b38:	3710      	adds	r7, #16
 8004b3a:	46bd      	mov	sp, r7
 8004b3c:	bd80      	pop	{r7, pc}
 8004b3e:	bf00      	nop
 8004b40:	2000000c 	.word	0x2000000c

08004b44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004b44:	b480      	push	{r7}
 8004b46:	b085      	sub	sp, #20
 8004b48:	af00      	add	r7, sp, #0
 8004b4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	f003 0307 	and.w	r3, r3, #7
 8004b52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004b54:	4b0c      	ldr	r3, [pc, #48]	@ (8004b88 <__NVIC_SetPriorityGrouping+0x44>)
 8004b56:	68db      	ldr	r3, [r3, #12]
 8004b58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004b5a:	68ba      	ldr	r2, [r7, #8]
 8004b5c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8004b60:	4013      	ands	r3, r2
 8004b62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004b68:	68bb      	ldr	r3, [r7, #8]
 8004b6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004b6c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8004b70:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8004b74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004b76:	4a04      	ldr	r2, [pc, #16]	@ (8004b88 <__NVIC_SetPriorityGrouping+0x44>)
 8004b78:	68bb      	ldr	r3, [r7, #8]
 8004b7a:	60d3      	str	r3, [r2, #12]
}
 8004b7c:	bf00      	nop
 8004b7e:	3714      	adds	r7, #20
 8004b80:	46bd      	mov	sp, r7
 8004b82:	bc80      	pop	{r7}
 8004b84:	4770      	bx	lr
 8004b86:	bf00      	nop
 8004b88:	e000ed00 	.word	0xe000ed00

08004b8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004b8c:	b480      	push	{r7}
 8004b8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004b90:	4b04      	ldr	r3, [pc, #16]	@ (8004ba4 <__NVIC_GetPriorityGrouping+0x18>)
 8004b92:	68db      	ldr	r3, [r3, #12]
 8004b94:	0a1b      	lsrs	r3, r3, #8
 8004b96:	f003 0307 	and.w	r3, r3, #7
}
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	46bd      	mov	sp, r7
 8004b9e:	bc80      	pop	{r7}
 8004ba0:	4770      	bx	lr
 8004ba2:	bf00      	nop
 8004ba4:	e000ed00 	.word	0xe000ed00

08004ba8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004ba8:	b480      	push	{r7}
 8004baa:	b083      	sub	sp, #12
 8004bac:	af00      	add	r7, sp, #0
 8004bae:	4603      	mov	r3, r0
 8004bb0:	6039      	str	r1, [r7, #0]
 8004bb2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004bb4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	db0a      	blt.n	8004bd2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	b2da      	uxtb	r2, r3
 8004bc0:	490c      	ldr	r1, [pc, #48]	@ (8004bf4 <__NVIC_SetPriority+0x4c>)
 8004bc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004bc6:	0112      	lsls	r2, r2, #4
 8004bc8:	b2d2      	uxtb	r2, r2
 8004bca:	440b      	add	r3, r1
 8004bcc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004bd0:	e00a      	b.n	8004be8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004bd2:	683b      	ldr	r3, [r7, #0]
 8004bd4:	b2da      	uxtb	r2, r3
 8004bd6:	4908      	ldr	r1, [pc, #32]	@ (8004bf8 <__NVIC_SetPriority+0x50>)
 8004bd8:	79fb      	ldrb	r3, [r7, #7]
 8004bda:	f003 030f 	and.w	r3, r3, #15
 8004bde:	3b04      	subs	r3, #4
 8004be0:	0112      	lsls	r2, r2, #4
 8004be2:	b2d2      	uxtb	r2, r2
 8004be4:	440b      	add	r3, r1
 8004be6:	761a      	strb	r2, [r3, #24]
}
 8004be8:	bf00      	nop
 8004bea:	370c      	adds	r7, #12
 8004bec:	46bd      	mov	sp, r7
 8004bee:	bc80      	pop	{r7}
 8004bf0:	4770      	bx	lr
 8004bf2:	bf00      	nop
 8004bf4:	e000e100 	.word	0xe000e100
 8004bf8:	e000ed00 	.word	0xe000ed00

08004bfc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004bfc:	b480      	push	{r7}
 8004bfe:	b089      	sub	sp, #36	@ 0x24
 8004c00:	af00      	add	r7, sp, #0
 8004c02:	60f8      	str	r0, [r7, #12]
 8004c04:	60b9      	str	r1, [r7, #8]
 8004c06:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	f003 0307 	and.w	r3, r3, #7
 8004c0e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004c10:	69fb      	ldr	r3, [r7, #28]
 8004c12:	f1c3 0307 	rsb	r3, r3, #7
 8004c16:	2b04      	cmp	r3, #4
 8004c18:	bf28      	it	cs
 8004c1a:	2304      	movcs	r3, #4
 8004c1c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004c1e:	69fb      	ldr	r3, [r7, #28]
 8004c20:	3304      	adds	r3, #4
 8004c22:	2b06      	cmp	r3, #6
 8004c24:	d902      	bls.n	8004c2c <NVIC_EncodePriority+0x30>
 8004c26:	69fb      	ldr	r3, [r7, #28]
 8004c28:	3b03      	subs	r3, #3
 8004c2a:	e000      	b.n	8004c2e <NVIC_EncodePriority+0x32>
 8004c2c:	2300      	movs	r3, #0
 8004c2e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c30:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004c34:	69bb      	ldr	r3, [r7, #24]
 8004c36:	fa02 f303 	lsl.w	r3, r2, r3
 8004c3a:	43da      	mvns	r2, r3
 8004c3c:	68bb      	ldr	r3, [r7, #8]
 8004c3e:	401a      	ands	r2, r3
 8004c40:	697b      	ldr	r3, [r7, #20]
 8004c42:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004c44:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8004c48:	697b      	ldr	r3, [r7, #20]
 8004c4a:	fa01 f303 	lsl.w	r3, r1, r3
 8004c4e:	43d9      	mvns	r1, r3
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004c54:	4313      	orrs	r3, r2
         );
}
 8004c56:	4618      	mov	r0, r3
 8004c58:	3724      	adds	r7, #36	@ 0x24
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	bc80      	pop	{r7}
 8004c5e:	4770      	bx	lr

08004c60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b082      	sub	sp, #8
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	3b01      	subs	r3, #1
 8004c6c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8004c70:	d301      	bcc.n	8004c76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004c72:	2301      	movs	r3, #1
 8004c74:	e00f      	b.n	8004c96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004c76:	4a0a      	ldr	r2, [pc, #40]	@ (8004ca0 <SysTick_Config+0x40>)
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	3b01      	subs	r3, #1
 8004c7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004c7e:	210f      	movs	r1, #15
 8004c80:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004c84:	f7ff ff90 	bl	8004ba8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004c88:	4b05      	ldr	r3, [pc, #20]	@ (8004ca0 <SysTick_Config+0x40>)
 8004c8a:	2200      	movs	r2, #0
 8004c8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8004c8e:	4b04      	ldr	r3, [pc, #16]	@ (8004ca0 <SysTick_Config+0x40>)
 8004c90:	2207      	movs	r2, #7
 8004c92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004c94:	2300      	movs	r3, #0
}
 8004c96:	4618      	mov	r0, r3
 8004c98:	3708      	adds	r7, #8
 8004c9a:	46bd      	mov	sp, r7
 8004c9c:	bd80      	pop	{r7, pc}
 8004c9e:	bf00      	nop
 8004ca0:	e000e010 	.word	0xe000e010

08004ca4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004ca4:	b580      	push	{r7, lr}
 8004ca6:	b082      	sub	sp, #8
 8004ca8:	af00      	add	r7, sp, #0
 8004caa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004cac:	6878      	ldr	r0, [r7, #4]
 8004cae:	f7ff ff49 	bl	8004b44 <__NVIC_SetPriorityGrouping>
}
 8004cb2:	bf00      	nop
 8004cb4:	3708      	adds	r7, #8
 8004cb6:	46bd      	mov	sp, r7
 8004cb8:	bd80      	pop	{r7, pc}

08004cba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004cba:	b580      	push	{r7, lr}
 8004cbc:	b086      	sub	sp, #24
 8004cbe:	af00      	add	r7, sp, #0
 8004cc0:	4603      	mov	r3, r0
 8004cc2:	60b9      	str	r1, [r7, #8]
 8004cc4:	607a      	str	r2, [r7, #4]
 8004cc6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004cc8:	2300      	movs	r3, #0
 8004cca:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004ccc:	f7ff ff5e 	bl	8004b8c <__NVIC_GetPriorityGrouping>
 8004cd0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004cd2:	687a      	ldr	r2, [r7, #4]
 8004cd4:	68b9      	ldr	r1, [r7, #8]
 8004cd6:	6978      	ldr	r0, [r7, #20]
 8004cd8:	f7ff ff90 	bl	8004bfc <NVIC_EncodePriority>
 8004cdc:	4602      	mov	r2, r0
 8004cde:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004ce2:	4611      	mov	r1, r2
 8004ce4:	4618      	mov	r0, r3
 8004ce6:	f7ff ff5f 	bl	8004ba8 <__NVIC_SetPriority>
}
 8004cea:	bf00      	nop
 8004cec:	3718      	adds	r7, #24
 8004cee:	46bd      	mov	sp, r7
 8004cf0:	bd80      	pop	{r7, pc}

08004cf2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8004cf2:	b580      	push	{r7, lr}
 8004cf4:	b082      	sub	sp, #8
 8004cf6:	af00      	add	r7, sp, #0
 8004cf8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004cfa:	6878      	ldr	r0, [r7, #4]
 8004cfc:	f7ff ffb0 	bl	8004c60 <SysTick_Config>
 8004d00:	4603      	mov	r3, r0
}
 8004d02:	4618      	mov	r0, r3
 8004d04:	3708      	adds	r7, #8
 8004d06:	46bd      	mov	sp, r7
 8004d08:	bd80      	pop	{r7, pc}
	...

08004d0c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004d0c:	b480      	push	{r7}
 8004d0e:	b08b      	sub	sp, #44	@ 0x2c
 8004d10:	af00      	add	r7, sp, #0
 8004d12:	6078      	str	r0, [r7, #4]
 8004d14:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8004d16:	2300      	movs	r3, #0
 8004d18:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004d1e:	e169      	b.n	8004ff4 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8004d20:	2201      	movs	r2, #1
 8004d22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d24:	fa02 f303 	lsl.w	r3, r2, r3
 8004d28:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004d2a:	683b      	ldr	r3, [r7, #0]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	69fa      	ldr	r2, [r7, #28]
 8004d30:	4013      	ands	r3, r2
 8004d32:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8004d34:	69ba      	ldr	r2, [r7, #24]
 8004d36:	69fb      	ldr	r3, [r7, #28]
 8004d38:	429a      	cmp	r2, r3
 8004d3a:	f040 8158 	bne.w	8004fee <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8004d3e:	683b      	ldr	r3, [r7, #0]
 8004d40:	685b      	ldr	r3, [r3, #4]
 8004d42:	4a9a      	ldr	r2, [pc, #616]	@ (8004fac <HAL_GPIO_Init+0x2a0>)
 8004d44:	4293      	cmp	r3, r2
 8004d46:	d05e      	beq.n	8004e06 <HAL_GPIO_Init+0xfa>
 8004d48:	4a98      	ldr	r2, [pc, #608]	@ (8004fac <HAL_GPIO_Init+0x2a0>)
 8004d4a:	4293      	cmp	r3, r2
 8004d4c:	d875      	bhi.n	8004e3a <HAL_GPIO_Init+0x12e>
 8004d4e:	4a98      	ldr	r2, [pc, #608]	@ (8004fb0 <HAL_GPIO_Init+0x2a4>)
 8004d50:	4293      	cmp	r3, r2
 8004d52:	d058      	beq.n	8004e06 <HAL_GPIO_Init+0xfa>
 8004d54:	4a96      	ldr	r2, [pc, #600]	@ (8004fb0 <HAL_GPIO_Init+0x2a4>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d86f      	bhi.n	8004e3a <HAL_GPIO_Init+0x12e>
 8004d5a:	4a96      	ldr	r2, [pc, #600]	@ (8004fb4 <HAL_GPIO_Init+0x2a8>)
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d052      	beq.n	8004e06 <HAL_GPIO_Init+0xfa>
 8004d60:	4a94      	ldr	r2, [pc, #592]	@ (8004fb4 <HAL_GPIO_Init+0x2a8>)
 8004d62:	4293      	cmp	r3, r2
 8004d64:	d869      	bhi.n	8004e3a <HAL_GPIO_Init+0x12e>
 8004d66:	4a94      	ldr	r2, [pc, #592]	@ (8004fb8 <HAL_GPIO_Init+0x2ac>)
 8004d68:	4293      	cmp	r3, r2
 8004d6a:	d04c      	beq.n	8004e06 <HAL_GPIO_Init+0xfa>
 8004d6c:	4a92      	ldr	r2, [pc, #584]	@ (8004fb8 <HAL_GPIO_Init+0x2ac>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d863      	bhi.n	8004e3a <HAL_GPIO_Init+0x12e>
 8004d72:	4a92      	ldr	r2, [pc, #584]	@ (8004fbc <HAL_GPIO_Init+0x2b0>)
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d046      	beq.n	8004e06 <HAL_GPIO_Init+0xfa>
 8004d78:	4a90      	ldr	r2, [pc, #576]	@ (8004fbc <HAL_GPIO_Init+0x2b0>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d85d      	bhi.n	8004e3a <HAL_GPIO_Init+0x12e>
 8004d7e:	2b12      	cmp	r3, #18
 8004d80:	d82a      	bhi.n	8004dd8 <HAL_GPIO_Init+0xcc>
 8004d82:	2b12      	cmp	r3, #18
 8004d84:	d859      	bhi.n	8004e3a <HAL_GPIO_Init+0x12e>
 8004d86:	a201      	add	r2, pc, #4	@ (adr r2, 8004d8c <HAL_GPIO_Init+0x80>)
 8004d88:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d8c:	08004e07 	.word	0x08004e07
 8004d90:	08004de1 	.word	0x08004de1
 8004d94:	08004df3 	.word	0x08004df3
 8004d98:	08004e35 	.word	0x08004e35
 8004d9c:	08004e3b 	.word	0x08004e3b
 8004da0:	08004e3b 	.word	0x08004e3b
 8004da4:	08004e3b 	.word	0x08004e3b
 8004da8:	08004e3b 	.word	0x08004e3b
 8004dac:	08004e3b 	.word	0x08004e3b
 8004db0:	08004e3b 	.word	0x08004e3b
 8004db4:	08004e3b 	.word	0x08004e3b
 8004db8:	08004e3b 	.word	0x08004e3b
 8004dbc:	08004e3b 	.word	0x08004e3b
 8004dc0:	08004e3b 	.word	0x08004e3b
 8004dc4:	08004e3b 	.word	0x08004e3b
 8004dc8:	08004e3b 	.word	0x08004e3b
 8004dcc:	08004e3b 	.word	0x08004e3b
 8004dd0:	08004de9 	.word	0x08004de9
 8004dd4:	08004dfd 	.word	0x08004dfd
 8004dd8:	4a79      	ldr	r2, [pc, #484]	@ (8004fc0 <HAL_GPIO_Init+0x2b4>)
 8004dda:	4293      	cmp	r3, r2
 8004ddc:	d013      	beq.n	8004e06 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8004dde:	e02c      	b.n	8004e3a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	68db      	ldr	r3, [r3, #12]
 8004de4:	623b      	str	r3, [r7, #32]
          break;
 8004de6:	e029      	b.n	8004e3c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8004de8:	683b      	ldr	r3, [r7, #0]
 8004dea:	68db      	ldr	r3, [r3, #12]
 8004dec:	3304      	adds	r3, #4
 8004dee:	623b      	str	r3, [r7, #32]
          break;
 8004df0:	e024      	b.n	8004e3c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8004df2:	683b      	ldr	r3, [r7, #0]
 8004df4:	68db      	ldr	r3, [r3, #12]
 8004df6:	3308      	adds	r3, #8
 8004df8:	623b      	str	r3, [r7, #32]
          break;
 8004dfa:	e01f      	b.n	8004e3c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	68db      	ldr	r3, [r3, #12]
 8004e00:	330c      	adds	r3, #12
 8004e02:	623b      	str	r3, [r7, #32]
          break;
 8004e04:	e01a      	b.n	8004e3c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8004e06:	683b      	ldr	r3, [r7, #0]
 8004e08:	689b      	ldr	r3, [r3, #8]
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d102      	bne.n	8004e14 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8004e0e:	2304      	movs	r3, #4
 8004e10:	623b      	str	r3, [r7, #32]
          break;
 8004e12:	e013      	b.n	8004e3c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8004e14:	683b      	ldr	r3, [r7, #0]
 8004e16:	689b      	ldr	r3, [r3, #8]
 8004e18:	2b01      	cmp	r3, #1
 8004e1a:	d105      	bne.n	8004e28 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004e1c:	2308      	movs	r3, #8
 8004e1e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	69fa      	ldr	r2, [r7, #28]
 8004e24:	611a      	str	r2, [r3, #16]
          break;
 8004e26:	e009      	b.n	8004e3c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8004e28:	2308      	movs	r3, #8
 8004e2a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	69fa      	ldr	r2, [r7, #28]
 8004e30:	615a      	str	r2, [r3, #20]
          break;
 8004e32:	e003      	b.n	8004e3c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8004e34:	2300      	movs	r3, #0
 8004e36:	623b      	str	r3, [r7, #32]
          break;
 8004e38:	e000      	b.n	8004e3c <HAL_GPIO_Init+0x130>
          break;
 8004e3a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8004e3c:	69bb      	ldr	r3, [r7, #24]
 8004e3e:	2bff      	cmp	r3, #255	@ 0xff
 8004e40:	d801      	bhi.n	8004e46 <HAL_GPIO_Init+0x13a>
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	e001      	b.n	8004e4a <HAL_GPIO_Init+0x13e>
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	3304      	adds	r3, #4
 8004e4a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8004e4c:	69bb      	ldr	r3, [r7, #24]
 8004e4e:	2bff      	cmp	r3, #255	@ 0xff
 8004e50:	d802      	bhi.n	8004e58 <HAL_GPIO_Init+0x14c>
 8004e52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e54:	009b      	lsls	r3, r3, #2
 8004e56:	e002      	b.n	8004e5e <HAL_GPIO_Init+0x152>
 8004e58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004e5a:	3b08      	subs	r3, #8
 8004e5c:	009b      	lsls	r3, r3, #2
 8004e5e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8004e60:	697b      	ldr	r3, [r7, #20]
 8004e62:	681a      	ldr	r2, [r3, #0]
 8004e64:	210f      	movs	r1, #15
 8004e66:	693b      	ldr	r3, [r7, #16]
 8004e68:	fa01 f303 	lsl.w	r3, r1, r3
 8004e6c:	43db      	mvns	r3, r3
 8004e6e:	401a      	ands	r2, r3
 8004e70:	6a39      	ldr	r1, [r7, #32]
 8004e72:	693b      	ldr	r3, [r7, #16]
 8004e74:	fa01 f303 	lsl.w	r3, r1, r3
 8004e78:	431a      	orrs	r2, r3
 8004e7a:	697b      	ldr	r3, [r7, #20]
 8004e7c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	685b      	ldr	r3, [r3, #4]
 8004e82:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	f000 80b1 	beq.w	8004fee <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8004e8c:	4b4d      	ldr	r3, [pc, #308]	@ (8004fc4 <HAL_GPIO_Init+0x2b8>)
 8004e8e:	699b      	ldr	r3, [r3, #24]
 8004e90:	4a4c      	ldr	r2, [pc, #304]	@ (8004fc4 <HAL_GPIO_Init+0x2b8>)
 8004e92:	f043 0301 	orr.w	r3, r3, #1
 8004e96:	6193      	str	r3, [r2, #24]
 8004e98:	4b4a      	ldr	r3, [pc, #296]	@ (8004fc4 <HAL_GPIO_Init+0x2b8>)
 8004e9a:	699b      	ldr	r3, [r3, #24]
 8004e9c:	f003 0301 	and.w	r3, r3, #1
 8004ea0:	60bb      	str	r3, [r7, #8]
 8004ea2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8004ea4:	4a48      	ldr	r2, [pc, #288]	@ (8004fc8 <HAL_GPIO_Init+0x2bc>)
 8004ea6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ea8:	089b      	lsrs	r3, r3, #2
 8004eaa:	3302      	adds	r3, #2
 8004eac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004eb0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8004eb2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eb4:	f003 0303 	and.w	r3, r3, #3
 8004eb8:	009b      	lsls	r3, r3, #2
 8004eba:	220f      	movs	r2, #15
 8004ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8004ec0:	43db      	mvns	r3, r3
 8004ec2:	68fa      	ldr	r2, [r7, #12]
 8004ec4:	4013      	ands	r3, r2
 8004ec6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	4a40      	ldr	r2, [pc, #256]	@ (8004fcc <HAL_GPIO_Init+0x2c0>)
 8004ecc:	4293      	cmp	r3, r2
 8004ece:	d013      	beq.n	8004ef8 <HAL_GPIO_Init+0x1ec>
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	4a3f      	ldr	r2, [pc, #252]	@ (8004fd0 <HAL_GPIO_Init+0x2c4>)
 8004ed4:	4293      	cmp	r3, r2
 8004ed6:	d00d      	beq.n	8004ef4 <HAL_GPIO_Init+0x1e8>
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	4a3e      	ldr	r2, [pc, #248]	@ (8004fd4 <HAL_GPIO_Init+0x2c8>)
 8004edc:	4293      	cmp	r3, r2
 8004ede:	d007      	beq.n	8004ef0 <HAL_GPIO_Init+0x1e4>
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	4a3d      	ldr	r2, [pc, #244]	@ (8004fd8 <HAL_GPIO_Init+0x2cc>)
 8004ee4:	4293      	cmp	r3, r2
 8004ee6:	d101      	bne.n	8004eec <HAL_GPIO_Init+0x1e0>
 8004ee8:	2303      	movs	r3, #3
 8004eea:	e006      	b.n	8004efa <HAL_GPIO_Init+0x1ee>
 8004eec:	2304      	movs	r3, #4
 8004eee:	e004      	b.n	8004efa <HAL_GPIO_Init+0x1ee>
 8004ef0:	2302      	movs	r3, #2
 8004ef2:	e002      	b.n	8004efa <HAL_GPIO_Init+0x1ee>
 8004ef4:	2301      	movs	r3, #1
 8004ef6:	e000      	b.n	8004efa <HAL_GPIO_Init+0x1ee>
 8004ef8:	2300      	movs	r3, #0
 8004efa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004efc:	f002 0203 	and.w	r2, r2, #3
 8004f00:	0092      	lsls	r2, r2, #2
 8004f02:	4093      	lsls	r3, r2
 8004f04:	68fa      	ldr	r2, [r7, #12]
 8004f06:	4313      	orrs	r3, r2
 8004f08:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8004f0a:	492f      	ldr	r1, [pc, #188]	@ (8004fc8 <HAL_GPIO_Init+0x2bc>)
 8004f0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004f0e:	089b      	lsrs	r3, r3, #2
 8004f10:	3302      	adds	r3, #2
 8004f12:	68fa      	ldr	r2, [r7, #12]
 8004f14:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004f18:	683b      	ldr	r3, [r7, #0]
 8004f1a:	685b      	ldr	r3, [r3, #4]
 8004f1c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d006      	beq.n	8004f32 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8004f24:	4b2d      	ldr	r3, [pc, #180]	@ (8004fdc <HAL_GPIO_Init+0x2d0>)
 8004f26:	689a      	ldr	r2, [r3, #8]
 8004f28:	492c      	ldr	r1, [pc, #176]	@ (8004fdc <HAL_GPIO_Init+0x2d0>)
 8004f2a:	69bb      	ldr	r3, [r7, #24]
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	608b      	str	r3, [r1, #8]
 8004f30:	e006      	b.n	8004f40 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8004f32:	4b2a      	ldr	r3, [pc, #168]	@ (8004fdc <HAL_GPIO_Init+0x2d0>)
 8004f34:	689a      	ldr	r2, [r3, #8]
 8004f36:	69bb      	ldr	r3, [r7, #24]
 8004f38:	43db      	mvns	r3, r3
 8004f3a:	4928      	ldr	r1, [pc, #160]	@ (8004fdc <HAL_GPIO_Init+0x2d0>)
 8004f3c:	4013      	ands	r3, r2
 8004f3e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004f40:	683b      	ldr	r3, [r7, #0]
 8004f42:	685b      	ldr	r3, [r3, #4]
 8004f44:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d006      	beq.n	8004f5a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8004f4c:	4b23      	ldr	r3, [pc, #140]	@ (8004fdc <HAL_GPIO_Init+0x2d0>)
 8004f4e:	68da      	ldr	r2, [r3, #12]
 8004f50:	4922      	ldr	r1, [pc, #136]	@ (8004fdc <HAL_GPIO_Init+0x2d0>)
 8004f52:	69bb      	ldr	r3, [r7, #24]
 8004f54:	4313      	orrs	r3, r2
 8004f56:	60cb      	str	r3, [r1, #12]
 8004f58:	e006      	b.n	8004f68 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8004f5a:	4b20      	ldr	r3, [pc, #128]	@ (8004fdc <HAL_GPIO_Init+0x2d0>)
 8004f5c:	68da      	ldr	r2, [r3, #12]
 8004f5e:	69bb      	ldr	r3, [r7, #24]
 8004f60:	43db      	mvns	r3, r3
 8004f62:	491e      	ldr	r1, [pc, #120]	@ (8004fdc <HAL_GPIO_Init+0x2d0>)
 8004f64:	4013      	ands	r3, r2
 8004f66:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004f68:	683b      	ldr	r3, [r7, #0]
 8004f6a:	685b      	ldr	r3, [r3, #4]
 8004f6c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f70:	2b00      	cmp	r3, #0
 8004f72:	d006      	beq.n	8004f82 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8004f74:	4b19      	ldr	r3, [pc, #100]	@ (8004fdc <HAL_GPIO_Init+0x2d0>)
 8004f76:	685a      	ldr	r2, [r3, #4]
 8004f78:	4918      	ldr	r1, [pc, #96]	@ (8004fdc <HAL_GPIO_Init+0x2d0>)
 8004f7a:	69bb      	ldr	r3, [r7, #24]
 8004f7c:	4313      	orrs	r3, r2
 8004f7e:	604b      	str	r3, [r1, #4]
 8004f80:	e006      	b.n	8004f90 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8004f82:	4b16      	ldr	r3, [pc, #88]	@ (8004fdc <HAL_GPIO_Init+0x2d0>)
 8004f84:	685a      	ldr	r2, [r3, #4]
 8004f86:	69bb      	ldr	r3, [r7, #24]
 8004f88:	43db      	mvns	r3, r3
 8004f8a:	4914      	ldr	r1, [pc, #80]	@ (8004fdc <HAL_GPIO_Init+0x2d0>)
 8004f8c:	4013      	ands	r3, r2
 8004f8e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	685b      	ldr	r3, [r3, #4]
 8004f94:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d021      	beq.n	8004fe0 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8004f9c:	4b0f      	ldr	r3, [pc, #60]	@ (8004fdc <HAL_GPIO_Init+0x2d0>)
 8004f9e:	681a      	ldr	r2, [r3, #0]
 8004fa0:	490e      	ldr	r1, [pc, #56]	@ (8004fdc <HAL_GPIO_Init+0x2d0>)
 8004fa2:	69bb      	ldr	r3, [r7, #24]
 8004fa4:	4313      	orrs	r3, r2
 8004fa6:	600b      	str	r3, [r1, #0]
 8004fa8:	e021      	b.n	8004fee <HAL_GPIO_Init+0x2e2>
 8004faa:	bf00      	nop
 8004fac:	10320000 	.word	0x10320000
 8004fb0:	10310000 	.word	0x10310000
 8004fb4:	10220000 	.word	0x10220000
 8004fb8:	10210000 	.word	0x10210000
 8004fbc:	10120000 	.word	0x10120000
 8004fc0:	10110000 	.word	0x10110000
 8004fc4:	40021000 	.word	0x40021000
 8004fc8:	40010000 	.word	0x40010000
 8004fcc:	40010800 	.word	0x40010800
 8004fd0:	40010c00 	.word	0x40010c00
 8004fd4:	40011000 	.word	0x40011000
 8004fd8:	40011400 	.word	0x40011400
 8004fdc:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8004fe0:	4b0b      	ldr	r3, [pc, #44]	@ (8005010 <HAL_GPIO_Init+0x304>)
 8004fe2:	681a      	ldr	r2, [r3, #0]
 8004fe4:	69bb      	ldr	r3, [r7, #24]
 8004fe6:	43db      	mvns	r3, r3
 8004fe8:	4909      	ldr	r1, [pc, #36]	@ (8005010 <HAL_GPIO_Init+0x304>)
 8004fea:	4013      	ands	r3, r2
 8004fec:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8004fee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ff0:	3301      	adds	r3, #1
 8004ff2:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	681a      	ldr	r2, [r3, #0]
 8004ff8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004ffa:	fa22 f303 	lsr.w	r3, r2, r3
 8004ffe:	2b00      	cmp	r3, #0
 8005000:	f47f ae8e 	bne.w	8004d20 <HAL_GPIO_Init+0x14>
  }
}
 8005004:	bf00      	nop
 8005006:	bf00      	nop
 8005008:	372c      	adds	r7, #44	@ 0x2c
 800500a:	46bd      	mov	sp, r7
 800500c:	bc80      	pop	{r7}
 800500e:	4770      	bx	lr
 8005010:	40010400 	.word	0x40010400

08005014 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005014:	b480      	push	{r7}
 8005016:	b083      	sub	sp, #12
 8005018:	af00      	add	r7, sp, #0
 800501a:	6078      	str	r0, [r7, #4]
 800501c:	460b      	mov	r3, r1
 800501e:	807b      	strh	r3, [r7, #2]
 8005020:	4613      	mov	r3, r2
 8005022:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8005024:	787b      	ldrb	r3, [r7, #1]
 8005026:	2b00      	cmp	r3, #0
 8005028:	d003      	beq.n	8005032 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800502a:	887a      	ldrh	r2, [r7, #2]
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8005030:	e003      	b.n	800503a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8005032:	887b      	ldrh	r3, [r7, #2]
 8005034:	041a      	lsls	r2, r3, #16
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	611a      	str	r2, [r3, #16]
}
 800503a:	bf00      	nop
 800503c:	370c      	adds	r7, #12
 800503e:	46bd      	mov	sp, r7
 8005040:	bc80      	pop	{r7}
 8005042:	4770      	bx	lr

08005044 <HAL_GPIO_TogglePin>:
  * @param  GPIOx: where x can be (A..G depending on device used) to select the GPIO peripheral
  * @param  GPIO_Pin: Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8005044:	b480      	push	{r7}
 8005046:	b085      	sub	sp, #20
 8005048:	af00      	add	r7, sp, #0
 800504a:	6078      	str	r0, [r7, #4]
 800504c:	460b      	mov	r3, r1
 800504e:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8005050:	687b      	ldr	r3, [r7, #4]
 8005052:	68db      	ldr	r3, [r3, #12]
 8005054:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8005056:	887a      	ldrh	r2, [r7, #2]
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	4013      	ands	r3, r2
 800505c:	041a      	lsls	r2, r3, #16
 800505e:	68fb      	ldr	r3, [r7, #12]
 8005060:	43d9      	mvns	r1, r3
 8005062:	887b      	ldrh	r3, [r7, #2]
 8005064:	400b      	ands	r3, r1
 8005066:	431a      	orrs	r2, r3
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	611a      	str	r2, [r3, #16]
}
 800506c:	bf00      	nop
 800506e:	3714      	adds	r7, #20
 8005070:	46bd      	mov	sp, r7
 8005072:	bc80      	pop	{r7}
 8005074:	4770      	bx	lr
	...

08005078 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005078:	b580      	push	{r7, lr}
 800507a:	b086      	sub	sp, #24
 800507c:	af00      	add	r7, sp, #0
 800507e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	2b00      	cmp	r3, #0
 8005084:	d101      	bne.n	800508a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005086:	2301      	movs	r3, #1
 8005088:	e272      	b.n	8005570 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	f003 0301 	and.w	r3, r3, #1
 8005092:	2b00      	cmp	r3, #0
 8005094:	f000 8087 	beq.w	80051a6 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8005098:	4b92      	ldr	r3, [pc, #584]	@ (80052e4 <HAL_RCC_OscConfig+0x26c>)
 800509a:	685b      	ldr	r3, [r3, #4]
 800509c:	f003 030c 	and.w	r3, r3, #12
 80050a0:	2b04      	cmp	r3, #4
 80050a2:	d00c      	beq.n	80050be <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80050a4:	4b8f      	ldr	r3, [pc, #572]	@ (80052e4 <HAL_RCC_OscConfig+0x26c>)
 80050a6:	685b      	ldr	r3, [r3, #4]
 80050a8:	f003 030c 	and.w	r3, r3, #12
 80050ac:	2b08      	cmp	r3, #8
 80050ae:	d112      	bne.n	80050d6 <HAL_RCC_OscConfig+0x5e>
 80050b0:	4b8c      	ldr	r3, [pc, #560]	@ (80052e4 <HAL_RCC_OscConfig+0x26c>)
 80050b2:	685b      	ldr	r3, [r3, #4]
 80050b4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80050b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80050bc:	d10b      	bne.n	80050d6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80050be:	4b89      	ldr	r3, [pc, #548]	@ (80052e4 <HAL_RCC_OscConfig+0x26c>)
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d06c      	beq.n	80051a4 <HAL_RCC_OscConfig+0x12c>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	685b      	ldr	r3, [r3, #4]
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d168      	bne.n	80051a4 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80050d2:	2301      	movs	r3, #1
 80050d4:	e24c      	b.n	8005570 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	685b      	ldr	r3, [r3, #4]
 80050da:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80050de:	d106      	bne.n	80050ee <HAL_RCC_OscConfig+0x76>
 80050e0:	4b80      	ldr	r3, [pc, #512]	@ (80052e4 <HAL_RCC_OscConfig+0x26c>)
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4a7f      	ldr	r2, [pc, #508]	@ (80052e4 <HAL_RCC_OscConfig+0x26c>)
 80050e6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80050ea:	6013      	str	r3, [r2, #0]
 80050ec:	e02e      	b.n	800514c <HAL_RCC_OscConfig+0xd4>
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	685b      	ldr	r3, [r3, #4]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	d10c      	bne.n	8005110 <HAL_RCC_OscConfig+0x98>
 80050f6:	4b7b      	ldr	r3, [pc, #492]	@ (80052e4 <HAL_RCC_OscConfig+0x26c>)
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	4a7a      	ldr	r2, [pc, #488]	@ (80052e4 <HAL_RCC_OscConfig+0x26c>)
 80050fc:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8005100:	6013      	str	r3, [r2, #0]
 8005102:	4b78      	ldr	r3, [pc, #480]	@ (80052e4 <HAL_RCC_OscConfig+0x26c>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	4a77      	ldr	r2, [pc, #476]	@ (80052e4 <HAL_RCC_OscConfig+0x26c>)
 8005108:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800510c:	6013      	str	r3, [r2, #0]
 800510e:	e01d      	b.n	800514c <HAL_RCC_OscConfig+0xd4>
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	685b      	ldr	r3, [r3, #4]
 8005114:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8005118:	d10c      	bne.n	8005134 <HAL_RCC_OscConfig+0xbc>
 800511a:	4b72      	ldr	r3, [pc, #456]	@ (80052e4 <HAL_RCC_OscConfig+0x26c>)
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	4a71      	ldr	r2, [pc, #452]	@ (80052e4 <HAL_RCC_OscConfig+0x26c>)
 8005120:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8005124:	6013      	str	r3, [r2, #0]
 8005126:	4b6f      	ldr	r3, [pc, #444]	@ (80052e4 <HAL_RCC_OscConfig+0x26c>)
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	4a6e      	ldr	r2, [pc, #440]	@ (80052e4 <HAL_RCC_OscConfig+0x26c>)
 800512c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005130:	6013      	str	r3, [r2, #0]
 8005132:	e00b      	b.n	800514c <HAL_RCC_OscConfig+0xd4>
 8005134:	4b6b      	ldr	r3, [pc, #428]	@ (80052e4 <HAL_RCC_OscConfig+0x26c>)
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	4a6a      	ldr	r2, [pc, #424]	@ (80052e4 <HAL_RCC_OscConfig+0x26c>)
 800513a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800513e:	6013      	str	r3, [r2, #0]
 8005140:	4b68      	ldr	r3, [pc, #416]	@ (80052e4 <HAL_RCC_OscConfig+0x26c>)
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	4a67      	ldr	r2, [pc, #412]	@ (80052e4 <HAL_RCC_OscConfig+0x26c>)
 8005146:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800514a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	685b      	ldr	r3, [r3, #4]
 8005150:	2b00      	cmp	r3, #0
 8005152:	d013      	beq.n	800517c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005154:	f7ff fcc8 	bl	8004ae8 <HAL_GetTick>
 8005158:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800515a:	e008      	b.n	800516e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800515c:	f7ff fcc4 	bl	8004ae8 <HAL_GetTick>
 8005160:	4602      	mov	r2, r0
 8005162:	693b      	ldr	r3, [r7, #16]
 8005164:	1ad3      	subs	r3, r2, r3
 8005166:	2b64      	cmp	r3, #100	@ 0x64
 8005168:	d901      	bls.n	800516e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800516a:	2303      	movs	r3, #3
 800516c:	e200      	b.n	8005570 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800516e:	4b5d      	ldr	r3, [pc, #372]	@ (80052e4 <HAL_RCC_OscConfig+0x26c>)
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005176:	2b00      	cmp	r3, #0
 8005178:	d0f0      	beq.n	800515c <HAL_RCC_OscConfig+0xe4>
 800517a:	e014      	b.n	80051a6 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800517c:	f7ff fcb4 	bl	8004ae8 <HAL_GetTick>
 8005180:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005182:	e008      	b.n	8005196 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005184:	f7ff fcb0 	bl	8004ae8 <HAL_GetTick>
 8005188:	4602      	mov	r2, r0
 800518a:	693b      	ldr	r3, [r7, #16]
 800518c:	1ad3      	subs	r3, r2, r3
 800518e:	2b64      	cmp	r3, #100	@ 0x64
 8005190:	d901      	bls.n	8005196 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8005192:	2303      	movs	r3, #3
 8005194:	e1ec      	b.n	8005570 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005196:	4b53      	ldr	r3, [pc, #332]	@ (80052e4 <HAL_RCC_OscConfig+0x26c>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d1f0      	bne.n	8005184 <HAL_RCC_OscConfig+0x10c>
 80051a2:	e000      	b.n	80051a6 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80051a4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f003 0302 	and.w	r3, r3, #2
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d063      	beq.n	800527a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80051b2:	4b4c      	ldr	r3, [pc, #304]	@ (80052e4 <HAL_RCC_OscConfig+0x26c>)
 80051b4:	685b      	ldr	r3, [r3, #4]
 80051b6:	f003 030c 	and.w	r3, r3, #12
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d00b      	beq.n	80051d6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 80051be:	4b49      	ldr	r3, [pc, #292]	@ (80052e4 <HAL_RCC_OscConfig+0x26c>)
 80051c0:	685b      	ldr	r3, [r3, #4]
 80051c2:	f003 030c 	and.w	r3, r3, #12
 80051c6:	2b08      	cmp	r3, #8
 80051c8:	d11c      	bne.n	8005204 <HAL_RCC_OscConfig+0x18c>
 80051ca:	4b46      	ldr	r3, [pc, #280]	@ (80052e4 <HAL_RCC_OscConfig+0x26c>)
 80051cc:	685b      	ldr	r3, [r3, #4]
 80051ce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80051d2:	2b00      	cmp	r3, #0
 80051d4:	d116      	bne.n	8005204 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80051d6:	4b43      	ldr	r3, [pc, #268]	@ (80052e4 <HAL_RCC_OscConfig+0x26c>)
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f003 0302 	and.w	r3, r3, #2
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d005      	beq.n	80051ee <HAL_RCC_OscConfig+0x176>
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	691b      	ldr	r3, [r3, #16]
 80051e6:	2b01      	cmp	r3, #1
 80051e8:	d001      	beq.n	80051ee <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80051ea:	2301      	movs	r3, #1
 80051ec:	e1c0      	b.n	8005570 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051ee:	4b3d      	ldr	r3, [pc, #244]	@ (80052e4 <HAL_RCC_OscConfig+0x26c>)
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	695b      	ldr	r3, [r3, #20]
 80051fa:	00db      	lsls	r3, r3, #3
 80051fc:	4939      	ldr	r1, [pc, #228]	@ (80052e4 <HAL_RCC_OscConfig+0x26c>)
 80051fe:	4313      	orrs	r3, r2
 8005200:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005202:	e03a      	b.n	800527a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	691b      	ldr	r3, [r3, #16]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d020      	beq.n	800524e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800520c:	4b36      	ldr	r3, [pc, #216]	@ (80052e8 <HAL_RCC_OscConfig+0x270>)
 800520e:	2201      	movs	r2, #1
 8005210:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005212:	f7ff fc69 	bl	8004ae8 <HAL_GetTick>
 8005216:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005218:	e008      	b.n	800522c <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800521a:	f7ff fc65 	bl	8004ae8 <HAL_GetTick>
 800521e:	4602      	mov	r2, r0
 8005220:	693b      	ldr	r3, [r7, #16]
 8005222:	1ad3      	subs	r3, r2, r3
 8005224:	2b02      	cmp	r3, #2
 8005226:	d901      	bls.n	800522c <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8005228:	2303      	movs	r3, #3
 800522a:	e1a1      	b.n	8005570 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800522c:	4b2d      	ldr	r3, [pc, #180]	@ (80052e4 <HAL_RCC_OscConfig+0x26c>)
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	f003 0302 	and.w	r3, r3, #2
 8005234:	2b00      	cmp	r3, #0
 8005236:	d0f0      	beq.n	800521a <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005238:	4b2a      	ldr	r3, [pc, #168]	@ (80052e4 <HAL_RCC_OscConfig+0x26c>)
 800523a:	681b      	ldr	r3, [r3, #0]
 800523c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	695b      	ldr	r3, [r3, #20]
 8005244:	00db      	lsls	r3, r3, #3
 8005246:	4927      	ldr	r1, [pc, #156]	@ (80052e4 <HAL_RCC_OscConfig+0x26c>)
 8005248:	4313      	orrs	r3, r2
 800524a:	600b      	str	r3, [r1, #0]
 800524c:	e015      	b.n	800527a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800524e:	4b26      	ldr	r3, [pc, #152]	@ (80052e8 <HAL_RCC_OscConfig+0x270>)
 8005250:	2200      	movs	r2, #0
 8005252:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005254:	f7ff fc48 	bl	8004ae8 <HAL_GetTick>
 8005258:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800525a:	e008      	b.n	800526e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800525c:	f7ff fc44 	bl	8004ae8 <HAL_GetTick>
 8005260:	4602      	mov	r2, r0
 8005262:	693b      	ldr	r3, [r7, #16]
 8005264:	1ad3      	subs	r3, r2, r3
 8005266:	2b02      	cmp	r3, #2
 8005268:	d901      	bls.n	800526e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800526a:	2303      	movs	r3, #3
 800526c:	e180      	b.n	8005570 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800526e:	4b1d      	ldr	r3, [pc, #116]	@ (80052e4 <HAL_RCC_OscConfig+0x26c>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f003 0302 	and.w	r3, r3, #2
 8005276:	2b00      	cmp	r3, #0
 8005278:	d1f0      	bne.n	800525c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f003 0308 	and.w	r3, r3, #8
 8005282:	2b00      	cmp	r3, #0
 8005284:	d03a      	beq.n	80052fc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	699b      	ldr	r3, [r3, #24]
 800528a:	2b00      	cmp	r3, #0
 800528c:	d019      	beq.n	80052c2 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800528e:	4b17      	ldr	r3, [pc, #92]	@ (80052ec <HAL_RCC_OscConfig+0x274>)
 8005290:	2201      	movs	r2, #1
 8005292:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005294:	f7ff fc28 	bl	8004ae8 <HAL_GetTick>
 8005298:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800529a:	e008      	b.n	80052ae <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800529c:	f7ff fc24 	bl	8004ae8 <HAL_GetTick>
 80052a0:	4602      	mov	r2, r0
 80052a2:	693b      	ldr	r3, [r7, #16]
 80052a4:	1ad3      	subs	r3, r2, r3
 80052a6:	2b02      	cmp	r3, #2
 80052a8:	d901      	bls.n	80052ae <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80052aa:	2303      	movs	r3, #3
 80052ac:	e160      	b.n	8005570 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80052ae:	4b0d      	ldr	r3, [pc, #52]	@ (80052e4 <HAL_RCC_OscConfig+0x26c>)
 80052b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052b2:	f003 0302 	and.w	r3, r3, #2
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d0f0      	beq.n	800529c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80052ba:	2001      	movs	r0, #1
 80052bc:	f000 face 	bl	800585c <RCC_Delay>
 80052c0:	e01c      	b.n	80052fc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80052c2:	4b0a      	ldr	r3, [pc, #40]	@ (80052ec <HAL_RCC_OscConfig+0x274>)
 80052c4:	2200      	movs	r2, #0
 80052c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80052c8:	f7ff fc0e 	bl	8004ae8 <HAL_GetTick>
 80052cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80052ce:	e00f      	b.n	80052f0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80052d0:	f7ff fc0a 	bl	8004ae8 <HAL_GetTick>
 80052d4:	4602      	mov	r2, r0
 80052d6:	693b      	ldr	r3, [r7, #16]
 80052d8:	1ad3      	subs	r3, r2, r3
 80052da:	2b02      	cmp	r3, #2
 80052dc:	d908      	bls.n	80052f0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80052de:	2303      	movs	r3, #3
 80052e0:	e146      	b.n	8005570 <HAL_RCC_OscConfig+0x4f8>
 80052e2:	bf00      	nop
 80052e4:	40021000 	.word	0x40021000
 80052e8:	42420000 	.word	0x42420000
 80052ec:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80052f0:	4b92      	ldr	r3, [pc, #584]	@ (800553c <HAL_RCC_OscConfig+0x4c4>)
 80052f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052f4:	f003 0302 	and.w	r3, r3, #2
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d1e9      	bne.n	80052d0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f003 0304 	and.w	r3, r3, #4
 8005304:	2b00      	cmp	r3, #0
 8005306:	f000 80a6 	beq.w	8005456 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800530a:	2300      	movs	r3, #0
 800530c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800530e:	4b8b      	ldr	r3, [pc, #556]	@ (800553c <HAL_RCC_OscConfig+0x4c4>)
 8005310:	69db      	ldr	r3, [r3, #28]
 8005312:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005316:	2b00      	cmp	r3, #0
 8005318:	d10d      	bne.n	8005336 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800531a:	4b88      	ldr	r3, [pc, #544]	@ (800553c <HAL_RCC_OscConfig+0x4c4>)
 800531c:	69db      	ldr	r3, [r3, #28]
 800531e:	4a87      	ldr	r2, [pc, #540]	@ (800553c <HAL_RCC_OscConfig+0x4c4>)
 8005320:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8005324:	61d3      	str	r3, [r2, #28]
 8005326:	4b85      	ldr	r3, [pc, #532]	@ (800553c <HAL_RCC_OscConfig+0x4c4>)
 8005328:	69db      	ldr	r3, [r3, #28]
 800532a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800532e:	60bb      	str	r3, [r7, #8]
 8005330:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005332:	2301      	movs	r3, #1
 8005334:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005336:	4b82      	ldr	r3, [pc, #520]	@ (8005540 <HAL_RCC_OscConfig+0x4c8>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800533e:	2b00      	cmp	r3, #0
 8005340:	d118      	bne.n	8005374 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005342:	4b7f      	ldr	r3, [pc, #508]	@ (8005540 <HAL_RCC_OscConfig+0x4c8>)
 8005344:	681b      	ldr	r3, [r3, #0]
 8005346:	4a7e      	ldr	r2, [pc, #504]	@ (8005540 <HAL_RCC_OscConfig+0x4c8>)
 8005348:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800534c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800534e:	f7ff fbcb 	bl	8004ae8 <HAL_GetTick>
 8005352:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005354:	e008      	b.n	8005368 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005356:	f7ff fbc7 	bl	8004ae8 <HAL_GetTick>
 800535a:	4602      	mov	r2, r0
 800535c:	693b      	ldr	r3, [r7, #16]
 800535e:	1ad3      	subs	r3, r2, r3
 8005360:	2b64      	cmp	r3, #100	@ 0x64
 8005362:	d901      	bls.n	8005368 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8005364:	2303      	movs	r3, #3
 8005366:	e103      	b.n	8005570 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005368:	4b75      	ldr	r3, [pc, #468]	@ (8005540 <HAL_RCC_OscConfig+0x4c8>)
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005370:	2b00      	cmp	r3, #0
 8005372:	d0f0      	beq.n	8005356 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	68db      	ldr	r3, [r3, #12]
 8005378:	2b01      	cmp	r3, #1
 800537a:	d106      	bne.n	800538a <HAL_RCC_OscConfig+0x312>
 800537c:	4b6f      	ldr	r3, [pc, #444]	@ (800553c <HAL_RCC_OscConfig+0x4c4>)
 800537e:	6a1b      	ldr	r3, [r3, #32]
 8005380:	4a6e      	ldr	r2, [pc, #440]	@ (800553c <HAL_RCC_OscConfig+0x4c4>)
 8005382:	f043 0301 	orr.w	r3, r3, #1
 8005386:	6213      	str	r3, [r2, #32]
 8005388:	e02d      	b.n	80053e6 <HAL_RCC_OscConfig+0x36e>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	68db      	ldr	r3, [r3, #12]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d10c      	bne.n	80053ac <HAL_RCC_OscConfig+0x334>
 8005392:	4b6a      	ldr	r3, [pc, #424]	@ (800553c <HAL_RCC_OscConfig+0x4c4>)
 8005394:	6a1b      	ldr	r3, [r3, #32]
 8005396:	4a69      	ldr	r2, [pc, #420]	@ (800553c <HAL_RCC_OscConfig+0x4c4>)
 8005398:	f023 0301 	bic.w	r3, r3, #1
 800539c:	6213      	str	r3, [r2, #32]
 800539e:	4b67      	ldr	r3, [pc, #412]	@ (800553c <HAL_RCC_OscConfig+0x4c4>)
 80053a0:	6a1b      	ldr	r3, [r3, #32]
 80053a2:	4a66      	ldr	r2, [pc, #408]	@ (800553c <HAL_RCC_OscConfig+0x4c4>)
 80053a4:	f023 0304 	bic.w	r3, r3, #4
 80053a8:	6213      	str	r3, [r2, #32]
 80053aa:	e01c      	b.n	80053e6 <HAL_RCC_OscConfig+0x36e>
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	68db      	ldr	r3, [r3, #12]
 80053b0:	2b05      	cmp	r3, #5
 80053b2:	d10c      	bne.n	80053ce <HAL_RCC_OscConfig+0x356>
 80053b4:	4b61      	ldr	r3, [pc, #388]	@ (800553c <HAL_RCC_OscConfig+0x4c4>)
 80053b6:	6a1b      	ldr	r3, [r3, #32]
 80053b8:	4a60      	ldr	r2, [pc, #384]	@ (800553c <HAL_RCC_OscConfig+0x4c4>)
 80053ba:	f043 0304 	orr.w	r3, r3, #4
 80053be:	6213      	str	r3, [r2, #32]
 80053c0:	4b5e      	ldr	r3, [pc, #376]	@ (800553c <HAL_RCC_OscConfig+0x4c4>)
 80053c2:	6a1b      	ldr	r3, [r3, #32]
 80053c4:	4a5d      	ldr	r2, [pc, #372]	@ (800553c <HAL_RCC_OscConfig+0x4c4>)
 80053c6:	f043 0301 	orr.w	r3, r3, #1
 80053ca:	6213      	str	r3, [r2, #32]
 80053cc:	e00b      	b.n	80053e6 <HAL_RCC_OscConfig+0x36e>
 80053ce:	4b5b      	ldr	r3, [pc, #364]	@ (800553c <HAL_RCC_OscConfig+0x4c4>)
 80053d0:	6a1b      	ldr	r3, [r3, #32]
 80053d2:	4a5a      	ldr	r2, [pc, #360]	@ (800553c <HAL_RCC_OscConfig+0x4c4>)
 80053d4:	f023 0301 	bic.w	r3, r3, #1
 80053d8:	6213      	str	r3, [r2, #32]
 80053da:	4b58      	ldr	r3, [pc, #352]	@ (800553c <HAL_RCC_OscConfig+0x4c4>)
 80053dc:	6a1b      	ldr	r3, [r3, #32]
 80053de:	4a57      	ldr	r2, [pc, #348]	@ (800553c <HAL_RCC_OscConfig+0x4c4>)
 80053e0:	f023 0304 	bic.w	r3, r3, #4
 80053e4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	68db      	ldr	r3, [r3, #12]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d015      	beq.n	800541a <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80053ee:	f7ff fb7b 	bl	8004ae8 <HAL_GetTick>
 80053f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053f4:	e00a      	b.n	800540c <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80053f6:	f7ff fb77 	bl	8004ae8 <HAL_GetTick>
 80053fa:	4602      	mov	r2, r0
 80053fc:	693b      	ldr	r3, [r7, #16]
 80053fe:	1ad3      	subs	r3, r2, r3
 8005400:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005404:	4293      	cmp	r3, r2
 8005406:	d901      	bls.n	800540c <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8005408:	2303      	movs	r3, #3
 800540a:	e0b1      	b.n	8005570 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800540c:	4b4b      	ldr	r3, [pc, #300]	@ (800553c <HAL_RCC_OscConfig+0x4c4>)
 800540e:	6a1b      	ldr	r3, [r3, #32]
 8005410:	f003 0302 	and.w	r3, r3, #2
 8005414:	2b00      	cmp	r3, #0
 8005416:	d0ee      	beq.n	80053f6 <HAL_RCC_OscConfig+0x37e>
 8005418:	e014      	b.n	8005444 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800541a:	f7ff fb65 	bl	8004ae8 <HAL_GetTick>
 800541e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005420:	e00a      	b.n	8005438 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005422:	f7ff fb61 	bl	8004ae8 <HAL_GetTick>
 8005426:	4602      	mov	r2, r0
 8005428:	693b      	ldr	r3, [r7, #16]
 800542a:	1ad3      	subs	r3, r2, r3
 800542c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005430:	4293      	cmp	r3, r2
 8005432:	d901      	bls.n	8005438 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8005434:	2303      	movs	r3, #3
 8005436:	e09b      	b.n	8005570 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005438:	4b40      	ldr	r3, [pc, #256]	@ (800553c <HAL_RCC_OscConfig+0x4c4>)
 800543a:	6a1b      	ldr	r3, [r3, #32]
 800543c:	f003 0302 	and.w	r3, r3, #2
 8005440:	2b00      	cmp	r3, #0
 8005442:	d1ee      	bne.n	8005422 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8005444:	7dfb      	ldrb	r3, [r7, #23]
 8005446:	2b01      	cmp	r3, #1
 8005448:	d105      	bne.n	8005456 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800544a:	4b3c      	ldr	r3, [pc, #240]	@ (800553c <HAL_RCC_OscConfig+0x4c4>)
 800544c:	69db      	ldr	r3, [r3, #28]
 800544e:	4a3b      	ldr	r2, [pc, #236]	@ (800553c <HAL_RCC_OscConfig+0x4c4>)
 8005450:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005454:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	69db      	ldr	r3, [r3, #28]
 800545a:	2b00      	cmp	r3, #0
 800545c:	f000 8087 	beq.w	800556e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8005460:	4b36      	ldr	r3, [pc, #216]	@ (800553c <HAL_RCC_OscConfig+0x4c4>)
 8005462:	685b      	ldr	r3, [r3, #4]
 8005464:	f003 030c 	and.w	r3, r3, #12
 8005468:	2b08      	cmp	r3, #8
 800546a:	d061      	beq.n	8005530 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	69db      	ldr	r3, [r3, #28]
 8005470:	2b02      	cmp	r3, #2
 8005472:	d146      	bne.n	8005502 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005474:	4b33      	ldr	r3, [pc, #204]	@ (8005544 <HAL_RCC_OscConfig+0x4cc>)
 8005476:	2200      	movs	r2, #0
 8005478:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800547a:	f7ff fb35 	bl	8004ae8 <HAL_GetTick>
 800547e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005480:	e008      	b.n	8005494 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005482:	f7ff fb31 	bl	8004ae8 <HAL_GetTick>
 8005486:	4602      	mov	r2, r0
 8005488:	693b      	ldr	r3, [r7, #16]
 800548a:	1ad3      	subs	r3, r2, r3
 800548c:	2b02      	cmp	r3, #2
 800548e:	d901      	bls.n	8005494 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8005490:	2303      	movs	r3, #3
 8005492:	e06d      	b.n	8005570 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005494:	4b29      	ldr	r3, [pc, #164]	@ (800553c <HAL_RCC_OscConfig+0x4c4>)
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800549c:	2b00      	cmp	r3, #0
 800549e:	d1f0      	bne.n	8005482 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	6a1b      	ldr	r3, [r3, #32]
 80054a4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80054a8:	d108      	bne.n	80054bc <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80054aa:	4b24      	ldr	r3, [pc, #144]	@ (800553c <HAL_RCC_OscConfig+0x4c4>)
 80054ac:	685b      	ldr	r3, [r3, #4]
 80054ae:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	689b      	ldr	r3, [r3, #8]
 80054b6:	4921      	ldr	r1, [pc, #132]	@ (800553c <HAL_RCC_OscConfig+0x4c4>)
 80054b8:	4313      	orrs	r3, r2
 80054ba:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80054bc:	4b1f      	ldr	r3, [pc, #124]	@ (800553c <HAL_RCC_OscConfig+0x4c4>)
 80054be:	685b      	ldr	r3, [r3, #4]
 80054c0:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6a19      	ldr	r1, [r3, #32]
 80054c8:	687b      	ldr	r3, [r7, #4]
 80054ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80054cc:	430b      	orrs	r3, r1
 80054ce:	491b      	ldr	r1, [pc, #108]	@ (800553c <HAL_RCC_OscConfig+0x4c4>)
 80054d0:	4313      	orrs	r3, r2
 80054d2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80054d4:	4b1b      	ldr	r3, [pc, #108]	@ (8005544 <HAL_RCC_OscConfig+0x4cc>)
 80054d6:	2201      	movs	r2, #1
 80054d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80054da:	f7ff fb05 	bl	8004ae8 <HAL_GetTick>
 80054de:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80054e0:	e008      	b.n	80054f4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80054e2:	f7ff fb01 	bl	8004ae8 <HAL_GetTick>
 80054e6:	4602      	mov	r2, r0
 80054e8:	693b      	ldr	r3, [r7, #16]
 80054ea:	1ad3      	subs	r3, r2, r3
 80054ec:	2b02      	cmp	r3, #2
 80054ee:	d901      	bls.n	80054f4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80054f0:	2303      	movs	r3, #3
 80054f2:	e03d      	b.n	8005570 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80054f4:	4b11      	ldr	r3, [pc, #68]	@ (800553c <HAL_RCC_OscConfig+0x4c4>)
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d0f0      	beq.n	80054e2 <HAL_RCC_OscConfig+0x46a>
 8005500:	e035      	b.n	800556e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005502:	4b10      	ldr	r3, [pc, #64]	@ (8005544 <HAL_RCC_OscConfig+0x4cc>)
 8005504:	2200      	movs	r2, #0
 8005506:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005508:	f7ff faee 	bl	8004ae8 <HAL_GetTick>
 800550c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800550e:	e008      	b.n	8005522 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005510:	f7ff faea 	bl	8004ae8 <HAL_GetTick>
 8005514:	4602      	mov	r2, r0
 8005516:	693b      	ldr	r3, [r7, #16]
 8005518:	1ad3      	subs	r3, r2, r3
 800551a:	2b02      	cmp	r3, #2
 800551c:	d901      	bls.n	8005522 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800551e:	2303      	movs	r3, #3
 8005520:	e026      	b.n	8005570 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8005522:	4b06      	ldr	r3, [pc, #24]	@ (800553c <HAL_RCC_OscConfig+0x4c4>)
 8005524:	681b      	ldr	r3, [r3, #0]
 8005526:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800552a:	2b00      	cmp	r3, #0
 800552c:	d1f0      	bne.n	8005510 <HAL_RCC_OscConfig+0x498>
 800552e:	e01e      	b.n	800556e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	69db      	ldr	r3, [r3, #28]
 8005534:	2b01      	cmp	r3, #1
 8005536:	d107      	bne.n	8005548 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8005538:	2301      	movs	r3, #1
 800553a:	e019      	b.n	8005570 <HAL_RCC_OscConfig+0x4f8>
 800553c:	40021000 	.word	0x40021000
 8005540:	40007000 	.word	0x40007000
 8005544:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8005548:	4b0b      	ldr	r3, [pc, #44]	@ (8005578 <HAL_RCC_OscConfig+0x500>)
 800554a:	685b      	ldr	r3, [r3, #4]
 800554c:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800554e:	68fb      	ldr	r3, [r7, #12]
 8005550:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	6a1b      	ldr	r3, [r3, #32]
 8005558:	429a      	cmp	r2, r3
 800555a:	d106      	bne.n	800556a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 800555c:	68fb      	ldr	r3, [r7, #12]
 800555e:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005566:	429a      	cmp	r2, r3
 8005568:	d001      	beq.n	800556e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800556a:	2301      	movs	r3, #1
 800556c:	e000      	b.n	8005570 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800556e:	2300      	movs	r3, #0
}
 8005570:	4618      	mov	r0, r3
 8005572:	3718      	adds	r7, #24
 8005574:	46bd      	mov	sp, r7
 8005576:	bd80      	pop	{r7, pc}
 8005578:	40021000 	.word	0x40021000

0800557c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800557c:	b580      	push	{r7, lr}
 800557e:	b084      	sub	sp, #16
 8005580:	af00      	add	r7, sp, #0
 8005582:	6078      	str	r0, [r7, #4]
 8005584:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	2b00      	cmp	r3, #0
 800558a:	d101      	bne.n	8005590 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800558c:	2301      	movs	r3, #1
 800558e:	e0d0      	b.n	8005732 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005590:	4b6a      	ldr	r3, [pc, #424]	@ (800573c <HAL_RCC_ClockConfig+0x1c0>)
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	f003 0307 	and.w	r3, r3, #7
 8005598:	683a      	ldr	r2, [r7, #0]
 800559a:	429a      	cmp	r2, r3
 800559c:	d910      	bls.n	80055c0 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800559e:	4b67      	ldr	r3, [pc, #412]	@ (800573c <HAL_RCC_ClockConfig+0x1c0>)
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	f023 0207 	bic.w	r2, r3, #7
 80055a6:	4965      	ldr	r1, [pc, #404]	@ (800573c <HAL_RCC_ClockConfig+0x1c0>)
 80055a8:	683b      	ldr	r3, [r7, #0]
 80055aa:	4313      	orrs	r3, r2
 80055ac:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80055ae:	4b63      	ldr	r3, [pc, #396]	@ (800573c <HAL_RCC_ClockConfig+0x1c0>)
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	f003 0307 	and.w	r3, r3, #7
 80055b6:	683a      	ldr	r2, [r7, #0]
 80055b8:	429a      	cmp	r2, r3
 80055ba:	d001      	beq.n	80055c0 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80055bc:	2301      	movs	r3, #1
 80055be:	e0b8      	b.n	8005732 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	681b      	ldr	r3, [r3, #0]
 80055c4:	f003 0302 	and.w	r3, r3, #2
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d020      	beq.n	800560e <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f003 0304 	and.w	r3, r3, #4
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d005      	beq.n	80055e4 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80055d8:	4b59      	ldr	r3, [pc, #356]	@ (8005740 <HAL_RCC_ClockConfig+0x1c4>)
 80055da:	685b      	ldr	r3, [r3, #4]
 80055dc:	4a58      	ldr	r2, [pc, #352]	@ (8005740 <HAL_RCC_ClockConfig+0x1c4>)
 80055de:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80055e2:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	f003 0308 	and.w	r3, r3, #8
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d005      	beq.n	80055fc <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80055f0:	4b53      	ldr	r3, [pc, #332]	@ (8005740 <HAL_RCC_ClockConfig+0x1c4>)
 80055f2:	685b      	ldr	r3, [r3, #4]
 80055f4:	4a52      	ldr	r2, [pc, #328]	@ (8005740 <HAL_RCC_ClockConfig+0x1c4>)
 80055f6:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80055fa:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80055fc:	4b50      	ldr	r3, [pc, #320]	@ (8005740 <HAL_RCC_ClockConfig+0x1c4>)
 80055fe:	685b      	ldr	r3, [r3, #4]
 8005600:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	689b      	ldr	r3, [r3, #8]
 8005608:	494d      	ldr	r1, [pc, #308]	@ (8005740 <HAL_RCC_ClockConfig+0x1c4>)
 800560a:	4313      	orrs	r3, r2
 800560c:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f003 0301 	and.w	r3, r3, #1
 8005616:	2b00      	cmp	r3, #0
 8005618:	d040      	beq.n	800569c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	685b      	ldr	r3, [r3, #4]
 800561e:	2b01      	cmp	r3, #1
 8005620:	d107      	bne.n	8005632 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005622:	4b47      	ldr	r3, [pc, #284]	@ (8005740 <HAL_RCC_ClockConfig+0x1c4>)
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800562a:	2b00      	cmp	r3, #0
 800562c:	d115      	bne.n	800565a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800562e:	2301      	movs	r3, #1
 8005630:	e07f      	b.n	8005732 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	685b      	ldr	r3, [r3, #4]
 8005636:	2b02      	cmp	r3, #2
 8005638:	d107      	bne.n	800564a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800563a:	4b41      	ldr	r3, [pc, #260]	@ (8005740 <HAL_RCC_ClockConfig+0x1c4>)
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005642:	2b00      	cmp	r3, #0
 8005644:	d109      	bne.n	800565a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005646:	2301      	movs	r3, #1
 8005648:	e073      	b.n	8005732 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800564a:	4b3d      	ldr	r3, [pc, #244]	@ (8005740 <HAL_RCC_ClockConfig+0x1c4>)
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	f003 0302 	and.w	r3, r3, #2
 8005652:	2b00      	cmp	r3, #0
 8005654:	d101      	bne.n	800565a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005656:	2301      	movs	r3, #1
 8005658:	e06b      	b.n	8005732 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800565a:	4b39      	ldr	r3, [pc, #228]	@ (8005740 <HAL_RCC_ClockConfig+0x1c4>)
 800565c:	685b      	ldr	r3, [r3, #4]
 800565e:	f023 0203 	bic.w	r2, r3, #3
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	685b      	ldr	r3, [r3, #4]
 8005666:	4936      	ldr	r1, [pc, #216]	@ (8005740 <HAL_RCC_ClockConfig+0x1c4>)
 8005668:	4313      	orrs	r3, r2
 800566a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800566c:	f7ff fa3c 	bl	8004ae8 <HAL_GetTick>
 8005670:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005672:	e00a      	b.n	800568a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005674:	f7ff fa38 	bl	8004ae8 <HAL_GetTick>
 8005678:	4602      	mov	r2, r0
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	1ad3      	subs	r3, r2, r3
 800567e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005682:	4293      	cmp	r3, r2
 8005684:	d901      	bls.n	800568a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8005686:	2303      	movs	r3, #3
 8005688:	e053      	b.n	8005732 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800568a:	4b2d      	ldr	r3, [pc, #180]	@ (8005740 <HAL_RCC_ClockConfig+0x1c4>)
 800568c:	685b      	ldr	r3, [r3, #4]
 800568e:	f003 020c 	and.w	r2, r3, #12
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	685b      	ldr	r3, [r3, #4]
 8005696:	009b      	lsls	r3, r3, #2
 8005698:	429a      	cmp	r2, r3
 800569a:	d1eb      	bne.n	8005674 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800569c:	4b27      	ldr	r3, [pc, #156]	@ (800573c <HAL_RCC_ClockConfig+0x1c0>)
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f003 0307 	and.w	r3, r3, #7
 80056a4:	683a      	ldr	r2, [r7, #0]
 80056a6:	429a      	cmp	r2, r3
 80056a8:	d210      	bcs.n	80056cc <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80056aa:	4b24      	ldr	r3, [pc, #144]	@ (800573c <HAL_RCC_ClockConfig+0x1c0>)
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	f023 0207 	bic.w	r2, r3, #7
 80056b2:	4922      	ldr	r1, [pc, #136]	@ (800573c <HAL_RCC_ClockConfig+0x1c0>)
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	4313      	orrs	r3, r2
 80056b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80056ba:	4b20      	ldr	r3, [pc, #128]	@ (800573c <HAL_RCC_ClockConfig+0x1c0>)
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f003 0307 	and.w	r3, r3, #7
 80056c2:	683a      	ldr	r2, [r7, #0]
 80056c4:	429a      	cmp	r2, r3
 80056c6:	d001      	beq.n	80056cc <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80056c8:	2301      	movs	r3, #1
 80056ca:	e032      	b.n	8005732 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f003 0304 	and.w	r3, r3, #4
 80056d4:	2b00      	cmp	r3, #0
 80056d6:	d008      	beq.n	80056ea <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80056d8:	4b19      	ldr	r3, [pc, #100]	@ (8005740 <HAL_RCC_ClockConfig+0x1c4>)
 80056da:	685b      	ldr	r3, [r3, #4]
 80056dc:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	68db      	ldr	r3, [r3, #12]
 80056e4:	4916      	ldr	r1, [pc, #88]	@ (8005740 <HAL_RCC_ClockConfig+0x1c4>)
 80056e6:	4313      	orrs	r3, r2
 80056e8:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	f003 0308 	and.w	r3, r3, #8
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d009      	beq.n	800570a <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80056f6:	4b12      	ldr	r3, [pc, #72]	@ (8005740 <HAL_RCC_ClockConfig+0x1c4>)
 80056f8:	685b      	ldr	r3, [r3, #4]
 80056fa:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	691b      	ldr	r3, [r3, #16]
 8005702:	00db      	lsls	r3, r3, #3
 8005704:	490e      	ldr	r1, [pc, #56]	@ (8005740 <HAL_RCC_ClockConfig+0x1c4>)
 8005706:	4313      	orrs	r3, r2
 8005708:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800570a:	f000 f821 	bl	8005750 <HAL_RCC_GetSysClockFreq>
 800570e:	4602      	mov	r2, r0
 8005710:	4b0b      	ldr	r3, [pc, #44]	@ (8005740 <HAL_RCC_ClockConfig+0x1c4>)
 8005712:	685b      	ldr	r3, [r3, #4]
 8005714:	091b      	lsrs	r3, r3, #4
 8005716:	f003 030f 	and.w	r3, r3, #15
 800571a:	490a      	ldr	r1, [pc, #40]	@ (8005744 <HAL_RCC_ClockConfig+0x1c8>)
 800571c:	5ccb      	ldrb	r3, [r1, r3]
 800571e:	fa22 f303 	lsr.w	r3, r2, r3
 8005722:	4a09      	ldr	r2, [pc, #36]	@ (8005748 <HAL_RCC_ClockConfig+0x1cc>)
 8005724:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8005726:	4b09      	ldr	r3, [pc, #36]	@ (800574c <HAL_RCC_ClockConfig+0x1d0>)
 8005728:	681b      	ldr	r3, [r3, #0]
 800572a:	4618      	mov	r0, r3
 800572c:	f7ff f99a 	bl	8004a64 <HAL_InitTick>

  return HAL_OK;
 8005730:	2300      	movs	r3, #0
}
 8005732:	4618      	mov	r0, r3
 8005734:	3710      	adds	r7, #16
 8005736:	46bd      	mov	sp, r7
 8005738:	bd80      	pop	{r7, pc}
 800573a:	bf00      	nop
 800573c:	40022000 	.word	0x40022000
 8005740:	40021000 	.word	0x40021000
 8005744:	08006b90 	.word	0x08006b90
 8005748:	20000004 	.word	0x20000004
 800574c:	20000008 	.word	0x20000008

08005750 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005750:	b480      	push	{r7}
 8005752:	b087      	sub	sp, #28
 8005754:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8005756:	2300      	movs	r3, #0
 8005758:	60fb      	str	r3, [r7, #12]
 800575a:	2300      	movs	r3, #0
 800575c:	60bb      	str	r3, [r7, #8]
 800575e:	2300      	movs	r3, #0
 8005760:	617b      	str	r3, [r7, #20]
 8005762:	2300      	movs	r3, #0
 8005764:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8005766:	2300      	movs	r3, #0
 8005768:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800576a:	4b1e      	ldr	r3, [pc, #120]	@ (80057e4 <HAL_RCC_GetSysClockFreq+0x94>)
 800576c:	685b      	ldr	r3, [r3, #4]
 800576e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	f003 030c 	and.w	r3, r3, #12
 8005776:	2b04      	cmp	r3, #4
 8005778:	d002      	beq.n	8005780 <HAL_RCC_GetSysClockFreq+0x30>
 800577a:	2b08      	cmp	r3, #8
 800577c:	d003      	beq.n	8005786 <HAL_RCC_GetSysClockFreq+0x36>
 800577e:	e027      	b.n	80057d0 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8005780:	4b19      	ldr	r3, [pc, #100]	@ (80057e8 <HAL_RCC_GetSysClockFreq+0x98>)
 8005782:	613b      	str	r3, [r7, #16]
      break;
 8005784:	e027      	b.n	80057d6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	0c9b      	lsrs	r3, r3, #18
 800578a:	f003 030f 	and.w	r3, r3, #15
 800578e:	4a17      	ldr	r2, [pc, #92]	@ (80057ec <HAL_RCC_GetSysClockFreq+0x9c>)
 8005790:	5cd3      	ldrb	r3, [r2, r3]
 8005792:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800579a:	2b00      	cmp	r3, #0
 800579c:	d010      	beq.n	80057c0 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 800579e:	4b11      	ldr	r3, [pc, #68]	@ (80057e4 <HAL_RCC_GetSysClockFreq+0x94>)
 80057a0:	685b      	ldr	r3, [r3, #4]
 80057a2:	0c5b      	lsrs	r3, r3, #17
 80057a4:	f003 0301 	and.w	r3, r3, #1
 80057a8:	4a11      	ldr	r2, [pc, #68]	@ (80057f0 <HAL_RCC_GetSysClockFreq+0xa0>)
 80057aa:	5cd3      	ldrb	r3, [r2, r3]
 80057ac:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	4a0d      	ldr	r2, [pc, #52]	@ (80057e8 <HAL_RCC_GetSysClockFreq+0x98>)
 80057b2:	fb03 f202 	mul.w	r2, r3, r2
 80057b6:	68bb      	ldr	r3, [r7, #8]
 80057b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80057bc:	617b      	str	r3, [r7, #20]
 80057be:	e004      	b.n	80057ca <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	4a0c      	ldr	r2, [pc, #48]	@ (80057f4 <HAL_RCC_GetSysClockFreq+0xa4>)
 80057c4:	fb02 f303 	mul.w	r3, r2, r3
 80057c8:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80057ca:	697b      	ldr	r3, [r7, #20]
 80057cc:	613b      	str	r3, [r7, #16]
      break;
 80057ce:	e002      	b.n	80057d6 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80057d0:	4b05      	ldr	r3, [pc, #20]	@ (80057e8 <HAL_RCC_GetSysClockFreq+0x98>)
 80057d2:	613b      	str	r3, [r7, #16]
      break;
 80057d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80057d6:	693b      	ldr	r3, [r7, #16]
}
 80057d8:	4618      	mov	r0, r3
 80057da:	371c      	adds	r7, #28
 80057dc:	46bd      	mov	sp, r7
 80057de:	bc80      	pop	{r7}
 80057e0:	4770      	bx	lr
 80057e2:	bf00      	nop
 80057e4:	40021000 	.word	0x40021000
 80057e8:	007a1200 	.word	0x007a1200
 80057ec:	08006ba8 	.word	0x08006ba8
 80057f0:	08006bb8 	.word	0x08006bb8
 80057f4:	003d0900 	.word	0x003d0900

080057f8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80057f8:	b480      	push	{r7}
 80057fa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80057fc:	4b02      	ldr	r3, [pc, #8]	@ (8005808 <HAL_RCC_GetHCLKFreq+0x10>)
 80057fe:	681b      	ldr	r3, [r3, #0]
}
 8005800:	4618      	mov	r0, r3
 8005802:	46bd      	mov	sp, r7
 8005804:	bc80      	pop	{r7}
 8005806:	4770      	bx	lr
 8005808:	20000004 	.word	0x20000004

0800580c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800580c:	b580      	push	{r7, lr}
 800580e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005810:	f7ff fff2 	bl	80057f8 <HAL_RCC_GetHCLKFreq>
 8005814:	4602      	mov	r2, r0
 8005816:	4b05      	ldr	r3, [pc, #20]	@ (800582c <HAL_RCC_GetPCLK1Freq+0x20>)
 8005818:	685b      	ldr	r3, [r3, #4]
 800581a:	0a1b      	lsrs	r3, r3, #8
 800581c:	f003 0307 	and.w	r3, r3, #7
 8005820:	4903      	ldr	r1, [pc, #12]	@ (8005830 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005822:	5ccb      	ldrb	r3, [r1, r3]
 8005824:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005828:	4618      	mov	r0, r3
 800582a:	bd80      	pop	{r7, pc}
 800582c:	40021000 	.word	0x40021000
 8005830:	08006ba0 	.word	0x08006ba0

08005834 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005834:	b580      	push	{r7, lr}
 8005836:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005838:	f7ff ffde 	bl	80057f8 <HAL_RCC_GetHCLKFreq>
 800583c:	4602      	mov	r2, r0
 800583e:	4b05      	ldr	r3, [pc, #20]	@ (8005854 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005840:	685b      	ldr	r3, [r3, #4]
 8005842:	0adb      	lsrs	r3, r3, #11
 8005844:	f003 0307 	and.w	r3, r3, #7
 8005848:	4903      	ldr	r1, [pc, #12]	@ (8005858 <HAL_RCC_GetPCLK2Freq+0x24>)
 800584a:	5ccb      	ldrb	r3, [r1, r3]
 800584c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005850:	4618      	mov	r0, r3
 8005852:	bd80      	pop	{r7, pc}
 8005854:	40021000 	.word	0x40021000
 8005858:	08006ba0 	.word	0x08006ba0

0800585c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800585c:	b480      	push	{r7}
 800585e:	b085      	sub	sp, #20
 8005860:	af00      	add	r7, sp, #0
 8005862:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8005864:	4b0a      	ldr	r3, [pc, #40]	@ (8005890 <RCC_Delay+0x34>)
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	4a0a      	ldr	r2, [pc, #40]	@ (8005894 <RCC_Delay+0x38>)
 800586a:	fba2 2303 	umull	r2, r3, r2, r3
 800586e:	0a5b      	lsrs	r3, r3, #9
 8005870:	687a      	ldr	r2, [r7, #4]
 8005872:	fb02 f303 	mul.w	r3, r2, r3
 8005876:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8005878:	bf00      	nop
  }
  while (Delay --);
 800587a:	68fb      	ldr	r3, [r7, #12]
 800587c:	1e5a      	subs	r2, r3, #1
 800587e:	60fa      	str	r2, [r7, #12]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d1f9      	bne.n	8005878 <RCC_Delay+0x1c>
}
 8005884:	bf00      	nop
 8005886:	bf00      	nop
 8005888:	3714      	adds	r7, #20
 800588a:	46bd      	mov	sp, r7
 800588c:	bc80      	pop	{r7}
 800588e:	4770      	bx	lr
 8005890:	20000004 	.word	0x20000004
 8005894:	10624dd3 	.word	0x10624dd3

08005898 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005898:	b580      	push	{r7, lr}
 800589a:	b082      	sub	sp, #8
 800589c:	af00      	add	r7, sp, #0
 800589e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d101      	bne.n	80058aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80058a6:	2301      	movs	r3, #1
 80058a8:	e042      	b.n	8005930 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80058b0:	b2db      	uxtb	r3, r3
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d106      	bne.n	80058c4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2200      	movs	r2, #0
 80058ba:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80058be:	6878      	ldr	r0, [r7, #4]
 80058c0:	f7fe ff6e 	bl	80047a0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80058c4:	687b      	ldr	r3, [r7, #4]
 80058c6:	2224      	movs	r2, #36	@ 0x24
 80058c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	68da      	ldr	r2, [r3, #12]
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	681b      	ldr	r3, [r3, #0]
 80058d6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80058da:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80058dc:	6878      	ldr	r0, [r7, #4]
 80058de:	f000 f971 	bl	8005bc4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	691a      	ldr	r2, [r3, #16]
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80058f0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	695a      	ldr	r2, [r3, #20]
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005900:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	68da      	ldr	r2, [r3, #12]
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	681b      	ldr	r3, [r3, #0]
 800590c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005910:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	2200      	movs	r2, #0
 8005916:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	2220      	movs	r2, #32
 800591c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2220      	movs	r2, #32
 8005924:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	2200      	movs	r2, #0
 800592c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800592e:	2300      	movs	r3, #0
}
 8005930:	4618      	mov	r0, r3
 8005932:	3708      	adds	r7, #8
 8005934:	46bd      	mov	sp, r7
 8005936:	bd80      	pop	{r7, pc}

08005938 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005938:	b580      	push	{r7, lr}
 800593a:	b08a      	sub	sp, #40	@ 0x28
 800593c:	af02      	add	r7, sp, #8
 800593e:	60f8      	str	r0, [r7, #12]
 8005940:	60b9      	str	r1, [r7, #8]
 8005942:	603b      	str	r3, [r7, #0]
 8005944:	4613      	mov	r3, r2
 8005946:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005948:	2300      	movs	r3, #0
 800594a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005952:	b2db      	uxtb	r3, r3
 8005954:	2b20      	cmp	r3, #32
 8005956:	d175      	bne.n	8005a44 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005958:	68bb      	ldr	r3, [r7, #8]
 800595a:	2b00      	cmp	r3, #0
 800595c:	d002      	beq.n	8005964 <HAL_UART_Transmit+0x2c>
 800595e:	88fb      	ldrh	r3, [r7, #6]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d101      	bne.n	8005968 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005964:	2301      	movs	r3, #1
 8005966:	e06e      	b.n	8005a46 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	2200      	movs	r2, #0
 800596c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	2221      	movs	r2, #33	@ 0x21
 8005972:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005976:	f7ff f8b7 	bl	8004ae8 <HAL_GetTick>
 800597a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	88fa      	ldrh	r2, [r7, #6]
 8005980:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	88fa      	ldrh	r2, [r7, #6]
 8005986:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	689b      	ldr	r3, [r3, #8]
 800598c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005990:	d108      	bne.n	80059a4 <HAL_UART_Transmit+0x6c>
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	691b      	ldr	r3, [r3, #16]
 8005996:	2b00      	cmp	r3, #0
 8005998:	d104      	bne.n	80059a4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800599a:	2300      	movs	r3, #0
 800599c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800599e:	68bb      	ldr	r3, [r7, #8]
 80059a0:	61bb      	str	r3, [r7, #24]
 80059a2:	e003      	b.n	80059ac <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80059a4:	68bb      	ldr	r3, [r7, #8]
 80059a6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80059a8:	2300      	movs	r3, #0
 80059aa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80059ac:	e02e      	b.n	8005a0c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	9300      	str	r3, [sp, #0]
 80059b2:	697b      	ldr	r3, [r7, #20]
 80059b4:	2200      	movs	r2, #0
 80059b6:	2180      	movs	r1, #128	@ 0x80
 80059b8:	68f8      	ldr	r0, [r7, #12]
 80059ba:	f000 f848 	bl	8005a4e <UART_WaitOnFlagUntilTimeout>
 80059be:	4603      	mov	r3, r0
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d005      	beq.n	80059d0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	2220      	movs	r2, #32
 80059c8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 80059cc:	2303      	movs	r3, #3
 80059ce:	e03a      	b.n	8005a46 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80059d0:	69fb      	ldr	r3, [r7, #28]
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d10b      	bne.n	80059ee <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80059d6:	69bb      	ldr	r3, [r7, #24]
 80059d8:	881b      	ldrh	r3, [r3, #0]
 80059da:	461a      	mov	r2, r3
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80059e4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80059e6:	69bb      	ldr	r3, [r7, #24]
 80059e8:	3302      	adds	r3, #2
 80059ea:	61bb      	str	r3, [r7, #24]
 80059ec:	e007      	b.n	80059fe <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80059ee:	69fb      	ldr	r3, [r7, #28]
 80059f0:	781a      	ldrb	r2, [r3, #0]
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80059f8:	69fb      	ldr	r3, [r7, #28]
 80059fa:	3301      	adds	r3, #1
 80059fc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005a02:	b29b      	uxth	r3, r3
 8005a04:	3b01      	subs	r3, #1
 8005a06:	b29a      	uxth	r2, r3
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005a10:	b29b      	uxth	r3, r3
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d1cb      	bne.n	80059ae <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005a16:	683b      	ldr	r3, [r7, #0]
 8005a18:	9300      	str	r3, [sp, #0]
 8005a1a:	697b      	ldr	r3, [r7, #20]
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	2140      	movs	r1, #64	@ 0x40
 8005a20:	68f8      	ldr	r0, [r7, #12]
 8005a22:	f000 f814 	bl	8005a4e <UART_WaitOnFlagUntilTimeout>
 8005a26:	4603      	mov	r3, r0
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d005      	beq.n	8005a38 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	2220      	movs	r2, #32
 8005a30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005a34:	2303      	movs	r3, #3
 8005a36:	e006      	b.n	8005a46 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	2220      	movs	r2, #32
 8005a3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005a40:	2300      	movs	r3, #0
 8005a42:	e000      	b.n	8005a46 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005a44:	2302      	movs	r3, #2
  }
}
 8005a46:	4618      	mov	r0, r3
 8005a48:	3720      	adds	r7, #32
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	bd80      	pop	{r7, pc}

08005a4e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005a4e:	b580      	push	{r7, lr}
 8005a50:	b086      	sub	sp, #24
 8005a52:	af00      	add	r7, sp, #0
 8005a54:	60f8      	str	r0, [r7, #12]
 8005a56:	60b9      	str	r1, [r7, #8]
 8005a58:	603b      	str	r3, [r7, #0]
 8005a5a:	4613      	mov	r3, r2
 8005a5c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a5e:	e03b      	b.n	8005ad8 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a60:	6a3b      	ldr	r3, [r7, #32]
 8005a62:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8005a66:	d037      	beq.n	8005ad8 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a68:	f7ff f83e 	bl	8004ae8 <HAL_GetTick>
 8005a6c:	4602      	mov	r2, r0
 8005a6e:	683b      	ldr	r3, [r7, #0]
 8005a70:	1ad3      	subs	r3, r2, r3
 8005a72:	6a3a      	ldr	r2, [r7, #32]
 8005a74:	429a      	cmp	r2, r3
 8005a76:	d302      	bcc.n	8005a7e <UART_WaitOnFlagUntilTimeout+0x30>
 8005a78:	6a3b      	ldr	r3, [r7, #32]
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d101      	bne.n	8005a82 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005a7e:	2303      	movs	r3, #3
 8005a80:	e03a      	b.n	8005af8 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005a82:	68fb      	ldr	r3, [r7, #12]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	68db      	ldr	r3, [r3, #12]
 8005a88:	f003 0304 	and.w	r3, r3, #4
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	d023      	beq.n	8005ad8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005a90:	68bb      	ldr	r3, [r7, #8]
 8005a92:	2b80      	cmp	r3, #128	@ 0x80
 8005a94:	d020      	beq.n	8005ad8 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005a96:	68bb      	ldr	r3, [r7, #8]
 8005a98:	2b40      	cmp	r3, #64	@ 0x40
 8005a9a:	d01d      	beq.n	8005ad8 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	f003 0308 	and.w	r3, r3, #8
 8005aa6:	2b08      	cmp	r3, #8
 8005aa8:	d116      	bne.n	8005ad8 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005aaa:	2300      	movs	r3, #0
 8005aac:	617b      	str	r3, [r7, #20]
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	617b      	str	r3, [r7, #20]
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	685b      	ldr	r3, [r3, #4]
 8005abc:	617b      	str	r3, [r7, #20]
 8005abe:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005ac0:	68f8      	ldr	r0, [r7, #12]
 8005ac2:	f000 f81d 	bl	8005b00 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	2208      	movs	r2, #8
 8005aca:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005acc:	68fb      	ldr	r3, [r7, #12]
 8005ace:	2200      	movs	r2, #0
 8005ad0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005ad4:	2301      	movs	r3, #1
 8005ad6:	e00f      	b.n	8005af8 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	681a      	ldr	r2, [r3, #0]
 8005ade:	68bb      	ldr	r3, [r7, #8]
 8005ae0:	4013      	ands	r3, r2
 8005ae2:	68ba      	ldr	r2, [r7, #8]
 8005ae4:	429a      	cmp	r2, r3
 8005ae6:	bf0c      	ite	eq
 8005ae8:	2301      	moveq	r3, #1
 8005aea:	2300      	movne	r3, #0
 8005aec:	b2db      	uxtb	r3, r3
 8005aee:	461a      	mov	r2, r3
 8005af0:	79fb      	ldrb	r3, [r7, #7]
 8005af2:	429a      	cmp	r2, r3
 8005af4:	d0b4      	beq.n	8005a60 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005af6:	2300      	movs	r3, #0
}
 8005af8:	4618      	mov	r0, r3
 8005afa:	3718      	adds	r7, #24
 8005afc:	46bd      	mov	sp, r7
 8005afe:	bd80      	pop	{r7, pc}

08005b00 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005b00:	b480      	push	{r7}
 8005b02:	b095      	sub	sp, #84	@ 0x54
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	330c      	adds	r3, #12
 8005b0e:	637b      	str	r3, [r7, #52]	@ 0x34
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b12:	e853 3f00 	ldrex	r3, [r3]
 8005b16:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005b18:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b1a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005b1e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	681b      	ldr	r3, [r3, #0]
 8005b24:	330c      	adds	r3, #12
 8005b26:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005b28:	643a      	str	r2, [r7, #64]	@ 0x40
 8005b2a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b2c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005b2e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005b30:	e841 2300 	strex	r3, r2, [r1]
 8005b34:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005b36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d1e5      	bne.n	8005b08 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	3314      	adds	r3, #20
 8005b42:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b44:	6a3b      	ldr	r3, [r7, #32]
 8005b46:	e853 3f00 	ldrex	r3, [r3]
 8005b4a:	61fb      	str	r3, [r7, #28]
   return(result);
 8005b4c:	69fb      	ldr	r3, [r7, #28]
 8005b4e:	f023 0301 	bic.w	r3, r3, #1
 8005b52:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	681b      	ldr	r3, [r3, #0]
 8005b58:	3314      	adds	r3, #20
 8005b5a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005b5c:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005b5e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b60:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005b62:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005b64:	e841 2300 	strex	r3, r2, [r1]
 8005b68:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005b6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d1e5      	bne.n	8005b3c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005b74:	2b01      	cmp	r3, #1
 8005b76:	d119      	bne.n	8005bac <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	330c      	adds	r3, #12
 8005b7e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	e853 3f00 	ldrex	r3, [r3]
 8005b86:	60bb      	str	r3, [r7, #8]
   return(result);
 8005b88:	68bb      	ldr	r3, [r7, #8]
 8005b8a:	f023 0310 	bic.w	r3, r3, #16
 8005b8e:	647b      	str	r3, [r7, #68]	@ 0x44
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	330c      	adds	r3, #12
 8005b96:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005b98:	61ba      	str	r2, [r7, #24]
 8005b9a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005b9c:	6979      	ldr	r1, [r7, #20]
 8005b9e:	69ba      	ldr	r2, [r7, #24]
 8005ba0:	e841 2300 	strex	r3, r2, [r1]
 8005ba4:	613b      	str	r3, [r7, #16]
   return(result);
 8005ba6:	693b      	ldr	r3, [r7, #16]
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d1e5      	bne.n	8005b78 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2220      	movs	r2, #32
 8005bb0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005bba:	bf00      	nop
 8005bbc:	3754      	adds	r7, #84	@ 0x54
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	bc80      	pop	{r7}
 8005bc2:	4770      	bx	lr

08005bc4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005bc4:	b580      	push	{r7, lr}
 8005bc6:	b084      	sub	sp, #16
 8005bc8:	af00      	add	r7, sp, #0
 8005bca:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	691b      	ldr	r3, [r3, #16]
 8005bd2:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	68da      	ldr	r2, [r3, #12]
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	430a      	orrs	r2, r1
 8005be0:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	689a      	ldr	r2, [r3, #8]
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	691b      	ldr	r3, [r3, #16]
 8005bea:	431a      	orrs	r2, r3
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	695b      	ldr	r3, [r3, #20]
 8005bf0:	4313      	orrs	r3, r2
 8005bf2:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	68db      	ldr	r3, [r3, #12]
 8005bfa:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 8005bfe:	f023 030c 	bic.w	r3, r3, #12
 8005c02:	687a      	ldr	r2, [r7, #4]
 8005c04:	6812      	ldr	r2, [r2, #0]
 8005c06:	68b9      	ldr	r1, [r7, #8]
 8005c08:	430b      	orrs	r3, r1
 8005c0a:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	681b      	ldr	r3, [r3, #0]
 8005c10:	695b      	ldr	r3, [r3, #20]
 8005c12:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	699a      	ldr	r2, [r3, #24]
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	430a      	orrs	r2, r1
 8005c20:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	4a2c      	ldr	r2, [pc, #176]	@ (8005cd8 <UART_SetConfig+0x114>)
 8005c28:	4293      	cmp	r3, r2
 8005c2a:	d103      	bne.n	8005c34 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8005c2c:	f7ff fe02 	bl	8005834 <HAL_RCC_GetPCLK2Freq>
 8005c30:	60f8      	str	r0, [r7, #12]
 8005c32:	e002      	b.n	8005c3a <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8005c34:	f7ff fdea 	bl	800580c <HAL_RCC_GetPCLK1Freq>
 8005c38:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005c3a:	68fa      	ldr	r2, [r7, #12]
 8005c3c:	4613      	mov	r3, r2
 8005c3e:	009b      	lsls	r3, r3, #2
 8005c40:	4413      	add	r3, r2
 8005c42:	009a      	lsls	r2, r3, #2
 8005c44:	441a      	add	r2, r3
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	685b      	ldr	r3, [r3, #4]
 8005c4a:	009b      	lsls	r3, r3, #2
 8005c4c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c50:	4a22      	ldr	r2, [pc, #136]	@ (8005cdc <UART_SetConfig+0x118>)
 8005c52:	fba2 2303 	umull	r2, r3, r2, r3
 8005c56:	095b      	lsrs	r3, r3, #5
 8005c58:	0119      	lsls	r1, r3, #4
 8005c5a:	68fa      	ldr	r2, [r7, #12]
 8005c5c:	4613      	mov	r3, r2
 8005c5e:	009b      	lsls	r3, r3, #2
 8005c60:	4413      	add	r3, r2
 8005c62:	009a      	lsls	r2, r3, #2
 8005c64:	441a      	add	r2, r3
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	685b      	ldr	r3, [r3, #4]
 8005c6a:	009b      	lsls	r3, r3, #2
 8005c6c:	fbb2 f2f3 	udiv	r2, r2, r3
 8005c70:	4b1a      	ldr	r3, [pc, #104]	@ (8005cdc <UART_SetConfig+0x118>)
 8005c72:	fba3 0302 	umull	r0, r3, r3, r2
 8005c76:	095b      	lsrs	r3, r3, #5
 8005c78:	2064      	movs	r0, #100	@ 0x64
 8005c7a:	fb00 f303 	mul.w	r3, r0, r3
 8005c7e:	1ad3      	subs	r3, r2, r3
 8005c80:	011b      	lsls	r3, r3, #4
 8005c82:	3332      	adds	r3, #50	@ 0x32
 8005c84:	4a15      	ldr	r2, [pc, #84]	@ (8005cdc <UART_SetConfig+0x118>)
 8005c86:	fba2 2303 	umull	r2, r3, r2, r3
 8005c8a:	095b      	lsrs	r3, r3, #5
 8005c8c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005c90:	4419      	add	r1, r3
 8005c92:	68fa      	ldr	r2, [r7, #12]
 8005c94:	4613      	mov	r3, r2
 8005c96:	009b      	lsls	r3, r3, #2
 8005c98:	4413      	add	r3, r2
 8005c9a:	009a      	lsls	r2, r3, #2
 8005c9c:	441a      	add	r2, r3
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	685b      	ldr	r3, [r3, #4]
 8005ca2:	009b      	lsls	r3, r3, #2
 8005ca4:	fbb2 f2f3 	udiv	r2, r2, r3
 8005ca8:	4b0c      	ldr	r3, [pc, #48]	@ (8005cdc <UART_SetConfig+0x118>)
 8005caa:	fba3 0302 	umull	r0, r3, r3, r2
 8005cae:	095b      	lsrs	r3, r3, #5
 8005cb0:	2064      	movs	r0, #100	@ 0x64
 8005cb2:	fb00 f303 	mul.w	r3, r0, r3
 8005cb6:	1ad3      	subs	r3, r2, r3
 8005cb8:	011b      	lsls	r3, r3, #4
 8005cba:	3332      	adds	r3, #50	@ 0x32
 8005cbc:	4a07      	ldr	r2, [pc, #28]	@ (8005cdc <UART_SetConfig+0x118>)
 8005cbe:	fba2 2303 	umull	r2, r3, r2, r3
 8005cc2:	095b      	lsrs	r3, r3, #5
 8005cc4:	f003 020f 	and.w	r2, r3, #15
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	440a      	add	r2, r1
 8005cce:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8005cd0:	bf00      	nop
 8005cd2:	3710      	adds	r7, #16
 8005cd4:	46bd      	mov	sp, r7
 8005cd6:	bd80      	pop	{r7, pc}
 8005cd8:	40013800 	.word	0x40013800
 8005cdc:	51eb851f 	.word	0x51eb851f

08005ce0 <std>:
 8005ce0:	2300      	movs	r3, #0
 8005ce2:	b510      	push	{r4, lr}
 8005ce4:	4604      	mov	r4, r0
 8005ce6:	e9c0 3300 	strd	r3, r3, [r0]
 8005cea:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8005cee:	6083      	str	r3, [r0, #8]
 8005cf0:	8181      	strh	r1, [r0, #12]
 8005cf2:	6643      	str	r3, [r0, #100]	@ 0x64
 8005cf4:	81c2      	strh	r2, [r0, #14]
 8005cf6:	6183      	str	r3, [r0, #24]
 8005cf8:	4619      	mov	r1, r3
 8005cfa:	2208      	movs	r2, #8
 8005cfc:	305c      	adds	r0, #92	@ 0x5c
 8005cfe:	f000 f906 	bl	8005f0e <memset>
 8005d02:	4b0d      	ldr	r3, [pc, #52]	@ (8005d38 <std+0x58>)
 8005d04:	6224      	str	r4, [r4, #32]
 8005d06:	6263      	str	r3, [r4, #36]	@ 0x24
 8005d08:	4b0c      	ldr	r3, [pc, #48]	@ (8005d3c <std+0x5c>)
 8005d0a:	62a3      	str	r3, [r4, #40]	@ 0x28
 8005d0c:	4b0c      	ldr	r3, [pc, #48]	@ (8005d40 <std+0x60>)
 8005d0e:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8005d10:	4b0c      	ldr	r3, [pc, #48]	@ (8005d44 <std+0x64>)
 8005d12:	6323      	str	r3, [r4, #48]	@ 0x30
 8005d14:	4b0c      	ldr	r3, [pc, #48]	@ (8005d48 <std+0x68>)
 8005d16:	429c      	cmp	r4, r3
 8005d18:	d006      	beq.n	8005d28 <std+0x48>
 8005d1a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8005d1e:	4294      	cmp	r4, r2
 8005d20:	d002      	beq.n	8005d28 <std+0x48>
 8005d22:	33d0      	adds	r3, #208	@ 0xd0
 8005d24:	429c      	cmp	r4, r3
 8005d26:	d105      	bne.n	8005d34 <std+0x54>
 8005d28:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8005d2c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005d30:	f000 b966 	b.w	8006000 <__retarget_lock_init_recursive>
 8005d34:	bd10      	pop	{r4, pc}
 8005d36:	bf00      	nop
 8005d38:	08005e89 	.word	0x08005e89
 8005d3c:	08005eab 	.word	0x08005eab
 8005d40:	08005ee3 	.word	0x08005ee3
 8005d44:	08005f07 	.word	0x08005f07
 8005d48:	200000d8 	.word	0x200000d8

08005d4c <stdio_exit_handler>:
 8005d4c:	4a02      	ldr	r2, [pc, #8]	@ (8005d58 <stdio_exit_handler+0xc>)
 8005d4e:	4903      	ldr	r1, [pc, #12]	@ (8005d5c <stdio_exit_handler+0x10>)
 8005d50:	4803      	ldr	r0, [pc, #12]	@ (8005d60 <stdio_exit_handler+0x14>)
 8005d52:	f000 b869 	b.w	8005e28 <_fwalk_sglue>
 8005d56:	bf00      	nop
 8005d58:	20000010 	.word	0x20000010
 8005d5c:	08006899 	.word	0x08006899
 8005d60:	20000020 	.word	0x20000020

08005d64 <cleanup_stdio>:
 8005d64:	6841      	ldr	r1, [r0, #4]
 8005d66:	4b0c      	ldr	r3, [pc, #48]	@ (8005d98 <cleanup_stdio+0x34>)
 8005d68:	b510      	push	{r4, lr}
 8005d6a:	4299      	cmp	r1, r3
 8005d6c:	4604      	mov	r4, r0
 8005d6e:	d001      	beq.n	8005d74 <cleanup_stdio+0x10>
 8005d70:	f000 fd92 	bl	8006898 <_fflush_r>
 8005d74:	68a1      	ldr	r1, [r4, #8]
 8005d76:	4b09      	ldr	r3, [pc, #36]	@ (8005d9c <cleanup_stdio+0x38>)
 8005d78:	4299      	cmp	r1, r3
 8005d7a:	d002      	beq.n	8005d82 <cleanup_stdio+0x1e>
 8005d7c:	4620      	mov	r0, r4
 8005d7e:	f000 fd8b 	bl	8006898 <_fflush_r>
 8005d82:	68e1      	ldr	r1, [r4, #12]
 8005d84:	4b06      	ldr	r3, [pc, #24]	@ (8005da0 <cleanup_stdio+0x3c>)
 8005d86:	4299      	cmp	r1, r3
 8005d88:	d004      	beq.n	8005d94 <cleanup_stdio+0x30>
 8005d8a:	4620      	mov	r0, r4
 8005d8c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005d90:	f000 bd82 	b.w	8006898 <_fflush_r>
 8005d94:	bd10      	pop	{r4, pc}
 8005d96:	bf00      	nop
 8005d98:	200000d8 	.word	0x200000d8
 8005d9c:	20000140 	.word	0x20000140
 8005da0:	200001a8 	.word	0x200001a8

08005da4 <global_stdio_init.part.0>:
 8005da4:	b510      	push	{r4, lr}
 8005da6:	4b0b      	ldr	r3, [pc, #44]	@ (8005dd4 <global_stdio_init.part.0+0x30>)
 8005da8:	4c0b      	ldr	r4, [pc, #44]	@ (8005dd8 <global_stdio_init.part.0+0x34>)
 8005daa:	4a0c      	ldr	r2, [pc, #48]	@ (8005ddc <global_stdio_init.part.0+0x38>)
 8005dac:	4620      	mov	r0, r4
 8005dae:	601a      	str	r2, [r3, #0]
 8005db0:	2104      	movs	r1, #4
 8005db2:	2200      	movs	r2, #0
 8005db4:	f7ff ff94 	bl	8005ce0 <std>
 8005db8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8005dbc:	2201      	movs	r2, #1
 8005dbe:	2109      	movs	r1, #9
 8005dc0:	f7ff ff8e 	bl	8005ce0 <std>
 8005dc4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8005dc8:	2202      	movs	r2, #2
 8005dca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005dce:	2112      	movs	r1, #18
 8005dd0:	f7ff bf86 	b.w	8005ce0 <std>
 8005dd4:	20000210 	.word	0x20000210
 8005dd8:	200000d8 	.word	0x200000d8
 8005ddc:	08005d4d 	.word	0x08005d4d

08005de0 <__sfp_lock_acquire>:
 8005de0:	4801      	ldr	r0, [pc, #4]	@ (8005de8 <__sfp_lock_acquire+0x8>)
 8005de2:	f000 b90e 	b.w	8006002 <__retarget_lock_acquire_recursive>
 8005de6:	bf00      	nop
 8005de8:	20000219 	.word	0x20000219

08005dec <__sfp_lock_release>:
 8005dec:	4801      	ldr	r0, [pc, #4]	@ (8005df4 <__sfp_lock_release+0x8>)
 8005dee:	f000 b909 	b.w	8006004 <__retarget_lock_release_recursive>
 8005df2:	bf00      	nop
 8005df4:	20000219 	.word	0x20000219

08005df8 <__sinit>:
 8005df8:	b510      	push	{r4, lr}
 8005dfa:	4604      	mov	r4, r0
 8005dfc:	f7ff fff0 	bl	8005de0 <__sfp_lock_acquire>
 8005e00:	6a23      	ldr	r3, [r4, #32]
 8005e02:	b11b      	cbz	r3, 8005e0c <__sinit+0x14>
 8005e04:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005e08:	f7ff bff0 	b.w	8005dec <__sfp_lock_release>
 8005e0c:	4b04      	ldr	r3, [pc, #16]	@ (8005e20 <__sinit+0x28>)
 8005e0e:	6223      	str	r3, [r4, #32]
 8005e10:	4b04      	ldr	r3, [pc, #16]	@ (8005e24 <__sinit+0x2c>)
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d1f5      	bne.n	8005e04 <__sinit+0xc>
 8005e18:	f7ff ffc4 	bl	8005da4 <global_stdio_init.part.0>
 8005e1c:	e7f2      	b.n	8005e04 <__sinit+0xc>
 8005e1e:	bf00      	nop
 8005e20:	08005d65 	.word	0x08005d65
 8005e24:	20000210 	.word	0x20000210

08005e28 <_fwalk_sglue>:
 8005e28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005e2c:	4607      	mov	r7, r0
 8005e2e:	4688      	mov	r8, r1
 8005e30:	4614      	mov	r4, r2
 8005e32:	2600      	movs	r6, #0
 8005e34:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005e38:	f1b9 0901 	subs.w	r9, r9, #1
 8005e3c:	d505      	bpl.n	8005e4a <_fwalk_sglue+0x22>
 8005e3e:	6824      	ldr	r4, [r4, #0]
 8005e40:	2c00      	cmp	r4, #0
 8005e42:	d1f7      	bne.n	8005e34 <_fwalk_sglue+0xc>
 8005e44:	4630      	mov	r0, r6
 8005e46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005e4a:	89ab      	ldrh	r3, [r5, #12]
 8005e4c:	2b01      	cmp	r3, #1
 8005e4e:	d907      	bls.n	8005e60 <_fwalk_sglue+0x38>
 8005e50:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005e54:	3301      	adds	r3, #1
 8005e56:	d003      	beq.n	8005e60 <_fwalk_sglue+0x38>
 8005e58:	4629      	mov	r1, r5
 8005e5a:	4638      	mov	r0, r7
 8005e5c:	47c0      	blx	r8
 8005e5e:	4306      	orrs	r6, r0
 8005e60:	3568      	adds	r5, #104	@ 0x68
 8005e62:	e7e9      	b.n	8005e38 <_fwalk_sglue+0x10>

08005e64 <iprintf>:
 8005e64:	b40f      	push	{r0, r1, r2, r3}
 8005e66:	b507      	push	{r0, r1, r2, lr}
 8005e68:	4906      	ldr	r1, [pc, #24]	@ (8005e84 <iprintf+0x20>)
 8005e6a:	ab04      	add	r3, sp, #16
 8005e6c:	6808      	ldr	r0, [r1, #0]
 8005e6e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005e72:	6881      	ldr	r1, [r0, #8]
 8005e74:	9301      	str	r3, [sp, #4]
 8005e76:	f000 f9e5 	bl	8006244 <_vfiprintf_r>
 8005e7a:	b003      	add	sp, #12
 8005e7c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005e80:	b004      	add	sp, #16
 8005e82:	4770      	bx	lr
 8005e84:	2000001c 	.word	0x2000001c

08005e88 <__sread>:
 8005e88:	b510      	push	{r4, lr}
 8005e8a:	460c      	mov	r4, r1
 8005e8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005e90:	f000 f868 	bl	8005f64 <_read_r>
 8005e94:	2800      	cmp	r0, #0
 8005e96:	bfab      	itete	ge
 8005e98:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005e9a:	89a3      	ldrhlt	r3, [r4, #12]
 8005e9c:	181b      	addge	r3, r3, r0
 8005e9e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8005ea2:	bfac      	ite	ge
 8005ea4:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005ea6:	81a3      	strhlt	r3, [r4, #12]
 8005ea8:	bd10      	pop	{r4, pc}

08005eaa <__swrite>:
 8005eaa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005eae:	461f      	mov	r7, r3
 8005eb0:	898b      	ldrh	r3, [r1, #12]
 8005eb2:	4605      	mov	r5, r0
 8005eb4:	05db      	lsls	r3, r3, #23
 8005eb6:	460c      	mov	r4, r1
 8005eb8:	4616      	mov	r6, r2
 8005eba:	d505      	bpl.n	8005ec8 <__swrite+0x1e>
 8005ebc:	2302      	movs	r3, #2
 8005ebe:	2200      	movs	r2, #0
 8005ec0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005ec4:	f000 f83c 	bl	8005f40 <_lseek_r>
 8005ec8:	89a3      	ldrh	r3, [r4, #12]
 8005eca:	4632      	mov	r2, r6
 8005ecc:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005ed0:	81a3      	strh	r3, [r4, #12]
 8005ed2:	4628      	mov	r0, r5
 8005ed4:	463b      	mov	r3, r7
 8005ed6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005eda:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005ede:	f000 b853 	b.w	8005f88 <_write_r>

08005ee2 <__sseek>:
 8005ee2:	b510      	push	{r4, lr}
 8005ee4:	460c      	mov	r4, r1
 8005ee6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005eea:	f000 f829 	bl	8005f40 <_lseek_r>
 8005eee:	1c43      	adds	r3, r0, #1
 8005ef0:	89a3      	ldrh	r3, [r4, #12]
 8005ef2:	bf15      	itete	ne
 8005ef4:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005ef6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005efa:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8005efe:	81a3      	strheq	r3, [r4, #12]
 8005f00:	bf18      	it	ne
 8005f02:	81a3      	strhne	r3, [r4, #12]
 8005f04:	bd10      	pop	{r4, pc}

08005f06 <__sclose>:
 8005f06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f0a:	f000 b809 	b.w	8005f20 <_close_r>

08005f0e <memset>:
 8005f0e:	4603      	mov	r3, r0
 8005f10:	4402      	add	r2, r0
 8005f12:	4293      	cmp	r3, r2
 8005f14:	d100      	bne.n	8005f18 <memset+0xa>
 8005f16:	4770      	bx	lr
 8005f18:	f803 1b01 	strb.w	r1, [r3], #1
 8005f1c:	e7f9      	b.n	8005f12 <memset+0x4>
	...

08005f20 <_close_r>:
 8005f20:	b538      	push	{r3, r4, r5, lr}
 8005f22:	2300      	movs	r3, #0
 8005f24:	4d05      	ldr	r5, [pc, #20]	@ (8005f3c <_close_r+0x1c>)
 8005f26:	4604      	mov	r4, r0
 8005f28:	4608      	mov	r0, r1
 8005f2a:	602b      	str	r3, [r5, #0]
 8005f2c:	f7fe fce9 	bl	8004902 <_close>
 8005f30:	1c43      	adds	r3, r0, #1
 8005f32:	d102      	bne.n	8005f3a <_close_r+0x1a>
 8005f34:	682b      	ldr	r3, [r5, #0]
 8005f36:	b103      	cbz	r3, 8005f3a <_close_r+0x1a>
 8005f38:	6023      	str	r3, [r4, #0]
 8005f3a:	bd38      	pop	{r3, r4, r5, pc}
 8005f3c:	20000214 	.word	0x20000214

08005f40 <_lseek_r>:
 8005f40:	b538      	push	{r3, r4, r5, lr}
 8005f42:	4604      	mov	r4, r0
 8005f44:	4608      	mov	r0, r1
 8005f46:	4611      	mov	r1, r2
 8005f48:	2200      	movs	r2, #0
 8005f4a:	4d05      	ldr	r5, [pc, #20]	@ (8005f60 <_lseek_r+0x20>)
 8005f4c:	602a      	str	r2, [r5, #0]
 8005f4e:	461a      	mov	r2, r3
 8005f50:	f7fe fcfb 	bl	800494a <_lseek>
 8005f54:	1c43      	adds	r3, r0, #1
 8005f56:	d102      	bne.n	8005f5e <_lseek_r+0x1e>
 8005f58:	682b      	ldr	r3, [r5, #0]
 8005f5a:	b103      	cbz	r3, 8005f5e <_lseek_r+0x1e>
 8005f5c:	6023      	str	r3, [r4, #0]
 8005f5e:	bd38      	pop	{r3, r4, r5, pc}
 8005f60:	20000214 	.word	0x20000214

08005f64 <_read_r>:
 8005f64:	b538      	push	{r3, r4, r5, lr}
 8005f66:	4604      	mov	r4, r0
 8005f68:	4608      	mov	r0, r1
 8005f6a:	4611      	mov	r1, r2
 8005f6c:	2200      	movs	r2, #0
 8005f6e:	4d05      	ldr	r5, [pc, #20]	@ (8005f84 <_read_r+0x20>)
 8005f70:	602a      	str	r2, [r5, #0]
 8005f72:	461a      	mov	r2, r3
 8005f74:	f7fe fc8c 	bl	8004890 <_read>
 8005f78:	1c43      	adds	r3, r0, #1
 8005f7a:	d102      	bne.n	8005f82 <_read_r+0x1e>
 8005f7c:	682b      	ldr	r3, [r5, #0]
 8005f7e:	b103      	cbz	r3, 8005f82 <_read_r+0x1e>
 8005f80:	6023      	str	r3, [r4, #0]
 8005f82:	bd38      	pop	{r3, r4, r5, pc}
 8005f84:	20000214 	.word	0x20000214

08005f88 <_write_r>:
 8005f88:	b538      	push	{r3, r4, r5, lr}
 8005f8a:	4604      	mov	r4, r0
 8005f8c:	4608      	mov	r0, r1
 8005f8e:	4611      	mov	r1, r2
 8005f90:	2200      	movs	r2, #0
 8005f92:	4d05      	ldr	r5, [pc, #20]	@ (8005fa8 <_write_r+0x20>)
 8005f94:	602a      	str	r2, [r5, #0]
 8005f96:	461a      	mov	r2, r3
 8005f98:	f7fe fc97 	bl	80048ca <_write>
 8005f9c:	1c43      	adds	r3, r0, #1
 8005f9e:	d102      	bne.n	8005fa6 <_write_r+0x1e>
 8005fa0:	682b      	ldr	r3, [r5, #0]
 8005fa2:	b103      	cbz	r3, 8005fa6 <_write_r+0x1e>
 8005fa4:	6023      	str	r3, [r4, #0]
 8005fa6:	bd38      	pop	{r3, r4, r5, pc}
 8005fa8:	20000214 	.word	0x20000214

08005fac <__errno>:
 8005fac:	4b01      	ldr	r3, [pc, #4]	@ (8005fb4 <__errno+0x8>)
 8005fae:	6818      	ldr	r0, [r3, #0]
 8005fb0:	4770      	bx	lr
 8005fb2:	bf00      	nop
 8005fb4:	2000001c 	.word	0x2000001c

08005fb8 <__libc_init_array>:
 8005fb8:	b570      	push	{r4, r5, r6, lr}
 8005fba:	2600      	movs	r6, #0
 8005fbc:	4d0c      	ldr	r5, [pc, #48]	@ (8005ff0 <__libc_init_array+0x38>)
 8005fbe:	4c0d      	ldr	r4, [pc, #52]	@ (8005ff4 <__libc_init_array+0x3c>)
 8005fc0:	1b64      	subs	r4, r4, r5
 8005fc2:	10a4      	asrs	r4, r4, #2
 8005fc4:	42a6      	cmp	r6, r4
 8005fc6:	d109      	bne.n	8005fdc <__libc_init_array+0x24>
 8005fc8:	f000 fdc4 	bl	8006b54 <_init>
 8005fcc:	2600      	movs	r6, #0
 8005fce:	4d0a      	ldr	r5, [pc, #40]	@ (8005ff8 <__libc_init_array+0x40>)
 8005fd0:	4c0a      	ldr	r4, [pc, #40]	@ (8005ffc <__libc_init_array+0x44>)
 8005fd2:	1b64      	subs	r4, r4, r5
 8005fd4:	10a4      	asrs	r4, r4, #2
 8005fd6:	42a6      	cmp	r6, r4
 8005fd8:	d105      	bne.n	8005fe6 <__libc_init_array+0x2e>
 8005fda:	bd70      	pop	{r4, r5, r6, pc}
 8005fdc:	f855 3b04 	ldr.w	r3, [r5], #4
 8005fe0:	4798      	blx	r3
 8005fe2:	3601      	adds	r6, #1
 8005fe4:	e7ee      	b.n	8005fc4 <__libc_init_array+0xc>
 8005fe6:	f855 3b04 	ldr.w	r3, [r5], #4
 8005fea:	4798      	blx	r3
 8005fec:	3601      	adds	r6, #1
 8005fee:	e7f2      	b.n	8005fd6 <__libc_init_array+0x1e>
 8005ff0:	08006bf0 	.word	0x08006bf0
 8005ff4:	08006bf0 	.word	0x08006bf0
 8005ff8:	08006bf0 	.word	0x08006bf0
 8005ffc:	08006bf4 	.word	0x08006bf4

08006000 <__retarget_lock_init_recursive>:
 8006000:	4770      	bx	lr

08006002 <__retarget_lock_acquire_recursive>:
 8006002:	4770      	bx	lr

08006004 <__retarget_lock_release_recursive>:
 8006004:	4770      	bx	lr
	...

08006008 <_free_r>:
 8006008:	b538      	push	{r3, r4, r5, lr}
 800600a:	4605      	mov	r5, r0
 800600c:	2900      	cmp	r1, #0
 800600e:	d040      	beq.n	8006092 <_free_r+0x8a>
 8006010:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006014:	1f0c      	subs	r4, r1, #4
 8006016:	2b00      	cmp	r3, #0
 8006018:	bfb8      	it	lt
 800601a:	18e4      	addlt	r4, r4, r3
 800601c:	f000 f8de 	bl	80061dc <__malloc_lock>
 8006020:	4a1c      	ldr	r2, [pc, #112]	@ (8006094 <_free_r+0x8c>)
 8006022:	6813      	ldr	r3, [r2, #0]
 8006024:	b933      	cbnz	r3, 8006034 <_free_r+0x2c>
 8006026:	6063      	str	r3, [r4, #4]
 8006028:	6014      	str	r4, [r2, #0]
 800602a:	4628      	mov	r0, r5
 800602c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006030:	f000 b8da 	b.w	80061e8 <__malloc_unlock>
 8006034:	42a3      	cmp	r3, r4
 8006036:	d908      	bls.n	800604a <_free_r+0x42>
 8006038:	6820      	ldr	r0, [r4, #0]
 800603a:	1821      	adds	r1, r4, r0
 800603c:	428b      	cmp	r3, r1
 800603e:	bf01      	itttt	eq
 8006040:	6819      	ldreq	r1, [r3, #0]
 8006042:	685b      	ldreq	r3, [r3, #4]
 8006044:	1809      	addeq	r1, r1, r0
 8006046:	6021      	streq	r1, [r4, #0]
 8006048:	e7ed      	b.n	8006026 <_free_r+0x1e>
 800604a:	461a      	mov	r2, r3
 800604c:	685b      	ldr	r3, [r3, #4]
 800604e:	b10b      	cbz	r3, 8006054 <_free_r+0x4c>
 8006050:	42a3      	cmp	r3, r4
 8006052:	d9fa      	bls.n	800604a <_free_r+0x42>
 8006054:	6811      	ldr	r1, [r2, #0]
 8006056:	1850      	adds	r0, r2, r1
 8006058:	42a0      	cmp	r0, r4
 800605a:	d10b      	bne.n	8006074 <_free_r+0x6c>
 800605c:	6820      	ldr	r0, [r4, #0]
 800605e:	4401      	add	r1, r0
 8006060:	1850      	adds	r0, r2, r1
 8006062:	4283      	cmp	r3, r0
 8006064:	6011      	str	r1, [r2, #0]
 8006066:	d1e0      	bne.n	800602a <_free_r+0x22>
 8006068:	6818      	ldr	r0, [r3, #0]
 800606a:	685b      	ldr	r3, [r3, #4]
 800606c:	4408      	add	r0, r1
 800606e:	6010      	str	r0, [r2, #0]
 8006070:	6053      	str	r3, [r2, #4]
 8006072:	e7da      	b.n	800602a <_free_r+0x22>
 8006074:	d902      	bls.n	800607c <_free_r+0x74>
 8006076:	230c      	movs	r3, #12
 8006078:	602b      	str	r3, [r5, #0]
 800607a:	e7d6      	b.n	800602a <_free_r+0x22>
 800607c:	6820      	ldr	r0, [r4, #0]
 800607e:	1821      	adds	r1, r4, r0
 8006080:	428b      	cmp	r3, r1
 8006082:	bf01      	itttt	eq
 8006084:	6819      	ldreq	r1, [r3, #0]
 8006086:	685b      	ldreq	r3, [r3, #4]
 8006088:	1809      	addeq	r1, r1, r0
 800608a:	6021      	streq	r1, [r4, #0]
 800608c:	6063      	str	r3, [r4, #4]
 800608e:	6054      	str	r4, [r2, #4]
 8006090:	e7cb      	b.n	800602a <_free_r+0x22>
 8006092:	bd38      	pop	{r3, r4, r5, pc}
 8006094:	20000220 	.word	0x20000220

08006098 <sbrk_aligned>:
 8006098:	b570      	push	{r4, r5, r6, lr}
 800609a:	4e0f      	ldr	r6, [pc, #60]	@ (80060d8 <sbrk_aligned+0x40>)
 800609c:	460c      	mov	r4, r1
 800609e:	6831      	ldr	r1, [r6, #0]
 80060a0:	4605      	mov	r5, r0
 80060a2:	b911      	cbnz	r1, 80060aa <sbrk_aligned+0x12>
 80060a4:	f000 fcb4 	bl	8006a10 <_sbrk_r>
 80060a8:	6030      	str	r0, [r6, #0]
 80060aa:	4621      	mov	r1, r4
 80060ac:	4628      	mov	r0, r5
 80060ae:	f000 fcaf 	bl	8006a10 <_sbrk_r>
 80060b2:	1c43      	adds	r3, r0, #1
 80060b4:	d103      	bne.n	80060be <sbrk_aligned+0x26>
 80060b6:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 80060ba:	4620      	mov	r0, r4
 80060bc:	bd70      	pop	{r4, r5, r6, pc}
 80060be:	1cc4      	adds	r4, r0, #3
 80060c0:	f024 0403 	bic.w	r4, r4, #3
 80060c4:	42a0      	cmp	r0, r4
 80060c6:	d0f8      	beq.n	80060ba <sbrk_aligned+0x22>
 80060c8:	1a21      	subs	r1, r4, r0
 80060ca:	4628      	mov	r0, r5
 80060cc:	f000 fca0 	bl	8006a10 <_sbrk_r>
 80060d0:	3001      	adds	r0, #1
 80060d2:	d1f2      	bne.n	80060ba <sbrk_aligned+0x22>
 80060d4:	e7ef      	b.n	80060b6 <sbrk_aligned+0x1e>
 80060d6:	bf00      	nop
 80060d8:	2000021c 	.word	0x2000021c

080060dc <_malloc_r>:
 80060dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80060e0:	1ccd      	adds	r5, r1, #3
 80060e2:	f025 0503 	bic.w	r5, r5, #3
 80060e6:	3508      	adds	r5, #8
 80060e8:	2d0c      	cmp	r5, #12
 80060ea:	bf38      	it	cc
 80060ec:	250c      	movcc	r5, #12
 80060ee:	2d00      	cmp	r5, #0
 80060f0:	4606      	mov	r6, r0
 80060f2:	db01      	blt.n	80060f8 <_malloc_r+0x1c>
 80060f4:	42a9      	cmp	r1, r5
 80060f6:	d904      	bls.n	8006102 <_malloc_r+0x26>
 80060f8:	230c      	movs	r3, #12
 80060fa:	6033      	str	r3, [r6, #0]
 80060fc:	2000      	movs	r0, #0
 80060fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006102:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80061d8 <_malloc_r+0xfc>
 8006106:	f000 f869 	bl	80061dc <__malloc_lock>
 800610a:	f8d8 3000 	ldr.w	r3, [r8]
 800610e:	461c      	mov	r4, r3
 8006110:	bb44      	cbnz	r4, 8006164 <_malloc_r+0x88>
 8006112:	4629      	mov	r1, r5
 8006114:	4630      	mov	r0, r6
 8006116:	f7ff ffbf 	bl	8006098 <sbrk_aligned>
 800611a:	1c43      	adds	r3, r0, #1
 800611c:	4604      	mov	r4, r0
 800611e:	d158      	bne.n	80061d2 <_malloc_r+0xf6>
 8006120:	f8d8 4000 	ldr.w	r4, [r8]
 8006124:	4627      	mov	r7, r4
 8006126:	2f00      	cmp	r7, #0
 8006128:	d143      	bne.n	80061b2 <_malloc_r+0xd6>
 800612a:	2c00      	cmp	r4, #0
 800612c:	d04b      	beq.n	80061c6 <_malloc_r+0xea>
 800612e:	6823      	ldr	r3, [r4, #0]
 8006130:	4639      	mov	r1, r7
 8006132:	4630      	mov	r0, r6
 8006134:	eb04 0903 	add.w	r9, r4, r3
 8006138:	f000 fc6a 	bl	8006a10 <_sbrk_r>
 800613c:	4581      	cmp	r9, r0
 800613e:	d142      	bne.n	80061c6 <_malloc_r+0xea>
 8006140:	6821      	ldr	r1, [r4, #0]
 8006142:	4630      	mov	r0, r6
 8006144:	1a6d      	subs	r5, r5, r1
 8006146:	4629      	mov	r1, r5
 8006148:	f7ff ffa6 	bl	8006098 <sbrk_aligned>
 800614c:	3001      	adds	r0, #1
 800614e:	d03a      	beq.n	80061c6 <_malloc_r+0xea>
 8006150:	6823      	ldr	r3, [r4, #0]
 8006152:	442b      	add	r3, r5
 8006154:	6023      	str	r3, [r4, #0]
 8006156:	f8d8 3000 	ldr.w	r3, [r8]
 800615a:	685a      	ldr	r2, [r3, #4]
 800615c:	bb62      	cbnz	r2, 80061b8 <_malloc_r+0xdc>
 800615e:	f8c8 7000 	str.w	r7, [r8]
 8006162:	e00f      	b.n	8006184 <_malloc_r+0xa8>
 8006164:	6822      	ldr	r2, [r4, #0]
 8006166:	1b52      	subs	r2, r2, r5
 8006168:	d420      	bmi.n	80061ac <_malloc_r+0xd0>
 800616a:	2a0b      	cmp	r2, #11
 800616c:	d917      	bls.n	800619e <_malloc_r+0xc2>
 800616e:	1961      	adds	r1, r4, r5
 8006170:	42a3      	cmp	r3, r4
 8006172:	6025      	str	r5, [r4, #0]
 8006174:	bf18      	it	ne
 8006176:	6059      	strne	r1, [r3, #4]
 8006178:	6863      	ldr	r3, [r4, #4]
 800617a:	bf08      	it	eq
 800617c:	f8c8 1000 	streq.w	r1, [r8]
 8006180:	5162      	str	r2, [r4, r5]
 8006182:	604b      	str	r3, [r1, #4]
 8006184:	4630      	mov	r0, r6
 8006186:	f000 f82f 	bl	80061e8 <__malloc_unlock>
 800618a:	f104 000b 	add.w	r0, r4, #11
 800618e:	1d23      	adds	r3, r4, #4
 8006190:	f020 0007 	bic.w	r0, r0, #7
 8006194:	1ac2      	subs	r2, r0, r3
 8006196:	bf1c      	itt	ne
 8006198:	1a1b      	subne	r3, r3, r0
 800619a:	50a3      	strne	r3, [r4, r2]
 800619c:	e7af      	b.n	80060fe <_malloc_r+0x22>
 800619e:	6862      	ldr	r2, [r4, #4]
 80061a0:	42a3      	cmp	r3, r4
 80061a2:	bf0c      	ite	eq
 80061a4:	f8c8 2000 	streq.w	r2, [r8]
 80061a8:	605a      	strne	r2, [r3, #4]
 80061aa:	e7eb      	b.n	8006184 <_malloc_r+0xa8>
 80061ac:	4623      	mov	r3, r4
 80061ae:	6864      	ldr	r4, [r4, #4]
 80061b0:	e7ae      	b.n	8006110 <_malloc_r+0x34>
 80061b2:	463c      	mov	r4, r7
 80061b4:	687f      	ldr	r7, [r7, #4]
 80061b6:	e7b6      	b.n	8006126 <_malloc_r+0x4a>
 80061b8:	461a      	mov	r2, r3
 80061ba:	685b      	ldr	r3, [r3, #4]
 80061bc:	42a3      	cmp	r3, r4
 80061be:	d1fb      	bne.n	80061b8 <_malloc_r+0xdc>
 80061c0:	2300      	movs	r3, #0
 80061c2:	6053      	str	r3, [r2, #4]
 80061c4:	e7de      	b.n	8006184 <_malloc_r+0xa8>
 80061c6:	230c      	movs	r3, #12
 80061c8:	4630      	mov	r0, r6
 80061ca:	6033      	str	r3, [r6, #0]
 80061cc:	f000 f80c 	bl	80061e8 <__malloc_unlock>
 80061d0:	e794      	b.n	80060fc <_malloc_r+0x20>
 80061d2:	6005      	str	r5, [r0, #0]
 80061d4:	e7d6      	b.n	8006184 <_malloc_r+0xa8>
 80061d6:	bf00      	nop
 80061d8:	20000220 	.word	0x20000220

080061dc <__malloc_lock>:
 80061dc:	4801      	ldr	r0, [pc, #4]	@ (80061e4 <__malloc_lock+0x8>)
 80061de:	f7ff bf10 	b.w	8006002 <__retarget_lock_acquire_recursive>
 80061e2:	bf00      	nop
 80061e4:	20000218 	.word	0x20000218

080061e8 <__malloc_unlock>:
 80061e8:	4801      	ldr	r0, [pc, #4]	@ (80061f0 <__malloc_unlock+0x8>)
 80061ea:	f7ff bf0b 	b.w	8006004 <__retarget_lock_release_recursive>
 80061ee:	bf00      	nop
 80061f0:	20000218 	.word	0x20000218

080061f4 <__sfputc_r>:
 80061f4:	6893      	ldr	r3, [r2, #8]
 80061f6:	b410      	push	{r4}
 80061f8:	3b01      	subs	r3, #1
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	6093      	str	r3, [r2, #8]
 80061fe:	da07      	bge.n	8006210 <__sfputc_r+0x1c>
 8006200:	6994      	ldr	r4, [r2, #24]
 8006202:	42a3      	cmp	r3, r4
 8006204:	db01      	blt.n	800620a <__sfputc_r+0x16>
 8006206:	290a      	cmp	r1, #10
 8006208:	d102      	bne.n	8006210 <__sfputc_r+0x1c>
 800620a:	bc10      	pop	{r4}
 800620c:	f000 bb6c 	b.w	80068e8 <__swbuf_r>
 8006210:	6813      	ldr	r3, [r2, #0]
 8006212:	1c58      	adds	r0, r3, #1
 8006214:	6010      	str	r0, [r2, #0]
 8006216:	7019      	strb	r1, [r3, #0]
 8006218:	4608      	mov	r0, r1
 800621a:	bc10      	pop	{r4}
 800621c:	4770      	bx	lr

0800621e <__sfputs_r>:
 800621e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006220:	4606      	mov	r6, r0
 8006222:	460f      	mov	r7, r1
 8006224:	4614      	mov	r4, r2
 8006226:	18d5      	adds	r5, r2, r3
 8006228:	42ac      	cmp	r4, r5
 800622a:	d101      	bne.n	8006230 <__sfputs_r+0x12>
 800622c:	2000      	movs	r0, #0
 800622e:	e007      	b.n	8006240 <__sfputs_r+0x22>
 8006230:	463a      	mov	r2, r7
 8006232:	4630      	mov	r0, r6
 8006234:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006238:	f7ff ffdc 	bl	80061f4 <__sfputc_r>
 800623c:	1c43      	adds	r3, r0, #1
 800623e:	d1f3      	bne.n	8006228 <__sfputs_r+0xa>
 8006240:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006244 <_vfiprintf_r>:
 8006244:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006248:	460d      	mov	r5, r1
 800624a:	4614      	mov	r4, r2
 800624c:	4698      	mov	r8, r3
 800624e:	4606      	mov	r6, r0
 8006250:	b09d      	sub	sp, #116	@ 0x74
 8006252:	b118      	cbz	r0, 800625c <_vfiprintf_r+0x18>
 8006254:	6a03      	ldr	r3, [r0, #32]
 8006256:	b90b      	cbnz	r3, 800625c <_vfiprintf_r+0x18>
 8006258:	f7ff fdce 	bl	8005df8 <__sinit>
 800625c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800625e:	07d9      	lsls	r1, r3, #31
 8006260:	d405      	bmi.n	800626e <_vfiprintf_r+0x2a>
 8006262:	89ab      	ldrh	r3, [r5, #12]
 8006264:	059a      	lsls	r2, r3, #22
 8006266:	d402      	bmi.n	800626e <_vfiprintf_r+0x2a>
 8006268:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800626a:	f7ff feca 	bl	8006002 <__retarget_lock_acquire_recursive>
 800626e:	89ab      	ldrh	r3, [r5, #12]
 8006270:	071b      	lsls	r3, r3, #28
 8006272:	d501      	bpl.n	8006278 <_vfiprintf_r+0x34>
 8006274:	692b      	ldr	r3, [r5, #16]
 8006276:	b99b      	cbnz	r3, 80062a0 <_vfiprintf_r+0x5c>
 8006278:	4629      	mov	r1, r5
 800627a:	4630      	mov	r0, r6
 800627c:	f000 fb72 	bl	8006964 <__swsetup_r>
 8006280:	b170      	cbz	r0, 80062a0 <_vfiprintf_r+0x5c>
 8006282:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006284:	07dc      	lsls	r4, r3, #31
 8006286:	d504      	bpl.n	8006292 <_vfiprintf_r+0x4e>
 8006288:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800628c:	b01d      	add	sp, #116	@ 0x74
 800628e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006292:	89ab      	ldrh	r3, [r5, #12]
 8006294:	0598      	lsls	r0, r3, #22
 8006296:	d4f7      	bmi.n	8006288 <_vfiprintf_r+0x44>
 8006298:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800629a:	f7ff feb3 	bl	8006004 <__retarget_lock_release_recursive>
 800629e:	e7f3      	b.n	8006288 <_vfiprintf_r+0x44>
 80062a0:	2300      	movs	r3, #0
 80062a2:	9309      	str	r3, [sp, #36]	@ 0x24
 80062a4:	2320      	movs	r3, #32
 80062a6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80062aa:	2330      	movs	r3, #48	@ 0x30
 80062ac:	f04f 0901 	mov.w	r9, #1
 80062b0:	f8cd 800c 	str.w	r8, [sp, #12]
 80062b4:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8006460 <_vfiprintf_r+0x21c>
 80062b8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80062bc:	4623      	mov	r3, r4
 80062be:	469a      	mov	sl, r3
 80062c0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80062c4:	b10a      	cbz	r2, 80062ca <_vfiprintf_r+0x86>
 80062c6:	2a25      	cmp	r2, #37	@ 0x25
 80062c8:	d1f9      	bne.n	80062be <_vfiprintf_r+0x7a>
 80062ca:	ebba 0b04 	subs.w	fp, sl, r4
 80062ce:	d00b      	beq.n	80062e8 <_vfiprintf_r+0xa4>
 80062d0:	465b      	mov	r3, fp
 80062d2:	4622      	mov	r2, r4
 80062d4:	4629      	mov	r1, r5
 80062d6:	4630      	mov	r0, r6
 80062d8:	f7ff ffa1 	bl	800621e <__sfputs_r>
 80062dc:	3001      	adds	r0, #1
 80062de:	f000 80a7 	beq.w	8006430 <_vfiprintf_r+0x1ec>
 80062e2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80062e4:	445a      	add	r2, fp
 80062e6:	9209      	str	r2, [sp, #36]	@ 0x24
 80062e8:	f89a 3000 	ldrb.w	r3, [sl]
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	f000 809f 	beq.w	8006430 <_vfiprintf_r+0x1ec>
 80062f2:	2300      	movs	r3, #0
 80062f4:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 80062f8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80062fc:	f10a 0a01 	add.w	sl, sl, #1
 8006300:	9304      	str	r3, [sp, #16]
 8006302:	9307      	str	r3, [sp, #28]
 8006304:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006308:	931a      	str	r3, [sp, #104]	@ 0x68
 800630a:	4654      	mov	r4, sl
 800630c:	2205      	movs	r2, #5
 800630e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006312:	4853      	ldr	r0, [pc, #332]	@ (8006460 <_vfiprintf_r+0x21c>)
 8006314:	f000 fb8c 	bl	8006a30 <memchr>
 8006318:	9a04      	ldr	r2, [sp, #16]
 800631a:	b9d8      	cbnz	r0, 8006354 <_vfiprintf_r+0x110>
 800631c:	06d1      	lsls	r1, r2, #27
 800631e:	bf44      	itt	mi
 8006320:	2320      	movmi	r3, #32
 8006322:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006326:	0713      	lsls	r3, r2, #28
 8006328:	bf44      	itt	mi
 800632a:	232b      	movmi	r3, #43	@ 0x2b
 800632c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006330:	f89a 3000 	ldrb.w	r3, [sl]
 8006334:	2b2a      	cmp	r3, #42	@ 0x2a
 8006336:	d015      	beq.n	8006364 <_vfiprintf_r+0x120>
 8006338:	4654      	mov	r4, sl
 800633a:	2000      	movs	r0, #0
 800633c:	f04f 0c0a 	mov.w	ip, #10
 8006340:	9a07      	ldr	r2, [sp, #28]
 8006342:	4621      	mov	r1, r4
 8006344:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006348:	3b30      	subs	r3, #48	@ 0x30
 800634a:	2b09      	cmp	r3, #9
 800634c:	d94b      	bls.n	80063e6 <_vfiprintf_r+0x1a2>
 800634e:	b1b0      	cbz	r0, 800637e <_vfiprintf_r+0x13a>
 8006350:	9207      	str	r2, [sp, #28]
 8006352:	e014      	b.n	800637e <_vfiprintf_r+0x13a>
 8006354:	eba0 0308 	sub.w	r3, r0, r8
 8006358:	fa09 f303 	lsl.w	r3, r9, r3
 800635c:	4313      	orrs	r3, r2
 800635e:	46a2      	mov	sl, r4
 8006360:	9304      	str	r3, [sp, #16]
 8006362:	e7d2      	b.n	800630a <_vfiprintf_r+0xc6>
 8006364:	9b03      	ldr	r3, [sp, #12]
 8006366:	1d19      	adds	r1, r3, #4
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	9103      	str	r1, [sp, #12]
 800636c:	2b00      	cmp	r3, #0
 800636e:	bfbb      	ittet	lt
 8006370:	425b      	neglt	r3, r3
 8006372:	f042 0202 	orrlt.w	r2, r2, #2
 8006376:	9307      	strge	r3, [sp, #28]
 8006378:	9307      	strlt	r3, [sp, #28]
 800637a:	bfb8      	it	lt
 800637c:	9204      	strlt	r2, [sp, #16]
 800637e:	7823      	ldrb	r3, [r4, #0]
 8006380:	2b2e      	cmp	r3, #46	@ 0x2e
 8006382:	d10a      	bne.n	800639a <_vfiprintf_r+0x156>
 8006384:	7863      	ldrb	r3, [r4, #1]
 8006386:	2b2a      	cmp	r3, #42	@ 0x2a
 8006388:	d132      	bne.n	80063f0 <_vfiprintf_r+0x1ac>
 800638a:	9b03      	ldr	r3, [sp, #12]
 800638c:	3402      	adds	r4, #2
 800638e:	1d1a      	adds	r2, r3, #4
 8006390:	681b      	ldr	r3, [r3, #0]
 8006392:	9203      	str	r2, [sp, #12]
 8006394:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006398:	9305      	str	r3, [sp, #20]
 800639a:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8006464 <_vfiprintf_r+0x220>
 800639e:	2203      	movs	r2, #3
 80063a0:	4650      	mov	r0, sl
 80063a2:	7821      	ldrb	r1, [r4, #0]
 80063a4:	f000 fb44 	bl	8006a30 <memchr>
 80063a8:	b138      	cbz	r0, 80063ba <_vfiprintf_r+0x176>
 80063aa:	2240      	movs	r2, #64	@ 0x40
 80063ac:	9b04      	ldr	r3, [sp, #16]
 80063ae:	eba0 000a 	sub.w	r0, r0, sl
 80063b2:	4082      	lsls	r2, r0
 80063b4:	4313      	orrs	r3, r2
 80063b6:	3401      	adds	r4, #1
 80063b8:	9304      	str	r3, [sp, #16]
 80063ba:	f814 1b01 	ldrb.w	r1, [r4], #1
 80063be:	2206      	movs	r2, #6
 80063c0:	4829      	ldr	r0, [pc, #164]	@ (8006468 <_vfiprintf_r+0x224>)
 80063c2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80063c6:	f000 fb33 	bl	8006a30 <memchr>
 80063ca:	2800      	cmp	r0, #0
 80063cc:	d03f      	beq.n	800644e <_vfiprintf_r+0x20a>
 80063ce:	4b27      	ldr	r3, [pc, #156]	@ (800646c <_vfiprintf_r+0x228>)
 80063d0:	bb1b      	cbnz	r3, 800641a <_vfiprintf_r+0x1d6>
 80063d2:	9b03      	ldr	r3, [sp, #12]
 80063d4:	3307      	adds	r3, #7
 80063d6:	f023 0307 	bic.w	r3, r3, #7
 80063da:	3308      	adds	r3, #8
 80063dc:	9303      	str	r3, [sp, #12]
 80063de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80063e0:	443b      	add	r3, r7
 80063e2:	9309      	str	r3, [sp, #36]	@ 0x24
 80063e4:	e76a      	b.n	80062bc <_vfiprintf_r+0x78>
 80063e6:	460c      	mov	r4, r1
 80063e8:	2001      	movs	r0, #1
 80063ea:	fb0c 3202 	mla	r2, ip, r2, r3
 80063ee:	e7a8      	b.n	8006342 <_vfiprintf_r+0xfe>
 80063f0:	2300      	movs	r3, #0
 80063f2:	f04f 0c0a 	mov.w	ip, #10
 80063f6:	4619      	mov	r1, r3
 80063f8:	3401      	adds	r4, #1
 80063fa:	9305      	str	r3, [sp, #20]
 80063fc:	4620      	mov	r0, r4
 80063fe:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006402:	3a30      	subs	r2, #48	@ 0x30
 8006404:	2a09      	cmp	r2, #9
 8006406:	d903      	bls.n	8006410 <_vfiprintf_r+0x1cc>
 8006408:	2b00      	cmp	r3, #0
 800640a:	d0c6      	beq.n	800639a <_vfiprintf_r+0x156>
 800640c:	9105      	str	r1, [sp, #20]
 800640e:	e7c4      	b.n	800639a <_vfiprintf_r+0x156>
 8006410:	4604      	mov	r4, r0
 8006412:	2301      	movs	r3, #1
 8006414:	fb0c 2101 	mla	r1, ip, r1, r2
 8006418:	e7f0      	b.n	80063fc <_vfiprintf_r+0x1b8>
 800641a:	ab03      	add	r3, sp, #12
 800641c:	9300      	str	r3, [sp, #0]
 800641e:	462a      	mov	r2, r5
 8006420:	4630      	mov	r0, r6
 8006422:	4b13      	ldr	r3, [pc, #76]	@ (8006470 <_vfiprintf_r+0x22c>)
 8006424:	a904      	add	r1, sp, #16
 8006426:	f3af 8000 	nop.w
 800642a:	4607      	mov	r7, r0
 800642c:	1c78      	adds	r0, r7, #1
 800642e:	d1d6      	bne.n	80063de <_vfiprintf_r+0x19a>
 8006430:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006432:	07d9      	lsls	r1, r3, #31
 8006434:	d405      	bmi.n	8006442 <_vfiprintf_r+0x1fe>
 8006436:	89ab      	ldrh	r3, [r5, #12]
 8006438:	059a      	lsls	r2, r3, #22
 800643a:	d402      	bmi.n	8006442 <_vfiprintf_r+0x1fe>
 800643c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800643e:	f7ff fde1 	bl	8006004 <__retarget_lock_release_recursive>
 8006442:	89ab      	ldrh	r3, [r5, #12]
 8006444:	065b      	lsls	r3, r3, #25
 8006446:	f53f af1f 	bmi.w	8006288 <_vfiprintf_r+0x44>
 800644a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800644c:	e71e      	b.n	800628c <_vfiprintf_r+0x48>
 800644e:	ab03      	add	r3, sp, #12
 8006450:	9300      	str	r3, [sp, #0]
 8006452:	462a      	mov	r2, r5
 8006454:	4630      	mov	r0, r6
 8006456:	4b06      	ldr	r3, [pc, #24]	@ (8006470 <_vfiprintf_r+0x22c>)
 8006458:	a904      	add	r1, sp, #16
 800645a:	f000 f87d 	bl	8006558 <_printf_i>
 800645e:	e7e4      	b.n	800642a <_vfiprintf_r+0x1e6>
 8006460:	08006bba 	.word	0x08006bba
 8006464:	08006bc0 	.word	0x08006bc0
 8006468:	08006bc4 	.word	0x08006bc4
 800646c:	00000000 	.word	0x00000000
 8006470:	0800621f 	.word	0x0800621f

08006474 <_printf_common>:
 8006474:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006478:	4616      	mov	r6, r2
 800647a:	4698      	mov	r8, r3
 800647c:	688a      	ldr	r2, [r1, #8]
 800647e:	690b      	ldr	r3, [r1, #16]
 8006480:	4607      	mov	r7, r0
 8006482:	4293      	cmp	r3, r2
 8006484:	bfb8      	it	lt
 8006486:	4613      	movlt	r3, r2
 8006488:	6033      	str	r3, [r6, #0]
 800648a:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800648e:	460c      	mov	r4, r1
 8006490:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006494:	b10a      	cbz	r2, 800649a <_printf_common+0x26>
 8006496:	3301      	adds	r3, #1
 8006498:	6033      	str	r3, [r6, #0]
 800649a:	6823      	ldr	r3, [r4, #0]
 800649c:	0699      	lsls	r1, r3, #26
 800649e:	bf42      	ittt	mi
 80064a0:	6833      	ldrmi	r3, [r6, #0]
 80064a2:	3302      	addmi	r3, #2
 80064a4:	6033      	strmi	r3, [r6, #0]
 80064a6:	6825      	ldr	r5, [r4, #0]
 80064a8:	f015 0506 	ands.w	r5, r5, #6
 80064ac:	d106      	bne.n	80064bc <_printf_common+0x48>
 80064ae:	f104 0a19 	add.w	sl, r4, #25
 80064b2:	68e3      	ldr	r3, [r4, #12]
 80064b4:	6832      	ldr	r2, [r6, #0]
 80064b6:	1a9b      	subs	r3, r3, r2
 80064b8:	42ab      	cmp	r3, r5
 80064ba:	dc2b      	bgt.n	8006514 <_printf_common+0xa0>
 80064bc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80064c0:	6822      	ldr	r2, [r4, #0]
 80064c2:	3b00      	subs	r3, #0
 80064c4:	bf18      	it	ne
 80064c6:	2301      	movne	r3, #1
 80064c8:	0692      	lsls	r2, r2, #26
 80064ca:	d430      	bmi.n	800652e <_printf_common+0xba>
 80064cc:	4641      	mov	r1, r8
 80064ce:	4638      	mov	r0, r7
 80064d0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80064d4:	47c8      	blx	r9
 80064d6:	3001      	adds	r0, #1
 80064d8:	d023      	beq.n	8006522 <_printf_common+0xae>
 80064da:	6823      	ldr	r3, [r4, #0]
 80064dc:	6922      	ldr	r2, [r4, #16]
 80064de:	f003 0306 	and.w	r3, r3, #6
 80064e2:	2b04      	cmp	r3, #4
 80064e4:	bf14      	ite	ne
 80064e6:	2500      	movne	r5, #0
 80064e8:	6833      	ldreq	r3, [r6, #0]
 80064ea:	f04f 0600 	mov.w	r6, #0
 80064ee:	bf08      	it	eq
 80064f0:	68e5      	ldreq	r5, [r4, #12]
 80064f2:	f104 041a 	add.w	r4, r4, #26
 80064f6:	bf08      	it	eq
 80064f8:	1aed      	subeq	r5, r5, r3
 80064fa:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80064fe:	bf08      	it	eq
 8006500:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006504:	4293      	cmp	r3, r2
 8006506:	bfc4      	itt	gt
 8006508:	1a9b      	subgt	r3, r3, r2
 800650a:	18ed      	addgt	r5, r5, r3
 800650c:	42b5      	cmp	r5, r6
 800650e:	d11a      	bne.n	8006546 <_printf_common+0xd2>
 8006510:	2000      	movs	r0, #0
 8006512:	e008      	b.n	8006526 <_printf_common+0xb2>
 8006514:	2301      	movs	r3, #1
 8006516:	4652      	mov	r2, sl
 8006518:	4641      	mov	r1, r8
 800651a:	4638      	mov	r0, r7
 800651c:	47c8      	blx	r9
 800651e:	3001      	adds	r0, #1
 8006520:	d103      	bne.n	800652a <_printf_common+0xb6>
 8006522:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006526:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800652a:	3501      	adds	r5, #1
 800652c:	e7c1      	b.n	80064b2 <_printf_common+0x3e>
 800652e:	2030      	movs	r0, #48	@ 0x30
 8006530:	18e1      	adds	r1, r4, r3
 8006532:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006536:	1c5a      	adds	r2, r3, #1
 8006538:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800653c:	4422      	add	r2, r4
 800653e:	3302      	adds	r3, #2
 8006540:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006544:	e7c2      	b.n	80064cc <_printf_common+0x58>
 8006546:	2301      	movs	r3, #1
 8006548:	4622      	mov	r2, r4
 800654a:	4641      	mov	r1, r8
 800654c:	4638      	mov	r0, r7
 800654e:	47c8      	blx	r9
 8006550:	3001      	adds	r0, #1
 8006552:	d0e6      	beq.n	8006522 <_printf_common+0xae>
 8006554:	3601      	adds	r6, #1
 8006556:	e7d9      	b.n	800650c <_printf_common+0x98>

08006558 <_printf_i>:
 8006558:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800655c:	7e0f      	ldrb	r7, [r1, #24]
 800655e:	4691      	mov	r9, r2
 8006560:	2f78      	cmp	r7, #120	@ 0x78
 8006562:	4680      	mov	r8, r0
 8006564:	460c      	mov	r4, r1
 8006566:	469a      	mov	sl, r3
 8006568:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800656a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800656e:	d807      	bhi.n	8006580 <_printf_i+0x28>
 8006570:	2f62      	cmp	r7, #98	@ 0x62
 8006572:	d80a      	bhi.n	800658a <_printf_i+0x32>
 8006574:	2f00      	cmp	r7, #0
 8006576:	f000 80d3 	beq.w	8006720 <_printf_i+0x1c8>
 800657a:	2f58      	cmp	r7, #88	@ 0x58
 800657c:	f000 80ba 	beq.w	80066f4 <_printf_i+0x19c>
 8006580:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006584:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006588:	e03a      	b.n	8006600 <_printf_i+0xa8>
 800658a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800658e:	2b15      	cmp	r3, #21
 8006590:	d8f6      	bhi.n	8006580 <_printf_i+0x28>
 8006592:	a101      	add	r1, pc, #4	@ (adr r1, 8006598 <_printf_i+0x40>)
 8006594:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006598:	080065f1 	.word	0x080065f1
 800659c:	08006605 	.word	0x08006605
 80065a0:	08006581 	.word	0x08006581
 80065a4:	08006581 	.word	0x08006581
 80065a8:	08006581 	.word	0x08006581
 80065ac:	08006581 	.word	0x08006581
 80065b0:	08006605 	.word	0x08006605
 80065b4:	08006581 	.word	0x08006581
 80065b8:	08006581 	.word	0x08006581
 80065bc:	08006581 	.word	0x08006581
 80065c0:	08006581 	.word	0x08006581
 80065c4:	08006707 	.word	0x08006707
 80065c8:	0800662f 	.word	0x0800662f
 80065cc:	080066c1 	.word	0x080066c1
 80065d0:	08006581 	.word	0x08006581
 80065d4:	08006581 	.word	0x08006581
 80065d8:	08006729 	.word	0x08006729
 80065dc:	08006581 	.word	0x08006581
 80065e0:	0800662f 	.word	0x0800662f
 80065e4:	08006581 	.word	0x08006581
 80065e8:	08006581 	.word	0x08006581
 80065ec:	080066c9 	.word	0x080066c9
 80065f0:	6833      	ldr	r3, [r6, #0]
 80065f2:	1d1a      	adds	r2, r3, #4
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	6032      	str	r2, [r6, #0]
 80065f8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80065fc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006600:	2301      	movs	r3, #1
 8006602:	e09e      	b.n	8006742 <_printf_i+0x1ea>
 8006604:	6833      	ldr	r3, [r6, #0]
 8006606:	6820      	ldr	r0, [r4, #0]
 8006608:	1d19      	adds	r1, r3, #4
 800660a:	6031      	str	r1, [r6, #0]
 800660c:	0606      	lsls	r6, r0, #24
 800660e:	d501      	bpl.n	8006614 <_printf_i+0xbc>
 8006610:	681d      	ldr	r5, [r3, #0]
 8006612:	e003      	b.n	800661c <_printf_i+0xc4>
 8006614:	0645      	lsls	r5, r0, #25
 8006616:	d5fb      	bpl.n	8006610 <_printf_i+0xb8>
 8006618:	f9b3 5000 	ldrsh.w	r5, [r3]
 800661c:	2d00      	cmp	r5, #0
 800661e:	da03      	bge.n	8006628 <_printf_i+0xd0>
 8006620:	232d      	movs	r3, #45	@ 0x2d
 8006622:	426d      	negs	r5, r5
 8006624:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006628:	230a      	movs	r3, #10
 800662a:	4859      	ldr	r0, [pc, #356]	@ (8006790 <_printf_i+0x238>)
 800662c:	e011      	b.n	8006652 <_printf_i+0xfa>
 800662e:	6821      	ldr	r1, [r4, #0]
 8006630:	6833      	ldr	r3, [r6, #0]
 8006632:	0608      	lsls	r0, r1, #24
 8006634:	f853 5b04 	ldr.w	r5, [r3], #4
 8006638:	d402      	bmi.n	8006640 <_printf_i+0xe8>
 800663a:	0649      	lsls	r1, r1, #25
 800663c:	bf48      	it	mi
 800663e:	b2ad      	uxthmi	r5, r5
 8006640:	2f6f      	cmp	r7, #111	@ 0x6f
 8006642:	6033      	str	r3, [r6, #0]
 8006644:	bf14      	ite	ne
 8006646:	230a      	movne	r3, #10
 8006648:	2308      	moveq	r3, #8
 800664a:	4851      	ldr	r0, [pc, #324]	@ (8006790 <_printf_i+0x238>)
 800664c:	2100      	movs	r1, #0
 800664e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006652:	6866      	ldr	r6, [r4, #4]
 8006654:	2e00      	cmp	r6, #0
 8006656:	bfa8      	it	ge
 8006658:	6821      	ldrge	r1, [r4, #0]
 800665a:	60a6      	str	r6, [r4, #8]
 800665c:	bfa4      	itt	ge
 800665e:	f021 0104 	bicge.w	r1, r1, #4
 8006662:	6021      	strge	r1, [r4, #0]
 8006664:	b90d      	cbnz	r5, 800666a <_printf_i+0x112>
 8006666:	2e00      	cmp	r6, #0
 8006668:	d04b      	beq.n	8006702 <_printf_i+0x1aa>
 800666a:	4616      	mov	r6, r2
 800666c:	fbb5 f1f3 	udiv	r1, r5, r3
 8006670:	fb03 5711 	mls	r7, r3, r1, r5
 8006674:	5dc7      	ldrb	r7, [r0, r7]
 8006676:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800667a:	462f      	mov	r7, r5
 800667c:	42bb      	cmp	r3, r7
 800667e:	460d      	mov	r5, r1
 8006680:	d9f4      	bls.n	800666c <_printf_i+0x114>
 8006682:	2b08      	cmp	r3, #8
 8006684:	d10b      	bne.n	800669e <_printf_i+0x146>
 8006686:	6823      	ldr	r3, [r4, #0]
 8006688:	07df      	lsls	r7, r3, #31
 800668a:	d508      	bpl.n	800669e <_printf_i+0x146>
 800668c:	6923      	ldr	r3, [r4, #16]
 800668e:	6861      	ldr	r1, [r4, #4]
 8006690:	4299      	cmp	r1, r3
 8006692:	bfde      	ittt	le
 8006694:	2330      	movle	r3, #48	@ 0x30
 8006696:	f806 3c01 	strble.w	r3, [r6, #-1]
 800669a:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 800669e:	1b92      	subs	r2, r2, r6
 80066a0:	6122      	str	r2, [r4, #16]
 80066a2:	464b      	mov	r3, r9
 80066a4:	4621      	mov	r1, r4
 80066a6:	4640      	mov	r0, r8
 80066a8:	f8cd a000 	str.w	sl, [sp]
 80066ac:	aa03      	add	r2, sp, #12
 80066ae:	f7ff fee1 	bl	8006474 <_printf_common>
 80066b2:	3001      	adds	r0, #1
 80066b4:	d14a      	bne.n	800674c <_printf_i+0x1f4>
 80066b6:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80066ba:	b004      	add	sp, #16
 80066bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80066c0:	6823      	ldr	r3, [r4, #0]
 80066c2:	f043 0320 	orr.w	r3, r3, #32
 80066c6:	6023      	str	r3, [r4, #0]
 80066c8:	2778      	movs	r7, #120	@ 0x78
 80066ca:	4832      	ldr	r0, [pc, #200]	@ (8006794 <_printf_i+0x23c>)
 80066cc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80066d0:	6823      	ldr	r3, [r4, #0]
 80066d2:	6831      	ldr	r1, [r6, #0]
 80066d4:	061f      	lsls	r7, r3, #24
 80066d6:	f851 5b04 	ldr.w	r5, [r1], #4
 80066da:	d402      	bmi.n	80066e2 <_printf_i+0x18a>
 80066dc:	065f      	lsls	r7, r3, #25
 80066de:	bf48      	it	mi
 80066e0:	b2ad      	uxthmi	r5, r5
 80066e2:	6031      	str	r1, [r6, #0]
 80066e4:	07d9      	lsls	r1, r3, #31
 80066e6:	bf44      	itt	mi
 80066e8:	f043 0320 	orrmi.w	r3, r3, #32
 80066ec:	6023      	strmi	r3, [r4, #0]
 80066ee:	b11d      	cbz	r5, 80066f8 <_printf_i+0x1a0>
 80066f0:	2310      	movs	r3, #16
 80066f2:	e7ab      	b.n	800664c <_printf_i+0xf4>
 80066f4:	4826      	ldr	r0, [pc, #152]	@ (8006790 <_printf_i+0x238>)
 80066f6:	e7e9      	b.n	80066cc <_printf_i+0x174>
 80066f8:	6823      	ldr	r3, [r4, #0]
 80066fa:	f023 0320 	bic.w	r3, r3, #32
 80066fe:	6023      	str	r3, [r4, #0]
 8006700:	e7f6      	b.n	80066f0 <_printf_i+0x198>
 8006702:	4616      	mov	r6, r2
 8006704:	e7bd      	b.n	8006682 <_printf_i+0x12a>
 8006706:	6833      	ldr	r3, [r6, #0]
 8006708:	6825      	ldr	r5, [r4, #0]
 800670a:	1d18      	adds	r0, r3, #4
 800670c:	6961      	ldr	r1, [r4, #20]
 800670e:	6030      	str	r0, [r6, #0]
 8006710:	062e      	lsls	r6, r5, #24
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	d501      	bpl.n	800671a <_printf_i+0x1c2>
 8006716:	6019      	str	r1, [r3, #0]
 8006718:	e002      	b.n	8006720 <_printf_i+0x1c8>
 800671a:	0668      	lsls	r0, r5, #25
 800671c:	d5fb      	bpl.n	8006716 <_printf_i+0x1be>
 800671e:	8019      	strh	r1, [r3, #0]
 8006720:	2300      	movs	r3, #0
 8006722:	4616      	mov	r6, r2
 8006724:	6123      	str	r3, [r4, #16]
 8006726:	e7bc      	b.n	80066a2 <_printf_i+0x14a>
 8006728:	6833      	ldr	r3, [r6, #0]
 800672a:	2100      	movs	r1, #0
 800672c:	1d1a      	adds	r2, r3, #4
 800672e:	6032      	str	r2, [r6, #0]
 8006730:	681e      	ldr	r6, [r3, #0]
 8006732:	6862      	ldr	r2, [r4, #4]
 8006734:	4630      	mov	r0, r6
 8006736:	f000 f97b 	bl	8006a30 <memchr>
 800673a:	b108      	cbz	r0, 8006740 <_printf_i+0x1e8>
 800673c:	1b80      	subs	r0, r0, r6
 800673e:	6060      	str	r0, [r4, #4]
 8006740:	6863      	ldr	r3, [r4, #4]
 8006742:	6123      	str	r3, [r4, #16]
 8006744:	2300      	movs	r3, #0
 8006746:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800674a:	e7aa      	b.n	80066a2 <_printf_i+0x14a>
 800674c:	4632      	mov	r2, r6
 800674e:	4649      	mov	r1, r9
 8006750:	4640      	mov	r0, r8
 8006752:	6923      	ldr	r3, [r4, #16]
 8006754:	47d0      	blx	sl
 8006756:	3001      	adds	r0, #1
 8006758:	d0ad      	beq.n	80066b6 <_printf_i+0x15e>
 800675a:	6823      	ldr	r3, [r4, #0]
 800675c:	079b      	lsls	r3, r3, #30
 800675e:	d413      	bmi.n	8006788 <_printf_i+0x230>
 8006760:	68e0      	ldr	r0, [r4, #12]
 8006762:	9b03      	ldr	r3, [sp, #12]
 8006764:	4298      	cmp	r0, r3
 8006766:	bfb8      	it	lt
 8006768:	4618      	movlt	r0, r3
 800676a:	e7a6      	b.n	80066ba <_printf_i+0x162>
 800676c:	2301      	movs	r3, #1
 800676e:	4632      	mov	r2, r6
 8006770:	4649      	mov	r1, r9
 8006772:	4640      	mov	r0, r8
 8006774:	47d0      	blx	sl
 8006776:	3001      	adds	r0, #1
 8006778:	d09d      	beq.n	80066b6 <_printf_i+0x15e>
 800677a:	3501      	adds	r5, #1
 800677c:	68e3      	ldr	r3, [r4, #12]
 800677e:	9903      	ldr	r1, [sp, #12]
 8006780:	1a5b      	subs	r3, r3, r1
 8006782:	42ab      	cmp	r3, r5
 8006784:	dcf2      	bgt.n	800676c <_printf_i+0x214>
 8006786:	e7eb      	b.n	8006760 <_printf_i+0x208>
 8006788:	2500      	movs	r5, #0
 800678a:	f104 0619 	add.w	r6, r4, #25
 800678e:	e7f5      	b.n	800677c <_printf_i+0x224>
 8006790:	08006bcb 	.word	0x08006bcb
 8006794:	08006bdc 	.word	0x08006bdc

08006798 <__sflush_r>:
 8006798:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800679c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800679e:	0716      	lsls	r6, r2, #28
 80067a0:	4605      	mov	r5, r0
 80067a2:	460c      	mov	r4, r1
 80067a4:	d454      	bmi.n	8006850 <__sflush_r+0xb8>
 80067a6:	684b      	ldr	r3, [r1, #4]
 80067a8:	2b00      	cmp	r3, #0
 80067aa:	dc02      	bgt.n	80067b2 <__sflush_r+0x1a>
 80067ac:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80067ae:	2b00      	cmp	r3, #0
 80067b0:	dd48      	ble.n	8006844 <__sflush_r+0xac>
 80067b2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80067b4:	2e00      	cmp	r6, #0
 80067b6:	d045      	beq.n	8006844 <__sflush_r+0xac>
 80067b8:	2300      	movs	r3, #0
 80067ba:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80067be:	682f      	ldr	r7, [r5, #0]
 80067c0:	6a21      	ldr	r1, [r4, #32]
 80067c2:	602b      	str	r3, [r5, #0]
 80067c4:	d030      	beq.n	8006828 <__sflush_r+0x90>
 80067c6:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80067c8:	89a3      	ldrh	r3, [r4, #12]
 80067ca:	0759      	lsls	r1, r3, #29
 80067cc:	d505      	bpl.n	80067da <__sflush_r+0x42>
 80067ce:	6863      	ldr	r3, [r4, #4]
 80067d0:	1ad2      	subs	r2, r2, r3
 80067d2:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80067d4:	b10b      	cbz	r3, 80067da <__sflush_r+0x42>
 80067d6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80067d8:	1ad2      	subs	r2, r2, r3
 80067da:	2300      	movs	r3, #0
 80067dc:	4628      	mov	r0, r5
 80067de:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80067e0:	6a21      	ldr	r1, [r4, #32]
 80067e2:	47b0      	blx	r6
 80067e4:	1c43      	adds	r3, r0, #1
 80067e6:	89a3      	ldrh	r3, [r4, #12]
 80067e8:	d106      	bne.n	80067f8 <__sflush_r+0x60>
 80067ea:	6829      	ldr	r1, [r5, #0]
 80067ec:	291d      	cmp	r1, #29
 80067ee:	d82b      	bhi.n	8006848 <__sflush_r+0xb0>
 80067f0:	4a28      	ldr	r2, [pc, #160]	@ (8006894 <__sflush_r+0xfc>)
 80067f2:	410a      	asrs	r2, r1
 80067f4:	07d6      	lsls	r6, r2, #31
 80067f6:	d427      	bmi.n	8006848 <__sflush_r+0xb0>
 80067f8:	2200      	movs	r2, #0
 80067fa:	6062      	str	r2, [r4, #4]
 80067fc:	6922      	ldr	r2, [r4, #16]
 80067fe:	04d9      	lsls	r1, r3, #19
 8006800:	6022      	str	r2, [r4, #0]
 8006802:	d504      	bpl.n	800680e <__sflush_r+0x76>
 8006804:	1c42      	adds	r2, r0, #1
 8006806:	d101      	bne.n	800680c <__sflush_r+0x74>
 8006808:	682b      	ldr	r3, [r5, #0]
 800680a:	b903      	cbnz	r3, 800680e <__sflush_r+0x76>
 800680c:	6560      	str	r0, [r4, #84]	@ 0x54
 800680e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006810:	602f      	str	r7, [r5, #0]
 8006812:	b1b9      	cbz	r1, 8006844 <__sflush_r+0xac>
 8006814:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006818:	4299      	cmp	r1, r3
 800681a:	d002      	beq.n	8006822 <__sflush_r+0x8a>
 800681c:	4628      	mov	r0, r5
 800681e:	f7ff fbf3 	bl	8006008 <_free_r>
 8006822:	2300      	movs	r3, #0
 8006824:	6363      	str	r3, [r4, #52]	@ 0x34
 8006826:	e00d      	b.n	8006844 <__sflush_r+0xac>
 8006828:	2301      	movs	r3, #1
 800682a:	4628      	mov	r0, r5
 800682c:	47b0      	blx	r6
 800682e:	4602      	mov	r2, r0
 8006830:	1c50      	adds	r0, r2, #1
 8006832:	d1c9      	bne.n	80067c8 <__sflush_r+0x30>
 8006834:	682b      	ldr	r3, [r5, #0]
 8006836:	2b00      	cmp	r3, #0
 8006838:	d0c6      	beq.n	80067c8 <__sflush_r+0x30>
 800683a:	2b1d      	cmp	r3, #29
 800683c:	d001      	beq.n	8006842 <__sflush_r+0xaa>
 800683e:	2b16      	cmp	r3, #22
 8006840:	d11d      	bne.n	800687e <__sflush_r+0xe6>
 8006842:	602f      	str	r7, [r5, #0]
 8006844:	2000      	movs	r0, #0
 8006846:	e021      	b.n	800688c <__sflush_r+0xf4>
 8006848:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800684c:	b21b      	sxth	r3, r3
 800684e:	e01a      	b.n	8006886 <__sflush_r+0xee>
 8006850:	690f      	ldr	r7, [r1, #16]
 8006852:	2f00      	cmp	r7, #0
 8006854:	d0f6      	beq.n	8006844 <__sflush_r+0xac>
 8006856:	0793      	lsls	r3, r2, #30
 8006858:	bf18      	it	ne
 800685a:	2300      	movne	r3, #0
 800685c:	680e      	ldr	r6, [r1, #0]
 800685e:	bf08      	it	eq
 8006860:	694b      	ldreq	r3, [r1, #20]
 8006862:	1bf6      	subs	r6, r6, r7
 8006864:	600f      	str	r7, [r1, #0]
 8006866:	608b      	str	r3, [r1, #8]
 8006868:	2e00      	cmp	r6, #0
 800686a:	ddeb      	ble.n	8006844 <__sflush_r+0xac>
 800686c:	4633      	mov	r3, r6
 800686e:	463a      	mov	r2, r7
 8006870:	4628      	mov	r0, r5
 8006872:	6a21      	ldr	r1, [r4, #32]
 8006874:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8006878:	47e0      	blx	ip
 800687a:	2800      	cmp	r0, #0
 800687c:	dc07      	bgt.n	800688e <__sflush_r+0xf6>
 800687e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006882:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006886:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800688a:	81a3      	strh	r3, [r4, #12]
 800688c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800688e:	4407      	add	r7, r0
 8006890:	1a36      	subs	r6, r6, r0
 8006892:	e7e9      	b.n	8006868 <__sflush_r+0xd0>
 8006894:	dfbffffe 	.word	0xdfbffffe

08006898 <_fflush_r>:
 8006898:	b538      	push	{r3, r4, r5, lr}
 800689a:	690b      	ldr	r3, [r1, #16]
 800689c:	4605      	mov	r5, r0
 800689e:	460c      	mov	r4, r1
 80068a0:	b913      	cbnz	r3, 80068a8 <_fflush_r+0x10>
 80068a2:	2500      	movs	r5, #0
 80068a4:	4628      	mov	r0, r5
 80068a6:	bd38      	pop	{r3, r4, r5, pc}
 80068a8:	b118      	cbz	r0, 80068b2 <_fflush_r+0x1a>
 80068aa:	6a03      	ldr	r3, [r0, #32]
 80068ac:	b90b      	cbnz	r3, 80068b2 <_fflush_r+0x1a>
 80068ae:	f7ff faa3 	bl	8005df8 <__sinit>
 80068b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80068b6:	2b00      	cmp	r3, #0
 80068b8:	d0f3      	beq.n	80068a2 <_fflush_r+0xa>
 80068ba:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80068bc:	07d0      	lsls	r0, r2, #31
 80068be:	d404      	bmi.n	80068ca <_fflush_r+0x32>
 80068c0:	0599      	lsls	r1, r3, #22
 80068c2:	d402      	bmi.n	80068ca <_fflush_r+0x32>
 80068c4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80068c6:	f7ff fb9c 	bl	8006002 <__retarget_lock_acquire_recursive>
 80068ca:	4628      	mov	r0, r5
 80068cc:	4621      	mov	r1, r4
 80068ce:	f7ff ff63 	bl	8006798 <__sflush_r>
 80068d2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80068d4:	4605      	mov	r5, r0
 80068d6:	07da      	lsls	r2, r3, #31
 80068d8:	d4e4      	bmi.n	80068a4 <_fflush_r+0xc>
 80068da:	89a3      	ldrh	r3, [r4, #12]
 80068dc:	059b      	lsls	r3, r3, #22
 80068de:	d4e1      	bmi.n	80068a4 <_fflush_r+0xc>
 80068e0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80068e2:	f7ff fb8f 	bl	8006004 <__retarget_lock_release_recursive>
 80068e6:	e7dd      	b.n	80068a4 <_fflush_r+0xc>

080068e8 <__swbuf_r>:
 80068e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068ea:	460e      	mov	r6, r1
 80068ec:	4614      	mov	r4, r2
 80068ee:	4605      	mov	r5, r0
 80068f0:	b118      	cbz	r0, 80068fa <__swbuf_r+0x12>
 80068f2:	6a03      	ldr	r3, [r0, #32]
 80068f4:	b90b      	cbnz	r3, 80068fa <__swbuf_r+0x12>
 80068f6:	f7ff fa7f 	bl	8005df8 <__sinit>
 80068fa:	69a3      	ldr	r3, [r4, #24]
 80068fc:	60a3      	str	r3, [r4, #8]
 80068fe:	89a3      	ldrh	r3, [r4, #12]
 8006900:	071a      	lsls	r2, r3, #28
 8006902:	d501      	bpl.n	8006908 <__swbuf_r+0x20>
 8006904:	6923      	ldr	r3, [r4, #16]
 8006906:	b943      	cbnz	r3, 800691a <__swbuf_r+0x32>
 8006908:	4621      	mov	r1, r4
 800690a:	4628      	mov	r0, r5
 800690c:	f000 f82a 	bl	8006964 <__swsetup_r>
 8006910:	b118      	cbz	r0, 800691a <__swbuf_r+0x32>
 8006912:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 8006916:	4638      	mov	r0, r7
 8006918:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800691a:	6823      	ldr	r3, [r4, #0]
 800691c:	6922      	ldr	r2, [r4, #16]
 800691e:	b2f6      	uxtb	r6, r6
 8006920:	1a98      	subs	r0, r3, r2
 8006922:	6963      	ldr	r3, [r4, #20]
 8006924:	4637      	mov	r7, r6
 8006926:	4283      	cmp	r3, r0
 8006928:	dc05      	bgt.n	8006936 <__swbuf_r+0x4e>
 800692a:	4621      	mov	r1, r4
 800692c:	4628      	mov	r0, r5
 800692e:	f7ff ffb3 	bl	8006898 <_fflush_r>
 8006932:	2800      	cmp	r0, #0
 8006934:	d1ed      	bne.n	8006912 <__swbuf_r+0x2a>
 8006936:	68a3      	ldr	r3, [r4, #8]
 8006938:	3b01      	subs	r3, #1
 800693a:	60a3      	str	r3, [r4, #8]
 800693c:	6823      	ldr	r3, [r4, #0]
 800693e:	1c5a      	adds	r2, r3, #1
 8006940:	6022      	str	r2, [r4, #0]
 8006942:	701e      	strb	r6, [r3, #0]
 8006944:	6962      	ldr	r2, [r4, #20]
 8006946:	1c43      	adds	r3, r0, #1
 8006948:	429a      	cmp	r2, r3
 800694a:	d004      	beq.n	8006956 <__swbuf_r+0x6e>
 800694c:	89a3      	ldrh	r3, [r4, #12]
 800694e:	07db      	lsls	r3, r3, #31
 8006950:	d5e1      	bpl.n	8006916 <__swbuf_r+0x2e>
 8006952:	2e0a      	cmp	r6, #10
 8006954:	d1df      	bne.n	8006916 <__swbuf_r+0x2e>
 8006956:	4621      	mov	r1, r4
 8006958:	4628      	mov	r0, r5
 800695a:	f7ff ff9d 	bl	8006898 <_fflush_r>
 800695e:	2800      	cmp	r0, #0
 8006960:	d0d9      	beq.n	8006916 <__swbuf_r+0x2e>
 8006962:	e7d6      	b.n	8006912 <__swbuf_r+0x2a>

08006964 <__swsetup_r>:
 8006964:	b538      	push	{r3, r4, r5, lr}
 8006966:	4b29      	ldr	r3, [pc, #164]	@ (8006a0c <__swsetup_r+0xa8>)
 8006968:	4605      	mov	r5, r0
 800696a:	6818      	ldr	r0, [r3, #0]
 800696c:	460c      	mov	r4, r1
 800696e:	b118      	cbz	r0, 8006978 <__swsetup_r+0x14>
 8006970:	6a03      	ldr	r3, [r0, #32]
 8006972:	b90b      	cbnz	r3, 8006978 <__swsetup_r+0x14>
 8006974:	f7ff fa40 	bl	8005df8 <__sinit>
 8006978:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800697c:	0719      	lsls	r1, r3, #28
 800697e:	d422      	bmi.n	80069c6 <__swsetup_r+0x62>
 8006980:	06da      	lsls	r2, r3, #27
 8006982:	d407      	bmi.n	8006994 <__swsetup_r+0x30>
 8006984:	2209      	movs	r2, #9
 8006986:	602a      	str	r2, [r5, #0]
 8006988:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800698c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8006990:	81a3      	strh	r3, [r4, #12]
 8006992:	e033      	b.n	80069fc <__swsetup_r+0x98>
 8006994:	0758      	lsls	r0, r3, #29
 8006996:	d512      	bpl.n	80069be <__swsetup_r+0x5a>
 8006998:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800699a:	b141      	cbz	r1, 80069ae <__swsetup_r+0x4a>
 800699c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80069a0:	4299      	cmp	r1, r3
 80069a2:	d002      	beq.n	80069aa <__swsetup_r+0x46>
 80069a4:	4628      	mov	r0, r5
 80069a6:	f7ff fb2f 	bl	8006008 <_free_r>
 80069aa:	2300      	movs	r3, #0
 80069ac:	6363      	str	r3, [r4, #52]	@ 0x34
 80069ae:	89a3      	ldrh	r3, [r4, #12]
 80069b0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80069b4:	81a3      	strh	r3, [r4, #12]
 80069b6:	2300      	movs	r3, #0
 80069b8:	6063      	str	r3, [r4, #4]
 80069ba:	6923      	ldr	r3, [r4, #16]
 80069bc:	6023      	str	r3, [r4, #0]
 80069be:	89a3      	ldrh	r3, [r4, #12]
 80069c0:	f043 0308 	orr.w	r3, r3, #8
 80069c4:	81a3      	strh	r3, [r4, #12]
 80069c6:	6923      	ldr	r3, [r4, #16]
 80069c8:	b94b      	cbnz	r3, 80069de <__swsetup_r+0x7a>
 80069ca:	89a3      	ldrh	r3, [r4, #12]
 80069cc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80069d0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80069d4:	d003      	beq.n	80069de <__swsetup_r+0x7a>
 80069d6:	4621      	mov	r1, r4
 80069d8:	4628      	mov	r0, r5
 80069da:	f000 f85c 	bl	8006a96 <__smakebuf_r>
 80069de:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80069e2:	f013 0201 	ands.w	r2, r3, #1
 80069e6:	d00a      	beq.n	80069fe <__swsetup_r+0x9a>
 80069e8:	2200      	movs	r2, #0
 80069ea:	60a2      	str	r2, [r4, #8]
 80069ec:	6962      	ldr	r2, [r4, #20]
 80069ee:	4252      	negs	r2, r2
 80069f0:	61a2      	str	r2, [r4, #24]
 80069f2:	6922      	ldr	r2, [r4, #16]
 80069f4:	b942      	cbnz	r2, 8006a08 <__swsetup_r+0xa4>
 80069f6:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80069fa:	d1c5      	bne.n	8006988 <__swsetup_r+0x24>
 80069fc:	bd38      	pop	{r3, r4, r5, pc}
 80069fe:	0799      	lsls	r1, r3, #30
 8006a00:	bf58      	it	pl
 8006a02:	6962      	ldrpl	r2, [r4, #20]
 8006a04:	60a2      	str	r2, [r4, #8]
 8006a06:	e7f4      	b.n	80069f2 <__swsetup_r+0x8e>
 8006a08:	2000      	movs	r0, #0
 8006a0a:	e7f7      	b.n	80069fc <__swsetup_r+0x98>
 8006a0c:	2000001c 	.word	0x2000001c

08006a10 <_sbrk_r>:
 8006a10:	b538      	push	{r3, r4, r5, lr}
 8006a12:	2300      	movs	r3, #0
 8006a14:	4d05      	ldr	r5, [pc, #20]	@ (8006a2c <_sbrk_r+0x1c>)
 8006a16:	4604      	mov	r4, r0
 8006a18:	4608      	mov	r0, r1
 8006a1a:	602b      	str	r3, [r5, #0]
 8006a1c:	f7fd ffa2 	bl	8004964 <_sbrk>
 8006a20:	1c43      	adds	r3, r0, #1
 8006a22:	d102      	bne.n	8006a2a <_sbrk_r+0x1a>
 8006a24:	682b      	ldr	r3, [r5, #0]
 8006a26:	b103      	cbz	r3, 8006a2a <_sbrk_r+0x1a>
 8006a28:	6023      	str	r3, [r4, #0]
 8006a2a:	bd38      	pop	{r3, r4, r5, pc}
 8006a2c:	20000214 	.word	0x20000214

08006a30 <memchr>:
 8006a30:	4603      	mov	r3, r0
 8006a32:	b510      	push	{r4, lr}
 8006a34:	b2c9      	uxtb	r1, r1
 8006a36:	4402      	add	r2, r0
 8006a38:	4293      	cmp	r3, r2
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	d101      	bne.n	8006a42 <memchr+0x12>
 8006a3e:	2000      	movs	r0, #0
 8006a40:	e003      	b.n	8006a4a <memchr+0x1a>
 8006a42:	7804      	ldrb	r4, [r0, #0]
 8006a44:	3301      	adds	r3, #1
 8006a46:	428c      	cmp	r4, r1
 8006a48:	d1f6      	bne.n	8006a38 <memchr+0x8>
 8006a4a:	bd10      	pop	{r4, pc}

08006a4c <__swhatbuf_r>:
 8006a4c:	b570      	push	{r4, r5, r6, lr}
 8006a4e:	460c      	mov	r4, r1
 8006a50:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006a54:	4615      	mov	r5, r2
 8006a56:	2900      	cmp	r1, #0
 8006a58:	461e      	mov	r6, r3
 8006a5a:	b096      	sub	sp, #88	@ 0x58
 8006a5c:	da0c      	bge.n	8006a78 <__swhatbuf_r+0x2c>
 8006a5e:	89a3      	ldrh	r3, [r4, #12]
 8006a60:	2100      	movs	r1, #0
 8006a62:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8006a66:	bf14      	ite	ne
 8006a68:	2340      	movne	r3, #64	@ 0x40
 8006a6a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8006a6e:	2000      	movs	r0, #0
 8006a70:	6031      	str	r1, [r6, #0]
 8006a72:	602b      	str	r3, [r5, #0]
 8006a74:	b016      	add	sp, #88	@ 0x58
 8006a76:	bd70      	pop	{r4, r5, r6, pc}
 8006a78:	466a      	mov	r2, sp
 8006a7a:	f000 f849 	bl	8006b10 <_fstat_r>
 8006a7e:	2800      	cmp	r0, #0
 8006a80:	dbed      	blt.n	8006a5e <__swhatbuf_r+0x12>
 8006a82:	9901      	ldr	r1, [sp, #4]
 8006a84:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8006a88:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8006a8c:	4259      	negs	r1, r3
 8006a8e:	4159      	adcs	r1, r3
 8006a90:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8006a94:	e7eb      	b.n	8006a6e <__swhatbuf_r+0x22>

08006a96 <__smakebuf_r>:
 8006a96:	898b      	ldrh	r3, [r1, #12]
 8006a98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006a9a:	079d      	lsls	r5, r3, #30
 8006a9c:	4606      	mov	r6, r0
 8006a9e:	460c      	mov	r4, r1
 8006aa0:	d507      	bpl.n	8006ab2 <__smakebuf_r+0x1c>
 8006aa2:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006aa6:	6023      	str	r3, [r4, #0]
 8006aa8:	6123      	str	r3, [r4, #16]
 8006aaa:	2301      	movs	r3, #1
 8006aac:	6163      	str	r3, [r4, #20]
 8006aae:	b003      	add	sp, #12
 8006ab0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006ab2:	466a      	mov	r2, sp
 8006ab4:	ab01      	add	r3, sp, #4
 8006ab6:	f7ff ffc9 	bl	8006a4c <__swhatbuf_r>
 8006aba:	9f00      	ldr	r7, [sp, #0]
 8006abc:	4605      	mov	r5, r0
 8006abe:	4639      	mov	r1, r7
 8006ac0:	4630      	mov	r0, r6
 8006ac2:	f7ff fb0b 	bl	80060dc <_malloc_r>
 8006ac6:	b948      	cbnz	r0, 8006adc <__smakebuf_r+0x46>
 8006ac8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006acc:	059a      	lsls	r2, r3, #22
 8006ace:	d4ee      	bmi.n	8006aae <__smakebuf_r+0x18>
 8006ad0:	f023 0303 	bic.w	r3, r3, #3
 8006ad4:	f043 0302 	orr.w	r3, r3, #2
 8006ad8:	81a3      	strh	r3, [r4, #12]
 8006ada:	e7e2      	b.n	8006aa2 <__smakebuf_r+0xc>
 8006adc:	89a3      	ldrh	r3, [r4, #12]
 8006ade:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8006ae2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006ae6:	81a3      	strh	r3, [r4, #12]
 8006ae8:	9b01      	ldr	r3, [sp, #4]
 8006aea:	6020      	str	r0, [r4, #0]
 8006aec:	b15b      	cbz	r3, 8006b06 <__smakebuf_r+0x70>
 8006aee:	4630      	mov	r0, r6
 8006af0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006af4:	f000 f81e 	bl	8006b34 <_isatty_r>
 8006af8:	b128      	cbz	r0, 8006b06 <__smakebuf_r+0x70>
 8006afa:	89a3      	ldrh	r3, [r4, #12]
 8006afc:	f023 0303 	bic.w	r3, r3, #3
 8006b00:	f043 0301 	orr.w	r3, r3, #1
 8006b04:	81a3      	strh	r3, [r4, #12]
 8006b06:	89a3      	ldrh	r3, [r4, #12]
 8006b08:	431d      	orrs	r5, r3
 8006b0a:	81a5      	strh	r5, [r4, #12]
 8006b0c:	e7cf      	b.n	8006aae <__smakebuf_r+0x18>
	...

08006b10 <_fstat_r>:
 8006b10:	b538      	push	{r3, r4, r5, lr}
 8006b12:	2300      	movs	r3, #0
 8006b14:	4d06      	ldr	r5, [pc, #24]	@ (8006b30 <_fstat_r+0x20>)
 8006b16:	4604      	mov	r4, r0
 8006b18:	4608      	mov	r0, r1
 8006b1a:	4611      	mov	r1, r2
 8006b1c:	602b      	str	r3, [r5, #0]
 8006b1e:	f7fd fefb 	bl	8004918 <_fstat>
 8006b22:	1c43      	adds	r3, r0, #1
 8006b24:	d102      	bne.n	8006b2c <_fstat_r+0x1c>
 8006b26:	682b      	ldr	r3, [r5, #0]
 8006b28:	b103      	cbz	r3, 8006b2c <_fstat_r+0x1c>
 8006b2a:	6023      	str	r3, [r4, #0]
 8006b2c:	bd38      	pop	{r3, r4, r5, pc}
 8006b2e:	bf00      	nop
 8006b30:	20000214 	.word	0x20000214

08006b34 <_isatty_r>:
 8006b34:	b538      	push	{r3, r4, r5, lr}
 8006b36:	2300      	movs	r3, #0
 8006b38:	4d05      	ldr	r5, [pc, #20]	@ (8006b50 <_isatty_r+0x1c>)
 8006b3a:	4604      	mov	r4, r0
 8006b3c:	4608      	mov	r0, r1
 8006b3e:	602b      	str	r3, [r5, #0]
 8006b40:	f7fd fef9 	bl	8004936 <_isatty>
 8006b44:	1c43      	adds	r3, r0, #1
 8006b46:	d102      	bne.n	8006b4e <_isatty_r+0x1a>
 8006b48:	682b      	ldr	r3, [r5, #0]
 8006b4a:	b103      	cbz	r3, 8006b4e <_isatty_r+0x1a>
 8006b4c:	6023      	str	r3, [r4, #0]
 8006b4e:	bd38      	pop	{r3, r4, r5, pc}
 8006b50:	20000214 	.word	0x20000214

08006b54 <_init>:
 8006b54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b56:	bf00      	nop
 8006b58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b5a:	bc08      	pop	{r3}
 8006b5c:	469e      	mov	lr, r3
 8006b5e:	4770      	bx	lr

08006b60 <_fini>:
 8006b60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b62:	bf00      	nop
 8006b64:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006b66:	bc08      	pop	{r3}
 8006b68:	469e      	mov	lr, r3
 8006b6a:	4770      	bx	lr
